// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVAX_NET_SSL_SNISERVERNAME_H
#define SCAPIX_JAVAX_NET_SSL_SNISERVERNAME_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace javax::net::ssl {

class SNIServerName : public object_base<SCAPIX_META_STRING("javax/net/ssl/SNIServerName"),
	java::lang::Object>
{
public:

	jint getType();
	ref<link::java::array<jbyte>> getEncoded();
	jboolean equals(ref<java::lang::Object> other);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	SNIServerName(handle_type h) : base_(h) {}

};

} // namespace javax::net::ssl
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace javax::net::ssl {

inline jint SNIServerName::getType() { return call_method<SCAPIX_META_STRING("getType"), jint>(); }
inline ref<link::java::array<jbyte>> SNIServerName::getEncoded() { return call_method<SCAPIX_META_STRING("getEncoded"), ref<link::java::array<jbyte>>>(); }
inline jboolean SNIServerName::equals(ref<java::lang::Object> other) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(other); }
inline jint SNIServerName::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> SNIServerName::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace javax::net::ssl
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_NET_SSL_SNISERVERNAME_H
