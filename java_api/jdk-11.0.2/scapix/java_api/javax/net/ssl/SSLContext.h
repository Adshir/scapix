// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVAX_NET_SSL_SSLCONTEXT_H
#define SCAPIX_JAVAX_NET_SSL_SSLCONTEXT_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::security { class Provider; }
namespace java::security { class SecureRandom; }
namespace javax::net::ssl { class KeyManager; }
namespace javax::net::ssl { class SSLEngine; }
namespace javax::net::ssl { class SSLParameters; }
namespace javax::net::ssl { class SSLServerSocketFactory; }
namespace javax::net::ssl { class SSLSessionContext; }
namespace javax::net::ssl { class SSLSocketFactory; }
namespace javax::net::ssl { class TrustManager; }

namespace javax::net::ssl {

class SSLContext : public object_base<SCAPIX_META_STRING("javax/net/ssl/SSLContext"),
	java::lang::Object>
{
public:

	static ref<javax::net::ssl::SSLContext> getDefault();
	static void setDefault(ref<javax::net::ssl::SSLContext> context);
	static ref<javax::net::ssl::SSLContext> getInstance(ref<java::lang::String> protocol);
	static ref<javax::net::ssl::SSLContext> getInstance(ref<java::lang::String> protocol, ref<java::lang::String> provider);
	static ref<javax::net::ssl::SSLContext> getInstance(ref<java::lang::String> protocol, ref<java::security::Provider> provider);
	ref<java::lang::String> getProtocol();
	ref<java::security::Provider> getProvider();
	void init(ref<link::java::array<javax::net::ssl::KeyManager>> km, ref<link::java::array<javax::net::ssl::TrustManager>> tm, ref<java::security::SecureRandom> random);
	ref<javax::net::ssl::SSLSocketFactory> getSocketFactory();
	ref<javax::net::ssl::SSLServerSocketFactory> getServerSocketFactory();
	ref<javax::net::ssl::SSLEngine> createSSLEngine();
	ref<javax::net::ssl::SSLEngine> createSSLEngine(ref<java::lang::String> peerHost, jint peerPort);
	ref<javax::net::ssl::SSLSessionContext> getServerSessionContext();
	ref<javax::net::ssl::SSLSessionContext> getClientSessionContext();
	ref<javax::net::ssl::SSLParameters> getDefaultSSLParameters();
	ref<javax::net::ssl::SSLParameters> getSupportedSSLParameters();

protected:

	SSLContext(handle_type h) : base_(h) {}

};

} // namespace javax::net::ssl
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/Provider.h>
#include <scapix/java_api/java/security/SecureRandom.h>
#include <scapix/java_api/javax/net/ssl/KeyManager.h>
#include <scapix/java_api/javax/net/ssl/SSLEngine.h>
#include <scapix/java_api/javax/net/ssl/SSLParameters.h>
#include <scapix/java_api/javax/net/ssl/SSLServerSocketFactory.h>
#include <scapix/java_api/javax/net/ssl/SSLSessionContext.h>
#include <scapix/java_api/javax/net/ssl/SSLSocketFactory.h>
#include <scapix/java_api/javax/net/ssl/TrustManager.h>

namespace scapix::java_api {
namespace javax::net::ssl {

inline ref<javax::net::ssl::SSLContext> SSLContext::getDefault() { return call_static_method<SCAPIX_META_STRING("getDefault"), ref<javax::net::ssl::SSLContext>>(); }
inline void SSLContext::setDefault(ref<javax::net::ssl::SSLContext> context) { return call_static_method<SCAPIX_META_STRING("setDefault"), void>(context); }
inline ref<javax::net::ssl::SSLContext> SSLContext::getInstance(ref<java::lang::String> protocol) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::net::ssl::SSLContext>>(protocol); }
inline ref<javax::net::ssl::SSLContext> SSLContext::getInstance(ref<java::lang::String> protocol, ref<java::lang::String> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::net::ssl::SSLContext>>(protocol, provider); }
inline ref<javax::net::ssl::SSLContext> SSLContext::getInstance(ref<java::lang::String> protocol, ref<java::security::Provider> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::net::ssl::SSLContext>>(protocol, provider); }
inline ref<java::lang::String> SSLContext::getProtocol() { return call_method<SCAPIX_META_STRING("getProtocol"), ref<java::lang::String>>(); }
inline ref<java::security::Provider> SSLContext::getProvider() { return call_method<SCAPIX_META_STRING("getProvider"), ref<java::security::Provider>>(); }
inline void SSLContext::init(ref<link::java::array<javax::net::ssl::KeyManager>> km, ref<link::java::array<javax::net::ssl::TrustManager>> tm, ref<java::security::SecureRandom> random) { return call_method<SCAPIX_META_STRING("init"), void>(km, tm, random); }
inline ref<javax::net::ssl::SSLSocketFactory> SSLContext::getSocketFactory() { return call_method<SCAPIX_META_STRING("getSocketFactory"), ref<javax::net::ssl::SSLSocketFactory>>(); }
inline ref<javax::net::ssl::SSLServerSocketFactory> SSLContext::getServerSocketFactory() { return call_method<SCAPIX_META_STRING("getServerSocketFactory"), ref<javax::net::ssl::SSLServerSocketFactory>>(); }
inline ref<javax::net::ssl::SSLEngine> SSLContext::createSSLEngine() { return call_method<SCAPIX_META_STRING("createSSLEngine"), ref<javax::net::ssl::SSLEngine>>(); }
inline ref<javax::net::ssl::SSLEngine> SSLContext::createSSLEngine(ref<java::lang::String> peerHost, jint peerPort) { return call_method<SCAPIX_META_STRING("createSSLEngine"), ref<javax::net::ssl::SSLEngine>>(peerHost, peerPort); }
inline ref<javax::net::ssl::SSLSessionContext> SSLContext::getServerSessionContext() { return call_method<SCAPIX_META_STRING("getServerSessionContext"), ref<javax::net::ssl::SSLSessionContext>>(); }
inline ref<javax::net::ssl::SSLSessionContext> SSLContext::getClientSessionContext() { return call_method<SCAPIX_META_STRING("getClientSessionContext"), ref<javax::net::ssl::SSLSessionContext>>(); }
inline ref<javax::net::ssl::SSLParameters> SSLContext::getDefaultSSLParameters() { return call_method<SCAPIX_META_STRING("getDefaultSSLParameters"), ref<javax::net::ssl::SSLParameters>>(); }
inline ref<javax::net::ssl::SSLParameters> SSLContext::getSupportedSSLParameters() { return call_method<SCAPIX_META_STRING("getSupportedSSLParameters"), ref<javax::net::ssl::SSLParameters>>(); }

} // namespace javax::net::ssl
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_NET_SSL_SSLCONTEXT_H
