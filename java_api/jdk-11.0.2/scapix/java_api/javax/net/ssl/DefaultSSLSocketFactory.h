// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/javax/net/ssl/SSLSocketFactory.h>

#ifndef SCAPIX_JAVAX_NET_SSL_DEFAULTSSLSOCKETFACTORY_H
#define SCAPIX_JAVAX_NET_SSL_DEFAULTSSLSOCKETFACTORY_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::net { class InetAddress; }
namespace java::net { class Socket; }

namespace javax::net::ssl {

// private
class DefaultSSLSocketFactory : public object_base<SCAPIX_META_STRING("javax/net/ssl/DefaultSSLSocketFactory"),
	javax::net::ssl::SSLSocketFactory>
{
public:

	ref<java::net::Socket> createSocket();
	ref<java::net::Socket> createSocket(ref<java::lang::String> host, jint port);
	ref<java::net::Socket> createSocket(ref<java::net::Socket> s, ref<java::lang::String> host, jint port, jboolean autoClose);
	ref<java::net::Socket> createSocket(ref<java::net::InetAddress> address, jint port);
	ref<java::net::Socket> createSocket(ref<java::lang::String> host, jint port, ref<java::net::InetAddress> clientAddress, jint clientPort);
	ref<java::net::Socket> createSocket(ref<java::net::InetAddress> address, jint port, ref<java::net::InetAddress> clientAddress, jint clientPort);
	ref<link::java::array<java::lang::String>> getDefaultCipherSuites();
	ref<link::java::array<java::lang::String>> getSupportedCipherSuites();

protected:

	DefaultSSLSocketFactory(handle_type h) : base_(h) {}

};

} // namespace javax::net::ssl
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/net/Socket.h>

namespace scapix::java_api {
namespace javax::net::ssl {

inline ref<java::net::Socket> DefaultSSLSocketFactory::createSocket() { return call_method<SCAPIX_META_STRING("createSocket"), ref<java::net::Socket>>(); }
inline ref<java::net::Socket> DefaultSSLSocketFactory::createSocket(ref<java::lang::String> host, jint port) { return call_method<SCAPIX_META_STRING("createSocket"), ref<java::net::Socket>>(host, port); }
inline ref<java::net::Socket> DefaultSSLSocketFactory::createSocket(ref<java::net::Socket> s, ref<java::lang::String> host, jint port, jboolean autoClose) { return call_method<SCAPIX_META_STRING("createSocket"), ref<java::net::Socket>>(s, host, port, autoClose); }
inline ref<java::net::Socket> DefaultSSLSocketFactory::createSocket(ref<java::net::InetAddress> address, jint port) { return call_method<SCAPIX_META_STRING("createSocket"), ref<java::net::Socket>>(address, port); }
inline ref<java::net::Socket> DefaultSSLSocketFactory::createSocket(ref<java::lang::String> host, jint port, ref<java::net::InetAddress> clientAddress, jint clientPort) { return call_method<SCAPIX_META_STRING("createSocket"), ref<java::net::Socket>>(host, port, clientAddress, clientPort); }
inline ref<java::net::Socket> DefaultSSLSocketFactory::createSocket(ref<java::net::InetAddress> address, jint port, ref<java::net::InetAddress> clientAddress, jint clientPort) { return call_method<SCAPIX_META_STRING("createSocket"), ref<java::net::Socket>>(address, port, clientAddress, clientPort); }
inline ref<link::java::array<java::lang::String>> DefaultSSLSocketFactory::getDefaultCipherSuites() { return call_method<SCAPIX_META_STRING("getDefaultCipherSuites"), ref<link::java::array<java::lang::String>>>(); }
inline ref<link::java::array<java::lang::String>> DefaultSSLSocketFactory::getSupportedCipherSuites() { return call_method<SCAPIX_META_STRING("getSupportedCipherSuites"), ref<link::java::array<java::lang::String>>>(); }

} // namespace javax::net::ssl
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_NET_SSL_DEFAULTSSLSOCKETFACTORY_H
