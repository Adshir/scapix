// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVAX_CRYPTO_KEYAGREEMENT_H
#define SCAPIX_JAVAX_CRYPTO_KEYAGREEMENT_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::security { class Key; }
namespace java::security { class Provider; }
namespace java::security { class SecureRandom; }
namespace java::security::spec { class AlgorithmParameterSpec; }
namespace javax::crypto { class SecretKey; }

namespace javax::crypto {

class KeyAgreement : public object_base<SCAPIX_META_STRING("javax/crypto/KeyAgreement"),
	java::lang::Object>
{
public:

	ref<java::lang::String> getAlgorithm();
	static ref<javax::crypto::KeyAgreement> getInstance(ref<java::lang::String> algorithm);
	static ref<javax::crypto::KeyAgreement> getInstance(ref<java::lang::String> algorithm, ref<java::lang::String> provider);
	static ref<javax::crypto::KeyAgreement> getInstance(ref<java::lang::String> algorithm, ref<java::security::Provider> provider);
	ref<java::security::Provider> getProvider();
	void init(ref<java::security::Key> key);
	void init(ref<java::security::Key> key, ref<java::security::SecureRandom> random);
	void init(ref<java::security::Key> key, ref<java::security::spec::AlgorithmParameterSpec> params);
	void init(ref<java::security::Key> key, ref<java::security::spec::AlgorithmParameterSpec> params, ref<java::security::SecureRandom> random);
	ref<java::security::Key> doPhase(ref<java::security::Key> key, jboolean lastPhase);
	ref<link::java::array<jbyte>> generateSecret();
	jint generateSecret(ref<link::java::array<jbyte>> sharedSecret, jint offset);
	ref<javax::crypto::SecretKey> generateSecret(ref<java::lang::String> algorithm);

protected:

	KeyAgreement(handle_type h) : base_(h) {}

};

} // namespace javax::crypto
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/Key.h>
#include <scapix/java_api/java/security/Provider.h>
#include <scapix/java_api/java/security/SecureRandom.h>
#include <scapix/java_api/java/security/spec/AlgorithmParameterSpec.h>
#include <scapix/java_api/javax/crypto/SecretKey.h>

namespace scapix::java_api {
namespace javax::crypto {

inline ref<java::lang::String> KeyAgreement::getAlgorithm() { return call_method<SCAPIX_META_STRING("getAlgorithm"), ref<java::lang::String>>(); }
inline ref<javax::crypto::KeyAgreement> KeyAgreement::getInstance(ref<java::lang::String> algorithm) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::crypto::KeyAgreement>>(algorithm); }
inline ref<javax::crypto::KeyAgreement> KeyAgreement::getInstance(ref<java::lang::String> algorithm, ref<java::lang::String> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::crypto::KeyAgreement>>(algorithm, provider); }
inline ref<javax::crypto::KeyAgreement> KeyAgreement::getInstance(ref<java::lang::String> algorithm, ref<java::security::Provider> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::crypto::KeyAgreement>>(algorithm, provider); }
inline ref<java::security::Provider> KeyAgreement::getProvider() { return call_method<SCAPIX_META_STRING("getProvider"), ref<java::security::Provider>>(); }
inline void KeyAgreement::init(ref<java::security::Key> key) { return call_method<SCAPIX_META_STRING("init"), void>(key); }
inline void KeyAgreement::init(ref<java::security::Key> key, ref<java::security::SecureRandom> random) { return call_method<SCAPIX_META_STRING("init"), void>(key, random); }
inline void KeyAgreement::init(ref<java::security::Key> key, ref<java::security::spec::AlgorithmParameterSpec> params) { return call_method<SCAPIX_META_STRING("init"), void>(key, params); }
inline void KeyAgreement::init(ref<java::security::Key> key, ref<java::security::spec::AlgorithmParameterSpec> params, ref<java::security::SecureRandom> random) { return call_method<SCAPIX_META_STRING("init"), void>(key, params, random); }
inline ref<java::security::Key> KeyAgreement::doPhase(ref<java::security::Key> key, jboolean lastPhase) { return call_method<SCAPIX_META_STRING("doPhase"), ref<java::security::Key>>(key, lastPhase); }
inline ref<link::java::array<jbyte>> KeyAgreement::generateSecret() { return call_method<SCAPIX_META_STRING("generateSecret"), ref<link::java::array<jbyte>>>(); }
inline jint KeyAgreement::generateSecret(ref<link::java::array<jbyte>> sharedSecret, jint offset) { return call_method<SCAPIX_META_STRING("generateSecret"), jint>(sharedSecret, offset); }
inline ref<javax::crypto::SecretKey> KeyAgreement::generateSecret(ref<java::lang::String> algorithm) { return call_method<SCAPIX_META_STRING("generateSecret"), ref<javax::crypto::SecretKey>>(algorithm); }

} // namespace javax::crypto
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_CRYPTO_KEYAGREEMENT_H
