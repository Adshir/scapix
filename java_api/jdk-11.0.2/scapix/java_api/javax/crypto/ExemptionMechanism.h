// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVAX_CRYPTO_EXEMPTIONMECHANISM_H
#define SCAPIX_JAVAX_CRYPTO_EXEMPTIONMECHANISM_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::security { class AlgorithmParameters; }
namespace java::security { class Key; }
namespace java::security { class Provider; }
namespace java::security::spec { class AlgorithmParameterSpec; }

namespace javax::crypto {

class ExemptionMechanism : public object_base<SCAPIX_META_STRING("javax/crypto/ExemptionMechanism"),
	java::lang::Object>
{
public:

	ref<java::lang::String> getName();
	static ref<javax::crypto::ExemptionMechanism> getInstance(ref<java::lang::String> algorithm);
	static ref<javax::crypto::ExemptionMechanism> getInstance(ref<java::lang::String> algorithm, ref<java::lang::String> provider);
	static ref<javax::crypto::ExemptionMechanism> getInstance(ref<java::lang::String> algorithm, ref<java::security::Provider> provider);
	ref<java::security::Provider> getProvider();
	jboolean isCryptoAllowed(ref<java::security::Key> key);
	jint getOutputSize(jint inputLen);
	void init(ref<java::security::Key> key);
	void init(ref<java::security::Key> key, ref<java::security::spec::AlgorithmParameterSpec> params);
	void init(ref<java::security::Key> key, ref<java::security::AlgorithmParameters> params);
	ref<link::java::array<jbyte>> genExemptionBlob();
	jint genExemptionBlob(ref<link::java::array<jbyte>> output);
	jint genExemptionBlob(ref<link::java::array<jbyte>> output, jint outputOffset);

protected:

	ExemptionMechanism(handle_type h) : base_(h) {}

};

} // namespace javax::crypto
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/AlgorithmParameters.h>
#include <scapix/java_api/java/security/Key.h>
#include <scapix/java_api/java/security/Provider.h>
#include <scapix/java_api/java/security/spec/AlgorithmParameterSpec.h>

namespace scapix::java_api {
namespace javax::crypto {

inline ref<java::lang::String> ExemptionMechanism::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<javax::crypto::ExemptionMechanism> ExemptionMechanism::getInstance(ref<java::lang::String> algorithm) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::crypto::ExemptionMechanism>>(algorithm); }
inline ref<javax::crypto::ExemptionMechanism> ExemptionMechanism::getInstance(ref<java::lang::String> algorithm, ref<java::lang::String> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::crypto::ExemptionMechanism>>(algorithm, provider); }
inline ref<javax::crypto::ExemptionMechanism> ExemptionMechanism::getInstance(ref<java::lang::String> algorithm, ref<java::security::Provider> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::crypto::ExemptionMechanism>>(algorithm, provider); }
inline ref<java::security::Provider> ExemptionMechanism::getProvider() { return call_method<SCAPIX_META_STRING("getProvider"), ref<java::security::Provider>>(); }
inline jboolean ExemptionMechanism::isCryptoAllowed(ref<java::security::Key> key) { return call_method<SCAPIX_META_STRING("isCryptoAllowed"), jboolean>(key); }
inline jint ExemptionMechanism::getOutputSize(jint inputLen) { return call_method<SCAPIX_META_STRING("getOutputSize"), jint>(inputLen); }
inline void ExemptionMechanism::init(ref<java::security::Key> key) { return call_method<SCAPIX_META_STRING("init"), void>(key); }
inline void ExemptionMechanism::init(ref<java::security::Key> key, ref<java::security::spec::AlgorithmParameterSpec> params) { return call_method<SCAPIX_META_STRING("init"), void>(key, params); }
inline void ExemptionMechanism::init(ref<java::security::Key> key, ref<java::security::AlgorithmParameters> params) { return call_method<SCAPIX_META_STRING("init"), void>(key, params); }
inline ref<link::java::array<jbyte>> ExemptionMechanism::genExemptionBlob() { return call_method<SCAPIX_META_STRING("genExemptionBlob"), ref<link::java::array<jbyte>>>(); }
inline jint ExemptionMechanism::genExemptionBlob(ref<link::java::array<jbyte>> output) { return call_method<SCAPIX_META_STRING("genExemptionBlob"), jint>(output); }
inline jint ExemptionMechanism::genExemptionBlob(ref<link::java::array<jbyte>> output, jint outputOffset) { return call_method<SCAPIX_META_STRING("genExemptionBlob"), jint>(output, outputOffset); }

} // namespace javax::crypto
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_CRYPTO_EXEMPTIONMECHANISM_H
