// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/FilterInputStream.h>

#ifndef SCAPIX_JAVAX_CRYPTO_CIPHERINPUTSTREAM_H
#define SCAPIX_JAVAX_CRYPTO_CIPHERINPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace javax::crypto { class Cipher; }

namespace javax::crypto {

class CipherInputStream : public object_base<SCAPIX_META_STRING("javax/crypto/CipherInputStream"),
	java::io::FilterInputStream>
{
public:

	static ref<CipherInputStream> new_object(ref<java::io::InputStream> is, ref<javax::crypto::Cipher> c);
	jint read();
	jint read(ref<link::java::array<jbyte>> b);
	jint read(ref<link::java::array<jbyte>> b, jint off, jint len);
	jlong skip(jlong n);
	jint available();
	void close();
	jboolean markSupported();

protected:

	CipherInputStream(handle_type h) : base_(h) {}

};

} // namespace javax::crypto
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/javax/crypto/Cipher.h>

namespace scapix::java_api {
namespace javax::crypto {

inline ref<CipherInputStream> CipherInputStream::new_object(ref<java::io::InputStream> is, ref<javax::crypto::Cipher> c) { return base_::new_object(is, c); }
inline jint CipherInputStream::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint CipherInputStream::read(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("read"), jint>(b); }
inline jint CipherInputStream::read(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(b, off, len); }
inline jlong CipherInputStream::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), jlong>(n); }
inline jint CipherInputStream::available() { return call_method<SCAPIX_META_STRING("available"), jint>(); }
inline void CipherInputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jboolean CipherInputStream::markSupported() { return call_method<SCAPIX_META_STRING("markSupported"), jboolean>(); }

} // namespace javax::crypto
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_CRYPTO_CIPHERINPUTSTREAM_H
