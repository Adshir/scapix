// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVAX_CRYPTO_CIPHER_H
#define SCAPIX_JAVAX_CRYPTO_CIPHER_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::nio { class ByteBuffer; }
namespace java::security { class AlgorithmParameters; }
namespace java::security { class Key; }
namespace java::security { class Provider; }
namespace java::security { class SecureRandom; }
namespace java::security::cert { class Certificate; }
namespace java::security::spec { class AlgorithmParameterSpec; }
namespace javax::crypto { class ExemptionMechanism; }

namespace javax::crypto {

class Cipher : public object_base<SCAPIX_META_STRING("javax/crypto/Cipher"),
	java::lang::Object>
{
public:

	static jint ENCRYPT_MODE_();
	static jint DECRYPT_MODE_();
	static jint WRAP_MODE_();
	static jint UNWRAP_MODE_();
	static jint PUBLIC_KEY_();
	static jint PRIVATE_KEY_();
	static jint SECRET_KEY_();

	static ref<javax::crypto::Cipher> getInstance(ref<java::lang::String> transformation);
	static ref<javax::crypto::Cipher> getInstance(ref<java::lang::String> transformation, ref<java::lang::String> provider);
	static ref<javax::crypto::Cipher> getInstance(ref<java::lang::String> transformation, ref<java::security::Provider> provider);
	ref<java::security::Provider> getProvider();
	ref<java::lang::String> getAlgorithm();
	jint getBlockSize();
	jint getOutputSize(jint inputLen);
	ref<link::java::array<jbyte>> getIV();
	ref<java::security::AlgorithmParameters> getParameters();
	ref<javax::crypto::ExemptionMechanism> getExemptionMechanism();
	void init(jint opmode, ref<java::security::Key> key);
	void init(jint opmode, ref<java::security::Key> key, ref<java::security::SecureRandom> random);
	void init(jint opmode, ref<java::security::Key> key, ref<java::security::spec::AlgorithmParameterSpec> params);
	void init(jint opmode, ref<java::security::Key> key, ref<java::security::spec::AlgorithmParameterSpec> params, ref<java::security::SecureRandom> random);
	void init(jint opmode, ref<java::security::Key> key, ref<java::security::AlgorithmParameters> params);
	void init(jint opmode, ref<java::security::Key> key, ref<java::security::AlgorithmParameters> params, ref<java::security::SecureRandom> random);
	void init(jint opmode, ref<java::security::cert::Certificate> certificate);
	void init(jint opmode, ref<java::security::cert::Certificate> certificate, ref<java::security::SecureRandom> random);
	ref<link::java::array<jbyte>> update(ref<link::java::array<jbyte>> input);
	ref<link::java::array<jbyte>> update(ref<link::java::array<jbyte>> input, jint inputOffset, jint inputLen);
	jint update(ref<link::java::array<jbyte>> input, jint inputOffset, jint inputLen, ref<link::java::array<jbyte>> output);
	jint update(ref<link::java::array<jbyte>> input, jint inputOffset, jint inputLen, ref<link::java::array<jbyte>> output, jint outputOffset);
	jint update(ref<java::nio::ByteBuffer> input, ref<java::nio::ByteBuffer> output);
	ref<link::java::array<jbyte>> doFinal();
	jint doFinal(ref<link::java::array<jbyte>> output, jint outputOffset);
	ref<link::java::array<jbyte>> doFinal(ref<link::java::array<jbyte>> input);
	ref<link::java::array<jbyte>> doFinal(ref<link::java::array<jbyte>> input, jint inputOffset, jint inputLen);
	jint doFinal(ref<link::java::array<jbyte>> input, jint inputOffset, jint inputLen, ref<link::java::array<jbyte>> output);
	jint doFinal(ref<link::java::array<jbyte>> input, jint inputOffset, jint inputLen, ref<link::java::array<jbyte>> output, jint outputOffset);
	jint doFinal(ref<java::nio::ByteBuffer> input, ref<java::nio::ByteBuffer> output);
	ref<link::java::array<jbyte>> wrap(ref<java::security::Key> key);
	ref<java::security::Key> unwrap(ref<link::java::array<jbyte>> wrappedKey, ref<java::lang::String> wrappedKeyAlgorithm, jint wrappedKeyType);
	static jint getMaxAllowedKeyLength(ref<java::lang::String> transformation);
	static ref<java::security::spec::AlgorithmParameterSpec> getMaxAllowedParameterSpec(ref<java::lang::String> transformation);
	void updateAAD(ref<link::java::array<jbyte>> src);
	void updateAAD(ref<link::java::array<jbyte>> src, jint offset, jint len);
	void updateAAD(ref<java::nio::ByteBuffer> src);

protected:

	Cipher(handle_type h) : base_(h) {}

};

} // namespace javax::crypto
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/security/AlgorithmParameters.h>
#include <scapix/java_api/java/security/Key.h>
#include <scapix/java_api/java/security/Provider.h>
#include <scapix/java_api/java/security/SecureRandom.h>
#include <scapix/java_api/java/security/cert/Certificate.h>
#include <scapix/java_api/java/security/spec/AlgorithmParameterSpec.h>
#include <scapix/java_api/javax/crypto/ExemptionMechanism.h>

namespace scapix::java_api {
namespace javax::crypto {

inline jint Cipher::ENCRYPT_MODE_() { return get_static_field<SCAPIX_META_STRING("ENCRYPT_MODE"), jint>(); }
inline jint Cipher::DECRYPT_MODE_() { return get_static_field<SCAPIX_META_STRING("DECRYPT_MODE"), jint>(); }
inline jint Cipher::WRAP_MODE_() { return get_static_field<SCAPIX_META_STRING("WRAP_MODE"), jint>(); }
inline jint Cipher::UNWRAP_MODE_() { return get_static_field<SCAPIX_META_STRING("UNWRAP_MODE"), jint>(); }
inline jint Cipher::PUBLIC_KEY_() { return get_static_field<SCAPIX_META_STRING("PUBLIC_KEY"), jint>(); }
inline jint Cipher::PRIVATE_KEY_() { return get_static_field<SCAPIX_META_STRING("PRIVATE_KEY"), jint>(); }
inline jint Cipher::SECRET_KEY_() { return get_static_field<SCAPIX_META_STRING("SECRET_KEY"), jint>(); }
inline ref<javax::crypto::Cipher> Cipher::getInstance(ref<java::lang::String> transformation) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::crypto::Cipher>>(transformation); }
inline ref<javax::crypto::Cipher> Cipher::getInstance(ref<java::lang::String> transformation, ref<java::lang::String> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::crypto::Cipher>>(transformation, provider); }
inline ref<javax::crypto::Cipher> Cipher::getInstance(ref<java::lang::String> transformation, ref<java::security::Provider> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::crypto::Cipher>>(transformation, provider); }
inline ref<java::security::Provider> Cipher::getProvider() { return call_method<SCAPIX_META_STRING("getProvider"), ref<java::security::Provider>>(); }
inline ref<java::lang::String> Cipher::getAlgorithm() { return call_method<SCAPIX_META_STRING("getAlgorithm"), ref<java::lang::String>>(); }
inline jint Cipher::getBlockSize() { return call_method<SCAPIX_META_STRING("getBlockSize"), jint>(); }
inline jint Cipher::getOutputSize(jint inputLen) { return call_method<SCAPIX_META_STRING("getOutputSize"), jint>(inputLen); }
inline ref<link::java::array<jbyte>> Cipher::getIV() { return call_method<SCAPIX_META_STRING("getIV"), ref<link::java::array<jbyte>>>(); }
inline ref<java::security::AlgorithmParameters> Cipher::getParameters() { return call_method<SCAPIX_META_STRING("getParameters"), ref<java::security::AlgorithmParameters>>(); }
inline ref<javax::crypto::ExemptionMechanism> Cipher::getExemptionMechanism() { return call_method<SCAPIX_META_STRING("getExemptionMechanism"), ref<javax::crypto::ExemptionMechanism>>(); }
inline void Cipher::init(jint opmode, ref<java::security::Key> key) { return call_method<SCAPIX_META_STRING("init"), void>(opmode, key); }
inline void Cipher::init(jint opmode, ref<java::security::Key> key, ref<java::security::SecureRandom> random) { return call_method<SCAPIX_META_STRING("init"), void>(opmode, key, random); }
inline void Cipher::init(jint opmode, ref<java::security::Key> key, ref<java::security::spec::AlgorithmParameterSpec> params) { return call_method<SCAPIX_META_STRING("init"), void>(opmode, key, params); }
inline void Cipher::init(jint opmode, ref<java::security::Key> key, ref<java::security::spec::AlgorithmParameterSpec> params, ref<java::security::SecureRandom> random) { return call_method<SCAPIX_META_STRING("init"), void>(opmode, key, params, random); }
inline void Cipher::init(jint opmode, ref<java::security::Key> key, ref<java::security::AlgorithmParameters> params) { return call_method<SCAPIX_META_STRING("init"), void>(opmode, key, params); }
inline void Cipher::init(jint opmode, ref<java::security::Key> key, ref<java::security::AlgorithmParameters> params, ref<java::security::SecureRandom> random) { return call_method<SCAPIX_META_STRING("init"), void>(opmode, key, params, random); }
inline void Cipher::init(jint opmode, ref<java::security::cert::Certificate> certificate) { return call_method<SCAPIX_META_STRING("init"), void>(opmode, certificate); }
inline void Cipher::init(jint opmode, ref<java::security::cert::Certificate> certificate, ref<java::security::SecureRandom> random) { return call_method<SCAPIX_META_STRING("init"), void>(opmode, certificate, random); }
inline ref<link::java::array<jbyte>> Cipher::update(ref<link::java::array<jbyte>> input) { return call_method<SCAPIX_META_STRING("update"), ref<link::java::array<jbyte>>>(input); }
inline ref<link::java::array<jbyte>> Cipher::update(ref<link::java::array<jbyte>> input, jint inputOffset, jint inputLen) { return call_method<SCAPIX_META_STRING("update"), ref<link::java::array<jbyte>>>(input, inputOffset, inputLen); }
inline jint Cipher::update(ref<link::java::array<jbyte>> input, jint inputOffset, jint inputLen, ref<link::java::array<jbyte>> output) { return call_method<SCAPIX_META_STRING("update"), jint>(input, inputOffset, inputLen, output); }
inline jint Cipher::update(ref<link::java::array<jbyte>> input, jint inputOffset, jint inputLen, ref<link::java::array<jbyte>> output, jint outputOffset) { return call_method<SCAPIX_META_STRING("update"), jint>(input, inputOffset, inputLen, output, outputOffset); }
inline jint Cipher::update(ref<java::nio::ByteBuffer> input, ref<java::nio::ByteBuffer> output) { return call_method<SCAPIX_META_STRING("update"), jint>(input, output); }
inline ref<link::java::array<jbyte>> Cipher::doFinal() { return call_method<SCAPIX_META_STRING("doFinal"), ref<link::java::array<jbyte>>>(); }
inline jint Cipher::doFinal(ref<link::java::array<jbyte>> output, jint outputOffset) { return call_method<SCAPIX_META_STRING("doFinal"), jint>(output, outputOffset); }
inline ref<link::java::array<jbyte>> Cipher::doFinal(ref<link::java::array<jbyte>> input) { return call_method<SCAPIX_META_STRING("doFinal"), ref<link::java::array<jbyte>>>(input); }
inline ref<link::java::array<jbyte>> Cipher::doFinal(ref<link::java::array<jbyte>> input, jint inputOffset, jint inputLen) { return call_method<SCAPIX_META_STRING("doFinal"), ref<link::java::array<jbyte>>>(input, inputOffset, inputLen); }
inline jint Cipher::doFinal(ref<link::java::array<jbyte>> input, jint inputOffset, jint inputLen, ref<link::java::array<jbyte>> output) { return call_method<SCAPIX_META_STRING("doFinal"), jint>(input, inputOffset, inputLen, output); }
inline jint Cipher::doFinal(ref<link::java::array<jbyte>> input, jint inputOffset, jint inputLen, ref<link::java::array<jbyte>> output, jint outputOffset) { return call_method<SCAPIX_META_STRING("doFinal"), jint>(input, inputOffset, inputLen, output, outputOffset); }
inline jint Cipher::doFinal(ref<java::nio::ByteBuffer> input, ref<java::nio::ByteBuffer> output) { return call_method<SCAPIX_META_STRING("doFinal"), jint>(input, output); }
inline ref<link::java::array<jbyte>> Cipher::wrap(ref<java::security::Key> key) { return call_method<SCAPIX_META_STRING("wrap"), ref<link::java::array<jbyte>>>(key); }
inline ref<java::security::Key> Cipher::unwrap(ref<link::java::array<jbyte>> wrappedKey, ref<java::lang::String> wrappedKeyAlgorithm, jint wrappedKeyType) { return call_method<SCAPIX_META_STRING("unwrap"), ref<java::security::Key>>(wrappedKey, wrappedKeyAlgorithm, wrappedKeyType); }
inline jint Cipher::getMaxAllowedKeyLength(ref<java::lang::String> transformation) { return call_static_method<SCAPIX_META_STRING("getMaxAllowedKeyLength"), jint>(transformation); }
inline ref<java::security::spec::AlgorithmParameterSpec> Cipher::getMaxAllowedParameterSpec(ref<java::lang::String> transformation) { return call_static_method<SCAPIX_META_STRING("getMaxAllowedParameterSpec"), ref<java::security::spec::AlgorithmParameterSpec>>(transformation); }
inline void Cipher::updateAAD(ref<link::java::array<jbyte>> src) { return call_method<SCAPIX_META_STRING("updateAAD"), void>(src); }
inline void Cipher::updateAAD(ref<link::java::array<jbyte>> src, jint offset, jint len) { return call_method<SCAPIX_META_STRING("updateAAD"), void>(src, offset, len); }
inline void Cipher::updateAAD(ref<java::nio::ByteBuffer> src) { return call_method<SCAPIX_META_STRING("updateAAD"), void>(src); }

} // namespace javax::crypto
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_CRYPTO_CIPHER_H
