// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/security/spec/KeySpec.h>
#include <scapix/java_api/javax/crypto/SecretKey.h>

#ifndef SCAPIX_JAVAX_CRYPTO_SPEC_SECRETKEYSPEC_H
#define SCAPIX_JAVAX_CRYPTO_SPEC_SECRETKEYSPEC_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace javax::crypto::spec {

class SecretKeySpec : public object_base<SCAPIX_META_STRING("javax/crypto/spec/SecretKeySpec"),
	java::lang::Object,
	java::security::spec::KeySpec,
	javax::crypto::SecretKey>
{
public:

	static ref<SecretKeySpec> new_object(ref<link::java::array<jbyte>> key, ref<java::lang::String> algorithm);
	static ref<SecretKeySpec> new_object(ref<link::java::array<jbyte>> key, jint offset, jint len, ref<java::lang::String> algorithm);
	ref<java::lang::String> getAlgorithm();
	ref<java::lang::String> getFormat();
	ref<link::java::array<jbyte>> getEncoded();
	jint hashCode();
	jboolean equals(ref<java::lang::Object> obj);

protected:

	SecretKeySpec(handle_type h) : base_(h) {}

};

} // namespace javax::crypto::spec
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace javax::crypto::spec {

inline ref<SecretKeySpec> SecretKeySpec::new_object(ref<link::java::array<jbyte>> key, ref<java::lang::String> algorithm) { return base_::new_object(key, algorithm); }
inline ref<SecretKeySpec> SecretKeySpec::new_object(ref<link::java::array<jbyte>> key, jint offset, jint len, ref<java::lang::String> algorithm) { return base_::new_object(key, offset, len, algorithm); }
inline ref<java::lang::String> SecretKeySpec::getAlgorithm() { return call_method<SCAPIX_META_STRING("getAlgorithm"), ref<java::lang::String>>(); }
inline ref<java::lang::String> SecretKeySpec::getFormat() { return call_method<SCAPIX_META_STRING("getFormat"), ref<java::lang::String>>(); }
inline ref<link::java::array<jbyte>> SecretKeySpec::getEncoded() { return call_method<SCAPIX_META_STRING("getEncoded"), ref<link::java::array<jbyte>>>(); }
inline jint SecretKeySpec::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean SecretKeySpec::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }

} // namespace javax::crypto::spec
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_CRYPTO_SPEC_SECRETKEYSPEC_H
