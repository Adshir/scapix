// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/security/spec/KeySpec.h>

#ifndef SCAPIX_JAVAX_CRYPTO_SPEC_DESEDEKEYSPEC_H
#define SCAPIX_JAVAX_CRYPTO_SPEC_DESEDEKEYSPEC_H

namespace scapix::java_api {
namespace javax::crypto::spec {

class DESedeKeySpec : public object_base<SCAPIX_META_STRING("javax/crypto/spec/DESedeKeySpec"),
	java::lang::Object,
	java::security::spec::KeySpec>
{
public:

	static jint DES_EDE_KEY_LEN_();

	static ref<DESedeKeySpec> new_object(ref<link::java::array<jbyte>> key);
	static ref<DESedeKeySpec> new_object(ref<link::java::array<jbyte>> key, jint offset);
	ref<link::java::array<jbyte>> getKey();
	static jboolean isParityAdjusted(ref<link::java::array<jbyte>> key, jint offset);

protected:

	DESedeKeySpec(handle_type h) : base_(h) {}

};

} // namespace javax::crypto::spec
} // namespace scapix::java_api


namespace scapix::java_api {
namespace javax::crypto::spec {

inline jint DESedeKeySpec::DES_EDE_KEY_LEN_() { return get_static_field<SCAPIX_META_STRING("DES_EDE_KEY_LEN"), jint>(); }
inline ref<DESedeKeySpec> DESedeKeySpec::new_object(ref<link::java::array<jbyte>> key) { return base_::new_object(key); }
inline ref<DESedeKeySpec> DESedeKeySpec::new_object(ref<link::java::array<jbyte>> key, jint offset) { return base_::new_object(key, offset); }
inline ref<link::java::array<jbyte>> DESedeKeySpec::getKey() { return call_method<SCAPIX_META_STRING("getKey"), ref<link::java::array<jbyte>>>(); }
inline jboolean DESedeKeySpec::isParityAdjusted(ref<link::java::array<jbyte>> key, jint offset) { return call_static_method<SCAPIX_META_STRING("isParityAdjusted"), jboolean>(key, offset); }

} // namespace javax::crypto::spec
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_CRYPTO_SPEC_DESEDEKEYSPEC_H
