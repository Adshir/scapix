// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_TIME_YEAR_H
#define SCAPIX_JAVA_TIME_YEAR_H

namespace scapix::java_api {

namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::time { class Clock; }
namespace java::time { class LocalDate; }
namespace java::time { class Month; }
namespace java::time { class MonthDay; }
namespace java::time { class YearMonth; }
namespace java::time { class ZoneId; }
namespace java::time::format { class DateTimeFormatter; }
namespace java::time::temporal { class TemporalAccessor; }
namespace java::time::temporal { class TemporalAmount; }
namespace java::time::temporal { class TemporalField; }
namespace java::time::temporal { class TemporalQuery; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::time::temporal { class ValueRange; }

namespace java::time {

class Year : public object_base<SCAPIX_META_STRING("java/time/Year"),
	java::lang::Object,
	java::time::temporal::Temporal,
	java::time::temporal::TemporalAdjuster,
	java::lang::Comparable,
	java::io::Serializable>
{
public:

	static jint MIN_VALUE_();
	static jint MAX_VALUE_();

	static ref<java::time::Year> now();
	static ref<java::time::Year> now(ref<java::time::ZoneId> zone);
	static ref<java::time::Year> now(ref<java::time::Clock> clock);
	static ref<java::time::Year> of(jint isoYear);
	static ref<java::time::Year> from(ref<java::time::temporal::TemporalAccessor> temporal);
	static ref<java::time::Year> parse(ref<java::lang::CharSequence> text);
	static ref<java::time::Year> parse(ref<java::lang::CharSequence> text, ref<java::time::format::DateTimeFormatter> formatter);
	static jboolean isLeap(jlong year);
	jint getValue();
	jboolean isSupported(ref<java::time::temporal::TemporalField> field);
	jboolean isSupported(ref<java::time::temporal::TemporalUnit> unit);
	ref<java::time::temporal::ValueRange> range(ref<java::time::temporal::TemporalField> field);
	jint get(ref<java::time::temporal::TemporalField> field);
	jlong getLong(ref<java::time::temporal::TemporalField> field);
	jboolean isLeap();
	jboolean isValidMonthDay(ref<java::time::MonthDay> monthDay);
	jint length();
	ref<java::time::Year> with(ref<java::time::temporal::TemporalAdjuster> adjuster);
	ref<java::time::Year> with(ref<java::time::temporal::TemporalField> field, jlong newValue);
	ref<java::time::Year> plus(ref<java::time::temporal::TemporalAmount> amountToAdd);
	ref<java::time::Year> plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::Year> plusYears(jlong yearsToAdd);
	ref<java::time::Year> minus(ref<java::time::temporal::TemporalAmount> amountToSubtract);
	ref<java::time::Year> minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::Year> minusYears(jlong yearsToSubtract);
	ref<java::lang::Object> query(ref<java::time::temporal::TemporalQuery> query);
	ref<java::time::temporal::Temporal> adjustInto(ref<java::time::temporal::Temporal> temporal);
	jlong until(ref<java::time::temporal::Temporal> endExclusive, ref<java::time::temporal::TemporalUnit> unit);
	ref<java::lang::String> format(ref<java::time::format::DateTimeFormatter> formatter);
	ref<java::time::LocalDate> atDay(jint dayOfYear);
	ref<java::time::YearMonth> atMonth(ref<java::time::Month> month);
	ref<java::time::YearMonth> atMonth(jint month);
	ref<java::time::LocalDate> atMonthDay(ref<java::time::MonthDay> monthDay);
	jint compareTo(ref<java::time::Year> other);
	jboolean isAfter(ref<java::time::Year> other);
	jboolean isBefore(ref<java::time::Year> other);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	Year(handle_type h) : base_(h) {}

};

} // namespace java::time
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Clock.h>
#include <scapix/java_api/java/time/LocalDate.h>
#include <scapix/java_api/java/time/Month.h>
#include <scapix/java_api/java/time/MonthDay.h>
#include <scapix/java_api/java/time/YearMonth.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/format/DateTimeFormatter.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>

namespace scapix::java_api {
namespace java::time {

inline jint Year::MIN_VALUE_() { return get_static_field<SCAPIX_META_STRING("MIN_VALUE"), jint>(); }
inline jint Year::MAX_VALUE_() { return get_static_field<SCAPIX_META_STRING("MAX_VALUE"), jint>(); }
inline ref<java::time::Year> Year::now() { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::Year>>(); }
inline ref<java::time::Year> Year::now(ref<java::time::ZoneId> zone) { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::Year>>(zone); }
inline ref<java::time::Year> Year::now(ref<java::time::Clock> clock) { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::Year>>(clock); }
inline ref<java::time::Year> Year::of(jint isoYear) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::Year>>(isoYear); }
inline ref<java::time::Year> Year::from(ref<java::time::temporal::TemporalAccessor> temporal) { return call_static_method<SCAPIX_META_STRING("from"), ref<java::time::Year>>(temporal); }
inline ref<java::time::Year> Year::parse(ref<java::lang::CharSequence> text) { return call_static_method<SCAPIX_META_STRING("parse"), ref<java::time::Year>>(text); }
inline ref<java::time::Year> Year::parse(ref<java::lang::CharSequence> text, ref<java::time::format::DateTimeFormatter> formatter) { return call_static_method<SCAPIX_META_STRING("parse"), ref<java::time::Year>>(text, formatter); }
inline jboolean Year::isLeap(jlong year) { return call_static_method<SCAPIX_META_STRING("isLeap"), jboolean>(year); }
inline jint Year::getValue() { return call_method<SCAPIX_META_STRING("getValue"), jint>(); }
inline jboolean Year::isSupported(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(field); }
inline jboolean Year::isSupported(ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(unit); }
inline ref<java::time::temporal::ValueRange> Year::range(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("range"), ref<java::time::temporal::ValueRange>>(field); }
inline jint Year::get(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("get"), jint>(field); }
inline jlong Year::getLong(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(field); }
inline jboolean Year::isLeap() { return call_method<SCAPIX_META_STRING("isLeap"), jboolean>(); }
inline jboolean Year::isValidMonthDay(ref<java::time::MonthDay> monthDay) { return call_method<SCAPIX_META_STRING("isValidMonthDay"), jboolean>(monthDay); }
inline jint Year::length() { return call_method<SCAPIX_META_STRING("length"), jint>(); }
inline ref<java::time::Year> Year::with(ref<java::time::temporal::TemporalAdjuster> adjuster) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::Year>>(adjuster); }
inline ref<java::time::Year> Year::with(ref<java::time::temporal::TemporalField> field, jlong newValue) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::Year>>(field, newValue); }
inline ref<java::time::Year> Year::plus(ref<java::time::temporal::TemporalAmount> amountToAdd) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::Year>>(amountToAdd); }
inline ref<java::time::Year> Year::plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::Year>>(amountToAdd, p2); }
inline ref<java::time::Year> Year::plusYears(jlong yearsToAdd) { return call_method<SCAPIX_META_STRING("plusYears"), ref<java::time::Year>>(yearsToAdd); }
inline ref<java::time::Year> Year::minus(ref<java::time::temporal::TemporalAmount> amountToSubtract) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::Year>>(amountToSubtract); }
inline ref<java::time::Year> Year::minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::Year>>(amountToSubtract, p2); }
inline ref<java::time::Year> Year::minusYears(jlong yearsToSubtract) { return call_method<SCAPIX_META_STRING("minusYears"), ref<java::time::Year>>(yearsToSubtract); }
inline ref<java::lang::Object> Year::query(ref<java::time::temporal::TemporalQuery> query) { return call_method<SCAPIX_META_STRING("query"), ref<java::lang::Object>>(query); }
inline ref<java::time::temporal::Temporal> Year::adjustInto(ref<java::time::temporal::Temporal> temporal) { return call_method<SCAPIX_META_STRING("adjustInto"), ref<java::time::temporal::Temporal>>(temporal); }
inline jlong Year::until(ref<java::time::temporal::Temporal> endExclusive, ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("until"), jlong>(endExclusive, unit); }
inline ref<java::lang::String> Year::format(ref<java::time::format::DateTimeFormatter> formatter) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::String>>(formatter); }
inline ref<java::time::LocalDate> Year::atDay(jint dayOfYear) { return call_method<SCAPIX_META_STRING("atDay"), ref<java::time::LocalDate>>(dayOfYear); }
inline ref<java::time::YearMonth> Year::atMonth(ref<java::time::Month> month) { return call_method<SCAPIX_META_STRING("atMonth"), ref<java::time::YearMonth>>(month); }
inline ref<java::time::YearMonth> Year::atMonth(jint month) { return call_method<SCAPIX_META_STRING("atMonth"), ref<java::time::YearMonth>>(month); }
inline ref<java::time::LocalDate> Year::atMonthDay(ref<java::time::MonthDay> monthDay) { return call_method<SCAPIX_META_STRING("atMonthDay"), ref<java::time::LocalDate>>(monthDay); }
inline jint Year::compareTo(ref<java::time::Year> other) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(other); }
inline jboolean Year::isAfter(ref<java::time::Year> other) { return call_method<SCAPIX_META_STRING("isAfter"), jboolean>(other); }
inline jboolean Year::isBefore(ref<java::time::Year> other) { return call_method<SCAPIX_META_STRING("isBefore"), jboolean>(other); }
inline jboolean Year::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint Year::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> Year::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_YEAR_H
