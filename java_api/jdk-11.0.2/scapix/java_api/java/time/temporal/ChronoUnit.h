// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>

#ifndef SCAPIX_JAVA_TIME_TEMPORAL_CHRONOUNIT_H
#define SCAPIX_JAVA_TIME_TEMPORAL_CHRONOUNIT_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time { class Duration; }
namespace java::time::temporal { class Temporal; }

namespace java::time::temporal {

class ChronoUnit : public object_base<SCAPIX_META_STRING("java/time/temporal/ChronoUnit"),
	java::lang::Enum,
	java::time::temporal::TemporalUnit>
{
public:

	static ref<java::time::temporal::ChronoUnit> NANOS_();
	static ref<java::time::temporal::ChronoUnit> MICROS_();
	static ref<java::time::temporal::ChronoUnit> MILLIS_();
	static ref<java::time::temporal::ChronoUnit> SECONDS_();
	static ref<java::time::temporal::ChronoUnit> MINUTES_();
	static ref<java::time::temporal::ChronoUnit> HOURS_();
	static ref<java::time::temporal::ChronoUnit> HALF_DAYS_();
	static ref<java::time::temporal::ChronoUnit> DAYS_();
	static ref<java::time::temporal::ChronoUnit> WEEKS_();
	static ref<java::time::temporal::ChronoUnit> MONTHS_();
	static ref<java::time::temporal::ChronoUnit> YEARS_();
	static ref<java::time::temporal::ChronoUnit> DECADES_();
	static ref<java::time::temporal::ChronoUnit> CENTURIES_();
	static ref<java::time::temporal::ChronoUnit> MILLENNIA_();
	static ref<java::time::temporal::ChronoUnit> ERAS_();
	static ref<java::time::temporal::ChronoUnit> FOREVER_();

	static ref<link::java::array<java::time::temporal::ChronoUnit>> values();
	static ref<java::time::temporal::ChronoUnit> valueOf(ref<java::lang::String> name);
	ref<java::time::Duration> getDuration();
	jboolean isDurationEstimated();
	jboolean isDateBased();
	jboolean isTimeBased();
	jboolean isSupportedBy(ref<java::time::temporal::Temporal> temporal);
	ref<java::time::temporal::Temporal> addTo(ref<java::time::temporal::Temporal> temporal, jlong amount);
	jlong between(ref<java::time::temporal::Temporal> temporal1Inclusive, ref<java::time::temporal::Temporal> temporal2Exclusive);
	ref<java::lang::String> toString();

protected:

	ChronoUnit(handle_type h) : base_(h) {}

};

} // namespace java::time::temporal
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Duration.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>

namespace scapix::java_api {
namespace java::time::temporal {

inline ref<java::time::temporal::ChronoUnit> ChronoUnit::NANOS_() { return get_static_field<SCAPIX_META_STRING("NANOS"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<java::time::temporal::ChronoUnit> ChronoUnit::MICROS_() { return get_static_field<SCAPIX_META_STRING("MICROS"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<java::time::temporal::ChronoUnit> ChronoUnit::MILLIS_() { return get_static_field<SCAPIX_META_STRING("MILLIS"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<java::time::temporal::ChronoUnit> ChronoUnit::SECONDS_() { return get_static_field<SCAPIX_META_STRING("SECONDS"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<java::time::temporal::ChronoUnit> ChronoUnit::MINUTES_() { return get_static_field<SCAPIX_META_STRING("MINUTES"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<java::time::temporal::ChronoUnit> ChronoUnit::HOURS_() { return get_static_field<SCAPIX_META_STRING("HOURS"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<java::time::temporal::ChronoUnit> ChronoUnit::HALF_DAYS_() { return get_static_field<SCAPIX_META_STRING("HALF_DAYS"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<java::time::temporal::ChronoUnit> ChronoUnit::DAYS_() { return get_static_field<SCAPIX_META_STRING("DAYS"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<java::time::temporal::ChronoUnit> ChronoUnit::WEEKS_() { return get_static_field<SCAPIX_META_STRING("WEEKS"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<java::time::temporal::ChronoUnit> ChronoUnit::MONTHS_() { return get_static_field<SCAPIX_META_STRING("MONTHS"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<java::time::temporal::ChronoUnit> ChronoUnit::YEARS_() { return get_static_field<SCAPIX_META_STRING("YEARS"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<java::time::temporal::ChronoUnit> ChronoUnit::DECADES_() { return get_static_field<SCAPIX_META_STRING("DECADES"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<java::time::temporal::ChronoUnit> ChronoUnit::CENTURIES_() { return get_static_field<SCAPIX_META_STRING("CENTURIES"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<java::time::temporal::ChronoUnit> ChronoUnit::MILLENNIA_() { return get_static_field<SCAPIX_META_STRING("MILLENNIA"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<java::time::temporal::ChronoUnit> ChronoUnit::ERAS_() { return get_static_field<SCAPIX_META_STRING("ERAS"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<java::time::temporal::ChronoUnit> ChronoUnit::FOREVER_() { return get_static_field<SCAPIX_META_STRING("FOREVER"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<link::java::array<java::time::temporal::ChronoUnit>> ChronoUnit::values() { return call_static_method<SCAPIX_META_STRING("values"), ref<link::java::array<java::time::temporal::ChronoUnit>>>(); }
inline ref<java::time::temporal::ChronoUnit> ChronoUnit::valueOf(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::time::temporal::ChronoUnit>>(name); }
inline ref<java::time::Duration> ChronoUnit::getDuration() { return call_method<SCAPIX_META_STRING("getDuration"), ref<java::time::Duration>>(); }
inline jboolean ChronoUnit::isDurationEstimated() { return call_method<SCAPIX_META_STRING("isDurationEstimated"), jboolean>(); }
inline jboolean ChronoUnit::isDateBased() { return call_method<SCAPIX_META_STRING("isDateBased"), jboolean>(); }
inline jboolean ChronoUnit::isTimeBased() { return call_method<SCAPIX_META_STRING("isTimeBased"), jboolean>(); }
inline jboolean ChronoUnit::isSupportedBy(ref<java::time::temporal::Temporal> temporal) { return call_method<SCAPIX_META_STRING("isSupportedBy"), jboolean>(temporal); }
inline ref<java::time::temporal::Temporal> ChronoUnit::addTo(ref<java::time::temporal::Temporal> temporal, jlong amount) { return call_method<SCAPIX_META_STRING("addTo"), ref<java::time::temporal::Temporal>>(temporal, amount); }
inline jlong ChronoUnit::between(ref<java::time::temporal::Temporal> temporal1Inclusive, ref<java::time::temporal::Temporal> temporal2Exclusive) { return call_method<SCAPIX_META_STRING("between"), jlong>(temporal1Inclusive, temporal2Exclusive); }
inline ref<java::lang::String> ChronoUnit::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time::temporal
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_TEMPORAL_CHRONOUNIT_H
