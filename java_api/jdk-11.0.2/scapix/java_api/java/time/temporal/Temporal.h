// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>

#ifndef SCAPIX_JAVA_TIME_TEMPORAL_TEMPORAL_H
#define SCAPIX_JAVA_TIME_TEMPORAL_TEMPORAL_H

namespace scapix::java_api {

namespace java::time::temporal { class TemporalAdjuster; }
namespace java::time::temporal { class TemporalAmount; }
namespace java::time::temporal { class TemporalField; }
namespace java::time::temporal { class TemporalUnit; }

namespace java::time::temporal {

class Temporal : public object_base<SCAPIX_META_STRING("java/time/temporal/Temporal"),
	java::lang::Object,
	java::time::temporal::TemporalAccessor>
{
public:

	jboolean isSupported(ref<java::time::temporal::TemporalUnit> p1);
	ref<java::time::temporal::Temporal> with(ref<java::time::temporal::TemporalAdjuster> adjuster);
	ref<java::time::temporal::Temporal> with(ref<java::time::temporal::TemporalField> p1, jlong p2);
	ref<java::time::temporal::Temporal> plus(ref<java::time::temporal::TemporalAmount> amount);
	ref<java::time::temporal::Temporal> plus(jlong p1, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::temporal::Temporal> minus(ref<java::time::temporal::TemporalAmount> amount);
	ref<java::time::temporal::Temporal> minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2);
	jlong until(ref<java::time::temporal::Temporal> p1, ref<java::time::temporal::TemporalUnit> p2);

protected:

	Temporal(handle_type h) : base_(h) {}

};

} // namespace java::time::temporal
} // namespace scapix::java_api

#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>

namespace scapix::java_api {
namespace java::time::temporal {

inline jboolean Temporal::isSupported(ref<java::time::temporal::TemporalUnit> p1) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(p1); }
inline ref<java::time::temporal::Temporal> Temporal::with(ref<java::time::temporal::TemporalAdjuster> adjuster) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::temporal::Temporal>>(adjuster); }
inline ref<java::time::temporal::Temporal> Temporal::with(ref<java::time::temporal::TemporalField> p1, jlong p2) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::temporal::Temporal>>(p1, p2); }
inline ref<java::time::temporal::Temporal> Temporal::plus(ref<java::time::temporal::TemporalAmount> amount) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::temporal::Temporal>>(amount); }
inline ref<java::time::temporal::Temporal> Temporal::plus(jlong p1, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::temporal::Temporal>>(p1, p2); }
inline ref<java::time::temporal::Temporal> Temporal::minus(ref<java::time::temporal::TemporalAmount> amount) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::temporal::Temporal>>(amount); }
inline ref<java::time::temporal::Temporal> Temporal::minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::temporal::Temporal>>(amountToSubtract, p2); }
inline jlong Temporal::until(ref<java::time::temporal::Temporal> p1, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("until"), jlong>(p1, p2); }

} // namespace java::time::temporal
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_TEMPORAL_TEMPORAL_H
