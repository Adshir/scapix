// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_TIME_TEMPORAL_VALUERANGE_H
#define SCAPIX_JAVA_TIME_TEMPORAL_VALUERANGE_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time::temporal { class TemporalField; }

namespace java::time::temporal {

class ValueRange : public object_base<SCAPIX_META_STRING("java/time/temporal/ValueRange"),
	java::lang::Object,
	java::io::Serializable>
{
public:

	static ref<java::time::temporal::ValueRange> of(jlong min, jlong p2);
	static ref<java::time::temporal::ValueRange> of(jlong min, jlong p2, jlong maxSmallest);
	static ref<java::time::temporal::ValueRange> of(jlong minSmallest, jlong p2, jlong minLargest, jlong p4);
	jboolean isFixed();
	jlong getMinimum();
	jlong getLargestMinimum();
	jlong getSmallestMaximum();
	jlong getMaximum();
	jboolean isIntValue();
	jboolean isValidValue(jlong value);
	jboolean isValidIntValue(jlong value);
	jlong checkValidValue(jlong value, ref<java::time::temporal::TemporalField> p2);
	jint checkValidIntValue(jlong value, ref<java::time::temporal::TemporalField> p2);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	ValueRange(handle_type h) : base_(h) {}

};

} // namespace java::time::temporal
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>

namespace scapix::java_api {
namespace java::time::temporal {

inline ref<java::time::temporal::ValueRange> ValueRange::of(jlong min, jlong p2) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::temporal::ValueRange>>(min, p2); }
inline ref<java::time::temporal::ValueRange> ValueRange::of(jlong min, jlong p2, jlong maxSmallest) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::temporal::ValueRange>>(min, p2, maxSmallest); }
inline ref<java::time::temporal::ValueRange> ValueRange::of(jlong minSmallest, jlong p2, jlong minLargest, jlong p4) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::temporal::ValueRange>>(minSmallest, p2, minLargest, p4); }
inline jboolean ValueRange::isFixed() { return call_method<SCAPIX_META_STRING("isFixed"), jboolean>(); }
inline jlong ValueRange::getMinimum() { return call_method<SCAPIX_META_STRING("getMinimum"), jlong>(); }
inline jlong ValueRange::getLargestMinimum() { return call_method<SCAPIX_META_STRING("getLargestMinimum"), jlong>(); }
inline jlong ValueRange::getSmallestMaximum() { return call_method<SCAPIX_META_STRING("getSmallestMaximum"), jlong>(); }
inline jlong ValueRange::getMaximum() { return call_method<SCAPIX_META_STRING("getMaximum"), jlong>(); }
inline jboolean ValueRange::isIntValue() { return call_method<SCAPIX_META_STRING("isIntValue"), jboolean>(); }
inline jboolean ValueRange::isValidValue(jlong value) { return call_method<SCAPIX_META_STRING("isValidValue"), jboolean>(value); }
inline jboolean ValueRange::isValidIntValue(jlong value) { return call_method<SCAPIX_META_STRING("isValidIntValue"), jboolean>(value); }
inline jlong ValueRange::checkValidValue(jlong value, ref<java::time::temporal::TemporalField> p2) { return call_method<SCAPIX_META_STRING("checkValidValue"), jlong>(value, p2); }
inline jint ValueRange::checkValidIntValue(jlong value, ref<java::time::temporal::TemporalField> p2) { return call_method<SCAPIX_META_STRING("checkValidIntValue"), jint>(value, p2); }
inline jboolean ValueRange::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint ValueRange::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> ValueRange::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time::temporal
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_TEMPORAL_VALUERANGE_H
