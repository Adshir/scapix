// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_TIME_TEMPORAL_WEEKFIELDS_H
#define SCAPIX_JAVA_TIME_TEMPORAL_WEEKFIELDS_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time { class DayOfWeek; }
namespace java::time::temporal { class TemporalField; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::util { class Locale; }

namespace java::time::temporal {

class WeekFields : public object_base<SCAPIX_META_STRING("java/time/temporal/WeekFields"),
	java::lang::Object,
	java::io::Serializable>
{
public:

	static ref<java::time::temporal::WeekFields> ISO_();
	static ref<java::time::temporal::WeekFields> SUNDAY_START_();
	static ref<java::time::temporal::TemporalUnit> WEEK_BASED_YEARS_();

	static ref<java::time::temporal::WeekFields> of(ref<java::util::Locale> locale);
	static ref<java::time::temporal::WeekFields> of(ref<java::time::DayOfWeek> firstDayOfWeek, jint minimalDaysInFirstWeek);
	ref<java::time::DayOfWeek> getFirstDayOfWeek();
	jint getMinimalDaysInFirstWeek();
	ref<java::time::temporal::TemporalField> dayOfWeek();
	ref<java::time::temporal::TemporalField> weekOfMonth();
	ref<java::time::temporal::TemporalField> weekOfYear();
	ref<java::time::temporal::TemporalField> weekOfWeekBasedYear();
	ref<java::time::temporal::TemporalField> weekBasedYear();
	jboolean equals(ref<java::lang::Object> object);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	WeekFields(handle_type h) : base_(h) {}

};

} // namespace java::time::temporal
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/DayOfWeek.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/util/Locale.h>

namespace scapix::java_api {
namespace java::time::temporal {

inline ref<java::time::temporal::WeekFields> WeekFields::ISO_() { return get_static_field<SCAPIX_META_STRING("ISO"), ref<java::time::temporal::WeekFields>>(); }
inline ref<java::time::temporal::WeekFields> WeekFields::SUNDAY_START_() { return get_static_field<SCAPIX_META_STRING("SUNDAY_START"), ref<java::time::temporal::WeekFields>>(); }
inline ref<java::time::temporal::TemporalUnit> WeekFields::WEEK_BASED_YEARS_() { return get_static_field<SCAPIX_META_STRING("WEEK_BASED_YEARS"), ref<java::time::temporal::TemporalUnit>>(); }
inline ref<java::time::temporal::WeekFields> WeekFields::of(ref<java::util::Locale> locale) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::temporal::WeekFields>>(locale); }
inline ref<java::time::temporal::WeekFields> WeekFields::of(ref<java::time::DayOfWeek> firstDayOfWeek, jint minimalDaysInFirstWeek) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::temporal::WeekFields>>(firstDayOfWeek, minimalDaysInFirstWeek); }
inline ref<java::time::DayOfWeek> WeekFields::getFirstDayOfWeek() { return call_method<SCAPIX_META_STRING("getFirstDayOfWeek"), ref<java::time::DayOfWeek>>(); }
inline jint WeekFields::getMinimalDaysInFirstWeek() { return call_method<SCAPIX_META_STRING("getMinimalDaysInFirstWeek"), jint>(); }
inline ref<java::time::temporal::TemporalField> WeekFields::dayOfWeek() { return call_method<SCAPIX_META_STRING("dayOfWeek"), ref<java::time::temporal::TemporalField>>(); }
inline ref<java::time::temporal::TemporalField> WeekFields::weekOfMonth() { return call_method<SCAPIX_META_STRING("weekOfMonth"), ref<java::time::temporal::TemporalField>>(); }
inline ref<java::time::temporal::TemporalField> WeekFields::weekOfYear() { return call_method<SCAPIX_META_STRING("weekOfYear"), ref<java::time::temporal::TemporalField>>(); }
inline ref<java::time::temporal::TemporalField> WeekFields::weekOfWeekBasedYear() { return call_method<SCAPIX_META_STRING("weekOfWeekBasedYear"), ref<java::time::temporal::TemporalField>>(); }
inline ref<java::time::temporal::TemporalField> WeekFields::weekBasedYear() { return call_method<SCAPIX_META_STRING("weekBasedYear"), ref<java::time::temporal::TemporalField>>(); }
inline jboolean WeekFields::equals(ref<java::lang::Object> object) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(object); }
inline jint WeekFields::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> WeekFields::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time::temporal
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_TEMPORAL_WEEKFIELDS_H
