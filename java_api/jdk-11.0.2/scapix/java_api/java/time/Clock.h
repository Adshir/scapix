// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_TIME_CLOCK_H
#define SCAPIX_JAVA_TIME_CLOCK_H

namespace scapix::java_api {

namespace java::time { class Duration; }
namespace java::time { class Instant; }
namespace java::time { class ZoneId; }

namespace java::time {

class Clock : public object_base<SCAPIX_META_STRING("java/time/Clock"),
	java::lang::Object>
{
public:

	static ref<java::time::Clock> systemUTC();
	static ref<java::time::Clock> systemDefaultZone();
	static ref<java::time::Clock> system(ref<java::time::ZoneId> zone);
	static ref<java::time::Clock> tickMillis(ref<java::time::ZoneId> zone);
	static ref<java::time::Clock> tickSeconds(ref<java::time::ZoneId> zone);
	static ref<java::time::Clock> tickMinutes(ref<java::time::ZoneId> zone);
	static ref<java::time::Clock> tick(ref<java::time::Clock> baseClock, ref<java::time::Duration> tickDuration);
	static ref<java::time::Clock> fixed(ref<java::time::Instant> fixedInstant, ref<java::time::ZoneId> zone);
	static ref<java::time::Clock> offset(ref<java::time::Clock> baseClock, ref<java::time::Duration> offsetDuration);
	ref<java::time::ZoneId> getZone();
	ref<java::time::Clock> withZone(ref<java::time::ZoneId> p1);
	jlong millis();
	ref<java::time::Instant> instant();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();

protected:

	Clock(handle_type h) : base_(h) {}

};

} // namespace java::time
} // namespace scapix::java_api

#include <scapix/java_api/java/time/Duration.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/time/ZoneId.h>

namespace scapix::java_api {
namespace java::time {

inline ref<java::time::Clock> Clock::systemUTC() { return call_static_method<SCAPIX_META_STRING("systemUTC"), ref<java::time::Clock>>(); }
inline ref<java::time::Clock> Clock::systemDefaultZone() { return call_static_method<SCAPIX_META_STRING("systemDefaultZone"), ref<java::time::Clock>>(); }
inline ref<java::time::Clock> Clock::system(ref<java::time::ZoneId> zone) { return call_static_method<SCAPIX_META_STRING("system"), ref<java::time::Clock>>(zone); }
inline ref<java::time::Clock> Clock::tickMillis(ref<java::time::ZoneId> zone) { return call_static_method<SCAPIX_META_STRING("tickMillis"), ref<java::time::Clock>>(zone); }
inline ref<java::time::Clock> Clock::tickSeconds(ref<java::time::ZoneId> zone) { return call_static_method<SCAPIX_META_STRING("tickSeconds"), ref<java::time::Clock>>(zone); }
inline ref<java::time::Clock> Clock::tickMinutes(ref<java::time::ZoneId> zone) { return call_static_method<SCAPIX_META_STRING("tickMinutes"), ref<java::time::Clock>>(zone); }
inline ref<java::time::Clock> Clock::tick(ref<java::time::Clock> baseClock, ref<java::time::Duration> tickDuration) { return call_static_method<SCAPIX_META_STRING("tick"), ref<java::time::Clock>>(baseClock, tickDuration); }
inline ref<java::time::Clock> Clock::fixed(ref<java::time::Instant> fixedInstant, ref<java::time::ZoneId> zone) { return call_static_method<SCAPIX_META_STRING("fixed"), ref<java::time::Clock>>(fixedInstant, zone); }
inline ref<java::time::Clock> Clock::offset(ref<java::time::Clock> baseClock, ref<java::time::Duration> offsetDuration) { return call_static_method<SCAPIX_META_STRING("offset"), ref<java::time::Clock>>(baseClock, offsetDuration); }
inline ref<java::time::ZoneId> Clock::getZone() { return call_method<SCAPIX_META_STRING("getZone"), ref<java::time::ZoneId>>(); }
inline ref<java::time::Clock> Clock::withZone(ref<java::time::ZoneId> p1) { return call_method<SCAPIX_META_STRING("withZone"), ref<java::time::Clock>>(p1); }
inline jlong Clock::millis() { return call_method<SCAPIX_META_STRING("millis"), jlong>(); }
inline ref<java::time::Instant> Clock::instant() { return call_method<SCAPIX_META_STRING("instant"), ref<java::time::Instant>>(); }
inline jboolean Clock::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint Clock::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }

} // namespace java::time
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_CLOCK_H
