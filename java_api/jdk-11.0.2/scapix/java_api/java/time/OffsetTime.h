// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_TIME_OFFSETTIME_H
#define SCAPIX_JAVA_TIME_OFFSETTIME_H

namespace scapix::java_api {

namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::time { class Clock; }
namespace java::time { class Instant; }
namespace java::time { class LocalDate; }
namespace java::time { class LocalTime; }
namespace java::time { class OffsetDateTime; }
namespace java::time { class ZoneId; }
namespace java::time { class ZoneOffset; }
namespace java::time::format { class DateTimeFormatter; }
namespace java::time::temporal { class TemporalAccessor; }
namespace java::time::temporal { class TemporalAmount; }
namespace java::time::temporal { class TemporalField; }
namespace java::time::temporal { class TemporalQuery; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::time::temporal { class ValueRange; }

namespace java::time {

class OffsetTime : public object_base<SCAPIX_META_STRING("java/time/OffsetTime"),
	java::lang::Object,
	java::time::temporal::Temporal,
	java::time::temporal::TemporalAdjuster,
	java::lang::Comparable,
	java::io::Serializable>
{
public:

	static ref<java::time::OffsetTime> MIN_();
	static ref<java::time::OffsetTime> MAX_();

	static ref<java::time::OffsetTime> now();
	static ref<java::time::OffsetTime> now(ref<java::time::ZoneId> zone);
	static ref<java::time::OffsetTime> now(ref<java::time::Clock> clock);
	static ref<java::time::OffsetTime> of(ref<java::time::LocalTime> time, ref<java::time::ZoneOffset> offset);
	static ref<java::time::OffsetTime> of(jint hour, jint minute, jint second, jint nanoOfSecond, ref<java::time::ZoneOffset> offset);
	static ref<java::time::OffsetTime> ofInstant(ref<java::time::Instant> instant, ref<java::time::ZoneId> zone);
	static ref<java::time::OffsetTime> from(ref<java::time::temporal::TemporalAccessor> temporal);
	static ref<java::time::OffsetTime> parse(ref<java::lang::CharSequence> text);
	static ref<java::time::OffsetTime> parse(ref<java::lang::CharSequence> text, ref<java::time::format::DateTimeFormatter> formatter);
	jboolean isSupported(ref<java::time::temporal::TemporalField> field);
	jboolean isSupported(ref<java::time::temporal::TemporalUnit> unit);
	ref<java::time::temporal::ValueRange> range(ref<java::time::temporal::TemporalField> field);
	jint get(ref<java::time::temporal::TemporalField> field);
	jlong getLong(ref<java::time::temporal::TemporalField> field);
	ref<java::time::ZoneOffset> getOffset();
	ref<java::time::OffsetTime> withOffsetSameLocal(ref<java::time::ZoneOffset> offset);
	ref<java::time::OffsetTime> withOffsetSameInstant(ref<java::time::ZoneOffset> offset);
	ref<java::time::LocalTime> toLocalTime();
	jint getHour();
	jint getMinute();
	jint getSecond();
	jint getNano();
	ref<java::time::OffsetTime> with(ref<java::time::temporal::TemporalAdjuster> adjuster);
	ref<java::time::OffsetTime> with(ref<java::time::temporal::TemporalField> field, jlong newValue);
	ref<java::time::OffsetTime> withHour(jint hour);
	ref<java::time::OffsetTime> withMinute(jint minute);
	ref<java::time::OffsetTime> withSecond(jint second);
	ref<java::time::OffsetTime> withNano(jint nanoOfSecond);
	ref<java::time::OffsetTime> truncatedTo(ref<java::time::temporal::TemporalUnit> unit);
	ref<java::time::OffsetTime> plus(ref<java::time::temporal::TemporalAmount> amountToAdd);
	ref<java::time::OffsetTime> plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::OffsetTime> plusHours(jlong hours);
	ref<java::time::OffsetTime> plusMinutes(jlong minutes);
	ref<java::time::OffsetTime> plusSeconds(jlong seconds);
	ref<java::time::OffsetTime> plusNanos(jlong nanos);
	ref<java::time::OffsetTime> minus(ref<java::time::temporal::TemporalAmount> amountToSubtract);
	ref<java::time::OffsetTime> minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::OffsetTime> minusHours(jlong hours);
	ref<java::time::OffsetTime> minusMinutes(jlong minutes);
	ref<java::time::OffsetTime> minusSeconds(jlong seconds);
	ref<java::time::OffsetTime> minusNanos(jlong nanos);
	ref<java::lang::Object> query(ref<java::time::temporal::TemporalQuery> query);
	ref<java::time::temporal::Temporal> adjustInto(ref<java::time::temporal::Temporal> temporal);
	jlong until(ref<java::time::temporal::Temporal> endExclusive, ref<java::time::temporal::TemporalUnit> unit);
	ref<java::lang::String> format(ref<java::time::format::DateTimeFormatter> formatter);
	ref<java::time::OffsetDateTime> atDate(ref<java::time::LocalDate> date);
	jlong toEpochSecond(ref<java::time::LocalDate> date);
	jint compareTo(ref<java::time::OffsetTime> other);
	jboolean isAfter(ref<java::time::OffsetTime> other);
	jboolean isBefore(ref<java::time::OffsetTime> other);
	jboolean isEqual(ref<java::time::OffsetTime> other);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	OffsetTime(handle_type h) : base_(h) {}

};

} // namespace java::time
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Clock.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/time/LocalDate.h>
#include <scapix/java_api/java/time/LocalTime.h>
#include <scapix/java_api/java/time/OffsetDateTime.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/ZoneOffset.h>
#include <scapix/java_api/java/time/format/DateTimeFormatter.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>

namespace scapix::java_api {
namespace java::time {

inline ref<java::time::OffsetTime> OffsetTime::MIN_() { return get_static_field<SCAPIX_META_STRING("MIN"), ref<java::time::OffsetTime>>(); }
inline ref<java::time::OffsetTime> OffsetTime::MAX_() { return get_static_field<SCAPIX_META_STRING("MAX"), ref<java::time::OffsetTime>>(); }
inline ref<java::time::OffsetTime> OffsetTime::now() { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::OffsetTime>>(); }
inline ref<java::time::OffsetTime> OffsetTime::now(ref<java::time::ZoneId> zone) { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::OffsetTime>>(zone); }
inline ref<java::time::OffsetTime> OffsetTime::now(ref<java::time::Clock> clock) { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::OffsetTime>>(clock); }
inline ref<java::time::OffsetTime> OffsetTime::of(ref<java::time::LocalTime> time, ref<java::time::ZoneOffset> offset) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::OffsetTime>>(time, offset); }
inline ref<java::time::OffsetTime> OffsetTime::of(jint hour, jint minute, jint second, jint nanoOfSecond, ref<java::time::ZoneOffset> offset) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::OffsetTime>>(hour, minute, second, nanoOfSecond, offset); }
inline ref<java::time::OffsetTime> OffsetTime::ofInstant(ref<java::time::Instant> instant, ref<java::time::ZoneId> zone) { return call_static_method<SCAPIX_META_STRING("ofInstant"), ref<java::time::OffsetTime>>(instant, zone); }
inline ref<java::time::OffsetTime> OffsetTime::from(ref<java::time::temporal::TemporalAccessor> temporal) { return call_static_method<SCAPIX_META_STRING("from"), ref<java::time::OffsetTime>>(temporal); }
inline ref<java::time::OffsetTime> OffsetTime::parse(ref<java::lang::CharSequence> text) { return call_static_method<SCAPIX_META_STRING("parse"), ref<java::time::OffsetTime>>(text); }
inline ref<java::time::OffsetTime> OffsetTime::parse(ref<java::lang::CharSequence> text, ref<java::time::format::DateTimeFormatter> formatter) { return call_static_method<SCAPIX_META_STRING("parse"), ref<java::time::OffsetTime>>(text, formatter); }
inline jboolean OffsetTime::isSupported(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(field); }
inline jboolean OffsetTime::isSupported(ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(unit); }
inline ref<java::time::temporal::ValueRange> OffsetTime::range(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("range"), ref<java::time::temporal::ValueRange>>(field); }
inline jint OffsetTime::get(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("get"), jint>(field); }
inline jlong OffsetTime::getLong(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(field); }
inline ref<java::time::ZoneOffset> OffsetTime::getOffset() { return call_method<SCAPIX_META_STRING("getOffset"), ref<java::time::ZoneOffset>>(); }
inline ref<java::time::OffsetTime> OffsetTime::withOffsetSameLocal(ref<java::time::ZoneOffset> offset) { return call_method<SCAPIX_META_STRING("withOffsetSameLocal"), ref<java::time::OffsetTime>>(offset); }
inline ref<java::time::OffsetTime> OffsetTime::withOffsetSameInstant(ref<java::time::ZoneOffset> offset) { return call_method<SCAPIX_META_STRING("withOffsetSameInstant"), ref<java::time::OffsetTime>>(offset); }
inline ref<java::time::LocalTime> OffsetTime::toLocalTime() { return call_method<SCAPIX_META_STRING("toLocalTime"), ref<java::time::LocalTime>>(); }
inline jint OffsetTime::getHour() { return call_method<SCAPIX_META_STRING("getHour"), jint>(); }
inline jint OffsetTime::getMinute() { return call_method<SCAPIX_META_STRING("getMinute"), jint>(); }
inline jint OffsetTime::getSecond() { return call_method<SCAPIX_META_STRING("getSecond"), jint>(); }
inline jint OffsetTime::getNano() { return call_method<SCAPIX_META_STRING("getNano"), jint>(); }
inline ref<java::time::OffsetTime> OffsetTime::with(ref<java::time::temporal::TemporalAdjuster> adjuster) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::OffsetTime>>(adjuster); }
inline ref<java::time::OffsetTime> OffsetTime::with(ref<java::time::temporal::TemporalField> field, jlong newValue) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::OffsetTime>>(field, newValue); }
inline ref<java::time::OffsetTime> OffsetTime::withHour(jint hour) { return call_method<SCAPIX_META_STRING("withHour"), ref<java::time::OffsetTime>>(hour); }
inline ref<java::time::OffsetTime> OffsetTime::withMinute(jint minute) { return call_method<SCAPIX_META_STRING("withMinute"), ref<java::time::OffsetTime>>(minute); }
inline ref<java::time::OffsetTime> OffsetTime::withSecond(jint second) { return call_method<SCAPIX_META_STRING("withSecond"), ref<java::time::OffsetTime>>(second); }
inline ref<java::time::OffsetTime> OffsetTime::withNano(jint nanoOfSecond) { return call_method<SCAPIX_META_STRING("withNano"), ref<java::time::OffsetTime>>(nanoOfSecond); }
inline ref<java::time::OffsetTime> OffsetTime::truncatedTo(ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("truncatedTo"), ref<java::time::OffsetTime>>(unit); }
inline ref<java::time::OffsetTime> OffsetTime::plus(ref<java::time::temporal::TemporalAmount> amountToAdd) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::OffsetTime>>(amountToAdd); }
inline ref<java::time::OffsetTime> OffsetTime::plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::OffsetTime>>(amountToAdd, p2); }
inline ref<java::time::OffsetTime> OffsetTime::plusHours(jlong hours) { return call_method<SCAPIX_META_STRING("plusHours"), ref<java::time::OffsetTime>>(hours); }
inline ref<java::time::OffsetTime> OffsetTime::plusMinutes(jlong minutes) { return call_method<SCAPIX_META_STRING("plusMinutes"), ref<java::time::OffsetTime>>(minutes); }
inline ref<java::time::OffsetTime> OffsetTime::plusSeconds(jlong seconds) { return call_method<SCAPIX_META_STRING("plusSeconds"), ref<java::time::OffsetTime>>(seconds); }
inline ref<java::time::OffsetTime> OffsetTime::plusNanos(jlong nanos) { return call_method<SCAPIX_META_STRING("plusNanos"), ref<java::time::OffsetTime>>(nanos); }
inline ref<java::time::OffsetTime> OffsetTime::minus(ref<java::time::temporal::TemporalAmount> amountToSubtract) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::OffsetTime>>(amountToSubtract); }
inline ref<java::time::OffsetTime> OffsetTime::minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::OffsetTime>>(amountToSubtract, p2); }
inline ref<java::time::OffsetTime> OffsetTime::minusHours(jlong hours) { return call_method<SCAPIX_META_STRING("minusHours"), ref<java::time::OffsetTime>>(hours); }
inline ref<java::time::OffsetTime> OffsetTime::minusMinutes(jlong minutes) { return call_method<SCAPIX_META_STRING("minusMinutes"), ref<java::time::OffsetTime>>(minutes); }
inline ref<java::time::OffsetTime> OffsetTime::minusSeconds(jlong seconds) { return call_method<SCAPIX_META_STRING("minusSeconds"), ref<java::time::OffsetTime>>(seconds); }
inline ref<java::time::OffsetTime> OffsetTime::minusNanos(jlong nanos) { return call_method<SCAPIX_META_STRING("minusNanos"), ref<java::time::OffsetTime>>(nanos); }
inline ref<java::lang::Object> OffsetTime::query(ref<java::time::temporal::TemporalQuery> query) { return call_method<SCAPIX_META_STRING("query"), ref<java::lang::Object>>(query); }
inline ref<java::time::temporal::Temporal> OffsetTime::adjustInto(ref<java::time::temporal::Temporal> temporal) { return call_method<SCAPIX_META_STRING("adjustInto"), ref<java::time::temporal::Temporal>>(temporal); }
inline jlong OffsetTime::until(ref<java::time::temporal::Temporal> endExclusive, ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("until"), jlong>(endExclusive, unit); }
inline ref<java::lang::String> OffsetTime::format(ref<java::time::format::DateTimeFormatter> formatter) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::String>>(formatter); }
inline ref<java::time::OffsetDateTime> OffsetTime::atDate(ref<java::time::LocalDate> date) { return call_method<SCAPIX_META_STRING("atDate"), ref<java::time::OffsetDateTime>>(date); }
inline jlong OffsetTime::toEpochSecond(ref<java::time::LocalDate> date) { return call_method<SCAPIX_META_STRING("toEpochSecond"), jlong>(date); }
inline jint OffsetTime::compareTo(ref<java::time::OffsetTime> other) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(other); }
inline jboolean OffsetTime::isAfter(ref<java::time::OffsetTime> other) { return call_method<SCAPIX_META_STRING("isAfter"), jboolean>(other); }
inline jboolean OffsetTime::isBefore(ref<java::time::OffsetTime> other) { return call_method<SCAPIX_META_STRING("isBefore"), jboolean>(other); }
inline jboolean OffsetTime::isEqual(ref<java::time::OffsetTime> other) { return call_method<SCAPIX_META_STRING("isEqual"), jboolean>(other); }
inline jboolean OffsetTime::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint OffsetTime::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> OffsetTime::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_OFFSETTIME_H
