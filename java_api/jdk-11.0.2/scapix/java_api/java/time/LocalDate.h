// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDate.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_TIME_LOCALDATE_H
#define SCAPIX_JAVA_TIME_LOCALDATE_H

namespace scapix::java_api {

namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::time { class Clock; }
namespace java::time { class DayOfWeek; }
namespace java::time { class Instant; }
namespace java::time { class LocalDateTime; }
namespace java::time { class LocalTime; }
namespace java::time { class Month; }
namespace java::time { class OffsetDateTime; }
namespace java::time { class OffsetTime; }
namespace java::time { class Period; }
namespace java::time { class ZoneId; }
namespace java::time { class ZoneOffset; }
namespace java::time { class ZonedDateTime; }
namespace java::time::chrono { class IsoChronology; }
namespace java::time::chrono { class IsoEra; }
namespace java::time::format { class DateTimeFormatter; }
namespace java::time::temporal { class TemporalAccessor; }
namespace java::time::temporal { class TemporalAmount; }
namespace java::time::temporal { class TemporalField; }
namespace java::time::temporal { class TemporalQuery; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::time::temporal { class ValueRange; }
namespace java::util::stream { class Stream; }

namespace java::time {

class LocalDate : public object_base<SCAPIX_META_STRING("java/time/LocalDate"),
	java::lang::Object,
	java::time::temporal::Temporal,
	java::time::temporal::TemporalAdjuster,
	java::time::chrono::ChronoLocalDate,
	java::io::Serializable>
{
public:

	static ref<java::time::LocalDate> MIN_();
	static ref<java::time::LocalDate> MAX_();
	static ref<java::time::LocalDate> EPOCH_();

	static ref<java::time::LocalDate> now();
	static ref<java::time::LocalDate> now(ref<java::time::ZoneId> zone);
	static ref<java::time::LocalDate> now(ref<java::time::Clock> clock);
	static ref<java::time::LocalDate> of(jint year, ref<java::time::Month> month, jint dayOfMonth);
	static ref<java::time::LocalDate> of(jint year, jint month, jint dayOfMonth);
	static ref<java::time::LocalDate> ofYearDay(jint year, jint dayOfYear);
	static ref<java::time::LocalDate> ofInstant(ref<java::time::Instant> instant, ref<java::time::ZoneId> zone);
	static ref<java::time::LocalDate> ofEpochDay(jlong epochDay);
	static ref<java::time::LocalDate> from(ref<java::time::temporal::TemporalAccessor> temporal);
	static ref<java::time::LocalDate> parse(ref<java::lang::CharSequence> text);
	static ref<java::time::LocalDate> parse(ref<java::lang::CharSequence> text, ref<java::time::format::DateTimeFormatter> formatter);
	jboolean isSupported(ref<java::time::temporal::TemporalField> field);
	jboolean isSupported(ref<java::time::temporal::TemporalUnit> unit);
	ref<java::time::temporal::ValueRange> range(ref<java::time::temporal::TemporalField> field);
	jint get(ref<java::time::temporal::TemporalField> field);
	jlong getLong(ref<java::time::temporal::TemporalField> field);
	ref<java::time::chrono::IsoChronology> getChronology();
	ref<java::time::chrono::IsoEra> getEra();
	jint getYear();
	jint getMonthValue();
	ref<java::time::Month> getMonth();
	jint getDayOfMonth();
	jint getDayOfYear();
	ref<java::time::DayOfWeek> getDayOfWeek();
	jboolean isLeapYear();
	jint lengthOfMonth();
	jint lengthOfYear();
	ref<java::time::LocalDate> with(ref<java::time::temporal::TemporalAdjuster> adjuster);
	ref<java::time::LocalDate> with(ref<java::time::temporal::TemporalField> field, jlong newValue);
	ref<java::time::LocalDate> withYear(jint year);
	ref<java::time::LocalDate> withMonth(jint month);
	ref<java::time::LocalDate> withDayOfMonth(jint dayOfMonth);
	ref<java::time::LocalDate> withDayOfYear(jint dayOfYear);
	ref<java::time::LocalDate> plus(ref<java::time::temporal::TemporalAmount> amountToAdd);
	ref<java::time::LocalDate> plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::LocalDate> plusYears(jlong yearsToAdd);
	ref<java::time::LocalDate> plusMonths(jlong monthsToAdd);
	ref<java::time::LocalDate> plusWeeks(jlong weeksToAdd);
	ref<java::time::LocalDate> plusDays(jlong daysToAdd);
	ref<java::time::LocalDate> minus(ref<java::time::temporal::TemporalAmount> amountToSubtract);
	ref<java::time::LocalDate> minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::LocalDate> minusYears(jlong yearsToSubtract);
	ref<java::time::LocalDate> minusMonths(jlong monthsToSubtract);
	ref<java::time::LocalDate> minusWeeks(jlong weeksToSubtract);
	ref<java::time::LocalDate> minusDays(jlong daysToSubtract);
	ref<java::lang::Object> query(ref<java::time::temporal::TemporalQuery> query);
	ref<java::time::temporal::Temporal> adjustInto(ref<java::time::temporal::Temporal> temporal);
	jlong until(ref<java::time::temporal::Temporal> endExclusive, ref<java::time::temporal::TemporalUnit> unit);
	ref<java::time::Period> until(ref<java::time::chrono::ChronoLocalDate> endDateExclusive);
	ref<java::util::stream::Stream> datesUntil(ref<java::time::LocalDate> endExclusive);
	ref<java::util::stream::Stream> datesUntil(ref<java::time::LocalDate> endExclusive, ref<java::time::Period> step);
	ref<java::lang::String> format(ref<java::time::format::DateTimeFormatter> formatter);
	ref<java::time::LocalDateTime> atTime(ref<java::time::LocalTime> time);
	ref<java::time::LocalDateTime> atTime(jint hour, jint minute);
	ref<java::time::LocalDateTime> atTime(jint hour, jint minute, jint second);
	ref<java::time::LocalDateTime> atTime(jint hour, jint minute, jint second, jint nanoOfSecond);
	ref<java::time::OffsetDateTime> atTime(ref<java::time::OffsetTime> time);
	ref<java::time::LocalDateTime> atStartOfDay();
	ref<java::time::ZonedDateTime> atStartOfDay(ref<java::time::ZoneId> zone);
	jlong toEpochDay();
	jlong toEpochSecond(ref<java::time::LocalTime> time, ref<java::time::ZoneOffset> offset);
	jint compareTo(ref<java::time::chrono::ChronoLocalDate> other);
	jboolean isAfter(ref<java::time::chrono::ChronoLocalDate> other);
	jboolean isBefore(ref<java::time::chrono::ChronoLocalDate> other);
	jboolean isEqual(ref<java::time::chrono::ChronoLocalDate> other);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	LocalDate(handle_type h) : base_(h) {}

};

} // namespace java::time
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Clock.h>
#include <scapix/java_api/java/time/DayOfWeek.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/time/LocalDateTime.h>
#include <scapix/java_api/java/time/LocalTime.h>
#include <scapix/java_api/java/time/Month.h>
#include <scapix/java_api/java/time/OffsetDateTime.h>
#include <scapix/java_api/java/time/OffsetTime.h>
#include <scapix/java_api/java/time/Period.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/ZoneOffset.h>
#include <scapix/java_api/java/time/ZonedDateTime.h>
#include <scapix/java_api/java/time/chrono/IsoChronology.h>
#include <scapix/java_api/java/time/chrono/IsoEra.h>
#include <scapix/java_api/java/time/format/DateTimeFormatter.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>
#include <scapix/java_api/java/util/stream/Stream.h>

namespace scapix::java_api {
namespace java::time {

inline ref<java::time::LocalDate> LocalDate::MIN_() { return get_static_field<SCAPIX_META_STRING("MIN"), ref<java::time::LocalDate>>(); }
inline ref<java::time::LocalDate> LocalDate::MAX_() { return get_static_field<SCAPIX_META_STRING("MAX"), ref<java::time::LocalDate>>(); }
inline ref<java::time::LocalDate> LocalDate::EPOCH_() { return get_static_field<SCAPIX_META_STRING("EPOCH"), ref<java::time::LocalDate>>(); }
inline ref<java::time::LocalDate> LocalDate::now() { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::LocalDate>>(); }
inline ref<java::time::LocalDate> LocalDate::now(ref<java::time::ZoneId> zone) { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::LocalDate>>(zone); }
inline ref<java::time::LocalDate> LocalDate::now(ref<java::time::Clock> clock) { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::LocalDate>>(clock); }
inline ref<java::time::LocalDate> LocalDate::of(jint year, ref<java::time::Month> month, jint dayOfMonth) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::LocalDate>>(year, month, dayOfMonth); }
inline ref<java::time::LocalDate> LocalDate::of(jint year, jint month, jint dayOfMonth) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::LocalDate>>(year, month, dayOfMonth); }
inline ref<java::time::LocalDate> LocalDate::ofYearDay(jint year, jint dayOfYear) { return call_static_method<SCAPIX_META_STRING("ofYearDay"), ref<java::time::LocalDate>>(year, dayOfYear); }
inline ref<java::time::LocalDate> LocalDate::ofInstant(ref<java::time::Instant> instant, ref<java::time::ZoneId> zone) { return call_static_method<SCAPIX_META_STRING("ofInstant"), ref<java::time::LocalDate>>(instant, zone); }
inline ref<java::time::LocalDate> LocalDate::ofEpochDay(jlong epochDay) { return call_static_method<SCAPIX_META_STRING("ofEpochDay"), ref<java::time::LocalDate>>(epochDay); }
inline ref<java::time::LocalDate> LocalDate::from(ref<java::time::temporal::TemporalAccessor> temporal) { return call_static_method<SCAPIX_META_STRING("from"), ref<java::time::LocalDate>>(temporal); }
inline ref<java::time::LocalDate> LocalDate::parse(ref<java::lang::CharSequence> text) { return call_static_method<SCAPIX_META_STRING("parse"), ref<java::time::LocalDate>>(text); }
inline ref<java::time::LocalDate> LocalDate::parse(ref<java::lang::CharSequence> text, ref<java::time::format::DateTimeFormatter> formatter) { return call_static_method<SCAPIX_META_STRING("parse"), ref<java::time::LocalDate>>(text, formatter); }
inline jboolean LocalDate::isSupported(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(field); }
inline jboolean LocalDate::isSupported(ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(unit); }
inline ref<java::time::temporal::ValueRange> LocalDate::range(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("range"), ref<java::time::temporal::ValueRange>>(field); }
inline jint LocalDate::get(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("get"), jint>(field); }
inline jlong LocalDate::getLong(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(field); }
inline ref<java::time::chrono::IsoChronology> LocalDate::getChronology() { return call_method<SCAPIX_META_STRING("getChronology"), ref<java::time::chrono::IsoChronology>>(); }
inline ref<java::time::chrono::IsoEra> LocalDate::getEra() { return call_method<SCAPIX_META_STRING("getEra"), ref<java::time::chrono::IsoEra>>(); }
inline jint LocalDate::getYear() { return call_method<SCAPIX_META_STRING("getYear"), jint>(); }
inline jint LocalDate::getMonthValue() { return call_method<SCAPIX_META_STRING("getMonthValue"), jint>(); }
inline ref<java::time::Month> LocalDate::getMonth() { return call_method<SCAPIX_META_STRING("getMonth"), ref<java::time::Month>>(); }
inline jint LocalDate::getDayOfMonth() { return call_method<SCAPIX_META_STRING("getDayOfMonth"), jint>(); }
inline jint LocalDate::getDayOfYear() { return call_method<SCAPIX_META_STRING("getDayOfYear"), jint>(); }
inline ref<java::time::DayOfWeek> LocalDate::getDayOfWeek() { return call_method<SCAPIX_META_STRING("getDayOfWeek"), ref<java::time::DayOfWeek>>(); }
inline jboolean LocalDate::isLeapYear() { return call_method<SCAPIX_META_STRING("isLeapYear"), jboolean>(); }
inline jint LocalDate::lengthOfMonth() { return call_method<SCAPIX_META_STRING("lengthOfMonth"), jint>(); }
inline jint LocalDate::lengthOfYear() { return call_method<SCAPIX_META_STRING("lengthOfYear"), jint>(); }
inline ref<java::time::LocalDate> LocalDate::with(ref<java::time::temporal::TemporalAdjuster> adjuster) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::LocalDate>>(adjuster); }
inline ref<java::time::LocalDate> LocalDate::with(ref<java::time::temporal::TemporalField> field, jlong newValue) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::LocalDate>>(field, newValue); }
inline ref<java::time::LocalDate> LocalDate::withYear(jint year) { return call_method<SCAPIX_META_STRING("withYear"), ref<java::time::LocalDate>>(year); }
inline ref<java::time::LocalDate> LocalDate::withMonth(jint month) { return call_method<SCAPIX_META_STRING("withMonth"), ref<java::time::LocalDate>>(month); }
inline ref<java::time::LocalDate> LocalDate::withDayOfMonth(jint dayOfMonth) { return call_method<SCAPIX_META_STRING("withDayOfMonth"), ref<java::time::LocalDate>>(dayOfMonth); }
inline ref<java::time::LocalDate> LocalDate::withDayOfYear(jint dayOfYear) { return call_method<SCAPIX_META_STRING("withDayOfYear"), ref<java::time::LocalDate>>(dayOfYear); }
inline ref<java::time::LocalDate> LocalDate::plus(ref<java::time::temporal::TemporalAmount> amountToAdd) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::LocalDate>>(amountToAdd); }
inline ref<java::time::LocalDate> LocalDate::plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::LocalDate>>(amountToAdd, p2); }
inline ref<java::time::LocalDate> LocalDate::plusYears(jlong yearsToAdd) { return call_method<SCAPIX_META_STRING("plusYears"), ref<java::time::LocalDate>>(yearsToAdd); }
inline ref<java::time::LocalDate> LocalDate::plusMonths(jlong monthsToAdd) { return call_method<SCAPIX_META_STRING("plusMonths"), ref<java::time::LocalDate>>(monthsToAdd); }
inline ref<java::time::LocalDate> LocalDate::plusWeeks(jlong weeksToAdd) { return call_method<SCAPIX_META_STRING("plusWeeks"), ref<java::time::LocalDate>>(weeksToAdd); }
inline ref<java::time::LocalDate> LocalDate::plusDays(jlong daysToAdd) { return call_method<SCAPIX_META_STRING("plusDays"), ref<java::time::LocalDate>>(daysToAdd); }
inline ref<java::time::LocalDate> LocalDate::minus(ref<java::time::temporal::TemporalAmount> amountToSubtract) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::LocalDate>>(amountToSubtract); }
inline ref<java::time::LocalDate> LocalDate::minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::LocalDate>>(amountToSubtract, p2); }
inline ref<java::time::LocalDate> LocalDate::minusYears(jlong yearsToSubtract) { return call_method<SCAPIX_META_STRING("minusYears"), ref<java::time::LocalDate>>(yearsToSubtract); }
inline ref<java::time::LocalDate> LocalDate::minusMonths(jlong monthsToSubtract) { return call_method<SCAPIX_META_STRING("minusMonths"), ref<java::time::LocalDate>>(monthsToSubtract); }
inline ref<java::time::LocalDate> LocalDate::minusWeeks(jlong weeksToSubtract) { return call_method<SCAPIX_META_STRING("minusWeeks"), ref<java::time::LocalDate>>(weeksToSubtract); }
inline ref<java::time::LocalDate> LocalDate::minusDays(jlong daysToSubtract) { return call_method<SCAPIX_META_STRING("minusDays"), ref<java::time::LocalDate>>(daysToSubtract); }
inline ref<java::lang::Object> LocalDate::query(ref<java::time::temporal::TemporalQuery> query) { return call_method<SCAPIX_META_STRING("query"), ref<java::lang::Object>>(query); }
inline ref<java::time::temporal::Temporal> LocalDate::adjustInto(ref<java::time::temporal::Temporal> temporal) { return call_method<SCAPIX_META_STRING("adjustInto"), ref<java::time::temporal::Temporal>>(temporal); }
inline jlong LocalDate::until(ref<java::time::temporal::Temporal> endExclusive, ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("until"), jlong>(endExclusive, unit); }
inline ref<java::time::Period> LocalDate::until(ref<java::time::chrono::ChronoLocalDate> endDateExclusive) { return call_method<SCAPIX_META_STRING("until"), ref<java::time::Period>>(endDateExclusive); }
inline ref<java::util::stream::Stream> LocalDate::datesUntil(ref<java::time::LocalDate> endExclusive) { return call_method<SCAPIX_META_STRING("datesUntil"), ref<java::util::stream::Stream>>(endExclusive); }
inline ref<java::util::stream::Stream> LocalDate::datesUntil(ref<java::time::LocalDate> endExclusive, ref<java::time::Period> step) { return call_method<SCAPIX_META_STRING("datesUntil"), ref<java::util::stream::Stream>>(endExclusive, step); }
inline ref<java::lang::String> LocalDate::format(ref<java::time::format::DateTimeFormatter> formatter) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::String>>(formatter); }
inline ref<java::time::LocalDateTime> LocalDate::atTime(ref<java::time::LocalTime> time) { return call_method<SCAPIX_META_STRING("atTime"), ref<java::time::LocalDateTime>>(time); }
inline ref<java::time::LocalDateTime> LocalDate::atTime(jint hour, jint minute) { return call_method<SCAPIX_META_STRING("atTime"), ref<java::time::LocalDateTime>>(hour, minute); }
inline ref<java::time::LocalDateTime> LocalDate::atTime(jint hour, jint minute, jint second) { return call_method<SCAPIX_META_STRING("atTime"), ref<java::time::LocalDateTime>>(hour, minute, second); }
inline ref<java::time::LocalDateTime> LocalDate::atTime(jint hour, jint minute, jint second, jint nanoOfSecond) { return call_method<SCAPIX_META_STRING("atTime"), ref<java::time::LocalDateTime>>(hour, minute, second, nanoOfSecond); }
inline ref<java::time::OffsetDateTime> LocalDate::atTime(ref<java::time::OffsetTime> time) { return call_method<SCAPIX_META_STRING("atTime"), ref<java::time::OffsetDateTime>>(time); }
inline ref<java::time::LocalDateTime> LocalDate::atStartOfDay() { return call_method<SCAPIX_META_STRING("atStartOfDay"), ref<java::time::LocalDateTime>>(); }
inline ref<java::time::ZonedDateTime> LocalDate::atStartOfDay(ref<java::time::ZoneId> zone) { return call_method<SCAPIX_META_STRING("atStartOfDay"), ref<java::time::ZonedDateTime>>(zone); }
inline jlong LocalDate::toEpochDay() { return call_method<SCAPIX_META_STRING("toEpochDay"), jlong>(); }
inline jlong LocalDate::toEpochSecond(ref<java::time::LocalTime> time, ref<java::time::ZoneOffset> offset) { return call_method<SCAPIX_META_STRING("toEpochSecond"), jlong>(time, offset); }
inline jint LocalDate::compareTo(ref<java::time::chrono::ChronoLocalDate> other) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(other); }
inline jboolean LocalDate::isAfter(ref<java::time::chrono::ChronoLocalDate> other) { return call_method<SCAPIX_META_STRING("isAfter"), jboolean>(other); }
inline jboolean LocalDate::isBefore(ref<java::time::chrono::ChronoLocalDate> other) { return call_method<SCAPIX_META_STRING("isBefore"), jboolean>(other); }
inline jboolean LocalDate::isEqual(ref<java::time::chrono::ChronoLocalDate> other) { return call_method<SCAPIX_META_STRING("isEqual"), jboolean>(other); }
inline jboolean LocalDate::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint LocalDate::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> LocalDate::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_LOCALDATE_H
