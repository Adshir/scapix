// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_TIME_ZONE_ZONEOFFSETTRANSITIONRULE_H
#define SCAPIX_JAVA_TIME_ZONE_ZONEOFFSETTRANSITIONRULE_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time { class DayOfWeek; }
namespace java::time { class LocalTime; }
namespace java::time { class Month; }
namespace java::time { class ZoneOffset; }
namespace java::time::zone { class ZoneOffsetTransition; }
namespace java::time::zone { class ZoneOffsetTransitionRule_TimeDefinition; }

namespace java::time::zone {

class ZoneOffsetTransitionRule : public object_base<SCAPIX_META_STRING("java/time/zone/ZoneOffsetTransitionRule"),
	java::lang::Object,
	java::io::Serializable>
{
public:

	using TimeDefinition = ZoneOffsetTransitionRule_TimeDefinition;

	static ref<java::time::zone::ZoneOffsetTransitionRule> of(ref<java::time::Month> month, jint dayOfMonthIndicator, ref<java::time::DayOfWeek> dayOfWeek, ref<java::time::LocalTime> time, jboolean timeEndOfDay, ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition> timeDefnition, ref<java::time::ZoneOffset> standardOffset, ref<java::time::ZoneOffset> offsetBefore, ref<java::time::ZoneOffset> offsetAfter);
	ref<java::time::Month> getMonth();
	jint getDayOfMonthIndicator();
	ref<java::time::DayOfWeek> getDayOfWeek();
	ref<java::time::LocalTime> getLocalTime();
	jboolean isMidnightEndOfDay();
	ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition> getTimeDefinition();
	ref<java::time::ZoneOffset> getStandardOffset();
	ref<java::time::ZoneOffset> getOffsetBefore();
	ref<java::time::ZoneOffset> getOffsetAfter();
	ref<java::time::zone::ZoneOffsetTransition> createTransition(jint year);
	jboolean equals(ref<java::lang::Object> otherRule);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	ZoneOffsetTransitionRule(handle_type h) : base_(h) {}

};

} // namespace java::time::zone
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/DayOfWeek.h>
#include <scapix/java_api/java/time/LocalTime.h>
#include <scapix/java_api/java/time/Month.h>
#include <scapix/java_api/java/time/ZoneOffset.h>
#include <scapix/java_api/java/time/zone/ZoneOffsetTransition.h>
#include <scapix/java_api/java/time/zone/ZoneOffsetTransitionRule_TimeDefinition.h>

namespace scapix::java_api {
namespace java::time::zone {

inline ref<java::time::zone::ZoneOffsetTransitionRule> ZoneOffsetTransitionRule::of(ref<java::time::Month> month, jint dayOfMonthIndicator, ref<java::time::DayOfWeek> dayOfWeek, ref<java::time::LocalTime> time, jboolean timeEndOfDay, ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition> timeDefnition, ref<java::time::ZoneOffset> standardOffset, ref<java::time::ZoneOffset> offsetBefore, ref<java::time::ZoneOffset> offsetAfter) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::zone::ZoneOffsetTransitionRule>>(month, dayOfMonthIndicator, dayOfWeek, time, timeEndOfDay, timeDefnition, standardOffset, offsetBefore, offsetAfter); }
inline ref<java::time::Month> ZoneOffsetTransitionRule::getMonth() { return call_method<SCAPIX_META_STRING("getMonth"), ref<java::time::Month>>(); }
inline jint ZoneOffsetTransitionRule::getDayOfMonthIndicator() { return call_method<SCAPIX_META_STRING("getDayOfMonthIndicator"), jint>(); }
inline ref<java::time::DayOfWeek> ZoneOffsetTransitionRule::getDayOfWeek() { return call_method<SCAPIX_META_STRING("getDayOfWeek"), ref<java::time::DayOfWeek>>(); }
inline ref<java::time::LocalTime> ZoneOffsetTransitionRule::getLocalTime() { return call_method<SCAPIX_META_STRING("getLocalTime"), ref<java::time::LocalTime>>(); }
inline jboolean ZoneOffsetTransitionRule::isMidnightEndOfDay() { return call_method<SCAPIX_META_STRING("isMidnightEndOfDay"), jboolean>(); }
inline ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition> ZoneOffsetTransitionRule::getTimeDefinition() { return call_method<SCAPIX_META_STRING("getTimeDefinition"), ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition>>(); }
inline ref<java::time::ZoneOffset> ZoneOffsetTransitionRule::getStandardOffset() { return call_method<SCAPIX_META_STRING("getStandardOffset"), ref<java::time::ZoneOffset>>(); }
inline ref<java::time::ZoneOffset> ZoneOffsetTransitionRule::getOffsetBefore() { return call_method<SCAPIX_META_STRING("getOffsetBefore"), ref<java::time::ZoneOffset>>(); }
inline ref<java::time::ZoneOffset> ZoneOffsetTransitionRule::getOffsetAfter() { return call_method<SCAPIX_META_STRING("getOffsetAfter"), ref<java::time::ZoneOffset>>(); }
inline ref<java::time::zone::ZoneOffsetTransition> ZoneOffsetTransitionRule::createTransition(jint year) { return call_method<SCAPIX_META_STRING("createTransition"), ref<java::time::zone::ZoneOffsetTransition>>(year); }
inline jboolean ZoneOffsetTransitionRule::equals(ref<java::lang::Object> otherRule) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(otherRule); }
inline jint ZoneOffsetTransitionRule::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> ZoneOffsetTransitionRule::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time::zone
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_ZONE_ZONEOFFSETTRANSITIONRULE_H
