// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/chrono/ChronoPeriod.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_TIME_CHRONO_CHRONOPERIODIMPL_H
#define SCAPIX_JAVA_TIME_CHRONO_CHRONOPERIODIMPL_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time::chrono { class Chronology; }
namespace java::time::temporal { class Temporal; }
namespace java::time::temporal { class TemporalAmount; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::util { class List; }

namespace java::time::chrono {

// private
class ChronoPeriodImpl : public object_base<SCAPIX_META_STRING("java/time/chrono/ChronoPeriodImpl"),
	java::lang::Object,
	java::time::chrono::ChronoPeriod,
	java::io::Serializable>
{
public:

	jlong get(ref<java::time::temporal::TemporalUnit> unit);
	ref<java::util::List> getUnits();
	ref<java::time::chrono::Chronology> getChronology();
	jboolean isZero();
	jboolean isNegative();
	ref<java::time::chrono::ChronoPeriod> plus(ref<java::time::temporal::TemporalAmount> amountToAdd);
	ref<java::time::chrono::ChronoPeriod> minus(ref<java::time::temporal::TemporalAmount> amountToSubtract);
	ref<java::time::chrono::ChronoPeriod> multipliedBy(jint scalar);
	ref<java::time::chrono::ChronoPeriod> normalized();
	ref<java::time::temporal::Temporal> addTo(ref<java::time::temporal::Temporal> temporal);
	ref<java::time::temporal::Temporal> subtractFrom(ref<java::time::temporal::Temporal> temporal);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	ChronoPeriodImpl(handle_type h) : base_(h) {}

};

} // namespace java::time::chrono
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/chrono/Chronology.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace java::time::chrono {

inline jlong ChronoPeriodImpl::get(ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("get"), jlong>(unit); }
inline ref<java::util::List> ChronoPeriodImpl::getUnits() { return call_method<SCAPIX_META_STRING("getUnits"), ref<java::util::List>>(); }
inline ref<java::time::chrono::Chronology> ChronoPeriodImpl::getChronology() { return call_method<SCAPIX_META_STRING("getChronology"), ref<java::time::chrono::Chronology>>(); }
inline jboolean ChronoPeriodImpl::isZero() { return call_method<SCAPIX_META_STRING("isZero"), jboolean>(); }
inline jboolean ChronoPeriodImpl::isNegative() { return call_method<SCAPIX_META_STRING("isNegative"), jboolean>(); }
inline ref<java::time::chrono::ChronoPeriod> ChronoPeriodImpl::plus(ref<java::time::temporal::TemporalAmount> amountToAdd) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::chrono::ChronoPeriod>>(amountToAdd); }
inline ref<java::time::chrono::ChronoPeriod> ChronoPeriodImpl::minus(ref<java::time::temporal::TemporalAmount> amountToSubtract) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::chrono::ChronoPeriod>>(amountToSubtract); }
inline ref<java::time::chrono::ChronoPeriod> ChronoPeriodImpl::multipliedBy(jint scalar) { return call_method<SCAPIX_META_STRING("multipliedBy"), ref<java::time::chrono::ChronoPeriod>>(scalar); }
inline ref<java::time::chrono::ChronoPeriod> ChronoPeriodImpl::normalized() { return call_method<SCAPIX_META_STRING("normalized"), ref<java::time::chrono::ChronoPeriod>>(); }
inline ref<java::time::temporal::Temporal> ChronoPeriodImpl::addTo(ref<java::time::temporal::Temporal> temporal) { return call_method<SCAPIX_META_STRING("addTo"), ref<java::time::temporal::Temporal>>(temporal); }
inline ref<java::time::temporal::Temporal> ChronoPeriodImpl::subtractFrom(ref<java::time::temporal::Temporal> temporal) { return call_method<SCAPIX_META_STRING("subtractFrom"), ref<java::time::temporal::Temporal>>(temporal); }
inline jboolean ChronoPeriodImpl::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint ChronoPeriodImpl::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> ChronoPeriodImpl::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time::chrono
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_CHRONO_CHRONOPERIODIMPL_H
