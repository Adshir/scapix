// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_TIME_CHRONO_CHRONOLOGY_H
#define SCAPIX_JAVA_TIME_CHRONO_CHRONOLOGY_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time { class Clock; }
namespace java::time { class Instant; }
namespace java::time { class ZoneId; }
namespace java::time { class ZoneOffset; }
namespace java::time::chrono { class ChronoLocalDate; }
namespace java::time::chrono { class ChronoLocalDateTime; }
namespace java::time::chrono { class ChronoPeriod; }
namespace java::time::chrono { class ChronoZonedDateTime; }
namespace java::time::chrono { class Era; }
namespace java::time::format { class ResolverStyle; }
namespace java::time::format { class TextStyle; }
namespace java::time::temporal { class ChronoField; }
namespace java::time::temporal { class TemporalAccessor; }
namespace java::time::temporal { class ValueRange; }
namespace java::util { class List; }
namespace java::util { class Locale; }
namespace java::util { class Map; }
namespace java::util { class Set; }

namespace java::time::chrono {

class Chronology : public object_base<SCAPIX_META_STRING("java/time/chrono/Chronology"),
	java::lang::Object,
	java::lang::Comparable>
{
public:

	static ref<java::time::chrono::Chronology> from(ref<java::time::temporal::TemporalAccessor> temporal);
	static ref<java::time::chrono::Chronology> ofLocale(ref<java::util::Locale> locale);
	static ref<java::time::chrono::Chronology> of(ref<java::lang::String> id);
	static ref<java::util::Set> getAvailableChronologies();
	ref<java::lang::String> getId();
	ref<java::lang::String> getCalendarType();
	ref<java::time::chrono::ChronoLocalDate> date(ref<java::time::chrono::Era> era, jint yearOfEra, jint month, jint dayOfMonth);
	ref<java::time::chrono::ChronoLocalDate> date(jint p1, jint p2, jint p3);
	ref<java::time::chrono::ChronoLocalDate> dateYearDay(ref<java::time::chrono::Era> era, jint yearOfEra, jint dayOfYear);
	ref<java::time::chrono::ChronoLocalDate> dateYearDay(jint p1, jint p2);
	ref<java::time::chrono::ChronoLocalDate> dateEpochDay(jlong p1);
	ref<java::time::chrono::ChronoLocalDate> dateNow();
	ref<java::time::chrono::ChronoLocalDate> dateNow(ref<java::time::ZoneId> zone);
	ref<java::time::chrono::ChronoLocalDate> dateNow(ref<java::time::Clock> clock);
	ref<java::time::chrono::ChronoLocalDate> date(ref<java::time::temporal::TemporalAccessor> p1);
	ref<java::time::chrono::ChronoLocalDateTime> localDateTime(ref<java::time::temporal::TemporalAccessor> temporal);
	ref<java::time::chrono::ChronoZonedDateTime> zonedDateTime(ref<java::time::temporal::TemporalAccessor> temporal);
	ref<java::time::chrono::ChronoZonedDateTime> zonedDateTime(ref<java::time::Instant> instant, ref<java::time::ZoneId> zone);
	jboolean isLeapYear(jlong p1);
	jint prolepticYear(ref<java::time::chrono::Era> p1, jint p2);
	ref<java::time::chrono::Era> eraOf(jint p1);
	ref<java::util::List> eras();
	ref<java::time::temporal::ValueRange> range(ref<java::time::temporal::ChronoField> p1);
	ref<java::lang::String> getDisplayName(ref<java::time::format::TextStyle> style, ref<java::util::Locale> locale);
	ref<java::time::chrono::ChronoLocalDate> resolveDate(ref<java::util::Map> p1, ref<java::time::format::ResolverStyle> p2);
	ref<java::time::chrono::ChronoPeriod> period(jint years, jint months, jint days);
	jlong epochSecond(jint prolepticYear, jint month, jint dayOfMonth, jint hour, jint minute, jint second, ref<java::time::ZoneOffset> zoneOffset);
	jlong epochSecond(ref<java::time::chrono::Era> era, jint yearOfEra, jint month, jint dayOfMonth, jint hour, jint minute, jint second, ref<java::time::ZoneOffset> zoneOffset);
	jint compareTo(ref<java::time::chrono::Chronology> p1);
	jboolean equals(ref<java::lang::Object> p1);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	Chronology(handle_type h) : base_(h) {}

};

} // namespace java::time::chrono
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Clock.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/ZoneOffset.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDate.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDateTime.h>
#include <scapix/java_api/java/time/chrono/ChronoPeriod.h>
#include <scapix/java_api/java/time/chrono/ChronoZonedDateTime.h>
#include <scapix/java_api/java/time/chrono/Era.h>
#include <scapix/java_api/java/time/format/ResolverStyle.h>
#include <scapix/java_api/java/time/format/TextStyle.h>
#include <scapix/java_api/java/time/temporal/ChronoField.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace java::time::chrono {

inline ref<java::time::chrono::Chronology> Chronology::from(ref<java::time::temporal::TemporalAccessor> temporal) { return call_static_method<SCAPIX_META_STRING("from"), ref<java::time::chrono::Chronology>>(temporal); }
inline ref<java::time::chrono::Chronology> Chronology::ofLocale(ref<java::util::Locale> locale) { return call_static_method<SCAPIX_META_STRING("ofLocale"), ref<java::time::chrono::Chronology>>(locale); }
inline ref<java::time::chrono::Chronology> Chronology::of(ref<java::lang::String> id) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::chrono::Chronology>>(id); }
inline ref<java::util::Set> Chronology::getAvailableChronologies() { return call_static_method<SCAPIX_META_STRING("getAvailableChronologies"), ref<java::util::Set>>(); }
inline ref<java::lang::String> Chronology::getId() { return call_method<SCAPIX_META_STRING("getId"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Chronology::getCalendarType() { return call_method<SCAPIX_META_STRING("getCalendarType"), ref<java::lang::String>>(); }
inline ref<java::time::chrono::ChronoLocalDate> Chronology::date(ref<java::time::chrono::Era> era, jint yearOfEra, jint month, jint dayOfMonth) { return call_method<SCAPIX_META_STRING("date"), ref<java::time::chrono::ChronoLocalDate>>(era, yearOfEra, month, dayOfMonth); }
inline ref<java::time::chrono::ChronoLocalDate> Chronology::date(jint p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("date"), ref<java::time::chrono::ChronoLocalDate>>(p1, p2, p3); }
inline ref<java::time::chrono::ChronoLocalDate> Chronology::dateYearDay(ref<java::time::chrono::Era> era, jint yearOfEra, jint dayOfYear) { return call_method<SCAPIX_META_STRING("dateYearDay"), ref<java::time::chrono::ChronoLocalDate>>(era, yearOfEra, dayOfYear); }
inline ref<java::time::chrono::ChronoLocalDate> Chronology::dateYearDay(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("dateYearDay"), ref<java::time::chrono::ChronoLocalDate>>(p1, p2); }
inline ref<java::time::chrono::ChronoLocalDate> Chronology::dateEpochDay(jlong p1) { return call_method<SCAPIX_META_STRING("dateEpochDay"), ref<java::time::chrono::ChronoLocalDate>>(p1); }
inline ref<java::time::chrono::ChronoLocalDate> Chronology::dateNow() { return call_method<SCAPIX_META_STRING("dateNow"), ref<java::time::chrono::ChronoLocalDate>>(); }
inline ref<java::time::chrono::ChronoLocalDate> Chronology::dateNow(ref<java::time::ZoneId> zone) { return call_method<SCAPIX_META_STRING("dateNow"), ref<java::time::chrono::ChronoLocalDate>>(zone); }
inline ref<java::time::chrono::ChronoLocalDate> Chronology::dateNow(ref<java::time::Clock> clock) { return call_method<SCAPIX_META_STRING("dateNow"), ref<java::time::chrono::ChronoLocalDate>>(clock); }
inline ref<java::time::chrono::ChronoLocalDate> Chronology::date(ref<java::time::temporal::TemporalAccessor> p1) { return call_method<SCAPIX_META_STRING("date"), ref<java::time::chrono::ChronoLocalDate>>(p1); }
inline ref<java::time::chrono::ChronoLocalDateTime> Chronology::localDateTime(ref<java::time::temporal::TemporalAccessor> temporal) { return call_method<SCAPIX_META_STRING("localDateTime"), ref<java::time::chrono::ChronoLocalDateTime>>(temporal); }
inline ref<java::time::chrono::ChronoZonedDateTime> Chronology::zonedDateTime(ref<java::time::temporal::TemporalAccessor> temporal) { return call_method<SCAPIX_META_STRING("zonedDateTime"), ref<java::time::chrono::ChronoZonedDateTime>>(temporal); }
inline ref<java::time::chrono::ChronoZonedDateTime> Chronology::zonedDateTime(ref<java::time::Instant> instant, ref<java::time::ZoneId> zone) { return call_method<SCAPIX_META_STRING("zonedDateTime"), ref<java::time::chrono::ChronoZonedDateTime>>(instant, zone); }
inline jboolean Chronology::isLeapYear(jlong p1) { return call_method<SCAPIX_META_STRING("isLeapYear"), jboolean>(p1); }
inline jint Chronology::prolepticYear(ref<java::time::chrono::Era> p1, jint p2) { return call_method<SCAPIX_META_STRING("prolepticYear"), jint>(p1, p2); }
inline ref<java::time::chrono::Era> Chronology::eraOf(jint p1) { return call_method<SCAPIX_META_STRING("eraOf"), ref<java::time::chrono::Era>>(p1); }
inline ref<java::util::List> Chronology::eras() { return call_method<SCAPIX_META_STRING("eras"), ref<java::util::List>>(); }
inline ref<java::time::temporal::ValueRange> Chronology::range(ref<java::time::temporal::ChronoField> p1) { return call_method<SCAPIX_META_STRING("range"), ref<java::time::temporal::ValueRange>>(p1); }
inline ref<java::lang::String> Chronology::getDisplayName(ref<java::time::format::TextStyle> style, ref<java::util::Locale> locale) { return call_method<SCAPIX_META_STRING("getDisplayName"), ref<java::lang::String>>(style, locale); }
inline ref<java::time::chrono::ChronoLocalDate> Chronology::resolveDate(ref<java::util::Map> p1, ref<java::time::format::ResolverStyle> p2) { return call_method<SCAPIX_META_STRING("resolveDate"), ref<java::time::chrono::ChronoLocalDate>>(p1, p2); }
inline ref<java::time::chrono::ChronoPeriod> Chronology::period(jint years, jint months, jint days) { return call_method<SCAPIX_META_STRING("period"), ref<java::time::chrono::ChronoPeriod>>(years, months, days); }
inline jlong Chronology::epochSecond(jint prolepticYear, jint month, jint dayOfMonth, jint hour, jint minute, jint second, ref<java::time::ZoneOffset> zoneOffset) { return call_method<SCAPIX_META_STRING("epochSecond"), jlong>(prolepticYear, month, dayOfMonth, hour, minute, second, zoneOffset); }
inline jlong Chronology::epochSecond(ref<java::time::chrono::Era> era, jint yearOfEra, jint month, jint dayOfMonth, jint hour, jint minute, jint second, ref<java::time::ZoneOffset> zoneOffset) { return call_method<SCAPIX_META_STRING("epochSecond"), jlong>(era, yearOfEra, month, dayOfMonth, hour, minute, second, zoneOffset); }
inline jint Chronology::compareTo(ref<java::time::chrono::Chronology> p1) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(p1); }
inline jboolean Chronology::equals(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(p1); }
inline jint Chronology::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> Chronology::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time::chrono
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_CHRONO_CHRONOLOGY_H
