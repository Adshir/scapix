// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_TIME_CHRONO_CHRONOLOCALDATETIME_H
#define SCAPIX_JAVA_TIME_CHRONO_CHRONOLOCALDATETIME_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time { class Instant; }
namespace java::time { class LocalTime; }
namespace java::time { class ZoneId; }
namespace java::time { class ZoneOffset; }
namespace java::time::chrono { class ChronoLocalDate; }
namespace java::time::chrono { class ChronoZonedDateTime; }
namespace java::time::chrono { class Chronology; }
namespace java::time::format { class DateTimeFormatter; }
namespace java::time::temporal { class TemporalAccessor; }
namespace java::time::temporal { class TemporalAmount; }
namespace java::time::temporal { class TemporalField; }
namespace java::time::temporal { class TemporalQuery; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::util { class Comparator; }

namespace java::time::chrono {

class ChronoLocalDateTime : public object_base<SCAPIX_META_STRING("java/time/chrono/ChronoLocalDateTime"),
	java::lang::Object,
	java::time::temporal::Temporal,
	java::time::temporal::TemporalAdjuster,
	java::lang::Comparable>
{
public:

	static ref<java::util::Comparator> timeLineOrder();
	static ref<java::time::chrono::ChronoLocalDateTime> from(ref<java::time::temporal::TemporalAccessor> temporal);
	ref<java::time::chrono::Chronology> getChronology();
	ref<java::time::chrono::ChronoLocalDate> toLocalDate();
	ref<java::time::LocalTime> toLocalTime();
	jboolean isSupported(ref<java::time::temporal::TemporalField> p1);
	jboolean isSupported(ref<java::time::temporal::TemporalUnit> unit);
	ref<java::time::chrono::ChronoLocalDateTime> with(ref<java::time::temporal::TemporalAdjuster> adjuster);
	ref<java::time::chrono::ChronoLocalDateTime> with(ref<java::time::temporal::TemporalField> p1, jlong p2);
	ref<java::time::chrono::ChronoLocalDateTime> plus(ref<java::time::temporal::TemporalAmount> amount);
	ref<java::time::chrono::ChronoLocalDateTime> plus(jlong p1, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::chrono::ChronoLocalDateTime> minus(ref<java::time::temporal::TemporalAmount> amount);
	ref<java::time::chrono::ChronoLocalDateTime> minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::lang::Object> query(ref<java::time::temporal::TemporalQuery> query);
	ref<java::time::temporal::Temporal> adjustInto(ref<java::time::temporal::Temporal> temporal);
	ref<java::lang::String> format(ref<java::time::format::DateTimeFormatter> formatter);
	ref<java::time::chrono::ChronoZonedDateTime> atZone(ref<java::time::ZoneId> p1);
	ref<java::time::Instant> toInstant(ref<java::time::ZoneOffset> offset);
	jlong toEpochSecond(ref<java::time::ZoneOffset> offset);
	jint compareTo(ref<java::time::chrono::ChronoLocalDateTime> other);
	jboolean isAfter(ref<java::time::chrono::ChronoLocalDateTime> other);
	jboolean isBefore(ref<java::time::chrono::ChronoLocalDateTime> other);
	jboolean isEqual(ref<java::time::chrono::ChronoLocalDateTime> other);
	jboolean equals(ref<java::lang::Object> p1);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	ChronoLocalDateTime(handle_type h) : base_(h) {}

};

} // namespace java::time::chrono
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/time/LocalTime.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/ZoneOffset.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDate.h>
#include <scapix/java_api/java/time/chrono/ChronoZonedDateTime.h>
#include <scapix/java_api/java/time/chrono/Chronology.h>
#include <scapix/java_api/java/time/format/DateTimeFormatter.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/util/Comparator.h>

namespace scapix::java_api {
namespace java::time::chrono {

inline ref<java::util::Comparator> ChronoLocalDateTime::timeLineOrder() { return call_static_method<SCAPIX_META_STRING("timeLineOrder"), ref<java::util::Comparator>>(); }
inline ref<java::time::chrono::ChronoLocalDateTime> ChronoLocalDateTime::from(ref<java::time::temporal::TemporalAccessor> temporal) { return call_static_method<SCAPIX_META_STRING("from"), ref<java::time::chrono::ChronoLocalDateTime>>(temporal); }
inline ref<java::time::chrono::Chronology> ChronoLocalDateTime::getChronology() { return call_method<SCAPIX_META_STRING("getChronology"), ref<java::time::chrono::Chronology>>(); }
inline ref<java::time::chrono::ChronoLocalDate> ChronoLocalDateTime::toLocalDate() { return call_method<SCAPIX_META_STRING("toLocalDate"), ref<java::time::chrono::ChronoLocalDate>>(); }
inline ref<java::time::LocalTime> ChronoLocalDateTime::toLocalTime() { return call_method<SCAPIX_META_STRING("toLocalTime"), ref<java::time::LocalTime>>(); }
inline jboolean ChronoLocalDateTime::isSupported(ref<java::time::temporal::TemporalField> p1) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(p1); }
inline jboolean ChronoLocalDateTime::isSupported(ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(unit); }
inline ref<java::time::chrono::ChronoLocalDateTime> ChronoLocalDateTime::with(ref<java::time::temporal::TemporalAdjuster> adjuster) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::chrono::ChronoLocalDateTime>>(adjuster); }
inline ref<java::time::chrono::ChronoLocalDateTime> ChronoLocalDateTime::with(ref<java::time::temporal::TemporalField> p1, jlong p2) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::chrono::ChronoLocalDateTime>>(p1, p2); }
inline ref<java::time::chrono::ChronoLocalDateTime> ChronoLocalDateTime::plus(ref<java::time::temporal::TemporalAmount> amount) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::chrono::ChronoLocalDateTime>>(amount); }
inline ref<java::time::chrono::ChronoLocalDateTime> ChronoLocalDateTime::plus(jlong p1, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::chrono::ChronoLocalDateTime>>(p1, p2); }
inline ref<java::time::chrono::ChronoLocalDateTime> ChronoLocalDateTime::minus(ref<java::time::temporal::TemporalAmount> amount) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::chrono::ChronoLocalDateTime>>(amount); }
inline ref<java::time::chrono::ChronoLocalDateTime> ChronoLocalDateTime::minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::chrono::ChronoLocalDateTime>>(amountToSubtract, p2); }
inline ref<java::lang::Object> ChronoLocalDateTime::query(ref<java::time::temporal::TemporalQuery> query) { return call_method<SCAPIX_META_STRING("query"), ref<java::lang::Object>>(query); }
inline ref<java::time::temporal::Temporal> ChronoLocalDateTime::adjustInto(ref<java::time::temporal::Temporal> temporal) { return call_method<SCAPIX_META_STRING("adjustInto"), ref<java::time::temporal::Temporal>>(temporal); }
inline ref<java::lang::String> ChronoLocalDateTime::format(ref<java::time::format::DateTimeFormatter> formatter) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::String>>(formatter); }
inline ref<java::time::chrono::ChronoZonedDateTime> ChronoLocalDateTime::atZone(ref<java::time::ZoneId> p1) { return call_method<SCAPIX_META_STRING("atZone"), ref<java::time::chrono::ChronoZonedDateTime>>(p1); }
inline ref<java::time::Instant> ChronoLocalDateTime::toInstant(ref<java::time::ZoneOffset> offset) { return call_method<SCAPIX_META_STRING("toInstant"), ref<java::time::Instant>>(offset); }
inline jlong ChronoLocalDateTime::toEpochSecond(ref<java::time::ZoneOffset> offset) { return call_method<SCAPIX_META_STRING("toEpochSecond"), jlong>(offset); }
inline jint ChronoLocalDateTime::compareTo(ref<java::time::chrono::ChronoLocalDateTime> other) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(other); }
inline jboolean ChronoLocalDateTime::isAfter(ref<java::time::chrono::ChronoLocalDateTime> other) { return call_method<SCAPIX_META_STRING("isAfter"), jboolean>(other); }
inline jboolean ChronoLocalDateTime::isBefore(ref<java::time::chrono::ChronoLocalDateTime> other) { return call_method<SCAPIX_META_STRING("isBefore"), jboolean>(other); }
inline jboolean ChronoLocalDateTime::isEqual(ref<java::time::chrono::ChronoLocalDateTime> other) { return call_method<SCAPIX_META_STRING("isEqual"), jboolean>(other); }
inline jboolean ChronoLocalDateTime::equals(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(p1); }
inline jint ChronoLocalDateTime::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> ChronoLocalDateTime::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time::chrono
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_CHRONO_CHRONOLOCALDATETIME_H
