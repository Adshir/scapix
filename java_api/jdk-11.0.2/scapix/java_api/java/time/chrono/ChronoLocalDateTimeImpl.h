// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDateTime.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_TIME_CHRONO_CHRONOLOCALDATETIMEIMPL_H
#define SCAPIX_JAVA_TIME_CHRONO_CHRONOLOCALDATETIMEIMPL_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time { class LocalTime; }
namespace java::time { class ZoneId; }
namespace java::time::chrono { class ChronoLocalDate; }
namespace java::time::chrono { class ChronoZonedDateTime; }
namespace java::time::temporal { class TemporalField; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::time::temporal { class ValueRange; }

namespace java::time::chrono {

// private
class ChronoLocalDateTimeImpl : public object_base<SCAPIX_META_STRING("java/time/chrono/ChronoLocalDateTimeImpl"),
	java::lang::Object,
	java::time::chrono::ChronoLocalDateTime,
	java::time::temporal::Temporal,
	java::time::temporal::TemporalAdjuster,
	java::io::Serializable>
{
public:

	ref<java::time::chrono::ChronoLocalDate> toLocalDate();
	ref<java::time::LocalTime> toLocalTime();
	jboolean isSupported(ref<java::time::temporal::TemporalField> field);
	ref<java::time::temporal::ValueRange> range(ref<java::time::temporal::TemporalField> field);
	jint get(ref<java::time::temporal::TemporalField> field);
	jlong getLong(ref<java::time::temporal::TemporalField> field);
	ref<java::time::chrono::ChronoLocalDateTimeImpl> with(ref<java::time::temporal::TemporalAdjuster> adjuster);
	ref<java::time::chrono::ChronoLocalDateTimeImpl> with(ref<java::time::temporal::TemporalField> field, jlong newValue);
	ref<java::time::chrono::ChronoLocalDateTimeImpl> plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::chrono::ChronoZonedDateTime> atZone(ref<java::time::ZoneId> zone);
	jlong until(ref<java::time::temporal::Temporal> endExclusive, ref<java::time::temporal::TemporalUnit> unit);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	ChronoLocalDateTimeImpl(handle_type h) : base_(h) {}

};

} // namespace java::time::chrono
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/LocalTime.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDate.h>
#include <scapix/java_api/java/time/chrono/ChronoZonedDateTime.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>

namespace scapix::java_api {
namespace java::time::chrono {

inline ref<java::time::chrono::ChronoLocalDate> ChronoLocalDateTimeImpl::toLocalDate() { return call_method<SCAPIX_META_STRING("toLocalDate"), ref<java::time::chrono::ChronoLocalDate>>(); }
inline ref<java::time::LocalTime> ChronoLocalDateTimeImpl::toLocalTime() { return call_method<SCAPIX_META_STRING("toLocalTime"), ref<java::time::LocalTime>>(); }
inline jboolean ChronoLocalDateTimeImpl::isSupported(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(field); }
inline ref<java::time::temporal::ValueRange> ChronoLocalDateTimeImpl::range(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("range"), ref<java::time::temporal::ValueRange>>(field); }
inline jint ChronoLocalDateTimeImpl::get(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("get"), jint>(field); }
inline jlong ChronoLocalDateTimeImpl::getLong(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(field); }
inline ref<java::time::chrono::ChronoLocalDateTimeImpl> ChronoLocalDateTimeImpl::with(ref<java::time::temporal::TemporalAdjuster> adjuster) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::chrono::ChronoLocalDateTimeImpl>>(adjuster); }
inline ref<java::time::chrono::ChronoLocalDateTimeImpl> ChronoLocalDateTimeImpl::with(ref<java::time::temporal::TemporalField> field, jlong newValue) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::chrono::ChronoLocalDateTimeImpl>>(field, newValue); }
inline ref<java::time::chrono::ChronoLocalDateTimeImpl> ChronoLocalDateTimeImpl::plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::chrono::ChronoLocalDateTimeImpl>>(amountToAdd, p2); }
inline ref<java::time::chrono::ChronoZonedDateTime> ChronoLocalDateTimeImpl::atZone(ref<java::time::ZoneId> zone) { return call_method<SCAPIX_META_STRING("atZone"), ref<java::time::chrono::ChronoZonedDateTime>>(zone); }
inline jlong ChronoLocalDateTimeImpl::until(ref<java::time::temporal::Temporal> endExclusive, ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("until"), jlong>(endExclusive, unit); }
inline jboolean ChronoLocalDateTimeImpl::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint ChronoLocalDateTimeImpl::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> ChronoLocalDateTimeImpl::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time::chrono
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_CHRONO_CHRONOLOCALDATETIMEIMPL_H
