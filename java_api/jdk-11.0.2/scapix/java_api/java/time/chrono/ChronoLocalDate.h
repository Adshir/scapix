// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_TIME_CHRONO_CHRONOLOCALDATE_H
#define SCAPIX_JAVA_TIME_CHRONO_CHRONOLOCALDATE_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time { class LocalTime; }
namespace java::time::chrono { class ChronoLocalDateTime; }
namespace java::time::chrono { class ChronoPeriod; }
namespace java::time::chrono { class Chronology; }
namespace java::time::chrono { class Era; }
namespace java::time::format { class DateTimeFormatter; }
namespace java::time::temporal { class TemporalAccessor; }
namespace java::time::temporal { class TemporalAmount; }
namespace java::time::temporal { class TemporalField; }
namespace java::time::temporal { class TemporalQuery; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::util { class Comparator; }

namespace java::time::chrono {

class ChronoLocalDate : public object_base<SCAPIX_META_STRING("java/time/chrono/ChronoLocalDate"),
	java::lang::Object,
	java::time::temporal::Temporal,
	java::time::temporal::TemporalAdjuster,
	java::lang::Comparable>
{
public:

	static ref<java::util::Comparator> timeLineOrder();
	static ref<java::time::chrono::ChronoLocalDate> from(ref<java::time::temporal::TemporalAccessor> temporal);
	ref<java::time::chrono::Chronology> getChronology();
	ref<java::time::chrono::Era> getEra();
	jboolean isLeapYear();
	jint lengthOfMonth();
	jint lengthOfYear();
	jboolean isSupported(ref<java::time::temporal::TemporalField> field);
	jboolean isSupported(ref<java::time::temporal::TemporalUnit> unit);
	ref<java::time::chrono::ChronoLocalDate> with(ref<java::time::temporal::TemporalAdjuster> adjuster);
	ref<java::time::chrono::ChronoLocalDate> with(ref<java::time::temporal::TemporalField> field, jlong newValue);
	ref<java::time::chrono::ChronoLocalDate> plus(ref<java::time::temporal::TemporalAmount> amount);
	ref<java::time::chrono::ChronoLocalDate> plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::chrono::ChronoLocalDate> minus(ref<java::time::temporal::TemporalAmount> amount);
	ref<java::time::chrono::ChronoLocalDate> minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::lang::Object> query(ref<java::time::temporal::TemporalQuery> query);
	ref<java::time::temporal::Temporal> adjustInto(ref<java::time::temporal::Temporal> temporal);
	jlong until(ref<java::time::temporal::Temporal> p1, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::chrono::ChronoPeriod> until(ref<java::time::chrono::ChronoLocalDate> p1);
	ref<java::lang::String> format(ref<java::time::format::DateTimeFormatter> formatter);
	ref<java::time::chrono::ChronoLocalDateTime> atTime(ref<java::time::LocalTime> localTime);
	jlong toEpochDay();
	jint compareTo(ref<java::time::chrono::ChronoLocalDate> other);
	jboolean isAfter(ref<java::time::chrono::ChronoLocalDate> other);
	jboolean isBefore(ref<java::time::chrono::ChronoLocalDate> other);
	jboolean isEqual(ref<java::time::chrono::ChronoLocalDate> other);
	jboolean equals(ref<java::lang::Object> p1);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	ChronoLocalDate(handle_type h) : base_(h) {}

};

} // namespace java::time::chrono
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/LocalTime.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDateTime.h>
#include <scapix/java_api/java/time/chrono/ChronoPeriod.h>
#include <scapix/java_api/java/time/chrono/Chronology.h>
#include <scapix/java_api/java/time/chrono/Era.h>
#include <scapix/java_api/java/time/format/DateTimeFormatter.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/util/Comparator.h>

namespace scapix::java_api {
namespace java::time::chrono {

inline ref<java::util::Comparator> ChronoLocalDate::timeLineOrder() { return call_static_method<SCAPIX_META_STRING("timeLineOrder"), ref<java::util::Comparator>>(); }
inline ref<java::time::chrono::ChronoLocalDate> ChronoLocalDate::from(ref<java::time::temporal::TemporalAccessor> temporal) { return call_static_method<SCAPIX_META_STRING("from"), ref<java::time::chrono::ChronoLocalDate>>(temporal); }
inline ref<java::time::chrono::Chronology> ChronoLocalDate::getChronology() { return call_method<SCAPIX_META_STRING("getChronology"), ref<java::time::chrono::Chronology>>(); }
inline ref<java::time::chrono::Era> ChronoLocalDate::getEra() { return call_method<SCAPIX_META_STRING("getEra"), ref<java::time::chrono::Era>>(); }
inline jboolean ChronoLocalDate::isLeapYear() { return call_method<SCAPIX_META_STRING("isLeapYear"), jboolean>(); }
inline jint ChronoLocalDate::lengthOfMonth() { return call_method<SCAPIX_META_STRING("lengthOfMonth"), jint>(); }
inline jint ChronoLocalDate::lengthOfYear() { return call_method<SCAPIX_META_STRING("lengthOfYear"), jint>(); }
inline jboolean ChronoLocalDate::isSupported(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(field); }
inline jboolean ChronoLocalDate::isSupported(ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(unit); }
inline ref<java::time::chrono::ChronoLocalDate> ChronoLocalDate::with(ref<java::time::temporal::TemporalAdjuster> adjuster) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::chrono::ChronoLocalDate>>(adjuster); }
inline ref<java::time::chrono::ChronoLocalDate> ChronoLocalDate::with(ref<java::time::temporal::TemporalField> field, jlong newValue) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::chrono::ChronoLocalDate>>(field, newValue); }
inline ref<java::time::chrono::ChronoLocalDate> ChronoLocalDate::plus(ref<java::time::temporal::TemporalAmount> amount) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::chrono::ChronoLocalDate>>(amount); }
inline ref<java::time::chrono::ChronoLocalDate> ChronoLocalDate::plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::chrono::ChronoLocalDate>>(amountToAdd, p2); }
inline ref<java::time::chrono::ChronoLocalDate> ChronoLocalDate::minus(ref<java::time::temporal::TemporalAmount> amount) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::chrono::ChronoLocalDate>>(amount); }
inline ref<java::time::chrono::ChronoLocalDate> ChronoLocalDate::minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::chrono::ChronoLocalDate>>(amountToSubtract, p2); }
inline ref<java::lang::Object> ChronoLocalDate::query(ref<java::time::temporal::TemporalQuery> query) { return call_method<SCAPIX_META_STRING("query"), ref<java::lang::Object>>(query); }
inline ref<java::time::temporal::Temporal> ChronoLocalDate::adjustInto(ref<java::time::temporal::Temporal> temporal) { return call_method<SCAPIX_META_STRING("adjustInto"), ref<java::time::temporal::Temporal>>(temporal); }
inline jlong ChronoLocalDate::until(ref<java::time::temporal::Temporal> p1, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("until"), jlong>(p1, p2); }
inline ref<java::time::chrono::ChronoPeriod> ChronoLocalDate::until(ref<java::time::chrono::ChronoLocalDate> p1) { return call_method<SCAPIX_META_STRING("until"), ref<java::time::chrono::ChronoPeriod>>(p1); }
inline ref<java::lang::String> ChronoLocalDate::format(ref<java::time::format::DateTimeFormatter> formatter) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::String>>(formatter); }
inline ref<java::time::chrono::ChronoLocalDateTime> ChronoLocalDate::atTime(ref<java::time::LocalTime> localTime) { return call_method<SCAPIX_META_STRING("atTime"), ref<java::time::chrono::ChronoLocalDateTime>>(localTime); }
inline jlong ChronoLocalDate::toEpochDay() { return call_method<SCAPIX_META_STRING("toEpochDay"), jlong>(); }
inline jint ChronoLocalDate::compareTo(ref<java::time::chrono::ChronoLocalDate> other) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(other); }
inline jboolean ChronoLocalDate::isAfter(ref<java::time::chrono::ChronoLocalDate> other) { return call_method<SCAPIX_META_STRING("isAfter"), jboolean>(other); }
inline jboolean ChronoLocalDate::isBefore(ref<java::time::chrono::ChronoLocalDate> other) { return call_method<SCAPIX_META_STRING("isBefore"), jboolean>(other); }
inline jboolean ChronoLocalDate::isEqual(ref<java::time::chrono::ChronoLocalDate> other) { return call_method<SCAPIX_META_STRING("isEqual"), jboolean>(other); }
inline jboolean ChronoLocalDate::equals(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(p1); }
inline jint ChronoLocalDate::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> ChronoLocalDate::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time::chrono
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_CHRONO_CHRONOLOCALDATE_H
