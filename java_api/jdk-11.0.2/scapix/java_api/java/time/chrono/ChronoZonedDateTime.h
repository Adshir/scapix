// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_TIME_CHRONO_CHRONOZONEDDATETIME_H
#define SCAPIX_JAVA_TIME_CHRONO_CHRONOZONEDDATETIME_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time { class Instant; }
namespace java::time { class LocalTime; }
namespace java::time { class ZoneId; }
namespace java::time { class ZoneOffset; }
namespace java::time::chrono { class ChronoLocalDate; }
namespace java::time::chrono { class ChronoLocalDateTime; }
namespace java::time::chrono { class Chronology; }
namespace java::time::format { class DateTimeFormatter; }
namespace java::time::temporal { class TemporalAccessor; }
namespace java::time::temporal { class TemporalAdjuster; }
namespace java::time::temporal { class TemporalAmount; }
namespace java::time::temporal { class TemporalField; }
namespace java::time::temporal { class TemporalQuery; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::time::temporal { class ValueRange; }
namespace java::util { class Comparator; }

namespace java::time::chrono {

class ChronoZonedDateTime : public object_base<SCAPIX_META_STRING("java/time/chrono/ChronoZonedDateTime"),
	java::lang::Object,
	java::time::temporal::Temporal,
	java::lang::Comparable>
{
public:

	static ref<java::util::Comparator> timeLineOrder();
	static ref<java::time::chrono::ChronoZonedDateTime> from(ref<java::time::temporal::TemporalAccessor> temporal);
	ref<java::time::temporal::ValueRange> range(ref<java::time::temporal::TemporalField> field);
	jint get(ref<java::time::temporal::TemporalField> field);
	jlong getLong(ref<java::time::temporal::TemporalField> field);
	ref<java::time::chrono::ChronoLocalDate> toLocalDate();
	ref<java::time::LocalTime> toLocalTime();
	ref<java::time::chrono::ChronoLocalDateTime> toLocalDateTime();
	ref<java::time::chrono::Chronology> getChronology();
	ref<java::time::ZoneOffset> getOffset();
	ref<java::time::ZoneId> getZone();
	ref<java::time::chrono::ChronoZonedDateTime> withEarlierOffsetAtOverlap();
	ref<java::time::chrono::ChronoZonedDateTime> withLaterOffsetAtOverlap();
	ref<java::time::chrono::ChronoZonedDateTime> withZoneSameLocal(ref<java::time::ZoneId> p1);
	ref<java::time::chrono::ChronoZonedDateTime> withZoneSameInstant(ref<java::time::ZoneId> p1);
	jboolean isSupported(ref<java::time::temporal::TemporalField> p1);
	jboolean isSupported(ref<java::time::temporal::TemporalUnit> unit);
	ref<java::time::chrono::ChronoZonedDateTime> with(ref<java::time::temporal::TemporalAdjuster> adjuster);
	ref<java::time::chrono::ChronoZonedDateTime> with(ref<java::time::temporal::TemporalField> p1, jlong p2);
	ref<java::time::chrono::ChronoZonedDateTime> plus(ref<java::time::temporal::TemporalAmount> amount);
	ref<java::time::chrono::ChronoZonedDateTime> plus(jlong p1, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::chrono::ChronoZonedDateTime> minus(ref<java::time::temporal::TemporalAmount> amount);
	ref<java::time::chrono::ChronoZonedDateTime> minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::lang::Object> query(ref<java::time::temporal::TemporalQuery> query);
	ref<java::lang::String> format(ref<java::time::format::DateTimeFormatter> formatter);
	ref<java::time::Instant> toInstant();
	jlong toEpochSecond();
	jint compareTo(ref<java::time::chrono::ChronoZonedDateTime> other);
	jboolean isBefore(ref<java::time::chrono::ChronoZonedDateTime> other);
	jboolean isAfter(ref<java::time::chrono::ChronoZonedDateTime> other);
	jboolean isEqual(ref<java::time::chrono::ChronoZonedDateTime> other);
	jboolean equals(ref<java::lang::Object> p1);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	ChronoZonedDateTime(handle_type h) : base_(h) {}

};

} // namespace java::time::chrono
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/time/LocalTime.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/ZoneOffset.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDate.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDateTime.h>
#include <scapix/java_api/java/time/chrono/Chronology.h>
#include <scapix/java_api/java/time/format/DateTimeFormatter.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>
#include <scapix/java_api/java/util/Comparator.h>

namespace scapix::java_api {
namespace java::time::chrono {

inline ref<java::util::Comparator> ChronoZonedDateTime::timeLineOrder() { return call_static_method<SCAPIX_META_STRING("timeLineOrder"), ref<java::util::Comparator>>(); }
inline ref<java::time::chrono::ChronoZonedDateTime> ChronoZonedDateTime::from(ref<java::time::temporal::TemporalAccessor> temporal) { return call_static_method<SCAPIX_META_STRING("from"), ref<java::time::chrono::ChronoZonedDateTime>>(temporal); }
inline ref<java::time::temporal::ValueRange> ChronoZonedDateTime::range(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("range"), ref<java::time::temporal::ValueRange>>(field); }
inline jint ChronoZonedDateTime::get(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("get"), jint>(field); }
inline jlong ChronoZonedDateTime::getLong(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(field); }
inline ref<java::time::chrono::ChronoLocalDate> ChronoZonedDateTime::toLocalDate() { return call_method<SCAPIX_META_STRING("toLocalDate"), ref<java::time::chrono::ChronoLocalDate>>(); }
inline ref<java::time::LocalTime> ChronoZonedDateTime::toLocalTime() { return call_method<SCAPIX_META_STRING("toLocalTime"), ref<java::time::LocalTime>>(); }
inline ref<java::time::chrono::ChronoLocalDateTime> ChronoZonedDateTime::toLocalDateTime() { return call_method<SCAPIX_META_STRING("toLocalDateTime"), ref<java::time::chrono::ChronoLocalDateTime>>(); }
inline ref<java::time::chrono::Chronology> ChronoZonedDateTime::getChronology() { return call_method<SCAPIX_META_STRING("getChronology"), ref<java::time::chrono::Chronology>>(); }
inline ref<java::time::ZoneOffset> ChronoZonedDateTime::getOffset() { return call_method<SCAPIX_META_STRING("getOffset"), ref<java::time::ZoneOffset>>(); }
inline ref<java::time::ZoneId> ChronoZonedDateTime::getZone() { return call_method<SCAPIX_META_STRING("getZone"), ref<java::time::ZoneId>>(); }
inline ref<java::time::chrono::ChronoZonedDateTime> ChronoZonedDateTime::withEarlierOffsetAtOverlap() { return call_method<SCAPIX_META_STRING("withEarlierOffsetAtOverlap"), ref<java::time::chrono::ChronoZonedDateTime>>(); }
inline ref<java::time::chrono::ChronoZonedDateTime> ChronoZonedDateTime::withLaterOffsetAtOverlap() { return call_method<SCAPIX_META_STRING("withLaterOffsetAtOverlap"), ref<java::time::chrono::ChronoZonedDateTime>>(); }
inline ref<java::time::chrono::ChronoZonedDateTime> ChronoZonedDateTime::withZoneSameLocal(ref<java::time::ZoneId> p1) { return call_method<SCAPIX_META_STRING("withZoneSameLocal"), ref<java::time::chrono::ChronoZonedDateTime>>(p1); }
inline ref<java::time::chrono::ChronoZonedDateTime> ChronoZonedDateTime::withZoneSameInstant(ref<java::time::ZoneId> p1) { return call_method<SCAPIX_META_STRING("withZoneSameInstant"), ref<java::time::chrono::ChronoZonedDateTime>>(p1); }
inline jboolean ChronoZonedDateTime::isSupported(ref<java::time::temporal::TemporalField> p1) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(p1); }
inline jboolean ChronoZonedDateTime::isSupported(ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(unit); }
inline ref<java::time::chrono::ChronoZonedDateTime> ChronoZonedDateTime::with(ref<java::time::temporal::TemporalAdjuster> adjuster) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::chrono::ChronoZonedDateTime>>(adjuster); }
inline ref<java::time::chrono::ChronoZonedDateTime> ChronoZonedDateTime::with(ref<java::time::temporal::TemporalField> p1, jlong p2) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::chrono::ChronoZonedDateTime>>(p1, p2); }
inline ref<java::time::chrono::ChronoZonedDateTime> ChronoZonedDateTime::plus(ref<java::time::temporal::TemporalAmount> amount) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::chrono::ChronoZonedDateTime>>(amount); }
inline ref<java::time::chrono::ChronoZonedDateTime> ChronoZonedDateTime::plus(jlong p1, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::chrono::ChronoZonedDateTime>>(p1, p2); }
inline ref<java::time::chrono::ChronoZonedDateTime> ChronoZonedDateTime::minus(ref<java::time::temporal::TemporalAmount> amount) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::chrono::ChronoZonedDateTime>>(amount); }
inline ref<java::time::chrono::ChronoZonedDateTime> ChronoZonedDateTime::minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::chrono::ChronoZonedDateTime>>(amountToSubtract, p2); }
inline ref<java::lang::Object> ChronoZonedDateTime::query(ref<java::time::temporal::TemporalQuery> query) { return call_method<SCAPIX_META_STRING("query"), ref<java::lang::Object>>(query); }
inline ref<java::lang::String> ChronoZonedDateTime::format(ref<java::time::format::DateTimeFormatter> formatter) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::String>>(formatter); }
inline ref<java::time::Instant> ChronoZonedDateTime::toInstant() { return call_method<SCAPIX_META_STRING("toInstant"), ref<java::time::Instant>>(); }
inline jlong ChronoZonedDateTime::toEpochSecond() { return call_method<SCAPIX_META_STRING("toEpochSecond"), jlong>(); }
inline jint ChronoZonedDateTime::compareTo(ref<java::time::chrono::ChronoZonedDateTime> other) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(other); }
inline jboolean ChronoZonedDateTime::isBefore(ref<java::time::chrono::ChronoZonedDateTime> other) { return call_method<SCAPIX_META_STRING("isBefore"), jboolean>(other); }
inline jboolean ChronoZonedDateTime::isAfter(ref<java::time::chrono::ChronoZonedDateTime> other) { return call_method<SCAPIX_META_STRING("isAfter"), jboolean>(other); }
inline jboolean ChronoZonedDateTime::isEqual(ref<java::time::chrono::ChronoZonedDateTime> other) { return call_method<SCAPIX_META_STRING("isEqual"), jboolean>(other); }
inline jboolean ChronoZonedDateTime::equals(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(p1); }
inline jint ChronoZonedDateTime::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> ChronoZonedDateTime::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time::chrono
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_CHRONO_CHRONOZONEDDATETIME_H
