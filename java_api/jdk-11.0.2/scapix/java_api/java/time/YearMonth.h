// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_TIME_YEARMONTH_H
#define SCAPIX_JAVA_TIME_YEARMONTH_H

namespace scapix::java_api {

namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::time { class Clock; }
namespace java::time { class LocalDate; }
namespace java::time { class Month; }
namespace java::time { class ZoneId; }
namespace java::time::format { class DateTimeFormatter; }
namespace java::time::temporal { class TemporalAccessor; }
namespace java::time::temporal { class TemporalAmount; }
namespace java::time::temporal { class TemporalField; }
namespace java::time::temporal { class TemporalQuery; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::time::temporal { class ValueRange; }

namespace java::time {

class YearMonth : public object_base<SCAPIX_META_STRING("java/time/YearMonth"),
	java::lang::Object,
	java::time::temporal::Temporal,
	java::time::temporal::TemporalAdjuster,
	java::lang::Comparable,
	java::io::Serializable>
{
public:

	static ref<java::time::YearMonth> now();
	static ref<java::time::YearMonth> now(ref<java::time::ZoneId> zone);
	static ref<java::time::YearMonth> now(ref<java::time::Clock> clock);
	static ref<java::time::YearMonth> of(jint year, ref<java::time::Month> month);
	static ref<java::time::YearMonth> of(jint year, jint month);
	static ref<java::time::YearMonth> from(ref<java::time::temporal::TemporalAccessor> temporal);
	static ref<java::time::YearMonth> parse(ref<java::lang::CharSequence> text);
	static ref<java::time::YearMonth> parse(ref<java::lang::CharSequence> text, ref<java::time::format::DateTimeFormatter> formatter);
	jboolean isSupported(ref<java::time::temporal::TemporalField> field);
	jboolean isSupported(ref<java::time::temporal::TemporalUnit> unit);
	ref<java::time::temporal::ValueRange> range(ref<java::time::temporal::TemporalField> field);
	jint get(ref<java::time::temporal::TemporalField> field);
	jlong getLong(ref<java::time::temporal::TemporalField> field);
	jint getYear();
	jint getMonthValue();
	ref<java::time::Month> getMonth();
	jboolean isLeapYear();
	jboolean isValidDay(jint dayOfMonth);
	jint lengthOfMonth();
	jint lengthOfYear();
	ref<java::time::YearMonth> with(ref<java::time::temporal::TemporalAdjuster> adjuster);
	ref<java::time::YearMonth> with(ref<java::time::temporal::TemporalField> field, jlong newValue);
	ref<java::time::YearMonth> withYear(jint year);
	ref<java::time::YearMonth> withMonth(jint month);
	ref<java::time::YearMonth> plus(ref<java::time::temporal::TemporalAmount> amountToAdd);
	ref<java::time::YearMonth> plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::YearMonth> plusYears(jlong yearsToAdd);
	ref<java::time::YearMonth> plusMonths(jlong monthsToAdd);
	ref<java::time::YearMonth> minus(ref<java::time::temporal::TemporalAmount> amountToSubtract);
	ref<java::time::YearMonth> minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::YearMonth> minusYears(jlong yearsToSubtract);
	ref<java::time::YearMonth> minusMonths(jlong monthsToSubtract);
	ref<java::lang::Object> query(ref<java::time::temporal::TemporalQuery> query);
	ref<java::time::temporal::Temporal> adjustInto(ref<java::time::temporal::Temporal> temporal);
	jlong until(ref<java::time::temporal::Temporal> endExclusive, ref<java::time::temporal::TemporalUnit> unit);
	ref<java::lang::String> format(ref<java::time::format::DateTimeFormatter> formatter);
	ref<java::time::LocalDate> atDay(jint dayOfMonth);
	ref<java::time::LocalDate> atEndOfMonth();
	jint compareTo(ref<java::time::YearMonth> other);
	jboolean isAfter(ref<java::time::YearMonth> other);
	jboolean isBefore(ref<java::time::YearMonth> other);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	YearMonth(handle_type h) : base_(h) {}

};

} // namespace java::time
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Clock.h>
#include <scapix/java_api/java/time/LocalDate.h>
#include <scapix/java_api/java/time/Month.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/format/DateTimeFormatter.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>

namespace scapix::java_api {
namespace java::time {

inline ref<java::time::YearMonth> YearMonth::now() { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::YearMonth>>(); }
inline ref<java::time::YearMonth> YearMonth::now(ref<java::time::ZoneId> zone) { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::YearMonth>>(zone); }
inline ref<java::time::YearMonth> YearMonth::now(ref<java::time::Clock> clock) { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::YearMonth>>(clock); }
inline ref<java::time::YearMonth> YearMonth::of(jint year, ref<java::time::Month> month) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::YearMonth>>(year, month); }
inline ref<java::time::YearMonth> YearMonth::of(jint year, jint month) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::YearMonth>>(year, month); }
inline ref<java::time::YearMonth> YearMonth::from(ref<java::time::temporal::TemporalAccessor> temporal) { return call_static_method<SCAPIX_META_STRING("from"), ref<java::time::YearMonth>>(temporal); }
inline ref<java::time::YearMonth> YearMonth::parse(ref<java::lang::CharSequence> text) { return call_static_method<SCAPIX_META_STRING("parse"), ref<java::time::YearMonth>>(text); }
inline ref<java::time::YearMonth> YearMonth::parse(ref<java::lang::CharSequence> text, ref<java::time::format::DateTimeFormatter> formatter) { return call_static_method<SCAPIX_META_STRING("parse"), ref<java::time::YearMonth>>(text, formatter); }
inline jboolean YearMonth::isSupported(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(field); }
inline jboolean YearMonth::isSupported(ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(unit); }
inline ref<java::time::temporal::ValueRange> YearMonth::range(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("range"), ref<java::time::temporal::ValueRange>>(field); }
inline jint YearMonth::get(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("get"), jint>(field); }
inline jlong YearMonth::getLong(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(field); }
inline jint YearMonth::getYear() { return call_method<SCAPIX_META_STRING("getYear"), jint>(); }
inline jint YearMonth::getMonthValue() { return call_method<SCAPIX_META_STRING("getMonthValue"), jint>(); }
inline ref<java::time::Month> YearMonth::getMonth() { return call_method<SCAPIX_META_STRING("getMonth"), ref<java::time::Month>>(); }
inline jboolean YearMonth::isLeapYear() { return call_method<SCAPIX_META_STRING("isLeapYear"), jboolean>(); }
inline jboolean YearMonth::isValidDay(jint dayOfMonth) { return call_method<SCAPIX_META_STRING("isValidDay"), jboolean>(dayOfMonth); }
inline jint YearMonth::lengthOfMonth() { return call_method<SCAPIX_META_STRING("lengthOfMonth"), jint>(); }
inline jint YearMonth::lengthOfYear() { return call_method<SCAPIX_META_STRING("lengthOfYear"), jint>(); }
inline ref<java::time::YearMonth> YearMonth::with(ref<java::time::temporal::TemporalAdjuster> adjuster) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::YearMonth>>(adjuster); }
inline ref<java::time::YearMonth> YearMonth::with(ref<java::time::temporal::TemporalField> field, jlong newValue) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::YearMonth>>(field, newValue); }
inline ref<java::time::YearMonth> YearMonth::withYear(jint year) { return call_method<SCAPIX_META_STRING("withYear"), ref<java::time::YearMonth>>(year); }
inline ref<java::time::YearMonth> YearMonth::withMonth(jint month) { return call_method<SCAPIX_META_STRING("withMonth"), ref<java::time::YearMonth>>(month); }
inline ref<java::time::YearMonth> YearMonth::plus(ref<java::time::temporal::TemporalAmount> amountToAdd) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::YearMonth>>(amountToAdd); }
inline ref<java::time::YearMonth> YearMonth::plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::YearMonth>>(amountToAdd, p2); }
inline ref<java::time::YearMonth> YearMonth::plusYears(jlong yearsToAdd) { return call_method<SCAPIX_META_STRING("plusYears"), ref<java::time::YearMonth>>(yearsToAdd); }
inline ref<java::time::YearMonth> YearMonth::plusMonths(jlong monthsToAdd) { return call_method<SCAPIX_META_STRING("plusMonths"), ref<java::time::YearMonth>>(monthsToAdd); }
inline ref<java::time::YearMonth> YearMonth::minus(ref<java::time::temporal::TemporalAmount> amountToSubtract) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::YearMonth>>(amountToSubtract); }
inline ref<java::time::YearMonth> YearMonth::minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::YearMonth>>(amountToSubtract, p2); }
inline ref<java::time::YearMonth> YearMonth::minusYears(jlong yearsToSubtract) { return call_method<SCAPIX_META_STRING("minusYears"), ref<java::time::YearMonth>>(yearsToSubtract); }
inline ref<java::time::YearMonth> YearMonth::minusMonths(jlong monthsToSubtract) { return call_method<SCAPIX_META_STRING("minusMonths"), ref<java::time::YearMonth>>(monthsToSubtract); }
inline ref<java::lang::Object> YearMonth::query(ref<java::time::temporal::TemporalQuery> query) { return call_method<SCAPIX_META_STRING("query"), ref<java::lang::Object>>(query); }
inline ref<java::time::temporal::Temporal> YearMonth::adjustInto(ref<java::time::temporal::Temporal> temporal) { return call_method<SCAPIX_META_STRING("adjustInto"), ref<java::time::temporal::Temporal>>(temporal); }
inline jlong YearMonth::until(ref<java::time::temporal::Temporal> endExclusive, ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("until"), jlong>(endExclusive, unit); }
inline ref<java::lang::String> YearMonth::format(ref<java::time::format::DateTimeFormatter> formatter) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::String>>(formatter); }
inline ref<java::time::LocalDate> YearMonth::atDay(jint dayOfMonth) { return call_method<SCAPIX_META_STRING("atDay"), ref<java::time::LocalDate>>(dayOfMonth); }
inline ref<java::time::LocalDate> YearMonth::atEndOfMonth() { return call_method<SCAPIX_META_STRING("atEndOfMonth"), ref<java::time::LocalDate>>(); }
inline jint YearMonth::compareTo(ref<java::time::YearMonth> other) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(other); }
inline jboolean YearMonth::isAfter(ref<java::time::YearMonth> other) { return call_method<SCAPIX_META_STRING("isAfter"), jboolean>(other); }
inline jboolean YearMonth::isBefore(ref<java::time::YearMonth> other) { return call_method<SCAPIX_META_STRING("isBefore"), jboolean>(other); }
inline jboolean YearMonth::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint YearMonth::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> YearMonth::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_YEARMONTH_H
