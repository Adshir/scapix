// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_TIME_OFFSETDATETIME_H
#define SCAPIX_JAVA_TIME_OFFSETDATETIME_H

namespace scapix::java_api {

namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::time { class Clock; }
namespace java::time { class DayOfWeek; }
namespace java::time { class Instant; }
namespace java::time { class LocalDate; }
namespace java::time { class LocalDateTime; }
namespace java::time { class LocalTime; }
namespace java::time { class Month; }
namespace java::time { class OffsetTime; }
namespace java::time { class ZoneId; }
namespace java::time { class ZoneOffset; }
namespace java::time { class ZonedDateTime; }
namespace java::time::format { class DateTimeFormatter; }
namespace java::time::temporal { class TemporalAccessor; }
namespace java::time::temporal { class TemporalAmount; }
namespace java::time::temporal { class TemporalField; }
namespace java::time::temporal { class TemporalQuery; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::time::temporal { class ValueRange; }
namespace java::util { class Comparator; }

namespace java::time {

class OffsetDateTime : public object_base<SCAPIX_META_STRING("java/time/OffsetDateTime"),
	java::lang::Object,
	java::time::temporal::Temporal,
	java::time::temporal::TemporalAdjuster,
	java::lang::Comparable,
	java::io::Serializable>
{
public:

	static ref<java::time::OffsetDateTime> MIN_();
	static ref<java::time::OffsetDateTime> MAX_();

	static ref<java::util::Comparator> timeLineOrder();
	static ref<java::time::OffsetDateTime> now();
	static ref<java::time::OffsetDateTime> now(ref<java::time::ZoneId> zone);
	static ref<java::time::OffsetDateTime> now(ref<java::time::Clock> clock);
	static ref<java::time::OffsetDateTime> of(ref<java::time::LocalDate> date, ref<java::time::LocalTime> time, ref<java::time::ZoneOffset> offset);
	static ref<java::time::OffsetDateTime> of(ref<java::time::LocalDateTime> dateTime, ref<java::time::ZoneOffset> offset);
	static ref<java::time::OffsetDateTime> of(jint year, jint month, jint dayOfMonth, jint hour, jint minute, jint second, jint nanoOfSecond, ref<java::time::ZoneOffset> offset);
	static ref<java::time::OffsetDateTime> ofInstant(ref<java::time::Instant> instant, ref<java::time::ZoneId> zone);
	static ref<java::time::OffsetDateTime> from(ref<java::time::temporal::TemporalAccessor> temporal);
	static ref<java::time::OffsetDateTime> parse(ref<java::lang::CharSequence> text);
	static ref<java::time::OffsetDateTime> parse(ref<java::lang::CharSequence> text, ref<java::time::format::DateTimeFormatter> formatter);
	jboolean isSupported(ref<java::time::temporal::TemporalField> field);
	jboolean isSupported(ref<java::time::temporal::TemporalUnit> unit);
	ref<java::time::temporal::ValueRange> range(ref<java::time::temporal::TemporalField> field);
	jint get(ref<java::time::temporal::TemporalField> field);
	jlong getLong(ref<java::time::temporal::TemporalField> field);
	ref<java::time::ZoneOffset> getOffset();
	ref<java::time::OffsetDateTime> withOffsetSameLocal(ref<java::time::ZoneOffset> offset);
	ref<java::time::OffsetDateTime> withOffsetSameInstant(ref<java::time::ZoneOffset> offset);
	ref<java::time::LocalDateTime> toLocalDateTime();
	ref<java::time::LocalDate> toLocalDate();
	jint getYear();
	jint getMonthValue();
	ref<java::time::Month> getMonth();
	jint getDayOfMonth();
	jint getDayOfYear();
	ref<java::time::DayOfWeek> getDayOfWeek();
	ref<java::time::LocalTime> toLocalTime();
	jint getHour();
	jint getMinute();
	jint getSecond();
	jint getNano();
	ref<java::time::OffsetDateTime> with(ref<java::time::temporal::TemporalAdjuster> adjuster);
	ref<java::time::OffsetDateTime> with(ref<java::time::temporal::TemporalField> field, jlong newValue);
	ref<java::time::OffsetDateTime> withYear(jint year);
	ref<java::time::OffsetDateTime> withMonth(jint month);
	ref<java::time::OffsetDateTime> withDayOfMonth(jint dayOfMonth);
	ref<java::time::OffsetDateTime> withDayOfYear(jint dayOfYear);
	ref<java::time::OffsetDateTime> withHour(jint hour);
	ref<java::time::OffsetDateTime> withMinute(jint minute);
	ref<java::time::OffsetDateTime> withSecond(jint second);
	ref<java::time::OffsetDateTime> withNano(jint nanoOfSecond);
	ref<java::time::OffsetDateTime> truncatedTo(ref<java::time::temporal::TemporalUnit> unit);
	ref<java::time::OffsetDateTime> plus(ref<java::time::temporal::TemporalAmount> amountToAdd);
	ref<java::time::OffsetDateTime> plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::OffsetDateTime> plusYears(jlong years);
	ref<java::time::OffsetDateTime> plusMonths(jlong months);
	ref<java::time::OffsetDateTime> plusWeeks(jlong weeks);
	ref<java::time::OffsetDateTime> plusDays(jlong days);
	ref<java::time::OffsetDateTime> plusHours(jlong hours);
	ref<java::time::OffsetDateTime> plusMinutes(jlong minutes);
	ref<java::time::OffsetDateTime> plusSeconds(jlong seconds);
	ref<java::time::OffsetDateTime> plusNanos(jlong nanos);
	ref<java::time::OffsetDateTime> minus(ref<java::time::temporal::TemporalAmount> amountToSubtract);
	ref<java::time::OffsetDateTime> minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::OffsetDateTime> minusYears(jlong years);
	ref<java::time::OffsetDateTime> minusMonths(jlong months);
	ref<java::time::OffsetDateTime> minusWeeks(jlong weeks);
	ref<java::time::OffsetDateTime> minusDays(jlong days);
	ref<java::time::OffsetDateTime> minusHours(jlong hours);
	ref<java::time::OffsetDateTime> minusMinutes(jlong minutes);
	ref<java::time::OffsetDateTime> minusSeconds(jlong seconds);
	ref<java::time::OffsetDateTime> minusNanos(jlong nanos);
	ref<java::lang::Object> query(ref<java::time::temporal::TemporalQuery> query);
	ref<java::time::temporal::Temporal> adjustInto(ref<java::time::temporal::Temporal> temporal);
	jlong until(ref<java::time::temporal::Temporal> endExclusive, ref<java::time::temporal::TemporalUnit> unit);
	ref<java::lang::String> format(ref<java::time::format::DateTimeFormatter> formatter);
	ref<java::time::ZonedDateTime> atZoneSameInstant(ref<java::time::ZoneId> zone);
	ref<java::time::ZonedDateTime> atZoneSimilarLocal(ref<java::time::ZoneId> zone);
	ref<java::time::OffsetTime> toOffsetTime();
	ref<java::time::ZonedDateTime> toZonedDateTime();
	ref<java::time::Instant> toInstant();
	jlong toEpochSecond();
	jint compareTo(ref<java::time::OffsetDateTime> other);
	jboolean isAfter(ref<java::time::OffsetDateTime> other);
	jboolean isBefore(ref<java::time::OffsetDateTime> other);
	jboolean isEqual(ref<java::time::OffsetDateTime> other);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	OffsetDateTime(handle_type h) : base_(h) {}

};

} // namespace java::time
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Clock.h>
#include <scapix/java_api/java/time/DayOfWeek.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/time/LocalDate.h>
#include <scapix/java_api/java/time/LocalDateTime.h>
#include <scapix/java_api/java/time/LocalTime.h>
#include <scapix/java_api/java/time/Month.h>
#include <scapix/java_api/java/time/OffsetTime.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/ZoneOffset.h>
#include <scapix/java_api/java/time/ZonedDateTime.h>
#include <scapix/java_api/java/time/format/DateTimeFormatter.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>
#include <scapix/java_api/java/util/Comparator.h>

namespace scapix::java_api {
namespace java::time {

inline ref<java::time::OffsetDateTime> OffsetDateTime::MIN_() { return get_static_field<SCAPIX_META_STRING("MIN"), ref<java::time::OffsetDateTime>>(); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::MAX_() { return get_static_field<SCAPIX_META_STRING("MAX"), ref<java::time::OffsetDateTime>>(); }
inline ref<java::util::Comparator> OffsetDateTime::timeLineOrder() { return call_static_method<SCAPIX_META_STRING("timeLineOrder"), ref<java::util::Comparator>>(); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::now() { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::OffsetDateTime>>(); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::now(ref<java::time::ZoneId> zone) { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::OffsetDateTime>>(zone); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::now(ref<java::time::Clock> clock) { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::OffsetDateTime>>(clock); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::of(ref<java::time::LocalDate> date, ref<java::time::LocalTime> time, ref<java::time::ZoneOffset> offset) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::OffsetDateTime>>(date, time, offset); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::of(ref<java::time::LocalDateTime> dateTime, ref<java::time::ZoneOffset> offset) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::OffsetDateTime>>(dateTime, offset); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::of(jint year, jint month, jint dayOfMonth, jint hour, jint minute, jint second, jint nanoOfSecond, ref<java::time::ZoneOffset> offset) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::OffsetDateTime>>(year, month, dayOfMonth, hour, minute, second, nanoOfSecond, offset); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::ofInstant(ref<java::time::Instant> instant, ref<java::time::ZoneId> zone) { return call_static_method<SCAPIX_META_STRING("ofInstant"), ref<java::time::OffsetDateTime>>(instant, zone); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::from(ref<java::time::temporal::TemporalAccessor> temporal) { return call_static_method<SCAPIX_META_STRING("from"), ref<java::time::OffsetDateTime>>(temporal); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::parse(ref<java::lang::CharSequence> text) { return call_static_method<SCAPIX_META_STRING("parse"), ref<java::time::OffsetDateTime>>(text); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::parse(ref<java::lang::CharSequence> text, ref<java::time::format::DateTimeFormatter> formatter) { return call_static_method<SCAPIX_META_STRING("parse"), ref<java::time::OffsetDateTime>>(text, formatter); }
inline jboolean OffsetDateTime::isSupported(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(field); }
inline jboolean OffsetDateTime::isSupported(ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(unit); }
inline ref<java::time::temporal::ValueRange> OffsetDateTime::range(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("range"), ref<java::time::temporal::ValueRange>>(field); }
inline jint OffsetDateTime::get(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("get"), jint>(field); }
inline jlong OffsetDateTime::getLong(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(field); }
inline ref<java::time::ZoneOffset> OffsetDateTime::getOffset() { return call_method<SCAPIX_META_STRING("getOffset"), ref<java::time::ZoneOffset>>(); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::withOffsetSameLocal(ref<java::time::ZoneOffset> offset) { return call_method<SCAPIX_META_STRING("withOffsetSameLocal"), ref<java::time::OffsetDateTime>>(offset); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::withOffsetSameInstant(ref<java::time::ZoneOffset> offset) { return call_method<SCAPIX_META_STRING("withOffsetSameInstant"), ref<java::time::OffsetDateTime>>(offset); }
inline ref<java::time::LocalDateTime> OffsetDateTime::toLocalDateTime() { return call_method<SCAPIX_META_STRING("toLocalDateTime"), ref<java::time::LocalDateTime>>(); }
inline ref<java::time::LocalDate> OffsetDateTime::toLocalDate() { return call_method<SCAPIX_META_STRING("toLocalDate"), ref<java::time::LocalDate>>(); }
inline jint OffsetDateTime::getYear() { return call_method<SCAPIX_META_STRING("getYear"), jint>(); }
inline jint OffsetDateTime::getMonthValue() { return call_method<SCAPIX_META_STRING("getMonthValue"), jint>(); }
inline ref<java::time::Month> OffsetDateTime::getMonth() { return call_method<SCAPIX_META_STRING("getMonth"), ref<java::time::Month>>(); }
inline jint OffsetDateTime::getDayOfMonth() { return call_method<SCAPIX_META_STRING("getDayOfMonth"), jint>(); }
inline jint OffsetDateTime::getDayOfYear() { return call_method<SCAPIX_META_STRING("getDayOfYear"), jint>(); }
inline ref<java::time::DayOfWeek> OffsetDateTime::getDayOfWeek() { return call_method<SCAPIX_META_STRING("getDayOfWeek"), ref<java::time::DayOfWeek>>(); }
inline ref<java::time::LocalTime> OffsetDateTime::toLocalTime() { return call_method<SCAPIX_META_STRING("toLocalTime"), ref<java::time::LocalTime>>(); }
inline jint OffsetDateTime::getHour() { return call_method<SCAPIX_META_STRING("getHour"), jint>(); }
inline jint OffsetDateTime::getMinute() { return call_method<SCAPIX_META_STRING("getMinute"), jint>(); }
inline jint OffsetDateTime::getSecond() { return call_method<SCAPIX_META_STRING("getSecond"), jint>(); }
inline jint OffsetDateTime::getNano() { return call_method<SCAPIX_META_STRING("getNano"), jint>(); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::with(ref<java::time::temporal::TemporalAdjuster> adjuster) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::OffsetDateTime>>(adjuster); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::with(ref<java::time::temporal::TemporalField> field, jlong newValue) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::OffsetDateTime>>(field, newValue); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::withYear(jint year) { return call_method<SCAPIX_META_STRING("withYear"), ref<java::time::OffsetDateTime>>(year); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::withMonth(jint month) { return call_method<SCAPIX_META_STRING("withMonth"), ref<java::time::OffsetDateTime>>(month); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::withDayOfMonth(jint dayOfMonth) { return call_method<SCAPIX_META_STRING("withDayOfMonth"), ref<java::time::OffsetDateTime>>(dayOfMonth); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::withDayOfYear(jint dayOfYear) { return call_method<SCAPIX_META_STRING("withDayOfYear"), ref<java::time::OffsetDateTime>>(dayOfYear); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::withHour(jint hour) { return call_method<SCAPIX_META_STRING("withHour"), ref<java::time::OffsetDateTime>>(hour); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::withMinute(jint minute) { return call_method<SCAPIX_META_STRING("withMinute"), ref<java::time::OffsetDateTime>>(minute); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::withSecond(jint second) { return call_method<SCAPIX_META_STRING("withSecond"), ref<java::time::OffsetDateTime>>(second); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::withNano(jint nanoOfSecond) { return call_method<SCAPIX_META_STRING("withNano"), ref<java::time::OffsetDateTime>>(nanoOfSecond); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::truncatedTo(ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("truncatedTo"), ref<java::time::OffsetDateTime>>(unit); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::plus(ref<java::time::temporal::TemporalAmount> amountToAdd) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::OffsetDateTime>>(amountToAdd); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::OffsetDateTime>>(amountToAdd, p2); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::plusYears(jlong years) { return call_method<SCAPIX_META_STRING("plusYears"), ref<java::time::OffsetDateTime>>(years); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::plusMonths(jlong months) { return call_method<SCAPIX_META_STRING("plusMonths"), ref<java::time::OffsetDateTime>>(months); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::plusWeeks(jlong weeks) { return call_method<SCAPIX_META_STRING("plusWeeks"), ref<java::time::OffsetDateTime>>(weeks); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::plusDays(jlong days) { return call_method<SCAPIX_META_STRING("plusDays"), ref<java::time::OffsetDateTime>>(days); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::plusHours(jlong hours) { return call_method<SCAPIX_META_STRING("plusHours"), ref<java::time::OffsetDateTime>>(hours); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::plusMinutes(jlong minutes) { return call_method<SCAPIX_META_STRING("plusMinutes"), ref<java::time::OffsetDateTime>>(minutes); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::plusSeconds(jlong seconds) { return call_method<SCAPIX_META_STRING("plusSeconds"), ref<java::time::OffsetDateTime>>(seconds); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::plusNanos(jlong nanos) { return call_method<SCAPIX_META_STRING("plusNanos"), ref<java::time::OffsetDateTime>>(nanos); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::minus(ref<java::time::temporal::TemporalAmount> amountToSubtract) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::OffsetDateTime>>(amountToSubtract); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::OffsetDateTime>>(amountToSubtract, p2); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::minusYears(jlong years) { return call_method<SCAPIX_META_STRING("minusYears"), ref<java::time::OffsetDateTime>>(years); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::minusMonths(jlong months) { return call_method<SCAPIX_META_STRING("minusMonths"), ref<java::time::OffsetDateTime>>(months); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::minusWeeks(jlong weeks) { return call_method<SCAPIX_META_STRING("minusWeeks"), ref<java::time::OffsetDateTime>>(weeks); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::minusDays(jlong days) { return call_method<SCAPIX_META_STRING("minusDays"), ref<java::time::OffsetDateTime>>(days); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::minusHours(jlong hours) { return call_method<SCAPIX_META_STRING("minusHours"), ref<java::time::OffsetDateTime>>(hours); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::minusMinutes(jlong minutes) { return call_method<SCAPIX_META_STRING("minusMinutes"), ref<java::time::OffsetDateTime>>(minutes); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::minusSeconds(jlong seconds) { return call_method<SCAPIX_META_STRING("minusSeconds"), ref<java::time::OffsetDateTime>>(seconds); }
inline ref<java::time::OffsetDateTime> OffsetDateTime::minusNanos(jlong nanos) { return call_method<SCAPIX_META_STRING("minusNanos"), ref<java::time::OffsetDateTime>>(nanos); }
inline ref<java::lang::Object> OffsetDateTime::query(ref<java::time::temporal::TemporalQuery> query) { return call_method<SCAPIX_META_STRING("query"), ref<java::lang::Object>>(query); }
inline ref<java::time::temporal::Temporal> OffsetDateTime::adjustInto(ref<java::time::temporal::Temporal> temporal) { return call_method<SCAPIX_META_STRING("adjustInto"), ref<java::time::temporal::Temporal>>(temporal); }
inline jlong OffsetDateTime::until(ref<java::time::temporal::Temporal> endExclusive, ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("until"), jlong>(endExclusive, unit); }
inline ref<java::lang::String> OffsetDateTime::format(ref<java::time::format::DateTimeFormatter> formatter) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::String>>(formatter); }
inline ref<java::time::ZonedDateTime> OffsetDateTime::atZoneSameInstant(ref<java::time::ZoneId> zone) { return call_method<SCAPIX_META_STRING("atZoneSameInstant"), ref<java::time::ZonedDateTime>>(zone); }
inline ref<java::time::ZonedDateTime> OffsetDateTime::atZoneSimilarLocal(ref<java::time::ZoneId> zone) { return call_method<SCAPIX_META_STRING("atZoneSimilarLocal"), ref<java::time::ZonedDateTime>>(zone); }
inline ref<java::time::OffsetTime> OffsetDateTime::toOffsetTime() { return call_method<SCAPIX_META_STRING("toOffsetTime"), ref<java::time::OffsetTime>>(); }
inline ref<java::time::ZonedDateTime> OffsetDateTime::toZonedDateTime() { return call_method<SCAPIX_META_STRING("toZonedDateTime"), ref<java::time::ZonedDateTime>>(); }
inline ref<java::time::Instant> OffsetDateTime::toInstant() { return call_method<SCAPIX_META_STRING("toInstant"), ref<java::time::Instant>>(); }
inline jlong OffsetDateTime::toEpochSecond() { return call_method<SCAPIX_META_STRING("toEpochSecond"), jlong>(); }
inline jint OffsetDateTime::compareTo(ref<java::time::OffsetDateTime> other) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(other); }
inline jboolean OffsetDateTime::isAfter(ref<java::time::OffsetDateTime> other) { return call_method<SCAPIX_META_STRING("isAfter"), jboolean>(other); }
inline jboolean OffsetDateTime::isBefore(ref<java::time::OffsetDateTime> other) { return call_method<SCAPIX_META_STRING("isBefore"), jboolean>(other); }
inline jboolean OffsetDateTime::isEqual(ref<java::time::OffsetDateTime> other) { return call_method<SCAPIX_META_STRING("isEqual"), jboolean>(other); }
inline jboolean OffsetDateTime::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint OffsetDateTime::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> OffsetDateTime::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_OFFSETDATETIME_H
