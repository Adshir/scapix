// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_NET_SERVERSOCKET_H
#define SCAPIX_JAVA_NET_SERVERSOCKET_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::net { class InetAddress; }
namespace java::net { class Socket; }
namespace java::net { class SocketAddress; }
namespace java::net { class SocketImplFactory; }
namespace java::net { class SocketOption; }
namespace java::nio::channels { class ServerSocketChannel; }
namespace java::util { class Set; }

namespace java::net {

class ServerSocket : public object_base<SCAPIX_META_STRING("java/net/ServerSocket"),
	java::lang::Object,
	java::io::Closeable>
{
public:

	static ref<ServerSocket> new_object();
	static ref<ServerSocket> new_object(jint port);
	static ref<ServerSocket> new_object(jint port, jint backlog);
	static ref<ServerSocket> new_object(jint port, jint backlog, ref<java::net::InetAddress> bindAddr);
	void bind(ref<java::net::SocketAddress> endpoint);
	void bind(ref<java::net::SocketAddress> endpoint, jint backlog);
	ref<java::net::InetAddress> getInetAddress();
	jint getLocalPort();
	ref<java::net::SocketAddress> getLocalSocketAddress();
	ref<java::net::Socket> accept();
	void close();
	ref<java::nio::channels::ServerSocketChannel> getChannel();
	jboolean isBound();
	jboolean isClosed();
	void setSoTimeout(jint timeout);
	jint getSoTimeout();
	void setReuseAddress(jboolean on);
	jboolean getReuseAddress();
	ref<java::lang::String> toString();
	static void setSocketFactory(ref<java::net::SocketImplFactory> fac);
	void setReceiveBufferSize(jint size);
	jint getReceiveBufferSize();
	void setPerformancePreferences(jint connectionTime, jint latency, jint bandwidth);
	ref<java::net::ServerSocket> setOption(ref<java::net::SocketOption> name, ref<java::lang::Object> value);
	ref<java::lang::Object> getOption(ref<java::net::SocketOption> name);
	ref<java::util::Set> supportedOptions();

protected:

	ServerSocket(handle_type h) : base_(h) {}

};

} // namespace java::net
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/net/Socket.h>
#include <scapix/java_api/java/net/SocketAddress.h>
#include <scapix/java_api/java/net/SocketImplFactory.h>
#include <scapix/java_api/java/net/SocketOption.h>
#include <scapix/java_api/java/nio/channels/ServerSocketChannel.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace java::net {

inline ref<ServerSocket> ServerSocket::new_object() { return base_::new_object(); }
inline ref<ServerSocket> ServerSocket::new_object(jint port) { return base_::new_object(port); }
inline ref<ServerSocket> ServerSocket::new_object(jint port, jint backlog) { return base_::new_object(port, backlog); }
inline ref<ServerSocket> ServerSocket::new_object(jint port, jint backlog, ref<java::net::InetAddress> bindAddr) { return base_::new_object(port, backlog, bindAddr); }
inline void ServerSocket::bind(ref<java::net::SocketAddress> endpoint) { return call_method<SCAPIX_META_STRING("bind"), void>(endpoint); }
inline void ServerSocket::bind(ref<java::net::SocketAddress> endpoint, jint backlog) { return call_method<SCAPIX_META_STRING("bind"), void>(endpoint, backlog); }
inline ref<java::net::InetAddress> ServerSocket::getInetAddress() { return call_method<SCAPIX_META_STRING("getInetAddress"), ref<java::net::InetAddress>>(); }
inline jint ServerSocket::getLocalPort() { return call_method<SCAPIX_META_STRING("getLocalPort"), jint>(); }
inline ref<java::net::SocketAddress> ServerSocket::getLocalSocketAddress() { return call_method<SCAPIX_META_STRING("getLocalSocketAddress"), ref<java::net::SocketAddress>>(); }
inline ref<java::net::Socket> ServerSocket::accept() { return call_method<SCAPIX_META_STRING("accept"), ref<java::net::Socket>>(); }
inline void ServerSocket::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline ref<java::nio::channels::ServerSocketChannel> ServerSocket::getChannel() { return call_method<SCAPIX_META_STRING("getChannel"), ref<java::nio::channels::ServerSocketChannel>>(); }
inline jboolean ServerSocket::isBound() { return call_method<SCAPIX_META_STRING("isBound"), jboolean>(); }
inline jboolean ServerSocket::isClosed() { return call_method<SCAPIX_META_STRING("isClosed"), jboolean>(); }
inline void ServerSocket::setSoTimeout(jint timeout) { return call_method<SCAPIX_META_STRING("setSoTimeout"), void>(timeout); }
inline jint ServerSocket::getSoTimeout() { return call_method<SCAPIX_META_STRING("getSoTimeout"), jint>(); }
inline void ServerSocket::setReuseAddress(jboolean on) { return call_method<SCAPIX_META_STRING("setReuseAddress"), void>(on); }
inline jboolean ServerSocket::getReuseAddress() { return call_method<SCAPIX_META_STRING("getReuseAddress"), jboolean>(); }
inline ref<java::lang::String> ServerSocket::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline void ServerSocket::setSocketFactory(ref<java::net::SocketImplFactory> fac) { return call_static_method<SCAPIX_META_STRING("setSocketFactory"), void>(fac); }
inline void ServerSocket::setReceiveBufferSize(jint size) { return call_method<SCAPIX_META_STRING("setReceiveBufferSize"), void>(size); }
inline jint ServerSocket::getReceiveBufferSize() { return call_method<SCAPIX_META_STRING("getReceiveBufferSize"), jint>(); }
inline void ServerSocket::setPerformancePreferences(jint connectionTime, jint latency, jint bandwidth) { return call_method<SCAPIX_META_STRING("setPerformancePreferences"), void>(connectionTime, latency, bandwidth); }
inline ref<java::net::ServerSocket> ServerSocket::setOption(ref<java::net::SocketOption> name, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("setOption"), ref<java::net::ServerSocket>>(name, value); }
inline ref<java::lang::Object> ServerSocket::getOption(ref<java::net::SocketOption> name) { return call_method<SCAPIX_META_STRING("getOption"), ref<java::lang::Object>>(name); }
inline ref<java::util::Set> ServerSocket::supportedOptions() { return call_method<SCAPIX_META_STRING("supportedOptions"), ref<java::util::Set>>(); }

} // namespace java::net
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NET_SERVERSOCKET_H
