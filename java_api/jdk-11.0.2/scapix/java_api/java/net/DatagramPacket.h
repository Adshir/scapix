// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_NET_DATAGRAMPACKET_H
#define SCAPIX_JAVA_NET_DATAGRAMPACKET_H

namespace scapix::java_api {

namespace java::net { class InetAddress; }
namespace java::net { class SocketAddress; }

namespace java::net {

class DatagramPacket : public object_base<SCAPIX_META_STRING("java/net/DatagramPacket"),
	java::lang::Object>
{
public:

	static ref<DatagramPacket> new_object(ref<link::java::array<jbyte>> buf, jint offset, jint length);
	static ref<DatagramPacket> new_object(ref<link::java::array<jbyte>> buf, jint length);
	static ref<DatagramPacket> new_object(ref<link::java::array<jbyte>> buf, jint offset, jint length, ref<java::net::InetAddress> address, jint port);
	static ref<DatagramPacket> new_object(ref<link::java::array<jbyte>> buf, jint offset, jint length, ref<java::net::SocketAddress> address);
	static ref<DatagramPacket> new_object(ref<link::java::array<jbyte>> buf, jint length, ref<java::net::InetAddress> address, jint port);
	static ref<DatagramPacket> new_object(ref<link::java::array<jbyte>> buf, jint length, ref<java::net::SocketAddress> address);
	ref<java::net::InetAddress> getAddress();
	jint getPort();
	ref<link::java::array<jbyte>> getData();
	jint getOffset();
	jint getLength();
	void setData(ref<link::java::array<jbyte>> buf, jint offset, jint length);
	void setAddress(ref<java::net::InetAddress> iaddr);
	void setPort(jint iport);
	void setSocketAddress(ref<java::net::SocketAddress> address);
	ref<java::net::SocketAddress> getSocketAddress();
	void setData(ref<link::java::array<jbyte>> buf);
	void setLength(jint length);

protected:

	DatagramPacket(handle_type h) : base_(h) {}

};

} // namespace java::net
} // namespace scapix::java_api

#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/net/SocketAddress.h>

namespace scapix::java_api {
namespace java::net {

inline ref<DatagramPacket> DatagramPacket::new_object(ref<link::java::array<jbyte>> buf, jint offset, jint length) { return base_::new_object(buf, offset, length); }
inline ref<DatagramPacket> DatagramPacket::new_object(ref<link::java::array<jbyte>> buf, jint length) { return base_::new_object(buf, length); }
inline ref<DatagramPacket> DatagramPacket::new_object(ref<link::java::array<jbyte>> buf, jint offset, jint length, ref<java::net::InetAddress> address, jint port) { return base_::new_object(buf, offset, length, address, port); }
inline ref<DatagramPacket> DatagramPacket::new_object(ref<link::java::array<jbyte>> buf, jint offset, jint length, ref<java::net::SocketAddress> address) { return base_::new_object(buf, offset, length, address); }
inline ref<DatagramPacket> DatagramPacket::new_object(ref<link::java::array<jbyte>> buf, jint length, ref<java::net::InetAddress> address, jint port) { return base_::new_object(buf, length, address, port); }
inline ref<DatagramPacket> DatagramPacket::new_object(ref<link::java::array<jbyte>> buf, jint length, ref<java::net::SocketAddress> address) { return base_::new_object(buf, length, address); }
inline ref<java::net::InetAddress> DatagramPacket::getAddress() { return call_method<SCAPIX_META_STRING("getAddress"), ref<java::net::InetAddress>>(); }
inline jint DatagramPacket::getPort() { return call_method<SCAPIX_META_STRING("getPort"), jint>(); }
inline ref<link::java::array<jbyte>> DatagramPacket::getData() { return call_method<SCAPIX_META_STRING("getData"), ref<link::java::array<jbyte>>>(); }
inline jint DatagramPacket::getOffset() { return call_method<SCAPIX_META_STRING("getOffset"), jint>(); }
inline jint DatagramPacket::getLength() { return call_method<SCAPIX_META_STRING("getLength"), jint>(); }
inline void DatagramPacket::setData(ref<link::java::array<jbyte>> buf, jint offset, jint length) { return call_method<SCAPIX_META_STRING("setData"), void>(buf, offset, length); }
inline void DatagramPacket::setAddress(ref<java::net::InetAddress> iaddr) { return call_method<SCAPIX_META_STRING("setAddress"), void>(iaddr); }
inline void DatagramPacket::setPort(jint iport) { return call_method<SCAPIX_META_STRING("setPort"), void>(iport); }
inline void DatagramPacket::setSocketAddress(ref<java::net::SocketAddress> address) { return call_method<SCAPIX_META_STRING("setSocketAddress"), void>(address); }
inline ref<java::net::SocketAddress> DatagramPacket::getSocketAddress() { return call_method<SCAPIX_META_STRING("getSocketAddress"), ref<java::net::SocketAddress>>(); }
inline void DatagramPacket::setData(ref<link::java::array<jbyte>> buf) { return call_method<SCAPIX_META_STRING("setData"), void>(buf); }
inline void DatagramPacket::setLength(jint length) { return call_method<SCAPIX_META_STRING("setLength"), void>(length); }

} // namespace java::net
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NET_DATAGRAMPACKET_H
