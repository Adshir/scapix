// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/net/DatagramSocket.h>

#ifndef SCAPIX_JAVA_NET_MULTICASTSOCKET_H
#define SCAPIX_JAVA_NET_MULTICASTSOCKET_H

namespace scapix::java_api {

namespace java::net { class DatagramPacket; }
namespace java::net { class InetAddress; }
namespace java::net { class NetworkInterface; }
namespace java::net { class SocketAddress; }
namespace java::util { class Set; }

namespace java::net {

class MulticastSocket : public object_base<SCAPIX_META_STRING("java/net/MulticastSocket"),
	java::net::DatagramSocket>
{
public:

	static ref<MulticastSocket> new_object();
	static ref<MulticastSocket> new_object(jint port);
	static ref<MulticastSocket> new_object(ref<java::net::SocketAddress> bindaddr);
	void setTTL(jbyte ttl);
	void setTimeToLive(jint ttl);
	jbyte getTTL();
	jint getTimeToLive();
	void joinGroup(ref<java::net::InetAddress> mcastaddr);
	void leaveGroup(ref<java::net::InetAddress> mcastaddr);
	void joinGroup(ref<java::net::SocketAddress> mcastaddr, ref<java::net::NetworkInterface> netIf);
	void leaveGroup(ref<java::net::SocketAddress> mcastaddr, ref<java::net::NetworkInterface> netIf);
	void setInterface(ref<java::net::InetAddress> inf);
	ref<java::net::InetAddress> getInterface();
	void setNetworkInterface(ref<java::net::NetworkInterface> netIf);
	ref<java::net::NetworkInterface> getNetworkInterface();
	void setLoopbackMode(jboolean disable);
	jboolean getLoopbackMode();
	void send(ref<java::net::DatagramPacket> p, jbyte ttl);
	ref<java::util::Set> supportedOptions();

protected:

	MulticastSocket(handle_type h) : base_(h) {}

};

} // namespace java::net
} // namespace scapix::java_api

#include <scapix/java_api/java/net/DatagramPacket.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/net/NetworkInterface.h>
#include <scapix/java_api/java/net/SocketAddress.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace java::net {

inline ref<MulticastSocket> MulticastSocket::new_object() { return base_::new_object(); }
inline ref<MulticastSocket> MulticastSocket::new_object(jint port) { return base_::new_object(port); }
inline ref<MulticastSocket> MulticastSocket::new_object(ref<java::net::SocketAddress> bindaddr) { return base_::new_object(bindaddr); }
inline void MulticastSocket::setTTL(jbyte ttl) { return call_method<SCAPIX_META_STRING("setTTL"), void>(ttl); }
inline void MulticastSocket::setTimeToLive(jint ttl) { return call_method<SCAPIX_META_STRING("setTimeToLive"), void>(ttl); }
inline jbyte MulticastSocket::getTTL() { return call_method<SCAPIX_META_STRING("getTTL"), jbyte>(); }
inline jint MulticastSocket::getTimeToLive() { return call_method<SCAPIX_META_STRING("getTimeToLive"), jint>(); }
inline void MulticastSocket::joinGroup(ref<java::net::InetAddress> mcastaddr) { return call_method<SCAPIX_META_STRING("joinGroup"), void>(mcastaddr); }
inline void MulticastSocket::leaveGroup(ref<java::net::InetAddress> mcastaddr) { return call_method<SCAPIX_META_STRING("leaveGroup"), void>(mcastaddr); }
inline void MulticastSocket::joinGroup(ref<java::net::SocketAddress> mcastaddr, ref<java::net::NetworkInterface> netIf) { return call_method<SCAPIX_META_STRING("joinGroup"), void>(mcastaddr, netIf); }
inline void MulticastSocket::leaveGroup(ref<java::net::SocketAddress> mcastaddr, ref<java::net::NetworkInterface> netIf) { return call_method<SCAPIX_META_STRING("leaveGroup"), void>(mcastaddr, netIf); }
inline void MulticastSocket::setInterface(ref<java::net::InetAddress> inf) { return call_method<SCAPIX_META_STRING("setInterface"), void>(inf); }
inline ref<java::net::InetAddress> MulticastSocket::getInterface() { return call_method<SCAPIX_META_STRING("getInterface"), ref<java::net::InetAddress>>(); }
inline void MulticastSocket::setNetworkInterface(ref<java::net::NetworkInterface> netIf) { return call_method<SCAPIX_META_STRING("setNetworkInterface"), void>(netIf); }
inline ref<java::net::NetworkInterface> MulticastSocket::getNetworkInterface() { return call_method<SCAPIX_META_STRING("getNetworkInterface"), ref<java::net::NetworkInterface>>(); }
inline void MulticastSocket::setLoopbackMode(jboolean disable) { return call_method<SCAPIX_META_STRING("setLoopbackMode"), void>(disable); }
inline jboolean MulticastSocket::getLoopbackMode() { return call_method<SCAPIX_META_STRING("getLoopbackMode"), jboolean>(); }
inline void MulticastSocket::send(ref<java::net::DatagramPacket> p, jbyte ttl) { return call_method<SCAPIX_META_STRING("send"), void>(p, ttl); }
inline ref<java::util::Set> MulticastSocket::supportedOptions() { return call_method<SCAPIX_META_STRING("supportedOptions"), ref<java::util::Set>>(); }

} // namespace java::net
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NET_MULTICASTSOCKET_H
