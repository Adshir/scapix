// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_NET_INETADDRESS_H
#define SCAPIX_JAVA_NET_INETADDRESS_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::net { class NetworkInterface; }

namespace java::net {

class InetAddress : public object_base<SCAPIX_META_STRING("java/net/InetAddress"),
	java::lang::Object,
	java::io::Serializable>
{
public:

	jboolean isMulticastAddress();
	jboolean isAnyLocalAddress();
	jboolean isLoopbackAddress();
	jboolean isLinkLocalAddress();
	jboolean isSiteLocalAddress();
	jboolean isMCGlobal();
	jboolean isMCNodeLocal();
	jboolean isMCLinkLocal();
	jboolean isMCSiteLocal();
	jboolean isMCOrgLocal();
	jboolean isReachable(jint timeout);
	jboolean isReachable(ref<java::net::NetworkInterface> netif, jint ttl, jint timeout);
	ref<java::lang::String> getHostName();
	ref<java::lang::String> getCanonicalHostName();
	ref<link::java::array<jbyte>> getAddress();
	ref<java::lang::String> getHostAddress();
	jint hashCode();
	jboolean equals(ref<java::lang::Object> obj);
	ref<java::lang::String> toString();
	static ref<java::net::InetAddress> getByAddress(ref<java::lang::String> host, ref<link::java::array<jbyte>> addr);
	static ref<java::net::InetAddress> getByName(ref<java::lang::String> host);
	static ref<link::java::array<java::net::InetAddress>> getAllByName(ref<java::lang::String> host);
	static ref<java::net::InetAddress> getLoopbackAddress();
	static ref<java::net::InetAddress> getByAddress(ref<link::java::array<jbyte>> addr);
	static ref<java::net::InetAddress> getLocalHost();

protected:

	InetAddress(handle_type h) : base_(h) {}

};

} // namespace java::net
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/NetworkInterface.h>

namespace scapix::java_api {
namespace java::net {

inline jboolean InetAddress::isMulticastAddress() { return call_method<SCAPIX_META_STRING("isMulticastAddress"), jboolean>(); }
inline jboolean InetAddress::isAnyLocalAddress() { return call_method<SCAPIX_META_STRING("isAnyLocalAddress"), jboolean>(); }
inline jboolean InetAddress::isLoopbackAddress() { return call_method<SCAPIX_META_STRING("isLoopbackAddress"), jboolean>(); }
inline jboolean InetAddress::isLinkLocalAddress() { return call_method<SCAPIX_META_STRING("isLinkLocalAddress"), jboolean>(); }
inline jboolean InetAddress::isSiteLocalAddress() { return call_method<SCAPIX_META_STRING("isSiteLocalAddress"), jboolean>(); }
inline jboolean InetAddress::isMCGlobal() { return call_method<SCAPIX_META_STRING("isMCGlobal"), jboolean>(); }
inline jboolean InetAddress::isMCNodeLocal() { return call_method<SCAPIX_META_STRING("isMCNodeLocal"), jboolean>(); }
inline jboolean InetAddress::isMCLinkLocal() { return call_method<SCAPIX_META_STRING("isMCLinkLocal"), jboolean>(); }
inline jboolean InetAddress::isMCSiteLocal() { return call_method<SCAPIX_META_STRING("isMCSiteLocal"), jboolean>(); }
inline jboolean InetAddress::isMCOrgLocal() { return call_method<SCAPIX_META_STRING("isMCOrgLocal"), jboolean>(); }
inline jboolean InetAddress::isReachable(jint timeout) { return call_method<SCAPIX_META_STRING("isReachable"), jboolean>(timeout); }
inline jboolean InetAddress::isReachable(ref<java::net::NetworkInterface> netif, jint ttl, jint timeout) { return call_method<SCAPIX_META_STRING("isReachable"), jboolean>(netif, ttl, timeout); }
inline ref<java::lang::String> InetAddress::getHostName() { return call_method<SCAPIX_META_STRING("getHostName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> InetAddress::getCanonicalHostName() { return call_method<SCAPIX_META_STRING("getCanonicalHostName"), ref<java::lang::String>>(); }
inline ref<link::java::array<jbyte>> InetAddress::getAddress() { return call_method<SCAPIX_META_STRING("getAddress"), ref<link::java::array<jbyte>>>(); }
inline ref<java::lang::String> InetAddress::getHostAddress() { return call_method<SCAPIX_META_STRING("getHostAddress"), ref<java::lang::String>>(); }
inline jint InetAddress::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean InetAddress::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline ref<java::lang::String> InetAddress::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::net::InetAddress> InetAddress::getByAddress(ref<java::lang::String> host, ref<link::java::array<jbyte>> addr) { return call_static_method<SCAPIX_META_STRING("getByAddress"), ref<java::net::InetAddress>>(host, addr); }
inline ref<java::net::InetAddress> InetAddress::getByName(ref<java::lang::String> host) { return call_static_method<SCAPIX_META_STRING("getByName"), ref<java::net::InetAddress>>(host); }
inline ref<link::java::array<java::net::InetAddress>> InetAddress::getAllByName(ref<java::lang::String> host) { return call_static_method<SCAPIX_META_STRING("getAllByName"), ref<link::java::array<java::net::InetAddress>>>(host); }
inline ref<java::net::InetAddress> InetAddress::getLoopbackAddress() { return call_static_method<SCAPIX_META_STRING("getLoopbackAddress"), ref<java::net::InetAddress>>(); }
inline ref<java::net::InetAddress> InetAddress::getByAddress(ref<link::java::array<jbyte>> addr) { return call_static_method<SCAPIX_META_STRING("getByAddress"), ref<java::net::InetAddress>>(addr); }
inline ref<java::net::InetAddress> InetAddress::getLocalHost() { return call_static_method<SCAPIX_META_STRING("getLocalHost"), ref<java::net::InetAddress>>(); }

} // namespace java::net
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NET_INETADDRESS_H
