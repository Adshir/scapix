// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/FileInputStream.h>

#ifndef SCAPIX_JAVA_NET_SOCKETINPUTSTREAM_H
#define SCAPIX_JAVA_NET_SOCKETINPUTSTREAM_H

namespace scapix::java_api {

namespace java::nio::channels { class FileChannel; }

namespace java::net {

// private
class SocketInputStream : public object_base<SCAPIX_META_STRING("java/net/SocketInputStream"),
	java::io::FileInputStream>
{
public:

	ref<java::nio::channels::FileChannel> getChannel();
	jint read(ref<link::java::array<jbyte>> b);
	jint read(ref<link::java::array<jbyte>> b, jint off, jint length);
	jint read();
	jlong skip(jlong numbytes);
	jint available();
	void close();

protected:

	SocketInputStream(handle_type h) : base_(h) {}

};

} // namespace java::net
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/channels/FileChannel.h>

namespace scapix::java_api {
namespace java::net {

inline ref<java::nio::channels::FileChannel> SocketInputStream::getChannel() { return call_method<SCAPIX_META_STRING("getChannel"), ref<java::nio::channels::FileChannel>>(); }
inline jint SocketInputStream::read(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("read"), jint>(b); }
inline jint SocketInputStream::read(ref<link::java::array<jbyte>> b, jint off, jint length) { return call_method<SCAPIX_META_STRING("read"), jint>(b, off, length); }
inline jint SocketInputStream::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jlong SocketInputStream::skip(jlong numbytes) { return call_method<SCAPIX_META_STRING("skip"), jlong>(numbytes); }
inline jint SocketInputStream::available() { return call_method<SCAPIX_META_STRING("available"), jint>(); }
inline void SocketInputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::net
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NET_SOCKETINPUTSTREAM_H
