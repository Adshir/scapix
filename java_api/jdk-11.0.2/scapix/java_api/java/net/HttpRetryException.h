// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/IOException.h>

#ifndef SCAPIX_JAVA_NET_HTTPRETRYEXCEPTION_H
#define SCAPIX_JAVA_NET_HTTPRETRYEXCEPTION_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace java::net {

class HttpRetryException : public object_base<SCAPIX_META_STRING("java/net/HttpRetryException"),
	java::io::IOException>
{
public:

	static ref<HttpRetryException> new_object(ref<java::lang::String> detail, jint code);
	static ref<HttpRetryException> new_object(ref<java::lang::String> detail, jint code, ref<java::lang::String> location);
	jint responseCode();
	ref<java::lang::String> getReason();
	ref<java::lang::String> getLocation();

protected:

	HttpRetryException(handle_type h) : base_(h) {}

};

} // namespace java::net
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::net {

inline ref<HttpRetryException> HttpRetryException::new_object(ref<java::lang::String> detail, jint code) { return base_::new_object(detail, code); }
inline ref<HttpRetryException> HttpRetryException::new_object(ref<java::lang::String> detail, jint code, ref<java::lang::String> location) { return base_::new_object(detail, code, location); }
inline jint HttpRetryException::responseCode() { return call_method<SCAPIX_META_STRING("responseCode"), jint>(); }
inline ref<java::lang::String> HttpRetryException::getReason() { return call_method<SCAPIX_META_STRING("getReason"), ref<java::lang::String>>(); }
inline ref<java::lang::String> HttpRetryException::getLocation() { return call_method<SCAPIX_META_STRING("getLocation"), ref<java::lang::String>>(); }

} // namespace java::net
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NET_HTTPRETRYEXCEPTION_H
