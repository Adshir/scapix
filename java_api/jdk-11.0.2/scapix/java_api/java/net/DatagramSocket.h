// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_NET_DATAGRAMSOCKET_H
#define SCAPIX_JAVA_NET_DATAGRAMSOCKET_H

namespace scapix::java_api {

namespace java::net { class DatagramPacket; }
namespace java::net { class DatagramSocketImplFactory; }
namespace java::net { class InetAddress; }
namespace java::net { class SocketAddress; }
namespace java::net { class SocketOption; }
namespace java::nio::channels { class DatagramChannel; }
namespace java::util { class Set; }

namespace java::net {

class DatagramSocket : public object_base<SCAPIX_META_STRING("java/net/DatagramSocket"),
	java::lang::Object,
	java::io::Closeable>
{
public:

	static ref<DatagramSocket> new_object();
	static ref<DatagramSocket> new_object(ref<java::net::SocketAddress> bindaddr);
	static ref<DatagramSocket> new_object(jint port);
	static ref<DatagramSocket> new_object(jint port, ref<java::net::InetAddress> laddr);
	void bind(ref<java::net::SocketAddress> addr);
	void connect(ref<java::net::InetAddress> address, jint port);
	void connect(ref<java::net::SocketAddress> addr);
	void disconnect();
	jboolean isBound();
	jboolean isConnected();
	ref<java::net::InetAddress> getInetAddress();
	jint getPort();
	ref<java::net::SocketAddress> getRemoteSocketAddress();
	ref<java::net::SocketAddress> getLocalSocketAddress();
	void send(ref<java::net::DatagramPacket> p);
	void receive(ref<java::net::DatagramPacket> p);
	ref<java::net::InetAddress> getLocalAddress();
	jint getLocalPort();
	void setSoTimeout(jint timeout);
	jint getSoTimeout();
	void setSendBufferSize(jint size);
	jint getSendBufferSize();
	void setReceiveBufferSize(jint size);
	jint getReceiveBufferSize();
	void setReuseAddress(jboolean on);
	jboolean getReuseAddress();
	void setBroadcast(jboolean on);
	jboolean getBroadcast();
	void setTrafficClass(jint tc);
	jint getTrafficClass();
	void close();
	jboolean isClosed();
	ref<java::nio::channels::DatagramChannel> getChannel();
	static void setDatagramSocketImplFactory(ref<java::net::DatagramSocketImplFactory> fac);
	ref<java::net::DatagramSocket> setOption(ref<java::net::SocketOption> name, ref<java::lang::Object> value);
	ref<java::lang::Object> getOption(ref<java::net::SocketOption> name);
	ref<java::util::Set> supportedOptions();

protected:

	DatagramSocket(handle_type h) : base_(h) {}

};

} // namespace java::net
} // namespace scapix::java_api

#include <scapix/java_api/java/net/DatagramPacket.h>
#include <scapix/java_api/java/net/DatagramSocketImplFactory.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/net/SocketAddress.h>
#include <scapix/java_api/java/net/SocketOption.h>
#include <scapix/java_api/java/nio/channels/DatagramChannel.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace java::net {

inline ref<DatagramSocket> DatagramSocket::new_object() { return base_::new_object(); }
inline ref<DatagramSocket> DatagramSocket::new_object(ref<java::net::SocketAddress> bindaddr) { return base_::new_object(bindaddr); }
inline ref<DatagramSocket> DatagramSocket::new_object(jint port) { return base_::new_object(port); }
inline ref<DatagramSocket> DatagramSocket::new_object(jint port, ref<java::net::InetAddress> laddr) { return base_::new_object(port, laddr); }
inline void DatagramSocket::bind(ref<java::net::SocketAddress> addr) { return call_method<SCAPIX_META_STRING("bind"), void>(addr); }
inline void DatagramSocket::connect(ref<java::net::InetAddress> address, jint port) { return call_method<SCAPIX_META_STRING("connect"), void>(address, port); }
inline void DatagramSocket::connect(ref<java::net::SocketAddress> addr) { return call_method<SCAPIX_META_STRING("connect"), void>(addr); }
inline void DatagramSocket::disconnect() { return call_method<SCAPIX_META_STRING("disconnect"), void>(); }
inline jboolean DatagramSocket::isBound() { return call_method<SCAPIX_META_STRING("isBound"), jboolean>(); }
inline jboolean DatagramSocket::isConnected() { return call_method<SCAPIX_META_STRING("isConnected"), jboolean>(); }
inline ref<java::net::InetAddress> DatagramSocket::getInetAddress() { return call_method<SCAPIX_META_STRING("getInetAddress"), ref<java::net::InetAddress>>(); }
inline jint DatagramSocket::getPort() { return call_method<SCAPIX_META_STRING("getPort"), jint>(); }
inline ref<java::net::SocketAddress> DatagramSocket::getRemoteSocketAddress() { return call_method<SCAPIX_META_STRING("getRemoteSocketAddress"), ref<java::net::SocketAddress>>(); }
inline ref<java::net::SocketAddress> DatagramSocket::getLocalSocketAddress() { return call_method<SCAPIX_META_STRING("getLocalSocketAddress"), ref<java::net::SocketAddress>>(); }
inline void DatagramSocket::send(ref<java::net::DatagramPacket> p) { return call_method<SCAPIX_META_STRING("send"), void>(p); }
inline void DatagramSocket::receive(ref<java::net::DatagramPacket> p) { return call_method<SCAPIX_META_STRING("receive"), void>(p); }
inline ref<java::net::InetAddress> DatagramSocket::getLocalAddress() { return call_method<SCAPIX_META_STRING("getLocalAddress"), ref<java::net::InetAddress>>(); }
inline jint DatagramSocket::getLocalPort() { return call_method<SCAPIX_META_STRING("getLocalPort"), jint>(); }
inline void DatagramSocket::setSoTimeout(jint timeout) { return call_method<SCAPIX_META_STRING("setSoTimeout"), void>(timeout); }
inline jint DatagramSocket::getSoTimeout() { return call_method<SCAPIX_META_STRING("getSoTimeout"), jint>(); }
inline void DatagramSocket::setSendBufferSize(jint size) { return call_method<SCAPIX_META_STRING("setSendBufferSize"), void>(size); }
inline jint DatagramSocket::getSendBufferSize() { return call_method<SCAPIX_META_STRING("getSendBufferSize"), jint>(); }
inline void DatagramSocket::setReceiveBufferSize(jint size) { return call_method<SCAPIX_META_STRING("setReceiveBufferSize"), void>(size); }
inline jint DatagramSocket::getReceiveBufferSize() { return call_method<SCAPIX_META_STRING("getReceiveBufferSize"), jint>(); }
inline void DatagramSocket::setReuseAddress(jboolean on) { return call_method<SCAPIX_META_STRING("setReuseAddress"), void>(on); }
inline jboolean DatagramSocket::getReuseAddress() { return call_method<SCAPIX_META_STRING("getReuseAddress"), jboolean>(); }
inline void DatagramSocket::setBroadcast(jboolean on) { return call_method<SCAPIX_META_STRING("setBroadcast"), void>(on); }
inline jboolean DatagramSocket::getBroadcast() { return call_method<SCAPIX_META_STRING("getBroadcast"), jboolean>(); }
inline void DatagramSocket::setTrafficClass(jint tc) { return call_method<SCAPIX_META_STRING("setTrafficClass"), void>(tc); }
inline jint DatagramSocket::getTrafficClass() { return call_method<SCAPIX_META_STRING("getTrafficClass"), jint>(); }
inline void DatagramSocket::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jboolean DatagramSocket::isClosed() { return call_method<SCAPIX_META_STRING("isClosed"), jboolean>(); }
inline ref<java::nio::channels::DatagramChannel> DatagramSocket::getChannel() { return call_method<SCAPIX_META_STRING("getChannel"), ref<java::nio::channels::DatagramChannel>>(); }
inline void DatagramSocket::setDatagramSocketImplFactory(ref<java::net::DatagramSocketImplFactory> fac) { return call_static_method<SCAPIX_META_STRING("setDatagramSocketImplFactory"), void>(fac); }
inline ref<java::net::DatagramSocket> DatagramSocket::setOption(ref<java::net::SocketOption> name, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("setOption"), ref<java::net::DatagramSocket>>(name, value); }
inline ref<java::lang::Object> DatagramSocket::getOption(ref<java::net::SocketOption> name) { return call_method<SCAPIX_META_STRING("getOption"), ref<java::lang::Object>>(name); }
inline ref<java::util::Set> DatagramSocket::supportedOptions() { return call_method<SCAPIX_META_STRING("supportedOptions"), ref<java::util::Set>>(); }

} // namespace java::net
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NET_DATAGRAMSOCKET_H
