// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/FileOutputStream.h>

#ifndef SCAPIX_JAVA_NET_SOCKETOUTPUTSTREAM_H
#define SCAPIX_JAVA_NET_SOCKETOUTPUTSTREAM_H

namespace scapix::java_api {

namespace java::nio::channels { class FileChannel; }

namespace java::net {

// private
class SocketOutputStream : public object_base<SCAPIX_META_STRING("java/net/SocketOutputStream"),
	java::io::FileOutputStream>
{
public:

	ref<java::nio::channels::FileChannel> getChannel();
	void write(jint b);
	void write(ref<link::java::array<jbyte>> b);
	void write(ref<link::java::array<jbyte>> b, jint off, jint len);
	void close();

protected:

	SocketOutputStream(handle_type h) : base_(h) {}

};

} // namespace java::net
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/channels/FileChannel.h>

namespace scapix::java_api {
namespace java::net {

inline ref<java::nio::channels::FileChannel> SocketOutputStream::getChannel() { return call_method<SCAPIX_META_STRING("getChannel"), ref<java::nio::channels::FileChannel>>(); }
inline void SocketOutputStream::write(jint b) { return call_method<SCAPIX_META_STRING("write"), void>(b); }
inline void SocketOutputStream::write(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("write"), void>(b); }
inline void SocketOutputStream::write(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(b, off, len); }
inline void SocketOutputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::net
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NET_SOCKETOUTPUTSTREAM_H
