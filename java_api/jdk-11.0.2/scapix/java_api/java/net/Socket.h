// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_NET_SOCKET_H
#define SCAPIX_JAVA_NET_SOCKET_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::io { class OutputStream; }
namespace java::lang { class String; }
namespace java::net { class InetAddress; }
namespace java::net { class Proxy; }
namespace java::net { class SocketAddress; }
namespace java::net { class SocketImplFactory; }
namespace java::net { class SocketOption; }
namespace java::nio::channels { class SocketChannel; }
namespace java::util { class Set; }

namespace java::net {

class Socket : public object_base<SCAPIX_META_STRING("java/net/Socket"),
	java::lang::Object,
	java::io::Closeable>
{
public:

	static ref<Socket> new_object();
	static ref<Socket> new_object(ref<java::net::Proxy> proxy);
	static ref<Socket> new_object(ref<java::lang::String> host, jint port);
	static ref<Socket> new_object(ref<java::net::InetAddress> address, jint port);
	static ref<Socket> new_object(ref<java::lang::String> host, jint port, ref<java::net::InetAddress> localAddr, jint localPort);
	static ref<Socket> new_object(ref<java::net::InetAddress> address, jint port, ref<java::net::InetAddress> localAddr, jint localPort);
	static ref<Socket> new_object(ref<java::lang::String> host, jint port, jboolean stream);
	static ref<Socket> new_object(ref<java::net::InetAddress> host, jint port, jboolean stream);
	void connect(ref<java::net::SocketAddress> endpoint);
	void connect(ref<java::net::SocketAddress> endpoint, jint timeout);
	void bind(ref<java::net::SocketAddress> bindpoint);
	ref<java::net::InetAddress> getInetAddress();
	ref<java::net::InetAddress> getLocalAddress();
	jint getPort();
	jint getLocalPort();
	ref<java::net::SocketAddress> getRemoteSocketAddress();
	ref<java::net::SocketAddress> getLocalSocketAddress();
	ref<java::nio::channels::SocketChannel> getChannel();
	ref<java::io::InputStream> getInputStream();
	ref<java::io::OutputStream> getOutputStream();
	void setTcpNoDelay(jboolean on);
	jboolean getTcpNoDelay();
	void setSoLinger(jboolean on, jint linger);
	jint getSoLinger();
	void sendUrgentData(jint data);
	void setOOBInline(jboolean on);
	jboolean getOOBInline();
	void setSoTimeout(jint timeout);
	jint getSoTimeout();
	void setSendBufferSize(jint size);
	jint getSendBufferSize();
	void setReceiveBufferSize(jint size);
	jint getReceiveBufferSize();
	void setKeepAlive(jboolean on);
	jboolean getKeepAlive();
	void setTrafficClass(jint tc);
	jint getTrafficClass();
	void setReuseAddress(jboolean on);
	jboolean getReuseAddress();
	void close();
	void shutdownInput();
	void shutdownOutput();
	ref<java::lang::String> toString();
	jboolean isConnected();
	jboolean isBound();
	jboolean isClosed();
	jboolean isInputShutdown();
	jboolean isOutputShutdown();
	static void setSocketImplFactory(ref<java::net::SocketImplFactory> fac);
	void setPerformancePreferences(jint connectionTime, jint latency, jint bandwidth);
	ref<java::net::Socket> setOption(ref<java::net::SocketOption> name, ref<java::lang::Object> value);
	ref<java::lang::Object> getOption(ref<java::net::SocketOption> name);
	ref<java::util::Set> supportedOptions();

protected:

	Socket(handle_type h) : base_(h) {}

};

} // namespace java::net
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/net/Proxy.h>
#include <scapix/java_api/java/net/SocketAddress.h>
#include <scapix/java_api/java/net/SocketImplFactory.h>
#include <scapix/java_api/java/net/SocketOption.h>
#include <scapix/java_api/java/nio/channels/SocketChannel.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace java::net {

inline ref<Socket> Socket::new_object() { return base_::new_object(); }
inline ref<Socket> Socket::new_object(ref<java::net::Proxy> proxy) { return base_::new_object(proxy); }
inline ref<Socket> Socket::new_object(ref<java::lang::String> host, jint port) { return base_::new_object(host, port); }
inline ref<Socket> Socket::new_object(ref<java::net::InetAddress> address, jint port) { return base_::new_object(address, port); }
inline ref<Socket> Socket::new_object(ref<java::lang::String> host, jint port, ref<java::net::InetAddress> localAddr, jint localPort) { return base_::new_object(host, port, localAddr, localPort); }
inline ref<Socket> Socket::new_object(ref<java::net::InetAddress> address, jint port, ref<java::net::InetAddress> localAddr, jint localPort) { return base_::new_object(address, port, localAddr, localPort); }
inline ref<Socket> Socket::new_object(ref<java::lang::String> host, jint port, jboolean stream) { return base_::new_object(host, port, stream); }
inline ref<Socket> Socket::new_object(ref<java::net::InetAddress> host, jint port, jboolean stream) { return base_::new_object(host, port, stream); }
inline void Socket::connect(ref<java::net::SocketAddress> endpoint) { return call_method<SCAPIX_META_STRING("connect"), void>(endpoint); }
inline void Socket::connect(ref<java::net::SocketAddress> endpoint, jint timeout) { return call_method<SCAPIX_META_STRING("connect"), void>(endpoint, timeout); }
inline void Socket::bind(ref<java::net::SocketAddress> bindpoint) { return call_method<SCAPIX_META_STRING("bind"), void>(bindpoint); }
inline ref<java::net::InetAddress> Socket::getInetAddress() { return call_method<SCAPIX_META_STRING("getInetAddress"), ref<java::net::InetAddress>>(); }
inline ref<java::net::InetAddress> Socket::getLocalAddress() { return call_method<SCAPIX_META_STRING("getLocalAddress"), ref<java::net::InetAddress>>(); }
inline jint Socket::getPort() { return call_method<SCAPIX_META_STRING("getPort"), jint>(); }
inline jint Socket::getLocalPort() { return call_method<SCAPIX_META_STRING("getLocalPort"), jint>(); }
inline ref<java::net::SocketAddress> Socket::getRemoteSocketAddress() { return call_method<SCAPIX_META_STRING("getRemoteSocketAddress"), ref<java::net::SocketAddress>>(); }
inline ref<java::net::SocketAddress> Socket::getLocalSocketAddress() { return call_method<SCAPIX_META_STRING("getLocalSocketAddress"), ref<java::net::SocketAddress>>(); }
inline ref<java::nio::channels::SocketChannel> Socket::getChannel() { return call_method<SCAPIX_META_STRING("getChannel"), ref<java::nio::channels::SocketChannel>>(); }
inline ref<java::io::InputStream> Socket::getInputStream() { return call_method<SCAPIX_META_STRING("getInputStream"), ref<java::io::InputStream>>(); }
inline ref<java::io::OutputStream> Socket::getOutputStream() { return call_method<SCAPIX_META_STRING("getOutputStream"), ref<java::io::OutputStream>>(); }
inline void Socket::setTcpNoDelay(jboolean on) { return call_method<SCAPIX_META_STRING("setTcpNoDelay"), void>(on); }
inline jboolean Socket::getTcpNoDelay() { return call_method<SCAPIX_META_STRING("getTcpNoDelay"), jboolean>(); }
inline void Socket::setSoLinger(jboolean on, jint linger) { return call_method<SCAPIX_META_STRING("setSoLinger"), void>(on, linger); }
inline jint Socket::getSoLinger() { return call_method<SCAPIX_META_STRING("getSoLinger"), jint>(); }
inline void Socket::sendUrgentData(jint data) { return call_method<SCAPIX_META_STRING("sendUrgentData"), void>(data); }
inline void Socket::setOOBInline(jboolean on) { return call_method<SCAPIX_META_STRING("setOOBInline"), void>(on); }
inline jboolean Socket::getOOBInline() { return call_method<SCAPIX_META_STRING("getOOBInline"), jboolean>(); }
inline void Socket::setSoTimeout(jint timeout) { return call_method<SCAPIX_META_STRING("setSoTimeout"), void>(timeout); }
inline jint Socket::getSoTimeout() { return call_method<SCAPIX_META_STRING("getSoTimeout"), jint>(); }
inline void Socket::setSendBufferSize(jint size) { return call_method<SCAPIX_META_STRING("setSendBufferSize"), void>(size); }
inline jint Socket::getSendBufferSize() { return call_method<SCAPIX_META_STRING("getSendBufferSize"), jint>(); }
inline void Socket::setReceiveBufferSize(jint size) { return call_method<SCAPIX_META_STRING("setReceiveBufferSize"), void>(size); }
inline jint Socket::getReceiveBufferSize() { return call_method<SCAPIX_META_STRING("getReceiveBufferSize"), jint>(); }
inline void Socket::setKeepAlive(jboolean on) { return call_method<SCAPIX_META_STRING("setKeepAlive"), void>(on); }
inline jboolean Socket::getKeepAlive() { return call_method<SCAPIX_META_STRING("getKeepAlive"), jboolean>(); }
inline void Socket::setTrafficClass(jint tc) { return call_method<SCAPIX_META_STRING("setTrafficClass"), void>(tc); }
inline jint Socket::getTrafficClass() { return call_method<SCAPIX_META_STRING("getTrafficClass"), jint>(); }
inline void Socket::setReuseAddress(jboolean on) { return call_method<SCAPIX_META_STRING("setReuseAddress"), void>(on); }
inline jboolean Socket::getReuseAddress() { return call_method<SCAPIX_META_STRING("getReuseAddress"), jboolean>(); }
inline void Socket::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void Socket::shutdownInput() { return call_method<SCAPIX_META_STRING("shutdownInput"), void>(); }
inline void Socket::shutdownOutput() { return call_method<SCAPIX_META_STRING("shutdownOutput"), void>(); }
inline ref<java::lang::String> Socket::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean Socket::isConnected() { return call_method<SCAPIX_META_STRING("isConnected"), jboolean>(); }
inline jboolean Socket::isBound() { return call_method<SCAPIX_META_STRING("isBound"), jboolean>(); }
inline jboolean Socket::isClosed() { return call_method<SCAPIX_META_STRING("isClosed"), jboolean>(); }
inline jboolean Socket::isInputShutdown() { return call_method<SCAPIX_META_STRING("isInputShutdown"), jboolean>(); }
inline jboolean Socket::isOutputShutdown() { return call_method<SCAPIX_META_STRING("isOutputShutdown"), jboolean>(); }
inline void Socket::setSocketImplFactory(ref<java::net::SocketImplFactory> fac) { return call_static_method<SCAPIX_META_STRING("setSocketImplFactory"), void>(fac); }
inline void Socket::setPerformancePreferences(jint connectionTime, jint latency, jint bandwidth) { return call_method<SCAPIX_META_STRING("setPerformancePreferences"), void>(connectionTime, latency, bandwidth); }
inline ref<java::net::Socket> Socket::setOption(ref<java::net::SocketOption> name, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("setOption"), ref<java::net::Socket>>(name, value); }
inline ref<java::lang::Object> Socket::getOption(ref<java::net::SocketOption> name) { return call_method<SCAPIX_META_STRING("getOption"), ref<java::lang::Object>>(name); }
inline ref<java::util::Set> Socket::supportedOptions() { return call_method<SCAPIX_META_STRING("supportedOptions"), ref<java::util::Set>>(); }

} // namespace java::net
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NET_SOCKET_H
