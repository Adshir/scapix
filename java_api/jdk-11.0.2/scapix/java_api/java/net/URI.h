// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_NET_URI_H
#define SCAPIX_JAVA_NET_URI_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::net { class URL; }

namespace java::net {

class URI : public object_base<SCAPIX_META_STRING("java/net/URI"),
	java::lang::Object,
	java::lang::Comparable,
	java::io::Serializable>
{
public:

	static ref<URI> new_object(ref<java::lang::String> str);
	static ref<URI> new_object(ref<java::lang::String> scheme, ref<java::lang::String> userInfo, ref<java::lang::String> host, jint port, ref<java::lang::String> path, ref<java::lang::String> query, ref<java::lang::String> fragment);
	static ref<URI> new_object(ref<java::lang::String> scheme, ref<java::lang::String> authority, ref<java::lang::String> path, ref<java::lang::String> query, ref<java::lang::String> fragment);
	static ref<URI> new_object(ref<java::lang::String> scheme, ref<java::lang::String> host, ref<java::lang::String> path, ref<java::lang::String> fragment);
	static ref<URI> new_object(ref<java::lang::String> scheme, ref<java::lang::String> ssp, ref<java::lang::String> fragment);
	static ref<java::net::URI> create(ref<java::lang::String> str);
	ref<java::net::URI> parseServerAuthority();
	ref<java::net::URI> normalize();
	ref<java::net::URI> resolve(ref<java::net::URI> uri);
	ref<java::net::URI> resolve(ref<java::lang::String> str);
	ref<java::net::URI> relativize(ref<java::net::URI> uri);
	ref<java::net::URL> toURL();
	ref<java::lang::String> getScheme();
	jboolean isAbsolute();
	jboolean isOpaque();
	ref<java::lang::String> getRawSchemeSpecificPart();
	ref<java::lang::String> getSchemeSpecificPart();
	ref<java::lang::String> getRawAuthority();
	ref<java::lang::String> getAuthority();
	ref<java::lang::String> getRawUserInfo();
	ref<java::lang::String> getUserInfo();
	ref<java::lang::String> getHost();
	jint getPort();
	ref<java::lang::String> getRawPath();
	ref<java::lang::String> getPath();
	ref<java::lang::String> getRawQuery();
	ref<java::lang::String> getQuery();
	ref<java::lang::String> getRawFragment();
	ref<java::lang::String> getFragment();
	jboolean equals(ref<java::lang::Object> ob);
	jint hashCode();
	jint compareTo(ref<java::net::URI> that);
	ref<java::lang::String> toString();
	ref<java::lang::String> toASCIIString();

protected:

	URI(handle_type h) : base_(h) {}

};

} // namespace java::net
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>

namespace scapix::java_api {
namespace java::net {

inline ref<URI> URI::new_object(ref<java::lang::String> str) { return base_::new_object(str); }
inline ref<URI> URI::new_object(ref<java::lang::String> scheme, ref<java::lang::String> userInfo, ref<java::lang::String> host, jint port, ref<java::lang::String> path, ref<java::lang::String> query, ref<java::lang::String> fragment) { return base_::new_object(scheme, userInfo, host, port, path, query, fragment); }
inline ref<URI> URI::new_object(ref<java::lang::String> scheme, ref<java::lang::String> authority, ref<java::lang::String> path, ref<java::lang::String> query, ref<java::lang::String> fragment) { return base_::new_object(scheme, authority, path, query, fragment); }
inline ref<URI> URI::new_object(ref<java::lang::String> scheme, ref<java::lang::String> host, ref<java::lang::String> path, ref<java::lang::String> fragment) { return base_::new_object(scheme, host, path, fragment); }
inline ref<URI> URI::new_object(ref<java::lang::String> scheme, ref<java::lang::String> ssp, ref<java::lang::String> fragment) { return base_::new_object(scheme, ssp, fragment); }
inline ref<java::net::URI> URI::create(ref<java::lang::String> str) { return call_static_method<SCAPIX_META_STRING("create"), ref<java::net::URI>>(str); }
inline ref<java::net::URI> URI::parseServerAuthority() { return call_method<SCAPIX_META_STRING("parseServerAuthority"), ref<java::net::URI>>(); }
inline ref<java::net::URI> URI::normalize() { return call_method<SCAPIX_META_STRING("normalize"), ref<java::net::URI>>(); }
inline ref<java::net::URI> URI::resolve(ref<java::net::URI> uri) { return call_method<SCAPIX_META_STRING("resolve"), ref<java::net::URI>>(uri); }
inline ref<java::net::URI> URI::resolve(ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("resolve"), ref<java::net::URI>>(str); }
inline ref<java::net::URI> URI::relativize(ref<java::net::URI> uri) { return call_method<SCAPIX_META_STRING("relativize"), ref<java::net::URI>>(uri); }
inline ref<java::net::URL> URI::toURL() { return call_method<SCAPIX_META_STRING("toURL"), ref<java::net::URL>>(); }
inline ref<java::lang::String> URI::getScheme() { return call_method<SCAPIX_META_STRING("getScheme"), ref<java::lang::String>>(); }
inline jboolean URI::isAbsolute() { return call_method<SCAPIX_META_STRING("isAbsolute"), jboolean>(); }
inline jboolean URI::isOpaque() { return call_method<SCAPIX_META_STRING("isOpaque"), jboolean>(); }
inline ref<java::lang::String> URI::getRawSchemeSpecificPart() { return call_method<SCAPIX_META_STRING("getRawSchemeSpecificPart"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URI::getSchemeSpecificPart() { return call_method<SCAPIX_META_STRING("getSchemeSpecificPart"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URI::getRawAuthority() { return call_method<SCAPIX_META_STRING("getRawAuthority"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URI::getAuthority() { return call_method<SCAPIX_META_STRING("getAuthority"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URI::getRawUserInfo() { return call_method<SCAPIX_META_STRING("getRawUserInfo"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URI::getUserInfo() { return call_method<SCAPIX_META_STRING("getUserInfo"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URI::getHost() { return call_method<SCAPIX_META_STRING("getHost"), ref<java::lang::String>>(); }
inline jint URI::getPort() { return call_method<SCAPIX_META_STRING("getPort"), jint>(); }
inline ref<java::lang::String> URI::getRawPath() { return call_method<SCAPIX_META_STRING("getRawPath"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URI::getPath() { return call_method<SCAPIX_META_STRING("getPath"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URI::getRawQuery() { return call_method<SCAPIX_META_STRING("getRawQuery"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URI::getQuery() { return call_method<SCAPIX_META_STRING("getQuery"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URI::getRawFragment() { return call_method<SCAPIX_META_STRING("getRawFragment"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URI::getFragment() { return call_method<SCAPIX_META_STRING("getFragment"), ref<java::lang::String>>(); }
inline jboolean URI::equals(ref<java::lang::Object> ob) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(ob); }
inline jint URI::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint URI::compareTo(ref<java::net::URI> that) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(that); }
inline ref<java::lang::String> URI::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URI::toASCIIString() { return call_method<SCAPIX_META_STRING("toASCIIString"), ref<java::lang::String>>(); }

} // namespace java::net
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NET_URI_H
