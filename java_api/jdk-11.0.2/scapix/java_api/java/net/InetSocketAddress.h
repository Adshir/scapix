// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/net/SocketAddress.h>

#ifndef SCAPIX_JAVA_NET_INETSOCKETADDRESS_H
#define SCAPIX_JAVA_NET_INETSOCKETADDRESS_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::net { class InetAddress; }

namespace java::net {

class InetSocketAddress : public object_base<SCAPIX_META_STRING("java/net/InetSocketAddress"),
	java::net::SocketAddress>
{
public:

	static ref<InetSocketAddress> new_object(jint port);
	static ref<InetSocketAddress> new_object(ref<java::net::InetAddress> addr, jint port);
	static ref<InetSocketAddress> new_object(ref<java::lang::String> hostname, jint port);
	static ref<java::net::InetSocketAddress> createUnresolved(ref<java::lang::String> host, jint port);
	jint getPort();
	ref<java::net::InetAddress> getAddress();
	ref<java::lang::String> getHostName();
	ref<java::lang::String> getHostString();
	jboolean isUnresolved();
	ref<java::lang::String> toString();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();

protected:

	InetSocketAddress(handle_type h) : base_(h) {}

};

} // namespace java::net
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>

namespace scapix::java_api {
namespace java::net {

inline ref<InetSocketAddress> InetSocketAddress::new_object(jint port) { return base_::new_object(port); }
inline ref<InetSocketAddress> InetSocketAddress::new_object(ref<java::net::InetAddress> addr, jint port) { return base_::new_object(addr, port); }
inline ref<InetSocketAddress> InetSocketAddress::new_object(ref<java::lang::String> hostname, jint port) { return base_::new_object(hostname, port); }
inline ref<java::net::InetSocketAddress> InetSocketAddress::createUnresolved(ref<java::lang::String> host, jint port) { return call_static_method<SCAPIX_META_STRING("createUnresolved"), ref<java::net::InetSocketAddress>>(host, port); }
inline jint InetSocketAddress::getPort() { return call_method<SCAPIX_META_STRING("getPort"), jint>(); }
inline ref<java::net::InetAddress> InetSocketAddress::getAddress() { return call_method<SCAPIX_META_STRING("getAddress"), ref<java::net::InetAddress>>(); }
inline ref<java::lang::String> InetSocketAddress::getHostName() { return call_method<SCAPIX_META_STRING("getHostName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> InetSocketAddress::getHostString() { return call_method<SCAPIX_META_STRING("getHostString"), ref<java::lang::String>>(); }
inline jboolean InetSocketAddress::isUnresolved() { return call_method<SCAPIX_META_STRING("isUnresolved"), jboolean>(); }
inline ref<java::lang::String> InetSocketAddress::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean InetSocketAddress::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint InetSocketAddress::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }

} // namespace java::net
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NET_INETSOCKETADDRESS_H
