// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/net/URLConnection.h>

#ifndef SCAPIX_JAVA_NET_HTTPURLCONNECTION_H
#define SCAPIX_JAVA_NET_HTTPURLCONNECTION_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::lang { class String; }
namespace java::net { class Authenticator; }
namespace java::security { class Permission; }

namespace java::net {

class HttpURLConnection : public object_base<SCAPIX_META_STRING("java/net/HttpURLConnection"),
	java::net::URLConnection>
{
public:

	static jint HTTP_OK_();
	static jint HTTP_CREATED_();
	static jint HTTP_ACCEPTED_();
	static jint HTTP_NOT_AUTHORITATIVE_();
	static jint HTTP_NO_CONTENT_();
	static jint HTTP_RESET_();
	static jint HTTP_PARTIAL_();
	static jint HTTP_MULT_CHOICE_();
	static jint HTTP_MOVED_PERM_();
	static jint HTTP_MOVED_TEMP_();
	static jint HTTP_SEE_OTHER_();
	static jint HTTP_NOT_MODIFIED_();
	static jint HTTP_USE_PROXY_();
	static jint HTTP_BAD_REQUEST_();
	static jint HTTP_UNAUTHORIZED_();
	static jint HTTP_PAYMENT_REQUIRED_();
	static jint HTTP_FORBIDDEN_();
	static jint HTTP_NOT_FOUND_();
	static jint HTTP_BAD_METHOD_();
	static jint HTTP_NOT_ACCEPTABLE_();
	static jint HTTP_PROXY_AUTH_();
	static jint HTTP_CLIENT_TIMEOUT_();
	static jint HTTP_CONFLICT_();
	static jint HTTP_GONE_();
	static jint HTTP_LENGTH_REQUIRED_();
	static jint HTTP_PRECON_FAILED_();
	static jint HTTP_ENTITY_TOO_LARGE_();
	static jint HTTP_REQ_TOO_LONG_();
	static jint HTTP_UNSUPPORTED_TYPE_();
	static jint HTTP_SERVER_ERROR_();
	static jint HTTP_INTERNAL_ERROR_();
	static jint HTTP_NOT_IMPLEMENTED_();
	static jint HTTP_BAD_GATEWAY_();
	static jint HTTP_UNAVAILABLE_();
	static jint HTTP_GATEWAY_TIMEOUT_();
	static jint HTTP_VERSION_();

	void setAuthenticator(ref<java::net::Authenticator> auth);
	ref<java::lang::String> getHeaderFieldKey(jint n);
	void setFixedLengthStreamingMode(jint contentLength);
	void setFixedLengthStreamingMode(jlong contentLength);
	void setChunkedStreamingMode(jint chunklen);
	ref<java::lang::String> getHeaderField(jint n);
	static void setFollowRedirects(jboolean set);
	static jboolean getFollowRedirects();
	void setInstanceFollowRedirects(jboolean followRedirects);
	jboolean getInstanceFollowRedirects();
	void setRequestMethod(ref<java::lang::String> method);
	ref<java::lang::String> getRequestMethod();
	jint getResponseCode();
	ref<java::lang::String> getResponseMessage();
	jlong getHeaderFieldDate(ref<java::lang::String> name, jlong Default);
	void disconnect();
	jboolean usingProxy();
	ref<java::security::Permission> getPermission();
	ref<java::io::InputStream> getErrorStream();

protected:

	HttpURLConnection(handle_type h) : base_(h) {}

};

} // namespace java::net
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/Authenticator.h>
#include <scapix/java_api/java/security/Permission.h>

namespace scapix::java_api {
namespace java::net {

inline jint HttpURLConnection::HTTP_OK_() { return get_static_field<SCAPIX_META_STRING("HTTP_OK"), jint>(); }
inline jint HttpURLConnection::HTTP_CREATED_() { return get_static_field<SCAPIX_META_STRING("HTTP_CREATED"), jint>(); }
inline jint HttpURLConnection::HTTP_ACCEPTED_() { return get_static_field<SCAPIX_META_STRING("HTTP_ACCEPTED"), jint>(); }
inline jint HttpURLConnection::HTTP_NOT_AUTHORITATIVE_() { return get_static_field<SCAPIX_META_STRING("HTTP_NOT_AUTHORITATIVE"), jint>(); }
inline jint HttpURLConnection::HTTP_NO_CONTENT_() { return get_static_field<SCAPIX_META_STRING("HTTP_NO_CONTENT"), jint>(); }
inline jint HttpURLConnection::HTTP_RESET_() { return get_static_field<SCAPIX_META_STRING("HTTP_RESET"), jint>(); }
inline jint HttpURLConnection::HTTP_PARTIAL_() { return get_static_field<SCAPIX_META_STRING("HTTP_PARTIAL"), jint>(); }
inline jint HttpURLConnection::HTTP_MULT_CHOICE_() { return get_static_field<SCAPIX_META_STRING("HTTP_MULT_CHOICE"), jint>(); }
inline jint HttpURLConnection::HTTP_MOVED_PERM_() { return get_static_field<SCAPIX_META_STRING("HTTP_MOVED_PERM"), jint>(); }
inline jint HttpURLConnection::HTTP_MOVED_TEMP_() { return get_static_field<SCAPIX_META_STRING("HTTP_MOVED_TEMP"), jint>(); }
inline jint HttpURLConnection::HTTP_SEE_OTHER_() { return get_static_field<SCAPIX_META_STRING("HTTP_SEE_OTHER"), jint>(); }
inline jint HttpURLConnection::HTTP_NOT_MODIFIED_() { return get_static_field<SCAPIX_META_STRING("HTTP_NOT_MODIFIED"), jint>(); }
inline jint HttpURLConnection::HTTP_USE_PROXY_() { return get_static_field<SCAPIX_META_STRING("HTTP_USE_PROXY"), jint>(); }
inline jint HttpURLConnection::HTTP_BAD_REQUEST_() { return get_static_field<SCAPIX_META_STRING("HTTP_BAD_REQUEST"), jint>(); }
inline jint HttpURLConnection::HTTP_UNAUTHORIZED_() { return get_static_field<SCAPIX_META_STRING("HTTP_UNAUTHORIZED"), jint>(); }
inline jint HttpURLConnection::HTTP_PAYMENT_REQUIRED_() { return get_static_field<SCAPIX_META_STRING("HTTP_PAYMENT_REQUIRED"), jint>(); }
inline jint HttpURLConnection::HTTP_FORBIDDEN_() { return get_static_field<SCAPIX_META_STRING("HTTP_FORBIDDEN"), jint>(); }
inline jint HttpURLConnection::HTTP_NOT_FOUND_() { return get_static_field<SCAPIX_META_STRING("HTTP_NOT_FOUND"), jint>(); }
inline jint HttpURLConnection::HTTP_BAD_METHOD_() { return get_static_field<SCAPIX_META_STRING("HTTP_BAD_METHOD"), jint>(); }
inline jint HttpURLConnection::HTTP_NOT_ACCEPTABLE_() { return get_static_field<SCAPIX_META_STRING("HTTP_NOT_ACCEPTABLE"), jint>(); }
inline jint HttpURLConnection::HTTP_PROXY_AUTH_() { return get_static_field<SCAPIX_META_STRING("HTTP_PROXY_AUTH"), jint>(); }
inline jint HttpURLConnection::HTTP_CLIENT_TIMEOUT_() { return get_static_field<SCAPIX_META_STRING("HTTP_CLIENT_TIMEOUT"), jint>(); }
inline jint HttpURLConnection::HTTP_CONFLICT_() { return get_static_field<SCAPIX_META_STRING("HTTP_CONFLICT"), jint>(); }
inline jint HttpURLConnection::HTTP_GONE_() { return get_static_field<SCAPIX_META_STRING("HTTP_GONE"), jint>(); }
inline jint HttpURLConnection::HTTP_LENGTH_REQUIRED_() { return get_static_field<SCAPIX_META_STRING("HTTP_LENGTH_REQUIRED"), jint>(); }
inline jint HttpURLConnection::HTTP_PRECON_FAILED_() { return get_static_field<SCAPIX_META_STRING("HTTP_PRECON_FAILED"), jint>(); }
inline jint HttpURLConnection::HTTP_ENTITY_TOO_LARGE_() { return get_static_field<SCAPIX_META_STRING("HTTP_ENTITY_TOO_LARGE"), jint>(); }
inline jint HttpURLConnection::HTTP_REQ_TOO_LONG_() { return get_static_field<SCAPIX_META_STRING("HTTP_REQ_TOO_LONG"), jint>(); }
inline jint HttpURLConnection::HTTP_UNSUPPORTED_TYPE_() { return get_static_field<SCAPIX_META_STRING("HTTP_UNSUPPORTED_TYPE"), jint>(); }
inline jint HttpURLConnection::HTTP_SERVER_ERROR_() { return get_static_field<SCAPIX_META_STRING("HTTP_SERVER_ERROR"), jint>(); }
inline jint HttpURLConnection::HTTP_INTERNAL_ERROR_() { return get_static_field<SCAPIX_META_STRING("HTTP_INTERNAL_ERROR"), jint>(); }
inline jint HttpURLConnection::HTTP_NOT_IMPLEMENTED_() { return get_static_field<SCAPIX_META_STRING("HTTP_NOT_IMPLEMENTED"), jint>(); }
inline jint HttpURLConnection::HTTP_BAD_GATEWAY_() { return get_static_field<SCAPIX_META_STRING("HTTP_BAD_GATEWAY"), jint>(); }
inline jint HttpURLConnection::HTTP_UNAVAILABLE_() { return get_static_field<SCAPIX_META_STRING("HTTP_UNAVAILABLE"), jint>(); }
inline jint HttpURLConnection::HTTP_GATEWAY_TIMEOUT_() { return get_static_field<SCAPIX_META_STRING("HTTP_GATEWAY_TIMEOUT"), jint>(); }
inline jint HttpURLConnection::HTTP_VERSION_() { return get_static_field<SCAPIX_META_STRING("HTTP_VERSION"), jint>(); }
inline void HttpURLConnection::setAuthenticator(ref<java::net::Authenticator> auth) { return call_method<SCAPIX_META_STRING("setAuthenticator"), void>(auth); }
inline ref<java::lang::String> HttpURLConnection::getHeaderFieldKey(jint n) { return call_method<SCAPIX_META_STRING("getHeaderFieldKey"), ref<java::lang::String>>(n); }
inline void HttpURLConnection::setFixedLengthStreamingMode(jint contentLength) { return call_method<SCAPIX_META_STRING("setFixedLengthStreamingMode"), void>(contentLength); }
inline void HttpURLConnection::setFixedLengthStreamingMode(jlong contentLength) { return call_method<SCAPIX_META_STRING("setFixedLengthStreamingMode"), void>(contentLength); }
inline void HttpURLConnection::setChunkedStreamingMode(jint chunklen) { return call_method<SCAPIX_META_STRING("setChunkedStreamingMode"), void>(chunklen); }
inline ref<java::lang::String> HttpURLConnection::getHeaderField(jint n) { return call_method<SCAPIX_META_STRING("getHeaderField"), ref<java::lang::String>>(n); }
inline void HttpURLConnection::setFollowRedirects(jboolean set) { return call_static_method<SCAPIX_META_STRING("setFollowRedirects"), void>(set); }
inline jboolean HttpURLConnection::getFollowRedirects() { return call_static_method<SCAPIX_META_STRING("getFollowRedirects"), jboolean>(); }
inline void HttpURLConnection::setInstanceFollowRedirects(jboolean followRedirects) { return call_method<SCAPIX_META_STRING("setInstanceFollowRedirects"), void>(followRedirects); }
inline jboolean HttpURLConnection::getInstanceFollowRedirects() { return call_method<SCAPIX_META_STRING("getInstanceFollowRedirects"), jboolean>(); }
inline void HttpURLConnection::setRequestMethod(ref<java::lang::String> method) { return call_method<SCAPIX_META_STRING("setRequestMethod"), void>(method); }
inline ref<java::lang::String> HttpURLConnection::getRequestMethod() { return call_method<SCAPIX_META_STRING("getRequestMethod"), ref<java::lang::String>>(); }
inline jint HttpURLConnection::getResponseCode() { return call_method<SCAPIX_META_STRING("getResponseCode"), jint>(); }
inline ref<java::lang::String> HttpURLConnection::getResponseMessage() { return call_method<SCAPIX_META_STRING("getResponseMessage"), ref<java::lang::String>>(); }
inline jlong HttpURLConnection::getHeaderFieldDate(ref<java::lang::String> name, jlong Default) { return call_method<SCAPIX_META_STRING("getHeaderFieldDate"), jlong>(name, Default); }
inline void HttpURLConnection::disconnect() { return call_method<SCAPIX_META_STRING("disconnect"), void>(); }
inline jboolean HttpURLConnection::usingProxy() { return call_method<SCAPIX_META_STRING("usingProxy"), jboolean>(); }
inline ref<java::security::Permission> HttpURLConnection::getPermission() { return call_method<SCAPIX_META_STRING("getPermission"), ref<java::security::Permission>>(); }
inline ref<java::io::InputStream> HttpURLConnection::getErrorStream() { return call_method<SCAPIX_META_STRING("getErrorStream"), ref<java::io::InputStream>>(); }

} // namespace java::net
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NET_HTTPURLCONNECTION_H
