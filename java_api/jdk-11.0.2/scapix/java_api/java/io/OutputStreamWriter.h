// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/Writer.h>

#ifndef SCAPIX_JAVA_IO_OUTPUTSTREAMWRITER_H
#define SCAPIX_JAVA_IO_OUTPUTSTREAMWRITER_H

namespace scapix::java_api {

namespace java::io { class OutputStream; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::nio::charset { class Charset; }
namespace java::nio::charset { class CharsetEncoder; }

namespace java::io {

class OutputStreamWriter : public object_base<SCAPIX_META_STRING("java/io/OutputStreamWriter"),
	java::io::Writer>
{
public:

	static ref<OutputStreamWriter> new_object(ref<java::io::OutputStream> out, ref<java::lang::String> charsetName);
	static ref<OutputStreamWriter> new_object(ref<java::io::OutputStream> out);
	static ref<OutputStreamWriter> new_object(ref<java::io::OutputStream> out, ref<java::nio::charset::Charset> cs);
	static ref<OutputStreamWriter> new_object(ref<java::io::OutputStream> out, ref<java::nio::charset::CharsetEncoder> enc);
	ref<java::lang::String> getEncoding();
	void write(jint c);
	void write(ref<link::java::array<jchar>> cbuf, jint off, jint len);
	void write(ref<java::lang::String> str, jint off, jint len);
	ref<java::io::Writer> append(ref<java::lang::CharSequence> csq, jint start, jint end);
	ref<java::io::Writer> append(ref<java::lang::CharSequence> csq);
	void flush();
	void close();

protected:

	OutputStreamWriter(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#include <scapix/java_api/java/nio/charset/CharsetEncoder.h>

namespace scapix::java_api {
namespace java::io {

inline ref<OutputStreamWriter> OutputStreamWriter::new_object(ref<java::io::OutputStream> out, ref<java::lang::String> charsetName) { return base_::new_object(out, charsetName); }
inline ref<OutputStreamWriter> OutputStreamWriter::new_object(ref<java::io::OutputStream> out) { return base_::new_object(out); }
inline ref<OutputStreamWriter> OutputStreamWriter::new_object(ref<java::io::OutputStream> out, ref<java::nio::charset::Charset> cs) { return base_::new_object(out, cs); }
inline ref<OutputStreamWriter> OutputStreamWriter::new_object(ref<java::io::OutputStream> out, ref<java::nio::charset::CharsetEncoder> enc) { return base_::new_object(out, enc); }
inline ref<java::lang::String> OutputStreamWriter::getEncoding() { return call_method<SCAPIX_META_STRING("getEncoding"), ref<java::lang::String>>(); }
inline void OutputStreamWriter::write(jint c) { return call_method<SCAPIX_META_STRING("write"), void>(c); }
inline void OutputStreamWriter::write(ref<link::java::array<jchar>> cbuf, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(cbuf, off, len); }
inline void OutputStreamWriter::write(ref<java::lang::String> str, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(str, off, len); }
inline ref<java::io::Writer> OutputStreamWriter::append(ref<java::lang::CharSequence> csq, jint start, jint end) { return call_method<SCAPIX_META_STRING("append"), ref<java::io::Writer>>(csq, start, end); }
inline ref<java::io::Writer> OutputStreamWriter::append(ref<java::lang::CharSequence> csq) { return call_method<SCAPIX_META_STRING("append"), ref<java::io::Writer>>(csq); }
inline void OutputStreamWriter::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline void OutputStreamWriter::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_OUTPUTSTREAMWRITER_H
