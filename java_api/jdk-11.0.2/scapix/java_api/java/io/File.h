// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_IO_FILE_H
#define SCAPIX_JAVA_IO_FILE_H

namespace scapix::java_api {

namespace java::io { class FileFilter; }
namespace java::io { class FilenameFilter; }
namespace java::lang { class String; }
namespace java::net { class URI; }
namespace java::net { class URL; }
namespace java::nio::file { class Path; }

namespace java::io {

class File : public object_base<SCAPIX_META_STRING("java/io/File"),
	java::lang::Object,
	java::io::Serializable,
	java::lang::Comparable>
{
public:

	static jchar separatorChar();
	static ref<java::lang::String> separator();
	static jchar pathSeparatorChar();
	static ref<java::lang::String> pathSeparator();

	static ref<File> new_object(ref<java::lang::String> pathname);
	static ref<File> new_object(ref<java::lang::String> parent, ref<java::lang::String> child);
	static ref<File> new_object(ref<java::io::File> parent, ref<java::lang::String> child);
	static ref<File> new_object(ref<java::net::URI> uri);
	ref<java::lang::String> getName();
	ref<java::lang::String> getParent();
	ref<java::io::File> getParentFile();
	ref<java::lang::String> getPath();
	jboolean isAbsolute();
	ref<java::lang::String> getAbsolutePath();
	ref<java::io::File> getAbsoluteFile();
	ref<java::lang::String> getCanonicalPath();
	ref<java::io::File> getCanonicalFile();
	ref<java::net::URL> toURL();
	ref<java::net::URI> toURI();
	jboolean canRead();
	jboolean canWrite();
	jboolean exists();
	jboolean isDirectory();
	jboolean isFile();
	jboolean isHidden();
	jlong lastModified();
	jlong length();
	jboolean createNewFile();
	jboolean delete_();
	void deleteOnExit();
	ref<link::java::array<java::lang::String>> list();
	ref<link::java::array<java::lang::String>> list(ref<java::io::FilenameFilter> filter);
	ref<link::java::array<java::io::File>> listFiles();
	ref<link::java::array<java::io::File>> listFiles(ref<java::io::FilenameFilter> filter);
	ref<link::java::array<java::io::File>> listFiles(ref<java::io::FileFilter> filter);
	jboolean mkdir();
	jboolean mkdirs();
	jboolean renameTo(ref<java::io::File> dest);
	jboolean setLastModified(jlong time);
	jboolean setReadOnly();
	jboolean setWritable(jboolean writable, jboolean ownerOnly);
	jboolean setWritable(jboolean writable);
	jboolean setReadable(jboolean readable, jboolean ownerOnly);
	jboolean setReadable(jboolean readable);
	jboolean setExecutable(jboolean executable, jboolean ownerOnly);
	jboolean setExecutable(jboolean executable);
	jboolean canExecute();
	static ref<link::java::array<java::io::File>> listRoots();
	jlong getTotalSpace();
	jlong getFreeSpace();
	jlong getUsableSpace();
	static ref<java::io::File> createTempFile(ref<java::lang::String> prefix, ref<java::lang::String> suffix, ref<java::io::File> directory);
	static ref<java::io::File> createTempFile(ref<java::lang::String> prefix, ref<java::lang::String> suffix);
	jint compareTo(ref<java::io::File> pathname);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();
	ref<java::nio::file::Path> toPath();

protected:

	File(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/FileFilter.h>
#include <scapix/java_api/java/io/FilenameFilter.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URI.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/nio/file/Path.h>

namespace scapix::java_api {
namespace java::io {

inline jchar File::separatorChar() { return get_static_field<SCAPIX_META_STRING("separatorChar"), jchar>(); }
inline ref<java::lang::String> File::separator() { return get_static_field<SCAPIX_META_STRING("separator"), ref<java::lang::String>>(); }
inline jchar File::pathSeparatorChar() { return get_static_field<SCAPIX_META_STRING("pathSeparatorChar"), jchar>(); }
inline ref<java::lang::String> File::pathSeparator() { return get_static_field<SCAPIX_META_STRING("pathSeparator"), ref<java::lang::String>>(); }
inline ref<File> File::new_object(ref<java::lang::String> pathname) { return base_::new_object(pathname); }
inline ref<File> File::new_object(ref<java::lang::String> parent, ref<java::lang::String> child) { return base_::new_object(parent, child); }
inline ref<File> File::new_object(ref<java::io::File> parent, ref<java::lang::String> child) { return base_::new_object(parent, child); }
inline ref<File> File::new_object(ref<java::net::URI> uri) { return base_::new_object(uri); }
inline ref<java::lang::String> File::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> File::getParent() { return call_method<SCAPIX_META_STRING("getParent"), ref<java::lang::String>>(); }
inline ref<java::io::File> File::getParentFile() { return call_method<SCAPIX_META_STRING("getParentFile"), ref<java::io::File>>(); }
inline ref<java::lang::String> File::getPath() { return call_method<SCAPIX_META_STRING("getPath"), ref<java::lang::String>>(); }
inline jboolean File::isAbsolute() { return call_method<SCAPIX_META_STRING("isAbsolute"), jboolean>(); }
inline ref<java::lang::String> File::getAbsolutePath() { return call_method<SCAPIX_META_STRING("getAbsolutePath"), ref<java::lang::String>>(); }
inline ref<java::io::File> File::getAbsoluteFile() { return call_method<SCAPIX_META_STRING("getAbsoluteFile"), ref<java::io::File>>(); }
inline ref<java::lang::String> File::getCanonicalPath() { return call_method<SCAPIX_META_STRING("getCanonicalPath"), ref<java::lang::String>>(); }
inline ref<java::io::File> File::getCanonicalFile() { return call_method<SCAPIX_META_STRING("getCanonicalFile"), ref<java::io::File>>(); }
inline ref<java::net::URL> File::toURL() { return call_method<SCAPIX_META_STRING("toURL"), ref<java::net::URL>>(); }
inline ref<java::net::URI> File::toURI() { return call_method<SCAPIX_META_STRING("toURI"), ref<java::net::URI>>(); }
inline jboolean File::canRead() { return call_method<SCAPIX_META_STRING("canRead"), jboolean>(); }
inline jboolean File::canWrite() { return call_method<SCAPIX_META_STRING("canWrite"), jboolean>(); }
inline jboolean File::exists() { return call_method<SCAPIX_META_STRING("exists"), jboolean>(); }
inline jboolean File::isDirectory() { return call_method<SCAPIX_META_STRING("isDirectory"), jboolean>(); }
inline jboolean File::isFile() { return call_method<SCAPIX_META_STRING("isFile"), jboolean>(); }
inline jboolean File::isHidden() { return call_method<SCAPIX_META_STRING("isHidden"), jboolean>(); }
inline jlong File::lastModified() { return call_method<SCAPIX_META_STRING("lastModified"), jlong>(); }
inline jlong File::length() { return call_method<SCAPIX_META_STRING("length"), jlong>(); }
inline jboolean File::createNewFile() { return call_method<SCAPIX_META_STRING("createNewFile"), jboolean>(); }
inline jboolean File::delete_() { return call_method<SCAPIX_META_STRING("delete"), jboolean>(); }
inline void File::deleteOnExit() { return call_method<SCAPIX_META_STRING("deleteOnExit"), void>(); }
inline ref<link::java::array<java::lang::String>> File::list() { return call_method<SCAPIX_META_STRING("list"), ref<link::java::array<java::lang::String>>>(); }
inline ref<link::java::array<java::lang::String>> File::list(ref<java::io::FilenameFilter> filter) { return call_method<SCAPIX_META_STRING("list"), ref<link::java::array<java::lang::String>>>(filter); }
inline ref<link::java::array<java::io::File>> File::listFiles() { return call_method<SCAPIX_META_STRING("listFiles"), ref<link::java::array<java::io::File>>>(); }
inline ref<link::java::array<java::io::File>> File::listFiles(ref<java::io::FilenameFilter> filter) { return call_method<SCAPIX_META_STRING("listFiles"), ref<link::java::array<java::io::File>>>(filter); }
inline ref<link::java::array<java::io::File>> File::listFiles(ref<java::io::FileFilter> filter) { return call_method<SCAPIX_META_STRING("listFiles"), ref<link::java::array<java::io::File>>>(filter); }
inline jboolean File::mkdir() { return call_method<SCAPIX_META_STRING("mkdir"), jboolean>(); }
inline jboolean File::mkdirs() { return call_method<SCAPIX_META_STRING("mkdirs"), jboolean>(); }
inline jboolean File::renameTo(ref<java::io::File> dest) { return call_method<SCAPIX_META_STRING("renameTo"), jboolean>(dest); }
inline jboolean File::setLastModified(jlong time) { return call_method<SCAPIX_META_STRING("setLastModified"), jboolean>(time); }
inline jboolean File::setReadOnly() { return call_method<SCAPIX_META_STRING("setReadOnly"), jboolean>(); }
inline jboolean File::setWritable(jboolean writable, jboolean ownerOnly) { return call_method<SCAPIX_META_STRING("setWritable"), jboolean>(writable, ownerOnly); }
inline jboolean File::setWritable(jboolean writable) { return call_method<SCAPIX_META_STRING("setWritable"), jboolean>(writable); }
inline jboolean File::setReadable(jboolean readable, jboolean ownerOnly) { return call_method<SCAPIX_META_STRING("setReadable"), jboolean>(readable, ownerOnly); }
inline jboolean File::setReadable(jboolean readable) { return call_method<SCAPIX_META_STRING("setReadable"), jboolean>(readable); }
inline jboolean File::setExecutable(jboolean executable, jboolean ownerOnly) { return call_method<SCAPIX_META_STRING("setExecutable"), jboolean>(executable, ownerOnly); }
inline jboolean File::setExecutable(jboolean executable) { return call_method<SCAPIX_META_STRING("setExecutable"), jboolean>(executable); }
inline jboolean File::canExecute() { return call_method<SCAPIX_META_STRING("canExecute"), jboolean>(); }
inline ref<link::java::array<java::io::File>> File::listRoots() { return call_static_method<SCAPIX_META_STRING("listRoots"), ref<link::java::array<java::io::File>>>(); }
inline jlong File::getTotalSpace() { return call_method<SCAPIX_META_STRING("getTotalSpace"), jlong>(); }
inline jlong File::getFreeSpace() { return call_method<SCAPIX_META_STRING("getFreeSpace"), jlong>(); }
inline jlong File::getUsableSpace() { return call_method<SCAPIX_META_STRING("getUsableSpace"), jlong>(); }
inline ref<java::io::File> File::createTempFile(ref<java::lang::String> prefix, ref<java::lang::String> suffix, ref<java::io::File> directory) { return call_static_method<SCAPIX_META_STRING("createTempFile"), ref<java::io::File>>(prefix, suffix, directory); }
inline ref<java::io::File> File::createTempFile(ref<java::lang::String> prefix, ref<java::lang::String> suffix) { return call_static_method<SCAPIX_META_STRING("createTempFile"), ref<java::io::File>>(prefix, suffix); }
inline jint File::compareTo(ref<java::io::File> pathname) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(pathname); }
inline jboolean File::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint File::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> File::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::nio::file::Path> File::toPath() { return call_method<SCAPIX_META_STRING("toPath"), ref<java::nio::file::Path>>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_FILE_H
