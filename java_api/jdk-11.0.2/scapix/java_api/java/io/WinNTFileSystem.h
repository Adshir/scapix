// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/FileSystem.h>

#ifndef SCAPIX_JAVA_IO_WINNTFILESYSTEM_H
#define SCAPIX_JAVA_IO_WINNTFILESYSTEM_H

namespace scapix::java_api {

namespace java::io { class File; }
namespace java::lang { class String; }

namespace java::io {

// private
class WinNTFileSystem : public object_base<SCAPIX_META_STRING("java/io/WinNTFileSystem"),
	java::io::FileSystem>
{
public:

	static ref<WinNTFileSystem> new_object();
	jchar getSeparator();
	jchar getPathSeparator();
	ref<java::lang::String> normalize(ref<java::lang::String> path);
	jint prefixLength(ref<java::lang::String> path);
	ref<java::lang::String> resolve(ref<java::lang::String> parent, ref<java::lang::String> child);
	ref<java::lang::String> getDefaultParent();
	ref<java::lang::String> fromURIPath(ref<java::lang::String> path);
	jboolean isAbsolute(ref<java::io::File> f);
	ref<java::lang::String> resolve(ref<java::io::File> f);
	ref<java::lang::String> canonicalize(ref<java::lang::String> path);
	jint getBooleanAttributes(ref<java::io::File> p1);
	jboolean checkAccess(ref<java::io::File> p1, jint p2);
	jlong getLastModifiedTime(ref<java::io::File> p1);
	jlong getLength(ref<java::io::File> p1);
	jboolean setPermission(ref<java::io::File> p1, jint p2, jboolean p3, jboolean p4);
	jboolean createFileExclusively(ref<java::lang::String> p1);
	ref<link::java::array<java::lang::String>> list(ref<java::io::File> p1);
	jboolean createDirectory(ref<java::io::File> p1);
	jboolean setLastModifiedTime(ref<java::io::File> p1, jlong p2);
	jboolean setReadOnly(ref<java::io::File> p1);
	jboolean delete_(ref<java::io::File> f);
	jboolean rename(ref<java::io::File> f1, ref<java::io::File> f2);
	ref<link::java::array<java::io::File>> listRoots();
	jlong getSpace(ref<java::io::File> f, jint t);
	jint getNameMax(ref<java::lang::String> path);
	jint compare(ref<java::io::File> f1, ref<java::io::File> f2);
	jint hashCode(ref<java::io::File> f);

protected:

	WinNTFileSystem(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::io {

inline ref<WinNTFileSystem> WinNTFileSystem::new_object() { return base_::new_object(); }
inline jchar WinNTFileSystem::getSeparator() { return call_method<SCAPIX_META_STRING("getSeparator"), jchar>(); }
inline jchar WinNTFileSystem::getPathSeparator() { return call_method<SCAPIX_META_STRING("getPathSeparator"), jchar>(); }
inline ref<java::lang::String> WinNTFileSystem::normalize(ref<java::lang::String> path) { return call_method<SCAPIX_META_STRING("normalize"), ref<java::lang::String>>(path); }
inline jint WinNTFileSystem::prefixLength(ref<java::lang::String> path) { return call_method<SCAPIX_META_STRING("prefixLength"), jint>(path); }
inline ref<java::lang::String> WinNTFileSystem::resolve(ref<java::lang::String> parent, ref<java::lang::String> child) { return call_method<SCAPIX_META_STRING("resolve"), ref<java::lang::String>>(parent, child); }
inline ref<java::lang::String> WinNTFileSystem::getDefaultParent() { return call_method<SCAPIX_META_STRING("getDefaultParent"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WinNTFileSystem::fromURIPath(ref<java::lang::String> path) { return call_method<SCAPIX_META_STRING("fromURIPath"), ref<java::lang::String>>(path); }
inline jboolean WinNTFileSystem::isAbsolute(ref<java::io::File> f) { return call_method<SCAPIX_META_STRING("isAbsolute"), jboolean>(f); }
inline ref<java::lang::String> WinNTFileSystem::resolve(ref<java::io::File> f) { return call_method<SCAPIX_META_STRING("resolve"), ref<java::lang::String>>(f); }
inline ref<java::lang::String> WinNTFileSystem::canonicalize(ref<java::lang::String> path) { return call_method<SCAPIX_META_STRING("canonicalize"), ref<java::lang::String>>(path); }
inline jint WinNTFileSystem::getBooleanAttributes(ref<java::io::File> p1) { return call_method<SCAPIX_META_STRING("getBooleanAttributes"), jint>(p1); }
inline jboolean WinNTFileSystem::checkAccess(ref<java::io::File> p1, jint p2) { return call_method<SCAPIX_META_STRING("checkAccess"), jboolean>(p1, p2); }
inline jlong WinNTFileSystem::getLastModifiedTime(ref<java::io::File> p1) { return call_method<SCAPIX_META_STRING("getLastModifiedTime"), jlong>(p1); }
inline jlong WinNTFileSystem::getLength(ref<java::io::File> p1) { return call_method<SCAPIX_META_STRING("getLength"), jlong>(p1); }
inline jboolean WinNTFileSystem::setPermission(ref<java::io::File> p1, jint p2, jboolean p3, jboolean p4) { return call_method<SCAPIX_META_STRING("setPermission"), jboolean>(p1, p2, p3, p4); }
inline jboolean WinNTFileSystem::createFileExclusively(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("createFileExclusively"), jboolean>(p1); }
inline ref<link::java::array<java::lang::String>> WinNTFileSystem::list(ref<java::io::File> p1) { return call_method<SCAPIX_META_STRING("list"), ref<link::java::array<java::lang::String>>>(p1); }
inline jboolean WinNTFileSystem::createDirectory(ref<java::io::File> p1) { return call_method<SCAPIX_META_STRING("createDirectory"), jboolean>(p1); }
inline jboolean WinNTFileSystem::setLastModifiedTime(ref<java::io::File> p1, jlong p2) { return call_method<SCAPIX_META_STRING("setLastModifiedTime"), jboolean>(p1, p2); }
inline jboolean WinNTFileSystem::setReadOnly(ref<java::io::File> p1) { return call_method<SCAPIX_META_STRING("setReadOnly"), jboolean>(p1); }
inline jboolean WinNTFileSystem::delete_(ref<java::io::File> f) { return call_method<SCAPIX_META_STRING("delete"), jboolean>(f); }
inline jboolean WinNTFileSystem::rename(ref<java::io::File> f1, ref<java::io::File> f2) { return call_method<SCAPIX_META_STRING("rename"), jboolean>(f1, f2); }
inline ref<link::java::array<java::io::File>> WinNTFileSystem::listRoots() { return call_method<SCAPIX_META_STRING("listRoots"), ref<link::java::array<java::io::File>>>(); }
inline jlong WinNTFileSystem::getSpace(ref<java::io::File> f, jint t) { return call_method<SCAPIX_META_STRING("getSpace"), jlong>(f, t); }
inline jint WinNTFileSystem::getNameMax(ref<java::lang::String> path) { return call_method<SCAPIX_META_STRING("getNameMax"), jint>(path); }
inline jint WinNTFileSystem::compare(ref<java::io::File> f1, ref<java::io::File> f2) { return call_method<SCAPIX_META_STRING("compare"), jint>(f1, f2); }
inline jint WinNTFileSystem::hashCode(ref<java::io::File> f) { return call_method<SCAPIX_META_STRING("hashCode"), jint>(f); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_WINNTFILESYSTEM_H
