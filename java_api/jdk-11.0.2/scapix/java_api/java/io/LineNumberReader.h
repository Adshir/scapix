// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/BufferedReader.h>

#ifndef SCAPIX_JAVA_IO_LINENUMBERREADER_H
#define SCAPIX_JAVA_IO_LINENUMBERREADER_H

namespace scapix::java_api {

namespace java::io { class Reader; }
namespace java::lang { class String; }

namespace java::io {

class LineNumberReader : public object_base<SCAPIX_META_STRING("java/io/LineNumberReader"),
	java::io::BufferedReader>
{
public:

	static ref<LineNumberReader> new_object(ref<java::io::Reader> in);
	static ref<LineNumberReader> new_object(ref<java::io::Reader> in, jint sz);
	void setLineNumber(jint lineNumber);
	jint getLineNumber();
	jint read();
	jint read(ref<link::java::array<jchar>> cbuf, jint off, jint len);
	ref<java::lang::String> readLine();
	jlong skip(jlong n);
	void mark(jint readAheadLimit);
	void reset();

protected:

	LineNumberReader(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::io {

inline ref<LineNumberReader> LineNumberReader::new_object(ref<java::io::Reader> in) { return base_::new_object(in); }
inline ref<LineNumberReader> LineNumberReader::new_object(ref<java::io::Reader> in, jint sz) { return base_::new_object(in, sz); }
inline void LineNumberReader::setLineNumber(jint lineNumber) { return call_method<SCAPIX_META_STRING("setLineNumber"), void>(lineNumber); }
inline jint LineNumberReader::getLineNumber() { return call_method<SCAPIX_META_STRING("getLineNumber"), jint>(); }
inline jint LineNumberReader::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint LineNumberReader::read(ref<link::java::array<jchar>> cbuf, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(cbuf, off, len); }
inline ref<java::lang::String> LineNumberReader::readLine() { return call_method<SCAPIX_META_STRING("readLine"), ref<java::lang::String>>(); }
inline jlong LineNumberReader::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), jlong>(n); }
inline void LineNumberReader::mark(jint readAheadLimit) { return call_method<SCAPIX_META_STRING("mark"), void>(readAheadLimit); }
inline void LineNumberReader::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_LINENUMBERREADER_H
