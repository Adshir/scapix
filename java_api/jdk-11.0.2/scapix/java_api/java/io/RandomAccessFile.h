// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/DataOutput.h>
#include <scapix/java_api/java/io/DataInput.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_IO_RANDOMACCESSFILE_H
#define SCAPIX_JAVA_IO_RANDOMACCESSFILE_H

namespace scapix::java_api {

namespace java::io { class File; }
namespace java::io { class FileDescriptor; }
namespace java::lang { class String; }
namespace java::nio::channels { class FileChannel; }

namespace java::io {

class RandomAccessFile : public object_base<SCAPIX_META_STRING("java/io/RandomAccessFile"),
	java::lang::Object,
	java::io::DataOutput,
	java::io::DataInput,
	java::io::Closeable>
{
public:

	static ref<RandomAccessFile> new_object(ref<java::lang::String> name, ref<java::lang::String> mode);
	static ref<RandomAccessFile> new_object(ref<java::io::File> file, ref<java::lang::String> mode);
	ref<java::io::FileDescriptor> getFD();
	ref<java::nio::channels::FileChannel> getChannel();
	jint read();
	jint read(ref<link::java::array<jbyte>> b, jint off, jint len);
	jint read(ref<link::java::array<jbyte>> b);
	void readFully(ref<link::java::array<jbyte>> b);
	void readFully(ref<link::java::array<jbyte>> b, jint off, jint len);
	jint skipBytes(jint n);
	void write(jint b);
	void write(ref<link::java::array<jbyte>> b);
	void write(ref<link::java::array<jbyte>> b, jint off, jint len);
	jlong getFilePointer();
	void seek(jlong pos);
	jlong length();
	void setLength(jlong p1);
	void close();
	jboolean readBoolean();
	jbyte readByte();
	jint readUnsignedByte();
	jshort readShort();
	jint readUnsignedShort();
	jchar readChar();
	jint readInt();
	jlong readLong();
	jfloat readFloat();
	jdouble readDouble();
	ref<java::lang::String> readLine();
	ref<java::lang::String> readUTF();
	void writeBoolean(jboolean v);
	void writeByte(jint v);
	void writeShort(jint v);
	void writeChar(jint v);
	void writeInt(jint v);
	void writeLong(jlong v);
	void writeFloat(jfloat v);
	void writeDouble(jdouble v);
	void writeBytes(ref<java::lang::String> s);
	void writeChars(ref<java::lang::String> s);
	void writeUTF(ref<java::lang::String> str);

protected:

	RandomAccessFile(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/channels/FileChannel.h>

namespace scapix::java_api {
namespace java::io {

inline ref<RandomAccessFile> RandomAccessFile::new_object(ref<java::lang::String> name, ref<java::lang::String> mode) { return base_::new_object(name, mode); }
inline ref<RandomAccessFile> RandomAccessFile::new_object(ref<java::io::File> file, ref<java::lang::String> mode) { return base_::new_object(file, mode); }
inline ref<java::io::FileDescriptor> RandomAccessFile::getFD() { return call_method<SCAPIX_META_STRING("getFD"), ref<java::io::FileDescriptor>>(); }
inline ref<java::nio::channels::FileChannel> RandomAccessFile::getChannel() { return call_method<SCAPIX_META_STRING("getChannel"), ref<java::nio::channels::FileChannel>>(); }
inline jint RandomAccessFile::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint RandomAccessFile::read(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(b, off, len); }
inline jint RandomAccessFile::read(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("read"), jint>(b); }
inline void RandomAccessFile::readFully(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("readFully"), void>(b); }
inline void RandomAccessFile::readFully(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("readFully"), void>(b, off, len); }
inline jint RandomAccessFile::skipBytes(jint n) { return call_method<SCAPIX_META_STRING("skipBytes"), jint>(n); }
inline void RandomAccessFile::write(jint b) { return call_method<SCAPIX_META_STRING("write"), void>(b); }
inline void RandomAccessFile::write(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("write"), void>(b); }
inline void RandomAccessFile::write(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(b, off, len); }
inline jlong RandomAccessFile::getFilePointer() { return call_method<SCAPIX_META_STRING("getFilePointer"), jlong>(); }
inline void RandomAccessFile::seek(jlong pos) { return call_method<SCAPIX_META_STRING("seek"), void>(pos); }
inline jlong RandomAccessFile::length() { return call_method<SCAPIX_META_STRING("length"), jlong>(); }
inline void RandomAccessFile::setLength(jlong p1) { return call_method<SCAPIX_META_STRING("setLength"), void>(p1); }
inline void RandomAccessFile::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jboolean RandomAccessFile::readBoolean() { return call_method<SCAPIX_META_STRING("readBoolean"), jboolean>(); }
inline jbyte RandomAccessFile::readByte() { return call_method<SCAPIX_META_STRING("readByte"), jbyte>(); }
inline jint RandomAccessFile::readUnsignedByte() { return call_method<SCAPIX_META_STRING("readUnsignedByte"), jint>(); }
inline jshort RandomAccessFile::readShort() { return call_method<SCAPIX_META_STRING("readShort"), jshort>(); }
inline jint RandomAccessFile::readUnsignedShort() { return call_method<SCAPIX_META_STRING("readUnsignedShort"), jint>(); }
inline jchar RandomAccessFile::readChar() { return call_method<SCAPIX_META_STRING("readChar"), jchar>(); }
inline jint RandomAccessFile::readInt() { return call_method<SCAPIX_META_STRING("readInt"), jint>(); }
inline jlong RandomAccessFile::readLong() { return call_method<SCAPIX_META_STRING("readLong"), jlong>(); }
inline jfloat RandomAccessFile::readFloat() { return call_method<SCAPIX_META_STRING("readFloat"), jfloat>(); }
inline jdouble RandomAccessFile::readDouble() { return call_method<SCAPIX_META_STRING("readDouble"), jdouble>(); }
inline ref<java::lang::String> RandomAccessFile::readLine() { return call_method<SCAPIX_META_STRING("readLine"), ref<java::lang::String>>(); }
inline ref<java::lang::String> RandomAccessFile::readUTF() { return call_method<SCAPIX_META_STRING("readUTF"), ref<java::lang::String>>(); }
inline void RandomAccessFile::writeBoolean(jboolean v) { return call_method<SCAPIX_META_STRING("writeBoolean"), void>(v); }
inline void RandomAccessFile::writeByte(jint v) { return call_method<SCAPIX_META_STRING("writeByte"), void>(v); }
inline void RandomAccessFile::writeShort(jint v) { return call_method<SCAPIX_META_STRING("writeShort"), void>(v); }
inline void RandomAccessFile::writeChar(jint v) { return call_method<SCAPIX_META_STRING("writeChar"), void>(v); }
inline void RandomAccessFile::writeInt(jint v) { return call_method<SCAPIX_META_STRING("writeInt"), void>(v); }
inline void RandomAccessFile::writeLong(jlong v) { return call_method<SCAPIX_META_STRING("writeLong"), void>(v); }
inline void RandomAccessFile::writeFloat(jfloat v) { return call_method<SCAPIX_META_STRING("writeFloat"), void>(v); }
inline void RandomAccessFile::writeDouble(jdouble v) { return call_method<SCAPIX_META_STRING("writeDouble"), void>(v); }
inline void RandomAccessFile::writeBytes(ref<java::lang::String> s) { return call_method<SCAPIX_META_STRING("writeBytes"), void>(s); }
inline void RandomAccessFile::writeChars(ref<java::lang::String> s) { return call_method<SCAPIX_META_STRING("writeChars"), void>(s); }
inline void RandomAccessFile::writeUTF(ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("writeUTF"), void>(str); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_RANDOMACCESSFILE_H
