// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_IO_DATAINPUT_H
#define SCAPIX_JAVA_IO_DATAINPUT_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace java::io {

class DataInput : public object_base<SCAPIX_META_STRING("java/io/DataInput"),
	java::lang::Object>
{
public:

	void readFully(ref<link::java::array<jbyte>> p1);
	void readFully(ref<link::java::array<jbyte>> p1, jint p2, jint p3);
	jint skipBytes(jint p1);
	jboolean readBoolean();
	jbyte readByte();
	jint readUnsignedByte();
	jshort readShort();
	jint readUnsignedShort();
	jchar readChar();
	jint readInt();
	jlong readLong();
	jfloat readFloat();
	jdouble readDouble();
	ref<java::lang::String> readLine();
	ref<java::lang::String> readUTF();

protected:

	DataInput(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::io {

inline void DataInput::readFully(ref<link::java::array<jbyte>> p1) { return call_method<SCAPIX_META_STRING("readFully"), void>(p1); }
inline void DataInput::readFully(ref<link::java::array<jbyte>> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("readFully"), void>(p1, p2, p3); }
inline jint DataInput::skipBytes(jint p1) { return call_method<SCAPIX_META_STRING("skipBytes"), jint>(p1); }
inline jboolean DataInput::readBoolean() { return call_method<SCAPIX_META_STRING("readBoolean"), jboolean>(); }
inline jbyte DataInput::readByte() { return call_method<SCAPIX_META_STRING("readByte"), jbyte>(); }
inline jint DataInput::readUnsignedByte() { return call_method<SCAPIX_META_STRING("readUnsignedByte"), jint>(); }
inline jshort DataInput::readShort() { return call_method<SCAPIX_META_STRING("readShort"), jshort>(); }
inline jint DataInput::readUnsignedShort() { return call_method<SCAPIX_META_STRING("readUnsignedShort"), jint>(); }
inline jchar DataInput::readChar() { return call_method<SCAPIX_META_STRING("readChar"), jchar>(); }
inline jint DataInput::readInt() { return call_method<SCAPIX_META_STRING("readInt"), jint>(); }
inline jlong DataInput::readLong() { return call_method<SCAPIX_META_STRING("readLong"), jlong>(); }
inline jfloat DataInput::readFloat() { return call_method<SCAPIX_META_STRING("readFloat"), jfloat>(); }
inline jdouble DataInput::readDouble() { return call_method<SCAPIX_META_STRING("readDouble"), jdouble>(); }
inline ref<java::lang::String> DataInput::readLine() { return call_method<SCAPIX_META_STRING("readLine"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DataInput::readUTF() { return call_method<SCAPIX_META_STRING("readUTF"), ref<java::lang::String>>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_DATAINPUT_H
