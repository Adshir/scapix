// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/InputStream.h>

#ifndef SCAPIX_JAVA_IO_FILTERINPUTSTREAM_H
#define SCAPIX_JAVA_IO_FILTERINPUTSTREAM_H

namespace scapix::java_api {
namespace java::io {

class FilterInputStream : public object_base<SCAPIX_META_STRING("java/io/FilterInputStream"),
	java::io::InputStream>
{
public:

	jint read();
	jint read(ref<link::java::array<jbyte>> b);
	jint read(ref<link::java::array<jbyte>> b, jint off, jint len);
	jlong skip(jlong n);
	jint available();
	void close();
	void mark(jint readlimit);
	void reset();
	jboolean markSupported();

protected:

	FilterInputStream(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api


namespace scapix::java_api {
namespace java::io {

inline jint FilterInputStream::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint FilterInputStream::read(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("read"), jint>(b); }
inline jint FilterInputStream::read(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(b, off, len); }
inline jlong FilterInputStream::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), jlong>(n); }
inline jint FilterInputStream::available() { return call_method<SCAPIX_META_STRING("available"), jint>(); }
inline void FilterInputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void FilterInputStream::mark(jint readlimit) { return call_method<SCAPIX_META_STRING("mark"), void>(readlimit); }
inline void FilterInputStream::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline jboolean FilterInputStream::markSupported() { return call_method<SCAPIX_META_STRING("markSupported"), jboolean>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_FILTERINPUTSTREAM_H
