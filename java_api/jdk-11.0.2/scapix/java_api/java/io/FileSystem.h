// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_IO_FILESYSTEM_H
#define SCAPIX_JAVA_IO_FILESYSTEM_H

namespace scapix::java_api {

namespace java::io { class File; }
namespace java::lang { class String; }

namespace java::io {

// private
class FileSystem : public object_base<SCAPIX_META_STRING("java/io/FileSystem"),
	java::lang::Object>
{
public:

	static jint BA_EXISTS_();
	static jint BA_REGULAR_();
	static jint BA_DIRECTORY_();
	static jint BA_HIDDEN_();
	static jint ACCESS_READ_();
	static jint ACCESS_WRITE_();
	static jint ACCESS_EXECUTE_();
	static jint SPACE_TOTAL_();
	static jint SPACE_FREE_();
	static jint SPACE_USABLE_();

	jchar getSeparator();
	jchar getPathSeparator();
	ref<java::lang::String> normalize(ref<java::lang::String> p1);
	jint prefixLength(ref<java::lang::String> p1);
	ref<java::lang::String> resolve(ref<java::lang::String> p1, ref<java::lang::String> p2);
	ref<java::lang::String> getDefaultParent();
	ref<java::lang::String> fromURIPath(ref<java::lang::String> p1);
	jboolean isAbsolute(ref<java::io::File> p1);
	ref<java::lang::String> resolve(ref<java::io::File> p1);
	ref<java::lang::String> canonicalize(ref<java::lang::String> p1);
	jint getBooleanAttributes(ref<java::io::File> p1);
	jboolean checkAccess(ref<java::io::File> p1, jint p2);
	jboolean setPermission(ref<java::io::File> p1, jint p2, jboolean p3, jboolean p4);
	jlong getLastModifiedTime(ref<java::io::File> p1);
	jlong getLength(ref<java::io::File> p1);
	jboolean createFileExclusively(ref<java::lang::String> p1);
	jboolean delete_(ref<java::io::File> p1);
	ref<link::java::array<java::lang::String>> list(ref<java::io::File> p1);
	jboolean createDirectory(ref<java::io::File> p1);
	jboolean rename(ref<java::io::File> p1, ref<java::io::File> p2);
	jboolean setLastModifiedTime(ref<java::io::File> p1, jlong p2);
	jboolean setReadOnly(ref<java::io::File> p1);
	ref<link::java::array<java::io::File>> listRoots();
	jlong getSpace(ref<java::io::File> p1, jint p2);
	jint getNameMax(ref<java::lang::String> p1);
	jint compare(ref<java::io::File> p1, ref<java::io::File> p2);
	jint hashCode(ref<java::io::File> p1);

protected:

	FileSystem(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::io {

inline jint FileSystem::BA_EXISTS_() { return get_static_field<SCAPIX_META_STRING("BA_EXISTS"), jint>(); }
inline jint FileSystem::BA_REGULAR_() { return get_static_field<SCAPIX_META_STRING("BA_REGULAR"), jint>(); }
inline jint FileSystem::BA_DIRECTORY_() { return get_static_field<SCAPIX_META_STRING("BA_DIRECTORY"), jint>(); }
inline jint FileSystem::BA_HIDDEN_() { return get_static_field<SCAPIX_META_STRING("BA_HIDDEN"), jint>(); }
inline jint FileSystem::ACCESS_READ_() { return get_static_field<SCAPIX_META_STRING("ACCESS_READ"), jint>(); }
inline jint FileSystem::ACCESS_WRITE_() { return get_static_field<SCAPIX_META_STRING("ACCESS_WRITE"), jint>(); }
inline jint FileSystem::ACCESS_EXECUTE_() { return get_static_field<SCAPIX_META_STRING("ACCESS_EXECUTE"), jint>(); }
inline jint FileSystem::SPACE_TOTAL_() { return get_static_field<SCAPIX_META_STRING("SPACE_TOTAL"), jint>(); }
inline jint FileSystem::SPACE_FREE_() { return get_static_field<SCAPIX_META_STRING("SPACE_FREE"), jint>(); }
inline jint FileSystem::SPACE_USABLE_() { return get_static_field<SCAPIX_META_STRING("SPACE_USABLE"), jint>(); }
inline jchar FileSystem::getSeparator() { return call_method<SCAPIX_META_STRING("getSeparator"), jchar>(); }
inline jchar FileSystem::getPathSeparator() { return call_method<SCAPIX_META_STRING("getPathSeparator"), jchar>(); }
inline ref<java::lang::String> FileSystem::normalize(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("normalize"), ref<java::lang::String>>(p1); }
inline jint FileSystem::prefixLength(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("prefixLength"), jint>(p1); }
inline ref<java::lang::String> FileSystem::resolve(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("resolve"), ref<java::lang::String>>(p1, p2); }
inline ref<java::lang::String> FileSystem::getDefaultParent() { return call_method<SCAPIX_META_STRING("getDefaultParent"), ref<java::lang::String>>(); }
inline ref<java::lang::String> FileSystem::fromURIPath(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("fromURIPath"), ref<java::lang::String>>(p1); }
inline jboolean FileSystem::isAbsolute(ref<java::io::File> p1) { return call_method<SCAPIX_META_STRING("isAbsolute"), jboolean>(p1); }
inline ref<java::lang::String> FileSystem::resolve(ref<java::io::File> p1) { return call_method<SCAPIX_META_STRING("resolve"), ref<java::lang::String>>(p1); }
inline ref<java::lang::String> FileSystem::canonicalize(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("canonicalize"), ref<java::lang::String>>(p1); }
inline jint FileSystem::getBooleanAttributes(ref<java::io::File> p1) { return call_method<SCAPIX_META_STRING("getBooleanAttributes"), jint>(p1); }
inline jboolean FileSystem::checkAccess(ref<java::io::File> p1, jint p2) { return call_method<SCAPIX_META_STRING("checkAccess"), jboolean>(p1, p2); }
inline jboolean FileSystem::setPermission(ref<java::io::File> p1, jint p2, jboolean p3, jboolean p4) { return call_method<SCAPIX_META_STRING("setPermission"), jboolean>(p1, p2, p3, p4); }
inline jlong FileSystem::getLastModifiedTime(ref<java::io::File> p1) { return call_method<SCAPIX_META_STRING("getLastModifiedTime"), jlong>(p1); }
inline jlong FileSystem::getLength(ref<java::io::File> p1) { return call_method<SCAPIX_META_STRING("getLength"), jlong>(p1); }
inline jboolean FileSystem::createFileExclusively(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("createFileExclusively"), jboolean>(p1); }
inline jboolean FileSystem::delete_(ref<java::io::File> p1) { return call_method<SCAPIX_META_STRING("delete"), jboolean>(p1); }
inline ref<link::java::array<java::lang::String>> FileSystem::list(ref<java::io::File> p1) { return call_method<SCAPIX_META_STRING("list"), ref<link::java::array<java::lang::String>>>(p1); }
inline jboolean FileSystem::createDirectory(ref<java::io::File> p1) { return call_method<SCAPIX_META_STRING("createDirectory"), jboolean>(p1); }
inline jboolean FileSystem::rename(ref<java::io::File> p1, ref<java::io::File> p2) { return call_method<SCAPIX_META_STRING("rename"), jboolean>(p1, p2); }
inline jboolean FileSystem::setLastModifiedTime(ref<java::io::File> p1, jlong p2) { return call_method<SCAPIX_META_STRING("setLastModifiedTime"), jboolean>(p1, p2); }
inline jboolean FileSystem::setReadOnly(ref<java::io::File> p1) { return call_method<SCAPIX_META_STRING("setReadOnly"), jboolean>(p1); }
inline ref<link::java::array<java::io::File>> FileSystem::listRoots() { return call_method<SCAPIX_META_STRING("listRoots"), ref<link::java::array<java::io::File>>>(); }
inline jlong FileSystem::getSpace(ref<java::io::File> p1, jint p2) { return call_method<SCAPIX_META_STRING("getSpace"), jlong>(p1, p2); }
inline jint FileSystem::getNameMax(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getNameMax"), jint>(p1); }
inline jint FileSystem::compare(ref<java::io::File> p1, ref<java::io::File> p2) { return call_method<SCAPIX_META_STRING("compare"), jint>(p1, p2); }
inline jint FileSystem::hashCode(ref<java::io::File> p1) { return call_method<SCAPIX_META_STRING("hashCode"), jint>(p1); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_FILESYSTEM_H
