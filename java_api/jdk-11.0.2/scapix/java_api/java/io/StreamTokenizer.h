// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_IO_STREAMTOKENIZER_H
#define SCAPIX_JAVA_IO_STREAMTOKENIZER_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::io { class Reader; }
namespace java::lang { class String; }

namespace java::io {

class StreamTokenizer : public object_base<SCAPIX_META_STRING("java/io/StreamTokenizer"),
	java::lang::Object>
{
public:

	jint ttype();
	void ttype(jint);
	static jint TT_EOF_();
	static jint TT_EOL_();
	static jint TT_NUMBER_();
	static jint TT_WORD_();
	ref<java::lang::String> sval();
	void sval(ref<java::lang::String>);
	jdouble nval();
	void nval(jdouble);

	static ref<StreamTokenizer> new_object(ref<java::io::InputStream> is);
	static ref<StreamTokenizer> new_object(ref<java::io::Reader> r);
	void resetSyntax();
	void wordChars(jint low, jint hi);
	void whitespaceChars(jint low, jint hi);
	void ordinaryChars(jint low, jint hi);
	void ordinaryChar(jint ch);
	void commentChar(jint ch);
	void quoteChar(jint ch);
	void parseNumbers();
	void eolIsSignificant(jboolean flag);
	void slashStarComments(jboolean flag);
	void slashSlashComments(jboolean flag);
	void lowerCaseMode(jboolean fl);
	jint nextToken();
	void pushBack();
	jint lineno();
	ref<java::lang::String> toString();

protected:

	StreamTokenizer(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::io {

inline jint StreamTokenizer::ttype() { return get_field<SCAPIX_META_STRING("ttype"), jint>(); }
inline void StreamTokenizer::ttype(jint v) { set_field<SCAPIX_META_STRING("ttype"), jint>(v); }
inline jint StreamTokenizer::TT_EOF_() { return get_static_field<SCAPIX_META_STRING("TT_EOF"), jint>(); }
inline jint StreamTokenizer::TT_EOL_() { return get_static_field<SCAPIX_META_STRING("TT_EOL"), jint>(); }
inline jint StreamTokenizer::TT_NUMBER_() { return get_static_field<SCAPIX_META_STRING("TT_NUMBER"), jint>(); }
inline jint StreamTokenizer::TT_WORD_() { return get_static_field<SCAPIX_META_STRING("TT_WORD"), jint>(); }
inline ref<java::lang::String> StreamTokenizer::sval() { return get_field<SCAPIX_META_STRING("sval"), ref<java::lang::String>>(); }
inline void StreamTokenizer::sval(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("sval"), ref<java::lang::String>>(v); }
inline jdouble StreamTokenizer::nval() { return get_field<SCAPIX_META_STRING("nval"), jdouble>(); }
inline void StreamTokenizer::nval(jdouble v) { set_field<SCAPIX_META_STRING("nval"), jdouble>(v); }
inline ref<StreamTokenizer> StreamTokenizer::new_object(ref<java::io::InputStream> is) { return base_::new_object(is); }
inline ref<StreamTokenizer> StreamTokenizer::new_object(ref<java::io::Reader> r) { return base_::new_object(r); }
inline void StreamTokenizer::resetSyntax() { return call_method<SCAPIX_META_STRING("resetSyntax"), void>(); }
inline void StreamTokenizer::wordChars(jint low, jint hi) { return call_method<SCAPIX_META_STRING("wordChars"), void>(low, hi); }
inline void StreamTokenizer::whitespaceChars(jint low, jint hi) { return call_method<SCAPIX_META_STRING("whitespaceChars"), void>(low, hi); }
inline void StreamTokenizer::ordinaryChars(jint low, jint hi) { return call_method<SCAPIX_META_STRING("ordinaryChars"), void>(low, hi); }
inline void StreamTokenizer::ordinaryChar(jint ch) { return call_method<SCAPIX_META_STRING("ordinaryChar"), void>(ch); }
inline void StreamTokenizer::commentChar(jint ch) { return call_method<SCAPIX_META_STRING("commentChar"), void>(ch); }
inline void StreamTokenizer::quoteChar(jint ch) { return call_method<SCAPIX_META_STRING("quoteChar"), void>(ch); }
inline void StreamTokenizer::parseNumbers() { return call_method<SCAPIX_META_STRING("parseNumbers"), void>(); }
inline void StreamTokenizer::eolIsSignificant(jboolean flag) { return call_method<SCAPIX_META_STRING("eolIsSignificant"), void>(flag); }
inline void StreamTokenizer::slashStarComments(jboolean flag) { return call_method<SCAPIX_META_STRING("slashStarComments"), void>(flag); }
inline void StreamTokenizer::slashSlashComments(jboolean flag) { return call_method<SCAPIX_META_STRING("slashSlashComments"), void>(flag); }
inline void StreamTokenizer::lowerCaseMode(jboolean fl) { return call_method<SCAPIX_META_STRING("lowerCaseMode"), void>(fl); }
inline jint StreamTokenizer::nextToken() { return call_method<SCAPIX_META_STRING("nextToken"), jint>(); }
inline void StreamTokenizer::pushBack() { return call_method<SCAPIX_META_STRING("pushBack"), void>(); }
inline jint StreamTokenizer::lineno() { return call_method<SCAPIX_META_STRING("lineno"), jint>(); }
inline ref<java::lang::String> StreamTokenizer::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_STREAMTOKENIZER_H
