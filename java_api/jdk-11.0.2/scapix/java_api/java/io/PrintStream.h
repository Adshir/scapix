// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/FilterOutputStream.h>
#include <scapix/java_api/java/lang/Appendable.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_IO_PRINTSTREAM_H
#define SCAPIX_JAVA_IO_PRINTSTREAM_H

namespace scapix::java_api {

namespace java::io { class File; }
namespace java::io { class OutputStream; }
namespace java::lang { class CharSequence; }
namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::nio::charset { class Charset; }
namespace java::util { class Locale; }

namespace java::io {

class PrintStream : public object_base<SCAPIX_META_STRING("java/io/PrintStream"),
	java::io::FilterOutputStream,
	java::lang::Appendable,
	java::io::Closeable>
{
public:

	static ref<PrintStream> new_object(ref<java::io::OutputStream> out);
	static ref<PrintStream> new_object(ref<java::io::OutputStream> out, jboolean autoFlush);
	static ref<PrintStream> new_object(ref<java::io::OutputStream> out, jboolean autoFlush, ref<java::lang::String> encoding);
	static ref<PrintStream> new_object(ref<java::io::OutputStream> out, jboolean autoFlush, ref<java::nio::charset::Charset> charset);
	static ref<PrintStream> new_object(ref<java::lang::String> fileName);
	static ref<PrintStream> new_object(ref<java::lang::String> fileName, ref<java::lang::String> csn);
	static ref<PrintStream> new_object(ref<java::lang::String> fileName, ref<java::nio::charset::Charset> charset);
	static ref<PrintStream> new_object(ref<java::io::File> file);
	static ref<PrintStream> new_object(ref<java::io::File> file, ref<java::lang::String> csn);
	static ref<PrintStream> new_object(ref<java::io::File> file, ref<java::nio::charset::Charset> charset);
	void flush();
	void close();
	jboolean checkError();
	void write(jint b);
	void write(ref<link::java::array<jbyte>> buf, jint off, jint len);
	void print(jboolean b);
	void print(jchar c);
	void print(jint i);
	void print(jlong l);
	void print(jfloat f);
	void print(jdouble d);
	void print(ref<link::java::array<jchar>> s);
	void print(ref<java::lang::String> s);
	void print(ref<java::lang::Object> obj);
	void println();
	void println(jboolean x);
	void println(jchar x);
	void println(jint x);
	void println(jlong x);
	void println(jfloat x);
	void println(jdouble x);
	void println(ref<link::java::array<jchar>> x);
	void println(ref<java::lang::String> x);
	void println(ref<java::lang::Object> x);
	ref<java::io::PrintStream> printf(ref<java::lang::String> format, ref<link::java::array<java::lang::Object>> args);
	ref<java::io::PrintStream> printf(ref<java::util::Locale> l, ref<java::lang::String> format, ref<link::java::array<java::lang::Object>> args);
	ref<java::io::PrintStream> format(ref<java::lang::String> format, ref<link::java::array<java::lang::Object>> args);
	ref<java::io::PrintStream> format(ref<java::util::Locale> l, ref<java::lang::String> format, ref<link::java::array<java::lang::Object>> args);
	ref<java::io::PrintStream> append(ref<java::lang::CharSequence> csq);
	ref<java::io::PrintStream> append(ref<java::lang::CharSequence> csq, jint start, jint end);
	ref<java::io::PrintStream> append(jchar c);

protected:

	PrintStream(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#include <scapix/java_api/java/util/Locale.h>

namespace scapix::java_api {
namespace java::io {

inline ref<PrintStream> PrintStream::new_object(ref<java::io::OutputStream> out) { return base_::new_object(out); }
inline ref<PrintStream> PrintStream::new_object(ref<java::io::OutputStream> out, jboolean autoFlush) { return base_::new_object(out, autoFlush); }
inline ref<PrintStream> PrintStream::new_object(ref<java::io::OutputStream> out, jboolean autoFlush, ref<java::lang::String> encoding) { return base_::new_object(out, autoFlush, encoding); }
inline ref<PrintStream> PrintStream::new_object(ref<java::io::OutputStream> out, jboolean autoFlush, ref<java::nio::charset::Charset> charset) { return base_::new_object(out, autoFlush, charset); }
inline ref<PrintStream> PrintStream::new_object(ref<java::lang::String> fileName) { return base_::new_object(fileName); }
inline ref<PrintStream> PrintStream::new_object(ref<java::lang::String> fileName, ref<java::lang::String> csn) { return base_::new_object(fileName, csn); }
inline ref<PrintStream> PrintStream::new_object(ref<java::lang::String> fileName, ref<java::nio::charset::Charset> charset) { return base_::new_object(fileName, charset); }
inline ref<PrintStream> PrintStream::new_object(ref<java::io::File> file) { return base_::new_object(file); }
inline ref<PrintStream> PrintStream::new_object(ref<java::io::File> file, ref<java::lang::String> csn) { return base_::new_object(file, csn); }
inline ref<PrintStream> PrintStream::new_object(ref<java::io::File> file, ref<java::nio::charset::Charset> charset) { return base_::new_object(file, charset); }
inline void PrintStream::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline void PrintStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jboolean PrintStream::checkError() { return call_method<SCAPIX_META_STRING("checkError"), jboolean>(); }
inline void PrintStream::write(jint b) { return call_method<SCAPIX_META_STRING("write"), void>(b); }
inline void PrintStream::write(ref<link::java::array<jbyte>> buf, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(buf, off, len); }
inline void PrintStream::print(jboolean b) { return call_method<SCAPIX_META_STRING("print"), void>(b); }
inline void PrintStream::print(jchar c) { return call_method<SCAPIX_META_STRING("print"), void>(c); }
inline void PrintStream::print(jint i) { return call_method<SCAPIX_META_STRING("print"), void>(i); }
inline void PrintStream::print(jlong l) { return call_method<SCAPIX_META_STRING("print"), void>(l); }
inline void PrintStream::print(jfloat f) { return call_method<SCAPIX_META_STRING("print"), void>(f); }
inline void PrintStream::print(jdouble d) { return call_method<SCAPIX_META_STRING("print"), void>(d); }
inline void PrintStream::print(ref<link::java::array<jchar>> s) { return call_method<SCAPIX_META_STRING("print"), void>(s); }
inline void PrintStream::print(ref<java::lang::String> s) { return call_method<SCAPIX_META_STRING("print"), void>(s); }
inline void PrintStream::print(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("print"), void>(obj); }
inline void PrintStream::println() { return call_method<SCAPIX_META_STRING("println"), void>(); }
inline void PrintStream::println(jboolean x) { return call_method<SCAPIX_META_STRING("println"), void>(x); }
inline void PrintStream::println(jchar x) { return call_method<SCAPIX_META_STRING("println"), void>(x); }
inline void PrintStream::println(jint x) { return call_method<SCAPIX_META_STRING("println"), void>(x); }
inline void PrintStream::println(jlong x) { return call_method<SCAPIX_META_STRING("println"), void>(x); }
inline void PrintStream::println(jfloat x) { return call_method<SCAPIX_META_STRING("println"), void>(x); }
inline void PrintStream::println(jdouble x) { return call_method<SCAPIX_META_STRING("println"), void>(x); }
inline void PrintStream::println(ref<link::java::array<jchar>> x) { return call_method<SCAPIX_META_STRING("println"), void>(x); }
inline void PrintStream::println(ref<java::lang::String> x) { return call_method<SCAPIX_META_STRING("println"), void>(x); }
inline void PrintStream::println(ref<java::lang::Object> x) { return call_method<SCAPIX_META_STRING("println"), void>(x); }
inline ref<java::io::PrintStream> PrintStream::printf(ref<java::lang::String> format, ref<link::java::array<java::lang::Object>> args) { return call_method<SCAPIX_META_STRING("printf"), ref<java::io::PrintStream>>(format, args); }
inline ref<java::io::PrintStream> PrintStream::printf(ref<java::util::Locale> l, ref<java::lang::String> format, ref<link::java::array<java::lang::Object>> args) { return call_method<SCAPIX_META_STRING("printf"), ref<java::io::PrintStream>>(l, format, args); }
inline ref<java::io::PrintStream> PrintStream::format(ref<java::lang::String> format, ref<link::java::array<java::lang::Object>> args) { return call_method<SCAPIX_META_STRING("format"), ref<java::io::PrintStream>>(format, args); }
inline ref<java::io::PrintStream> PrintStream::format(ref<java::util::Locale> l, ref<java::lang::String> format, ref<link::java::array<java::lang::Object>> args) { return call_method<SCAPIX_META_STRING("format"), ref<java::io::PrintStream>>(l, format, args); }
inline ref<java::io::PrintStream> PrintStream::append(ref<java::lang::CharSequence> csq) { return call_method<SCAPIX_META_STRING("append"), ref<java::io::PrintStream>>(csq); }
inline ref<java::io::PrintStream> PrintStream::append(ref<java::lang::CharSequence> csq, jint start, jint end) { return call_method<SCAPIX_META_STRING("append"), ref<java::io::PrintStream>>(csq, start, end); }
inline ref<java::io::PrintStream> PrintStream::append(jchar c) { return call_method<SCAPIX_META_STRING("append"), ref<java::io::PrintStream>>(c); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_PRINTSTREAM_H
