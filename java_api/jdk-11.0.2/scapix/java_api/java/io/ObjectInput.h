// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/DataInput.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_IO_OBJECTINPUT_H
#define SCAPIX_JAVA_IO_OBJECTINPUT_H

namespace scapix::java_api {
namespace java::io {

class ObjectInput : public object_base<SCAPIX_META_STRING("java/io/ObjectInput"),
	java::lang::Object,
	java::io::DataInput,
	java::lang::AutoCloseable>
{
public:

	ref<java::lang::Object> readObject();
	jint read();
	jint read(ref<link::java::array<jbyte>> p1);
	jint read(ref<link::java::array<jbyte>> p1, jint p2, jint p3);
	jlong skip(jlong p1);
	jint available();
	void close();

protected:

	ObjectInput(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api


namespace scapix::java_api {
namespace java::io {

inline ref<java::lang::Object> ObjectInput::readObject() { return call_method<SCAPIX_META_STRING("readObject"), ref<java::lang::Object>>(); }
inline jint ObjectInput::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint ObjectInput::read(ref<link::java::array<jbyte>> p1) { return call_method<SCAPIX_META_STRING("read"), jint>(p1); }
inline jint ObjectInput::read(ref<link::java::array<jbyte>> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("read"), jint>(p1, p2, p3); }
inline jlong ObjectInput::skip(jlong p1) { return call_method<SCAPIX_META_STRING("skip"), jlong>(p1); }
inline jint ObjectInput::available() { return call_method<SCAPIX_META_STRING("available"), jint>(); }
inline void ObjectInput::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_OBJECTINPUT_H
