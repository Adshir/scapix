// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/InputStream.h>

#ifndef SCAPIX_JAVA_IO_SEQUENCEINPUTSTREAM_H
#define SCAPIX_JAVA_IO_SEQUENCEINPUTSTREAM_H

namespace scapix::java_api {

namespace java::util { class Enumeration; }

namespace java::io {

class SequenceInputStream : public object_base<SCAPIX_META_STRING("java/io/SequenceInputStream"),
	java::io::InputStream>
{
public:

	static ref<SequenceInputStream> new_object(ref<java::util::Enumeration> e);
	static ref<SequenceInputStream> new_object(ref<java::io::InputStream> s1, ref<java::io::InputStream> s2);
	jint available();
	jint read();
	jint read(ref<link::java::array<jbyte>> b, jint off, jint len);
	void close();

protected:

	SequenceInputStream(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/util/Enumeration.h>

namespace scapix::java_api {
namespace java::io {

inline ref<SequenceInputStream> SequenceInputStream::new_object(ref<java::util::Enumeration> e) { return base_::new_object(e); }
inline ref<SequenceInputStream> SequenceInputStream::new_object(ref<java::io::InputStream> s1, ref<java::io::InputStream> s2) { return base_::new_object(s1, s2); }
inline jint SequenceInputStream::available() { return call_method<SCAPIX_META_STRING("available"), jint>(); }
inline jint SequenceInputStream::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint SequenceInputStream::read(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(b, off, len); }
inline void SequenceInputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_SEQUENCEINPUTSTREAM_H
