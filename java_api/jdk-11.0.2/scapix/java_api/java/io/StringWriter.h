// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/Writer.h>

#ifndef SCAPIX_JAVA_IO_STRINGWRITER_H
#define SCAPIX_JAVA_IO_STRINGWRITER_H

namespace scapix::java_api {

namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::lang { class StringBuffer; }

namespace java::io {

class StringWriter : public object_base<SCAPIX_META_STRING("java/io/StringWriter"),
	java::io::Writer>
{
public:

	static ref<StringWriter> new_object();
	static ref<StringWriter> new_object(jint initialSize);
	void write(jint c);
	void write(ref<link::java::array<jchar>> cbuf, jint off, jint len);
	void write(ref<java::lang::String> str);
	void write(ref<java::lang::String> str, jint off, jint len);
	ref<java::io::StringWriter> append(ref<java::lang::CharSequence> csq);
	ref<java::io::StringWriter> append(ref<java::lang::CharSequence> csq, jint start, jint end);
	ref<java::io::StringWriter> append(jchar c);
	ref<java::lang::String> toString();
	ref<java::lang::StringBuffer> getBuffer();
	void flush();
	void close();

protected:

	StringWriter(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>

namespace scapix::java_api {
namespace java::io {

inline ref<StringWriter> StringWriter::new_object() { return base_::new_object(); }
inline ref<StringWriter> StringWriter::new_object(jint initialSize) { return base_::new_object(initialSize); }
inline void StringWriter::write(jint c) { return call_method<SCAPIX_META_STRING("write"), void>(c); }
inline void StringWriter::write(ref<link::java::array<jchar>> cbuf, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(cbuf, off, len); }
inline void StringWriter::write(ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("write"), void>(str); }
inline void StringWriter::write(ref<java::lang::String> str, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(str, off, len); }
inline ref<java::io::StringWriter> StringWriter::append(ref<java::lang::CharSequence> csq) { return call_method<SCAPIX_META_STRING("append"), ref<java::io::StringWriter>>(csq); }
inline ref<java::io::StringWriter> StringWriter::append(ref<java::lang::CharSequence> csq, jint start, jint end) { return call_method<SCAPIX_META_STRING("append"), ref<java::io::StringWriter>>(csq, start, end); }
inline ref<java::io::StringWriter> StringWriter::append(jchar c) { return call_method<SCAPIX_META_STRING("append"), ref<java::io::StringWriter>>(c); }
inline ref<java::lang::String> StringWriter::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::StringBuffer> StringWriter::getBuffer() { return call_method<SCAPIX_META_STRING("getBuffer"), ref<java::lang::StringBuffer>>(); }
inline void StringWriter::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline void StringWriter::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_STRINGWRITER_H
