// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_IO_INPUTSTREAM_H
#define SCAPIX_JAVA_IO_INPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class OutputStream; }

namespace java::io {

class InputStream : public object_base<SCAPIX_META_STRING("java/io/InputStream"),
	java::lang::Object,
	java::io::Closeable>
{
public:

	static ref<InputStream> new_object();
	static ref<java::io::InputStream> nullInputStream();
	jint read();
	jint read(ref<link::java::array<jbyte>> b);
	jint read(ref<link::java::array<jbyte>> b, jint off, jint len);
	ref<link::java::array<jbyte>> readAllBytes();
	ref<link::java::array<jbyte>> readNBytes(jint len);
	jint readNBytes(ref<link::java::array<jbyte>> b, jint off, jint len);
	jlong skip(jlong n);
	jint available();
	void close();
	void mark(jint readlimit);
	void reset();
	jboolean markSupported();
	jlong transferTo(ref<java::io::OutputStream> out);

protected:

	InputStream(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/OutputStream.h>

namespace scapix::java_api {
namespace java::io {

inline ref<InputStream> InputStream::new_object() { return base_::new_object(); }
inline ref<java::io::InputStream> InputStream::nullInputStream() { return call_static_method<SCAPIX_META_STRING("nullInputStream"), ref<java::io::InputStream>>(); }
inline jint InputStream::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint InputStream::read(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("read"), jint>(b); }
inline jint InputStream::read(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(b, off, len); }
inline ref<link::java::array<jbyte>> InputStream::readAllBytes() { return call_method<SCAPIX_META_STRING("readAllBytes"), ref<link::java::array<jbyte>>>(); }
inline ref<link::java::array<jbyte>> InputStream::readNBytes(jint len) { return call_method<SCAPIX_META_STRING("readNBytes"), ref<link::java::array<jbyte>>>(len); }
inline jint InputStream::readNBytes(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("readNBytes"), jint>(b, off, len); }
inline jlong InputStream::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), jlong>(n); }
inline jint InputStream::available() { return call_method<SCAPIX_META_STRING("available"), jint>(); }
inline void InputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void InputStream::mark(jint readlimit) { return call_method<SCAPIX_META_STRING("mark"), void>(readlimit); }
inline void InputStream::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline jboolean InputStream::markSupported() { return call_method<SCAPIX_META_STRING("markSupported"), jboolean>(); }
inline jlong InputStream::transferTo(ref<java::io::OutputStream> out) { return call_method<SCAPIX_META_STRING("transferTo"), jlong>(out); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_INPUTSTREAM_H
