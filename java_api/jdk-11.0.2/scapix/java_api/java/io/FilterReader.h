// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/Reader.h>

#ifndef SCAPIX_JAVA_IO_FILTERREADER_H
#define SCAPIX_JAVA_IO_FILTERREADER_H

namespace scapix::java_api {
namespace java::io {

class FilterReader : public object_base<SCAPIX_META_STRING("java/io/FilterReader"),
	java::io::Reader>
{
public:

	jint read();
	jint read(ref<link::java::array<jchar>> cbuf, jint off, jint len);
	jlong skip(jlong n);
	jboolean ready();
	jboolean markSupported();
	void mark(jint readAheadLimit);
	void reset();
	void close();

protected:

	FilterReader(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api


namespace scapix::java_api {
namespace java::io {

inline jint FilterReader::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint FilterReader::read(ref<link::java::array<jchar>> cbuf, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(cbuf, off, len); }
inline jlong FilterReader::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), jlong>(n); }
inline jboolean FilterReader::ready() { return call_method<SCAPIX_META_STRING("ready"), jboolean>(); }
inline jboolean FilterReader::markSupported() { return call_method<SCAPIX_META_STRING("markSupported"), jboolean>(); }
inline void FilterReader::mark(jint readAheadLimit) { return call_method<SCAPIX_META_STRING("mark"), void>(readAheadLimit); }
inline void FilterReader::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline void FilterReader::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_FILTERREADER_H
