// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/FilterInputStream.h>
#include <scapix/java_api/java/io/DataInput.h>

#ifndef SCAPIX_JAVA_IO_DATAINPUTSTREAM_H
#define SCAPIX_JAVA_IO_DATAINPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::lang { class String; }

namespace java::io {

class DataInputStream : public object_base<SCAPIX_META_STRING("java/io/DataInputStream"),
	java::io::FilterInputStream,
	java::io::DataInput>
{
public:

	static ref<DataInputStream> new_object(ref<java::io::InputStream> in);
	jint read(ref<link::java::array<jbyte>> b);
	jint read(ref<link::java::array<jbyte>> b, jint off, jint len);
	void readFully(ref<link::java::array<jbyte>> b);
	void readFully(ref<link::java::array<jbyte>> b, jint off, jint len);
	jint skipBytes(jint n);
	jboolean readBoolean();
	jbyte readByte();
	jint readUnsignedByte();
	jshort readShort();
	jint readUnsignedShort();
	jchar readChar();
	jint readInt();
	jlong readLong();
	jfloat readFloat();
	jdouble readDouble();
	ref<java::lang::String> readLine();
	ref<java::lang::String> readUTF();
	static ref<java::lang::String> readUTF(ref<java::io::DataInput> in);

protected:

	DataInputStream(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::io {

inline ref<DataInputStream> DataInputStream::new_object(ref<java::io::InputStream> in) { return base_::new_object(in); }
inline jint DataInputStream::read(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("read"), jint>(b); }
inline jint DataInputStream::read(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(b, off, len); }
inline void DataInputStream::readFully(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("readFully"), void>(b); }
inline void DataInputStream::readFully(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("readFully"), void>(b, off, len); }
inline jint DataInputStream::skipBytes(jint n) { return call_method<SCAPIX_META_STRING("skipBytes"), jint>(n); }
inline jboolean DataInputStream::readBoolean() { return call_method<SCAPIX_META_STRING("readBoolean"), jboolean>(); }
inline jbyte DataInputStream::readByte() { return call_method<SCAPIX_META_STRING("readByte"), jbyte>(); }
inline jint DataInputStream::readUnsignedByte() { return call_method<SCAPIX_META_STRING("readUnsignedByte"), jint>(); }
inline jshort DataInputStream::readShort() { return call_method<SCAPIX_META_STRING("readShort"), jshort>(); }
inline jint DataInputStream::readUnsignedShort() { return call_method<SCAPIX_META_STRING("readUnsignedShort"), jint>(); }
inline jchar DataInputStream::readChar() { return call_method<SCAPIX_META_STRING("readChar"), jchar>(); }
inline jint DataInputStream::readInt() { return call_method<SCAPIX_META_STRING("readInt"), jint>(); }
inline jlong DataInputStream::readLong() { return call_method<SCAPIX_META_STRING("readLong"), jlong>(); }
inline jfloat DataInputStream::readFloat() { return call_method<SCAPIX_META_STRING("readFloat"), jfloat>(); }
inline jdouble DataInputStream::readDouble() { return call_method<SCAPIX_META_STRING("readDouble"), jdouble>(); }
inline ref<java::lang::String> DataInputStream::readLine() { return call_method<SCAPIX_META_STRING("readLine"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DataInputStream::readUTF() { return call_method<SCAPIX_META_STRING("readUTF"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DataInputStream::readUTF(ref<java::io::DataInput> in) { return call_static_method<SCAPIX_META_STRING("readUTF"), ref<java::lang::String>>(in); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_DATAINPUTSTREAM_H
