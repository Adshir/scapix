// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Readable.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_IO_READER_H
#define SCAPIX_JAVA_IO_READER_H

namespace scapix::java_api {

namespace java::io { class Writer; }
namespace java::nio { class CharBuffer; }

namespace java::io {

class Reader : public object_base<SCAPIX_META_STRING("java/io/Reader"),
	java::lang::Object,
	java::lang::Readable,
	java::io::Closeable>
{
public:

	static ref<java::io::Reader> nullReader();
	jint read(ref<java::nio::CharBuffer> target);
	jint read();
	jint read(ref<link::java::array<jchar>> cbuf);
	jint read(ref<link::java::array<jchar>> p1, jint p2, jint p3);
	jlong skip(jlong n);
	jboolean ready();
	jboolean markSupported();
	void mark(jint readAheadLimit);
	void reset();
	void close();
	jlong transferTo(ref<java::io::Writer> out);

protected:

	Reader(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/java/nio/CharBuffer.h>

namespace scapix::java_api {
namespace java::io {

inline ref<java::io::Reader> Reader::nullReader() { return call_static_method<SCAPIX_META_STRING("nullReader"), ref<java::io::Reader>>(); }
inline jint Reader::read(ref<java::nio::CharBuffer> target) { return call_method<SCAPIX_META_STRING("read"), jint>(target); }
inline jint Reader::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint Reader::read(ref<link::java::array<jchar>> cbuf) { return call_method<SCAPIX_META_STRING("read"), jint>(cbuf); }
inline jint Reader::read(ref<link::java::array<jchar>> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("read"), jint>(p1, p2, p3); }
inline jlong Reader::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), jlong>(n); }
inline jboolean Reader::ready() { return call_method<SCAPIX_META_STRING("ready"), jboolean>(); }
inline jboolean Reader::markSupported() { return call_method<SCAPIX_META_STRING("markSupported"), jboolean>(); }
inline void Reader::mark(jint readAheadLimit) { return call_method<SCAPIX_META_STRING("mark"), void>(readAheadLimit); }
inline void Reader::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline void Reader::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jlong Reader::transferTo(ref<java::io::Writer> out) { return call_method<SCAPIX_META_STRING("transferTo"), jlong>(out); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_READER_H
