// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/text/Format.h>

#ifndef SCAPIX_JAVA_TEXT_DATEFORMAT_H
#define SCAPIX_JAVA_TEXT_DATEFORMAT_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::lang { class StringBuffer; }
namespace java::text { class FieldPosition; }
namespace java::text { class NumberFormat; }
namespace java::text { class ParsePosition; }
namespace java::util { class Calendar; }
namespace java::util { class Date; }
namespace java::util { class Locale; }
namespace java::util { class TimeZone; }
namespace java::text { class DateFormat_Field; }

namespace java::text {

class DateFormat : public object_base<SCAPIX_META_STRING("java/text/DateFormat"),
	java::text::Format>
{
public:

	using Field = DateFormat_Field;

	static jint ERA_FIELD_();
	static jint YEAR_FIELD_();
	static jint MONTH_FIELD_();
	static jint DATE_FIELD_();
	static jint HOUR_OF_DAY1_FIELD_();
	static jint HOUR_OF_DAY0_FIELD_();
	static jint MINUTE_FIELD_();
	static jint SECOND_FIELD_();
	static jint MILLISECOND_FIELD_();
	static jint DAY_OF_WEEK_FIELD_();
	static jint DAY_OF_YEAR_FIELD_();
	static jint DAY_OF_WEEK_IN_MONTH_FIELD_();
	static jint WEEK_OF_YEAR_FIELD_();
	static jint WEEK_OF_MONTH_FIELD_();
	static jint AM_PM_FIELD_();
	static jint HOUR1_FIELD_();
	static jint HOUR0_FIELD_();
	static jint TIMEZONE_FIELD_();
	static jint FULL_();
	static jint LONG_();
	static jint MEDIUM_();
	static jint SHORT_();
	static jint DEFAULT_();

	ref<java::lang::StringBuffer> format(ref<java::lang::Object> obj, ref<java::lang::StringBuffer> toAppendTo, ref<java::text::FieldPosition> fieldPosition);
	ref<java::lang::StringBuffer> format(ref<java::util::Date> p1, ref<java::lang::StringBuffer> p2, ref<java::text::FieldPosition> p3);
	ref<java::lang::String> format(ref<java::util::Date> date);
	ref<java::util::Date> parse(ref<java::lang::String> source);
	ref<java::util::Date> parse(ref<java::lang::String> p1, ref<java::text::ParsePosition> p2);
	ref<java::lang::Object> parseObject(ref<java::lang::String> source, ref<java::text::ParsePosition> pos);
	static ref<java::text::DateFormat> getTimeInstance();
	static ref<java::text::DateFormat> getTimeInstance(jint style);
	static ref<java::text::DateFormat> getTimeInstance(jint style, ref<java::util::Locale> aLocale);
	static ref<java::text::DateFormat> getDateInstance();
	static ref<java::text::DateFormat> getDateInstance(jint style);
	static ref<java::text::DateFormat> getDateInstance(jint style, ref<java::util::Locale> aLocale);
	static ref<java::text::DateFormat> getDateTimeInstance();
	static ref<java::text::DateFormat> getDateTimeInstance(jint dateStyle, jint timeStyle);
	static ref<java::text::DateFormat> getDateTimeInstance(jint dateStyle, jint timeStyle, ref<java::util::Locale> aLocale);
	static ref<java::text::DateFormat> getInstance();
	static ref<link::java::array<java::util::Locale>> getAvailableLocales();
	void setCalendar(ref<java::util::Calendar> newCalendar);
	ref<java::util::Calendar> getCalendar();
	void setNumberFormat(ref<java::text::NumberFormat> newNumberFormat);
	ref<java::text::NumberFormat> getNumberFormat();
	void setTimeZone(ref<java::util::TimeZone> zone);
	ref<java::util::TimeZone> getTimeZone();
	void setLenient(jboolean lenient);
	jboolean isLenient();
	jint hashCode();
	jboolean equals(ref<java::lang::Object> obj);
	ref<java::lang::Object> clone();

protected:

	DateFormat(handle_type h) : base_(h) {}

};

} // namespace java::text
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/text/FieldPosition.h>
#include <scapix/java_api/java/text/NumberFormat.h>
#include <scapix/java_api/java/text/ParsePosition.h>
#include <scapix/java_api/java/util/Calendar.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/TimeZone.h>

namespace scapix::java_api {
namespace java::text {

inline jint DateFormat::ERA_FIELD_() { return get_static_field<SCAPIX_META_STRING("ERA_FIELD"), jint>(); }
inline jint DateFormat::YEAR_FIELD_() { return get_static_field<SCAPIX_META_STRING("YEAR_FIELD"), jint>(); }
inline jint DateFormat::MONTH_FIELD_() { return get_static_field<SCAPIX_META_STRING("MONTH_FIELD"), jint>(); }
inline jint DateFormat::DATE_FIELD_() { return get_static_field<SCAPIX_META_STRING("DATE_FIELD"), jint>(); }
inline jint DateFormat::HOUR_OF_DAY1_FIELD_() { return get_static_field<SCAPIX_META_STRING("HOUR_OF_DAY1_FIELD"), jint>(); }
inline jint DateFormat::HOUR_OF_DAY0_FIELD_() { return get_static_field<SCAPIX_META_STRING("HOUR_OF_DAY0_FIELD"), jint>(); }
inline jint DateFormat::MINUTE_FIELD_() { return get_static_field<SCAPIX_META_STRING("MINUTE_FIELD"), jint>(); }
inline jint DateFormat::SECOND_FIELD_() { return get_static_field<SCAPIX_META_STRING("SECOND_FIELD"), jint>(); }
inline jint DateFormat::MILLISECOND_FIELD_() { return get_static_field<SCAPIX_META_STRING("MILLISECOND_FIELD"), jint>(); }
inline jint DateFormat::DAY_OF_WEEK_FIELD_() { return get_static_field<SCAPIX_META_STRING("DAY_OF_WEEK_FIELD"), jint>(); }
inline jint DateFormat::DAY_OF_YEAR_FIELD_() { return get_static_field<SCAPIX_META_STRING("DAY_OF_YEAR_FIELD"), jint>(); }
inline jint DateFormat::DAY_OF_WEEK_IN_MONTH_FIELD_() { return get_static_field<SCAPIX_META_STRING("DAY_OF_WEEK_IN_MONTH_FIELD"), jint>(); }
inline jint DateFormat::WEEK_OF_YEAR_FIELD_() { return get_static_field<SCAPIX_META_STRING("WEEK_OF_YEAR_FIELD"), jint>(); }
inline jint DateFormat::WEEK_OF_MONTH_FIELD_() { return get_static_field<SCAPIX_META_STRING("WEEK_OF_MONTH_FIELD"), jint>(); }
inline jint DateFormat::AM_PM_FIELD_() { return get_static_field<SCAPIX_META_STRING("AM_PM_FIELD"), jint>(); }
inline jint DateFormat::HOUR1_FIELD_() { return get_static_field<SCAPIX_META_STRING("HOUR1_FIELD"), jint>(); }
inline jint DateFormat::HOUR0_FIELD_() { return get_static_field<SCAPIX_META_STRING("HOUR0_FIELD"), jint>(); }
inline jint DateFormat::TIMEZONE_FIELD_() { return get_static_field<SCAPIX_META_STRING("TIMEZONE_FIELD"), jint>(); }
inline jint DateFormat::FULL_() { return get_static_field<SCAPIX_META_STRING("FULL"), jint>(); }
inline jint DateFormat::LONG_() { return get_static_field<SCAPIX_META_STRING("LONG"), jint>(); }
inline jint DateFormat::MEDIUM_() { return get_static_field<SCAPIX_META_STRING("MEDIUM"), jint>(); }
inline jint DateFormat::SHORT_() { return get_static_field<SCAPIX_META_STRING("SHORT"), jint>(); }
inline jint DateFormat::DEFAULT_() { return get_static_field<SCAPIX_META_STRING("DEFAULT"), jint>(); }
inline ref<java::lang::StringBuffer> DateFormat::format(ref<java::lang::Object> obj, ref<java::lang::StringBuffer> toAppendTo, ref<java::text::FieldPosition> fieldPosition) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::StringBuffer>>(obj, toAppendTo, fieldPosition); }
inline ref<java::lang::StringBuffer> DateFormat::format(ref<java::util::Date> p1, ref<java::lang::StringBuffer> p2, ref<java::text::FieldPosition> p3) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::StringBuffer>>(p1, p2, p3); }
inline ref<java::lang::String> DateFormat::format(ref<java::util::Date> date) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::String>>(date); }
inline ref<java::util::Date> DateFormat::parse(ref<java::lang::String> source) { return call_method<SCAPIX_META_STRING("parse"), ref<java::util::Date>>(source); }
inline ref<java::util::Date> DateFormat::parse(ref<java::lang::String> p1, ref<java::text::ParsePosition> p2) { return call_method<SCAPIX_META_STRING("parse"), ref<java::util::Date>>(p1, p2); }
inline ref<java::lang::Object> DateFormat::parseObject(ref<java::lang::String> source, ref<java::text::ParsePosition> pos) { return call_method<SCAPIX_META_STRING("parseObject"), ref<java::lang::Object>>(source, pos); }
inline ref<java::text::DateFormat> DateFormat::getTimeInstance() { return call_static_method<SCAPIX_META_STRING("getTimeInstance"), ref<java::text::DateFormat>>(); }
inline ref<java::text::DateFormat> DateFormat::getTimeInstance(jint style) { return call_static_method<SCAPIX_META_STRING("getTimeInstance"), ref<java::text::DateFormat>>(style); }
inline ref<java::text::DateFormat> DateFormat::getTimeInstance(jint style, ref<java::util::Locale> aLocale) { return call_static_method<SCAPIX_META_STRING("getTimeInstance"), ref<java::text::DateFormat>>(style, aLocale); }
inline ref<java::text::DateFormat> DateFormat::getDateInstance() { return call_static_method<SCAPIX_META_STRING("getDateInstance"), ref<java::text::DateFormat>>(); }
inline ref<java::text::DateFormat> DateFormat::getDateInstance(jint style) { return call_static_method<SCAPIX_META_STRING("getDateInstance"), ref<java::text::DateFormat>>(style); }
inline ref<java::text::DateFormat> DateFormat::getDateInstance(jint style, ref<java::util::Locale> aLocale) { return call_static_method<SCAPIX_META_STRING("getDateInstance"), ref<java::text::DateFormat>>(style, aLocale); }
inline ref<java::text::DateFormat> DateFormat::getDateTimeInstance() { return call_static_method<SCAPIX_META_STRING("getDateTimeInstance"), ref<java::text::DateFormat>>(); }
inline ref<java::text::DateFormat> DateFormat::getDateTimeInstance(jint dateStyle, jint timeStyle) { return call_static_method<SCAPIX_META_STRING("getDateTimeInstance"), ref<java::text::DateFormat>>(dateStyle, timeStyle); }
inline ref<java::text::DateFormat> DateFormat::getDateTimeInstance(jint dateStyle, jint timeStyle, ref<java::util::Locale> aLocale) { return call_static_method<SCAPIX_META_STRING("getDateTimeInstance"), ref<java::text::DateFormat>>(dateStyle, timeStyle, aLocale); }
inline ref<java::text::DateFormat> DateFormat::getInstance() { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<java::text::DateFormat>>(); }
inline ref<link::java::array<java::util::Locale>> DateFormat::getAvailableLocales() { return call_static_method<SCAPIX_META_STRING("getAvailableLocales"), ref<link::java::array<java::util::Locale>>>(); }
inline void DateFormat::setCalendar(ref<java::util::Calendar> newCalendar) { return call_method<SCAPIX_META_STRING("setCalendar"), void>(newCalendar); }
inline ref<java::util::Calendar> DateFormat::getCalendar() { return call_method<SCAPIX_META_STRING("getCalendar"), ref<java::util::Calendar>>(); }
inline void DateFormat::setNumberFormat(ref<java::text::NumberFormat> newNumberFormat) { return call_method<SCAPIX_META_STRING("setNumberFormat"), void>(newNumberFormat); }
inline ref<java::text::NumberFormat> DateFormat::getNumberFormat() { return call_method<SCAPIX_META_STRING("getNumberFormat"), ref<java::text::NumberFormat>>(); }
inline void DateFormat::setTimeZone(ref<java::util::TimeZone> zone) { return call_method<SCAPIX_META_STRING("setTimeZone"), void>(zone); }
inline ref<java::util::TimeZone> DateFormat::getTimeZone() { return call_method<SCAPIX_META_STRING("getTimeZone"), ref<java::util::TimeZone>>(); }
inline void DateFormat::setLenient(jboolean lenient) { return call_method<SCAPIX_META_STRING("setLenient"), void>(lenient); }
inline jboolean DateFormat::isLenient() { return call_method<SCAPIX_META_STRING("isLenient"), jboolean>(); }
inline jint DateFormat::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean DateFormat::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline ref<java::lang::Object> DateFormat::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }

} // namespace java::text
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TEXT_DATEFORMAT_H
