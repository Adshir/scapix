// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_TEXT_DIGITLIST_H
#define SCAPIX_JAVA_TEXT_DIGITLIST_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::math { class BigDecimal; }

namespace java::text {

// private
class DigitList : public object_base<SCAPIX_META_STRING("java/text/DigitList"),
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jint MAX_COUNT_();
	jint decimalAt();
	void decimalAt(jint);
	jint count();
	void count(jint);
	ref<link::java::array<jchar>> digits();
	void digits(ref<link::java::array<jchar>>);

	void clear();
	void append(jchar digit);
	jdouble getDouble();
	jlong getLong();
	ref<java::math::BigDecimal> getBigDecimal();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::Object> clone();
	ref<java::lang::String> toString();

protected:

	DigitList(handle_type h) : base_(h) {}

};

} // namespace java::text
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigDecimal.h>

namespace scapix::java_api {
namespace java::text {

inline jint DigitList::MAX_COUNT_() { return get_static_field<SCAPIX_META_STRING("MAX_COUNT"), jint>(); }
inline jint DigitList::decimalAt() { return get_field<SCAPIX_META_STRING("decimalAt"), jint>(); }
inline void DigitList::decimalAt(jint v) { set_field<SCAPIX_META_STRING("decimalAt"), jint>(v); }
inline jint DigitList::count() { return get_field<SCAPIX_META_STRING("count"), jint>(); }
inline void DigitList::count(jint v) { set_field<SCAPIX_META_STRING("count"), jint>(v); }
inline ref<link::java::array<jchar>> DigitList::digits() { return get_field<SCAPIX_META_STRING("digits"), ref<link::java::array<jchar>>>(); }
inline void DigitList::digits(ref<link::java::array<jchar>> v) { set_field<SCAPIX_META_STRING("digits"), ref<link::java::array<jchar>>>(v); }
inline void DigitList::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline void DigitList::append(jchar digit) { return call_method<SCAPIX_META_STRING("append"), void>(digit); }
inline jdouble DigitList::getDouble() { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(); }
inline jlong DigitList::getLong() { return call_method<SCAPIX_META_STRING("getLong"), jlong>(); }
inline ref<java::math::BigDecimal> DigitList::getBigDecimal() { return call_method<SCAPIX_META_STRING("getBigDecimal"), ref<java::math::BigDecimal>>(); }
inline jboolean DigitList::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint DigitList::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::Object> DigitList::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline ref<java::lang::String> DigitList::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::text
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TEXT_DIGITLIST_H
