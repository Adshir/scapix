// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/text/DateFormat.h>

#ifndef SCAPIX_JAVA_TEXT_SIMPLEDATEFORMAT_H
#define SCAPIX_JAVA_TEXT_SIMPLEDATEFORMAT_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::lang { class StringBuffer; }
namespace java::text { class AttributedCharacterIterator; }
namespace java::text { class DateFormatSymbols; }
namespace java::text { class FieldPosition; }
namespace java::text { class ParsePosition; }
namespace java::util { class Date; }
namespace java::util { class Locale; }

namespace java::text {

class SimpleDateFormat : public object_base<SCAPIX_META_STRING("java/text/SimpleDateFormat"),
	java::text::DateFormat>
{
public:

	static ref<SimpleDateFormat> new_object();
	static ref<SimpleDateFormat> new_object(ref<java::lang::String> pattern);
	static ref<SimpleDateFormat> new_object(ref<java::lang::String> pattern, ref<java::util::Locale> locale);
	static ref<SimpleDateFormat> new_object(ref<java::lang::String> pattern, ref<java::text::DateFormatSymbols> formatSymbols);
	void set2DigitYearStart(ref<java::util::Date> startDate);
	ref<java::util::Date> get2DigitYearStart();
	ref<java::lang::StringBuffer> format(ref<java::util::Date> date, ref<java::lang::StringBuffer> toAppendTo, ref<java::text::FieldPosition> pos);
	ref<java::text::AttributedCharacterIterator> formatToCharacterIterator(ref<java::lang::Object> obj);
	ref<java::util::Date> parse(ref<java::lang::String> text, ref<java::text::ParsePosition> pos);
	ref<java::lang::String> toPattern();
	ref<java::lang::String> toLocalizedPattern();
	void applyPattern(ref<java::lang::String> pattern);
	void applyLocalizedPattern(ref<java::lang::String> pattern);
	ref<java::text::DateFormatSymbols> getDateFormatSymbols();
	void setDateFormatSymbols(ref<java::text::DateFormatSymbols> newFormatSymbols);
	ref<java::lang::Object> clone();
	jint hashCode();
	jboolean equals(ref<java::lang::Object> obj);

protected:

	SimpleDateFormat(handle_type h) : base_(h) {}

};

} // namespace java::text
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/text/AttributedCharacterIterator.h>
#include <scapix/java_api/java/text/DateFormatSymbols.h>
#include <scapix/java_api/java/text/FieldPosition.h>
#include <scapix/java_api/java/text/ParsePosition.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/Locale.h>

namespace scapix::java_api {
namespace java::text {

inline ref<SimpleDateFormat> SimpleDateFormat::new_object() { return base_::new_object(); }
inline ref<SimpleDateFormat> SimpleDateFormat::new_object(ref<java::lang::String> pattern) { return base_::new_object(pattern); }
inline ref<SimpleDateFormat> SimpleDateFormat::new_object(ref<java::lang::String> pattern, ref<java::util::Locale> locale) { return base_::new_object(pattern, locale); }
inline ref<SimpleDateFormat> SimpleDateFormat::new_object(ref<java::lang::String> pattern, ref<java::text::DateFormatSymbols> formatSymbols) { return base_::new_object(pattern, formatSymbols); }
inline void SimpleDateFormat::set2DigitYearStart(ref<java::util::Date> startDate) { return call_method<SCAPIX_META_STRING("set2DigitYearStart"), void>(startDate); }
inline ref<java::util::Date> SimpleDateFormat::get2DigitYearStart() { return call_method<SCAPIX_META_STRING("get2DigitYearStart"), ref<java::util::Date>>(); }
inline ref<java::lang::StringBuffer> SimpleDateFormat::format(ref<java::util::Date> date, ref<java::lang::StringBuffer> toAppendTo, ref<java::text::FieldPosition> pos) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::StringBuffer>>(date, toAppendTo, pos); }
inline ref<java::text::AttributedCharacterIterator> SimpleDateFormat::formatToCharacterIterator(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("formatToCharacterIterator"), ref<java::text::AttributedCharacterIterator>>(obj); }
inline ref<java::util::Date> SimpleDateFormat::parse(ref<java::lang::String> text, ref<java::text::ParsePosition> pos) { return call_method<SCAPIX_META_STRING("parse"), ref<java::util::Date>>(text, pos); }
inline ref<java::lang::String> SimpleDateFormat::toPattern() { return call_method<SCAPIX_META_STRING("toPattern"), ref<java::lang::String>>(); }
inline ref<java::lang::String> SimpleDateFormat::toLocalizedPattern() { return call_method<SCAPIX_META_STRING("toLocalizedPattern"), ref<java::lang::String>>(); }
inline void SimpleDateFormat::applyPattern(ref<java::lang::String> pattern) { return call_method<SCAPIX_META_STRING("applyPattern"), void>(pattern); }
inline void SimpleDateFormat::applyLocalizedPattern(ref<java::lang::String> pattern) { return call_method<SCAPIX_META_STRING("applyLocalizedPattern"), void>(pattern); }
inline ref<java::text::DateFormatSymbols> SimpleDateFormat::getDateFormatSymbols() { return call_method<SCAPIX_META_STRING("getDateFormatSymbols"), ref<java::text::DateFormatSymbols>>(); }
inline void SimpleDateFormat::setDateFormatSymbols(ref<java::text::DateFormatSymbols> newFormatSymbols) { return call_method<SCAPIX_META_STRING("setDateFormatSymbols"), void>(newFormatSymbols); }
inline ref<java::lang::Object> SimpleDateFormat::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline jint SimpleDateFormat::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean SimpleDateFormat::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }

} // namespace java::text
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TEXT_SIMPLEDATEFORMAT_H
