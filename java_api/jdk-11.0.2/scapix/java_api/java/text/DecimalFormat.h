// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/text/NumberFormat.h>

#ifndef SCAPIX_JAVA_TEXT_DECIMALFORMAT_H
#define SCAPIX_JAVA_TEXT_DECIMALFORMAT_H

namespace scapix::java_api {

namespace java::lang { class Number; }
namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::lang { class StringBuffer; }
namespace java::math { class RoundingMode; }
namespace java::text { class AttributedCharacterIterator; }
namespace java::text { class DecimalFormatSymbols; }
namespace java::text { class FieldPosition; }
namespace java::text { class ParsePosition; }
namespace java::util { class Currency; }

namespace java::text {

class DecimalFormat : public object_base<SCAPIX_META_STRING("java/text/DecimalFormat"),
	java::text::NumberFormat>
{
public:

	static ref<DecimalFormat> new_object();
	static ref<DecimalFormat> new_object(ref<java::lang::String> pattern);
	static ref<DecimalFormat> new_object(ref<java::lang::String> pattern, ref<java::text::DecimalFormatSymbols> symbols);
	ref<java::lang::StringBuffer> format(ref<java::lang::Object> number, ref<java::lang::StringBuffer> toAppendTo, ref<java::text::FieldPosition> pos);
	ref<java::lang::StringBuffer> format(jdouble number, ref<java::lang::StringBuffer> p2, ref<java::text::FieldPosition> result);
	ref<java::lang::StringBuffer> format(jlong number, ref<java::lang::StringBuffer> p2, ref<java::text::FieldPosition> result);
	ref<java::text::AttributedCharacterIterator> formatToCharacterIterator(ref<java::lang::Object> obj);
	ref<java::lang::Number> parse(ref<java::lang::String> text, ref<java::text::ParsePosition> pos);
	ref<java::text::DecimalFormatSymbols> getDecimalFormatSymbols();
	void setDecimalFormatSymbols(ref<java::text::DecimalFormatSymbols> newSymbols);
	ref<java::lang::String> getPositivePrefix();
	void setPositivePrefix(ref<java::lang::String> newValue);
	ref<java::lang::String> getNegativePrefix();
	void setNegativePrefix(ref<java::lang::String> newValue);
	ref<java::lang::String> getPositiveSuffix();
	void setPositiveSuffix(ref<java::lang::String> newValue);
	ref<java::lang::String> getNegativeSuffix();
	void setNegativeSuffix(ref<java::lang::String> newValue);
	jint getMultiplier();
	void setMultiplier(jint newValue);
	void setGroupingUsed(jboolean newValue);
	jint getGroupingSize();
	void setGroupingSize(jint newValue);
	jboolean isDecimalSeparatorAlwaysShown();
	void setDecimalSeparatorAlwaysShown(jboolean newValue);
	jboolean isParseBigDecimal();
	void setParseBigDecimal(jboolean newValue);
	ref<java::lang::Object> clone();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toPattern();
	ref<java::lang::String> toLocalizedPattern();
	void applyPattern(ref<java::lang::String> pattern);
	void applyLocalizedPattern(ref<java::lang::String> pattern);
	void setMaximumIntegerDigits(jint newValue);
	void setMinimumIntegerDigits(jint newValue);
	void setMaximumFractionDigits(jint newValue);
	void setMinimumFractionDigits(jint newValue);
	jint getMaximumIntegerDigits();
	jint getMinimumIntegerDigits();
	jint getMaximumFractionDigits();
	jint getMinimumFractionDigits();
	ref<java::util::Currency> getCurrency();
	void setCurrency(ref<java::util::Currency> currency);
	ref<java::math::RoundingMode> getRoundingMode();
	void setRoundingMode(ref<java::math::RoundingMode> roundingMode);

protected:

	DecimalFormat(handle_type h) : base_(h) {}

};

} // namespace java::text
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/math/RoundingMode.h>
#include <scapix/java_api/java/text/AttributedCharacterIterator.h>
#include <scapix/java_api/java/text/DecimalFormatSymbols.h>
#include <scapix/java_api/java/text/FieldPosition.h>
#include <scapix/java_api/java/text/ParsePosition.h>
#include <scapix/java_api/java/util/Currency.h>

namespace scapix::java_api {
namespace java::text {

inline ref<DecimalFormat> DecimalFormat::new_object() { return base_::new_object(); }
inline ref<DecimalFormat> DecimalFormat::new_object(ref<java::lang::String> pattern) { return base_::new_object(pattern); }
inline ref<DecimalFormat> DecimalFormat::new_object(ref<java::lang::String> pattern, ref<java::text::DecimalFormatSymbols> symbols) { return base_::new_object(pattern, symbols); }
inline ref<java::lang::StringBuffer> DecimalFormat::format(ref<java::lang::Object> number, ref<java::lang::StringBuffer> toAppendTo, ref<java::text::FieldPosition> pos) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::StringBuffer>>(number, toAppendTo, pos); }
inline ref<java::lang::StringBuffer> DecimalFormat::format(jdouble number, ref<java::lang::StringBuffer> p2, ref<java::text::FieldPosition> result) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::StringBuffer>>(number, p2, result); }
inline ref<java::lang::StringBuffer> DecimalFormat::format(jlong number, ref<java::lang::StringBuffer> p2, ref<java::text::FieldPosition> result) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::StringBuffer>>(number, p2, result); }
inline ref<java::text::AttributedCharacterIterator> DecimalFormat::formatToCharacterIterator(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("formatToCharacterIterator"), ref<java::text::AttributedCharacterIterator>>(obj); }
inline ref<java::lang::Number> DecimalFormat::parse(ref<java::lang::String> text, ref<java::text::ParsePosition> pos) { return call_method<SCAPIX_META_STRING("parse"), ref<java::lang::Number>>(text, pos); }
inline ref<java::text::DecimalFormatSymbols> DecimalFormat::getDecimalFormatSymbols() { return call_method<SCAPIX_META_STRING("getDecimalFormatSymbols"), ref<java::text::DecimalFormatSymbols>>(); }
inline void DecimalFormat::setDecimalFormatSymbols(ref<java::text::DecimalFormatSymbols> newSymbols) { return call_method<SCAPIX_META_STRING("setDecimalFormatSymbols"), void>(newSymbols); }
inline ref<java::lang::String> DecimalFormat::getPositivePrefix() { return call_method<SCAPIX_META_STRING("getPositivePrefix"), ref<java::lang::String>>(); }
inline void DecimalFormat::setPositivePrefix(ref<java::lang::String> newValue) { return call_method<SCAPIX_META_STRING("setPositivePrefix"), void>(newValue); }
inline ref<java::lang::String> DecimalFormat::getNegativePrefix() { return call_method<SCAPIX_META_STRING("getNegativePrefix"), ref<java::lang::String>>(); }
inline void DecimalFormat::setNegativePrefix(ref<java::lang::String> newValue) { return call_method<SCAPIX_META_STRING("setNegativePrefix"), void>(newValue); }
inline ref<java::lang::String> DecimalFormat::getPositiveSuffix() { return call_method<SCAPIX_META_STRING("getPositiveSuffix"), ref<java::lang::String>>(); }
inline void DecimalFormat::setPositiveSuffix(ref<java::lang::String> newValue) { return call_method<SCAPIX_META_STRING("setPositiveSuffix"), void>(newValue); }
inline ref<java::lang::String> DecimalFormat::getNegativeSuffix() { return call_method<SCAPIX_META_STRING("getNegativeSuffix"), ref<java::lang::String>>(); }
inline void DecimalFormat::setNegativeSuffix(ref<java::lang::String> newValue) { return call_method<SCAPIX_META_STRING("setNegativeSuffix"), void>(newValue); }
inline jint DecimalFormat::getMultiplier() { return call_method<SCAPIX_META_STRING("getMultiplier"), jint>(); }
inline void DecimalFormat::setMultiplier(jint newValue) { return call_method<SCAPIX_META_STRING("setMultiplier"), void>(newValue); }
inline void DecimalFormat::setGroupingUsed(jboolean newValue) { return call_method<SCAPIX_META_STRING("setGroupingUsed"), void>(newValue); }
inline jint DecimalFormat::getGroupingSize() { return call_method<SCAPIX_META_STRING("getGroupingSize"), jint>(); }
inline void DecimalFormat::setGroupingSize(jint newValue) { return call_method<SCAPIX_META_STRING("setGroupingSize"), void>(newValue); }
inline jboolean DecimalFormat::isDecimalSeparatorAlwaysShown() { return call_method<SCAPIX_META_STRING("isDecimalSeparatorAlwaysShown"), jboolean>(); }
inline void DecimalFormat::setDecimalSeparatorAlwaysShown(jboolean newValue) { return call_method<SCAPIX_META_STRING("setDecimalSeparatorAlwaysShown"), void>(newValue); }
inline jboolean DecimalFormat::isParseBigDecimal() { return call_method<SCAPIX_META_STRING("isParseBigDecimal"), jboolean>(); }
inline void DecimalFormat::setParseBigDecimal(jboolean newValue) { return call_method<SCAPIX_META_STRING("setParseBigDecimal"), void>(newValue); }
inline ref<java::lang::Object> DecimalFormat::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline jboolean DecimalFormat::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint DecimalFormat::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> DecimalFormat::toPattern() { return call_method<SCAPIX_META_STRING("toPattern"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DecimalFormat::toLocalizedPattern() { return call_method<SCAPIX_META_STRING("toLocalizedPattern"), ref<java::lang::String>>(); }
inline void DecimalFormat::applyPattern(ref<java::lang::String> pattern) { return call_method<SCAPIX_META_STRING("applyPattern"), void>(pattern); }
inline void DecimalFormat::applyLocalizedPattern(ref<java::lang::String> pattern) { return call_method<SCAPIX_META_STRING("applyLocalizedPattern"), void>(pattern); }
inline void DecimalFormat::setMaximumIntegerDigits(jint newValue) { return call_method<SCAPIX_META_STRING("setMaximumIntegerDigits"), void>(newValue); }
inline void DecimalFormat::setMinimumIntegerDigits(jint newValue) { return call_method<SCAPIX_META_STRING("setMinimumIntegerDigits"), void>(newValue); }
inline void DecimalFormat::setMaximumFractionDigits(jint newValue) { return call_method<SCAPIX_META_STRING("setMaximumFractionDigits"), void>(newValue); }
inline void DecimalFormat::setMinimumFractionDigits(jint newValue) { return call_method<SCAPIX_META_STRING("setMinimumFractionDigits"), void>(newValue); }
inline jint DecimalFormat::getMaximumIntegerDigits() { return call_method<SCAPIX_META_STRING("getMaximumIntegerDigits"), jint>(); }
inline jint DecimalFormat::getMinimumIntegerDigits() { return call_method<SCAPIX_META_STRING("getMinimumIntegerDigits"), jint>(); }
inline jint DecimalFormat::getMaximumFractionDigits() { return call_method<SCAPIX_META_STRING("getMaximumFractionDigits"), jint>(); }
inline jint DecimalFormat::getMinimumFractionDigits() { return call_method<SCAPIX_META_STRING("getMinimumFractionDigits"), jint>(); }
inline ref<java::util::Currency> DecimalFormat::getCurrency() { return call_method<SCAPIX_META_STRING("getCurrency"), ref<java::util::Currency>>(); }
inline void DecimalFormat::setCurrency(ref<java::util::Currency> currency) { return call_method<SCAPIX_META_STRING("setCurrency"), void>(currency); }
inline ref<java::math::RoundingMode> DecimalFormat::getRoundingMode() { return call_method<SCAPIX_META_STRING("getRoundingMode"), ref<java::math::RoundingMode>>(); }
inline void DecimalFormat::setRoundingMode(ref<java::math::RoundingMode> roundingMode) { return call_method<SCAPIX_META_STRING("setRoundingMode"), void>(roundingMode); }

} // namespace java::text
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TEXT_DECIMALFORMAT_H
