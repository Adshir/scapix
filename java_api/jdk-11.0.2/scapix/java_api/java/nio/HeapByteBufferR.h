// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/HeapByteBuffer.h>

#ifndef SCAPIX_JAVA_NIO_HEAPBYTEBUFFERR_H
#define SCAPIX_JAVA_NIO_HEAPBYTEBUFFERR_H

namespace scapix::java_api {

namespace java::nio { class ByteBuffer; }
namespace java::nio { class CharBuffer; }
namespace java::nio { class DoubleBuffer; }
namespace java::nio { class FloatBuffer; }
namespace java::nio { class IntBuffer; }
namespace java::nio { class LongBuffer; }
namespace java::nio { class ShortBuffer; }

namespace java::nio {

// private
class HeapByteBufferR : public object_base<SCAPIX_META_STRING("java/nio/HeapByteBufferR"),
	java::nio::HeapByteBuffer>
{
public:

	ref<java::nio::ByteBuffer> slice();
	ref<java::nio::ByteBuffer> duplicate();
	ref<java::nio::ByteBuffer> asReadOnlyBuffer();
	jboolean isReadOnly();
	ref<java::nio::ByteBuffer> put(jbyte x);
	ref<java::nio::ByteBuffer> put(jint i, jbyte x);
	ref<java::nio::ByteBuffer> put(ref<link::java::array<jbyte>> src, jint offset, jint length);
	ref<java::nio::ByteBuffer> put(ref<java::nio::ByteBuffer> src);
	ref<java::nio::ByteBuffer> compact();
	ref<java::nio::ByteBuffer> putChar(jchar x);
	ref<java::nio::ByteBuffer> putChar(jint i, jchar x);
	ref<java::nio::CharBuffer> asCharBuffer();
	ref<java::nio::ByteBuffer> putShort(jshort x);
	ref<java::nio::ByteBuffer> putShort(jint i, jshort x);
	ref<java::nio::ShortBuffer> asShortBuffer();
	ref<java::nio::ByteBuffer> putInt(jint x);
	ref<java::nio::ByteBuffer> putInt(jint i, jint x);
	ref<java::nio::IntBuffer> asIntBuffer();
	ref<java::nio::ByteBuffer> putLong(jlong x);
	ref<java::nio::ByteBuffer> putLong(jint i, jlong x);
	ref<java::nio::LongBuffer> asLongBuffer();
	ref<java::nio::ByteBuffer> putFloat(jfloat x);
	ref<java::nio::ByteBuffer> putFloat(jint i, jfloat x);
	ref<java::nio::FloatBuffer> asFloatBuffer();
	ref<java::nio::ByteBuffer> putDouble(jdouble x);
	ref<java::nio::ByteBuffer> putDouble(jint i, jdouble x);
	ref<java::nio::DoubleBuffer> asDoubleBuffer();

protected:

	HeapByteBufferR(handle_type h) : base_(h) {}

};

} // namespace java::nio
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/CharBuffer.h>
#include <scapix/java_api/java/nio/DoubleBuffer.h>
#include <scapix/java_api/java/nio/FloatBuffer.h>
#include <scapix/java_api/java/nio/IntBuffer.h>
#include <scapix/java_api/java/nio/LongBuffer.h>
#include <scapix/java_api/java/nio/ShortBuffer.h>

namespace scapix::java_api {
namespace java::nio {

inline ref<java::nio::ByteBuffer> HeapByteBufferR::slice() { return call_method<SCAPIX_META_STRING("slice"), ref<java::nio::ByteBuffer>>(); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::duplicate() { return call_method<SCAPIX_META_STRING("duplicate"), ref<java::nio::ByteBuffer>>(); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::asReadOnlyBuffer() { return call_method<SCAPIX_META_STRING("asReadOnlyBuffer"), ref<java::nio::ByteBuffer>>(); }
inline jboolean HeapByteBufferR::isReadOnly() { return call_method<SCAPIX_META_STRING("isReadOnly"), jboolean>(); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::put(jbyte x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ByteBuffer>>(x); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::put(jint i, jbyte x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ByteBuffer>>(i, x); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::put(ref<link::java::array<jbyte>> src, jint offset, jint length) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ByteBuffer>>(src, offset, length); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::put(ref<java::nio::ByteBuffer> src) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ByteBuffer>>(src); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::compact() { return call_method<SCAPIX_META_STRING("compact"), ref<java::nio::ByteBuffer>>(); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::putChar(jchar x) { return call_method<SCAPIX_META_STRING("putChar"), ref<java::nio::ByteBuffer>>(x); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::putChar(jint i, jchar x) { return call_method<SCAPIX_META_STRING("putChar"), ref<java::nio::ByteBuffer>>(i, x); }
inline ref<java::nio::CharBuffer> HeapByteBufferR::asCharBuffer() { return call_method<SCAPIX_META_STRING("asCharBuffer"), ref<java::nio::CharBuffer>>(); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::putShort(jshort x) { return call_method<SCAPIX_META_STRING("putShort"), ref<java::nio::ByteBuffer>>(x); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::putShort(jint i, jshort x) { return call_method<SCAPIX_META_STRING("putShort"), ref<java::nio::ByteBuffer>>(i, x); }
inline ref<java::nio::ShortBuffer> HeapByteBufferR::asShortBuffer() { return call_method<SCAPIX_META_STRING("asShortBuffer"), ref<java::nio::ShortBuffer>>(); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::putInt(jint x) { return call_method<SCAPIX_META_STRING("putInt"), ref<java::nio::ByteBuffer>>(x); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::putInt(jint i, jint x) { return call_method<SCAPIX_META_STRING("putInt"), ref<java::nio::ByteBuffer>>(i, x); }
inline ref<java::nio::IntBuffer> HeapByteBufferR::asIntBuffer() { return call_method<SCAPIX_META_STRING("asIntBuffer"), ref<java::nio::IntBuffer>>(); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::putLong(jlong x) { return call_method<SCAPIX_META_STRING("putLong"), ref<java::nio::ByteBuffer>>(x); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::putLong(jint i, jlong x) { return call_method<SCAPIX_META_STRING("putLong"), ref<java::nio::ByteBuffer>>(i, x); }
inline ref<java::nio::LongBuffer> HeapByteBufferR::asLongBuffer() { return call_method<SCAPIX_META_STRING("asLongBuffer"), ref<java::nio::LongBuffer>>(); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::putFloat(jfloat x) { return call_method<SCAPIX_META_STRING("putFloat"), ref<java::nio::ByteBuffer>>(x); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::putFloat(jint i, jfloat x) { return call_method<SCAPIX_META_STRING("putFloat"), ref<java::nio::ByteBuffer>>(i, x); }
inline ref<java::nio::FloatBuffer> HeapByteBufferR::asFloatBuffer() { return call_method<SCAPIX_META_STRING("asFloatBuffer"), ref<java::nio::FloatBuffer>>(); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::putDouble(jdouble x) { return call_method<SCAPIX_META_STRING("putDouble"), ref<java::nio::ByteBuffer>>(x); }
inline ref<java::nio::ByteBuffer> HeapByteBufferR::putDouble(jint i, jdouble x) { return call_method<SCAPIX_META_STRING("putDouble"), ref<java::nio::ByteBuffer>>(i, x); }
inline ref<java::nio::DoubleBuffer> HeapByteBufferR::asDoubleBuffer() { return call_method<SCAPIX_META_STRING("asDoubleBuffer"), ref<java::nio::DoubleBuffer>>(); }

} // namespace java::nio
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_HEAPBYTEBUFFERR_H
