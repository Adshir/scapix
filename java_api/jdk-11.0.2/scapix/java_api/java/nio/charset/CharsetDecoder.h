// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_NIO_CHARSET_CHARSETDECODER_H
#define SCAPIX_JAVA_NIO_CHARSET_CHARSETDECODER_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::nio { class ByteBuffer; }
namespace java::nio { class CharBuffer; }
namespace java::nio::charset { class Charset; }
namespace java::nio::charset { class CoderResult; }
namespace java::nio::charset { class CodingErrorAction; }

namespace java::nio::charset {

class CharsetDecoder : public object_base<SCAPIX_META_STRING("java/nio/charset/CharsetDecoder"),
	java::lang::Object>
{
public:

	ref<java::nio::charset::Charset> charset();
	ref<java::lang::String> replacement();
	ref<java::nio::charset::CharsetDecoder> replaceWith(ref<java::lang::String> newReplacement);
	ref<java::nio::charset::CodingErrorAction> malformedInputAction();
	ref<java::nio::charset::CharsetDecoder> onMalformedInput(ref<java::nio::charset::CodingErrorAction> newAction);
	ref<java::nio::charset::CodingErrorAction> unmappableCharacterAction();
	ref<java::nio::charset::CharsetDecoder> onUnmappableCharacter(ref<java::nio::charset::CodingErrorAction> newAction);
	jfloat averageCharsPerByte();
	jfloat maxCharsPerByte();
	ref<java::nio::charset::CoderResult> decode(ref<java::nio::ByteBuffer> in, ref<java::nio::CharBuffer> out, jboolean endOfInput);
	ref<java::nio::charset::CoderResult> flush(ref<java::nio::CharBuffer> out);
	ref<java::nio::charset::CharsetDecoder> reset();
	ref<java::nio::CharBuffer> decode(ref<java::nio::ByteBuffer> in);
	jboolean isAutoDetecting();
	jboolean isCharsetDetected();
	ref<java::nio::charset::Charset> detectedCharset();

protected:

	CharsetDecoder(handle_type h) : base_(h) {}

};

} // namespace java::nio::charset
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/CharBuffer.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#include <scapix/java_api/java/nio/charset/CoderResult.h>
#include <scapix/java_api/java/nio/charset/CodingErrorAction.h>

namespace scapix::java_api {
namespace java::nio::charset {

inline ref<java::nio::charset::Charset> CharsetDecoder::charset() { return call_method<SCAPIX_META_STRING("charset"), ref<java::nio::charset::Charset>>(); }
inline ref<java::lang::String> CharsetDecoder::replacement() { return call_method<SCAPIX_META_STRING("replacement"), ref<java::lang::String>>(); }
inline ref<java::nio::charset::CharsetDecoder> CharsetDecoder::replaceWith(ref<java::lang::String> newReplacement) { return call_method<SCAPIX_META_STRING("replaceWith"), ref<java::nio::charset::CharsetDecoder>>(newReplacement); }
inline ref<java::nio::charset::CodingErrorAction> CharsetDecoder::malformedInputAction() { return call_method<SCAPIX_META_STRING("malformedInputAction"), ref<java::nio::charset::CodingErrorAction>>(); }
inline ref<java::nio::charset::CharsetDecoder> CharsetDecoder::onMalformedInput(ref<java::nio::charset::CodingErrorAction> newAction) { return call_method<SCAPIX_META_STRING("onMalformedInput"), ref<java::nio::charset::CharsetDecoder>>(newAction); }
inline ref<java::nio::charset::CodingErrorAction> CharsetDecoder::unmappableCharacterAction() { return call_method<SCAPIX_META_STRING("unmappableCharacterAction"), ref<java::nio::charset::CodingErrorAction>>(); }
inline ref<java::nio::charset::CharsetDecoder> CharsetDecoder::onUnmappableCharacter(ref<java::nio::charset::CodingErrorAction> newAction) { return call_method<SCAPIX_META_STRING("onUnmappableCharacter"), ref<java::nio::charset::CharsetDecoder>>(newAction); }
inline jfloat CharsetDecoder::averageCharsPerByte() { return call_method<SCAPIX_META_STRING("averageCharsPerByte"), jfloat>(); }
inline jfloat CharsetDecoder::maxCharsPerByte() { return call_method<SCAPIX_META_STRING("maxCharsPerByte"), jfloat>(); }
inline ref<java::nio::charset::CoderResult> CharsetDecoder::decode(ref<java::nio::ByteBuffer> in, ref<java::nio::CharBuffer> out, jboolean endOfInput) { return call_method<SCAPIX_META_STRING("decode"), ref<java::nio::charset::CoderResult>>(in, out, endOfInput); }
inline ref<java::nio::charset::CoderResult> CharsetDecoder::flush(ref<java::nio::CharBuffer> out) { return call_method<SCAPIX_META_STRING("flush"), ref<java::nio::charset::CoderResult>>(out); }
inline ref<java::nio::charset::CharsetDecoder> CharsetDecoder::reset() { return call_method<SCAPIX_META_STRING("reset"), ref<java::nio::charset::CharsetDecoder>>(); }
inline ref<java::nio::CharBuffer> CharsetDecoder::decode(ref<java::nio::ByteBuffer> in) { return call_method<SCAPIX_META_STRING("decode"), ref<java::nio::CharBuffer>>(in); }
inline jboolean CharsetDecoder::isAutoDetecting() { return call_method<SCAPIX_META_STRING("isAutoDetecting"), jboolean>(); }
inline jboolean CharsetDecoder::isCharsetDetected() { return call_method<SCAPIX_META_STRING("isCharsetDetected"), jboolean>(); }
inline ref<java::nio::charset::Charset> CharsetDecoder::detectedCharset() { return call_method<SCAPIX_META_STRING("detectedCharset"), ref<java::nio::charset::Charset>>(); }

} // namespace java::nio::charset
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHARSET_CHARSETDECODER_H
