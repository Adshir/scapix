// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/ByteBufferAsLongBufferB.h>

#ifndef SCAPIX_JAVA_NIO_BYTEBUFFERASLONGBUFFERRB_H
#define SCAPIX_JAVA_NIO_BYTEBUFFERASLONGBUFFERRB_H

namespace scapix::java_api {

namespace java::nio { class ByteOrder; }
namespace java::nio { class LongBuffer; }

namespace java::nio {

// private
class ByteBufferAsLongBufferRB : public object_base<SCAPIX_META_STRING("java/nio/ByteBufferAsLongBufferRB"),
	java::nio::ByteBufferAsLongBufferB>
{
public:

	ref<java::nio::LongBuffer> slice();
	ref<java::nio::LongBuffer> duplicate();
	ref<java::nio::LongBuffer> asReadOnlyBuffer();
	ref<java::nio::LongBuffer> put(jlong x);
	ref<java::nio::LongBuffer> put(jint i, jlong x);
	ref<java::nio::LongBuffer> compact();
	jboolean isDirect();
	jboolean isReadOnly();
	ref<java::nio::ByteOrder> order();

protected:

	ByteBufferAsLongBufferRB(handle_type h) : base_(h) {}

};

} // namespace java::nio
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/ByteOrder.h>
#include <scapix/java_api/java/nio/LongBuffer.h>

namespace scapix::java_api {
namespace java::nio {

inline ref<java::nio::LongBuffer> ByteBufferAsLongBufferRB::slice() { return call_method<SCAPIX_META_STRING("slice"), ref<java::nio::LongBuffer>>(); }
inline ref<java::nio::LongBuffer> ByteBufferAsLongBufferRB::duplicate() { return call_method<SCAPIX_META_STRING("duplicate"), ref<java::nio::LongBuffer>>(); }
inline ref<java::nio::LongBuffer> ByteBufferAsLongBufferRB::asReadOnlyBuffer() { return call_method<SCAPIX_META_STRING("asReadOnlyBuffer"), ref<java::nio::LongBuffer>>(); }
inline ref<java::nio::LongBuffer> ByteBufferAsLongBufferRB::put(jlong x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::LongBuffer>>(x); }
inline ref<java::nio::LongBuffer> ByteBufferAsLongBufferRB::put(jint i, jlong x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::LongBuffer>>(i, x); }
inline ref<java::nio::LongBuffer> ByteBufferAsLongBufferRB::compact() { return call_method<SCAPIX_META_STRING("compact"), ref<java::nio::LongBuffer>>(); }
inline jboolean ByteBufferAsLongBufferRB::isDirect() { return call_method<SCAPIX_META_STRING("isDirect"), jboolean>(); }
inline jboolean ByteBufferAsLongBufferRB::isReadOnly() { return call_method<SCAPIX_META_STRING("isReadOnly"), jboolean>(); }
inline ref<java::nio::ByteOrder> ByteBufferAsLongBufferRB::order() { return call_method<SCAPIX_META_STRING("order"), ref<java::nio::ByteOrder>>(); }

} // namespace java::nio
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_BYTEBUFFERASLONGBUFFERRB_H
