// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/ShortBuffer.h>
#include <scapix/java_api/sun/nio/ch/DirectBuffer.h>

#ifndef SCAPIX_JAVA_NIO_DIRECTSHORTBUFFERU_H
#define SCAPIX_JAVA_NIO_DIRECTSHORTBUFFERU_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::nio { class ByteOrder; }
namespace jdk::internal::ref { class Cleaner; }

namespace java::nio {

// private
class DirectShortBufferU : public object_base<SCAPIX_META_STRING("java/nio/DirectShortBufferU"),
	java::nio::ShortBuffer,
	sun::nio::ch::DirectBuffer>
{
public:

	ref<java::lang::Object> attachment();
	ref<jdk::internal::ref::Cleaner> cleaner();
	ref<java::nio::ShortBuffer> slice();
	ref<java::nio::ShortBuffer> duplicate();
	ref<java::nio::ShortBuffer> asReadOnlyBuffer();
	jlong address();
	jshort get();
	jshort get(jint i);
	ref<java::nio::ShortBuffer> get(ref<link::java::array<jshort>> dst, jint offset, jint length);
	ref<java::nio::ShortBuffer> put(jshort x);
	ref<java::nio::ShortBuffer> put(jint i, jshort x);
	ref<java::nio::ShortBuffer> put(ref<java::nio::ShortBuffer> src);
	ref<java::nio::ShortBuffer> put(ref<link::java::array<jshort>> src, jint offset, jint length);
	ref<java::nio::ShortBuffer> compact();
	jboolean isDirect();
	jboolean isReadOnly();
	ref<java::nio::ByteOrder> order();

protected:

	DirectShortBufferU(handle_type h) : base_(h) {}

};

} // namespace java::nio
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/ByteOrder.h>
#include <scapix/java_api/jdk/internal/ref/Cleaner.h>

namespace scapix::java_api {
namespace java::nio {

inline ref<java::lang::Object> DirectShortBufferU::attachment() { return call_method<SCAPIX_META_STRING("attachment"), ref<java::lang::Object>>(); }
inline ref<jdk::internal::ref::Cleaner> DirectShortBufferU::cleaner() { return call_method<SCAPIX_META_STRING("cleaner"), ref<jdk::internal::ref::Cleaner>>(); }
inline ref<java::nio::ShortBuffer> DirectShortBufferU::slice() { return call_method<SCAPIX_META_STRING("slice"), ref<java::nio::ShortBuffer>>(); }
inline ref<java::nio::ShortBuffer> DirectShortBufferU::duplicate() { return call_method<SCAPIX_META_STRING("duplicate"), ref<java::nio::ShortBuffer>>(); }
inline ref<java::nio::ShortBuffer> DirectShortBufferU::asReadOnlyBuffer() { return call_method<SCAPIX_META_STRING("asReadOnlyBuffer"), ref<java::nio::ShortBuffer>>(); }
inline jlong DirectShortBufferU::address() { return call_method<SCAPIX_META_STRING("address"), jlong>(); }
inline jshort DirectShortBufferU::get() { return call_method<SCAPIX_META_STRING("get"), jshort>(); }
inline jshort DirectShortBufferU::get(jint i) { return call_method<SCAPIX_META_STRING("get"), jshort>(i); }
inline ref<java::nio::ShortBuffer> DirectShortBufferU::get(ref<link::java::array<jshort>> dst, jint offset, jint length) { return call_method<SCAPIX_META_STRING("get"), ref<java::nio::ShortBuffer>>(dst, offset, length); }
inline ref<java::nio::ShortBuffer> DirectShortBufferU::put(jshort x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ShortBuffer>>(x); }
inline ref<java::nio::ShortBuffer> DirectShortBufferU::put(jint i, jshort x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ShortBuffer>>(i, x); }
inline ref<java::nio::ShortBuffer> DirectShortBufferU::put(ref<java::nio::ShortBuffer> src) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ShortBuffer>>(src); }
inline ref<java::nio::ShortBuffer> DirectShortBufferU::put(ref<link::java::array<jshort>> src, jint offset, jint length) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ShortBuffer>>(src, offset, length); }
inline ref<java::nio::ShortBuffer> DirectShortBufferU::compact() { return call_method<SCAPIX_META_STRING("compact"), ref<java::nio::ShortBuffer>>(); }
inline jboolean DirectShortBufferU::isDirect() { return call_method<SCAPIX_META_STRING("isDirect"), jboolean>(); }
inline jboolean DirectShortBufferU::isReadOnly() { return call_method<SCAPIX_META_STRING("isReadOnly"), jboolean>(); }
inline ref<java::nio::ByteOrder> DirectShortBufferU::order() { return call_method<SCAPIX_META_STRING("order"), ref<java::nio::ByteOrder>>(); }

} // namespace java::nio
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_DIRECTSHORTBUFFERU_H
