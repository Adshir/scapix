// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/DirectShortBufferU.h>
#include <scapix/java_api/sun/nio/ch/DirectBuffer.h>

#ifndef SCAPIX_JAVA_NIO_DIRECTSHORTBUFFERRU_H
#define SCAPIX_JAVA_NIO_DIRECTSHORTBUFFERRU_H

namespace scapix::java_api {

namespace java::nio { class ByteOrder; }
namespace java::nio { class ShortBuffer; }

namespace java::nio {

// private
class DirectShortBufferRU : public object_base<SCAPIX_META_STRING("java/nio/DirectShortBufferRU"),
	java::nio::DirectShortBufferU,
	sun::nio::ch::DirectBuffer>
{
public:

	ref<java::nio::ShortBuffer> slice();
	ref<java::nio::ShortBuffer> duplicate();
	ref<java::nio::ShortBuffer> asReadOnlyBuffer();
	ref<java::nio::ShortBuffer> put(jshort x);
	ref<java::nio::ShortBuffer> put(jint i, jshort x);
	ref<java::nio::ShortBuffer> put(ref<java::nio::ShortBuffer> src);
	ref<java::nio::ShortBuffer> put(ref<link::java::array<jshort>> src, jint offset, jint length);
	ref<java::nio::ShortBuffer> compact();
	jboolean isDirect();
	jboolean isReadOnly();
	ref<java::nio::ByteOrder> order();

protected:

	DirectShortBufferRU(handle_type h) : base_(h) {}

};

} // namespace java::nio
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/ByteOrder.h>
#include <scapix/java_api/java/nio/ShortBuffer.h>

namespace scapix::java_api {
namespace java::nio {

inline ref<java::nio::ShortBuffer> DirectShortBufferRU::slice() { return call_method<SCAPIX_META_STRING("slice"), ref<java::nio::ShortBuffer>>(); }
inline ref<java::nio::ShortBuffer> DirectShortBufferRU::duplicate() { return call_method<SCAPIX_META_STRING("duplicate"), ref<java::nio::ShortBuffer>>(); }
inline ref<java::nio::ShortBuffer> DirectShortBufferRU::asReadOnlyBuffer() { return call_method<SCAPIX_META_STRING("asReadOnlyBuffer"), ref<java::nio::ShortBuffer>>(); }
inline ref<java::nio::ShortBuffer> DirectShortBufferRU::put(jshort x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ShortBuffer>>(x); }
inline ref<java::nio::ShortBuffer> DirectShortBufferRU::put(jint i, jshort x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ShortBuffer>>(i, x); }
inline ref<java::nio::ShortBuffer> DirectShortBufferRU::put(ref<java::nio::ShortBuffer> src) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ShortBuffer>>(src); }
inline ref<java::nio::ShortBuffer> DirectShortBufferRU::put(ref<link::java::array<jshort>> src, jint offset, jint length) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ShortBuffer>>(src, offset, length); }
inline ref<java::nio::ShortBuffer> DirectShortBufferRU::compact() { return call_method<SCAPIX_META_STRING("compact"), ref<java::nio::ShortBuffer>>(); }
inline jboolean DirectShortBufferRU::isDirect() { return call_method<SCAPIX_META_STRING("isDirect"), jboolean>(); }
inline jboolean DirectShortBufferRU::isReadOnly() { return call_method<SCAPIX_META_STRING("isReadOnly"), jboolean>(); }
inline ref<java::nio::ByteOrder> DirectShortBufferRU::order() { return call_method<SCAPIX_META_STRING("order"), ref<java::nio::ByteOrder>>(); }

} // namespace java::nio
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_DIRECTSHORTBUFFERRU_H
