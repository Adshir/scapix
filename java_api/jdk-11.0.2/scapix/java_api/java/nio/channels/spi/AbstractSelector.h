// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/channels/Selector.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTOR_H
#define SCAPIX_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTOR_H

namespace scapix::java_api {

namespace java::nio::channels::spi { class SelectorProvider; }

namespace java::nio::channels::spi {

class AbstractSelector : public object_base<SCAPIX_META_STRING("java/nio/channels/spi/AbstractSelector"),
	java::nio::channels::Selector>
{
public:

	void close();
	jboolean isOpen();
	ref<java::nio::channels::spi::SelectorProvider> provider();

protected:

	AbstractSelector(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels::spi
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/channels/spi/SelectorProvider.h>

namespace scapix::java_api {
namespace java::nio::channels::spi {

inline void AbstractSelector::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jboolean AbstractSelector::isOpen() { return call_method<SCAPIX_META_STRING("isOpen"), jboolean>(); }
inline ref<java::nio::channels::spi::SelectorProvider> AbstractSelector::provider() { return call_method<SCAPIX_META_STRING("provider"), ref<java::nio::channels::spi::SelectorProvider>>(); }

} // namespace java::nio::channels::spi
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTOR_H
