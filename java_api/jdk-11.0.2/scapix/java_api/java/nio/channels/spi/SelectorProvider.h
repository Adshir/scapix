// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_SPI_SELECTORPROVIDER_H
#define SCAPIX_JAVA_NIO_CHANNELS_SPI_SELECTORPROVIDER_H

namespace scapix::java_api {

namespace java::net { class ProtocolFamily; }
namespace java::nio::channels { class Channel; }
namespace java::nio::channels { class DatagramChannel; }
namespace java::nio::channels { class Pipe; }
namespace java::nio::channels { class ServerSocketChannel; }
namespace java::nio::channels { class SocketChannel; }
namespace java::nio::channels::spi { class AbstractSelector; }

namespace java::nio::channels::spi {

class SelectorProvider : public object_base<SCAPIX_META_STRING("java/nio/channels/spi/SelectorProvider"),
	java::lang::Object>
{
public:

	static ref<java::nio::channels::spi::SelectorProvider> provider();
	ref<java::nio::channels::DatagramChannel> openDatagramChannel();
	ref<java::nio::channels::DatagramChannel> openDatagramChannel(ref<java::net::ProtocolFamily> p1);
	ref<java::nio::channels::Pipe> openPipe();
	ref<java::nio::channels::spi::AbstractSelector> openSelector();
	ref<java::nio::channels::ServerSocketChannel> openServerSocketChannel();
	ref<java::nio::channels::SocketChannel> openSocketChannel();
	ref<java::nio::channels::Channel> inheritedChannel();

protected:

	SelectorProvider(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels::spi
} // namespace scapix::java_api

#include <scapix/java_api/java/net/ProtocolFamily.h>
#include <scapix/java_api/java/nio/channels/Channel.h>
#include <scapix/java_api/java/nio/channels/DatagramChannel.h>
#include <scapix/java_api/java/nio/channels/Pipe.h>
#include <scapix/java_api/java/nio/channels/ServerSocketChannel.h>
#include <scapix/java_api/java/nio/channels/SocketChannel.h>
#include <scapix/java_api/java/nio/channels/spi/AbstractSelector.h>

namespace scapix::java_api {
namespace java::nio::channels::spi {

inline ref<java::nio::channels::spi::SelectorProvider> SelectorProvider::provider() { return call_static_method<SCAPIX_META_STRING("provider"), ref<java::nio::channels::spi::SelectorProvider>>(); }
inline ref<java::nio::channels::DatagramChannel> SelectorProvider::openDatagramChannel() { return call_method<SCAPIX_META_STRING("openDatagramChannel"), ref<java::nio::channels::DatagramChannel>>(); }
inline ref<java::nio::channels::DatagramChannel> SelectorProvider::openDatagramChannel(ref<java::net::ProtocolFamily> p1) { return call_method<SCAPIX_META_STRING("openDatagramChannel"), ref<java::nio::channels::DatagramChannel>>(p1); }
inline ref<java::nio::channels::Pipe> SelectorProvider::openPipe() { return call_method<SCAPIX_META_STRING("openPipe"), ref<java::nio::channels::Pipe>>(); }
inline ref<java::nio::channels::spi::AbstractSelector> SelectorProvider::openSelector() { return call_method<SCAPIX_META_STRING("openSelector"), ref<java::nio::channels::spi::AbstractSelector>>(); }
inline ref<java::nio::channels::ServerSocketChannel> SelectorProvider::openServerSocketChannel() { return call_method<SCAPIX_META_STRING("openServerSocketChannel"), ref<java::nio::channels::ServerSocketChannel>>(); }
inline ref<java::nio::channels::SocketChannel> SelectorProvider::openSocketChannel() { return call_method<SCAPIX_META_STRING("openSocketChannel"), ref<java::nio::channels::SocketChannel>>(); }
inline ref<java::nio::channels::Channel> SelectorProvider::inheritedChannel() { return call_method<SCAPIX_META_STRING("inheritedChannel"), ref<java::nio::channels::Channel>>(); }

} // namespace java::nio::channels::spi
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_SPI_SELECTORPROVIDER_H
