// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_SELECTIONKEY_H
#define SCAPIX_JAVA_NIO_CHANNELS_SELECTIONKEY_H

namespace scapix::java_api {

namespace java::nio::channels { class SelectableChannel; }
namespace java::nio::channels { class Selector; }

namespace java::nio::channels {

class SelectionKey : public object_base<SCAPIX_META_STRING("java/nio/channels/SelectionKey"),
	java::lang::Object>
{
public:

	static jint OP_READ_();
	static jint OP_WRITE_();
	static jint OP_CONNECT_();
	static jint OP_ACCEPT_();

	ref<java::nio::channels::SelectableChannel> channel();
	ref<java::nio::channels::Selector> selector();
	jboolean isValid();
	void cancel();
	jint interestOps();
	ref<java::nio::channels::SelectionKey> interestOps(jint p1);
	jint interestOpsOr(jint ops);
	jint interestOpsAnd(jint ops);
	jint readyOps();
	jboolean isReadable();
	jboolean isWritable();
	jboolean isConnectable();
	jboolean isAcceptable();
	ref<java::lang::Object> attach(ref<java::lang::Object> ob);
	ref<java::lang::Object> attachment();

protected:

	SelectionKey(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/channels/SelectableChannel.h>
#include <scapix/java_api/java/nio/channels/Selector.h>

namespace scapix::java_api {
namespace java::nio::channels {

inline jint SelectionKey::OP_READ_() { return get_static_field<SCAPIX_META_STRING("OP_READ"), jint>(); }
inline jint SelectionKey::OP_WRITE_() { return get_static_field<SCAPIX_META_STRING("OP_WRITE"), jint>(); }
inline jint SelectionKey::OP_CONNECT_() { return get_static_field<SCAPIX_META_STRING("OP_CONNECT"), jint>(); }
inline jint SelectionKey::OP_ACCEPT_() { return get_static_field<SCAPIX_META_STRING("OP_ACCEPT"), jint>(); }
inline ref<java::nio::channels::SelectableChannel> SelectionKey::channel() { return call_method<SCAPIX_META_STRING("channel"), ref<java::nio::channels::SelectableChannel>>(); }
inline ref<java::nio::channels::Selector> SelectionKey::selector() { return call_method<SCAPIX_META_STRING("selector"), ref<java::nio::channels::Selector>>(); }
inline jboolean SelectionKey::isValid() { return call_method<SCAPIX_META_STRING("isValid"), jboolean>(); }
inline void SelectionKey::cancel() { return call_method<SCAPIX_META_STRING("cancel"), void>(); }
inline jint SelectionKey::interestOps() { return call_method<SCAPIX_META_STRING("interestOps"), jint>(); }
inline ref<java::nio::channels::SelectionKey> SelectionKey::interestOps(jint p1) { return call_method<SCAPIX_META_STRING("interestOps"), ref<java::nio::channels::SelectionKey>>(p1); }
inline jint SelectionKey::interestOpsOr(jint ops) { return call_method<SCAPIX_META_STRING("interestOpsOr"), jint>(ops); }
inline jint SelectionKey::interestOpsAnd(jint ops) { return call_method<SCAPIX_META_STRING("interestOpsAnd"), jint>(ops); }
inline jint SelectionKey::readyOps() { return call_method<SCAPIX_META_STRING("readyOps"), jint>(); }
inline jboolean SelectionKey::isReadable() { return call_method<SCAPIX_META_STRING("isReadable"), jboolean>(); }
inline jboolean SelectionKey::isWritable() { return call_method<SCAPIX_META_STRING("isWritable"), jboolean>(); }
inline jboolean SelectionKey::isConnectable() { return call_method<SCAPIX_META_STRING("isConnectable"), jboolean>(); }
inline jboolean SelectionKey::isAcceptable() { return call_method<SCAPIX_META_STRING("isAcceptable"), jboolean>(); }
inline ref<java::lang::Object> SelectionKey::attach(ref<java::lang::Object> ob) { return call_method<SCAPIX_META_STRING("attach"), ref<java::lang::Object>>(ob); }
inline ref<java::lang::Object> SelectionKey::attachment() { return call_method<SCAPIX_META_STRING("attachment"), ref<java::lang::Object>>(); }

} // namespace java::nio::channels
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_SELECTIONKEY_H
