// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/channels/ByteChannel.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_SEEKABLEBYTECHANNEL_H
#define SCAPIX_JAVA_NIO_CHANNELS_SEEKABLEBYTECHANNEL_H

namespace scapix::java_api {

namespace java::nio { class ByteBuffer; }

namespace java::nio::channels {

class SeekableByteChannel : public object_base<SCAPIX_META_STRING("java/nio/channels/SeekableByteChannel"),
	java::lang::Object,
	java::nio::channels::ByteChannel>
{
public:

	jint read(ref<java::nio::ByteBuffer> p1);
	jint write(ref<java::nio::ByteBuffer> p1);
	jlong position();
	ref<java::nio::channels::SeekableByteChannel> position(jlong p1);
	jlong size();
	ref<java::nio::channels::SeekableByteChannel> truncate(jlong p1);

protected:

	SeekableByteChannel(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/ByteBuffer.h>

namespace scapix::java_api {
namespace java::nio::channels {

inline jint SeekableByteChannel::read(ref<java::nio::ByteBuffer> p1) { return call_method<SCAPIX_META_STRING("read"), jint>(p1); }
inline jint SeekableByteChannel::write(ref<java::nio::ByteBuffer> p1) { return call_method<SCAPIX_META_STRING("write"), jint>(p1); }
inline jlong SeekableByteChannel::position() { return call_method<SCAPIX_META_STRING("position"), jlong>(); }
inline ref<java::nio::channels::SeekableByteChannel> SeekableByteChannel::position(jlong p1) { return call_method<SCAPIX_META_STRING("position"), ref<java::nio::channels::SeekableByteChannel>>(p1); }
inline jlong SeekableByteChannel::size() { return call_method<SCAPIX_META_STRING("size"), jlong>(); }
inline ref<java::nio::channels::SeekableByteChannel> SeekableByteChannel::truncate(jlong p1) { return call_method<SCAPIX_META_STRING("truncate"), ref<java::nio::channels::SeekableByteChannel>>(p1); }

} // namespace java::nio::channels
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_SEEKABLEBYTECHANNEL_H
