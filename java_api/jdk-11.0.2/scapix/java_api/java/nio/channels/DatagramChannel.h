// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/channels/spi/AbstractSelectableChannel.h>
#include <scapix/java_api/java/nio/channels/ByteChannel.h>
#include <scapix/java_api/java/nio/channels/ScatteringByteChannel.h>
#include <scapix/java_api/java/nio/channels/GatheringByteChannel.h>
#include <scapix/java_api/java/nio/channels/MulticastChannel.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_DATAGRAMCHANNEL_H
#define SCAPIX_JAVA_NIO_CHANNELS_DATAGRAMCHANNEL_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::net { class DatagramSocket; }
namespace java::net { class ProtocolFamily; }
namespace java::net { class SocketAddress; }
namespace java::net { class SocketOption; }
namespace java::nio { class ByteBuffer; }

namespace java::nio::channels {

class DatagramChannel : public object_base<SCAPIX_META_STRING("java/nio/channels/DatagramChannel"),
	java::nio::channels::spi::AbstractSelectableChannel,
	java::nio::channels::ByteChannel,
	java::nio::channels::ScatteringByteChannel,
	java::nio::channels::GatheringByteChannel,
	java::nio::channels::MulticastChannel>
{
public:

	static ref<java::nio::channels::DatagramChannel> open();
	static ref<java::nio::channels::DatagramChannel> open(ref<java::net::ProtocolFamily> family);
	jint validOps();
	ref<java::nio::channels::DatagramChannel> bind(ref<java::net::SocketAddress> p1);
	ref<java::nio::channels::DatagramChannel> setOption(ref<java::net::SocketOption> p1, ref<java::lang::Object> p2);
	ref<java::net::DatagramSocket> socket();
	jboolean isConnected();
	ref<java::nio::channels::DatagramChannel> connect(ref<java::net::SocketAddress> p1);
	ref<java::nio::channels::DatagramChannel> disconnect();
	ref<java::net::SocketAddress> getRemoteAddress();
	ref<java::net::SocketAddress> receive(ref<java::nio::ByteBuffer> p1);
	jint send(ref<java::nio::ByteBuffer> p1, ref<java::net::SocketAddress> p2);
	jint read(ref<java::nio::ByteBuffer> p1);
	jlong read(ref<link::java::array<java::nio::ByteBuffer>> p1, jint p2, jint p3);
	jlong read(ref<link::java::array<java::nio::ByteBuffer>> dsts);
	jint write(ref<java::nio::ByteBuffer> p1);
	jlong write(ref<link::java::array<java::nio::ByteBuffer>> p1, jint p2, jint p3);
	jlong write(ref<link::java::array<java::nio::ByteBuffer>> srcs);
	ref<java::net::SocketAddress> getLocalAddress();

protected:

	DatagramChannel(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/net/DatagramSocket.h>
#include <scapix/java_api/java/net/ProtocolFamily.h>
#include <scapix/java_api/java/net/SocketAddress.h>
#include <scapix/java_api/java/net/SocketOption.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>

namespace scapix::java_api {
namespace java::nio::channels {

inline ref<java::nio::channels::DatagramChannel> DatagramChannel::open() { return call_static_method<SCAPIX_META_STRING("open"), ref<java::nio::channels::DatagramChannel>>(); }
inline ref<java::nio::channels::DatagramChannel> DatagramChannel::open(ref<java::net::ProtocolFamily> family) { return call_static_method<SCAPIX_META_STRING("open"), ref<java::nio::channels::DatagramChannel>>(family); }
inline jint DatagramChannel::validOps() { return call_method<SCAPIX_META_STRING("validOps"), jint>(); }
inline ref<java::nio::channels::DatagramChannel> DatagramChannel::bind(ref<java::net::SocketAddress> p1) { return call_method<SCAPIX_META_STRING("bind"), ref<java::nio::channels::DatagramChannel>>(p1); }
inline ref<java::nio::channels::DatagramChannel> DatagramChannel::setOption(ref<java::net::SocketOption> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("setOption"), ref<java::nio::channels::DatagramChannel>>(p1, p2); }
inline ref<java::net::DatagramSocket> DatagramChannel::socket() { return call_method<SCAPIX_META_STRING("socket"), ref<java::net::DatagramSocket>>(); }
inline jboolean DatagramChannel::isConnected() { return call_method<SCAPIX_META_STRING("isConnected"), jboolean>(); }
inline ref<java::nio::channels::DatagramChannel> DatagramChannel::connect(ref<java::net::SocketAddress> p1) { return call_method<SCAPIX_META_STRING("connect"), ref<java::nio::channels::DatagramChannel>>(p1); }
inline ref<java::nio::channels::DatagramChannel> DatagramChannel::disconnect() { return call_method<SCAPIX_META_STRING("disconnect"), ref<java::nio::channels::DatagramChannel>>(); }
inline ref<java::net::SocketAddress> DatagramChannel::getRemoteAddress() { return call_method<SCAPIX_META_STRING("getRemoteAddress"), ref<java::net::SocketAddress>>(); }
inline ref<java::net::SocketAddress> DatagramChannel::receive(ref<java::nio::ByteBuffer> p1) { return call_method<SCAPIX_META_STRING("receive"), ref<java::net::SocketAddress>>(p1); }
inline jint DatagramChannel::send(ref<java::nio::ByteBuffer> p1, ref<java::net::SocketAddress> p2) { return call_method<SCAPIX_META_STRING("send"), jint>(p1, p2); }
inline jint DatagramChannel::read(ref<java::nio::ByteBuffer> p1) { return call_method<SCAPIX_META_STRING("read"), jint>(p1); }
inline jlong DatagramChannel::read(ref<link::java::array<java::nio::ByteBuffer>> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("read"), jlong>(p1, p2, p3); }
inline jlong DatagramChannel::read(ref<link::java::array<java::nio::ByteBuffer>> dsts) { return call_method<SCAPIX_META_STRING("read"), jlong>(dsts); }
inline jint DatagramChannel::write(ref<java::nio::ByteBuffer> p1) { return call_method<SCAPIX_META_STRING("write"), jint>(p1); }
inline jlong DatagramChannel::write(ref<link::java::array<java::nio::ByteBuffer>> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("write"), jlong>(p1, p2, p3); }
inline jlong DatagramChannel::write(ref<link::java::array<java::nio::ByteBuffer>> srcs) { return call_method<SCAPIX_META_STRING("write"), jlong>(srcs); }
inline ref<java::net::SocketAddress> DatagramChannel::getLocalAddress() { return call_method<SCAPIX_META_STRING("getLocalAddress"), ref<java::net::SocketAddress>>(); }

} // namespace java::nio::channels
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_DATAGRAMCHANNEL_H
