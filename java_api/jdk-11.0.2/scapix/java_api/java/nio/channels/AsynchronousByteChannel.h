// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/channels/AsynchronousChannel.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_ASYNCHRONOUSBYTECHANNEL_H
#define SCAPIX_JAVA_NIO_CHANNELS_ASYNCHRONOUSBYTECHANNEL_H

namespace scapix::java_api {

namespace java::nio { class ByteBuffer; }
namespace java::nio::channels { class CompletionHandler; }
namespace java::util::concurrent { class Future; }

namespace java::nio::channels {

class AsynchronousByteChannel : public object_base<SCAPIX_META_STRING("java/nio/channels/AsynchronousByteChannel"),
	java::lang::Object,
	java::nio::channels::AsynchronousChannel>
{
public:

	void read(ref<java::nio::ByteBuffer> p1, ref<java::lang::Object> p2, ref<java::nio::channels::CompletionHandler> p3);
	ref<java::util::concurrent::Future> read(ref<java::nio::ByteBuffer> p1);
	void write(ref<java::nio::ByteBuffer> p1, ref<java::lang::Object> p2, ref<java::nio::channels::CompletionHandler> p3);
	ref<java::util::concurrent::Future> write(ref<java::nio::ByteBuffer> p1);

protected:

	AsynchronousByteChannel(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/channels/CompletionHandler.h>
#include <scapix/java_api/java/util/concurrent/Future.h>

namespace scapix::java_api {
namespace java::nio::channels {

inline void AsynchronousByteChannel::read(ref<java::nio::ByteBuffer> p1, ref<java::lang::Object> p2, ref<java::nio::channels::CompletionHandler> p3) { return call_method<SCAPIX_META_STRING("read"), void>(p1, p2, p3); }
inline ref<java::util::concurrent::Future> AsynchronousByteChannel::read(ref<java::nio::ByteBuffer> p1) { return call_method<SCAPIX_META_STRING("read"), ref<java::util::concurrent::Future>>(p1); }
inline void AsynchronousByteChannel::write(ref<java::nio::ByteBuffer> p1, ref<java::lang::Object> p2, ref<java::nio::channels::CompletionHandler> p3) { return call_method<SCAPIX_META_STRING("write"), void>(p1, p2, p3); }
inline ref<java::util::concurrent::Future> AsynchronousByteChannel::write(ref<java::nio::ByteBuffer> p1) { return call_method<SCAPIX_META_STRING("write"), ref<java::util::concurrent::Future>>(p1); }

} // namespace java::nio::channels
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_ASYNCHRONOUSBYTECHANNEL_H
