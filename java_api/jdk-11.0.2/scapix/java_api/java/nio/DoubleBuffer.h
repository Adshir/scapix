// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_NIO_DOUBLEBUFFER_H
#define SCAPIX_JAVA_NIO_DOUBLEBUFFER_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::nio { class ByteOrder; }

namespace java::nio {

class DoubleBuffer : public object_base<SCAPIX_META_STRING("java/nio/DoubleBuffer"),
	java::nio::Buffer,
	java::lang::Comparable>
{
public:

	static ref<java::nio::DoubleBuffer> allocate(jint capacity);
	static ref<java::nio::DoubleBuffer> wrap(ref<link::java::array<jdouble>> array, jint offset, jint length);
	static ref<java::nio::DoubleBuffer> wrap(ref<link::java::array<jdouble>> array);
	ref<java::nio::DoubleBuffer> slice();
	ref<java::nio::DoubleBuffer> duplicate();
	ref<java::nio::DoubleBuffer> asReadOnlyBuffer();
	jdouble get();
	ref<java::nio::DoubleBuffer> put(jdouble p1);
	jdouble get(jint p1);
	ref<java::nio::DoubleBuffer> put(jint p1, jdouble p2);
	ref<java::nio::DoubleBuffer> get(ref<link::java::array<jdouble>> dst, jint offset, jint length);
	ref<java::nio::DoubleBuffer> get(ref<link::java::array<jdouble>> dst);
	ref<java::nio::DoubleBuffer> put(ref<java::nio::DoubleBuffer> src);
	ref<java::nio::DoubleBuffer> put(ref<link::java::array<jdouble>> src, jint offset, jint length);
	ref<java::nio::DoubleBuffer> put(ref<link::java::array<jdouble>> src);
	jboolean hasArray();
	ref<link::java::array<jdouble>> array();
	jint arrayOffset();
	ref<java::nio::DoubleBuffer> position(jint newPosition);
	ref<java::nio::DoubleBuffer> limit(jint newLimit);
	ref<java::nio::DoubleBuffer> mark();
	ref<java::nio::DoubleBuffer> reset();
	ref<java::nio::DoubleBuffer> clear();
	ref<java::nio::DoubleBuffer> flip();
	ref<java::nio::DoubleBuffer> rewind();
	ref<java::nio::DoubleBuffer> compact();
	jboolean isDirect();
	ref<java::lang::String> toString();
	jint hashCode();
	jboolean equals(ref<java::lang::Object> ob);
	jint compareTo(ref<java::nio::DoubleBuffer> that);
	jint mismatch(ref<java::nio::DoubleBuffer> that);
	ref<java::nio::ByteOrder> order();

protected:

	DoubleBuffer(handle_type h) : base_(h) {}

};

} // namespace java::nio
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteOrder.h>

namespace scapix::java_api {
namespace java::nio {

inline ref<java::nio::DoubleBuffer> DoubleBuffer::allocate(jint capacity) { return call_static_method<SCAPIX_META_STRING("allocate"), ref<java::nio::DoubleBuffer>>(capacity); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::wrap(ref<link::java::array<jdouble>> array, jint offset, jint length) { return call_static_method<SCAPIX_META_STRING("wrap"), ref<java::nio::DoubleBuffer>>(array, offset, length); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::wrap(ref<link::java::array<jdouble>> array) { return call_static_method<SCAPIX_META_STRING("wrap"), ref<java::nio::DoubleBuffer>>(array); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::slice() { return call_method<SCAPIX_META_STRING("slice"), ref<java::nio::DoubleBuffer>>(); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::duplicate() { return call_method<SCAPIX_META_STRING("duplicate"), ref<java::nio::DoubleBuffer>>(); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::asReadOnlyBuffer() { return call_method<SCAPIX_META_STRING("asReadOnlyBuffer"), ref<java::nio::DoubleBuffer>>(); }
inline jdouble DoubleBuffer::get() { return call_method<SCAPIX_META_STRING("get"), jdouble>(); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::put(jdouble p1) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::DoubleBuffer>>(p1); }
inline jdouble DoubleBuffer::get(jint p1) { return call_method<SCAPIX_META_STRING("get"), jdouble>(p1); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::put(jint p1, jdouble p2) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::DoubleBuffer>>(p1, p2); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::get(ref<link::java::array<jdouble>> dst, jint offset, jint length) { return call_method<SCAPIX_META_STRING("get"), ref<java::nio::DoubleBuffer>>(dst, offset, length); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::get(ref<link::java::array<jdouble>> dst) { return call_method<SCAPIX_META_STRING("get"), ref<java::nio::DoubleBuffer>>(dst); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::put(ref<java::nio::DoubleBuffer> src) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::DoubleBuffer>>(src); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::put(ref<link::java::array<jdouble>> src, jint offset, jint length) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::DoubleBuffer>>(src, offset, length); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::put(ref<link::java::array<jdouble>> src) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::DoubleBuffer>>(src); }
inline jboolean DoubleBuffer::hasArray() { return call_method<SCAPIX_META_STRING("hasArray"), jboolean>(); }
inline ref<link::java::array<jdouble>> DoubleBuffer::array() { return call_method<SCAPIX_META_STRING("array"), ref<link::java::array<jdouble>>>(); }
inline jint DoubleBuffer::arrayOffset() { return call_method<SCAPIX_META_STRING("arrayOffset"), jint>(); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::position(jint newPosition) { return call_method<SCAPIX_META_STRING("position"), ref<java::nio::DoubleBuffer>>(newPosition); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::limit(jint newLimit) { return call_method<SCAPIX_META_STRING("limit"), ref<java::nio::DoubleBuffer>>(newLimit); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::mark() { return call_method<SCAPIX_META_STRING("mark"), ref<java::nio::DoubleBuffer>>(); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::reset() { return call_method<SCAPIX_META_STRING("reset"), ref<java::nio::DoubleBuffer>>(); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::clear() { return call_method<SCAPIX_META_STRING("clear"), ref<java::nio::DoubleBuffer>>(); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::flip() { return call_method<SCAPIX_META_STRING("flip"), ref<java::nio::DoubleBuffer>>(); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::rewind() { return call_method<SCAPIX_META_STRING("rewind"), ref<java::nio::DoubleBuffer>>(); }
inline ref<java::nio::DoubleBuffer> DoubleBuffer::compact() { return call_method<SCAPIX_META_STRING("compact"), ref<java::nio::DoubleBuffer>>(); }
inline jboolean DoubleBuffer::isDirect() { return call_method<SCAPIX_META_STRING("isDirect"), jboolean>(); }
inline ref<java::lang::String> DoubleBuffer::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint DoubleBuffer::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean DoubleBuffer::equals(ref<java::lang::Object> ob) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(ob); }
inline jint DoubleBuffer::compareTo(ref<java::nio::DoubleBuffer> that) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(that); }
inline jint DoubleBuffer::mismatch(ref<java::nio::DoubleBuffer> that) { return call_method<SCAPIX_META_STRING("mismatch"), jint>(that); }
inline ref<java::nio::ByteOrder> DoubleBuffer::order() { return call_method<SCAPIX_META_STRING("order"), ref<java::nio::ByteOrder>>(); }

} // namespace java::nio
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_DOUBLEBUFFER_H
