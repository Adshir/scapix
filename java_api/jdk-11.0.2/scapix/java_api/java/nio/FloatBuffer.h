// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_NIO_FLOATBUFFER_H
#define SCAPIX_JAVA_NIO_FLOATBUFFER_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::nio { class ByteOrder; }

namespace java::nio {

class FloatBuffer : public object_base<SCAPIX_META_STRING("java/nio/FloatBuffer"),
	java::nio::Buffer,
	java::lang::Comparable>
{
public:

	static ref<java::nio::FloatBuffer> allocate(jint capacity);
	static ref<java::nio::FloatBuffer> wrap(ref<link::java::array<jfloat>> array, jint offset, jint length);
	static ref<java::nio::FloatBuffer> wrap(ref<link::java::array<jfloat>> array);
	ref<java::nio::FloatBuffer> slice();
	ref<java::nio::FloatBuffer> duplicate();
	ref<java::nio::FloatBuffer> asReadOnlyBuffer();
	jfloat get();
	ref<java::nio::FloatBuffer> put(jfloat p1);
	jfloat get(jint p1);
	ref<java::nio::FloatBuffer> put(jint p1, jfloat p2);
	ref<java::nio::FloatBuffer> get(ref<link::java::array<jfloat>> dst, jint offset, jint length);
	ref<java::nio::FloatBuffer> get(ref<link::java::array<jfloat>> dst);
	ref<java::nio::FloatBuffer> put(ref<java::nio::FloatBuffer> src);
	ref<java::nio::FloatBuffer> put(ref<link::java::array<jfloat>> src, jint offset, jint length);
	ref<java::nio::FloatBuffer> put(ref<link::java::array<jfloat>> src);
	jboolean hasArray();
	ref<link::java::array<jfloat>> array();
	jint arrayOffset();
	ref<java::nio::FloatBuffer> position(jint newPosition);
	ref<java::nio::FloatBuffer> limit(jint newLimit);
	ref<java::nio::FloatBuffer> mark();
	ref<java::nio::FloatBuffer> reset();
	ref<java::nio::FloatBuffer> clear();
	ref<java::nio::FloatBuffer> flip();
	ref<java::nio::FloatBuffer> rewind();
	ref<java::nio::FloatBuffer> compact();
	jboolean isDirect();
	ref<java::lang::String> toString();
	jint hashCode();
	jboolean equals(ref<java::lang::Object> ob);
	jint compareTo(ref<java::nio::FloatBuffer> that);
	jint mismatch(ref<java::nio::FloatBuffer> that);
	ref<java::nio::ByteOrder> order();

protected:

	FloatBuffer(handle_type h) : base_(h) {}

};

} // namespace java::nio
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteOrder.h>

namespace scapix::java_api {
namespace java::nio {

inline ref<java::nio::FloatBuffer> FloatBuffer::allocate(jint capacity) { return call_static_method<SCAPIX_META_STRING("allocate"), ref<java::nio::FloatBuffer>>(capacity); }
inline ref<java::nio::FloatBuffer> FloatBuffer::wrap(ref<link::java::array<jfloat>> array, jint offset, jint length) { return call_static_method<SCAPIX_META_STRING("wrap"), ref<java::nio::FloatBuffer>>(array, offset, length); }
inline ref<java::nio::FloatBuffer> FloatBuffer::wrap(ref<link::java::array<jfloat>> array) { return call_static_method<SCAPIX_META_STRING("wrap"), ref<java::nio::FloatBuffer>>(array); }
inline ref<java::nio::FloatBuffer> FloatBuffer::slice() { return call_method<SCAPIX_META_STRING("slice"), ref<java::nio::FloatBuffer>>(); }
inline ref<java::nio::FloatBuffer> FloatBuffer::duplicate() { return call_method<SCAPIX_META_STRING("duplicate"), ref<java::nio::FloatBuffer>>(); }
inline ref<java::nio::FloatBuffer> FloatBuffer::asReadOnlyBuffer() { return call_method<SCAPIX_META_STRING("asReadOnlyBuffer"), ref<java::nio::FloatBuffer>>(); }
inline jfloat FloatBuffer::get() { return call_method<SCAPIX_META_STRING("get"), jfloat>(); }
inline ref<java::nio::FloatBuffer> FloatBuffer::put(jfloat p1) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::FloatBuffer>>(p1); }
inline jfloat FloatBuffer::get(jint p1) { return call_method<SCAPIX_META_STRING("get"), jfloat>(p1); }
inline ref<java::nio::FloatBuffer> FloatBuffer::put(jint p1, jfloat p2) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::FloatBuffer>>(p1, p2); }
inline ref<java::nio::FloatBuffer> FloatBuffer::get(ref<link::java::array<jfloat>> dst, jint offset, jint length) { return call_method<SCAPIX_META_STRING("get"), ref<java::nio::FloatBuffer>>(dst, offset, length); }
inline ref<java::nio::FloatBuffer> FloatBuffer::get(ref<link::java::array<jfloat>> dst) { return call_method<SCAPIX_META_STRING("get"), ref<java::nio::FloatBuffer>>(dst); }
inline ref<java::nio::FloatBuffer> FloatBuffer::put(ref<java::nio::FloatBuffer> src) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::FloatBuffer>>(src); }
inline ref<java::nio::FloatBuffer> FloatBuffer::put(ref<link::java::array<jfloat>> src, jint offset, jint length) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::FloatBuffer>>(src, offset, length); }
inline ref<java::nio::FloatBuffer> FloatBuffer::put(ref<link::java::array<jfloat>> src) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::FloatBuffer>>(src); }
inline jboolean FloatBuffer::hasArray() { return call_method<SCAPIX_META_STRING("hasArray"), jboolean>(); }
inline ref<link::java::array<jfloat>> FloatBuffer::array() { return call_method<SCAPIX_META_STRING("array"), ref<link::java::array<jfloat>>>(); }
inline jint FloatBuffer::arrayOffset() { return call_method<SCAPIX_META_STRING("arrayOffset"), jint>(); }
inline ref<java::nio::FloatBuffer> FloatBuffer::position(jint newPosition) { return call_method<SCAPIX_META_STRING("position"), ref<java::nio::FloatBuffer>>(newPosition); }
inline ref<java::nio::FloatBuffer> FloatBuffer::limit(jint newLimit) { return call_method<SCAPIX_META_STRING("limit"), ref<java::nio::FloatBuffer>>(newLimit); }
inline ref<java::nio::FloatBuffer> FloatBuffer::mark() { return call_method<SCAPIX_META_STRING("mark"), ref<java::nio::FloatBuffer>>(); }
inline ref<java::nio::FloatBuffer> FloatBuffer::reset() { return call_method<SCAPIX_META_STRING("reset"), ref<java::nio::FloatBuffer>>(); }
inline ref<java::nio::FloatBuffer> FloatBuffer::clear() { return call_method<SCAPIX_META_STRING("clear"), ref<java::nio::FloatBuffer>>(); }
inline ref<java::nio::FloatBuffer> FloatBuffer::flip() { return call_method<SCAPIX_META_STRING("flip"), ref<java::nio::FloatBuffer>>(); }
inline ref<java::nio::FloatBuffer> FloatBuffer::rewind() { return call_method<SCAPIX_META_STRING("rewind"), ref<java::nio::FloatBuffer>>(); }
inline ref<java::nio::FloatBuffer> FloatBuffer::compact() { return call_method<SCAPIX_META_STRING("compact"), ref<java::nio::FloatBuffer>>(); }
inline jboolean FloatBuffer::isDirect() { return call_method<SCAPIX_META_STRING("isDirect"), jboolean>(); }
inline ref<java::lang::String> FloatBuffer::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint FloatBuffer::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean FloatBuffer::equals(ref<java::lang::Object> ob) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(ob); }
inline jint FloatBuffer::compareTo(ref<java::nio::FloatBuffer> that) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(that); }
inline jint FloatBuffer::mismatch(ref<java::nio::FloatBuffer> that) { return call_method<SCAPIX_META_STRING("mismatch"), jint>(that); }
inline ref<java::nio::ByteOrder> FloatBuffer::order() { return call_method<SCAPIX_META_STRING("order"), ref<java::nio::ByteOrder>>(); }

} // namespace java::nio
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_FLOATBUFFER_H
