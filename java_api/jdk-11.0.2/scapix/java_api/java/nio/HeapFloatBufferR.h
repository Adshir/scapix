// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/HeapFloatBuffer.h>

#ifndef SCAPIX_JAVA_NIO_HEAPFLOATBUFFERR_H
#define SCAPIX_JAVA_NIO_HEAPFLOATBUFFERR_H

namespace scapix::java_api {

namespace java::nio { class ByteOrder; }
namespace java::nio { class FloatBuffer; }

namespace java::nio {

// private
class HeapFloatBufferR : public object_base<SCAPIX_META_STRING("java/nio/HeapFloatBufferR"),
	java::nio::HeapFloatBuffer>
{
public:

	ref<java::nio::FloatBuffer> slice();
	ref<java::nio::FloatBuffer> duplicate();
	ref<java::nio::FloatBuffer> asReadOnlyBuffer();
	jboolean isReadOnly();
	ref<java::nio::FloatBuffer> put(jfloat x);
	ref<java::nio::FloatBuffer> put(jint i, jfloat x);
	ref<java::nio::FloatBuffer> put(ref<link::java::array<jfloat>> src, jint offset, jint length);
	ref<java::nio::FloatBuffer> put(ref<java::nio::FloatBuffer> src);
	ref<java::nio::FloatBuffer> compact();
	ref<java::nio::ByteOrder> order();

protected:

	HeapFloatBufferR(handle_type h) : base_(h) {}

};

} // namespace java::nio
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/ByteOrder.h>
#include <scapix/java_api/java/nio/FloatBuffer.h>

namespace scapix::java_api {
namespace java::nio {

inline ref<java::nio::FloatBuffer> HeapFloatBufferR::slice() { return call_method<SCAPIX_META_STRING("slice"), ref<java::nio::FloatBuffer>>(); }
inline ref<java::nio::FloatBuffer> HeapFloatBufferR::duplicate() { return call_method<SCAPIX_META_STRING("duplicate"), ref<java::nio::FloatBuffer>>(); }
inline ref<java::nio::FloatBuffer> HeapFloatBufferR::asReadOnlyBuffer() { return call_method<SCAPIX_META_STRING("asReadOnlyBuffer"), ref<java::nio::FloatBuffer>>(); }
inline jboolean HeapFloatBufferR::isReadOnly() { return call_method<SCAPIX_META_STRING("isReadOnly"), jboolean>(); }
inline ref<java::nio::FloatBuffer> HeapFloatBufferR::put(jfloat x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::FloatBuffer>>(x); }
inline ref<java::nio::FloatBuffer> HeapFloatBufferR::put(jint i, jfloat x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::FloatBuffer>>(i, x); }
inline ref<java::nio::FloatBuffer> HeapFloatBufferR::put(ref<link::java::array<jfloat>> src, jint offset, jint length) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::FloatBuffer>>(src, offset, length); }
inline ref<java::nio::FloatBuffer> HeapFloatBufferR::put(ref<java::nio::FloatBuffer> src) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::FloatBuffer>>(src); }
inline ref<java::nio::FloatBuffer> HeapFloatBufferR::compact() { return call_method<SCAPIX_META_STRING("compact"), ref<java::nio::FloatBuffer>>(); }
inline ref<java::nio::ByteOrder> HeapFloatBufferR::order() { return call_method<SCAPIX_META_STRING("order"), ref<java::nio::ByteOrder>>(); }

} // namespace java::nio
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_HEAPFLOATBUFFERR_H
