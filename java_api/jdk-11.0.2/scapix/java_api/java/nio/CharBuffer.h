// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/lang/Appendable.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Readable.h>

#ifndef SCAPIX_JAVA_NIO_CHARBUFFER_H
#define SCAPIX_JAVA_NIO_CHARBUFFER_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::nio { class ByteOrder; }
namespace java::util::stream { class IntStream; }

namespace java::nio {

class CharBuffer : public object_base<SCAPIX_META_STRING("java/nio/CharBuffer"),
	java::nio::Buffer,
	java::lang::Comparable,
	java::lang::Appendable,
	java::lang::CharSequence,
	java::lang::Readable>
{
public:

	static ref<java::nio::CharBuffer> allocate(jint capacity);
	static ref<java::nio::CharBuffer> wrap(ref<link::java::array<jchar>> array, jint offset, jint length);
	static ref<java::nio::CharBuffer> wrap(ref<link::java::array<jchar>> array);
	jint read(ref<java::nio::CharBuffer> target);
	static ref<java::nio::CharBuffer> wrap(ref<java::lang::CharSequence> csq, jint start, jint end);
	static ref<java::nio::CharBuffer> wrap(ref<java::lang::CharSequence> csq);
	ref<java::nio::CharBuffer> slice();
	ref<java::nio::CharBuffer> duplicate();
	ref<java::nio::CharBuffer> asReadOnlyBuffer();
	jchar get();
	ref<java::nio::CharBuffer> put(jchar p1);
	jchar get(jint p1);
	ref<java::nio::CharBuffer> put(jint p1, jchar p2);
	ref<java::nio::CharBuffer> get(ref<link::java::array<jchar>> dst, jint offset, jint length);
	ref<java::nio::CharBuffer> get(ref<link::java::array<jchar>> dst);
	ref<java::nio::CharBuffer> put(ref<java::nio::CharBuffer> src);
	ref<java::nio::CharBuffer> put(ref<link::java::array<jchar>> src, jint offset, jint length);
	ref<java::nio::CharBuffer> put(ref<link::java::array<jchar>> src);
	ref<java::nio::CharBuffer> put(ref<java::lang::String> src, jint start, jint end);
	ref<java::nio::CharBuffer> put(ref<java::lang::String> src);
	jboolean hasArray();
	ref<link::java::array<jchar>> array();
	jint arrayOffset();
	ref<java::nio::CharBuffer> position(jint newPosition);
	ref<java::nio::CharBuffer> limit(jint newLimit);
	ref<java::nio::CharBuffer> mark();
	ref<java::nio::CharBuffer> reset();
	ref<java::nio::CharBuffer> clear();
	ref<java::nio::CharBuffer> flip();
	ref<java::nio::CharBuffer> rewind();
	ref<java::nio::CharBuffer> compact();
	jboolean isDirect();
	jint hashCode();
	jboolean equals(ref<java::lang::Object> ob);
	jint compareTo(ref<java::nio::CharBuffer> that);
	jint mismatch(ref<java::nio::CharBuffer> that);
	ref<java::lang::String> toString();
	jint length();
	jchar charAt(jint index);
	ref<java::nio::CharBuffer> subSequence(jint p1, jint p2);
	ref<java::nio::CharBuffer> append(ref<java::lang::CharSequence> csq);
	ref<java::nio::CharBuffer> append(ref<java::lang::CharSequence> csq, jint start, jint end);
	ref<java::nio::CharBuffer> append(jchar c);
	ref<java::nio::ByteOrder> order();
	ref<java::util::stream::IntStream> chars();

protected:

	CharBuffer(handle_type h) : base_(h) {}

};

} // namespace java::nio
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteOrder.h>
#include <scapix/java_api/java/util/stream/IntStream.h>

namespace scapix::java_api {
namespace java::nio {

inline ref<java::nio::CharBuffer> CharBuffer::allocate(jint capacity) { return call_static_method<SCAPIX_META_STRING("allocate"), ref<java::nio::CharBuffer>>(capacity); }
inline ref<java::nio::CharBuffer> CharBuffer::wrap(ref<link::java::array<jchar>> array, jint offset, jint length) { return call_static_method<SCAPIX_META_STRING("wrap"), ref<java::nio::CharBuffer>>(array, offset, length); }
inline ref<java::nio::CharBuffer> CharBuffer::wrap(ref<link::java::array<jchar>> array) { return call_static_method<SCAPIX_META_STRING("wrap"), ref<java::nio::CharBuffer>>(array); }
inline jint CharBuffer::read(ref<java::nio::CharBuffer> target) { return call_method<SCAPIX_META_STRING("read"), jint>(target); }
inline ref<java::nio::CharBuffer> CharBuffer::wrap(ref<java::lang::CharSequence> csq, jint start, jint end) { return call_static_method<SCAPIX_META_STRING("wrap"), ref<java::nio::CharBuffer>>(csq, start, end); }
inline ref<java::nio::CharBuffer> CharBuffer::wrap(ref<java::lang::CharSequence> csq) { return call_static_method<SCAPIX_META_STRING("wrap"), ref<java::nio::CharBuffer>>(csq); }
inline ref<java::nio::CharBuffer> CharBuffer::slice() { return call_method<SCAPIX_META_STRING("slice"), ref<java::nio::CharBuffer>>(); }
inline ref<java::nio::CharBuffer> CharBuffer::duplicate() { return call_method<SCAPIX_META_STRING("duplicate"), ref<java::nio::CharBuffer>>(); }
inline ref<java::nio::CharBuffer> CharBuffer::asReadOnlyBuffer() { return call_method<SCAPIX_META_STRING("asReadOnlyBuffer"), ref<java::nio::CharBuffer>>(); }
inline jchar CharBuffer::get() { return call_method<SCAPIX_META_STRING("get"), jchar>(); }
inline ref<java::nio::CharBuffer> CharBuffer::put(jchar p1) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::CharBuffer>>(p1); }
inline jchar CharBuffer::get(jint p1) { return call_method<SCAPIX_META_STRING("get"), jchar>(p1); }
inline ref<java::nio::CharBuffer> CharBuffer::put(jint p1, jchar p2) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::CharBuffer>>(p1, p2); }
inline ref<java::nio::CharBuffer> CharBuffer::get(ref<link::java::array<jchar>> dst, jint offset, jint length) { return call_method<SCAPIX_META_STRING("get"), ref<java::nio::CharBuffer>>(dst, offset, length); }
inline ref<java::nio::CharBuffer> CharBuffer::get(ref<link::java::array<jchar>> dst) { return call_method<SCAPIX_META_STRING("get"), ref<java::nio::CharBuffer>>(dst); }
inline ref<java::nio::CharBuffer> CharBuffer::put(ref<java::nio::CharBuffer> src) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::CharBuffer>>(src); }
inline ref<java::nio::CharBuffer> CharBuffer::put(ref<link::java::array<jchar>> src, jint offset, jint length) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::CharBuffer>>(src, offset, length); }
inline ref<java::nio::CharBuffer> CharBuffer::put(ref<link::java::array<jchar>> src) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::CharBuffer>>(src); }
inline ref<java::nio::CharBuffer> CharBuffer::put(ref<java::lang::String> src, jint start, jint end) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::CharBuffer>>(src, start, end); }
inline ref<java::nio::CharBuffer> CharBuffer::put(ref<java::lang::String> src) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::CharBuffer>>(src); }
inline jboolean CharBuffer::hasArray() { return call_method<SCAPIX_META_STRING("hasArray"), jboolean>(); }
inline ref<link::java::array<jchar>> CharBuffer::array() { return call_method<SCAPIX_META_STRING("array"), ref<link::java::array<jchar>>>(); }
inline jint CharBuffer::arrayOffset() { return call_method<SCAPIX_META_STRING("arrayOffset"), jint>(); }
inline ref<java::nio::CharBuffer> CharBuffer::position(jint newPosition) { return call_method<SCAPIX_META_STRING("position"), ref<java::nio::CharBuffer>>(newPosition); }
inline ref<java::nio::CharBuffer> CharBuffer::limit(jint newLimit) { return call_method<SCAPIX_META_STRING("limit"), ref<java::nio::CharBuffer>>(newLimit); }
inline ref<java::nio::CharBuffer> CharBuffer::mark() { return call_method<SCAPIX_META_STRING("mark"), ref<java::nio::CharBuffer>>(); }
inline ref<java::nio::CharBuffer> CharBuffer::reset() { return call_method<SCAPIX_META_STRING("reset"), ref<java::nio::CharBuffer>>(); }
inline ref<java::nio::CharBuffer> CharBuffer::clear() { return call_method<SCAPIX_META_STRING("clear"), ref<java::nio::CharBuffer>>(); }
inline ref<java::nio::CharBuffer> CharBuffer::flip() { return call_method<SCAPIX_META_STRING("flip"), ref<java::nio::CharBuffer>>(); }
inline ref<java::nio::CharBuffer> CharBuffer::rewind() { return call_method<SCAPIX_META_STRING("rewind"), ref<java::nio::CharBuffer>>(); }
inline ref<java::nio::CharBuffer> CharBuffer::compact() { return call_method<SCAPIX_META_STRING("compact"), ref<java::nio::CharBuffer>>(); }
inline jboolean CharBuffer::isDirect() { return call_method<SCAPIX_META_STRING("isDirect"), jboolean>(); }
inline jint CharBuffer::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean CharBuffer::equals(ref<java::lang::Object> ob) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(ob); }
inline jint CharBuffer::compareTo(ref<java::nio::CharBuffer> that) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(that); }
inline jint CharBuffer::mismatch(ref<java::nio::CharBuffer> that) { return call_method<SCAPIX_META_STRING("mismatch"), jint>(that); }
inline ref<java::lang::String> CharBuffer::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint CharBuffer::length() { return call_method<SCAPIX_META_STRING("length"), jint>(); }
inline jchar CharBuffer::charAt(jint index) { return call_method<SCAPIX_META_STRING("charAt"), jchar>(index); }
inline ref<java::nio::CharBuffer> CharBuffer::subSequence(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("subSequence"), ref<java::nio::CharBuffer>>(p1, p2); }
inline ref<java::nio::CharBuffer> CharBuffer::append(ref<java::lang::CharSequence> csq) { return call_method<SCAPIX_META_STRING("append"), ref<java::nio::CharBuffer>>(csq); }
inline ref<java::nio::CharBuffer> CharBuffer::append(ref<java::lang::CharSequence> csq, jint start, jint end) { return call_method<SCAPIX_META_STRING("append"), ref<java::nio::CharBuffer>>(csq, start, end); }
inline ref<java::nio::CharBuffer> CharBuffer::append(jchar c) { return call_method<SCAPIX_META_STRING("append"), ref<java::nio::CharBuffer>>(c); }
inline ref<java::nio::ByteOrder> CharBuffer::order() { return call_method<SCAPIX_META_STRING("order"), ref<java::nio::ByteOrder>>(); }
inline ref<java::util::stream::IntStream> CharBuffer::chars() { return call_method<SCAPIX_META_STRING("chars"), ref<java::util::stream::IntStream>>(); }

} // namespace java::nio
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHARBUFFER_H
