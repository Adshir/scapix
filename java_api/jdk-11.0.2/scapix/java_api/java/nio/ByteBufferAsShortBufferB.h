// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/ShortBuffer.h>

#ifndef SCAPIX_JAVA_NIO_BYTEBUFFERASSHORTBUFFERB_H
#define SCAPIX_JAVA_NIO_BYTEBUFFERASSHORTBUFFERB_H

namespace scapix::java_api {

namespace java::nio { class ByteOrder; }

namespace java::nio {

// private
class ByteBufferAsShortBufferB : public object_base<SCAPIX_META_STRING("java/nio/ByteBufferAsShortBufferB"),
	java::nio::ShortBuffer>
{
public:

	ref<java::nio::ShortBuffer> slice();
	ref<java::nio::ShortBuffer> duplicate();
	ref<java::nio::ShortBuffer> asReadOnlyBuffer();
	jshort get();
	jshort get(jint i);
	ref<java::nio::ShortBuffer> put(jshort x);
	ref<java::nio::ShortBuffer> put(jint i, jshort x);
	ref<java::nio::ShortBuffer> compact();
	jboolean isDirect();
	jboolean isReadOnly();
	ref<java::nio::ByteOrder> order();

protected:

	ByteBufferAsShortBufferB(handle_type h) : base_(h) {}

};

} // namespace java::nio
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/ByteOrder.h>

namespace scapix::java_api {
namespace java::nio {

inline ref<java::nio::ShortBuffer> ByteBufferAsShortBufferB::slice() { return call_method<SCAPIX_META_STRING("slice"), ref<java::nio::ShortBuffer>>(); }
inline ref<java::nio::ShortBuffer> ByteBufferAsShortBufferB::duplicate() { return call_method<SCAPIX_META_STRING("duplicate"), ref<java::nio::ShortBuffer>>(); }
inline ref<java::nio::ShortBuffer> ByteBufferAsShortBufferB::asReadOnlyBuffer() { return call_method<SCAPIX_META_STRING("asReadOnlyBuffer"), ref<java::nio::ShortBuffer>>(); }
inline jshort ByteBufferAsShortBufferB::get() { return call_method<SCAPIX_META_STRING("get"), jshort>(); }
inline jshort ByteBufferAsShortBufferB::get(jint i) { return call_method<SCAPIX_META_STRING("get"), jshort>(i); }
inline ref<java::nio::ShortBuffer> ByteBufferAsShortBufferB::put(jshort x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ShortBuffer>>(x); }
inline ref<java::nio::ShortBuffer> ByteBufferAsShortBufferB::put(jint i, jshort x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ShortBuffer>>(i, x); }
inline ref<java::nio::ShortBuffer> ByteBufferAsShortBufferB::compact() { return call_method<SCAPIX_META_STRING("compact"), ref<java::nio::ShortBuffer>>(); }
inline jboolean ByteBufferAsShortBufferB::isDirect() { return call_method<SCAPIX_META_STRING("isDirect"), jboolean>(); }
inline jboolean ByteBufferAsShortBufferB::isReadOnly() { return call_method<SCAPIX_META_STRING("isReadOnly"), jboolean>(); }
inline ref<java::nio::ByteOrder> ByteBufferAsShortBufferB::order() { return call_method<SCAPIX_META_STRING("order"), ref<java::nio::ByteOrder>>(); }

} // namespace java::nio
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_BYTEBUFFERASSHORTBUFFERB_H
