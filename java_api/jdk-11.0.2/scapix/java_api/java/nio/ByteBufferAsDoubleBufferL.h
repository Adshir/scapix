// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/DoubleBuffer.h>

#ifndef SCAPIX_JAVA_NIO_BYTEBUFFERASDOUBLEBUFFERL_H
#define SCAPIX_JAVA_NIO_BYTEBUFFERASDOUBLEBUFFERL_H

namespace scapix::java_api {

namespace java::nio { class ByteOrder; }

namespace java::nio {

// private
class ByteBufferAsDoubleBufferL : public object_base<SCAPIX_META_STRING("java/nio/ByteBufferAsDoubleBufferL"),
	java::nio::DoubleBuffer>
{
public:

	ref<java::nio::DoubleBuffer> slice();
	ref<java::nio::DoubleBuffer> duplicate();
	ref<java::nio::DoubleBuffer> asReadOnlyBuffer();
	jdouble get();
	jdouble get(jint i);
	ref<java::nio::DoubleBuffer> put(jdouble x);
	ref<java::nio::DoubleBuffer> put(jint i, jdouble x);
	ref<java::nio::DoubleBuffer> compact();
	jboolean isDirect();
	jboolean isReadOnly();
	ref<java::nio::ByteOrder> order();

protected:

	ByteBufferAsDoubleBufferL(handle_type h) : base_(h) {}

};

} // namespace java::nio
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/ByteOrder.h>

namespace scapix::java_api {
namespace java::nio {

inline ref<java::nio::DoubleBuffer> ByteBufferAsDoubleBufferL::slice() { return call_method<SCAPIX_META_STRING("slice"), ref<java::nio::DoubleBuffer>>(); }
inline ref<java::nio::DoubleBuffer> ByteBufferAsDoubleBufferL::duplicate() { return call_method<SCAPIX_META_STRING("duplicate"), ref<java::nio::DoubleBuffer>>(); }
inline ref<java::nio::DoubleBuffer> ByteBufferAsDoubleBufferL::asReadOnlyBuffer() { return call_method<SCAPIX_META_STRING("asReadOnlyBuffer"), ref<java::nio::DoubleBuffer>>(); }
inline jdouble ByteBufferAsDoubleBufferL::get() { return call_method<SCAPIX_META_STRING("get"), jdouble>(); }
inline jdouble ByteBufferAsDoubleBufferL::get(jint i) { return call_method<SCAPIX_META_STRING("get"), jdouble>(i); }
inline ref<java::nio::DoubleBuffer> ByteBufferAsDoubleBufferL::put(jdouble x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::DoubleBuffer>>(x); }
inline ref<java::nio::DoubleBuffer> ByteBufferAsDoubleBufferL::put(jint i, jdouble x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::DoubleBuffer>>(i, x); }
inline ref<java::nio::DoubleBuffer> ByteBufferAsDoubleBufferL::compact() { return call_method<SCAPIX_META_STRING("compact"), ref<java::nio::DoubleBuffer>>(); }
inline jboolean ByteBufferAsDoubleBufferL::isDirect() { return call_method<SCAPIX_META_STRING("isDirect"), jboolean>(); }
inline jboolean ByteBufferAsDoubleBufferL::isReadOnly() { return call_method<SCAPIX_META_STRING("isReadOnly"), jboolean>(); }
inline ref<java::nio::ByteOrder> ByteBufferAsDoubleBufferL::order() { return call_method<SCAPIX_META_STRING("order"), ref<java::nio::ByteOrder>>(); }

} // namespace java::nio
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_BYTEBUFFERASDOUBLEBUFFERL_H
