// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/FloatBuffer.h>
#include <scapix/java_api/sun/nio/ch/DirectBuffer.h>

#ifndef SCAPIX_JAVA_NIO_DIRECTFLOATBUFFERS_H
#define SCAPIX_JAVA_NIO_DIRECTFLOATBUFFERS_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::nio { class ByteOrder; }
namespace jdk::internal::ref { class Cleaner; }

namespace java::nio {

// private
class DirectFloatBufferS : public object_base<SCAPIX_META_STRING("java/nio/DirectFloatBufferS"),
	java::nio::FloatBuffer,
	sun::nio::ch::DirectBuffer>
{
public:

	ref<java::lang::Object> attachment();
	ref<jdk::internal::ref::Cleaner> cleaner();
	ref<java::nio::FloatBuffer> slice();
	ref<java::nio::FloatBuffer> duplicate();
	ref<java::nio::FloatBuffer> asReadOnlyBuffer();
	jlong address();
	jfloat get();
	jfloat get(jint i);
	ref<java::nio::FloatBuffer> get(ref<link::java::array<jfloat>> dst, jint offset, jint length);
	ref<java::nio::FloatBuffer> put(jfloat x);
	ref<java::nio::FloatBuffer> put(jint i, jfloat x);
	ref<java::nio::FloatBuffer> put(ref<java::nio::FloatBuffer> src);
	ref<java::nio::FloatBuffer> put(ref<link::java::array<jfloat>> src, jint offset, jint length);
	ref<java::nio::FloatBuffer> compact();
	jboolean isDirect();
	jboolean isReadOnly();
	ref<java::nio::ByteOrder> order();

protected:

	DirectFloatBufferS(handle_type h) : base_(h) {}

};

} // namespace java::nio
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/ByteOrder.h>
#include <scapix/java_api/jdk/internal/ref/Cleaner.h>

namespace scapix::java_api {
namespace java::nio {

inline ref<java::lang::Object> DirectFloatBufferS::attachment() { return call_method<SCAPIX_META_STRING("attachment"), ref<java::lang::Object>>(); }
inline ref<jdk::internal::ref::Cleaner> DirectFloatBufferS::cleaner() { return call_method<SCAPIX_META_STRING("cleaner"), ref<jdk::internal::ref::Cleaner>>(); }
inline ref<java::nio::FloatBuffer> DirectFloatBufferS::slice() { return call_method<SCAPIX_META_STRING("slice"), ref<java::nio::FloatBuffer>>(); }
inline ref<java::nio::FloatBuffer> DirectFloatBufferS::duplicate() { return call_method<SCAPIX_META_STRING("duplicate"), ref<java::nio::FloatBuffer>>(); }
inline ref<java::nio::FloatBuffer> DirectFloatBufferS::asReadOnlyBuffer() { return call_method<SCAPIX_META_STRING("asReadOnlyBuffer"), ref<java::nio::FloatBuffer>>(); }
inline jlong DirectFloatBufferS::address() { return call_method<SCAPIX_META_STRING("address"), jlong>(); }
inline jfloat DirectFloatBufferS::get() { return call_method<SCAPIX_META_STRING("get"), jfloat>(); }
inline jfloat DirectFloatBufferS::get(jint i) { return call_method<SCAPIX_META_STRING("get"), jfloat>(i); }
inline ref<java::nio::FloatBuffer> DirectFloatBufferS::get(ref<link::java::array<jfloat>> dst, jint offset, jint length) { return call_method<SCAPIX_META_STRING("get"), ref<java::nio::FloatBuffer>>(dst, offset, length); }
inline ref<java::nio::FloatBuffer> DirectFloatBufferS::put(jfloat x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::FloatBuffer>>(x); }
inline ref<java::nio::FloatBuffer> DirectFloatBufferS::put(jint i, jfloat x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::FloatBuffer>>(i, x); }
inline ref<java::nio::FloatBuffer> DirectFloatBufferS::put(ref<java::nio::FloatBuffer> src) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::FloatBuffer>>(src); }
inline ref<java::nio::FloatBuffer> DirectFloatBufferS::put(ref<link::java::array<jfloat>> src, jint offset, jint length) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::FloatBuffer>>(src, offset, length); }
inline ref<java::nio::FloatBuffer> DirectFloatBufferS::compact() { return call_method<SCAPIX_META_STRING("compact"), ref<java::nio::FloatBuffer>>(); }
inline jboolean DirectFloatBufferS::isDirect() { return call_method<SCAPIX_META_STRING("isDirect"), jboolean>(); }
inline jboolean DirectFloatBufferS::isReadOnly() { return call_method<SCAPIX_META_STRING("isReadOnly"), jboolean>(); }
inline ref<java::nio::ByteOrder> DirectFloatBufferS::order() { return call_method<SCAPIX_META_STRING("order"), ref<java::nio::ByteOrder>>(); }

} // namespace java::nio
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_DIRECTFLOATBUFFERS_H
