// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/MappedByteBuffer.h>
#include <scapix/java_api/sun/nio/ch/DirectBuffer.h>

#ifndef SCAPIX_JAVA_NIO_DIRECTBYTEBUFFER_H
#define SCAPIX_JAVA_NIO_DIRECTBYTEBUFFER_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::nio { class ByteBuffer; }
namespace java::nio { class CharBuffer; }
namespace java::nio { class DoubleBuffer; }
namespace java::nio { class FloatBuffer; }
namespace java::nio { class IntBuffer; }
namespace java::nio { class LongBuffer; }
namespace java::nio { class ShortBuffer; }
namespace jdk::internal::ref { class Cleaner; }

namespace java::nio {

// private
class DirectByteBuffer : public object_base<SCAPIX_META_STRING("java/nio/DirectByteBuffer"),
	java::nio::MappedByteBuffer,
	sun::nio::ch::DirectBuffer>
{
public:

	ref<java::lang::Object> attachment();
	ref<jdk::internal::ref::Cleaner> cleaner();
	ref<java::nio::ByteBuffer> slice();
	ref<java::nio::ByteBuffer> slice(jint pos, jint lim);
	ref<java::nio::ByteBuffer> duplicate();
	ref<java::nio::ByteBuffer> asReadOnlyBuffer();
	jlong address();
	jbyte get();
	jbyte get(jint i);
	ref<java::nio::ByteBuffer> get(ref<link::java::array<jbyte>> dst, jint offset, jint length);
	ref<java::nio::ByteBuffer> put(jbyte x);
	ref<java::nio::ByteBuffer> put(jint i, jbyte x);
	ref<java::nio::ByteBuffer> put(ref<java::nio::ByteBuffer> src);
	ref<java::nio::ByteBuffer> put(ref<link::java::array<jbyte>> src, jint offset, jint length);
	ref<java::nio::ByteBuffer> compact();
	jboolean isDirect();
	jboolean isReadOnly();
	jchar getChar();
	jchar getChar(jint i);
	ref<java::nio::ByteBuffer> putChar(jchar x);
	ref<java::nio::ByteBuffer> putChar(jint i, jchar x);
	ref<java::nio::CharBuffer> asCharBuffer();
	jshort getShort();
	jshort getShort(jint i);
	ref<java::nio::ByteBuffer> putShort(jshort x);
	ref<java::nio::ByteBuffer> putShort(jint i, jshort x);
	ref<java::nio::ShortBuffer> asShortBuffer();
	jint getInt();
	jint getInt(jint i);
	ref<java::nio::ByteBuffer> putInt(jint x);
	ref<java::nio::ByteBuffer> putInt(jint i, jint x);
	ref<java::nio::IntBuffer> asIntBuffer();
	jlong getLong();
	jlong getLong(jint i);
	ref<java::nio::ByteBuffer> putLong(jlong x);
	ref<java::nio::ByteBuffer> putLong(jint i, jlong x);
	ref<java::nio::LongBuffer> asLongBuffer();
	jfloat getFloat();
	jfloat getFloat(jint i);
	ref<java::nio::ByteBuffer> putFloat(jfloat x);
	ref<java::nio::ByteBuffer> putFloat(jint i, jfloat x);
	ref<java::nio::FloatBuffer> asFloatBuffer();
	jdouble getDouble();
	jdouble getDouble(jint i);
	ref<java::nio::ByteBuffer> putDouble(jdouble x);
	ref<java::nio::ByteBuffer> putDouble(jint i, jdouble x);
	ref<java::nio::DoubleBuffer> asDoubleBuffer();

protected:

	DirectByteBuffer(handle_type h) : base_(h) {}

};

} // namespace java::nio
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/CharBuffer.h>
#include <scapix/java_api/java/nio/DoubleBuffer.h>
#include <scapix/java_api/java/nio/FloatBuffer.h>
#include <scapix/java_api/java/nio/IntBuffer.h>
#include <scapix/java_api/java/nio/LongBuffer.h>
#include <scapix/java_api/java/nio/ShortBuffer.h>
#include <scapix/java_api/jdk/internal/ref/Cleaner.h>

namespace scapix::java_api {
namespace java::nio {

inline ref<java::lang::Object> DirectByteBuffer::attachment() { return call_method<SCAPIX_META_STRING("attachment"), ref<java::lang::Object>>(); }
inline ref<jdk::internal::ref::Cleaner> DirectByteBuffer::cleaner() { return call_method<SCAPIX_META_STRING("cleaner"), ref<jdk::internal::ref::Cleaner>>(); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::slice() { return call_method<SCAPIX_META_STRING("slice"), ref<java::nio::ByteBuffer>>(); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::slice(jint pos, jint lim) { return call_method<SCAPIX_META_STRING("slice"), ref<java::nio::ByteBuffer>>(pos, lim); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::duplicate() { return call_method<SCAPIX_META_STRING("duplicate"), ref<java::nio::ByteBuffer>>(); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::asReadOnlyBuffer() { return call_method<SCAPIX_META_STRING("asReadOnlyBuffer"), ref<java::nio::ByteBuffer>>(); }
inline jlong DirectByteBuffer::address() { return call_method<SCAPIX_META_STRING("address"), jlong>(); }
inline jbyte DirectByteBuffer::get() { return call_method<SCAPIX_META_STRING("get"), jbyte>(); }
inline jbyte DirectByteBuffer::get(jint i) { return call_method<SCAPIX_META_STRING("get"), jbyte>(i); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::get(ref<link::java::array<jbyte>> dst, jint offset, jint length) { return call_method<SCAPIX_META_STRING("get"), ref<java::nio::ByteBuffer>>(dst, offset, length); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::put(jbyte x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ByteBuffer>>(x); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::put(jint i, jbyte x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ByteBuffer>>(i, x); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::put(ref<java::nio::ByteBuffer> src) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ByteBuffer>>(src); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::put(ref<link::java::array<jbyte>> src, jint offset, jint length) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ByteBuffer>>(src, offset, length); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::compact() { return call_method<SCAPIX_META_STRING("compact"), ref<java::nio::ByteBuffer>>(); }
inline jboolean DirectByteBuffer::isDirect() { return call_method<SCAPIX_META_STRING("isDirect"), jboolean>(); }
inline jboolean DirectByteBuffer::isReadOnly() { return call_method<SCAPIX_META_STRING("isReadOnly"), jboolean>(); }
inline jchar DirectByteBuffer::getChar() { return call_method<SCAPIX_META_STRING("getChar"), jchar>(); }
inline jchar DirectByteBuffer::getChar(jint i) { return call_method<SCAPIX_META_STRING("getChar"), jchar>(i); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::putChar(jchar x) { return call_method<SCAPIX_META_STRING("putChar"), ref<java::nio::ByteBuffer>>(x); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::putChar(jint i, jchar x) { return call_method<SCAPIX_META_STRING("putChar"), ref<java::nio::ByteBuffer>>(i, x); }
inline ref<java::nio::CharBuffer> DirectByteBuffer::asCharBuffer() { return call_method<SCAPIX_META_STRING("asCharBuffer"), ref<java::nio::CharBuffer>>(); }
inline jshort DirectByteBuffer::getShort() { return call_method<SCAPIX_META_STRING("getShort"), jshort>(); }
inline jshort DirectByteBuffer::getShort(jint i) { return call_method<SCAPIX_META_STRING("getShort"), jshort>(i); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::putShort(jshort x) { return call_method<SCAPIX_META_STRING("putShort"), ref<java::nio::ByteBuffer>>(x); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::putShort(jint i, jshort x) { return call_method<SCAPIX_META_STRING("putShort"), ref<java::nio::ByteBuffer>>(i, x); }
inline ref<java::nio::ShortBuffer> DirectByteBuffer::asShortBuffer() { return call_method<SCAPIX_META_STRING("asShortBuffer"), ref<java::nio::ShortBuffer>>(); }
inline jint DirectByteBuffer::getInt() { return call_method<SCAPIX_META_STRING("getInt"), jint>(); }
inline jint DirectByteBuffer::getInt(jint i) { return call_method<SCAPIX_META_STRING("getInt"), jint>(i); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::putInt(jint x) { return call_method<SCAPIX_META_STRING("putInt"), ref<java::nio::ByteBuffer>>(x); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::putInt(jint i, jint x) { return call_method<SCAPIX_META_STRING("putInt"), ref<java::nio::ByteBuffer>>(i, x); }
inline ref<java::nio::IntBuffer> DirectByteBuffer::asIntBuffer() { return call_method<SCAPIX_META_STRING("asIntBuffer"), ref<java::nio::IntBuffer>>(); }
inline jlong DirectByteBuffer::getLong() { return call_method<SCAPIX_META_STRING("getLong"), jlong>(); }
inline jlong DirectByteBuffer::getLong(jint i) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(i); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::putLong(jlong x) { return call_method<SCAPIX_META_STRING("putLong"), ref<java::nio::ByteBuffer>>(x); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::putLong(jint i, jlong x) { return call_method<SCAPIX_META_STRING("putLong"), ref<java::nio::ByteBuffer>>(i, x); }
inline ref<java::nio::LongBuffer> DirectByteBuffer::asLongBuffer() { return call_method<SCAPIX_META_STRING("asLongBuffer"), ref<java::nio::LongBuffer>>(); }
inline jfloat DirectByteBuffer::getFloat() { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(); }
inline jfloat DirectByteBuffer::getFloat(jint i) { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(i); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::putFloat(jfloat x) { return call_method<SCAPIX_META_STRING("putFloat"), ref<java::nio::ByteBuffer>>(x); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::putFloat(jint i, jfloat x) { return call_method<SCAPIX_META_STRING("putFloat"), ref<java::nio::ByteBuffer>>(i, x); }
inline ref<java::nio::FloatBuffer> DirectByteBuffer::asFloatBuffer() { return call_method<SCAPIX_META_STRING("asFloatBuffer"), ref<java::nio::FloatBuffer>>(); }
inline jdouble DirectByteBuffer::getDouble() { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(); }
inline jdouble DirectByteBuffer::getDouble(jint i) { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(i); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::putDouble(jdouble x) { return call_method<SCAPIX_META_STRING("putDouble"), ref<java::nio::ByteBuffer>>(x); }
inline ref<java::nio::ByteBuffer> DirectByteBuffer::putDouble(jint i, jdouble x) { return call_method<SCAPIX_META_STRING("putDouble"), ref<java::nio::ByteBuffer>>(i, x); }
inline ref<java::nio::DoubleBuffer> DirectByteBuffer::asDoubleBuffer() { return call_method<SCAPIX_META_STRING("asDoubleBuffer"), ref<java::nio::DoubleBuffer>>(); }

} // namespace java::nio
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_DIRECTBYTEBUFFER_H
