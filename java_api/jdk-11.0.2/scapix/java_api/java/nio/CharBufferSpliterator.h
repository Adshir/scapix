// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Spliterator_OfInt.h>

#ifndef SCAPIX_JAVA_NIO_CHARBUFFERSPLITERATOR_H
#define SCAPIX_JAVA_NIO_CHARBUFFERSPLITERATOR_H

namespace scapix::java_api {

namespace java::util::function { class IntConsumer; }

namespace java::nio {

// private
class CharBufferSpliterator : public object_base<SCAPIX_META_STRING("java/nio/CharBufferSpliterator"),
	java::lang::Object,
	java::util::Spliterator_OfInt>
{
public:

	ref<java::util::Spliterator_OfInt> trySplit();
	void forEachRemaining(ref<java::util::function::IntConsumer> action);
	jboolean tryAdvance(ref<java::util::function::IntConsumer> action);
	jlong estimateSize();
	jint characteristics();

protected:

	CharBufferSpliterator(handle_type h) : base_(h) {}

};

} // namespace java::nio
} // namespace scapix::java_api

#include <scapix/java_api/java/util/function/IntConsumer.h>

namespace scapix::java_api {
namespace java::nio {

inline ref<java::util::Spliterator_OfInt> CharBufferSpliterator::trySplit() { return call_method<SCAPIX_META_STRING("trySplit"), ref<java::util::Spliterator_OfInt>>(); }
inline void CharBufferSpliterator::forEachRemaining(ref<java::util::function::IntConsumer> action) { return call_method<SCAPIX_META_STRING("forEachRemaining"), void>(action); }
inline jboolean CharBufferSpliterator::tryAdvance(ref<java::util::function::IntConsumer> action) { return call_method<SCAPIX_META_STRING("tryAdvance"), jboolean>(action); }
inline jlong CharBufferSpliterator::estimateSize() { return call_method<SCAPIX_META_STRING("estimateSize"), jlong>(); }
inline jint CharBufferSpliterator::characteristics() { return call_method<SCAPIX_META_STRING("characteristics"), jint>(); }

} // namespace java::nio
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHARBUFFERSPLITERATOR_H
