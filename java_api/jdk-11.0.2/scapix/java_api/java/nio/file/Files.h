// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_NIO_FILE_FILES_H
#define SCAPIX_JAVA_NIO_FILE_FILES_H

namespace scapix::java_api {

namespace java::io { class BufferedReader; }
namespace java::io { class BufferedWriter; }
namespace java::io { class InputStream; }
namespace java::io { class OutputStream; }
namespace java::lang { class CharSequence; }
namespace java::lang { class Class; }
namespace java::lang { class Iterable; }
namespace java::lang { class String; }
namespace java::nio::channels { class SeekableByteChannel; }
namespace java::nio::charset { class Charset; }
namespace java::nio::file { class CopyOption; }
namespace java::nio::file { class DirectoryStream; }
namespace java::nio::file { class DirectoryStream_Filter; }
namespace java::nio::file { class FileStore; }
namespace java::nio::file { class FileVisitOption; }
namespace java::nio::file { class FileVisitor; }
namespace java::nio::file { class LinkOption; }
namespace java::nio::file { class OpenOption; }
namespace java::nio::file { class Path; }
namespace java::nio::file::attribute { class BasicFileAttributes; }
namespace java::nio::file::attribute { class FileAttribute; }
namespace java::nio::file::attribute { class FileAttributeView; }
namespace java::nio::file::attribute { class FileTime; }
namespace java::nio::file::attribute { class UserPrincipal; }
namespace java::util { class List; }
namespace java::util { class Map; }
namespace java::util { class Set; }
namespace java::util::function { class BiPredicate; }
namespace java::util::stream { class Stream; }

namespace java::nio::file {

class Files : public object_base<SCAPIX_META_STRING("java/nio/file/Files"),
	java::lang::Object>
{
public:

	static ref<java::io::InputStream> newInputStream(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::OpenOption>> options);
	static ref<java::io::OutputStream> newOutputStream(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::OpenOption>> options);
	static ref<java::nio::channels::SeekableByteChannel> newByteChannel(ref<java::nio::file::Path> path, ref<java::util::Set> options, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs);
	static ref<java::nio::channels::SeekableByteChannel> newByteChannel(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::OpenOption>> options);
	static ref<java::nio::file::DirectoryStream> newDirectoryStream(ref<java::nio::file::Path> dir);
	static ref<java::nio::file::DirectoryStream> newDirectoryStream(ref<java::nio::file::Path> dir, ref<java::lang::String> glob);
	static ref<java::nio::file::DirectoryStream> newDirectoryStream(ref<java::nio::file::Path> dir, ref<java::nio::file::DirectoryStream_Filter> filter);
	static ref<java::nio::file::Path> createFile(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs);
	static ref<java::nio::file::Path> createDirectory(ref<java::nio::file::Path> dir, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs);
	static ref<java::nio::file::Path> createDirectories(ref<java::nio::file::Path> dir, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs);
	static ref<java::nio::file::Path> createTempFile(ref<java::nio::file::Path> dir, ref<java::lang::String> prefix, ref<java::lang::String> suffix, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs);
	static ref<java::nio::file::Path> createTempFile(ref<java::lang::String> prefix, ref<java::lang::String> suffix, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs);
	static ref<java::nio::file::Path> createTempDirectory(ref<java::nio::file::Path> dir, ref<java::lang::String> prefix, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs);
	static ref<java::nio::file::Path> createTempDirectory(ref<java::lang::String> prefix, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs);
	static ref<java::nio::file::Path> createSymbolicLink(ref<java::nio::file::Path> link, ref<java::nio::file::Path> target, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs);
	static ref<java::nio::file::Path> createLink(ref<java::nio::file::Path> link, ref<java::nio::file::Path> existing);
	static void delete_(ref<java::nio::file::Path> path);
	static jboolean deleteIfExists(ref<java::nio::file::Path> path);
	static ref<java::nio::file::Path> copy(ref<java::nio::file::Path> source, ref<java::nio::file::Path> target, ref<link::java::array<java::nio::file::CopyOption>> options);
	static ref<java::nio::file::Path> move(ref<java::nio::file::Path> source, ref<java::nio::file::Path> target, ref<link::java::array<java::nio::file::CopyOption>> options);
	static ref<java::nio::file::Path> readSymbolicLink(ref<java::nio::file::Path> link);
	static ref<java::nio::file::FileStore> getFileStore(ref<java::nio::file::Path> path);
	static jboolean isSameFile(ref<java::nio::file::Path> path, ref<java::nio::file::Path> path2);
	static jboolean isHidden(ref<java::nio::file::Path> path);
	static ref<java::lang::String> probeContentType(ref<java::nio::file::Path> path);
	static ref<java::nio::file::attribute::FileAttributeView> getFileAttributeView(ref<java::nio::file::Path> path, ref<java::lang::Class> type, ref<link::java::array<java::nio::file::LinkOption>> options);
	static ref<java::nio::file::attribute::BasicFileAttributes> readAttributes(ref<java::nio::file::Path> path, ref<java::lang::Class> type, ref<link::java::array<java::nio::file::LinkOption>> options);
	static ref<java::nio::file::Path> setAttribute(ref<java::nio::file::Path> path, ref<java::lang::String> attribute, ref<java::lang::Object> value, ref<link::java::array<java::nio::file::LinkOption>> options);
	static ref<java::lang::Object> getAttribute(ref<java::nio::file::Path> path, ref<java::lang::String> attribute, ref<link::java::array<java::nio::file::LinkOption>> options);
	static ref<java::util::Map> readAttributes(ref<java::nio::file::Path> path, ref<java::lang::String> attributes, ref<link::java::array<java::nio::file::LinkOption>> options);
	static ref<java::util::Set> getPosixFilePermissions(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::LinkOption>> options);
	static ref<java::nio::file::Path> setPosixFilePermissions(ref<java::nio::file::Path> path, ref<java::util::Set> perms);
	static ref<java::nio::file::attribute::UserPrincipal> getOwner(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::LinkOption>> options);
	static ref<java::nio::file::Path> setOwner(ref<java::nio::file::Path> path, ref<java::nio::file::attribute::UserPrincipal> owner);
	static jboolean isSymbolicLink(ref<java::nio::file::Path> path);
	static jboolean isDirectory(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::LinkOption>> options);
	static jboolean isRegularFile(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::LinkOption>> options);
	static ref<java::nio::file::attribute::FileTime> getLastModifiedTime(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::LinkOption>> options);
	static ref<java::nio::file::Path> setLastModifiedTime(ref<java::nio::file::Path> path, ref<java::nio::file::attribute::FileTime> time);
	static jlong size(ref<java::nio::file::Path> path);
	static jboolean exists(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::LinkOption>> options);
	static jboolean notExists(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::LinkOption>> options);
	static jboolean isReadable(ref<java::nio::file::Path> path);
	static jboolean isWritable(ref<java::nio::file::Path> path);
	static jboolean isExecutable(ref<java::nio::file::Path> path);
	static ref<java::nio::file::Path> walkFileTree(ref<java::nio::file::Path> start, ref<java::util::Set> options, jint maxDepth, ref<java::nio::file::FileVisitor> visitor);
	static ref<java::nio::file::Path> walkFileTree(ref<java::nio::file::Path> start, ref<java::nio::file::FileVisitor> visitor);
	static ref<java::io::BufferedReader> newBufferedReader(ref<java::nio::file::Path> path, ref<java::nio::charset::Charset> cs);
	static ref<java::io::BufferedReader> newBufferedReader(ref<java::nio::file::Path> path);
	static ref<java::io::BufferedWriter> newBufferedWriter(ref<java::nio::file::Path> path, ref<java::nio::charset::Charset> cs, ref<link::java::array<java::nio::file::OpenOption>> options);
	static ref<java::io::BufferedWriter> newBufferedWriter(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::OpenOption>> options);
	static jlong copy(ref<java::io::InputStream> in, ref<java::nio::file::Path> target, ref<link::java::array<java::nio::file::CopyOption>> options);
	static jlong copy(ref<java::nio::file::Path> source, ref<java::io::OutputStream> out);
	static ref<link::java::array<jbyte>> readAllBytes(ref<java::nio::file::Path> path);
	static ref<java::lang::String> readString(ref<java::nio::file::Path> path);
	static ref<java::lang::String> readString(ref<java::nio::file::Path> path, ref<java::nio::charset::Charset> cs);
	static ref<java::util::List> readAllLines(ref<java::nio::file::Path> path, ref<java::nio::charset::Charset> cs);
	static ref<java::util::List> readAllLines(ref<java::nio::file::Path> path);
	static ref<java::nio::file::Path> write(ref<java::nio::file::Path> path, ref<link::java::array<jbyte>> bytes, ref<link::java::array<java::nio::file::OpenOption>> options);
	static ref<java::nio::file::Path> write(ref<java::nio::file::Path> path, ref<java::lang::Iterable> lines, ref<java::nio::charset::Charset> cs, ref<link::java::array<java::nio::file::OpenOption>> options);
	static ref<java::nio::file::Path> write(ref<java::nio::file::Path> path, ref<java::lang::Iterable> lines, ref<link::java::array<java::nio::file::OpenOption>> options);
	static ref<java::nio::file::Path> writeString(ref<java::nio::file::Path> path, ref<java::lang::CharSequence> csq, ref<link::java::array<java::nio::file::OpenOption>> options);
	static ref<java::nio::file::Path> writeString(ref<java::nio::file::Path> path, ref<java::lang::CharSequence> csq, ref<java::nio::charset::Charset> cs, ref<link::java::array<java::nio::file::OpenOption>> options);
	static ref<java::util::stream::Stream> list(ref<java::nio::file::Path> dir);
	static ref<java::util::stream::Stream> walk(ref<java::nio::file::Path> start, jint maxDepth, ref<link::java::array<java::nio::file::FileVisitOption>> options);
	static ref<java::util::stream::Stream> walk(ref<java::nio::file::Path> start, ref<link::java::array<java::nio::file::FileVisitOption>> options);
	static ref<java::util::stream::Stream> find(ref<java::nio::file::Path> start, jint maxDepth, ref<java::util::function::BiPredicate> matcher, ref<link::java::array<java::nio::file::FileVisitOption>> options);
	static ref<java::util::stream::Stream> lines(ref<java::nio::file::Path> path, ref<java::nio::charset::Charset> cs);
	static ref<java::util::stream::Stream> lines(ref<java::nio::file::Path> path);

protected:

	Files(handle_type h) : base_(h) {}

};

} // namespace java::nio::file
} // namespace scapix::java_api

#include <scapix/java_api/java/io/BufferedReader.h>
#include <scapix/java_api/java/io/BufferedWriter.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Iterable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/channels/SeekableByteChannel.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#include <scapix/java_api/java/nio/file/CopyOption.h>
#include <scapix/java_api/java/nio/file/DirectoryStream.h>
#include <scapix/java_api/java/nio/file/DirectoryStream_Filter.h>
#include <scapix/java_api/java/nio/file/FileStore.h>
#include <scapix/java_api/java/nio/file/FileVisitOption.h>
#include <scapix/java_api/java/nio/file/FileVisitor.h>
#include <scapix/java_api/java/nio/file/LinkOption.h>
#include <scapix/java_api/java/nio/file/OpenOption.h>
#include <scapix/java_api/java/nio/file/Path.h>
#include <scapix/java_api/java/nio/file/attribute/BasicFileAttributes.h>
#include <scapix/java_api/java/nio/file/attribute/FileAttribute.h>
#include <scapix/java_api/java/nio/file/attribute/FileAttributeView.h>
#include <scapix/java_api/java/nio/file/attribute/FileTime.h>
#include <scapix/java_api/java/nio/file/attribute/UserPrincipal.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/function/BiPredicate.h>
#include <scapix/java_api/java/util/stream/Stream.h>

namespace scapix::java_api {
namespace java::nio::file {

inline ref<java::io::InputStream> Files::newInputStream(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::OpenOption>> options) { return call_static_method<SCAPIX_META_STRING("newInputStream"), ref<java::io::InputStream>>(path, options); }
inline ref<java::io::OutputStream> Files::newOutputStream(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::OpenOption>> options) { return call_static_method<SCAPIX_META_STRING("newOutputStream"), ref<java::io::OutputStream>>(path, options); }
inline ref<java::nio::channels::SeekableByteChannel> Files::newByteChannel(ref<java::nio::file::Path> path, ref<java::util::Set> options, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_static_method<SCAPIX_META_STRING("newByteChannel"), ref<java::nio::channels::SeekableByteChannel>>(path, options, attrs); }
inline ref<java::nio::channels::SeekableByteChannel> Files::newByteChannel(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::OpenOption>> options) { return call_static_method<SCAPIX_META_STRING("newByteChannel"), ref<java::nio::channels::SeekableByteChannel>>(path, options); }
inline ref<java::nio::file::DirectoryStream> Files::newDirectoryStream(ref<java::nio::file::Path> dir) { return call_static_method<SCAPIX_META_STRING("newDirectoryStream"), ref<java::nio::file::DirectoryStream>>(dir); }
inline ref<java::nio::file::DirectoryStream> Files::newDirectoryStream(ref<java::nio::file::Path> dir, ref<java::lang::String> glob) { return call_static_method<SCAPIX_META_STRING("newDirectoryStream"), ref<java::nio::file::DirectoryStream>>(dir, glob); }
inline ref<java::nio::file::DirectoryStream> Files::newDirectoryStream(ref<java::nio::file::Path> dir, ref<java::nio::file::DirectoryStream_Filter> filter) { return call_static_method<SCAPIX_META_STRING("newDirectoryStream"), ref<java::nio::file::DirectoryStream>>(dir, filter); }
inline ref<java::nio::file::Path> Files::createFile(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_static_method<SCAPIX_META_STRING("createFile"), ref<java::nio::file::Path>>(path, attrs); }
inline ref<java::nio::file::Path> Files::createDirectory(ref<java::nio::file::Path> dir, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_static_method<SCAPIX_META_STRING("createDirectory"), ref<java::nio::file::Path>>(dir, attrs); }
inline ref<java::nio::file::Path> Files::createDirectories(ref<java::nio::file::Path> dir, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_static_method<SCAPIX_META_STRING("createDirectories"), ref<java::nio::file::Path>>(dir, attrs); }
inline ref<java::nio::file::Path> Files::createTempFile(ref<java::nio::file::Path> dir, ref<java::lang::String> prefix, ref<java::lang::String> suffix, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_static_method<SCAPIX_META_STRING("createTempFile"), ref<java::nio::file::Path>>(dir, prefix, suffix, attrs); }
inline ref<java::nio::file::Path> Files::createTempFile(ref<java::lang::String> prefix, ref<java::lang::String> suffix, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_static_method<SCAPIX_META_STRING("createTempFile"), ref<java::nio::file::Path>>(prefix, suffix, attrs); }
inline ref<java::nio::file::Path> Files::createTempDirectory(ref<java::nio::file::Path> dir, ref<java::lang::String> prefix, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_static_method<SCAPIX_META_STRING("createTempDirectory"), ref<java::nio::file::Path>>(dir, prefix, attrs); }
inline ref<java::nio::file::Path> Files::createTempDirectory(ref<java::lang::String> prefix, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_static_method<SCAPIX_META_STRING("createTempDirectory"), ref<java::nio::file::Path>>(prefix, attrs); }
inline ref<java::nio::file::Path> Files::createSymbolicLink(ref<java::nio::file::Path> link, ref<java::nio::file::Path> target, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_static_method<SCAPIX_META_STRING("createSymbolicLink"), ref<java::nio::file::Path>>(link, target, attrs); }
inline ref<java::nio::file::Path> Files::createLink(ref<java::nio::file::Path> link, ref<java::nio::file::Path> existing) { return call_static_method<SCAPIX_META_STRING("createLink"), ref<java::nio::file::Path>>(link, existing); }
inline void Files::delete_(ref<java::nio::file::Path> path) { return call_static_method<SCAPIX_META_STRING("delete"), void>(path); }
inline jboolean Files::deleteIfExists(ref<java::nio::file::Path> path) { return call_static_method<SCAPIX_META_STRING("deleteIfExists"), jboolean>(path); }
inline ref<java::nio::file::Path> Files::copy(ref<java::nio::file::Path> source, ref<java::nio::file::Path> target, ref<link::java::array<java::nio::file::CopyOption>> options) { return call_static_method<SCAPIX_META_STRING("copy"), ref<java::nio::file::Path>>(source, target, options); }
inline ref<java::nio::file::Path> Files::move(ref<java::nio::file::Path> source, ref<java::nio::file::Path> target, ref<link::java::array<java::nio::file::CopyOption>> options) { return call_static_method<SCAPIX_META_STRING("move"), ref<java::nio::file::Path>>(source, target, options); }
inline ref<java::nio::file::Path> Files::readSymbolicLink(ref<java::nio::file::Path> link) { return call_static_method<SCAPIX_META_STRING("readSymbolicLink"), ref<java::nio::file::Path>>(link); }
inline ref<java::nio::file::FileStore> Files::getFileStore(ref<java::nio::file::Path> path) { return call_static_method<SCAPIX_META_STRING("getFileStore"), ref<java::nio::file::FileStore>>(path); }
inline jboolean Files::isSameFile(ref<java::nio::file::Path> path, ref<java::nio::file::Path> path2) { return call_static_method<SCAPIX_META_STRING("isSameFile"), jboolean>(path, path2); }
inline jboolean Files::isHidden(ref<java::nio::file::Path> path) { return call_static_method<SCAPIX_META_STRING("isHidden"), jboolean>(path); }
inline ref<java::lang::String> Files::probeContentType(ref<java::nio::file::Path> path) { return call_static_method<SCAPIX_META_STRING("probeContentType"), ref<java::lang::String>>(path); }
inline ref<java::nio::file::attribute::FileAttributeView> Files::getFileAttributeView(ref<java::nio::file::Path> path, ref<java::lang::Class> type, ref<link::java::array<java::nio::file::LinkOption>> options) { return call_static_method<SCAPIX_META_STRING("getFileAttributeView"), ref<java::nio::file::attribute::FileAttributeView>>(path, type, options); }
inline ref<java::nio::file::attribute::BasicFileAttributes> Files::readAttributes(ref<java::nio::file::Path> path, ref<java::lang::Class> type, ref<link::java::array<java::nio::file::LinkOption>> options) { return call_static_method<SCAPIX_META_STRING("readAttributes"), ref<java::nio::file::attribute::BasicFileAttributes>>(path, type, options); }
inline ref<java::nio::file::Path> Files::setAttribute(ref<java::nio::file::Path> path, ref<java::lang::String> attribute, ref<java::lang::Object> value, ref<link::java::array<java::nio::file::LinkOption>> options) { return call_static_method<SCAPIX_META_STRING("setAttribute"), ref<java::nio::file::Path>>(path, attribute, value, options); }
inline ref<java::lang::Object> Files::getAttribute(ref<java::nio::file::Path> path, ref<java::lang::String> attribute, ref<link::java::array<java::nio::file::LinkOption>> options) { return call_static_method<SCAPIX_META_STRING("getAttribute"), ref<java::lang::Object>>(path, attribute, options); }
inline ref<java::util::Map> Files::readAttributes(ref<java::nio::file::Path> path, ref<java::lang::String> attributes, ref<link::java::array<java::nio::file::LinkOption>> options) { return call_static_method<SCAPIX_META_STRING("readAttributes"), ref<java::util::Map>>(path, attributes, options); }
inline ref<java::util::Set> Files::getPosixFilePermissions(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::LinkOption>> options) { return call_static_method<SCAPIX_META_STRING("getPosixFilePermissions"), ref<java::util::Set>>(path, options); }
inline ref<java::nio::file::Path> Files::setPosixFilePermissions(ref<java::nio::file::Path> path, ref<java::util::Set> perms) { return call_static_method<SCAPIX_META_STRING("setPosixFilePermissions"), ref<java::nio::file::Path>>(path, perms); }
inline ref<java::nio::file::attribute::UserPrincipal> Files::getOwner(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::LinkOption>> options) { return call_static_method<SCAPIX_META_STRING("getOwner"), ref<java::nio::file::attribute::UserPrincipal>>(path, options); }
inline ref<java::nio::file::Path> Files::setOwner(ref<java::nio::file::Path> path, ref<java::nio::file::attribute::UserPrincipal> owner) { return call_static_method<SCAPIX_META_STRING("setOwner"), ref<java::nio::file::Path>>(path, owner); }
inline jboolean Files::isSymbolicLink(ref<java::nio::file::Path> path) { return call_static_method<SCAPIX_META_STRING("isSymbolicLink"), jboolean>(path); }
inline jboolean Files::isDirectory(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::LinkOption>> options) { return call_static_method<SCAPIX_META_STRING("isDirectory"), jboolean>(path, options); }
inline jboolean Files::isRegularFile(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::LinkOption>> options) { return call_static_method<SCAPIX_META_STRING("isRegularFile"), jboolean>(path, options); }
inline ref<java::nio::file::attribute::FileTime> Files::getLastModifiedTime(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::LinkOption>> options) { return call_static_method<SCAPIX_META_STRING("getLastModifiedTime"), ref<java::nio::file::attribute::FileTime>>(path, options); }
inline ref<java::nio::file::Path> Files::setLastModifiedTime(ref<java::nio::file::Path> path, ref<java::nio::file::attribute::FileTime> time) { return call_static_method<SCAPIX_META_STRING("setLastModifiedTime"), ref<java::nio::file::Path>>(path, time); }
inline jlong Files::size(ref<java::nio::file::Path> path) { return call_static_method<SCAPIX_META_STRING("size"), jlong>(path); }
inline jboolean Files::exists(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::LinkOption>> options) { return call_static_method<SCAPIX_META_STRING("exists"), jboolean>(path, options); }
inline jboolean Files::notExists(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::LinkOption>> options) { return call_static_method<SCAPIX_META_STRING("notExists"), jboolean>(path, options); }
inline jboolean Files::isReadable(ref<java::nio::file::Path> path) { return call_static_method<SCAPIX_META_STRING("isReadable"), jboolean>(path); }
inline jboolean Files::isWritable(ref<java::nio::file::Path> path) { return call_static_method<SCAPIX_META_STRING("isWritable"), jboolean>(path); }
inline jboolean Files::isExecutable(ref<java::nio::file::Path> path) { return call_static_method<SCAPIX_META_STRING("isExecutable"), jboolean>(path); }
inline ref<java::nio::file::Path> Files::walkFileTree(ref<java::nio::file::Path> start, ref<java::util::Set> options, jint maxDepth, ref<java::nio::file::FileVisitor> visitor) { return call_static_method<SCAPIX_META_STRING("walkFileTree"), ref<java::nio::file::Path>>(start, options, maxDepth, visitor); }
inline ref<java::nio::file::Path> Files::walkFileTree(ref<java::nio::file::Path> start, ref<java::nio::file::FileVisitor> visitor) { return call_static_method<SCAPIX_META_STRING("walkFileTree"), ref<java::nio::file::Path>>(start, visitor); }
inline ref<java::io::BufferedReader> Files::newBufferedReader(ref<java::nio::file::Path> path, ref<java::nio::charset::Charset> cs) { return call_static_method<SCAPIX_META_STRING("newBufferedReader"), ref<java::io::BufferedReader>>(path, cs); }
inline ref<java::io::BufferedReader> Files::newBufferedReader(ref<java::nio::file::Path> path) { return call_static_method<SCAPIX_META_STRING("newBufferedReader"), ref<java::io::BufferedReader>>(path); }
inline ref<java::io::BufferedWriter> Files::newBufferedWriter(ref<java::nio::file::Path> path, ref<java::nio::charset::Charset> cs, ref<link::java::array<java::nio::file::OpenOption>> options) { return call_static_method<SCAPIX_META_STRING("newBufferedWriter"), ref<java::io::BufferedWriter>>(path, cs, options); }
inline ref<java::io::BufferedWriter> Files::newBufferedWriter(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::OpenOption>> options) { return call_static_method<SCAPIX_META_STRING("newBufferedWriter"), ref<java::io::BufferedWriter>>(path, options); }
inline jlong Files::copy(ref<java::io::InputStream> in, ref<java::nio::file::Path> target, ref<link::java::array<java::nio::file::CopyOption>> options) { return call_static_method<SCAPIX_META_STRING("copy"), jlong>(in, target, options); }
inline jlong Files::copy(ref<java::nio::file::Path> source, ref<java::io::OutputStream> out) { return call_static_method<SCAPIX_META_STRING("copy"), jlong>(source, out); }
inline ref<link::java::array<jbyte>> Files::readAllBytes(ref<java::nio::file::Path> path) { return call_static_method<SCAPIX_META_STRING("readAllBytes"), ref<link::java::array<jbyte>>>(path); }
inline ref<java::lang::String> Files::readString(ref<java::nio::file::Path> path) { return call_static_method<SCAPIX_META_STRING("readString"), ref<java::lang::String>>(path); }
inline ref<java::lang::String> Files::readString(ref<java::nio::file::Path> path, ref<java::nio::charset::Charset> cs) { return call_static_method<SCAPIX_META_STRING("readString"), ref<java::lang::String>>(path, cs); }
inline ref<java::util::List> Files::readAllLines(ref<java::nio::file::Path> path, ref<java::nio::charset::Charset> cs) { return call_static_method<SCAPIX_META_STRING("readAllLines"), ref<java::util::List>>(path, cs); }
inline ref<java::util::List> Files::readAllLines(ref<java::nio::file::Path> path) { return call_static_method<SCAPIX_META_STRING("readAllLines"), ref<java::util::List>>(path); }
inline ref<java::nio::file::Path> Files::write(ref<java::nio::file::Path> path, ref<link::java::array<jbyte>> bytes, ref<link::java::array<java::nio::file::OpenOption>> options) { return call_static_method<SCAPIX_META_STRING("write"), ref<java::nio::file::Path>>(path, bytes, options); }
inline ref<java::nio::file::Path> Files::write(ref<java::nio::file::Path> path, ref<java::lang::Iterable> lines, ref<java::nio::charset::Charset> cs, ref<link::java::array<java::nio::file::OpenOption>> options) { return call_static_method<SCAPIX_META_STRING("write"), ref<java::nio::file::Path>>(path, lines, cs, options); }
inline ref<java::nio::file::Path> Files::write(ref<java::nio::file::Path> path, ref<java::lang::Iterable> lines, ref<link::java::array<java::nio::file::OpenOption>> options) { return call_static_method<SCAPIX_META_STRING("write"), ref<java::nio::file::Path>>(path, lines, options); }
inline ref<java::nio::file::Path> Files::writeString(ref<java::nio::file::Path> path, ref<java::lang::CharSequence> csq, ref<link::java::array<java::nio::file::OpenOption>> options) { return call_static_method<SCAPIX_META_STRING("writeString"), ref<java::nio::file::Path>>(path, csq, options); }
inline ref<java::nio::file::Path> Files::writeString(ref<java::nio::file::Path> path, ref<java::lang::CharSequence> csq, ref<java::nio::charset::Charset> cs, ref<link::java::array<java::nio::file::OpenOption>> options) { return call_static_method<SCAPIX_META_STRING("writeString"), ref<java::nio::file::Path>>(path, csq, cs, options); }
inline ref<java::util::stream::Stream> Files::list(ref<java::nio::file::Path> dir) { return call_static_method<SCAPIX_META_STRING("list"), ref<java::util::stream::Stream>>(dir); }
inline ref<java::util::stream::Stream> Files::walk(ref<java::nio::file::Path> start, jint maxDepth, ref<link::java::array<java::nio::file::FileVisitOption>> options) { return call_static_method<SCAPIX_META_STRING("walk"), ref<java::util::stream::Stream>>(start, maxDepth, options); }
inline ref<java::util::stream::Stream> Files::walk(ref<java::nio::file::Path> start, ref<link::java::array<java::nio::file::FileVisitOption>> options) { return call_static_method<SCAPIX_META_STRING("walk"), ref<java::util::stream::Stream>>(start, options); }
inline ref<java::util::stream::Stream> Files::find(ref<java::nio::file::Path> start, jint maxDepth, ref<java::util::function::BiPredicate> matcher, ref<link::java::array<java::nio::file::FileVisitOption>> options) { return call_static_method<SCAPIX_META_STRING("find"), ref<java::util::stream::Stream>>(start, maxDepth, matcher, options); }
inline ref<java::util::stream::Stream> Files::lines(ref<java::nio::file::Path> path, ref<java::nio::charset::Charset> cs) { return call_static_method<SCAPIX_META_STRING("lines"), ref<java::util::stream::Stream>>(path, cs); }
inline ref<java::util::stream::Stream> Files::lines(ref<java::nio::file::Path> path) { return call_static_method<SCAPIX_META_STRING("lines"), ref<java::util::stream::Stream>>(path); }

} // namespace java::nio::file
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_FILE_FILES_H
