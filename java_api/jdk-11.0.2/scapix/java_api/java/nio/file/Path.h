// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/lang/Iterable.h>
#include <scapix/java_api/java/nio/file/Watchable.h>

#ifndef SCAPIX_JAVA_NIO_FILE_PATH_H
#define SCAPIX_JAVA_NIO_FILE_PATH_H

namespace scapix::java_api {

namespace java::io { class File; }
namespace java::lang { class String; }
namespace java::net { class URI; }
namespace java::nio::file { class FileSystem; }
namespace java::nio::file { class LinkOption; }
namespace java::nio::file { class WatchEvent_Kind; }
namespace java::nio::file { class WatchEvent_Modifier; }
namespace java::nio::file { class WatchKey; }
namespace java::nio::file { class WatchService; }
namespace java::util { class Iterator; }

namespace java::nio::file {

class Path : public object_base<SCAPIX_META_STRING("java/nio/file/Path"),
	java::lang::Object,
	java::lang::Comparable,
	java::lang::Iterable,
	java::nio::file::Watchable>
{
public:

	static ref<java::nio::file::Path> of(ref<java::lang::String> first, ref<link::java::array<java::lang::String>> more);
	static ref<java::nio::file::Path> of(ref<java::net::URI> uri);
	ref<java::nio::file::FileSystem> getFileSystem();
	jboolean isAbsolute();
	ref<java::nio::file::Path> getRoot();
	ref<java::nio::file::Path> getFileName();
	ref<java::nio::file::Path> getParent();
	jint getNameCount();
	ref<java::nio::file::Path> getName(jint p1);
	ref<java::nio::file::Path> subpath(jint p1, jint p2);
	jboolean startsWith(ref<java::nio::file::Path> p1);
	jboolean startsWith(ref<java::lang::String> other);
	jboolean endsWith(ref<java::nio::file::Path> p1);
	jboolean endsWith(ref<java::lang::String> other);
	ref<java::nio::file::Path> normalize();
	ref<java::nio::file::Path> resolve(ref<java::nio::file::Path> p1);
	ref<java::nio::file::Path> resolve(ref<java::lang::String> other);
	ref<java::nio::file::Path> resolveSibling(ref<java::nio::file::Path> other);
	ref<java::nio::file::Path> resolveSibling(ref<java::lang::String> other);
	ref<java::nio::file::Path> relativize(ref<java::nio::file::Path> p1);
	ref<java::net::URI> toUri();
	ref<java::nio::file::Path> toAbsolutePath();
	ref<java::nio::file::Path> toRealPath(ref<link::java::array<java::nio::file::LinkOption>> p1);
	ref<java::io::File> toFile();
	ref<java::nio::file::WatchKey> register_(ref<java::nio::file::WatchService> p1, ref<link::java::array<java::nio::file::WatchEvent_Kind>> p2, ref<link::java::array<java::nio::file::WatchEvent_Modifier>> p3);
	ref<java::nio::file::WatchKey> register_(ref<java::nio::file::WatchService> watcher, ref<link::java::array<java::nio::file::WatchEvent_Kind>> events);
	ref<java::util::Iterator> iterator();
	jint compareTo(ref<java::nio::file::Path> p1);
	jboolean equals(ref<java::lang::Object> p1);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	Path(handle_type h) : base_(h) {}

};

} // namespace java::nio::file
} // namespace scapix::java_api

#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URI.h>
#include <scapix/java_api/java/nio/file/FileSystem.h>
#include <scapix/java_api/java/nio/file/LinkOption.h>
#include <scapix/java_api/java/nio/file/WatchEvent_Kind.h>
#include <scapix/java_api/java/nio/file/WatchEvent_Modifier.h>
#include <scapix/java_api/java/nio/file/WatchKey.h>
#include <scapix/java_api/java/nio/file/WatchService.h>
#include <scapix/java_api/java/util/Iterator.h>

namespace scapix::java_api {
namespace java::nio::file {

inline ref<java::nio::file::Path> Path::of(ref<java::lang::String> first, ref<link::java::array<java::lang::String>> more) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::nio::file::Path>>(first, more); }
inline ref<java::nio::file::Path> Path::of(ref<java::net::URI> uri) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::nio::file::Path>>(uri); }
inline ref<java::nio::file::FileSystem> Path::getFileSystem() { return call_method<SCAPIX_META_STRING("getFileSystem"), ref<java::nio::file::FileSystem>>(); }
inline jboolean Path::isAbsolute() { return call_method<SCAPIX_META_STRING("isAbsolute"), jboolean>(); }
inline ref<java::nio::file::Path> Path::getRoot() { return call_method<SCAPIX_META_STRING("getRoot"), ref<java::nio::file::Path>>(); }
inline ref<java::nio::file::Path> Path::getFileName() { return call_method<SCAPIX_META_STRING("getFileName"), ref<java::nio::file::Path>>(); }
inline ref<java::nio::file::Path> Path::getParent() { return call_method<SCAPIX_META_STRING("getParent"), ref<java::nio::file::Path>>(); }
inline jint Path::getNameCount() { return call_method<SCAPIX_META_STRING("getNameCount"), jint>(); }
inline ref<java::nio::file::Path> Path::getName(jint p1) { return call_method<SCAPIX_META_STRING("getName"), ref<java::nio::file::Path>>(p1); }
inline ref<java::nio::file::Path> Path::subpath(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("subpath"), ref<java::nio::file::Path>>(p1, p2); }
inline jboolean Path::startsWith(ref<java::nio::file::Path> p1) { return call_method<SCAPIX_META_STRING("startsWith"), jboolean>(p1); }
inline jboolean Path::startsWith(ref<java::lang::String> other) { return call_method<SCAPIX_META_STRING("startsWith"), jboolean>(other); }
inline jboolean Path::endsWith(ref<java::nio::file::Path> p1) { return call_method<SCAPIX_META_STRING("endsWith"), jboolean>(p1); }
inline jboolean Path::endsWith(ref<java::lang::String> other) { return call_method<SCAPIX_META_STRING("endsWith"), jboolean>(other); }
inline ref<java::nio::file::Path> Path::normalize() { return call_method<SCAPIX_META_STRING("normalize"), ref<java::nio::file::Path>>(); }
inline ref<java::nio::file::Path> Path::resolve(ref<java::nio::file::Path> p1) { return call_method<SCAPIX_META_STRING("resolve"), ref<java::nio::file::Path>>(p1); }
inline ref<java::nio::file::Path> Path::resolve(ref<java::lang::String> other) { return call_method<SCAPIX_META_STRING("resolve"), ref<java::nio::file::Path>>(other); }
inline ref<java::nio::file::Path> Path::resolveSibling(ref<java::nio::file::Path> other) { return call_method<SCAPIX_META_STRING("resolveSibling"), ref<java::nio::file::Path>>(other); }
inline ref<java::nio::file::Path> Path::resolveSibling(ref<java::lang::String> other) { return call_method<SCAPIX_META_STRING("resolveSibling"), ref<java::nio::file::Path>>(other); }
inline ref<java::nio::file::Path> Path::relativize(ref<java::nio::file::Path> p1) { return call_method<SCAPIX_META_STRING("relativize"), ref<java::nio::file::Path>>(p1); }
inline ref<java::net::URI> Path::toUri() { return call_method<SCAPIX_META_STRING("toUri"), ref<java::net::URI>>(); }
inline ref<java::nio::file::Path> Path::toAbsolutePath() { return call_method<SCAPIX_META_STRING("toAbsolutePath"), ref<java::nio::file::Path>>(); }
inline ref<java::nio::file::Path> Path::toRealPath(ref<link::java::array<java::nio::file::LinkOption>> p1) { return call_method<SCAPIX_META_STRING("toRealPath"), ref<java::nio::file::Path>>(p1); }
inline ref<java::io::File> Path::toFile() { return call_method<SCAPIX_META_STRING("toFile"), ref<java::io::File>>(); }
inline ref<java::nio::file::WatchKey> Path::register_(ref<java::nio::file::WatchService> p1, ref<link::java::array<java::nio::file::WatchEvent_Kind>> p2, ref<link::java::array<java::nio::file::WatchEvent_Modifier>> p3) { return call_method<SCAPIX_META_STRING("register"), ref<java::nio::file::WatchKey>>(p1, p2, p3); }
inline ref<java::nio::file::WatchKey> Path::register_(ref<java::nio::file::WatchService> watcher, ref<link::java::array<java::nio::file::WatchEvent_Kind>> events) { return call_method<SCAPIX_META_STRING("register"), ref<java::nio::file::WatchKey>>(watcher, events); }
inline ref<java::util::Iterator> Path::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::Iterator>>(); }
inline jint Path::compareTo(ref<java::nio::file::Path> p1) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(p1); }
inline jboolean Path::equals(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(p1); }
inline jint Path::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> Path::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::nio::file
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_FILE_PATH_H
