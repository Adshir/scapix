// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_NIO_FILE_ATTRIBUTE_FILETIME_H
#define SCAPIX_JAVA_NIO_FILE_ATTRIBUTE_FILETIME_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time { class Instant; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::nio::file::attribute {

class FileTime : public object_base<SCAPIX_META_STRING("java/nio/file/attribute/FileTime"),
	java::lang::Object,
	java::lang::Comparable>
{
public:

	static ref<java::nio::file::attribute::FileTime> from(jlong value, ref<java::util::concurrent::TimeUnit> p2);
	static ref<java::nio::file::attribute::FileTime> fromMillis(jlong value);
	static ref<java::nio::file::attribute::FileTime> from(ref<java::time::Instant> instant);
	jlong to(ref<java::util::concurrent::TimeUnit> unit);
	jlong toMillis();
	ref<java::time::Instant> toInstant();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	jint compareTo(ref<java::nio::file::attribute::FileTime> other);
	ref<java::lang::String> toString();

protected:

	FileTime(handle_type h) : base_(h) {}

};

} // namespace java::nio::file::attribute
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::nio::file::attribute {

inline ref<java::nio::file::attribute::FileTime> FileTime::from(jlong value, ref<java::util::concurrent::TimeUnit> p2) { return call_static_method<SCAPIX_META_STRING("from"), ref<java::nio::file::attribute::FileTime>>(value, p2); }
inline ref<java::nio::file::attribute::FileTime> FileTime::fromMillis(jlong value) { return call_static_method<SCAPIX_META_STRING("fromMillis"), ref<java::nio::file::attribute::FileTime>>(value); }
inline ref<java::nio::file::attribute::FileTime> FileTime::from(ref<java::time::Instant> instant) { return call_static_method<SCAPIX_META_STRING("from"), ref<java::nio::file::attribute::FileTime>>(instant); }
inline jlong FileTime::to(ref<java::util::concurrent::TimeUnit> unit) { return call_method<SCAPIX_META_STRING("to"), jlong>(unit); }
inline jlong FileTime::toMillis() { return call_method<SCAPIX_META_STRING("toMillis"), jlong>(); }
inline ref<java::time::Instant> FileTime::toInstant() { return call_method<SCAPIX_META_STRING("toInstant"), ref<java::time::Instant>>(); }
inline jboolean FileTime::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint FileTime::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint FileTime::compareTo(ref<java::nio::file::attribute::FileTime> other) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(other); }
inline ref<java::lang::String> FileTime::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::nio::file::attribute
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_FILE_ATTRIBUTE_FILETIME_H
