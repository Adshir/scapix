// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/ShortBuffer.h>

#ifndef SCAPIX_JAVA_NIO_HEAPSHORTBUFFER_H
#define SCAPIX_JAVA_NIO_HEAPSHORTBUFFER_H

namespace scapix::java_api {

namespace java::nio { class ByteOrder; }

namespace java::nio {

// private
class HeapShortBuffer : public object_base<SCAPIX_META_STRING("java/nio/HeapShortBuffer"),
	java::nio::ShortBuffer>
{
public:

	ref<java::nio::ShortBuffer> slice();
	ref<java::nio::ShortBuffer> duplicate();
	ref<java::nio::ShortBuffer> asReadOnlyBuffer();
	jshort get();
	jshort get(jint i);
	ref<java::nio::ShortBuffer> get(ref<link::java::array<jshort>> dst, jint offset, jint length);
	jboolean isDirect();
	jboolean isReadOnly();
	ref<java::nio::ShortBuffer> put(jshort x);
	ref<java::nio::ShortBuffer> put(jint i, jshort x);
	ref<java::nio::ShortBuffer> put(ref<link::java::array<jshort>> src, jint offset, jint length);
	ref<java::nio::ShortBuffer> put(ref<java::nio::ShortBuffer> src);
	ref<java::nio::ShortBuffer> compact();
	ref<java::nio::ByteOrder> order();

protected:

	HeapShortBuffer(handle_type h) : base_(h) {}

};

} // namespace java::nio
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/ByteOrder.h>

namespace scapix::java_api {
namespace java::nio {

inline ref<java::nio::ShortBuffer> HeapShortBuffer::slice() { return call_method<SCAPIX_META_STRING("slice"), ref<java::nio::ShortBuffer>>(); }
inline ref<java::nio::ShortBuffer> HeapShortBuffer::duplicate() { return call_method<SCAPIX_META_STRING("duplicate"), ref<java::nio::ShortBuffer>>(); }
inline ref<java::nio::ShortBuffer> HeapShortBuffer::asReadOnlyBuffer() { return call_method<SCAPIX_META_STRING("asReadOnlyBuffer"), ref<java::nio::ShortBuffer>>(); }
inline jshort HeapShortBuffer::get() { return call_method<SCAPIX_META_STRING("get"), jshort>(); }
inline jshort HeapShortBuffer::get(jint i) { return call_method<SCAPIX_META_STRING("get"), jshort>(i); }
inline ref<java::nio::ShortBuffer> HeapShortBuffer::get(ref<link::java::array<jshort>> dst, jint offset, jint length) { return call_method<SCAPIX_META_STRING("get"), ref<java::nio::ShortBuffer>>(dst, offset, length); }
inline jboolean HeapShortBuffer::isDirect() { return call_method<SCAPIX_META_STRING("isDirect"), jboolean>(); }
inline jboolean HeapShortBuffer::isReadOnly() { return call_method<SCAPIX_META_STRING("isReadOnly"), jboolean>(); }
inline ref<java::nio::ShortBuffer> HeapShortBuffer::put(jshort x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ShortBuffer>>(x); }
inline ref<java::nio::ShortBuffer> HeapShortBuffer::put(jint i, jshort x) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ShortBuffer>>(i, x); }
inline ref<java::nio::ShortBuffer> HeapShortBuffer::put(ref<link::java::array<jshort>> src, jint offset, jint length) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ShortBuffer>>(src, offset, length); }
inline ref<java::nio::ShortBuffer> HeapShortBuffer::put(ref<java::nio::ShortBuffer> src) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ShortBuffer>>(src); }
inline ref<java::nio::ShortBuffer> HeapShortBuffer::compact() { return call_method<SCAPIX_META_STRING("compact"), ref<java::nio::ShortBuffer>>(); }
inline ref<java::nio::ByteOrder> HeapShortBuffer::order() { return call_method<SCAPIX_META_STRING("order"), ref<java::nio::ByteOrder>>(); }

} // namespace java::nio
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_HEAPSHORTBUFFER_H
