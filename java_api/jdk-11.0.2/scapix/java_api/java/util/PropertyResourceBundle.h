// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/ResourceBundle.h>

#ifndef SCAPIX_JAVA_UTIL_PROPERTYRESOURCEBUNDLE_H
#define SCAPIX_JAVA_UTIL_PROPERTYRESOURCEBUNDLE_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::io { class Reader; }
namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::util { class Enumeration; }

namespace java::util {

class PropertyResourceBundle : public object_base<SCAPIX_META_STRING("java/util/PropertyResourceBundle"),
	java::util::ResourceBundle>
{
public:

	static ref<PropertyResourceBundle> new_object(ref<java::io::InputStream> stream);
	static ref<PropertyResourceBundle> new_object(ref<java::io::Reader> reader);
	ref<java::lang::Object> handleGetObject(ref<java::lang::String> key);
	ref<java::util::Enumeration> getKeys();

protected:

	PropertyResourceBundle(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Enumeration.h>

namespace scapix::java_api {
namespace java::util {

inline ref<PropertyResourceBundle> PropertyResourceBundle::new_object(ref<java::io::InputStream> stream) { return base_::new_object(stream); }
inline ref<PropertyResourceBundle> PropertyResourceBundle::new_object(ref<java::io::Reader> reader) { return base_::new_object(reader); }
inline ref<java::lang::Object> PropertyResourceBundle::handleGetObject(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("handleGetObject"), ref<java::lang::Object>>(key); }
inline ref<java::util::Enumeration> PropertyResourceBundle::getKeys() { return call_method<SCAPIX_META_STRING("getKeys"), ref<java::util::Enumeration>>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_PROPERTYRESOURCEBUNDLE_H
