// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractSet.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_HASHSET_H
#define SCAPIX_JAVA_UTIL_HASHSET_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::util { class Collection; }
namespace java::util { class Iterator; }
namespace java::util { class Spliterator; }

namespace java::util {

class HashSet : public object_base<SCAPIX_META_STRING("java/util/HashSet"),
	java::util::AbstractSet,
	java::util::Set,
	java::lang::Cloneable,
	java::io::Serializable>
{
public:

	static ref<HashSet> new_object();
	static ref<HashSet> new_object(ref<java::util::Collection> c);
	static ref<HashSet> new_object(jint initialCapacity, jfloat loadFactor);
	static ref<HashSet> new_object(jint initialCapacity);
	ref<java::util::Iterator> iterator();
	jint size();
	jboolean isEmpty();
	jboolean contains(ref<java::lang::Object> o);
	jboolean add(ref<java::lang::Object> e);
	jboolean remove(ref<java::lang::Object> o);
	void clear();
	ref<java::lang::Object> clone();
	ref<java::util::Spliterator> spliterator();

protected:

	HashSet(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/Spliterator.h>

namespace scapix::java_api {
namespace java::util {

inline ref<HashSet> HashSet::new_object() { return base_::new_object(); }
inline ref<HashSet> HashSet::new_object(ref<java::util::Collection> c) { return base_::new_object(c); }
inline ref<HashSet> HashSet::new_object(jint initialCapacity, jfloat loadFactor) { return base_::new_object(initialCapacity, loadFactor); }
inline ref<HashSet> HashSet::new_object(jint initialCapacity) { return base_::new_object(initialCapacity); }
inline ref<java::util::Iterator> HashSet::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::Iterator>>(); }
inline jint HashSet::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jboolean HashSet::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline jboolean HashSet::contains(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(o); }
inline jboolean HashSet::add(ref<java::lang::Object> e) { return call_method<SCAPIX_META_STRING("add"), jboolean>(e); }
inline jboolean HashSet::remove(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("remove"), jboolean>(o); }
inline void HashSet::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline ref<java::lang::Object> HashSet::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline ref<java::util::Spliterator> HashSet::spliterator() { return call_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator>>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_HASHSET_H
