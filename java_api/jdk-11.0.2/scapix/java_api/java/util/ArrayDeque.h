// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractCollection.h>
#include <scapix/java_api/java/util/Deque.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_ARRAYDEQUE_H
#define SCAPIX_JAVA_UTIL_ARRAYDEQUE_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::util { class Collection; }
namespace java::util { class Iterator; }
namespace java::util { class Spliterator; }
namespace java::util::function { class Consumer; }
namespace java::util::function { class Predicate; }

namespace java::util {

class ArrayDeque : public object_base<SCAPIX_META_STRING("java/util/ArrayDeque"),
	java::util::AbstractCollection,
	java::util::Deque,
	java::lang::Cloneable,
	java::io::Serializable>
{
public:

	static ref<ArrayDeque> new_object();
	static ref<ArrayDeque> new_object(jint numElements);
	static ref<ArrayDeque> new_object(ref<java::util::Collection> c);
	void addFirst(ref<java::lang::Object> e);
	void addLast(ref<java::lang::Object> e);
	jboolean addAll(ref<java::util::Collection> c);
	jboolean offerFirst(ref<java::lang::Object> e);
	jboolean offerLast(ref<java::lang::Object> e);
	ref<java::lang::Object> removeFirst();
	ref<java::lang::Object> removeLast();
	ref<java::lang::Object> pollFirst();
	ref<java::lang::Object> pollLast();
	ref<java::lang::Object> getFirst();
	ref<java::lang::Object> getLast();
	ref<java::lang::Object> peekFirst();
	ref<java::lang::Object> peekLast();
	jboolean removeFirstOccurrence(ref<java::lang::Object> o);
	jboolean removeLastOccurrence(ref<java::lang::Object> o);
	jboolean add(ref<java::lang::Object> e);
	jboolean offer(ref<java::lang::Object> e);
	ref<java::lang::Object> remove();
	ref<java::lang::Object> poll();
	ref<java::lang::Object> element();
	ref<java::lang::Object> peek();
	void push(ref<java::lang::Object> e);
	ref<java::lang::Object> pop();
	jint size();
	jboolean isEmpty();
	ref<java::util::Iterator> iterator();
	ref<java::util::Iterator> descendingIterator();
	ref<java::util::Spliterator> spliterator();
	void forEach(ref<java::util::function::Consumer> action);
	jboolean removeIf(ref<java::util::function::Predicate> filter);
	jboolean removeAll(ref<java::util::Collection> c);
	jboolean retainAll(ref<java::util::Collection> c);
	jboolean contains(ref<java::lang::Object> o);
	jboolean remove(ref<java::lang::Object> o);
	void clear();
	ref<link::java::array<java::lang::Object>> toArray();
	ref<link::java::array<java::lang::Object>> toArray(ref<link::java::array<java::lang::Object>> a);
	ref<java::util::ArrayDeque> clone();

protected:

	ArrayDeque(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/java/util/function/Predicate.h>

namespace scapix::java_api {
namespace java::util {

inline ref<ArrayDeque> ArrayDeque::new_object() { return base_::new_object(); }
inline ref<ArrayDeque> ArrayDeque::new_object(jint numElements) { return base_::new_object(numElements); }
inline ref<ArrayDeque> ArrayDeque::new_object(ref<java::util::Collection> c) { return base_::new_object(c); }
inline void ArrayDeque::addFirst(ref<java::lang::Object> e) { return call_method<SCAPIX_META_STRING("addFirst"), void>(e); }
inline void ArrayDeque::addLast(ref<java::lang::Object> e) { return call_method<SCAPIX_META_STRING("addLast"), void>(e); }
inline jboolean ArrayDeque::addAll(ref<java::util::Collection> c) { return call_method<SCAPIX_META_STRING("addAll"), jboolean>(c); }
inline jboolean ArrayDeque::offerFirst(ref<java::lang::Object> e) { return call_method<SCAPIX_META_STRING("offerFirst"), jboolean>(e); }
inline jboolean ArrayDeque::offerLast(ref<java::lang::Object> e) { return call_method<SCAPIX_META_STRING("offerLast"), jboolean>(e); }
inline ref<java::lang::Object> ArrayDeque::removeFirst() { return call_method<SCAPIX_META_STRING("removeFirst"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> ArrayDeque::removeLast() { return call_method<SCAPIX_META_STRING("removeLast"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> ArrayDeque::pollFirst() { return call_method<SCAPIX_META_STRING("pollFirst"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> ArrayDeque::pollLast() { return call_method<SCAPIX_META_STRING("pollLast"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> ArrayDeque::getFirst() { return call_method<SCAPIX_META_STRING("getFirst"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> ArrayDeque::getLast() { return call_method<SCAPIX_META_STRING("getLast"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> ArrayDeque::peekFirst() { return call_method<SCAPIX_META_STRING("peekFirst"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> ArrayDeque::peekLast() { return call_method<SCAPIX_META_STRING("peekLast"), ref<java::lang::Object>>(); }
inline jboolean ArrayDeque::removeFirstOccurrence(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("removeFirstOccurrence"), jboolean>(o); }
inline jboolean ArrayDeque::removeLastOccurrence(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("removeLastOccurrence"), jboolean>(o); }
inline jboolean ArrayDeque::add(ref<java::lang::Object> e) { return call_method<SCAPIX_META_STRING("add"), jboolean>(e); }
inline jboolean ArrayDeque::offer(ref<java::lang::Object> e) { return call_method<SCAPIX_META_STRING("offer"), jboolean>(e); }
inline ref<java::lang::Object> ArrayDeque::remove() { return call_method<SCAPIX_META_STRING("remove"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> ArrayDeque::poll() { return call_method<SCAPIX_META_STRING("poll"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> ArrayDeque::element() { return call_method<SCAPIX_META_STRING("element"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> ArrayDeque::peek() { return call_method<SCAPIX_META_STRING("peek"), ref<java::lang::Object>>(); }
inline void ArrayDeque::push(ref<java::lang::Object> e) { return call_method<SCAPIX_META_STRING("push"), void>(e); }
inline ref<java::lang::Object> ArrayDeque::pop() { return call_method<SCAPIX_META_STRING("pop"), ref<java::lang::Object>>(); }
inline jint ArrayDeque::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jboolean ArrayDeque::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline ref<java::util::Iterator> ArrayDeque::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::Iterator>>(); }
inline ref<java::util::Iterator> ArrayDeque::descendingIterator() { return call_method<SCAPIX_META_STRING("descendingIterator"), ref<java::util::Iterator>>(); }
inline ref<java::util::Spliterator> ArrayDeque::spliterator() { return call_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator>>(); }
inline void ArrayDeque::forEach(ref<java::util::function::Consumer> action) { return call_method<SCAPIX_META_STRING("forEach"), void>(action); }
inline jboolean ArrayDeque::removeIf(ref<java::util::function::Predicate> filter) { return call_method<SCAPIX_META_STRING("removeIf"), jboolean>(filter); }
inline jboolean ArrayDeque::removeAll(ref<java::util::Collection> c) { return call_method<SCAPIX_META_STRING("removeAll"), jboolean>(c); }
inline jboolean ArrayDeque::retainAll(ref<java::util::Collection> c) { return call_method<SCAPIX_META_STRING("retainAll"), jboolean>(c); }
inline jboolean ArrayDeque::contains(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(o); }
inline jboolean ArrayDeque::remove(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("remove"), jboolean>(o); }
inline void ArrayDeque::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline ref<link::java::array<java::lang::Object>> ArrayDeque::toArray() { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<java::lang::Object>>>(); }
inline ref<link::java::array<java::lang::Object>> ArrayDeque::toArray(ref<link::java::array<java::lang::Object>> a) { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<java::lang::Object>>>(a); }
inline ref<java::util::ArrayDeque> ArrayDeque::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::util::ArrayDeque>>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_ARRAYDEQUE_H
