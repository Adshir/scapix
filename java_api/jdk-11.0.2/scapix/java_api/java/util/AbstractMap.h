// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Map.h>

#ifndef SCAPIX_JAVA_UTIL_ABSTRACTMAP_H
#define SCAPIX_JAVA_UTIL_ABSTRACTMAP_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util { class Collection; }
namespace java::util { class Set; }
namespace java::util { class AbstractMap_SimpleImmutableEntry; }
namespace java::util { class AbstractMap_SimpleEntry; }

namespace java::util {

class AbstractMap : public object_base<SCAPIX_META_STRING("java/util/AbstractMap"),
	java::lang::Object,
	java::util::Map>
{
public:

	using SimpleImmutableEntry = AbstractMap_SimpleImmutableEntry;
	using SimpleEntry = AbstractMap_SimpleEntry;

	jint size();
	jboolean isEmpty();
	jboolean containsValue(ref<java::lang::Object> value);
	jboolean containsKey(ref<java::lang::Object> key);
	ref<java::lang::Object> get(ref<java::lang::Object> key);
	ref<java::lang::Object> put(ref<java::lang::Object> key, ref<java::lang::Object> value);
	ref<java::lang::Object> remove(ref<java::lang::Object> key);
	void putAll(ref<java::util::Map> m);
	void clear();
	ref<java::util::Set> keySet();
	ref<java::util::Collection> values();
	ref<java::util::Set> entrySet();
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	AbstractMap(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace java::util {

inline jint AbstractMap::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jboolean AbstractMap::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline jboolean AbstractMap::containsValue(ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("containsValue"), jboolean>(value); }
inline jboolean AbstractMap::containsKey(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("containsKey"), jboolean>(key); }
inline ref<java::lang::Object> AbstractMap::get(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(key); }
inline ref<java::lang::Object> AbstractMap::put(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("put"), ref<java::lang::Object>>(key, value); }
inline ref<java::lang::Object> AbstractMap::remove(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("remove"), ref<java::lang::Object>>(key); }
inline void AbstractMap::putAll(ref<java::util::Map> m) { return call_method<SCAPIX_META_STRING("putAll"), void>(m); }
inline void AbstractMap::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline ref<java::util::Set> AbstractMap::keySet() { return call_method<SCAPIX_META_STRING("keySet"), ref<java::util::Set>>(); }
inline ref<java::util::Collection> AbstractMap::values() { return call_method<SCAPIX_META_STRING("values"), ref<java::util::Collection>>(); }
inline ref<java::util::Set> AbstractMap::entrySet() { return call_method<SCAPIX_META_STRING("entrySet"), ref<java::util::Set>>(); }
inline jboolean AbstractMap::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint AbstractMap::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> AbstractMap::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_ABSTRACTMAP_H
