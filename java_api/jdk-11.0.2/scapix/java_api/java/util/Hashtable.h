// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/Dictionary.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_HASHTABLE_H
#define SCAPIX_JAVA_UTIL_HASHTABLE_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::util { class Collection; }
namespace java::util { class Enumeration; }
namespace java::util { class Set; }
namespace java::util::function { class BiConsumer; }
namespace java::util::function { class BiFunction; }
namespace java::util::function { class Function; }

namespace java::util {

class Hashtable : public object_base<SCAPIX_META_STRING("java/util/Hashtable"),
	java::util::Dictionary,
	java::util::Map,
	java::lang::Cloneable,
	java::io::Serializable>
{
public:

	static ref<Hashtable> new_object(jint initialCapacity, jfloat loadFactor);
	static ref<Hashtable> new_object(jint initialCapacity);
	static ref<Hashtable> new_object();
	static ref<Hashtable> new_object(ref<java::util::Map> t);
	jint size();
	jboolean isEmpty();
	ref<java::util::Enumeration> keys();
	ref<java::util::Enumeration> elements();
	jboolean contains(ref<java::lang::Object> value);
	jboolean containsValue(ref<java::lang::Object> value);
	jboolean containsKey(ref<java::lang::Object> key);
	ref<java::lang::Object> get(ref<java::lang::Object> key);
	ref<java::lang::Object> put(ref<java::lang::Object> key, ref<java::lang::Object> value);
	ref<java::lang::Object> remove(ref<java::lang::Object> key);
	void putAll(ref<java::util::Map> t);
	void clear();
	ref<java::lang::Object> clone();
	ref<java::lang::String> toString();
	ref<java::util::Set> keySet();
	ref<java::util::Set> entrySet();
	ref<java::util::Collection> values();
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	ref<java::lang::Object> getOrDefault(ref<java::lang::Object> key, ref<java::lang::Object> defaultValue);
	void forEach(ref<java::util::function::BiConsumer> action);
	void replaceAll(ref<java::util::function::BiFunction> function);
	ref<java::lang::Object> putIfAbsent(ref<java::lang::Object> key, ref<java::lang::Object> value);
	jboolean remove(ref<java::lang::Object> key, ref<java::lang::Object> value);
	jboolean replace(ref<java::lang::Object> key, ref<java::lang::Object> oldValue, ref<java::lang::Object> newValue);
	ref<java::lang::Object> replace(ref<java::lang::Object> key, ref<java::lang::Object> value);
	ref<java::lang::Object> computeIfAbsent(ref<java::lang::Object> key, ref<java::util::function::Function> mappingFunction);
	ref<java::lang::Object> computeIfPresent(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction);
	ref<java::lang::Object> compute(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction);
	ref<java::lang::Object> merge(ref<java::lang::Object> key, ref<java::lang::Object> value, ref<java::util::function::BiFunction> remappingFunction);

protected:

	Hashtable(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BiFunction.h>
#include <scapix/java_api/java/util/function/Function.h>

namespace scapix::java_api {
namespace java::util {

inline ref<Hashtable> Hashtable::new_object(jint initialCapacity, jfloat loadFactor) { return base_::new_object(initialCapacity, loadFactor); }
inline ref<Hashtable> Hashtable::new_object(jint initialCapacity) { return base_::new_object(initialCapacity); }
inline ref<Hashtable> Hashtable::new_object() { return base_::new_object(); }
inline ref<Hashtable> Hashtable::new_object(ref<java::util::Map> t) { return base_::new_object(t); }
inline jint Hashtable::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jboolean Hashtable::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline ref<java::util::Enumeration> Hashtable::keys() { return call_method<SCAPIX_META_STRING("keys"), ref<java::util::Enumeration>>(); }
inline ref<java::util::Enumeration> Hashtable::elements() { return call_method<SCAPIX_META_STRING("elements"), ref<java::util::Enumeration>>(); }
inline jboolean Hashtable::contains(ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(value); }
inline jboolean Hashtable::containsValue(ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("containsValue"), jboolean>(value); }
inline jboolean Hashtable::containsKey(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("containsKey"), jboolean>(key); }
inline ref<java::lang::Object> Hashtable::get(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(key); }
inline ref<java::lang::Object> Hashtable::put(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("put"), ref<java::lang::Object>>(key, value); }
inline ref<java::lang::Object> Hashtable::remove(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("remove"), ref<java::lang::Object>>(key); }
inline void Hashtable::putAll(ref<java::util::Map> t) { return call_method<SCAPIX_META_STRING("putAll"), void>(t); }
inline void Hashtable::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline ref<java::lang::Object> Hashtable::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline ref<java::lang::String> Hashtable::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::util::Set> Hashtable::keySet() { return call_method<SCAPIX_META_STRING("keySet"), ref<java::util::Set>>(); }
inline ref<java::util::Set> Hashtable::entrySet() { return call_method<SCAPIX_META_STRING("entrySet"), ref<java::util::Set>>(); }
inline ref<java::util::Collection> Hashtable::values() { return call_method<SCAPIX_META_STRING("values"), ref<java::util::Collection>>(); }
inline jboolean Hashtable::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint Hashtable::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::Object> Hashtable::getOrDefault(ref<java::lang::Object> key, ref<java::lang::Object> defaultValue) { return call_method<SCAPIX_META_STRING("getOrDefault"), ref<java::lang::Object>>(key, defaultValue); }
inline void Hashtable::forEach(ref<java::util::function::BiConsumer> action) { return call_method<SCAPIX_META_STRING("forEach"), void>(action); }
inline void Hashtable::replaceAll(ref<java::util::function::BiFunction> function) { return call_method<SCAPIX_META_STRING("replaceAll"), void>(function); }
inline ref<java::lang::Object> Hashtable::putIfAbsent(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("putIfAbsent"), ref<java::lang::Object>>(key, value); }
inline jboolean Hashtable::remove(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("remove"), jboolean>(key, value); }
inline jboolean Hashtable::replace(ref<java::lang::Object> key, ref<java::lang::Object> oldValue, ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("replace"), jboolean>(key, oldValue, newValue); }
inline ref<java::lang::Object> Hashtable::replace(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("replace"), ref<java::lang::Object>>(key, value); }
inline ref<java::lang::Object> Hashtable::computeIfAbsent(ref<java::lang::Object> key, ref<java::util::function::Function> mappingFunction) { return call_method<SCAPIX_META_STRING("computeIfAbsent"), ref<java::lang::Object>>(key, mappingFunction); }
inline ref<java::lang::Object> Hashtable::computeIfPresent(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("computeIfPresent"), ref<java::lang::Object>>(key, remappingFunction); }
inline ref<java::lang::Object> Hashtable::compute(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("compute"), ref<java::lang::Object>>(key, remappingFunction); }
inline ref<java::lang::Object> Hashtable::merge(ref<java::lang::Object> key, ref<java::lang::Object> value, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("merge"), ref<java::lang::Object>>(key, value, remappingFunction); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_HASHTABLE_H
