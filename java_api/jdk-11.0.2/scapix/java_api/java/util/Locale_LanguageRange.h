// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_LOCALE_LANGUAGERANGE_H
#define SCAPIX_JAVA_UTIL_LOCALE_LANGUAGERANGE_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util { class List; }
namespace java::util { class Map; }

namespace java::util {

class Locale_LanguageRange : public object_base<SCAPIX_META_STRING("java/util/Locale$LanguageRange"),
	java::lang::Object>
{
public:

	static jdouble MAX_WEIGHT_();
	static jdouble MIN_WEIGHT_();

	static ref<Locale_LanguageRange> new_object(ref<java::lang::String> range);
	static ref<Locale_LanguageRange> new_object(ref<java::lang::String> range, jdouble weight);
	ref<java::lang::String> getRange();
	jdouble getWeight();
	static ref<java::util::List> parse(ref<java::lang::String> ranges);
	static ref<java::util::List> parse(ref<java::lang::String> ranges, ref<java::util::Map> map);
	static ref<java::util::List> mapEquivalents(ref<java::util::List> priorityList, ref<java::util::Map> map);
	jint hashCode();
	jboolean equals(ref<java::lang::Object> obj);
	ref<java::lang::String> toString();

protected:

	Locale_LanguageRange(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>

namespace scapix::java_api {
namespace java::util {

inline jdouble Locale_LanguageRange::MAX_WEIGHT_() { return get_static_field<SCAPIX_META_STRING("MAX_WEIGHT"), jdouble>(); }
inline jdouble Locale_LanguageRange::MIN_WEIGHT_() { return get_static_field<SCAPIX_META_STRING("MIN_WEIGHT"), jdouble>(); }
inline ref<Locale_LanguageRange> Locale_LanguageRange::new_object(ref<java::lang::String> range) { return base_::new_object(range); }
inline ref<Locale_LanguageRange> Locale_LanguageRange::new_object(ref<java::lang::String> range, jdouble weight) { return base_::new_object(range, weight); }
inline ref<java::lang::String> Locale_LanguageRange::getRange() { return call_method<SCAPIX_META_STRING("getRange"), ref<java::lang::String>>(); }
inline jdouble Locale_LanguageRange::getWeight() { return call_method<SCAPIX_META_STRING("getWeight"), jdouble>(); }
inline ref<java::util::List> Locale_LanguageRange::parse(ref<java::lang::String> ranges) { return call_static_method<SCAPIX_META_STRING("parse"), ref<java::util::List>>(ranges); }
inline ref<java::util::List> Locale_LanguageRange::parse(ref<java::lang::String> ranges, ref<java::util::Map> map) { return call_static_method<SCAPIX_META_STRING("parse"), ref<java::util::List>>(ranges, map); }
inline ref<java::util::List> Locale_LanguageRange::mapEquivalents(ref<java::util::List> priorityList, ref<java::util::Map> map) { return call_static_method<SCAPIX_META_STRING("mapEquivalents"), ref<java::util::List>>(priorityList, map); }
inline jint Locale_LanguageRange::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean Locale_LanguageRange::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline ref<java::lang::String> Locale_LanguageRange::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_LOCALE_LANGUAGERANGE_H
