// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_TIMER_H
#define SCAPIX_JAVA_UTIL_TIMER_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util { class Date; }
namespace java::util { class TimerTask; }

namespace java::util {

class Timer : public object_base<SCAPIX_META_STRING("java/util/Timer"),
	java::lang::Object>
{
public:

	static ref<Timer> new_object();
	static ref<Timer> new_object(jboolean isDaemon);
	static ref<Timer> new_object(ref<java::lang::String> name);
	static ref<Timer> new_object(ref<java::lang::String> name, jboolean isDaemon);
	void schedule(ref<java::util::TimerTask> task, jlong delay);
	void schedule(ref<java::util::TimerTask> task, ref<java::util::Date> time);
	void schedule(ref<java::util::TimerTask> task, jlong delay, jlong p3);
	void schedule(ref<java::util::TimerTask> task, ref<java::util::Date> firstTime, jlong period);
	void scheduleAtFixedRate(ref<java::util::TimerTask> task, jlong delay, jlong p3);
	void scheduleAtFixedRate(ref<java::util::TimerTask> task, ref<java::util::Date> firstTime, jlong period);
	void cancel();
	jint purge();

protected:

	Timer(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/TimerTask.h>

namespace scapix::java_api {
namespace java::util {

inline ref<Timer> Timer::new_object() { return base_::new_object(); }
inline ref<Timer> Timer::new_object(jboolean isDaemon) { return base_::new_object(isDaemon); }
inline ref<Timer> Timer::new_object(ref<java::lang::String> name) { return base_::new_object(name); }
inline ref<Timer> Timer::new_object(ref<java::lang::String> name, jboolean isDaemon) { return base_::new_object(name, isDaemon); }
inline void Timer::schedule(ref<java::util::TimerTask> task, jlong delay) { return call_method<SCAPIX_META_STRING("schedule"), void>(task, delay); }
inline void Timer::schedule(ref<java::util::TimerTask> task, ref<java::util::Date> time) { return call_method<SCAPIX_META_STRING("schedule"), void>(task, time); }
inline void Timer::schedule(ref<java::util::TimerTask> task, jlong delay, jlong p3) { return call_method<SCAPIX_META_STRING("schedule"), void>(task, delay, p3); }
inline void Timer::schedule(ref<java::util::TimerTask> task, ref<java::util::Date> firstTime, jlong period) { return call_method<SCAPIX_META_STRING("schedule"), void>(task, firstTime, period); }
inline void Timer::scheduleAtFixedRate(ref<java::util::TimerTask> task, jlong delay, jlong p3) { return call_method<SCAPIX_META_STRING("scheduleAtFixedRate"), void>(task, delay, p3); }
inline void Timer::scheduleAtFixedRate(ref<java::util::TimerTask> task, ref<java::util::Date> firstTime, jlong period) { return call_method<SCAPIX_META_STRING("scheduleAtFixedRate"), void>(task, firstTime, period); }
inline void Timer::cancel() { return call_method<SCAPIX_META_STRING("cancel"), void>(); }
inline jint Timer::purge() { return call_method<SCAPIX_META_STRING("purge"), jint>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_TIMER_H
