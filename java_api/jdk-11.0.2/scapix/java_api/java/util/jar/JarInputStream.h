// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/zip/ZipInputStream.h>

#ifndef SCAPIX_JAVA_UTIL_JAR_JARINPUTSTREAM_H
#define SCAPIX_JAVA_UTIL_JAR_JARINPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::util::jar { class JarEntry; }
namespace java::util::jar { class Manifest; }
namespace java::util::zip { class ZipEntry; }

namespace java::util::jar {

class JarInputStream : public object_base<SCAPIX_META_STRING("java/util/jar/JarInputStream"),
	java::util::zip::ZipInputStream>
{
public:

	static ref<JarInputStream> new_object(ref<java::io::InputStream> in);
	static ref<JarInputStream> new_object(ref<java::io::InputStream> in, jboolean verify);
	ref<java::util::jar::Manifest> getManifest();
	ref<java::util::zip::ZipEntry> getNextEntry();
	ref<java::util::jar::JarEntry> getNextJarEntry();
	jint read(ref<link::java::array<jbyte>> b, jint off, jint len);

protected:

	JarInputStream(handle_type h) : base_(h) {}

};

} // namespace java::util::jar
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/util/jar/JarEntry.h>
#include <scapix/java_api/java/util/jar/Manifest.h>
#include <scapix/java_api/java/util/zip/ZipEntry.h>

namespace scapix::java_api {
namespace java::util::jar {

inline ref<JarInputStream> JarInputStream::new_object(ref<java::io::InputStream> in) { return base_::new_object(in); }
inline ref<JarInputStream> JarInputStream::new_object(ref<java::io::InputStream> in, jboolean verify) { return base_::new_object(in, verify); }
inline ref<java::util::jar::Manifest> JarInputStream::getManifest() { return call_method<SCAPIX_META_STRING("getManifest"), ref<java::util::jar::Manifest>>(); }
inline ref<java::util::zip::ZipEntry> JarInputStream::getNextEntry() { return call_method<SCAPIX_META_STRING("getNextEntry"), ref<java::util::zip::ZipEntry>>(); }
inline ref<java::util::jar::JarEntry> JarInputStream::getNextJarEntry() { return call_method<SCAPIX_META_STRING("getNextJarEntry"), ref<java::util::jar::JarEntry>>(); }
inline jint JarInputStream::read(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(b, off, len); }

} // namespace java::util::jar
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_JAR_JARINPUTSTREAM_H
