// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_UTIL_JAR_ATTRIBUTES_H
#define SCAPIX_JAVA_UTIL_JAR_ATTRIBUTES_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util { class Collection; }
namespace java::util { class Set; }
namespace java::util::jar { class Attributes_Name; }

namespace java::util::jar {

class Attributes : public object_base<SCAPIX_META_STRING("java/util/jar/Attributes"),
	java::lang::Object,
	java::util::Map,
	java::lang::Cloneable>
{
public:

	using Name = Attributes_Name;

	static ref<Attributes> new_object();
	static ref<Attributes> new_object(jint size);
	static ref<Attributes> new_object(ref<java::util::jar::Attributes> attr);
	ref<java::lang::Object> get(ref<java::lang::Object> name);
	ref<java::lang::String> getValue(ref<java::lang::String> name);
	ref<java::lang::String> getValue(ref<java::util::jar::Attributes_Name> name);
	ref<java::lang::Object> put(ref<java::lang::Object> name, ref<java::lang::Object> value);
	ref<java::lang::String> putValue(ref<java::lang::String> name, ref<java::lang::String> value);
	ref<java::lang::Object> remove(ref<java::lang::Object> name);
	jboolean containsValue(ref<java::lang::Object> value);
	jboolean containsKey(ref<java::lang::Object> name);
	void putAll(ref<java::util::Map> attr);
	void clear();
	jint size();
	jboolean isEmpty();
	ref<java::util::Set> keySet();
	ref<java::util::Collection> values();
	ref<java::util::Set> entrySet();
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	ref<java::lang::Object> clone();

protected:

	Attributes(handle_type h) : base_(h) {}

};

} // namespace java::util::jar
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/jar/Attributes_Name.h>

namespace scapix::java_api {
namespace java::util::jar {

inline ref<Attributes> Attributes::new_object() { return base_::new_object(); }
inline ref<Attributes> Attributes::new_object(jint size) { return base_::new_object(size); }
inline ref<Attributes> Attributes::new_object(ref<java::util::jar::Attributes> attr) { return base_::new_object(attr); }
inline ref<java::lang::Object> Attributes::get(ref<java::lang::Object> name) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(name); }
inline ref<java::lang::String> Attributes::getValue(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getValue"), ref<java::lang::String>>(name); }
inline ref<java::lang::String> Attributes::getValue(ref<java::util::jar::Attributes_Name> name) { return call_method<SCAPIX_META_STRING("getValue"), ref<java::lang::String>>(name); }
inline ref<java::lang::Object> Attributes::put(ref<java::lang::Object> name, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("put"), ref<java::lang::Object>>(name, value); }
inline ref<java::lang::String> Attributes::putValue(ref<java::lang::String> name, ref<java::lang::String> value) { return call_method<SCAPIX_META_STRING("putValue"), ref<java::lang::String>>(name, value); }
inline ref<java::lang::Object> Attributes::remove(ref<java::lang::Object> name) { return call_method<SCAPIX_META_STRING("remove"), ref<java::lang::Object>>(name); }
inline jboolean Attributes::containsValue(ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("containsValue"), jboolean>(value); }
inline jboolean Attributes::containsKey(ref<java::lang::Object> name) { return call_method<SCAPIX_META_STRING("containsKey"), jboolean>(name); }
inline void Attributes::putAll(ref<java::util::Map> attr) { return call_method<SCAPIX_META_STRING("putAll"), void>(attr); }
inline void Attributes::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline jint Attributes::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jboolean Attributes::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline ref<java::util::Set> Attributes::keySet() { return call_method<SCAPIX_META_STRING("keySet"), ref<java::util::Set>>(); }
inline ref<java::util::Collection> Attributes::values() { return call_method<SCAPIX_META_STRING("values"), ref<java::util::Collection>>(); }
inline ref<java::util::Set> Attributes::entrySet() { return call_method<SCAPIX_META_STRING("entrySet"), ref<java::util::Set>>(); }
inline jboolean Attributes::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint Attributes::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::Object> Attributes::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }

} // namespace java::util::jar
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_JAR_ATTRIBUTES_H
