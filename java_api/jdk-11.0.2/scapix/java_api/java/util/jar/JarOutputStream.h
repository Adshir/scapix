// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/zip/ZipOutputStream.h>

#ifndef SCAPIX_JAVA_UTIL_JAR_JAROUTPUTSTREAM_H
#define SCAPIX_JAVA_UTIL_JAR_JAROUTPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class OutputStream; }
namespace java::util::jar { class Manifest; }
namespace java::util::zip { class ZipEntry; }

namespace java::util::jar {

class JarOutputStream : public object_base<SCAPIX_META_STRING("java/util/jar/JarOutputStream"),
	java::util::zip::ZipOutputStream>
{
public:

	static ref<JarOutputStream> new_object(ref<java::io::OutputStream> out, ref<java::util::jar::Manifest> man);
	static ref<JarOutputStream> new_object(ref<java::io::OutputStream> out);
	void putNextEntry(ref<java::util::zip::ZipEntry> ze);

protected:

	JarOutputStream(handle_type h) : base_(h) {}

};

} // namespace java::util::jar
} // namespace scapix::java_api

#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/util/jar/Manifest.h>
#include <scapix/java_api/java/util/zip/ZipEntry.h>

namespace scapix::java_api {
namespace java::util::jar {

inline ref<JarOutputStream> JarOutputStream::new_object(ref<java::io::OutputStream> out, ref<java::util::jar::Manifest> man) { return base_::new_object(out, man); }
inline ref<JarOutputStream> JarOutputStream::new_object(ref<java::io::OutputStream> out) { return base_::new_object(out); }
inline void JarOutputStream::putNextEntry(ref<java::util::zip::ZipEntry> ze) { return call_method<SCAPIX_META_STRING("putNextEntry"), void>(ze); }

} // namespace java::util::jar
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_JAR_JAROUTPUTSTREAM_H
