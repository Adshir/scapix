// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_OPTIONALDOUBLE_H
#define SCAPIX_JAVA_UTIL_OPTIONALDOUBLE_H

namespace scapix::java_api {

namespace java::lang { class Runnable; }
namespace java::lang { class String; }
namespace java::util::function { class DoubleConsumer; }
namespace java::util::function { class DoubleSupplier; }
namespace java::util::function { class Supplier; }
namespace java::util::stream { class DoubleStream; }

namespace java::util {

class OptionalDouble : public object_base<SCAPIX_META_STRING("java/util/OptionalDouble"),
	java::lang::Object>
{
public:

	static ref<java::util::OptionalDouble> empty();
	static ref<java::util::OptionalDouble> of(jdouble value);
	jdouble getAsDouble();
	jboolean isPresent();
	jboolean isEmpty();
	void ifPresent(ref<java::util::function::DoubleConsumer> action);
	void ifPresentOrElse(ref<java::util::function::DoubleConsumer> action, ref<java::lang::Runnable> emptyAction);
	ref<java::util::stream::DoubleStream> stream();
	jdouble orElse(jdouble other);
	jdouble orElseGet(ref<java::util::function::DoubleSupplier> supplier);
	jdouble orElseThrow();
	jdouble orElseThrow(ref<java::util::function::Supplier> exceptionSupplier);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	OptionalDouble(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/DoubleConsumer.h>
#include <scapix/java_api/java/util/function/DoubleSupplier.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#include <scapix/java_api/java/util/stream/DoubleStream.h>

namespace scapix::java_api {
namespace java::util {

inline ref<java::util::OptionalDouble> OptionalDouble::empty() { return call_static_method<SCAPIX_META_STRING("empty"), ref<java::util::OptionalDouble>>(); }
inline ref<java::util::OptionalDouble> OptionalDouble::of(jdouble value) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::OptionalDouble>>(value); }
inline jdouble OptionalDouble::getAsDouble() { return call_method<SCAPIX_META_STRING("getAsDouble"), jdouble>(); }
inline jboolean OptionalDouble::isPresent() { return call_method<SCAPIX_META_STRING("isPresent"), jboolean>(); }
inline jboolean OptionalDouble::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline void OptionalDouble::ifPresent(ref<java::util::function::DoubleConsumer> action) { return call_method<SCAPIX_META_STRING("ifPresent"), void>(action); }
inline void OptionalDouble::ifPresentOrElse(ref<java::util::function::DoubleConsumer> action, ref<java::lang::Runnable> emptyAction) { return call_method<SCAPIX_META_STRING("ifPresentOrElse"), void>(action, emptyAction); }
inline ref<java::util::stream::DoubleStream> OptionalDouble::stream() { return call_method<SCAPIX_META_STRING("stream"), ref<java::util::stream::DoubleStream>>(); }
inline jdouble OptionalDouble::orElse(jdouble other) { return call_method<SCAPIX_META_STRING("orElse"), jdouble>(other); }
inline jdouble OptionalDouble::orElseGet(ref<java::util::function::DoubleSupplier> supplier) { return call_method<SCAPIX_META_STRING("orElseGet"), jdouble>(supplier); }
inline jdouble OptionalDouble::orElseThrow() { return call_method<SCAPIX_META_STRING("orElseThrow"), jdouble>(); }
inline jdouble OptionalDouble::orElseThrow(ref<java::util::function::Supplier> exceptionSupplier) { return call_method<SCAPIX_META_STRING("orElseThrow"), jdouble>(exceptionSupplier); }
inline jboolean OptionalDouble::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint OptionalDouble::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> OptionalDouble::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_OPTIONALDOUBLE_H
