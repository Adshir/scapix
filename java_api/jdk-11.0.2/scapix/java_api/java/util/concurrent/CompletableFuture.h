// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/Future.h>
#include <scapix/java_api/java/util/concurrent/CompletionStage.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_COMPLETABLEFUTURE_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_COMPLETABLEFUTURE_H

namespace scapix::java_api {

namespace java::lang { class Runnable; }
namespace java::lang { class String; }
namespace java::lang { class Throwable; }
namespace java::util::concurrent { class Executor; }
namespace java::util::concurrent { class TimeUnit; }
namespace java::util::function { class BiConsumer; }
namespace java::util::function { class BiFunction; }
namespace java::util::function { class Consumer; }
namespace java::util::function { class Function; }
namespace java::util::function { class Supplier; }
namespace java::util::concurrent { class CompletableFuture_AsynchronousCompletionTask; }

namespace java::util::concurrent {

class CompletableFuture : public object_base<SCAPIX_META_STRING("java/util/concurrent/CompletableFuture"),
	java::lang::Object,
	java::util::concurrent::Future,
	java::util::concurrent::CompletionStage>
{
public:

	using AsynchronousCompletionTask = CompletableFuture_AsynchronousCompletionTask;

	static ref<CompletableFuture> new_object();
	static ref<java::util::concurrent::CompletableFuture> supplyAsync(ref<java::util::function::Supplier> supplier);
	static ref<java::util::concurrent::CompletableFuture> supplyAsync(ref<java::util::function::Supplier> supplier, ref<java::util::concurrent::Executor> executor);
	static ref<java::util::concurrent::CompletableFuture> runAsync(ref<java::lang::Runnable> runnable);
	static ref<java::util::concurrent::CompletableFuture> runAsync(ref<java::lang::Runnable> runnable, ref<java::util::concurrent::Executor> executor);
	static ref<java::util::concurrent::CompletableFuture> completedFuture(ref<java::lang::Object> value);
	jboolean isDone();
	ref<java::lang::Object> get();
	ref<java::lang::Object> get(jlong timeout, ref<java::util::concurrent::TimeUnit> p2);
	ref<java::lang::Object> join();
	ref<java::lang::Object> getNow(ref<java::lang::Object> valueIfAbsent);
	jboolean complete(ref<java::lang::Object> value);
	jboolean completeExceptionally(ref<java::lang::Throwable> ex);
	ref<java::util::concurrent::CompletableFuture> thenApply(ref<java::util::function::Function> fn);
	ref<java::util::concurrent::CompletableFuture> thenApplyAsync(ref<java::util::function::Function> fn);
	ref<java::util::concurrent::CompletableFuture> thenApplyAsync(ref<java::util::function::Function> fn, ref<java::util::concurrent::Executor> executor);
	ref<java::util::concurrent::CompletableFuture> thenAccept(ref<java::util::function::Consumer> action);
	ref<java::util::concurrent::CompletableFuture> thenAcceptAsync(ref<java::util::function::Consumer> action);
	ref<java::util::concurrent::CompletableFuture> thenAcceptAsync(ref<java::util::function::Consumer> action, ref<java::util::concurrent::Executor> executor);
	ref<java::util::concurrent::CompletableFuture> thenRun(ref<java::lang::Runnable> action);
	ref<java::util::concurrent::CompletableFuture> thenRunAsync(ref<java::lang::Runnable> action);
	ref<java::util::concurrent::CompletableFuture> thenRunAsync(ref<java::lang::Runnable> action, ref<java::util::concurrent::Executor> executor);
	ref<java::util::concurrent::CompletableFuture> thenCombine(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::BiFunction> fn);
	ref<java::util::concurrent::CompletableFuture> thenCombineAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::BiFunction> fn);
	ref<java::util::concurrent::CompletableFuture> thenCombineAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::BiFunction> fn, ref<java::util::concurrent::Executor> executor);
	ref<java::util::concurrent::CompletableFuture> thenAcceptBoth(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::BiConsumer> action);
	ref<java::util::concurrent::CompletableFuture> thenAcceptBothAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::BiConsumer> action);
	ref<java::util::concurrent::CompletableFuture> thenAcceptBothAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::BiConsumer> action, ref<java::util::concurrent::Executor> executor);
	ref<java::util::concurrent::CompletableFuture> runAfterBoth(ref<java::util::concurrent::CompletionStage> other, ref<java::lang::Runnable> action);
	ref<java::util::concurrent::CompletableFuture> runAfterBothAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::lang::Runnable> action);
	ref<java::util::concurrent::CompletableFuture> runAfterBothAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::lang::Runnable> action, ref<java::util::concurrent::Executor> executor);
	ref<java::util::concurrent::CompletableFuture> applyToEither(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::Function> fn);
	ref<java::util::concurrent::CompletableFuture> applyToEitherAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::Function> fn);
	ref<java::util::concurrent::CompletableFuture> applyToEitherAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::Function> fn, ref<java::util::concurrent::Executor> executor);
	ref<java::util::concurrent::CompletableFuture> acceptEither(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::Consumer> action);
	ref<java::util::concurrent::CompletableFuture> acceptEitherAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::Consumer> action);
	ref<java::util::concurrent::CompletableFuture> acceptEitherAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::Consumer> action, ref<java::util::concurrent::Executor> executor);
	ref<java::util::concurrent::CompletableFuture> runAfterEither(ref<java::util::concurrent::CompletionStage> other, ref<java::lang::Runnable> action);
	ref<java::util::concurrent::CompletableFuture> runAfterEitherAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::lang::Runnable> action);
	ref<java::util::concurrent::CompletableFuture> runAfterEitherAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::lang::Runnable> action, ref<java::util::concurrent::Executor> executor);
	ref<java::util::concurrent::CompletableFuture> thenCompose(ref<java::util::function::Function> fn);
	ref<java::util::concurrent::CompletableFuture> thenComposeAsync(ref<java::util::function::Function> fn);
	ref<java::util::concurrent::CompletableFuture> thenComposeAsync(ref<java::util::function::Function> fn, ref<java::util::concurrent::Executor> executor);
	ref<java::util::concurrent::CompletableFuture> whenComplete(ref<java::util::function::BiConsumer> action);
	ref<java::util::concurrent::CompletableFuture> whenCompleteAsync(ref<java::util::function::BiConsumer> action);
	ref<java::util::concurrent::CompletableFuture> whenCompleteAsync(ref<java::util::function::BiConsumer> action, ref<java::util::concurrent::Executor> executor);
	ref<java::util::concurrent::CompletableFuture> handle(ref<java::util::function::BiFunction> fn);
	ref<java::util::concurrent::CompletableFuture> handleAsync(ref<java::util::function::BiFunction> fn);
	ref<java::util::concurrent::CompletableFuture> handleAsync(ref<java::util::function::BiFunction> fn, ref<java::util::concurrent::Executor> executor);
	ref<java::util::concurrent::CompletableFuture> toCompletableFuture();
	ref<java::util::concurrent::CompletableFuture> exceptionally(ref<java::util::function::Function> fn);
	static ref<java::util::concurrent::CompletableFuture> allOf(ref<link::java::array<java::util::concurrent::CompletableFuture>> cfs);
	static ref<java::util::concurrent::CompletableFuture> anyOf(ref<link::java::array<java::util::concurrent::CompletableFuture>> cfs);
	jboolean cancel(jboolean mayInterruptIfRunning);
	jboolean isCancelled();
	jboolean isCompletedExceptionally();
	void obtrudeValue(ref<java::lang::Object> value);
	void obtrudeException(ref<java::lang::Throwable> ex);
	jint getNumberOfDependents();
	ref<java::lang::String> toString();
	ref<java::util::concurrent::CompletableFuture> newIncompleteFuture();
	ref<java::util::concurrent::Executor> defaultExecutor();
	ref<java::util::concurrent::CompletableFuture> copy();
	ref<java::util::concurrent::CompletionStage> minimalCompletionStage();
	ref<java::util::concurrent::CompletableFuture> completeAsync(ref<java::util::function::Supplier> supplier, ref<java::util::concurrent::Executor> executor);
	ref<java::util::concurrent::CompletableFuture> completeAsync(ref<java::util::function::Supplier> supplier);
	ref<java::util::concurrent::CompletableFuture> orTimeout(jlong timeout, ref<java::util::concurrent::TimeUnit> p2);
	ref<java::util::concurrent::CompletableFuture> completeOnTimeout(ref<java::lang::Object> value, jlong timeout, ref<java::util::concurrent::TimeUnit> p3);
	static ref<java::util::concurrent::Executor> delayedExecutor(jlong delay, ref<java::util::concurrent::TimeUnit> p2, ref<java::util::concurrent::Executor> unit);
	static ref<java::util::concurrent::Executor> delayedExecutor(jlong delay, ref<java::util::concurrent::TimeUnit> p2);
	static ref<java::util::concurrent::CompletionStage> completedStage(ref<java::lang::Object> value);
	static ref<java::util::concurrent::CompletableFuture> failedFuture(ref<java::lang::Throwable> ex);
	static ref<java::util::concurrent::CompletionStage> failedStage(ref<java::lang::Throwable> ex);

protected:

	CompletableFuture(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BiFunction.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/java/util/function/Function.h>
#include <scapix/java_api/java/util/function/Supplier.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<CompletableFuture> CompletableFuture::new_object() { return base_::new_object(); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::supplyAsync(ref<java::util::function::Supplier> supplier) { return call_static_method<SCAPIX_META_STRING("supplyAsync"), ref<java::util::concurrent::CompletableFuture>>(supplier); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::supplyAsync(ref<java::util::function::Supplier> supplier, ref<java::util::concurrent::Executor> executor) { return call_static_method<SCAPIX_META_STRING("supplyAsync"), ref<java::util::concurrent::CompletableFuture>>(supplier, executor); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::runAsync(ref<java::lang::Runnable> runnable) { return call_static_method<SCAPIX_META_STRING("runAsync"), ref<java::util::concurrent::CompletableFuture>>(runnable); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::runAsync(ref<java::lang::Runnable> runnable, ref<java::util::concurrent::Executor> executor) { return call_static_method<SCAPIX_META_STRING("runAsync"), ref<java::util::concurrent::CompletableFuture>>(runnable, executor); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::completedFuture(ref<java::lang::Object> value) { return call_static_method<SCAPIX_META_STRING("completedFuture"), ref<java::util::concurrent::CompletableFuture>>(value); }
inline jboolean CompletableFuture::isDone() { return call_method<SCAPIX_META_STRING("isDone"), jboolean>(); }
inline ref<java::lang::Object> CompletableFuture::get() { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> CompletableFuture::get(jlong timeout, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(timeout, p2); }
inline ref<java::lang::Object> CompletableFuture::join() { return call_method<SCAPIX_META_STRING("join"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> CompletableFuture::getNow(ref<java::lang::Object> valueIfAbsent) { return call_method<SCAPIX_META_STRING("getNow"), ref<java::lang::Object>>(valueIfAbsent); }
inline jboolean CompletableFuture::complete(ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("complete"), jboolean>(value); }
inline jboolean CompletableFuture::completeExceptionally(ref<java::lang::Throwable> ex) { return call_method<SCAPIX_META_STRING("completeExceptionally"), jboolean>(ex); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenApply(ref<java::util::function::Function> fn) { return call_method<SCAPIX_META_STRING("thenApply"), ref<java::util::concurrent::CompletableFuture>>(fn); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenApplyAsync(ref<java::util::function::Function> fn) { return call_method<SCAPIX_META_STRING("thenApplyAsync"), ref<java::util::concurrent::CompletableFuture>>(fn); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenApplyAsync(ref<java::util::function::Function> fn, ref<java::util::concurrent::Executor> executor) { return call_method<SCAPIX_META_STRING("thenApplyAsync"), ref<java::util::concurrent::CompletableFuture>>(fn, executor); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenAccept(ref<java::util::function::Consumer> action) { return call_method<SCAPIX_META_STRING("thenAccept"), ref<java::util::concurrent::CompletableFuture>>(action); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenAcceptAsync(ref<java::util::function::Consumer> action) { return call_method<SCAPIX_META_STRING("thenAcceptAsync"), ref<java::util::concurrent::CompletableFuture>>(action); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenAcceptAsync(ref<java::util::function::Consumer> action, ref<java::util::concurrent::Executor> executor) { return call_method<SCAPIX_META_STRING("thenAcceptAsync"), ref<java::util::concurrent::CompletableFuture>>(action, executor); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenRun(ref<java::lang::Runnable> action) { return call_method<SCAPIX_META_STRING("thenRun"), ref<java::util::concurrent::CompletableFuture>>(action); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenRunAsync(ref<java::lang::Runnable> action) { return call_method<SCAPIX_META_STRING("thenRunAsync"), ref<java::util::concurrent::CompletableFuture>>(action); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenRunAsync(ref<java::lang::Runnable> action, ref<java::util::concurrent::Executor> executor) { return call_method<SCAPIX_META_STRING("thenRunAsync"), ref<java::util::concurrent::CompletableFuture>>(action, executor); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenCombine(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::BiFunction> fn) { return call_method<SCAPIX_META_STRING("thenCombine"), ref<java::util::concurrent::CompletableFuture>>(other, fn); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenCombineAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::BiFunction> fn) { return call_method<SCAPIX_META_STRING("thenCombineAsync"), ref<java::util::concurrent::CompletableFuture>>(other, fn); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenCombineAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::BiFunction> fn, ref<java::util::concurrent::Executor> executor) { return call_method<SCAPIX_META_STRING("thenCombineAsync"), ref<java::util::concurrent::CompletableFuture>>(other, fn, executor); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenAcceptBoth(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::BiConsumer> action) { return call_method<SCAPIX_META_STRING("thenAcceptBoth"), ref<java::util::concurrent::CompletableFuture>>(other, action); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenAcceptBothAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::BiConsumer> action) { return call_method<SCAPIX_META_STRING("thenAcceptBothAsync"), ref<java::util::concurrent::CompletableFuture>>(other, action); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenAcceptBothAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::BiConsumer> action, ref<java::util::concurrent::Executor> executor) { return call_method<SCAPIX_META_STRING("thenAcceptBothAsync"), ref<java::util::concurrent::CompletableFuture>>(other, action, executor); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::runAfterBoth(ref<java::util::concurrent::CompletionStage> other, ref<java::lang::Runnable> action) { return call_method<SCAPIX_META_STRING("runAfterBoth"), ref<java::util::concurrent::CompletableFuture>>(other, action); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::runAfterBothAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::lang::Runnable> action) { return call_method<SCAPIX_META_STRING("runAfterBothAsync"), ref<java::util::concurrent::CompletableFuture>>(other, action); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::runAfterBothAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::lang::Runnable> action, ref<java::util::concurrent::Executor> executor) { return call_method<SCAPIX_META_STRING("runAfterBothAsync"), ref<java::util::concurrent::CompletableFuture>>(other, action, executor); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::applyToEither(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::Function> fn) { return call_method<SCAPIX_META_STRING("applyToEither"), ref<java::util::concurrent::CompletableFuture>>(other, fn); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::applyToEitherAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::Function> fn) { return call_method<SCAPIX_META_STRING("applyToEitherAsync"), ref<java::util::concurrent::CompletableFuture>>(other, fn); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::applyToEitherAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::Function> fn, ref<java::util::concurrent::Executor> executor) { return call_method<SCAPIX_META_STRING("applyToEitherAsync"), ref<java::util::concurrent::CompletableFuture>>(other, fn, executor); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::acceptEither(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::Consumer> action) { return call_method<SCAPIX_META_STRING("acceptEither"), ref<java::util::concurrent::CompletableFuture>>(other, action); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::acceptEitherAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::Consumer> action) { return call_method<SCAPIX_META_STRING("acceptEitherAsync"), ref<java::util::concurrent::CompletableFuture>>(other, action); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::acceptEitherAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::util::function::Consumer> action, ref<java::util::concurrent::Executor> executor) { return call_method<SCAPIX_META_STRING("acceptEitherAsync"), ref<java::util::concurrent::CompletableFuture>>(other, action, executor); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::runAfterEither(ref<java::util::concurrent::CompletionStage> other, ref<java::lang::Runnable> action) { return call_method<SCAPIX_META_STRING("runAfterEither"), ref<java::util::concurrent::CompletableFuture>>(other, action); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::runAfterEitherAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::lang::Runnable> action) { return call_method<SCAPIX_META_STRING("runAfterEitherAsync"), ref<java::util::concurrent::CompletableFuture>>(other, action); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::runAfterEitherAsync(ref<java::util::concurrent::CompletionStage> other, ref<java::lang::Runnable> action, ref<java::util::concurrent::Executor> executor) { return call_method<SCAPIX_META_STRING("runAfterEitherAsync"), ref<java::util::concurrent::CompletableFuture>>(other, action, executor); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenCompose(ref<java::util::function::Function> fn) { return call_method<SCAPIX_META_STRING("thenCompose"), ref<java::util::concurrent::CompletableFuture>>(fn); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenComposeAsync(ref<java::util::function::Function> fn) { return call_method<SCAPIX_META_STRING("thenComposeAsync"), ref<java::util::concurrent::CompletableFuture>>(fn); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::thenComposeAsync(ref<java::util::function::Function> fn, ref<java::util::concurrent::Executor> executor) { return call_method<SCAPIX_META_STRING("thenComposeAsync"), ref<java::util::concurrent::CompletableFuture>>(fn, executor); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::whenComplete(ref<java::util::function::BiConsumer> action) { return call_method<SCAPIX_META_STRING("whenComplete"), ref<java::util::concurrent::CompletableFuture>>(action); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::whenCompleteAsync(ref<java::util::function::BiConsumer> action) { return call_method<SCAPIX_META_STRING("whenCompleteAsync"), ref<java::util::concurrent::CompletableFuture>>(action); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::whenCompleteAsync(ref<java::util::function::BiConsumer> action, ref<java::util::concurrent::Executor> executor) { return call_method<SCAPIX_META_STRING("whenCompleteAsync"), ref<java::util::concurrent::CompletableFuture>>(action, executor); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::handle(ref<java::util::function::BiFunction> fn) { return call_method<SCAPIX_META_STRING("handle"), ref<java::util::concurrent::CompletableFuture>>(fn); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::handleAsync(ref<java::util::function::BiFunction> fn) { return call_method<SCAPIX_META_STRING("handleAsync"), ref<java::util::concurrent::CompletableFuture>>(fn); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::handleAsync(ref<java::util::function::BiFunction> fn, ref<java::util::concurrent::Executor> executor) { return call_method<SCAPIX_META_STRING("handleAsync"), ref<java::util::concurrent::CompletableFuture>>(fn, executor); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::toCompletableFuture() { return call_method<SCAPIX_META_STRING("toCompletableFuture"), ref<java::util::concurrent::CompletableFuture>>(); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::exceptionally(ref<java::util::function::Function> fn) { return call_method<SCAPIX_META_STRING("exceptionally"), ref<java::util::concurrent::CompletableFuture>>(fn); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::allOf(ref<link::java::array<java::util::concurrent::CompletableFuture>> cfs) { return call_static_method<SCAPIX_META_STRING("allOf"), ref<java::util::concurrent::CompletableFuture>>(cfs); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::anyOf(ref<link::java::array<java::util::concurrent::CompletableFuture>> cfs) { return call_static_method<SCAPIX_META_STRING("anyOf"), ref<java::util::concurrent::CompletableFuture>>(cfs); }
inline jboolean CompletableFuture::cancel(jboolean mayInterruptIfRunning) { return call_method<SCAPIX_META_STRING("cancel"), jboolean>(mayInterruptIfRunning); }
inline jboolean CompletableFuture::isCancelled() { return call_method<SCAPIX_META_STRING("isCancelled"), jboolean>(); }
inline jboolean CompletableFuture::isCompletedExceptionally() { return call_method<SCAPIX_META_STRING("isCompletedExceptionally"), jboolean>(); }
inline void CompletableFuture::obtrudeValue(ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("obtrudeValue"), void>(value); }
inline void CompletableFuture::obtrudeException(ref<java::lang::Throwable> ex) { return call_method<SCAPIX_META_STRING("obtrudeException"), void>(ex); }
inline jint CompletableFuture::getNumberOfDependents() { return call_method<SCAPIX_META_STRING("getNumberOfDependents"), jint>(); }
inline ref<java::lang::String> CompletableFuture::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::newIncompleteFuture() { return call_method<SCAPIX_META_STRING("newIncompleteFuture"), ref<java::util::concurrent::CompletableFuture>>(); }
inline ref<java::util::concurrent::Executor> CompletableFuture::defaultExecutor() { return call_method<SCAPIX_META_STRING("defaultExecutor"), ref<java::util::concurrent::Executor>>(); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::copy() { return call_method<SCAPIX_META_STRING("copy"), ref<java::util::concurrent::CompletableFuture>>(); }
inline ref<java::util::concurrent::CompletionStage> CompletableFuture::minimalCompletionStage() { return call_method<SCAPIX_META_STRING("minimalCompletionStage"), ref<java::util::concurrent::CompletionStage>>(); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::completeAsync(ref<java::util::function::Supplier> supplier, ref<java::util::concurrent::Executor> executor) { return call_method<SCAPIX_META_STRING("completeAsync"), ref<java::util::concurrent::CompletableFuture>>(supplier, executor); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::completeAsync(ref<java::util::function::Supplier> supplier) { return call_method<SCAPIX_META_STRING("completeAsync"), ref<java::util::concurrent::CompletableFuture>>(supplier); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::orTimeout(jlong timeout, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("orTimeout"), ref<java::util::concurrent::CompletableFuture>>(timeout, p2); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::completeOnTimeout(ref<java::lang::Object> value, jlong timeout, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("completeOnTimeout"), ref<java::util::concurrent::CompletableFuture>>(value, timeout, p3); }
inline ref<java::util::concurrent::Executor> CompletableFuture::delayedExecutor(jlong delay, ref<java::util::concurrent::TimeUnit> p2, ref<java::util::concurrent::Executor> unit) { return call_static_method<SCAPIX_META_STRING("delayedExecutor"), ref<java::util::concurrent::Executor>>(delay, p2, unit); }
inline ref<java::util::concurrent::Executor> CompletableFuture::delayedExecutor(jlong delay, ref<java::util::concurrent::TimeUnit> p2) { return call_static_method<SCAPIX_META_STRING("delayedExecutor"), ref<java::util::concurrent::Executor>>(delay, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletableFuture::completedStage(ref<java::lang::Object> value) { return call_static_method<SCAPIX_META_STRING("completedStage"), ref<java::util::concurrent::CompletionStage>>(value); }
inline ref<java::util::concurrent::CompletableFuture> CompletableFuture::failedFuture(ref<java::lang::Throwable> ex) { return call_static_method<SCAPIX_META_STRING("failedFuture"), ref<java::util::concurrent::CompletableFuture>>(ex); }
inline ref<java::util::concurrent::CompletionStage> CompletableFuture::failedStage(ref<java::lang::Throwable> ex) { return call_static_method<SCAPIX_META_STRING("failedStage"), ref<java::util::concurrent::CompletionStage>>(ex); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_COMPLETABLEFUTURE_H
