// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/RunnableFuture.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_FUTURETASK_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_FUTURETASK_H

namespace scapix::java_api {

namespace java::lang { class Runnable; }
namespace java::lang { class String; }
namespace java::util::concurrent { class Callable; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::util::concurrent {

class FutureTask : public object_base<SCAPIX_META_STRING("java/util/concurrent/FutureTask"),
	java::lang::Object,
	java::util::concurrent::RunnableFuture>
{
public:

	static ref<FutureTask> new_object(ref<java::util::concurrent::Callable> callable);
	static ref<FutureTask> new_object(ref<java::lang::Runnable> runnable, ref<java::lang::Object> result);
	jboolean isCancelled();
	jboolean isDone();
	jboolean cancel(jboolean mayInterruptIfRunning);
	ref<java::lang::Object> get();
	ref<java::lang::Object> get(jlong timeout, ref<java::util::concurrent::TimeUnit> p2);
	void run();
	ref<java::lang::String> toString();

protected:

	FutureTask(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<FutureTask> FutureTask::new_object(ref<java::util::concurrent::Callable> callable) { return base_::new_object(callable); }
inline ref<FutureTask> FutureTask::new_object(ref<java::lang::Runnable> runnable, ref<java::lang::Object> result) { return base_::new_object(runnable, result); }
inline jboolean FutureTask::isCancelled() { return call_method<SCAPIX_META_STRING("isCancelled"), jboolean>(); }
inline jboolean FutureTask::isDone() { return call_method<SCAPIX_META_STRING("isDone"), jboolean>(); }
inline jboolean FutureTask::cancel(jboolean mayInterruptIfRunning) { return call_method<SCAPIX_META_STRING("cancel"), jboolean>(mayInterruptIfRunning); }
inline ref<java::lang::Object> FutureTask::get() { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> FutureTask::get(jlong timeout, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(timeout, p2); }
inline void FutureTask::run() { return call_method<SCAPIX_META_STRING("run"), void>(); }
inline ref<java::lang::String> FutureTask::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_FUTURETASK_H
