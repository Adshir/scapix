// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractMap.h>
#include <scapix/java_api/java/util/concurrent/ConcurrentMap.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_CONCURRENTHASHMAP_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_CONCURRENTHASHMAP_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::util { class Collection; }
namespace java::util { class Enumeration; }
namespace java::util { class Map; }
namespace java::util { class Map_Entry; }
namespace java::util { class Set; }
namespace java::util::concurrent { class ConcurrentHashMap_KeySetView; }
namespace java::util::function { class BiConsumer; }
namespace java::util::function { class BiFunction; }
namespace java::util::function { class Consumer; }
namespace java::util::function { class DoubleBinaryOperator; }
namespace java::util::function { class Function; }
namespace java::util::function { class IntBinaryOperator; }
namespace java::util::function { class LongBinaryOperator; }
namespace java::util::function { class ToDoubleBiFunction; }
namespace java::util::function { class ToDoubleFunction; }
namespace java::util::function { class ToIntBiFunction; }
namespace java::util::function { class ToIntFunction; }
namespace java::util::function { class ToLongBiFunction; }
namespace java::util::function { class ToLongFunction; }

namespace java::util::concurrent {

class ConcurrentHashMap : public object_base<SCAPIX_META_STRING("java/util/concurrent/ConcurrentHashMap"),
	java::util::AbstractMap,
	java::util::concurrent::ConcurrentMap,
	java::io::Serializable>
{
public:

	using KeySetView = ConcurrentHashMap_KeySetView;

	static ref<ConcurrentHashMap> new_object();
	static ref<ConcurrentHashMap> new_object(jint initialCapacity);
	static ref<ConcurrentHashMap> new_object(ref<java::util::Map> m);
	static ref<ConcurrentHashMap> new_object(jint initialCapacity, jfloat loadFactor);
	static ref<ConcurrentHashMap> new_object(jint initialCapacity, jfloat loadFactor, jint concurrencyLevel);
	jint size();
	jboolean isEmpty();
	ref<java::lang::Object> get(ref<java::lang::Object> key);
	jboolean containsKey(ref<java::lang::Object> key);
	jboolean containsValue(ref<java::lang::Object> value);
	ref<java::lang::Object> put(ref<java::lang::Object> key, ref<java::lang::Object> value);
	void putAll(ref<java::util::Map> m);
	ref<java::lang::Object> remove(ref<java::lang::Object> key);
	void clear();
	ref<java::util::concurrent::ConcurrentHashMap_KeySetView> keySet();
	ref<java::util::Collection> values();
	ref<java::util::Set> entrySet();
	jint hashCode();
	ref<java::lang::String> toString();
	jboolean equals(ref<java::lang::Object> o);
	ref<java::lang::Object> putIfAbsent(ref<java::lang::Object> key, ref<java::lang::Object> value);
	jboolean remove(ref<java::lang::Object> key, ref<java::lang::Object> value);
	jboolean replace(ref<java::lang::Object> key, ref<java::lang::Object> oldValue, ref<java::lang::Object> newValue);
	ref<java::lang::Object> replace(ref<java::lang::Object> key, ref<java::lang::Object> value);
	ref<java::lang::Object> getOrDefault(ref<java::lang::Object> key, ref<java::lang::Object> defaultValue);
	void forEach(ref<java::util::function::BiConsumer> action);
	void replaceAll(ref<java::util::function::BiFunction> function);
	ref<java::lang::Object> computeIfAbsent(ref<java::lang::Object> key, ref<java::util::function::Function> mappingFunction);
	ref<java::lang::Object> computeIfPresent(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction);
	ref<java::lang::Object> compute(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction);
	ref<java::lang::Object> merge(ref<java::lang::Object> key, ref<java::lang::Object> value, ref<java::util::function::BiFunction> remappingFunction);
	jboolean contains(ref<java::lang::Object> value);
	ref<java::util::Enumeration> keys();
	ref<java::util::Enumeration> elements();
	jlong mappingCount();
	static ref<java::util::concurrent::ConcurrentHashMap_KeySetView> newKeySet();
	static ref<java::util::concurrent::ConcurrentHashMap_KeySetView> newKeySet(jint initialCapacity);
	ref<java::util::concurrent::ConcurrentHashMap_KeySetView> keySet(ref<java::lang::Object> mappedValue);
	void forEach(jlong parallelismThreshold, ref<java::util::function::BiConsumer> p2);
	void forEach(jlong parallelismThreshold, ref<java::util::function::BiFunction> p2, ref<java::util::function::Consumer> transformer);
	ref<java::lang::Object> search(jlong parallelismThreshold, ref<java::util::function::BiFunction> p2);
	ref<java::lang::Object> reduce(jlong parallelismThreshold, ref<java::util::function::BiFunction> p2, ref<java::util::function::BiFunction> transformer);
	jdouble reduceToDouble(jlong parallelismThreshold, ref<java::util::function::ToDoubleBiFunction> p2, jdouble transformer, ref<java::util::function::DoubleBinaryOperator> basis);
	jlong reduceToLong(jlong parallelismThreshold, ref<java::util::function::ToLongBiFunction> p2, jlong transformer, ref<java::util::function::LongBinaryOperator> basis);
	jint reduceToInt(jlong parallelismThreshold, ref<java::util::function::ToIntBiFunction> p2, jint transformer, ref<java::util::function::IntBinaryOperator> basis);
	void forEachKey(jlong parallelismThreshold, ref<java::util::function::Consumer> p2);
	void forEachKey(jlong parallelismThreshold, ref<java::util::function::Function> p2, ref<java::util::function::Consumer> transformer);
	ref<java::lang::Object> searchKeys(jlong parallelismThreshold, ref<java::util::function::Function> p2);
	ref<java::lang::Object> reduceKeys(jlong parallelismThreshold, ref<java::util::function::BiFunction> p2);
	ref<java::lang::Object> reduceKeys(jlong parallelismThreshold, ref<java::util::function::Function> p2, ref<java::util::function::BiFunction> transformer);
	jdouble reduceKeysToDouble(jlong parallelismThreshold, ref<java::util::function::ToDoubleFunction> p2, jdouble transformer, ref<java::util::function::DoubleBinaryOperator> basis);
	jlong reduceKeysToLong(jlong parallelismThreshold, ref<java::util::function::ToLongFunction> p2, jlong transformer, ref<java::util::function::LongBinaryOperator> basis);
	jint reduceKeysToInt(jlong parallelismThreshold, ref<java::util::function::ToIntFunction> p2, jint transformer, ref<java::util::function::IntBinaryOperator> basis);
	void forEachValue(jlong parallelismThreshold, ref<java::util::function::Consumer> p2);
	void forEachValue(jlong parallelismThreshold, ref<java::util::function::Function> p2, ref<java::util::function::Consumer> transformer);
	ref<java::lang::Object> searchValues(jlong parallelismThreshold, ref<java::util::function::Function> p2);
	ref<java::lang::Object> reduceValues(jlong parallelismThreshold, ref<java::util::function::BiFunction> p2);
	ref<java::lang::Object> reduceValues(jlong parallelismThreshold, ref<java::util::function::Function> p2, ref<java::util::function::BiFunction> transformer);
	jdouble reduceValuesToDouble(jlong parallelismThreshold, ref<java::util::function::ToDoubleFunction> p2, jdouble transformer, ref<java::util::function::DoubleBinaryOperator> basis);
	jlong reduceValuesToLong(jlong parallelismThreshold, ref<java::util::function::ToLongFunction> p2, jlong transformer, ref<java::util::function::LongBinaryOperator> basis);
	jint reduceValuesToInt(jlong parallelismThreshold, ref<java::util::function::ToIntFunction> p2, jint transformer, ref<java::util::function::IntBinaryOperator> basis);
	void forEachEntry(jlong parallelismThreshold, ref<java::util::function::Consumer> p2);
	void forEachEntry(jlong parallelismThreshold, ref<java::util::function::Function> p2, ref<java::util::function::Consumer> transformer);
	ref<java::lang::Object> searchEntries(jlong parallelismThreshold, ref<java::util::function::Function> p2);
	ref<java::util::Map_Entry> reduceEntries(jlong parallelismThreshold, ref<java::util::function::BiFunction> p2);
	ref<java::lang::Object> reduceEntries(jlong parallelismThreshold, ref<java::util::function::Function> p2, ref<java::util::function::BiFunction> transformer);
	jdouble reduceEntriesToDouble(jlong parallelismThreshold, ref<java::util::function::ToDoubleFunction> p2, jdouble transformer, ref<java::util::function::DoubleBinaryOperator> basis);
	jlong reduceEntriesToLong(jlong parallelismThreshold, ref<java::util::function::ToLongFunction> p2, jlong transformer, ref<java::util::function::LongBinaryOperator> basis);
	jint reduceEntriesToInt(jlong parallelismThreshold, ref<java::util::function::ToIntFunction> p2, jint transformer, ref<java::util::function::IntBinaryOperator> basis);

protected:

	ConcurrentHashMap(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Map_Entry.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/concurrent/ConcurrentHashMap_KeySetView.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BiFunction.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/java/util/function/DoubleBinaryOperator.h>
#include <scapix/java_api/java/util/function/Function.h>
#include <scapix/java_api/java/util/function/IntBinaryOperator.h>
#include <scapix/java_api/java/util/function/LongBinaryOperator.h>
#include <scapix/java_api/java/util/function/ToDoubleBiFunction.h>
#include <scapix/java_api/java/util/function/ToDoubleFunction.h>
#include <scapix/java_api/java/util/function/ToIntBiFunction.h>
#include <scapix/java_api/java/util/function/ToIntFunction.h>
#include <scapix/java_api/java/util/function/ToLongBiFunction.h>
#include <scapix/java_api/java/util/function/ToLongFunction.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<ConcurrentHashMap> ConcurrentHashMap::new_object() { return base_::new_object(); }
inline ref<ConcurrentHashMap> ConcurrentHashMap::new_object(jint initialCapacity) { return base_::new_object(initialCapacity); }
inline ref<ConcurrentHashMap> ConcurrentHashMap::new_object(ref<java::util::Map> m) { return base_::new_object(m); }
inline ref<ConcurrentHashMap> ConcurrentHashMap::new_object(jint initialCapacity, jfloat loadFactor) { return base_::new_object(initialCapacity, loadFactor); }
inline ref<ConcurrentHashMap> ConcurrentHashMap::new_object(jint initialCapacity, jfloat loadFactor, jint concurrencyLevel) { return base_::new_object(initialCapacity, loadFactor, concurrencyLevel); }
inline jint ConcurrentHashMap::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jboolean ConcurrentHashMap::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline ref<java::lang::Object> ConcurrentHashMap::get(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(key); }
inline jboolean ConcurrentHashMap::containsKey(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("containsKey"), jboolean>(key); }
inline jboolean ConcurrentHashMap::containsValue(ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("containsValue"), jboolean>(value); }
inline ref<java::lang::Object> ConcurrentHashMap::put(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("put"), ref<java::lang::Object>>(key, value); }
inline void ConcurrentHashMap::putAll(ref<java::util::Map> m) { return call_method<SCAPIX_META_STRING("putAll"), void>(m); }
inline ref<java::lang::Object> ConcurrentHashMap::remove(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("remove"), ref<java::lang::Object>>(key); }
inline void ConcurrentHashMap::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline ref<java::util::concurrent::ConcurrentHashMap_KeySetView> ConcurrentHashMap::keySet() { return call_method<SCAPIX_META_STRING("keySet"), ref<java::util::concurrent::ConcurrentHashMap_KeySetView>>(); }
inline ref<java::util::Collection> ConcurrentHashMap::values() { return call_method<SCAPIX_META_STRING("values"), ref<java::util::Collection>>(); }
inline ref<java::util::Set> ConcurrentHashMap::entrySet() { return call_method<SCAPIX_META_STRING("entrySet"), ref<java::util::Set>>(); }
inline jint ConcurrentHashMap::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> ConcurrentHashMap::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean ConcurrentHashMap::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline ref<java::lang::Object> ConcurrentHashMap::putIfAbsent(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("putIfAbsent"), ref<java::lang::Object>>(key, value); }
inline jboolean ConcurrentHashMap::remove(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("remove"), jboolean>(key, value); }
inline jboolean ConcurrentHashMap::replace(ref<java::lang::Object> key, ref<java::lang::Object> oldValue, ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("replace"), jboolean>(key, oldValue, newValue); }
inline ref<java::lang::Object> ConcurrentHashMap::replace(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("replace"), ref<java::lang::Object>>(key, value); }
inline ref<java::lang::Object> ConcurrentHashMap::getOrDefault(ref<java::lang::Object> key, ref<java::lang::Object> defaultValue) { return call_method<SCAPIX_META_STRING("getOrDefault"), ref<java::lang::Object>>(key, defaultValue); }
inline void ConcurrentHashMap::forEach(ref<java::util::function::BiConsumer> action) { return call_method<SCAPIX_META_STRING("forEach"), void>(action); }
inline void ConcurrentHashMap::replaceAll(ref<java::util::function::BiFunction> function) { return call_method<SCAPIX_META_STRING("replaceAll"), void>(function); }
inline ref<java::lang::Object> ConcurrentHashMap::computeIfAbsent(ref<java::lang::Object> key, ref<java::util::function::Function> mappingFunction) { return call_method<SCAPIX_META_STRING("computeIfAbsent"), ref<java::lang::Object>>(key, mappingFunction); }
inline ref<java::lang::Object> ConcurrentHashMap::computeIfPresent(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("computeIfPresent"), ref<java::lang::Object>>(key, remappingFunction); }
inline ref<java::lang::Object> ConcurrentHashMap::compute(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("compute"), ref<java::lang::Object>>(key, remappingFunction); }
inline ref<java::lang::Object> ConcurrentHashMap::merge(ref<java::lang::Object> key, ref<java::lang::Object> value, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("merge"), ref<java::lang::Object>>(key, value, remappingFunction); }
inline jboolean ConcurrentHashMap::contains(ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(value); }
inline ref<java::util::Enumeration> ConcurrentHashMap::keys() { return call_method<SCAPIX_META_STRING("keys"), ref<java::util::Enumeration>>(); }
inline ref<java::util::Enumeration> ConcurrentHashMap::elements() { return call_method<SCAPIX_META_STRING("elements"), ref<java::util::Enumeration>>(); }
inline jlong ConcurrentHashMap::mappingCount() { return call_method<SCAPIX_META_STRING("mappingCount"), jlong>(); }
inline ref<java::util::concurrent::ConcurrentHashMap_KeySetView> ConcurrentHashMap::newKeySet() { return call_static_method<SCAPIX_META_STRING("newKeySet"), ref<java::util::concurrent::ConcurrentHashMap_KeySetView>>(); }
inline ref<java::util::concurrent::ConcurrentHashMap_KeySetView> ConcurrentHashMap::newKeySet(jint initialCapacity) { return call_static_method<SCAPIX_META_STRING("newKeySet"), ref<java::util::concurrent::ConcurrentHashMap_KeySetView>>(initialCapacity); }
inline ref<java::util::concurrent::ConcurrentHashMap_KeySetView> ConcurrentHashMap::keySet(ref<java::lang::Object> mappedValue) { return call_method<SCAPIX_META_STRING("keySet"), ref<java::util::concurrent::ConcurrentHashMap_KeySetView>>(mappedValue); }
inline void ConcurrentHashMap::forEach(jlong parallelismThreshold, ref<java::util::function::BiConsumer> p2) { return call_method<SCAPIX_META_STRING("forEach"), void>(parallelismThreshold, p2); }
inline void ConcurrentHashMap::forEach(jlong parallelismThreshold, ref<java::util::function::BiFunction> p2, ref<java::util::function::Consumer> transformer) { return call_method<SCAPIX_META_STRING("forEach"), void>(parallelismThreshold, p2, transformer); }
inline ref<java::lang::Object> ConcurrentHashMap::search(jlong parallelismThreshold, ref<java::util::function::BiFunction> p2) { return call_method<SCAPIX_META_STRING("search"), ref<java::lang::Object>>(parallelismThreshold, p2); }
inline ref<java::lang::Object> ConcurrentHashMap::reduce(jlong parallelismThreshold, ref<java::util::function::BiFunction> p2, ref<java::util::function::BiFunction> transformer) { return call_method<SCAPIX_META_STRING("reduce"), ref<java::lang::Object>>(parallelismThreshold, p2, transformer); }
inline jdouble ConcurrentHashMap::reduceToDouble(jlong parallelismThreshold, ref<java::util::function::ToDoubleBiFunction> p2, jdouble transformer, ref<java::util::function::DoubleBinaryOperator> basis) { return call_method<SCAPIX_META_STRING("reduceToDouble"), jdouble>(parallelismThreshold, p2, transformer, basis); }
inline jlong ConcurrentHashMap::reduceToLong(jlong parallelismThreshold, ref<java::util::function::ToLongBiFunction> p2, jlong transformer, ref<java::util::function::LongBinaryOperator> basis) { return call_method<SCAPIX_META_STRING("reduceToLong"), jlong>(parallelismThreshold, p2, transformer, basis); }
inline jint ConcurrentHashMap::reduceToInt(jlong parallelismThreshold, ref<java::util::function::ToIntBiFunction> p2, jint transformer, ref<java::util::function::IntBinaryOperator> basis) { return call_method<SCAPIX_META_STRING("reduceToInt"), jint>(parallelismThreshold, p2, transformer, basis); }
inline void ConcurrentHashMap::forEachKey(jlong parallelismThreshold, ref<java::util::function::Consumer> p2) { return call_method<SCAPIX_META_STRING("forEachKey"), void>(parallelismThreshold, p2); }
inline void ConcurrentHashMap::forEachKey(jlong parallelismThreshold, ref<java::util::function::Function> p2, ref<java::util::function::Consumer> transformer) { return call_method<SCAPIX_META_STRING("forEachKey"), void>(parallelismThreshold, p2, transformer); }
inline ref<java::lang::Object> ConcurrentHashMap::searchKeys(jlong parallelismThreshold, ref<java::util::function::Function> p2) { return call_method<SCAPIX_META_STRING("searchKeys"), ref<java::lang::Object>>(parallelismThreshold, p2); }
inline ref<java::lang::Object> ConcurrentHashMap::reduceKeys(jlong parallelismThreshold, ref<java::util::function::BiFunction> p2) { return call_method<SCAPIX_META_STRING("reduceKeys"), ref<java::lang::Object>>(parallelismThreshold, p2); }
inline ref<java::lang::Object> ConcurrentHashMap::reduceKeys(jlong parallelismThreshold, ref<java::util::function::Function> p2, ref<java::util::function::BiFunction> transformer) { return call_method<SCAPIX_META_STRING("reduceKeys"), ref<java::lang::Object>>(parallelismThreshold, p2, transformer); }
inline jdouble ConcurrentHashMap::reduceKeysToDouble(jlong parallelismThreshold, ref<java::util::function::ToDoubleFunction> p2, jdouble transformer, ref<java::util::function::DoubleBinaryOperator> basis) { return call_method<SCAPIX_META_STRING("reduceKeysToDouble"), jdouble>(parallelismThreshold, p2, transformer, basis); }
inline jlong ConcurrentHashMap::reduceKeysToLong(jlong parallelismThreshold, ref<java::util::function::ToLongFunction> p2, jlong transformer, ref<java::util::function::LongBinaryOperator> basis) { return call_method<SCAPIX_META_STRING("reduceKeysToLong"), jlong>(parallelismThreshold, p2, transformer, basis); }
inline jint ConcurrentHashMap::reduceKeysToInt(jlong parallelismThreshold, ref<java::util::function::ToIntFunction> p2, jint transformer, ref<java::util::function::IntBinaryOperator> basis) { return call_method<SCAPIX_META_STRING("reduceKeysToInt"), jint>(parallelismThreshold, p2, transformer, basis); }
inline void ConcurrentHashMap::forEachValue(jlong parallelismThreshold, ref<java::util::function::Consumer> p2) { return call_method<SCAPIX_META_STRING("forEachValue"), void>(parallelismThreshold, p2); }
inline void ConcurrentHashMap::forEachValue(jlong parallelismThreshold, ref<java::util::function::Function> p2, ref<java::util::function::Consumer> transformer) { return call_method<SCAPIX_META_STRING("forEachValue"), void>(parallelismThreshold, p2, transformer); }
inline ref<java::lang::Object> ConcurrentHashMap::searchValues(jlong parallelismThreshold, ref<java::util::function::Function> p2) { return call_method<SCAPIX_META_STRING("searchValues"), ref<java::lang::Object>>(parallelismThreshold, p2); }
inline ref<java::lang::Object> ConcurrentHashMap::reduceValues(jlong parallelismThreshold, ref<java::util::function::BiFunction> p2) { return call_method<SCAPIX_META_STRING("reduceValues"), ref<java::lang::Object>>(parallelismThreshold, p2); }
inline ref<java::lang::Object> ConcurrentHashMap::reduceValues(jlong parallelismThreshold, ref<java::util::function::Function> p2, ref<java::util::function::BiFunction> transformer) { return call_method<SCAPIX_META_STRING("reduceValues"), ref<java::lang::Object>>(parallelismThreshold, p2, transformer); }
inline jdouble ConcurrentHashMap::reduceValuesToDouble(jlong parallelismThreshold, ref<java::util::function::ToDoubleFunction> p2, jdouble transformer, ref<java::util::function::DoubleBinaryOperator> basis) { return call_method<SCAPIX_META_STRING("reduceValuesToDouble"), jdouble>(parallelismThreshold, p2, transformer, basis); }
inline jlong ConcurrentHashMap::reduceValuesToLong(jlong parallelismThreshold, ref<java::util::function::ToLongFunction> p2, jlong transformer, ref<java::util::function::LongBinaryOperator> basis) { return call_method<SCAPIX_META_STRING("reduceValuesToLong"), jlong>(parallelismThreshold, p2, transformer, basis); }
inline jint ConcurrentHashMap::reduceValuesToInt(jlong parallelismThreshold, ref<java::util::function::ToIntFunction> p2, jint transformer, ref<java::util::function::IntBinaryOperator> basis) { return call_method<SCAPIX_META_STRING("reduceValuesToInt"), jint>(parallelismThreshold, p2, transformer, basis); }
inline void ConcurrentHashMap::forEachEntry(jlong parallelismThreshold, ref<java::util::function::Consumer> p2) { return call_method<SCAPIX_META_STRING("forEachEntry"), void>(parallelismThreshold, p2); }
inline void ConcurrentHashMap::forEachEntry(jlong parallelismThreshold, ref<java::util::function::Function> p2, ref<java::util::function::Consumer> transformer) { return call_method<SCAPIX_META_STRING("forEachEntry"), void>(parallelismThreshold, p2, transformer); }
inline ref<java::lang::Object> ConcurrentHashMap::searchEntries(jlong parallelismThreshold, ref<java::util::function::Function> p2) { return call_method<SCAPIX_META_STRING("searchEntries"), ref<java::lang::Object>>(parallelismThreshold, p2); }
inline ref<java::util::Map_Entry> ConcurrentHashMap::reduceEntries(jlong parallelismThreshold, ref<java::util::function::BiFunction> p2) { return call_method<SCAPIX_META_STRING("reduceEntries"), ref<java::util::Map_Entry>>(parallelismThreshold, p2); }
inline ref<java::lang::Object> ConcurrentHashMap::reduceEntries(jlong parallelismThreshold, ref<java::util::function::Function> p2, ref<java::util::function::BiFunction> transformer) { return call_method<SCAPIX_META_STRING("reduceEntries"), ref<java::lang::Object>>(parallelismThreshold, p2, transformer); }
inline jdouble ConcurrentHashMap::reduceEntriesToDouble(jlong parallelismThreshold, ref<java::util::function::ToDoubleFunction> p2, jdouble transformer, ref<java::util::function::DoubleBinaryOperator> basis) { return call_method<SCAPIX_META_STRING("reduceEntriesToDouble"), jdouble>(parallelismThreshold, p2, transformer, basis); }
inline jlong ConcurrentHashMap::reduceEntriesToLong(jlong parallelismThreshold, ref<java::util::function::ToLongFunction> p2, jlong transformer, ref<java::util::function::LongBinaryOperator> basis) { return call_method<SCAPIX_META_STRING("reduceEntriesToLong"), jlong>(parallelismThreshold, p2, transformer, basis); }
inline jint ConcurrentHashMap::reduceEntriesToInt(jlong parallelismThreshold, ref<java::util::function::ToIntFunction> p2, jint transformer, ref<java::util::function::IntBinaryOperator> basis) { return call_method<SCAPIX_META_STRING("reduceEntriesToInt"), jint>(parallelismThreshold, p2, transformer, basis); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_CONCURRENTHASHMAP_H
