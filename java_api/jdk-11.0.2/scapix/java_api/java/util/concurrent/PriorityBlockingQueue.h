// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractQueue.h>
#include <scapix/java_api/java/util/concurrent/BlockingQueue.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_PRIORITYBLOCKINGQUEUE_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_PRIORITYBLOCKINGQUEUE_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::util { class Collection; }
namespace java::util { class Comparator; }
namespace java::util { class Iterator; }
namespace java::util { class Spliterator; }
namespace java::util::concurrent { class TimeUnit; }
namespace java::util::function { class Consumer; }
namespace java::util::function { class Predicate; }

namespace java::util::concurrent {

class PriorityBlockingQueue : public object_base<SCAPIX_META_STRING("java/util/concurrent/PriorityBlockingQueue"),
	java::util::AbstractQueue,
	java::util::concurrent::BlockingQueue,
	java::io::Serializable>
{
public:

	static ref<PriorityBlockingQueue> new_object();
	static ref<PriorityBlockingQueue> new_object(jint initialCapacity);
	static ref<PriorityBlockingQueue> new_object(jint initialCapacity, ref<java::util::Comparator> comparator);
	static ref<PriorityBlockingQueue> new_object(ref<java::util::Collection> c);
	jboolean add(ref<java::lang::Object> e);
	jboolean offer(ref<java::lang::Object> e);
	void put(ref<java::lang::Object> e);
	jboolean offer(ref<java::lang::Object> e, jlong timeout, ref<java::util::concurrent::TimeUnit> p3);
	ref<java::lang::Object> poll();
	ref<java::lang::Object> take();
	ref<java::lang::Object> poll(jlong timeout, ref<java::util::concurrent::TimeUnit> p2);
	ref<java::lang::Object> peek();
	ref<java::util::Comparator> comparator();
	jint size();
	jint remainingCapacity();
	jboolean remove(ref<java::lang::Object> o);
	jboolean contains(ref<java::lang::Object> o);
	ref<java::lang::String> toString();
	jint drainTo(ref<java::util::Collection> c);
	jint drainTo(ref<java::util::Collection> c, jint maxElements);
	void clear();
	ref<link::java::array<java::lang::Object>> toArray();
	ref<link::java::array<java::lang::Object>> toArray(ref<link::java::array<java::lang::Object>> a);
	ref<java::util::Iterator> iterator();
	ref<java::util::Spliterator> spliterator();
	jboolean removeIf(ref<java::util::function::Predicate> filter);
	jboolean removeAll(ref<java::util::Collection> c);
	jboolean retainAll(ref<java::util::Collection> c);
	void forEach(ref<java::util::function::Consumer> action);

protected:

	PriorityBlockingQueue(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Comparator.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/java/util/function/Predicate.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<PriorityBlockingQueue> PriorityBlockingQueue::new_object() { return base_::new_object(); }
inline ref<PriorityBlockingQueue> PriorityBlockingQueue::new_object(jint initialCapacity) { return base_::new_object(initialCapacity); }
inline ref<PriorityBlockingQueue> PriorityBlockingQueue::new_object(jint initialCapacity, ref<java::util::Comparator> comparator) { return base_::new_object(initialCapacity, comparator); }
inline ref<PriorityBlockingQueue> PriorityBlockingQueue::new_object(ref<java::util::Collection> c) { return base_::new_object(c); }
inline jboolean PriorityBlockingQueue::add(ref<java::lang::Object> e) { return call_method<SCAPIX_META_STRING("add"), jboolean>(e); }
inline jboolean PriorityBlockingQueue::offer(ref<java::lang::Object> e) { return call_method<SCAPIX_META_STRING("offer"), jboolean>(e); }
inline void PriorityBlockingQueue::put(ref<java::lang::Object> e) { return call_method<SCAPIX_META_STRING("put"), void>(e); }
inline jboolean PriorityBlockingQueue::offer(ref<java::lang::Object> e, jlong timeout, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("offer"), jboolean>(e, timeout, p3); }
inline ref<java::lang::Object> PriorityBlockingQueue::poll() { return call_method<SCAPIX_META_STRING("poll"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> PriorityBlockingQueue::take() { return call_method<SCAPIX_META_STRING("take"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> PriorityBlockingQueue::poll(jlong timeout, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("poll"), ref<java::lang::Object>>(timeout, p2); }
inline ref<java::lang::Object> PriorityBlockingQueue::peek() { return call_method<SCAPIX_META_STRING("peek"), ref<java::lang::Object>>(); }
inline ref<java::util::Comparator> PriorityBlockingQueue::comparator() { return call_method<SCAPIX_META_STRING("comparator"), ref<java::util::Comparator>>(); }
inline jint PriorityBlockingQueue::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jint PriorityBlockingQueue::remainingCapacity() { return call_method<SCAPIX_META_STRING("remainingCapacity"), jint>(); }
inline jboolean PriorityBlockingQueue::remove(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("remove"), jboolean>(o); }
inline jboolean PriorityBlockingQueue::contains(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(o); }
inline ref<java::lang::String> PriorityBlockingQueue::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint PriorityBlockingQueue::drainTo(ref<java::util::Collection> c) { return call_method<SCAPIX_META_STRING("drainTo"), jint>(c); }
inline jint PriorityBlockingQueue::drainTo(ref<java::util::Collection> c, jint maxElements) { return call_method<SCAPIX_META_STRING("drainTo"), jint>(c, maxElements); }
inline void PriorityBlockingQueue::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline ref<link::java::array<java::lang::Object>> PriorityBlockingQueue::toArray() { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<java::lang::Object>>>(); }
inline ref<link::java::array<java::lang::Object>> PriorityBlockingQueue::toArray(ref<link::java::array<java::lang::Object>> a) { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<java::lang::Object>>>(a); }
inline ref<java::util::Iterator> PriorityBlockingQueue::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::Iterator>>(); }
inline ref<java::util::Spliterator> PriorityBlockingQueue::spliterator() { return call_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator>>(); }
inline jboolean PriorityBlockingQueue::removeIf(ref<java::util::function::Predicate> filter) { return call_method<SCAPIX_META_STRING("removeIf"), jboolean>(filter); }
inline jboolean PriorityBlockingQueue::removeAll(ref<java::util::Collection> c) { return call_method<SCAPIX_META_STRING("removeAll"), jboolean>(c); }
inline jboolean PriorityBlockingQueue::retainAll(ref<java::util::Collection> c) { return call_method<SCAPIX_META_STRING("retainAll"), jboolean>(c); }
inline void PriorityBlockingQueue::forEach(ref<java::util::function::Consumer> action) { return call_method<SCAPIX_META_STRING("forEach"), void>(action); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_PRIORITYBLOCKINGQUEUE_H
