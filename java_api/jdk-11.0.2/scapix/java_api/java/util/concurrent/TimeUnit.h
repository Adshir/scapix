// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_TIMEUNIT_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_TIMEUNIT_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::lang { class Thread; }
namespace java::time { class Duration; }
namespace java::time::temporal { class ChronoUnit; }

namespace java::util::concurrent {

class TimeUnit : public object_base<SCAPIX_META_STRING("java/util/concurrent/TimeUnit"),
	java::lang::Enum>
{
public:

	static ref<java::util::concurrent::TimeUnit> NANOSECONDS_();
	static ref<java::util::concurrent::TimeUnit> MICROSECONDS_();
	static ref<java::util::concurrent::TimeUnit> MILLISECONDS_();
	static ref<java::util::concurrent::TimeUnit> SECONDS_();
	static ref<java::util::concurrent::TimeUnit> MINUTES_();
	static ref<java::util::concurrent::TimeUnit> HOURS_();
	static ref<java::util::concurrent::TimeUnit> DAYS_();

	static ref<link::java::array<java::util::concurrent::TimeUnit>> values();
	static ref<java::util::concurrent::TimeUnit> valueOf(ref<java::lang::String> name);
	jlong convert(jlong sourceDuration, ref<java::util::concurrent::TimeUnit> p2);
	jlong convert(ref<java::time::Duration> duration);
	jlong toNanos(jlong duration);
	jlong toMicros(jlong duration);
	jlong toMillis(jlong duration);
	jlong toSeconds(jlong duration);
	jlong toMinutes(jlong duration);
	jlong toHours(jlong duration);
	jlong toDays(jlong duration);
	void timedWait(ref<java::lang::Object> obj, jlong timeout);
	void timedJoin(ref<java::lang::Thread> thread, jlong timeout);
	void sleep(jlong timeout);
	ref<java::time::temporal::ChronoUnit> toChronoUnit();
	static ref<java::util::concurrent::TimeUnit> of(ref<java::time::temporal::ChronoUnit> chronoUnit);

protected:

	TimeUnit(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>
#include <scapix/java_api/java/time/Duration.h>
#include <scapix/java_api/java/time/temporal/ChronoUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<java::util::concurrent::TimeUnit> TimeUnit::NANOSECONDS_() { return get_static_field<SCAPIX_META_STRING("NANOSECONDS"), ref<java::util::concurrent::TimeUnit>>(); }
inline ref<java::util::concurrent::TimeUnit> TimeUnit::MICROSECONDS_() { return get_static_field<SCAPIX_META_STRING("MICROSECONDS"), ref<java::util::concurrent::TimeUnit>>(); }
inline ref<java::util::concurrent::TimeUnit> TimeUnit::MILLISECONDS_() { return get_static_field<SCAPIX_META_STRING("MILLISECONDS"), ref<java::util::concurrent::TimeUnit>>(); }
inline ref<java::util::concurrent::TimeUnit> TimeUnit::SECONDS_() { return get_static_field<SCAPIX_META_STRING("SECONDS"), ref<java::util::concurrent::TimeUnit>>(); }
inline ref<java::util::concurrent::TimeUnit> TimeUnit::MINUTES_() { return get_static_field<SCAPIX_META_STRING("MINUTES"), ref<java::util::concurrent::TimeUnit>>(); }
inline ref<java::util::concurrent::TimeUnit> TimeUnit::HOURS_() { return get_static_field<SCAPIX_META_STRING("HOURS"), ref<java::util::concurrent::TimeUnit>>(); }
inline ref<java::util::concurrent::TimeUnit> TimeUnit::DAYS_() { return get_static_field<SCAPIX_META_STRING("DAYS"), ref<java::util::concurrent::TimeUnit>>(); }
inline ref<link::java::array<java::util::concurrent::TimeUnit>> TimeUnit::values() { return call_static_method<SCAPIX_META_STRING("values"), ref<link::java::array<java::util::concurrent::TimeUnit>>>(); }
inline ref<java::util::concurrent::TimeUnit> TimeUnit::valueOf(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::util::concurrent::TimeUnit>>(name); }
inline jlong TimeUnit::convert(jlong sourceDuration, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("convert"), jlong>(sourceDuration, p2); }
inline jlong TimeUnit::convert(ref<java::time::Duration> duration) { return call_method<SCAPIX_META_STRING("convert"), jlong>(duration); }
inline jlong TimeUnit::toNanos(jlong duration) { return call_method<SCAPIX_META_STRING("toNanos"), jlong>(duration); }
inline jlong TimeUnit::toMicros(jlong duration) { return call_method<SCAPIX_META_STRING("toMicros"), jlong>(duration); }
inline jlong TimeUnit::toMillis(jlong duration) { return call_method<SCAPIX_META_STRING("toMillis"), jlong>(duration); }
inline jlong TimeUnit::toSeconds(jlong duration) { return call_method<SCAPIX_META_STRING("toSeconds"), jlong>(duration); }
inline jlong TimeUnit::toMinutes(jlong duration) { return call_method<SCAPIX_META_STRING("toMinutes"), jlong>(duration); }
inline jlong TimeUnit::toHours(jlong duration) { return call_method<SCAPIX_META_STRING("toHours"), jlong>(duration); }
inline jlong TimeUnit::toDays(jlong duration) { return call_method<SCAPIX_META_STRING("toDays"), jlong>(duration); }
inline void TimeUnit::timedWait(ref<java::lang::Object> obj, jlong timeout) { return call_method<SCAPIX_META_STRING("timedWait"), void>(obj, timeout); }
inline void TimeUnit::timedJoin(ref<java::lang::Thread> thread, jlong timeout) { return call_method<SCAPIX_META_STRING("timedJoin"), void>(thread, timeout); }
inline void TimeUnit::sleep(jlong timeout) { return call_method<SCAPIX_META_STRING("sleep"), void>(timeout); }
inline ref<java::time::temporal::ChronoUnit> TimeUnit::toChronoUnit() { return call_method<SCAPIX_META_STRING("toChronoUnit"), ref<java::time::temporal::ChronoUnit>>(); }
inline ref<java::util::concurrent::TimeUnit> TimeUnit::of(ref<java::time::temporal::ChronoUnit> chronoUnit) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::concurrent::TimeUnit>>(chronoUnit); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_TIMEUNIT_H
