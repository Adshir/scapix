// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Queue.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_BLOCKINGQUEUE_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_BLOCKINGQUEUE_H

namespace scapix::java_api {

namespace java::util { class Collection; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::util::concurrent {

class BlockingQueue : public object_base<SCAPIX_META_STRING("java/util/concurrent/BlockingQueue"),
	java::lang::Object,
	java::util::Queue>
{
public:

	jboolean add(ref<java::lang::Object> p1);
	jboolean offer(ref<java::lang::Object> p1);
	void put(ref<java::lang::Object> p1);
	jboolean offer(ref<java::lang::Object> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3);
	ref<java::lang::Object> take();
	ref<java::lang::Object> poll(jlong p1, ref<java::util::concurrent::TimeUnit> p2);
	jint remainingCapacity();
	jboolean remove(ref<java::lang::Object> p1);
	jboolean contains(ref<java::lang::Object> p1);
	jint drainTo(ref<java::util::Collection> p1);
	jint drainTo(ref<java::util::Collection> p1, jint p2);

protected:

	BlockingQueue(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline jboolean BlockingQueue::add(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("add"), jboolean>(p1); }
inline jboolean BlockingQueue::offer(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("offer"), jboolean>(p1); }
inline void BlockingQueue::put(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("put"), void>(p1); }
inline jboolean BlockingQueue::offer(ref<java::lang::Object> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("offer"), jboolean>(p1, p2, p3); }
inline ref<java::lang::Object> BlockingQueue::take() { return call_method<SCAPIX_META_STRING("take"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> BlockingQueue::poll(jlong p1, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("poll"), ref<java::lang::Object>>(p1, p2); }
inline jint BlockingQueue::remainingCapacity() { return call_method<SCAPIX_META_STRING("remainingCapacity"), jint>(); }
inline jboolean BlockingQueue::remove(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("remove"), jboolean>(p1); }
inline jboolean BlockingQueue::contains(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(p1); }
inline jint BlockingQueue::drainTo(ref<java::util::Collection> p1) { return call_method<SCAPIX_META_STRING("drainTo"), jint>(p1); }
inline jint BlockingQueue::drainTo(ref<java::util::Collection> p1, jint p2) { return call_method<SCAPIX_META_STRING("drainTo"), jint>(p1, p2); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_BLOCKINGQUEUE_H
