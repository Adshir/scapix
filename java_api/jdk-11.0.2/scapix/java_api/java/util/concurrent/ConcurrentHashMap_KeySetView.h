// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/concurrent/ConcurrentHashMap_CollectionView.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_CONCURRENTHASHMAP_KEYSETVIEW_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_CONCURRENTHASHMAP_KEYSETVIEW_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::util { class Collection; }
namespace java::util { class Iterator; }
namespace java::util { class Spliterator; }
namespace java::util::function { class Consumer; }

namespace java::util::concurrent {

class ConcurrentHashMap_KeySetView : public object_base<SCAPIX_META_STRING("java/util/concurrent/ConcurrentHashMap$KeySetView"),
	java::util::concurrent::ConcurrentHashMap_CollectionView,
	java::util::Set,
	java::io::Serializable>
{
public:

	ref<java::lang::Object> getMappedValue();
	jboolean contains(ref<java::lang::Object> o);
	jboolean remove(ref<java::lang::Object> o);
	ref<java::util::Iterator> iterator();
	jboolean add(ref<java::lang::Object> e);
	jboolean addAll(ref<java::util::Collection> c);
	jint hashCode();
	jboolean equals(ref<java::lang::Object> o);
	ref<java::util::Spliterator> spliterator();
	void forEach(ref<java::util::function::Consumer> action);

protected:

	ConcurrentHashMap_KeySetView(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/function/Consumer.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<java::lang::Object> ConcurrentHashMap_KeySetView::getMappedValue() { return call_method<SCAPIX_META_STRING("getMappedValue"), ref<java::lang::Object>>(); }
inline jboolean ConcurrentHashMap_KeySetView::contains(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(o); }
inline jboolean ConcurrentHashMap_KeySetView::remove(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("remove"), jboolean>(o); }
inline ref<java::util::Iterator> ConcurrentHashMap_KeySetView::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::Iterator>>(); }
inline jboolean ConcurrentHashMap_KeySetView::add(ref<java::lang::Object> e) { return call_method<SCAPIX_META_STRING("add"), jboolean>(e); }
inline jboolean ConcurrentHashMap_KeySetView::addAll(ref<java::util::Collection> c) { return call_method<SCAPIX_META_STRING("addAll"), jboolean>(c); }
inline jint ConcurrentHashMap_KeySetView::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean ConcurrentHashMap_KeySetView::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline ref<java::util::Spliterator> ConcurrentHashMap_KeySetView::spliterator() { return call_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator>>(); }
inline void ConcurrentHashMap_KeySetView::forEach(ref<java::util::function::Consumer> action) { return call_method<SCAPIX_META_STRING("forEach"), void>(action); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_CONCURRENTHASHMAP_KEYSETVIEW_H
