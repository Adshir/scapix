// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_COMPLETIONSTAGE_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_COMPLETIONSTAGE_H

namespace scapix::java_api {

namespace java::lang { class Runnable; }
namespace java::util::concurrent { class CompletableFuture; }
namespace java::util::concurrent { class Executor; }
namespace java::util::function { class BiConsumer; }
namespace java::util::function { class BiFunction; }
namespace java::util::function { class Consumer; }
namespace java::util::function { class Function; }

namespace java::util::concurrent {

class CompletionStage : public object_base<SCAPIX_META_STRING("java/util/concurrent/CompletionStage"),
	java::lang::Object>
{
public:

	ref<java::util::concurrent::CompletionStage> thenApply(ref<java::util::function::Function> p1);
	ref<java::util::concurrent::CompletionStage> thenApplyAsync(ref<java::util::function::Function> p1);
	ref<java::util::concurrent::CompletionStage> thenApplyAsync(ref<java::util::function::Function> p1, ref<java::util::concurrent::Executor> p2);
	ref<java::util::concurrent::CompletionStage> thenAccept(ref<java::util::function::Consumer> p1);
	ref<java::util::concurrent::CompletionStage> thenAcceptAsync(ref<java::util::function::Consumer> p1);
	ref<java::util::concurrent::CompletionStage> thenAcceptAsync(ref<java::util::function::Consumer> p1, ref<java::util::concurrent::Executor> p2);
	ref<java::util::concurrent::CompletionStage> thenRun(ref<java::lang::Runnable> p1);
	ref<java::util::concurrent::CompletionStage> thenRunAsync(ref<java::lang::Runnable> p1);
	ref<java::util::concurrent::CompletionStage> thenRunAsync(ref<java::lang::Runnable> p1, ref<java::util::concurrent::Executor> p2);
	ref<java::util::concurrent::CompletionStage> thenCombine(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::BiFunction> p2);
	ref<java::util::concurrent::CompletionStage> thenCombineAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::BiFunction> p2);
	ref<java::util::concurrent::CompletionStage> thenCombineAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::BiFunction> p2, ref<java::util::concurrent::Executor> p3);
	ref<java::util::concurrent::CompletionStage> thenAcceptBoth(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::BiConsumer> p2);
	ref<java::util::concurrent::CompletionStage> thenAcceptBothAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::BiConsumer> p2);
	ref<java::util::concurrent::CompletionStage> thenAcceptBothAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::BiConsumer> p2, ref<java::util::concurrent::Executor> p3);
	ref<java::util::concurrent::CompletionStage> runAfterBoth(ref<java::util::concurrent::CompletionStage> p1, ref<java::lang::Runnable> p2);
	ref<java::util::concurrent::CompletionStage> runAfterBothAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::lang::Runnable> p2);
	ref<java::util::concurrent::CompletionStage> runAfterBothAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::lang::Runnable> p2, ref<java::util::concurrent::Executor> p3);
	ref<java::util::concurrent::CompletionStage> applyToEither(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::Function> p2);
	ref<java::util::concurrent::CompletionStage> applyToEitherAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::Function> p2);
	ref<java::util::concurrent::CompletionStage> applyToEitherAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::Function> p2, ref<java::util::concurrent::Executor> p3);
	ref<java::util::concurrent::CompletionStage> acceptEither(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::Consumer> p2);
	ref<java::util::concurrent::CompletionStage> acceptEitherAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::Consumer> p2);
	ref<java::util::concurrent::CompletionStage> acceptEitherAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::Consumer> p2, ref<java::util::concurrent::Executor> p3);
	ref<java::util::concurrent::CompletionStage> runAfterEither(ref<java::util::concurrent::CompletionStage> p1, ref<java::lang::Runnable> p2);
	ref<java::util::concurrent::CompletionStage> runAfterEitherAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::lang::Runnable> p2);
	ref<java::util::concurrent::CompletionStage> runAfterEitherAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::lang::Runnable> p2, ref<java::util::concurrent::Executor> p3);
	ref<java::util::concurrent::CompletionStage> thenCompose(ref<java::util::function::Function> p1);
	ref<java::util::concurrent::CompletionStage> thenComposeAsync(ref<java::util::function::Function> p1);
	ref<java::util::concurrent::CompletionStage> thenComposeAsync(ref<java::util::function::Function> p1, ref<java::util::concurrent::Executor> p2);
	ref<java::util::concurrent::CompletionStage> handle(ref<java::util::function::BiFunction> p1);
	ref<java::util::concurrent::CompletionStage> handleAsync(ref<java::util::function::BiFunction> p1);
	ref<java::util::concurrent::CompletionStage> handleAsync(ref<java::util::function::BiFunction> p1, ref<java::util::concurrent::Executor> p2);
	ref<java::util::concurrent::CompletionStage> whenComplete(ref<java::util::function::BiConsumer> p1);
	ref<java::util::concurrent::CompletionStage> whenCompleteAsync(ref<java::util::function::BiConsumer> p1);
	ref<java::util::concurrent::CompletionStage> whenCompleteAsync(ref<java::util::function::BiConsumer> p1, ref<java::util::concurrent::Executor> p2);
	ref<java::util::concurrent::CompletionStage> exceptionally(ref<java::util::function::Function> p1);
	ref<java::util::concurrent::CompletableFuture> toCompletableFuture();

protected:

	CompletionStage(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/util/concurrent/CompletableFuture.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BiFunction.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/java/util/function/Function.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenApply(ref<java::util::function::Function> p1) { return call_method<SCAPIX_META_STRING("thenApply"), ref<java::util::concurrent::CompletionStage>>(p1); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenApplyAsync(ref<java::util::function::Function> p1) { return call_method<SCAPIX_META_STRING("thenApplyAsync"), ref<java::util::concurrent::CompletionStage>>(p1); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenApplyAsync(ref<java::util::function::Function> p1, ref<java::util::concurrent::Executor> p2) { return call_method<SCAPIX_META_STRING("thenApplyAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenAccept(ref<java::util::function::Consumer> p1) { return call_method<SCAPIX_META_STRING("thenAccept"), ref<java::util::concurrent::CompletionStage>>(p1); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenAcceptAsync(ref<java::util::function::Consumer> p1) { return call_method<SCAPIX_META_STRING("thenAcceptAsync"), ref<java::util::concurrent::CompletionStage>>(p1); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenAcceptAsync(ref<java::util::function::Consumer> p1, ref<java::util::concurrent::Executor> p2) { return call_method<SCAPIX_META_STRING("thenAcceptAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenRun(ref<java::lang::Runnable> p1) { return call_method<SCAPIX_META_STRING("thenRun"), ref<java::util::concurrent::CompletionStage>>(p1); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenRunAsync(ref<java::lang::Runnable> p1) { return call_method<SCAPIX_META_STRING("thenRunAsync"), ref<java::util::concurrent::CompletionStage>>(p1); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenRunAsync(ref<java::lang::Runnable> p1, ref<java::util::concurrent::Executor> p2) { return call_method<SCAPIX_META_STRING("thenRunAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenCombine(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::BiFunction> p2) { return call_method<SCAPIX_META_STRING("thenCombine"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenCombineAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::BiFunction> p2) { return call_method<SCAPIX_META_STRING("thenCombineAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenCombineAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::BiFunction> p2, ref<java::util::concurrent::Executor> p3) { return call_method<SCAPIX_META_STRING("thenCombineAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2, p3); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenAcceptBoth(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::BiConsumer> p2) { return call_method<SCAPIX_META_STRING("thenAcceptBoth"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenAcceptBothAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::BiConsumer> p2) { return call_method<SCAPIX_META_STRING("thenAcceptBothAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenAcceptBothAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::BiConsumer> p2, ref<java::util::concurrent::Executor> p3) { return call_method<SCAPIX_META_STRING("thenAcceptBothAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2, p3); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::runAfterBoth(ref<java::util::concurrent::CompletionStage> p1, ref<java::lang::Runnable> p2) { return call_method<SCAPIX_META_STRING("runAfterBoth"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::runAfterBothAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::lang::Runnable> p2) { return call_method<SCAPIX_META_STRING("runAfterBothAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::runAfterBothAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::lang::Runnable> p2, ref<java::util::concurrent::Executor> p3) { return call_method<SCAPIX_META_STRING("runAfterBothAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2, p3); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::applyToEither(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::Function> p2) { return call_method<SCAPIX_META_STRING("applyToEither"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::applyToEitherAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::Function> p2) { return call_method<SCAPIX_META_STRING("applyToEitherAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::applyToEitherAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::Function> p2, ref<java::util::concurrent::Executor> p3) { return call_method<SCAPIX_META_STRING("applyToEitherAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2, p3); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::acceptEither(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::Consumer> p2) { return call_method<SCAPIX_META_STRING("acceptEither"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::acceptEitherAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::Consumer> p2) { return call_method<SCAPIX_META_STRING("acceptEitherAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::acceptEitherAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::util::function::Consumer> p2, ref<java::util::concurrent::Executor> p3) { return call_method<SCAPIX_META_STRING("acceptEitherAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2, p3); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::runAfterEither(ref<java::util::concurrent::CompletionStage> p1, ref<java::lang::Runnable> p2) { return call_method<SCAPIX_META_STRING("runAfterEither"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::runAfterEitherAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::lang::Runnable> p2) { return call_method<SCAPIX_META_STRING("runAfterEitherAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::runAfterEitherAsync(ref<java::util::concurrent::CompletionStage> p1, ref<java::lang::Runnable> p2, ref<java::util::concurrent::Executor> p3) { return call_method<SCAPIX_META_STRING("runAfterEitherAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2, p3); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenCompose(ref<java::util::function::Function> p1) { return call_method<SCAPIX_META_STRING("thenCompose"), ref<java::util::concurrent::CompletionStage>>(p1); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenComposeAsync(ref<java::util::function::Function> p1) { return call_method<SCAPIX_META_STRING("thenComposeAsync"), ref<java::util::concurrent::CompletionStage>>(p1); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::thenComposeAsync(ref<java::util::function::Function> p1, ref<java::util::concurrent::Executor> p2) { return call_method<SCAPIX_META_STRING("thenComposeAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::handle(ref<java::util::function::BiFunction> p1) { return call_method<SCAPIX_META_STRING("handle"), ref<java::util::concurrent::CompletionStage>>(p1); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::handleAsync(ref<java::util::function::BiFunction> p1) { return call_method<SCAPIX_META_STRING("handleAsync"), ref<java::util::concurrent::CompletionStage>>(p1); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::handleAsync(ref<java::util::function::BiFunction> p1, ref<java::util::concurrent::Executor> p2) { return call_method<SCAPIX_META_STRING("handleAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::whenComplete(ref<java::util::function::BiConsumer> p1) { return call_method<SCAPIX_META_STRING("whenComplete"), ref<java::util::concurrent::CompletionStage>>(p1); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::whenCompleteAsync(ref<java::util::function::BiConsumer> p1) { return call_method<SCAPIX_META_STRING("whenCompleteAsync"), ref<java::util::concurrent::CompletionStage>>(p1); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::whenCompleteAsync(ref<java::util::function::BiConsumer> p1, ref<java::util::concurrent::Executor> p2) { return call_method<SCAPIX_META_STRING("whenCompleteAsync"), ref<java::util::concurrent::CompletionStage>>(p1, p2); }
inline ref<java::util::concurrent::CompletionStage> CompletionStage::exceptionally(ref<java::util::function::Function> p1) { return call_method<SCAPIX_META_STRING("exceptionally"), ref<java::util::concurrent::CompletionStage>>(p1); }
inline ref<java::util::concurrent::CompletableFuture> CompletionStage::toCompletableFuture() { return call_method<SCAPIX_META_STRING("toCompletableFuture"), ref<java::util::concurrent::CompletableFuture>>(); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_COMPLETIONSTAGE_H
