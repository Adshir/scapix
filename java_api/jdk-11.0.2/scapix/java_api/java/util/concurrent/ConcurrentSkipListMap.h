// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractMap.h>
#include <scapix/java_api/java/util/concurrent/ConcurrentNavigableMap.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::util { class Collection; }
namespace java::util { class Comparator; }
namespace java::util { class Map; }
namespace java::util { class Map_Entry; }
namespace java::util { class NavigableSet; }
namespace java::util { class Set; }
namespace java::util { class SortedMap; }
namespace java::util::function { class BiConsumer; }
namespace java::util::function { class BiFunction; }
namespace java::util::function { class Function; }

namespace java::util::concurrent {

class ConcurrentSkipListMap : public object_base<SCAPIX_META_STRING("java/util/concurrent/ConcurrentSkipListMap"),
	java::util::AbstractMap,
	java::util::concurrent::ConcurrentNavigableMap,
	java::lang::Cloneable,
	java::io::Serializable>
{
public:

	static ref<ConcurrentSkipListMap> new_object();
	static ref<ConcurrentSkipListMap> new_object(ref<java::util::Comparator> comparator);
	static ref<ConcurrentSkipListMap> new_object(ref<java::util::Map> m);
	static ref<ConcurrentSkipListMap> new_object(ref<java::util::SortedMap> m);
	ref<java::util::concurrent::ConcurrentSkipListMap> clone();
	jboolean containsKey(ref<java::lang::Object> key);
	ref<java::lang::Object> get(ref<java::lang::Object> key);
	ref<java::lang::Object> getOrDefault(ref<java::lang::Object> key, ref<java::lang::Object> defaultValue);
	ref<java::lang::Object> put(ref<java::lang::Object> key, ref<java::lang::Object> value);
	ref<java::lang::Object> remove(ref<java::lang::Object> key);
	jboolean containsValue(ref<java::lang::Object> value);
	jint size();
	jboolean isEmpty();
	void clear();
	ref<java::lang::Object> computeIfAbsent(ref<java::lang::Object> key, ref<java::util::function::Function> mappingFunction);
	ref<java::lang::Object> computeIfPresent(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction);
	ref<java::lang::Object> compute(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction);
	ref<java::lang::Object> merge(ref<java::lang::Object> key, ref<java::lang::Object> value, ref<java::util::function::BiFunction> remappingFunction);
	ref<java::util::NavigableSet> keySet();
	ref<java::util::NavigableSet> navigableKeySet();
	ref<java::util::Collection> values();
	ref<java::util::Set> entrySet();
	ref<java::util::concurrent::ConcurrentNavigableMap> descendingMap();
	ref<java::util::NavigableSet> descendingKeySet();
	jboolean equals(ref<java::lang::Object> o);
	ref<java::lang::Object> putIfAbsent(ref<java::lang::Object> key, ref<java::lang::Object> value);
	jboolean remove(ref<java::lang::Object> key, ref<java::lang::Object> value);
	jboolean replace(ref<java::lang::Object> key, ref<java::lang::Object> oldValue, ref<java::lang::Object> newValue);
	ref<java::lang::Object> replace(ref<java::lang::Object> key, ref<java::lang::Object> value);
	ref<java::util::Comparator> comparator();
	ref<java::lang::Object> firstKey();
	ref<java::lang::Object> lastKey();
	ref<java::util::concurrent::ConcurrentNavigableMap> subMap(ref<java::lang::Object> fromKey, jboolean fromInclusive, ref<java::lang::Object> toKey, jboolean toInclusive);
	ref<java::util::concurrent::ConcurrentNavigableMap> headMap(ref<java::lang::Object> toKey, jboolean inclusive);
	ref<java::util::concurrent::ConcurrentNavigableMap> tailMap(ref<java::lang::Object> fromKey, jboolean inclusive);
	ref<java::util::concurrent::ConcurrentNavigableMap> subMap(ref<java::lang::Object> fromKey, ref<java::lang::Object> toKey);
	ref<java::util::concurrent::ConcurrentNavigableMap> headMap(ref<java::lang::Object> toKey);
	ref<java::util::concurrent::ConcurrentNavigableMap> tailMap(ref<java::lang::Object> fromKey);
	ref<java::util::Map_Entry> lowerEntry(ref<java::lang::Object> key);
	ref<java::lang::Object> lowerKey(ref<java::lang::Object> key);
	ref<java::util::Map_Entry> floorEntry(ref<java::lang::Object> key);
	ref<java::lang::Object> floorKey(ref<java::lang::Object> key);
	ref<java::util::Map_Entry> ceilingEntry(ref<java::lang::Object> key);
	ref<java::lang::Object> ceilingKey(ref<java::lang::Object> key);
	ref<java::util::Map_Entry> higherEntry(ref<java::lang::Object> key);
	ref<java::lang::Object> higherKey(ref<java::lang::Object> key);
	ref<java::util::Map_Entry> firstEntry();
	ref<java::util::Map_Entry> lastEntry();
	ref<java::util::Map_Entry> pollFirstEntry();
	ref<java::util::Map_Entry> pollLastEntry();
	void forEach(ref<java::util::function::BiConsumer> action);
	void replaceAll(ref<java::util::function::BiFunction> function);

protected:

	ConcurrentSkipListMap(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Comparator.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Map_Entry.h>
#include <scapix/java_api/java/util/NavigableSet.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/SortedMap.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BiFunction.h>
#include <scapix/java_api/java/util/function/Function.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<ConcurrentSkipListMap> ConcurrentSkipListMap::new_object() { return base_::new_object(); }
inline ref<ConcurrentSkipListMap> ConcurrentSkipListMap::new_object(ref<java::util::Comparator> comparator) { return base_::new_object(comparator); }
inline ref<ConcurrentSkipListMap> ConcurrentSkipListMap::new_object(ref<java::util::Map> m) { return base_::new_object(m); }
inline ref<ConcurrentSkipListMap> ConcurrentSkipListMap::new_object(ref<java::util::SortedMap> m) { return base_::new_object(m); }
inline ref<java::util::concurrent::ConcurrentSkipListMap> ConcurrentSkipListMap::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::util::concurrent::ConcurrentSkipListMap>>(); }
inline jboolean ConcurrentSkipListMap::containsKey(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("containsKey"), jboolean>(key); }
inline ref<java::lang::Object> ConcurrentSkipListMap::get(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(key); }
inline ref<java::lang::Object> ConcurrentSkipListMap::getOrDefault(ref<java::lang::Object> key, ref<java::lang::Object> defaultValue) { return call_method<SCAPIX_META_STRING("getOrDefault"), ref<java::lang::Object>>(key, defaultValue); }
inline ref<java::lang::Object> ConcurrentSkipListMap::put(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("put"), ref<java::lang::Object>>(key, value); }
inline ref<java::lang::Object> ConcurrentSkipListMap::remove(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("remove"), ref<java::lang::Object>>(key); }
inline jboolean ConcurrentSkipListMap::containsValue(ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("containsValue"), jboolean>(value); }
inline jint ConcurrentSkipListMap::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jboolean ConcurrentSkipListMap::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline void ConcurrentSkipListMap::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline ref<java::lang::Object> ConcurrentSkipListMap::computeIfAbsent(ref<java::lang::Object> key, ref<java::util::function::Function> mappingFunction) { return call_method<SCAPIX_META_STRING("computeIfAbsent"), ref<java::lang::Object>>(key, mappingFunction); }
inline ref<java::lang::Object> ConcurrentSkipListMap::computeIfPresent(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("computeIfPresent"), ref<java::lang::Object>>(key, remappingFunction); }
inline ref<java::lang::Object> ConcurrentSkipListMap::compute(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("compute"), ref<java::lang::Object>>(key, remappingFunction); }
inline ref<java::lang::Object> ConcurrentSkipListMap::merge(ref<java::lang::Object> key, ref<java::lang::Object> value, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("merge"), ref<java::lang::Object>>(key, value, remappingFunction); }
inline ref<java::util::NavigableSet> ConcurrentSkipListMap::keySet() { return call_method<SCAPIX_META_STRING("keySet"), ref<java::util::NavigableSet>>(); }
inline ref<java::util::NavigableSet> ConcurrentSkipListMap::navigableKeySet() { return call_method<SCAPIX_META_STRING("navigableKeySet"), ref<java::util::NavigableSet>>(); }
inline ref<java::util::Collection> ConcurrentSkipListMap::values() { return call_method<SCAPIX_META_STRING("values"), ref<java::util::Collection>>(); }
inline ref<java::util::Set> ConcurrentSkipListMap::entrySet() { return call_method<SCAPIX_META_STRING("entrySet"), ref<java::util::Set>>(); }
inline ref<java::util::concurrent::ConcurrentNavigableMap> ConcurrentSkipListMap::descendingMap() { return call_method<SCAPIX_META_STRING("descendingMap"), ref<java::util::concurrent::ConcurrentNavigableMap>>(); }
inline ref<java::util::NavigableSet> ConcurrentSkipListMap::descendingKeySet() { return call_method<SCAPIX_META_STRING("descendingKeySet"), ref<java::util::NavigableSet>>(); }
inline jboolean ConcurrentSkipListMap::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline ref<java::lang::Object> ConcurrentSkipListMap::putIfAbsent(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("putIfAbsent"), ref<java::lang::Object>>(key, value); }
inline jboolean ConcurrentSkipListMap::remove(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("remove"), jboolean>(key, value); }
inline jboolean ConcurrentSkipListMap::replace(ref<java::lang::Object> key, ref<java::lang::Object> oldValue, ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("replace"), jboolean>(key, oldValue, newValue); }
inline ref<java::lang::Object> ConcurrentSkipListMap::replace(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("replace"), ref<java::lang::Object>>(key, value); }
inline ref<java::util::Comparator> ConcurrentSkipListMap::comparator() { return call_method<SCAPIX_META_STRING("comparator"), ref<java::util::Comparator>>(); }
inline ref<java::lang::Object> ConcurrentSkipListMap::firstKey() { return call_method<SCAPIX_META_STRING("firstKey"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> ConcurrentSkipListMap::lastKey() { return call_method<SCAPIX_META_STRING("lastKey"), ref<java::lang::Object>>(); }
inline ref<java::util::concurrent::ConcurrentNavigableMap> ConcurrentSkipListMap::subMap(ref<java::lang::Object> fromKey, jboolean fromInclusive, ref<java::lang::Object> toKey, jboolean toInclusive) { return call_method<SCAPIX_META_STRING("subMap"), ref<java::util::concurrent::ConcurrentNavigableMap>>(fromKey, fromInclusive, toKey, toInclusive); }
inline ref<java::util::concurrent::ConcurrentNavigableMap> ConcurrentSkipListMap::headMap(ref<java::lang::Object> toKey, jboolean inclusive) { return call_method<SCAPIX_META_STRING("headMap"), ref<java::util::concurrent::ConcurrentNavigableMap>>(toKey, inclusive); }
inline ref<java::util::concurrent::ConcurrentNavigableMap> ConcurrentSkipListMap::tailMap(ref<java::lang::Object> fromKey, jboolean inclusive) { return call_method<SCAPIX_META_STRING("tailMap"), ref<java::util::concurrent::ConcurrentNavigableMap>>(fromKey, inclusive); }
inline ref<java::util::concurrent::ConcurrentNavigableMap> ConcurrentSkipListMap::subMap(ref<java::lang::Object> fromKey, ref<java::lang::Object> toKey) { return call_method<SCAPIX_META_STRING("subMap"), ref<java::util::concurrent::ConcurrentNavigableMap>>(fromKey, toKey); }
inline ref<java::util::concurrent::ConcurrentNavigableMap> ConcurrentSkipListMap::headMap(ref<java::lang::Object> toKey) { return call_method<SCAPIX_META_STRING("headMap"), ref<java::util::concurrent::ConcurrentNavigableMap>>(toKey); }
inline ref<java::util::concurrent::ConcurrentNavigableMap> ConcurrentSkipListMap::tailMap(ref<java::lang::Object> fromKey) { return call_method<SCAPIX_META_STRING("tailMap"), ref<java::util::concurrent::ConcurrentNavigableMap>>(fromKey); }
inline ref<java::util::Map_Entry> ConcurrentSkipListMap::lowerEntry(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("lowerEntry"), ref<java::util::Map_Entry>>(key); }
inline ref<java::lang::Object> ConcurrentSkipListMap::lowerKey(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("lowerKey"), ref<java::lang::Object>>(key); }
inline ref<java::util::Map_Entry> ConcurrentSkipListMap::floorEntry(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("floorEntry"), ref<java::util::Map_Entry>>(key); }
inline ref<java::lang::Object> ConcurrentSkipListMap::floorKey(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("floorKey"), ref<java::lang::Object>>(key); }
inline ref<java::util::Map_Entry> ConcurrentSkipListMap::ceilingEntry(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("ceilingEntry"), ref<java::util::Map_Entry>>(key); }
inline ref<java::lang::Object> ConcurrentSkipListMap::ceilingKey(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("ceilingKey"), ref<java::lang::Object>>(key); }
inline ref<java::util::Map_Entry> ConcurrentSkipListMap::higherEntry(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("higherEntry"), ref<java::util::Map_Entry>>(key); }
inline ref<java::lang::Object> ConcurrentSkipListMap::higherKey(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("higherKey"), ref<java::lang::Object>>(key); }
inline ref<java::util::Map_Entry> ConcurrentSkipListMap::firstEntry() { return call_method<SCAPIX_META_STRING("firstEntry"), ref<java::util::Map_Entry>>(); }
inline ref<java::util::Map_Entry> ConcurrentSkipListMap::lastEntry() { return call_method<SCAPIX_META_STRING("lastEntry"), ref<java::util::Map_Entry>>(); }
inline ref<java::util::Map_Entry> ConcurrentSkipListMap::pollFirstEntry() { return call_method<SCAPIX_META_STRING("pollFirstEntry"), ref<java::util::Map_Entry>>(); }
inline ref<java::util::Map_Entry> ConcurrentSkipListMap::pollLastEntry() { return call_method<SCAPIX_META_STRING("pollLastEntry"), ref<java::util::Map_Entry>>(); }
inline void ConcurrentSkipListMap::forEach(ref<java::util::function::BiConsumer> action) { return call_method<SCAPIX_META_STRING("forEach"), void>(action); }
inline void ConcurrentSkipListMap::replaceAll(ref<java::util::function::BiFunction> function) { return call_method<SCAPIX_META_STRING("replaceAll"), void>(function); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_H
