// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_EXCHANGER_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_EXCHANGER_H

namespace scapix::java_api {

namespace java::util::concurrent { class TimeUnit; }

namespace java::util::concurrent {

class Exchanger : public object_base<SCAPIX_META_STRING("java/util/concurrent/Exchanger"),
	java::lang::Object>
{
public:

	static ref<Exchanger> new_object();
	ref<java::lang::Object> exchange(ref<java::lang::Object> x);
	ref<java::lang::Object> exchange(ref<java::lang::Object> x, jlong timeout, ref<java::util::concurrent::TimeUnit> p3);

protected:

	Exchanger(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<Exchanger> Exchanger::new_object() { return base_::new_object(); }
inline ref<java::lang::Object> Exchanger::exchange(ref<java::lang::Object> x) { return call_method<SCAPIX_META_STRING("exchange"), ref<java::lang::Object>>(x); }
inline ref<java::lang::Object> Exchanger::exchange(ref<java::lang::Object> x, jlong timeout, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("exchange"), ref<java::lang::Object>>(x, timeout, p3); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_EXCHANGER_H
