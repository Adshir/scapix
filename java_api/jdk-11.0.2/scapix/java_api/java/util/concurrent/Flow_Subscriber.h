// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_FLOW_SUBSCRIBER_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_FLOW_SUBSCRIBER_H

namespace scapix::java_api {

namespace java::lang { class Throwable; }
namespace java::util::concurrent { class Flow_Subscription; }

namespace java::util::concurrent {

class Flow_Subscriber : public object_base<SCAPIX_META_STRING("java/util/concurrent/Flow$Subscriber"),
	java::lang::Object>
{
public:

	void onSubscribe(ref<java::util::concurrent::Flow_Subscription> p1);
	void onNext(ref<java::lang::Object> p1);
	void onError(ref<java::lang::Throwable> p1);
	void onComplete();

protected:

	Flow_Subscriber(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/util/concurrent/Flow_Subscription.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline void Flow_Subscriber::onSubscribe(ref<java::util::concurrent::Flow_Subscription> p1) { return call_method<SCAPIX_META_STRING("onSubscribe"), void>(p1); }
inline void Flow_Subscriber::onNext(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("onNext"), void>(p1); }
inline void Flow_Subscriber::onError(ref<java::lang::Throwable> p1) { return call_method<SCAPIX_META_STRING("onError"), void>(p1); }
inline void Flow_Subscriber::onComplete() { return call_method<SCAPIX_META_STRING("onComplete"), void>(); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_FLOW_SUBSCRIBER_H
