// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_STAMPEDLOCK_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_STAMPEDLOCK_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util::concurrent { class TimeUnit; }
namespace java::util::concurrent::locks { class Lock; }
namespace java::util::concurrent::locks { class ReadWriteLock; }

namespace java::util::concurrent::locks {

class StampedLock : public object_base<SCAPIX_META_STRING("java/util/concurrent/locks/StampedLock"),
	java::lang::Object,
	java::io::Serializable>
{
public:

	static ref<StampedLock> new_object();
	jlong writeLock();
	jlong tryWriteLock();
	jlong tryWriteLock(jlong time, ref<java::util::concurrent::TimeUnit> p2);
	jlong writeLockInterruptibly();
	jlong readLock();
	jlong tryReadLock();
	jlong tryReadLock(jlong time, ref<java::util::concurrent::TimeUnit> p2);
	jlong readLockInterruptibly();
	jlong tryOptimisticRead();
	jboolean validate(jlong stamp);
	void unlockWrite(jlong stamp);
	void unlockRead(jlong stamp);
	void unlock(jlong stamp);
	jlong tryConvertToWriteLock(jlong stamp);
	jlong tryConvertToReadLock(jlong stamp);
	jlong tryConvertToOptimisticRead(jlong stamp);
	jboolean tryUnlockWrite();
	jboolean tryUnlockRead();
	jboolean isWriteLocked();
	jboolean isReadLocked();
	static jboolean isWriteLockStamp(jlong stamp);
	static jboolean isReadLockStamp(jlong stamp);
	static jboolean isLockStamp(jlong stamp);
	static jboolean isOptimisticReadStamp(jlong stamp);
	jint getReadLockCount();
	ref<java::lang::String> toString();
	ref<java::util::concurrent::locks::Lock> asReadLock();
	ref<java::util::concurrent::locks::Lock> asWriteLock();
	ref<java::util::concurrent::locks::ReadWriteLock> asReadWriteLock();

protected:

	StampedLock(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent::locks
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#include <scapix/java_api/java/util/concurrent/locks/Lock.h>
#include <scapix/java_api/java/util/concurrent/locks/ReadWriteLock.h>

namespace scapix::java_api {
namespace java::util::concurrent::locks {

inline ref<StampedLock> StampedLock::new_object() { return base_::new_object(); }
inline jlong StampedLock::writeLock() { return call_method<SCAPIX_META_STRING("writeLock"), jlong>(); }
inline jlong StampedLock::tryWriteLock() { return call_method<SCAPIX_META_STRING("tryWriteLock"), jlong>(); }
inline jlong StampedLock::tryWriteLock(jlong time, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("tryWriteLock"), jlong>(time, p2); }
inline jlong StampedLock::writeLockInterruptibly() { return call_method<SCAPIX_META_STRING("writeLockInterruptibly"), jlong>(); }
inline jlong StampedLock::readLock() { return call_method<SCAPIX_META_STRING("readLock"), jlong>(); }
inline jlong StampedLock::tryReadLock() { return call_method<SCAPIX_META_STRING("tryReadLock"), jlong>(); }
inline jlong StampedLock::tryReadLock(jlong time, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("tryReadLock"), jlong>(time, p2); }
inline jlong StampedLock::readLockInterruptibly() { return call_method<SCAPIX_META_STRING("readLockInterruptibly"), jlong>(); }
inline jlong StampedLock::tryOptimisticRead() { return call_method<SCAPIX_META_STRING("tryOptimisticRead"), jlong>(); }
inline jboolean StampedLock::validate(jlong stamp) { return call_method<SCAPIX_META_STRING("validate"), jboolean>(stamp); }
inline void StampedLock::unlockWrite(jlong stamp) { return call_method<SCAPIX_META_STRING("unlockWrite"), void>(stamp); }
inline void StampedLock::unlockRead(jlong stamp) { return call_method<SCAPIX_META_STRING("unlockRead"), void>(stamp); }
inline void StampedLock::unlock(jlong stamp) { return call_method<SCAPIX_META_STRING("unlock"), void>(stamp); }
inline jlong StampedLock::tryConvertToWriteLock(jlong stamp) { return call_method<SCAPIX_META_STRING("tryConvertToWriteLock"), jlong>(stamp); }
inline jlong StampedLock::tryConvertToReadLock(jlong stamp) { return call_method<SCAPIX_META_STRING("tryConvertToReadLock"), jlong>(stamp); }
inline jlong StampedLock::tryConvertToOptimisticRead(jlong stamp) { return call_method<SCAPIX_META_STRING("tryConvertToOptimisticRead"), jlong>(stamp); }
inline jboolean StampedLock::tryUnlockWrite() { return call_method<SCAPIX_META_STRING("tryUnlockWrite"), jboolean>(); }
inline jboolean StampedLock::tryUnlockRead() { return call_method<SCAPIX_META_STRING("tryUnlockRead"), jboolean>(); }
inline jboolean StampedLock::isWriteLocked() { return call_method<SCAPIX_META_STRING("isWriteLocked"), jboolean>(); }
inline jboolean StampedLock::isReadLocked() { return call_method<SCAPIX_META_STRING("isReadLocked"), jboolean>(); }
inline jboolean StampedLock::isWriteLockStamp(jlong stamp) { return call_static_method<SCAPIX_META_STRING("isWriteLockStamp"), jboolean>(stamp); }
inline jboolean StampedLock::isReadLockStamp(jlong stamp) { return call_static_method<SCAPIX_META_STRING("isReadLockStamp"), jboolean>(stamp); }
inline jboolean StampedLock::isLockStamp(jlong stamp) { return call_static_method<SCAPIX_META_STRING("isLockStamp"), jboolean>(stamp); }
inline jboolean StampedLock::isOptimisticReadStamp(jlong stamp) { return call_static_method<SCAPIX_META_STRING("isOptimisticReadStamp"), jboolean>(stamp); }
inline jint StampedLock::getReadLockCount() { return call_method<SCAPIX_META_STRING("getReadLockCount"), jint>(); }
inline ref<java::lang::String> StampedLock::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::util::concurrent::locks::Lock> StampedLock::asReadLock() { return call_method<SCAPIX_META_STRING("asReadLock"), ref<java::util::concurrent::locks::Lock>>(); }
inline ref<java::util::concurrent::locks::Lock> StampedLock::asWriteLock() { return call_method<SCAPIX_META_STRING("asWriteLock"), ref<java::util::concurrent::locks::Lock>>(); }
inline ref<java::util::concurrent::locks::ReadWriteLock> StampedLock::asReadWriteLock() { return call_method<SCAPIX_META_STRING("asReadWriteLock"), ref<java::util::concurrent::locks::ReadWriteLock>>(); }

} // namespace java::util::concurrent::locks
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_STAMPEDLOCK_H
