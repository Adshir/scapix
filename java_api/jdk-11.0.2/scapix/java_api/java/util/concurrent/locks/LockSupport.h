// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_LOCKSUPPORT_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_LOCKSUPPORT_H

namespace scapix::java_api {

namespace java::lang { class Thread; }

namespace java::util::concurrent::locks {

class LockSupport : public object_base<SCAPIX_META_STRING("java/util/concurrent/locks/LockSupport"),
	java::lang::Object>
{
public:

	static void unpark(ref<java::lang::Thread> thread);
	static void park(ref<java::lang::Object> blocker);
	static void parkNanos(ref<java::lang::Object> blocker, jlong nanos);
	static void parkUntil(ref<java::lang::Object> blocker, jlong deadline);
	static ref<java::lang::Object> getBlocker(ref<java::lang::Thread> t);
	static void park();
	static void parkNanos(jlong nanos);
	static void parkUntil(jlong deadline);

protected:

	LockSupport(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent::locks
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Thread.h>

namespace scapix::java_api {
namespace java::util::concurrent::locks {

inline void LockSupport::unpark(ref<java::lang::Thread> thread) { return call_static_method<SCAPIX_META_STRING("unpark"), void>(thread); }
inline void LockSupport::park(ref<java::lang::Object> blocker) { return call_static_method<SCAPIX_META_STRING("park"), void>(blocker); }
inline void LockSupport::parkNanos(ref<java::lang::Object> blocker, jlong nanos) { return call_static_method<SCAPIX_META_STRING("parkNanos"), void>(blocker, nanos); }
inline void LockSupport::parkUntil(ref<java::lang::Object> blocker, jlong deadline) { return call_static_method<SCAPIX_META_STRING("parkUntil"), void>(blocker, deadline); }
inline ref<java::lang::Object> LockSupport::getBlocker(ref<java::lang::Thread> t) { return call_static_method<SCAPIX_META_STRING("getBlocker"), ref<java::lang::Object>>(t); }
inline void LockSupport::park() { return call_static_method<SCAPIX_META_STRING("park"), void>(); }
inline void LockSupport::parkNanos(jlong nanos) { return call_static_method<SCAPIX_META_STRING("parkNanos"), void>(nanos); }
inline void LockSupport::parkUntil(jlong deadline) { return call_static_method<SCAPIX_META_STRING("parkUntil"), void>(deadline); }

} // namespace java::util::concurrent::locks
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_LOCKSUPPORT_H
