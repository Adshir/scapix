// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/locks/ReadWriteLock.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::lang { class Thread; }
namespace java::util::concurrent::locks { class Condition; }
namespace java::util::concurrent::locks { class ReentrantReadWriteLock_ReadLock; }
namespace java::util::concurrent::locks { class ReentrantReadWriteLock_WriteLock; }

namespace java::util::concurrent::locks {

class ReentrantReadWriteLock : public object_base<SCAPIX_META_STRING("java/util/concurrent/locks/ReentrantReadWriteLock"),
	java::lang::Object,
	java::util::concurrent::locks::ReadWriteLock,
	java::io::Serializable>
{
public:

	using WriteLock = ReentrantReadWriteLock_WriteLock;
	using ReadLock = ReentrantReadWriteLock_ReadLock;

	static ref<ReentrantReadWriteLock> new_object();
	static ref<ReentrantReadWriteLock> new_object(jboolean fair);
	ref<java::util::concurrent::locks::ReentrantReadWriteLock_WriteLock> writeLock();
	ref<java::util::concurrent::locks::ReentrantReadWriteLock_ReadLock> readLock();
	jboolean isFair();
	jint getReadLockCount();
	jboolean isWriteLocked();
	jboolean isWriteLockedByCurrentThread();
	jint getWriteHoldCount();
	jint getReadHoldCount();
	jboolean hasQueuedThreads();
	jboolean hasQueuedThread(ref<java::lang::Thread> thread);
	jint getQueueLength();
	jboolean hasWaiters(ref<java::util::concurrent::locks::Condition> condition);
	jint getWaitQueueLength(ref<java::util::concurrent::locks::Condition> condition);
	ref<java::lang::String> toString();

protected:

	ReentrantReadWriteLock(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent::locks
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>
#include <scapix/java_api/java/util/concurrent/locks/Condition.h>
#include <scapix/java_api/java/util/concurrent/locks/ReentrantReadWriteLock_ReadLock.h>
#include <scapix/java_api/java/util/concurrent/locks/ReentrantReadWriteLock_WriteLock.h>

namespace scapix::java_api {
namespace java::util::concurrent::locks {

inline ref<ReentrantReadWriteLock> ReentrantReadWriteLock::new_object() { return base_::new_object(); }
inline ref<ReentrantReadWriteLock> ReentrantReadWriteLock::new_object(jboolean fair) { return base_::new_object(fair); }
inline ref<java::util::concurrent::locks::ReentrantReadWriteLock_WriteLock> ReentrantReadWriteLock::writeLock() { return call_method<SCAPIX_META_STRING("writeLock"), ref<java::util::concurrent::locks::ReentrantReadWriteLock_WriteLock>>(); }
inline ref<java::util::concurrent::locks::ReentrantReadWriteLock_ReadLock> ReentrantReadWriteLock::readLock() { return call_method<SCAPIX_META_STRING("readLock"), ref<java::util::concurrent::locks::ReentrantReadWriteLock_ReadLock>>(); }
inline jboolean ReentrantReadWriteLock::isFair() { return call_method<SCAPIX_META_STRING("isFair"), jboolean>(); }
inline jint ReentrantReadWriteLock::getReadLockCount() { return call_method<SCAPIX_META_STRING("getReadLockCount"), jint>(); }
inline jboolean ReentrantReadWriteLock::isWriteLocked() { return call_method<SCAPIX_META_STRING("isWriteLocked"), jboolean>(); }
inline jboolean ReentrantReadWriteLock::isWriteLockedByCurrentThread() { return call_method<SCAPIX_META_STRING("isWriteLockedByCurrentThread"), jboolean>(); }
inline jint ReentrantReadWriteLock::getWriteHoldCount() { return call_method<SCAPIX_META_STRING("getWriteHoldCount"), jint>(); }
inline jint ReentrantReadWriteLock::getReadHoldCount() { return call_method<SCAPIX_META_STRING("getReadHoldCount"), jint>(); }
inline jboolean ReentrantReadWriteLock::hasQueuedThreads() { return call_method<SCAPIX_META_STRING("hasQueuedThreads"), jboolean>(); }
inline jboolean ReentrantReadWriteLock::hasQueuedThread(ref<java::lang::Thread> thread) { return call_method<SCAPIX_META_STRING("hasQueuedThread"), jboolean>(thread); }
inline jint ReentrantReadWriteLock::getQueueLength() { return call_method<SCAPIX_META_STRING("getQueueLength"), jint>(); }
inline jboolean ReentrantReadWriteLock::hasWaiters(ref<java::util::concurrent::locks::Condition> condition) { return call_method<SCAPIX_META_STRING("hasWaiters"), jboolean>(condition); }
inline jint ReentrantReadWriteLock::getWaitQueueLength(ref<java::util::concurrent::locks::Condition> condition) { return call_method<SCAPIX_META_STRING("getWaitQueueLength"), jint>(condition); }
inline ref<java::lang::String> ReentrantReadWriteLock::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::util::concurrent::locks
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_H
