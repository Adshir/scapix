// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/BlockingQueue.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_TRANSFERQUEUE_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_TRANSFERQUEUE_H

namespace scapix::java_api {

namespace java::util::concurrent { class TimeUnit; }

namespace java::util::concurrent {

class TransferQueue : public object_base<SCAPIX_META_STRING("java/util/concurrent/TransferQueue"),
	java::lang::Object,
	java::util::concurrent::BlockingQueue>
{
public:

	jboolean tryTransfer(ref<java::lang::Object> p1);
	void transfer(ref<java::lang::Object> p1);
	jboolean tryTransfer(ref<java::lang::Object> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3);
	jboolean hasWaitingConsumer();
	jint getWaitingConsumerCount();

protected:

	TransferQueue(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline jboolean TransferQueue::tryTransfer(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("tryTransfer"), jboolean>(p1); }
inline void TransferQueue::transfer(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("transfer"), void>(p1); }
inline jboolean TransferQueue::tryTransfer(ref<java::lang::Object> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("tryTransfer"), jboolean>(p1, p2, p3); }
inline jboolean TransferQueue::hasWaitingConsumer() { return call_method<SCAPIX_META_STRING("hasWaitingConsumer"), jboolean>(); }
inline jint TransferQueue::getWaitingConsumerCount() { return call_method<SCAPIX_META_STRING("getWaitingConsumerCount"), jint>(); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_TRANSFERQUEUE_H
