// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONG_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONG_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util::function { class LongBinaryOperator; }
namespace java::util::function { class LongUnaryOperator; }

namespace java::util::concurrent::atomic {

class AtomicLong : public object_base<SCAPIX_META_STRING("java/util/concurrent/atomic/AtomicLong"),
	java::lang::Number,
	java::io::Serializable>
{
public:

	static ref<AtomicLong> new_object(jlong initialValue);
	static ref<AtomicLong> new_object();
	jlong get();
	void set(jlong newValue);
	void lazySet(jlong newValue);
	jlong getAndSet(jlong newValue);
	jboolean compareAndSet(jlong expectedValue, jlong p2);
	jboolean weakCompareAndSet(jlong expectedValue, jlong p2);
	jboolean weakCompareAndSetPlain(jlong expectedValue, jlong p2);
	jlong getAndIncrement();
	jlong getAndDecrement();
	jlong getAndAdd(jlong delta);
	jlong incrementAndGet();
	jlong decrementAndGet();
	jlong addAndGet(jlong delta);
	jlong getAndUpdate(ref<java::util::function::LongUnaryOperator> updateFunction);
	jlong updateAndGet(ref<java::util::function::LongUnaryOperator> updateFunction);
	jlong getAndAccumulate(jlong x, ref<java::util::function::LongBinaryOperator> p2);
	jlong accumulateAndGet(jlong x, ref<java::util::function::LongBinaryOperator> p2);
	ref<java::lang::String> toString();
	jint intValue();
	jlong longValue();
	jfloat floatValue();
	jdouble doubleValue();
	jlong getPlain();
	void setPlain(jlong newValue);
	jlong getOpaque();
	void setOpaque(jlong newValue);
	jlong getAcquire();
	void setRelease(jlong newValue);
	jlong compareAndExchange(jlong expectedValue, jlong p2);
	jlong compareAndExchangeAcquire(jlong expectedValue, jlong p2);
	jlong compareAndExchangeRelease(jlong expectedValue, jlong p2);
	jboolean weakCompareAndSetVolatile(jlong expectedValue, jlong p2);
	jboolean weakCompareAndSetAcquire(jlong expectedValue, jlong p2);
	jboolean weakCompareAndSetRelease(jlong expectedValue, jlong p2);

protected:

	AtomicLong(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent::atomic
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/LongBinaryOperator.h>
#include <scapix/java_api/java/util/function/LongUnaryOperator.h>

namespace scapix::java_api {
namespace java::util::concurrent::atomic {

inline ref<AtomicLong> AtomicLong::new_object(jlong initialValue) { return base_::new_object(initialValue); }
inline ref<AtomicLong> AtomicLong::new_object() { return base_::new_object(); }
inline jlong AtomicLong::get() { return call_method<SCAPIX_META_STRING("get"), jlong>(); }
inline void AtomicLong::set(jlong newValue) { return call_method<SCAPIX_META_STRING("set"), void>(newValue); }
inline void AtomicLong::lazySet(jlong newValue) { return call_method<SCAPIX_META_STRING("lazySet"), void>(newValue); }
inline jlong AtomicLong::getAndSet(jlong newValue) { return call_method<SCAPIX_META_STRING("getAndSet"), jlong>(newValue); }
inline jboolean AtomicLong::compareAndSet(jlong expectedValue, jlong p2) { return call_method<SCAPIX_META_STRING("compareAndSet"), jboolean>(expectedValue, p2); }
inline jboolean AtomicLong::weakCompareAndSet(jlong expectedValue, jlong p2) { return call_method<SCAPIX_META_STRING("weakCompareAndSet"), jboolean>(expectedValue, p2); }
inline jboolean AtomicLong::weakCompareAndSetPlain(jlong expectedValue, jlong p2) { return call_method<SCAPIX_META_STRING("weakCompareAndSetPlain"), jboolean>(expectedValue, p2); }
inline jlong AtomicLong::getAndIncrement() { return call_method<SCAPIX_META_STRING("getAndIncrement"), jlong>(); }
inline jlong AtomicLong::getAndDecrement() { return call_method<SCAPIX_META_STRING("getAndDecrement"), jlong>(); }
inline jlong AtomicLong::getAndAdd(jlong delta) { return call_method<SCAPIX_META_STRING("getAndAdd"), jlong>(delta); }
inline jlong AtomicLong::incrementAndGet() { return call_method<SCAPIX_META_STRING("incrementAndGet"), jlong>(); }
inline jlong AtomicLong::decrementAndGet() { return call_method<SCAPIX_META_STRING("decrementAndGet"), jlong>(); }
inline jlong AtomicLong::addAndGet(jlong delta) { return call_method<SCAPIX_META_STRING("addAndGet"), jlong>(delta); }
inline jlong AtomicLong::getAndUpdate(ref<java::util::function::LongUnaryOperator> updateFunction) { return call_method<SCAPIX_META_STRING("getAndUpdate"), jlong>(updateFunction); }
inline jlong AtomicLong::updateAndGet(ref<java::util::function::LongUnaryOperator> updateFunction) { return call_method<SCAPIX_META_STRING("updateAndGet"), jlong>(updateFunction); }
inline jlong AtomicLong::getAndAccumulate(jlong x, ref<java::util::function::LongBinaryOperator> p2) { return call_method<SCAPIX_META_STRING("getAndAccumulate"), jlong>(x, p2); }
inline jlong AtomicLong::accumulateAndGet(jlong x, ref<java::util::function::LongBinaryOperator> p2) { return call_method<SCAPIX_META_STRING("accumulateAndGet"), jlong>(x, p2); }
inline ref<java::lang::String> AtomicLong::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint AtomicLong::intValue() { return call_method<SCAPIX_META_STRING("intValue"), jint>(); }
inline jlong AtomicLong::longValue() { return call_method<SCAPIX_META_STRING("longValue"), jlong>(); }
inline jfloat AtomicLong::floatValue() { return call_method<SCAPIX_META_STRING("floatValue"), jfloat>(); }
inline jdouble AtomicLong::doubleValue() { return call_method<SCAPIX_META_STRING("doubleValue"), jdouble>(); }
inline jlong AtomicLong::getPlain() { return call_method<SCAPIX_META_STRING("getPlain"), jlong>(); }
inline void AtomicLong::setPlain(jlong newValue) { return call_method<SCAPIX_META_STRING("setPlain"), void>(newValue); }
inline jlong AtomicLong::getOpaque() { return call_method<SCAPIX_META_STRING("getOpaque"), jlong>(); }
inline void AtomicLong::setOpaque(jlong newValue) { return call_method<SCAPIX_META_STRING("setOpaque"), void>(newValue); }
inline jlong AtomicLong::getAcquire() { return call_method<SCAPIX_META_STRING("getAcquire"), jlong>(); }
inline void AtomicLong::setRelease(jlong newValue) { return call_method<SCAPIX_META_STRING("setRelease"), void>(newValue); }
inline jlong AtomicLong::compareAndExchange(jlong expectedValue, jlong p2) { return call_method<SCAPIX_META_STRING("compareAndExchange"), jlong>(expectedValue, p2); }
inline jlong AtomicLong::compareAndExchangeAcquire(jlong expectedValue, jlong p2) { return call_method<SCAPIX_META_STRING("compareAndExchangeAcquire"), jlong>(expectedValue, p2); }
inline jlong AtomicLong::compareAndExchangeRelease(jlong expectedValue, jlong p2) { return call_method<SCAPIX_META_STRING("compareAndExchangeRelease"), jlong>(expectedValue, p2); }
inline jboolean AtomicLong::weakCompareAndSetVolatile(jlong expectedValue, jlong p2) { return call_method<SCAPIX_META_STRING("weakCompareAndSetVolatile"), jboolean>(expectedValue, p2); }
inline jboolean AtomicLong::weakCompareAndSetAcquire(jlong expectedValue, jlong p2) { return call_method<SCAPIX_META_STRING("weakCompareAndSetAcquire"), jboolean>(expectedValue, p2); }
inline jboolean AtomicLong::weakCompareAndSetRelease(jlong expectedValue, jlong p2) { return call_method<SCAPIX_META_STRING("weakCompareAndSetRelease"), jboolean>(expectedValue, p2); }

} // namespace java::util::concurrent::atomic
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONG_H
