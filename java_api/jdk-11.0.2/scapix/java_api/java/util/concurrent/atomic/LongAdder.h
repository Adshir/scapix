// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/concurrent/atomic/Striped64.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_LONGADDER_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_LONGADDER_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace java::util::concurrent::atomic {

class LongAdder : public object_base<SCAPIX_META_STRING("java/util/concurrent/atomic/LongAdder"),
	java::util::concurrent::atomic::Striped64,
	java::io::Serializable>
{
public:

	static ref<LongAdder> new_object();
	void add(jlong x);
	void increment();
	void decrement();
	jlong sum();
	void reset();
	jlong sumThenReset();
	ref<java::lang::String> toString();
	jlong longValue();
	jint intValue();
	jfloat floatValue();
	jdouble doubleValue();

protected:

	LongAdder(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent::atomic
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::util::concurrent::atomic {

inline ref<LongAdder> LongAdder::new_object() { return base_::new_object(); }
inline void LongAdder::add(jlong x) { return call_method<SCAPIX_META_STRING("add"), void>(x); }
inline void LongAdder::increment() { return call_method<SCAPIX_META_STRING("increment"), void>(); }
inline void LongAdder::decrement() { return call_method<SCAPIX_META_STRING("decrement"), void>(); }
inline jlong LongAdder::sum() { return call_method<SCAPIX_META_STRING("sum"), jlong>(); }
inline void LongAdder::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline jlong LongAdder::sumThenReset() { return call_method<SCAPIX_META_STRING("sumThenReset"), jlong>(); }
inline ref<java::lang::String> LongAdder::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jlong LongAdder::longValue() { return call_method<SCAPIX_META_STRING("longValue"), jlong>(); }
inline jint LongAdder::intValue() { return call_method<SCAPIX_META_STRING("intValue"), jint>(); }
inline jfloat LongAdder::floatValue() { return call_method<SCAPIX_META_STRING("floatValue"), jfloat>(); }
inline jdouble LongAdder::doubleValue() { return call_method<SCAPIX_META_STRING("doubleValue"), jdouble>(); }

} // namespace java::util::concurrent::atomic
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_LONGADDER_H
