// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCE_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCE_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util::function { class BinaryOperator; }
namespace java::util::function { class UnaryOperator; }

namespace java::util::concurrent::atomic {

class AtomicReference : public object_base<SCAPIX_META_STRING("java/util/concurrent/atomic/AtomicReference"),
	java::lang::Object,
	java::io::Serializable>
{
public:

	static ref<AtomicReference> new_object(ref<java::lang::Object> initialValue);
	static ref<AtomicReference> new_object();
	ref<java::lang::Object> get();
	void set(ref<java::lang::Object> newValue);
	void lazySet(ref<java::lang::Object> newValue);
	jboolean compareAndSet(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue);
	jboolean weakCompareAndSet(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue);
	jboolean weakCompareAndSetPlain(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue);
	ref<java::lang::Object> getAndSet(ref<java::lang::Object> newValue);
	ref<java::lang::Object> getAndUpdate(ref<java::util::function::UnaryOperator> updateFunction);
	ref<java::lang::Object> updateAndGet(ref<java::util::function::UnaryOperator> updateFunction);
	ref<java::lang::Object> getAndAccumulate(ref<java::lang::Object> x, ref<java::util::function::BinaryOperator> accumulatorFunction);
	ref<java::lang::Object> accumulateAndGet(ref<java::lang::Object> x, ref<java::util::function::BinaryOperator> accumulatorFunction);
	ref<java::lang::String> toString();
	ref<java::lang::Object> getPlain();
	void setPlain(ref<java::lang::Object> newValue);
	ref<java::lang::Object> getOpaque();
	void setOpaque(ref<java::lang::Object> newValue);
	ref<java::lang::Object> getAcquire();
	void setRelease(ref<java::lang::Object> newValue);
	ref<java::lang::Object> compareAndExchange(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue);
	ref<java::lang::Object> compareAndExchangeAcquire(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue);
	ref<java::lang::Object> compareAndExchangeRelease(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue);
	jboolean weakCompareAndSetVolatile(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue);
	jboolean weakCompareAndSetAcquire(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue);
	jboolean weakCompareAndSetRelease(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue);

protected:

	AtomicReference(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent::atomic
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/BinaryOperator.h>
#include <scapix/java_api/java/util/function/UnaryOperator.h>

namespace scapix::java_api {
namespace java::util::concurrent::atomic {

inline ref<AtomicReference> AtomicReference::new_object(ref<java::lang::Object> initialValue) { return base_::new_object(initialValue); }
inline ref<AtomicReference> AtomicReference::new_object() { return base_::new_object(); }
inline ref<java::lang::Object> AtomicReference::get() { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(); }
inline void AtomicReference::set(ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("set"), void>(newValue); }
inline void AtomicReference::lazySet(ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("lazySet"), void>(newValue); }
inline jboolean AtomicReference::compareAndSet(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("compareAndSet"), jboolean>(expectedValue, newValue); }
inline jboolean AtomicReference::weakCompareAndSet(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("weakCompareAndSet"), jboolean>(expectedValue, newValue); }
inline jboolean AtomicReference::weakCompareAndSetPlain(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("weakCompareAndSetPlain"), jboolean>(expectedValue, newValue); }
inline ref<java::lang::Object> AtomicReference::getAndSet(ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("getAndSet"), ref<java::lang::Object>>(newValue); }
inline ref<java::lang::Object> AtomicReference::getAndUpdate(ref<java::util::function::UnaryOperator> updateFunction) { return call_method<SCAPIX_META_STRING("getAndUpdate"), ref<java::lang::Object>>(updateFunction); }
inline ref<java::lang::Object> AtomicReference::updateAndGet(ref<java::util::function::UnaryOperator> updateFunction) { return call_method<SCAPIX_META_STRING("updateAndGet"), ref<java::lang::Object>>(updateFunction); }
inline ref<java::lang::Object> AtomicReference::getAndAccumulate(ref<java::lang::Object> x, ref<java::util::function::BinaryOperator> accumulatorFunction) { return call_method<SCAPIX_META_STRING("getAndAccumulate"), ref<java::lang::Object>>(x, accumulatorFunction); }
inline ref<java::lang::Object> AtomicReference::accumulateAndGet(ref<java::lang::Object> x, ref<java::util::function::BinaryOperator> accumulatorFunction) { return call_method<SCAPIX_META_STRING("accumulateAndGet"), ref<java::lang::Object>>(x, accumulatorFunction); }
inline ref<java::lang::String> AtomicReference::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::Object> AtomicReference::getPlain() { return call_method<SCAPIX_META_STRING("getPlain"), ref<java::lang::Object>>(); }
inline void AtomicReference::setPlain(ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("setPlain"), void>(newValue); }
inline ref<java::lang::Object> AtomicReference::getOpaque() { return call_method<SCAPIX_META_STRING("getOpaque"), ref<java::lang::Object>>(); }
inline void AtomicReference::setOpaque(ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("setOpaque"), void>(newValue); }
inline ref<java::lang::Object> AtomicReference::getAcquire() { return call_method<SCAPIX_META_STRING("getAcquire"), ref<java::lang::Object>>(); }
inline void AtomicReference::setRelease(ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("setRelease"), void>(newValue); }
inline ref<java::lang::Object> AtomicReference::compareAndExchange(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("compareAndExchange"), ref<java::lang::Object>>(expectedValue, newValue); }
inline ref<java::lang::Object> AtomicReference::compareAndExchangeAcquire(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("compareAndExchangeAcquire"), ref<java::lang::Object>>(expectedValue, newValue); }
inline ref<java::lang::Object> AtomicReference::compareAndExchangeRelease(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("compareAndExchangeRelease"), ref<java::lang::Object>>(expectedValue, newValue); }
inline jboolean AtomicReference::weakCompareAndSetVolatile(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("weakCompareAndSetVolatile"), jboolean>(expectedValue, newValue); }
inline jboolean AtomicReference::weakCompareAndSetAcquire(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("weakCompareAndSetAcquire"), jboolean>(expectedValue, newValue); }
inline jboolean AtomicReference::weakCompareAndSetRelease(ref<java::lang::Object> expectedValue, ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("weakCompareAndSetRelease"), jboolean>(expectedValue, newValue); }

} // namespace java::util::concurrent::atomic
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCE_H
