// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICBOOLEAN_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICBOOLEAN_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace java::util::concurrent::atomic {

class AtomicBoolean : public object_base<SCAPIX_META_STRING("java/util/concurrent/atomic/AtomicBoolean"),
	java::lang::Object,
	java::io::Serializable>
{
public:

	static ref<AtomicBoolean> new_object(jboolean initialValue);
	static ref<AtomicBoolean> new_object();
	jboolean get();
	jboolean compareAndSet(jboolean expectedValue, jboolean newValue);
	jboolean weakCompareAndSet(jboolean expectedValue, jboolean newValue);
	jboolean weakCompareAndSetPlain(jboolean expectedValue, jboolean newValue);
	void set(jboolean newValue);
	void lazySet(jboolean newValue);
	jboolean getAndSet(jboolean newValue);
	ref<java::lang::String> toString();
	jboolean getPlain();
	void setPlain(jboolean newValue);
	jboolean getOpaque();
	void setOpaque(jboolean newValue);
	jboolean getAcquire();
	void setRelease(jboolean newValue);
	jboolean compareAndExchange(jboolean expectedValue, jboolean newValue);
	jboolean compareAndExchangeAcquire(jboolean expectedValue, jboolean newValue);
	jboolean compareAndExchangeRelease(jboolean expectedValue, jboolean newValue);
	jboolean weakCompareAndSetVolatile(jboolean expectedValue, jboolean newValue);
	jboolean weakCompareAndSetAcquire(jboolean expectedValue, jboolean newValue);
	jboolean weakCompareAndSetRelease(jboolean expectedValue, jboolean newValue);

protected:

	AtomicBoolean(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent::atomic
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::util::concurrent::atomic {

inline ref<AtomicBoolean> AtomicBoolean::new_object(jboolean initialValue) { return base_::new_object(initialValue); }
inline ref<AtomicBoolean> AtomicBoolean::new_object() { return base_::new_object(); }
inline jboolean AtomicBoolean::get() { return call_method<SCAPIX_META_STRING("get"), jboolean>(); }
inline jboolean AtomicBoolean::compareAndSet(jboolean expectedValue, jboolean newValue) { return call_method<SCAPIX_META_STRING("compareAndSet"), jboolean>(expectedValue, newValue); }
inline jboolean AtomicBoolean::weakCompareAndSet(jboolean expectedValue, jboolean newValue) { return call_method<SCAPIX_META_STRING("weakCompareAndSet"), jboolean>(expectedValue, newValue); }
inline jboolean AtomicBoolean::weakCompareAndSetPlain(jboolean expectedValue, jboolean newValue) { return call_method<SCAPIX_META_STRING("weakCompareAndSetPlain"), jboolean>(expectedValue, newValue); }
inline void AtomicBoolean::set(jboolean newValue) { return call_method<SCAPIX_META_STRING("set"), void>(newValue); }
inline void AtomicBoolean::lazySet(jboolean newValue) { return call_method<SCAPIX_META_STRING("lazySet"), void>(newValue); }
inline jboolean AtomicBoolean::getAndSet(jboolean newValue) { return call_method<SCAPIX_META_STRING("getAndSet"), jboolean>(newValue); }
inline ref<java::lang::String> AtomicBoolean::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean AtomicBoolean::getPlain() { return call_method<SCAPIX_META_STRING("getPlain"), jboolean>(); }
inline void AtomicBoolean::setPlain(jboolean newValue) { return call_method<SCAPIX_META_STRING("setPlain"), void>(newValue); }
inline jboolean AtomicBoolean::getOpaque() { return call_method<SCAPIX_META_STRING("getOpaque"), jboolean>(); }
inline void AtomicBoolean::setOpaque(jboolean newValue) { return call_method<SCAPIX_META_STRING("setOpaque"), void>(newValue); }
inline jboolean AtomicBoolean::getAcquire() { return call_method<SCAPIX_META_STRING("getAcquire"), jboolean>(); }
inline void AtomicBoolean::setRelease(jboolean newValue) { return call_method<SCAPIX_META_STRING("setRelease"), void>(newValue); }
inline jboolean AtomicBoolean::compareAndExchange(jboolean expectedValue, jboolean newValue) { return call_method<SCAPIX_META_STRING("compareAndExchange"), jboolean>(expectedValue, newValue); }
inline jboolean AtomicBoolean::compareAndExchangeAcquire(jboolean expectedValue, jboolean newValue) { return call_method<SCAPIX_META_STRING("compareAndExchangeAcquire"), jboolean>(expectedValue, newValue); }
inline jboolean AtomicBoolean::compareAndExchangeRelease(jboolean expectedValue, jboolean newValue) { return call_method<SCAPIX_META_STRING("compareAndExchangeRelease"), jboolean>(expectedValue, newValue); }
inline jboolean AtomicBoolean::weakCompareAndSetVolatile(jboolean expectedValue, jboolean newValue) { return call_method<SCAPIX_META_STRING("weakCompareAndSetVolatile"), jboolean>(expectedValue, newValue); }
inline jboolean AtomicBoolean::weakCompareAndSetAcquire(jboolean expectedValue, jboolean newValue) { return call_method<SCAPIX_META_STRING("weakCompareAndSetAcquire"), jboolean>(expectedValue, newValue); }
inline jboolean AtomicBoolean::weakCompareAndSetRelease(jboolean expectedValue, jboolean newValue) { return call_method<SCAPIX_META_STRING("weakCompareAndSetRelease"), jboolean>(expectedValue, newValue); }

} // namespace java::util::concurrent::atomic
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICBOOLEAN_H
