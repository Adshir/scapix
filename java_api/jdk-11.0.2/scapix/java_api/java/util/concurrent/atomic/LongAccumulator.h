// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/concurrent/atomic/Striped64.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_LONGACCUMULATOR_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_LONGACCUMULATOR_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util::function { class LongBinaryOperator; }

namespace java::util::concurrent::atomic {

class LongAccumulator : public object_base<SCAPIX_META_STRING("java/util/concurrent/atomic/LongAccumulator"),
	java::util::concurrent::atomic::Striped64,
	java::io::Serializable>
{
public:

	static ref<LongAccumulator> new_object(ref<java::util::function::LongBinaryOperator> accumulatorFunction, jlong identity);
	void accumulate(jlong x);
	jlong get();
	void reset();
	jlong getThenReset();
	ref<java::lang::String> toString();
	jlong longValue();
	jint intValue();
	jfloat floatValue();
	jdouble doubleValue();

protected:

	LongAccumulator(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent::atomic
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/LongBinaryOperator.h>

namespace scapix::java_api {
namespace java::util::concurrent::atomic {

inline ref<LongAccumulator> LongAccumulator::new_object(ref<java::util::function::LongBinaryOperator> accumulatorFunction, jlong identity) { return base_::new_object(accumulatorFunction, identity); }
inline void LongAccumulator::accumulate(jlong x) { return call_method<SCAPIX_META_STRING("accumulate"), void>(x); }
inline jlong LongAccumulator::get() { return call_method<SCAPIX_META_STRING("get"), jlong>(); }
inline void LongAccumulator::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline jlong LongAccumulator::getThenReset() { return call_method<SCAPIX_META_STRING("getThenReset"), jlong>(); }
inline ref<java::lang::String> LongAccumulator::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jlong LongAccumulator::longValue() { return call_method<SCAPIX_META_STRING("longValue"), jlong>(); }
inline jint LongAccumulator::intValue() { return call_method<SCAPIX_META_STRING("intValue"), jint>(); }
inline jfloat LongAccumulator::floatValue() { return call_method<SCAPIX_META_STRING("floatValue"), jfloat>(); }
inline jdouble LongAccumulator::doubleValue() { return call_method<SCAPIX_META_STRING("doubleValue"), jdouble>(); }

} // namespace java::util::concurrent::atomic
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_LONGACCUMULATOR_H
