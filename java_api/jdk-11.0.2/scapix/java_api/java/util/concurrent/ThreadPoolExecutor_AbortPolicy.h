// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/RejectedExecutionHandler.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_THREADPOOLEXECUTOR_ABORTPOLICY_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_THREADPOOLEXECUTOR_ABORTPOLICY_H

namespace scapix::java_api {

namespace java::lang { class Runnable; }
namespace java::util::concurrent { class ThreadPoolExecutor; }

namespace java::util::concurrent {

class ThreadPoolExecutor_AbortPolicy : public object_base<SCAPIX_META_STRING("java/util/concurrent/ThreadPoolExecutor$AbortPolicy"),
	java::lang::Object,
	java::util::concurrent::RejectedExecutionHandler>
{
public:

	static ref<ThreadPoolExecutor_AbortPolicy> new_object();
	void rejectedExecution(ref<java::lang::Runnable> r, ref<java::util::concurrent::ThreadPoolExecutor> e);

protected:

	ThreadPoolExecutor_AbortPolicy(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/util/concurrent/ThreadPoolExecutor.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<ThreadPoolExecutor_AbortPolicy> ThreadPoolExecutor_AbortPolicy::new_object() { return base_::new_object(); }
inline void ThreadPoolExecutor_AbortPolicy::rejectedExecution(ref<java::lang::Runnable> r, ref<java::util::concurrent::ThreadPoolExecutor> e) { return call_method<SCAPIX_META_STRING("rejectedExecution"), void>(r, e); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_THREADPOOLEXECUTOR_ABORTPOLICY_H
