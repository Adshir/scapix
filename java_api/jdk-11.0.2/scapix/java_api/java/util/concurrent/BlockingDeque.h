// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/BlockingQueue.h>
#include <scapix/java_api/java/util/Deque.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_BLOCKINGDEQUE_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_BLOCKINGDEQUE_H

namespace scapix::java_api {

namespace java::util { class Iterator; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::util::concurrent {

class BlockingDeque : public object_base<SCAPIX_META_STRING("java/util/concurrent/BlockingDeque"),
	java::lang::Object,
	java::util::concurrent::BlockingQueue,
	java::util::Deque>
{
public:

	void addFirst(ref<java::lang::Object> p1);
	void addLast(ref<java::lang::Object> p1);
	jboolean offerFirst(ref<java::lang::Object> p1);
	jboolean offerLast(ref<java::lang::Object> p1);
	void putFirst(ref<java::lang::Object> p1);
	void putLast(ref<java::lang::Object> p1);
	jboolean offerFirst(ref<java::lang::Object> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3);
	jboolean offerLast(ref<java::lang::Object> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3);
	ref<java::lang::Object> takeFirst();
	ref<java::lang::Object> takeLast();
	ref<java::lang::Object> pollFirst(jlong p1, ref<java::util::concurrent::TimeUnit> p2);
	ref<java::lang::Object> pollLast(jlong p1, ref<java::util::concurrent::TimeUnit> p2);
	jboolean removeFirstOccurrence(ref<java::lang::Object> p1);
	jboolean removeLastOccurrence(ref<java::lang::Object> p1);
	jboolean add(ref<java::lang::Object> p1);
	jboolean offer(ref<java::lang::Object> p1);
	void put(ref<java::lang::Object> p1);
	jboolean offer(ref<java::lang::Object> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3);
	ref<java::lang::Object> remove();
	ref<java::lang::Object> poll();
	ref<java::lang::Object> take();
	ref<java::lang::Object> poll(jlong p1, ref<java::util::concurrent::TimeUnit> p2);
	ref<java::lang::Object> element();
	ref<java::lang::Object> peek();
	jboolean remove(ref<java::lang::Object> p1);
	jboolean contains(ref<java::lang::Object> p1);
	jint size();
	ref<java::util::Iterator> iterator();
	void push(ref<java::lang::Object> p1);

protected:

	BlockingDeque(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline void BlockingDeque::addFirst(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("addFirst"), void>(p1); }
inline void BlockingDeque::addLast(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("addLast"), void>(p1); }
inline jboolean BlockingDeque::offerFirst(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("offerFirst"), jboolean>(p1); }
inline jboolean BlockingDeque::offerLast(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("offerLast"), jboolean>(p1); }
inline void BlockingDeque::putFirst(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("putFirst"), void>(p1); }
inline void BlockingDeque::putLast(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("putLast"), void>(p1); }
inline jboolean BlockingDeque::offerFirst(ref<java::lang::Object> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("offerFirst"), jboolean>(p1, p2, p3); }
inline jboolean BlockingDeque::offerLast(ref<java::lang::Object> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("offerLast"), jboolean>(p1, p2, p3); }
inline ref<java::lang::Object> BlockingDeque::takeFirst() { return call_method<SCAPIX_META_STRING("takeFirst"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> BlockingDeque::takeLast() { return call_method<SCAPIX_META_STRING("takeLast"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> BlockingDeque::pollFirst(jlong p1, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("pollFirst"), ref<java::lang::Object>>(p1, p2); }
inline ref<java::lang::Object> BlockingDeque::pollLast(jlong p1, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("pollLast"), ref<java::lang::Object>>(p1, p2); }
inline jboolean BlockingDeque::removeFirstOccurrence(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("removeFirstOccurrence"), jboolean>(p1); }
inline jboolean BlockingDeque::removeLastOccurrence(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("removeLastOccurrence"), jboolean>(p1); }
inline jboolean BlockingDeque::add(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("add"), jboolean>(p1); }
inline jboolean BlockingDeque::offer(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("offer"), jboolean>(p1); }
inline void BlockingDeque::put(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("put"), void>(p1); }
inline jboolean BlockingDeque::offer(ref<java::lang::Object> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("offer"), jboolean>(p1, p2, p3); }
inline ref<java::lang::Object> BlockingDeque::remove() { return call_method<SCAPIX_META_STRING("remove"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> BlockingDeque::poll() { return call_method<SCAPIX_META_STRING("poll"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> BlockingDeque::take() { return call_method<SCAPIX_META_STRING("take"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> BlockingDeque::poll(jlong p1, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("poll"), ref<java::lang::Object>>(p1, p2); }
inline ref<java::lang::Object> BlockingDeque::element() { return call_method<SCAPIX_META_STRING("element"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> BlockingDeque::peek() { return call_method<SCAPIX_META_STRING("peek"), ref<java::lang::Object>>(); }
inline jboolean BlockingDeque::remove(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("remove"), jboolean>(p1); }
inline jboolean BlockingDeque::contains(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(p1); }
inline jint BlockingDeque::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline ref<java::util::Iterator> BlockingDeque::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::Iterator>>(); }
inline void BlockingDeque::push(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("push"), void>(p1); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_BLOCKINGDEQUE_H
