// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractQueue.h>
#include <scapix/java_api/java/util/concurrent/BlockingQueue.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_DELAYQUEUE_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_DELAYQUEUE_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::util { class Collection; }
namespace java::util { class Iterator; }
namespace java::util::concurrent { class Delayed; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::util::concurrent {

class DelayQueue : public object_base<SCAPIX_META_STRING("java/util/concurrent/DelayQueue"),
	java::util::AbstractQueue,
	java::util::concurrent::BlockingQueue>
{
public:

	static ref<DelayQueue> new_object();
	static ref<DelayQueue> new_object(ref<java::util::Collection> c);
	jboolean add(ref<java::util::concurrent::Delayed> e);
	jboolean offer(ref<java::util::concurrent::Delayed> e);
	void put(ref<java::util::concurrent::Delayed> e);
	jboolean offer(ref<java::util::concurrent::Delayed> e, jlong timeout, ref<java::util::concurrent::TimeUnit> p3);
	ref<java::util::concurrent::Delayed> poll();
	ref<java::util::concurrent::Delayed> take();
	ref<java::util::concurrent::Delayed> poll(jlong timeout, ref<java::util::concurrent::TimeUnit> p2);
	ref<java::util::concurrent::Delayed> peek();
	jint size();
	jint drainTo(ref<java::util::Collection> c);
	jint drainTo(ref<java::util::Collection> c, jint maxElements);
	void clear();
	jint remainingCapacity();
	ref<link::java::array<java::lang::Object>> toArray();
	ref<link::java::array<java::lang::Object>> toArray(ref<link::java::array<java::lang::Object>> a);
	jboolean remove(ref<java::lang::Object> o);
	ref<java::util::Iterator> iterator();

protected:

	DelayQueue(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/concurrent/Delayed.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<DelayQueue> DelayQueue::new_object() { return base_::new_object(); }
inline ref<DelayQueue> DelayQueue::new_object(ref<java::util::Collection> c) { return base_::new_object(c); }
inline jboolean DelayQueue::add(ref<java::util::concurrent::Delayed> e) { return call_method<SCAPIX_META_STRING("add"), jboolean>(e); }
inline jboolean DelayQueue::offer(ref<java::util::concurrent::Delayed> e) { return call_method<SCAPIX_META_STRING("offer"), jboolean>(e); }
inline void DelayQueue::put(ref<java::util::concurrent::Delayed> e) { return call_method<SCAPIX_META_STRING("put"), void>(e); }
inline jboolean DelayQueue::offer(ref<java::util::concurrent::Delayed> e, jlong timeout, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("offer"), jboolean>(e, timeout, p3); }
inline ref<java::util::concurrent::Delayed> DelayQueue::poll() { return call_method<SCAPIX_META_STRING("poll"), ref<java::util::concurrent::Delayed>>(); }
inline ref<java::util::concurrent::Delayed> DelayQueue::take() { return call_method<SCAPIX_META_STRING("take"), ref<java::util::concurrent::Delayed>>(); }
inline ref<java::util::concurrent::Delayed> DelayQueue::poll(jlong timeout, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("poll"), ref<java::util::concurrent::Delayed>>(timeout, p2); }
inline ref<java::util::concurrent::Delayed> DelayQueue::peek() { return call_method<SCAPIX_META_STRING("peek"), ref<java::util::concurrent::Delayed>>(); }
inline jint DelayQueue::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jint DelayQueue::drainTo(ref<java::util::Collection> c) { return call_method<SCAPIX_META_STRING("drainTo"), jint>(c); }
inline jint DelayQueue::drainTo(ref<java::util::Collection> c, jint maxElements) { return call_method<SCAPIX_META_STRING("drainTo"), jint>(c, maxElements); }
inline void DelayQueue::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline jint DelayQueue::remainingCapacity() { return call_method<SCAPIX_META_STRING("remainingCapacity"), jint>(); }
inline ref<link::java::array<java::lang::Object>> DelayQueue::toArray() { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<java::lang::Object>>>(); }
inline ref<link::java::array<java::lang::Object>> DelayQueue::toArray(ref<link::java::array<java::lang::Object>> a) { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<java::lang::Object>>>(a); }
inline jboolean DelayQueue::remove(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("remove"), jboolean>(o); }
inline ref<java::util::Iterator> DelayQueue::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::Iterator>>(); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_DELAYQUEUE_H
