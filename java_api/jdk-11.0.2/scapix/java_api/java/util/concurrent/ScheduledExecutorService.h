// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/ExecutorService.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_SCHEDULEDEXECUTORSERVICE_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_SCHEDULEDEXECUTORSERVICE_H

namespace scapix::java_api {

namespace java::lang { class Runnable; }
namespace java::util::concurrent { class Callable; }
namespace java::util::concurrent { class ScheduledFuture; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::util::concurrent {

class ScheduledExecutorService : public object_base<SCAPIX_META_STRING("java/util/concurrent/ScheduledExecutorService"),
	java::lang::Object,
	java::util::concurrent::ExecutorService>
{
public:

	ref<java::util::concurrent::ScheduledFuture> schedule(ref<java::lang::Runnable> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3);
	ref<java::util::concurrent::ScheduledFuture> schedule(ref<java::util::concurrent::Callable> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3);
	ref<java::util::concurrent::ScheduledFuture> scheduleAtFixedRate(ref<java::lang::Runnable> p1, jlong p2, jlong p3, ref<java::util::concurrent::TimeUnit> p4);
	ref<java::util::concurrent::ScheduledFuture> scheduleWithFixedDelay(ref<java::lang::Runnable> p1, jlong p2, jlong p3, ref<java::util::concurrent::TimeUnit> p4);

protected:

	ScheduledExecutorService(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/java/util/concurrent/ScheduledFuture.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<java::util::concurrent::ScheduledFuture> ScheduledExecutorService::schedule(ref<java::lang::Runnable> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("schedule"), ref<java::util::concurrent::ScheduledFuture>>(p1, p2, p3); }
inline ref<java::util::concurrent::ScheduledFuture> ScheduledExecutorService::schedule(ref<java::util::concurrent::Callable> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("schedule"), ref<java::util::concurrent::ScheduledFuture>>(p1, p2, p3); }
inline ref<java::util::concurrent::ScheduledFuture> ScheduledExecutorService::scheduleAtFixedRate(ref<java::lang::Runnable> p1, jlong p2, jlong p3, ref<java::util::concurrent::TimeUnit> p4) { return call_method<SCAPIX_META_STRING("scheduleAtFixedRate"), ref<java::util::concurrent::ScheduledFuture>>(p1, p2, p3, p4); }
inline ref<java::util::concurrent::ScheduledFuture> ScheduledExecutorService::scheduleWithFixedDelay(ref<java::lang::Runnable> p1, jlong p2, jlong p3, ref<java::util::concurrent::TimeUnit> p4) { return call_method<SCAPIX_META_STRING("scheduleWithFixedDelay"), ref<java::util::concurrent::ScheduledFuture>>(p1, p2, p3, p4); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_SCHEDULEDEXECUTORSERVICE_H
