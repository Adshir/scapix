// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_BITSET_H
#define SCAPIX_JAVA_UTIL_BITSET_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::nio { class ByteBuffer; }
namespace java::nio { class LongBuffer; }
namespace java::util::stream { class IntStream; }

namespace java::util {

class BitSet : public object_base<SCAPIX_META_STRING("java/util/BitSet"),
	java::lang::Object,
	java::lang::Cloneable,
	java::io::Serializable>
{
public:

	static ref<BitSet> new_object();
	static ref<BitSet> new_object(jint nbits);
	static ref<java::util::BitSet> valueOf(ref<link::java::array<jlong>> longs);
	static ref<java::util::BitSet> valueOf(ref<java::nio::LongBuffer> lb);
	static ref<java::util::BitSet> valueOf(ref<link::java::array<jbyte>> bytes);
	static ref<java::util::BitSet> valueOf(ref<java::nio::ByteBuffer> bb);
	ref<link::java::array<jbyte>> toByteArray();
	ref<link::java::array<jlong>> toLongArray();
	void flip(jint bitIndex);
	void flip(jint fromIndex, jint toIndex);
	void set(jint bitIndex);
	void set(jint bitIndex, jboolean value);
	void set(jint fromIndex, jint toIndex);
	void set(jint fromIndex, jint toIndex, jboolean value);
	void clear(jint bitIndex);
	void clear(jint fromIndex, jint toIndex);
	void clear();
	jboolean get(jint bitIndex);
	ref<java::util::BitSet> get(jint fromIndex, jint toIndex);
	jint nextSetBit(jint fromIndex);
	jint nextClearBit(jint fromIndex);
	jint previousSetBit(jint fromIndex);
	jint previousClearBit(jint fromIndex);
	jint length();
	jboolean isEmpty();
	jboolean intersects(ref<java::util::BitSet> set);
	jint cardinality();
	void and_(ref<java::util::BitSet> set);
	void or_(ref<java::util::BitSet> set);
	void xor_(ref<java::util::BitSet> set);
	void andNot(ref<java::util::BitSet> set);
	jint hashCode();
	jint size();
	jboolean equals(ref<java::lang::Object> obj);
	ref<java::lang::Object> clone();
	ref<java::lang::String> toString();
	ref<java::util::stream::IntStream> stream();

protected:

	BitSet(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/LongBuffer.h>
#include <scapix/java_api/java/util/stream/IntStream.h>

namespace scapix::java_api {
namespace java::util {

inline ref<BitSet> BitSet::new_object() { return base_::new_object(); }
inline ref<BitSet> BitSet::new_object(jint nbits) { return base_::new_object(nbits); }
inline ref<java::util::BitSet> BitSet::valueOf(ref<link::java::array<jlong>> longs) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::util::BitSet>>(longs); }
inline ref<java::util::BitSet> BitSet::valueOf(ref<java::nio::LongBuffer> lb) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::util::BitSet>>(lb); }
inline ref<java::util::BitSet> BitSet::valueOf(ref<link::java::array<jbyte>> bytes) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::util::BitSet>>(bytes); }
inline ref<java::util::BitSet> BitSet::valueOf(ref<java::nio::ByteBuffer> bb) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::util::BitSet>>(bb); }
inline ref<link::java::array<jbyte>> BitSet::toByteArray() { return call_method<SCAPIX_META_STRING("toByteArray"), ref<link::java::array<jbyte>>>(); }
inline ref<link::java::array<jlong>> BitSet::toLongArray() { return call_method<SCAPIX_META_STRING("toLongArray"), ref<link::java::array<jlong>>>(); }
inline void BitSet::flip(jint bitIndex) { return call_method<SCAPIX_META_STRING("flip"), void>(bitIndex); }
inline void BitSet::flip(jint fromIndex, jint toIndex) { return call_method<SCAPIX_META_STRING("flip"), void>(fromIndex, toIndex); }
inline void BitSet::set(jint bitIndex) { return call_method<SCAPIX_META_STRING("set"), void>(bitIndex); }
inline void BitSet::set(jint bitIndex, jboolean value) { return call_method<SCAPIX_META_STRING("set"), void>(bitIndex, value); }
inline void BitSet::set(jint fromIndex, jint toIndex) { return call_method<SCAPIX_META_STRING("set"), void>(fromIndex, toIndex); }
inline void BitSet::set(jint fromIndex, jint toIndex, jboolean value) { return call_method<SCAPIX_META_STRING("set"), void>(fromIndex, toIndex, value); }
inline void BitSet::clear(jint bitIndex) { return call_method<SCAPIX_META_STRING("clear"), void>(bitIndex); }
inline void BitSet::clear(jint fromIndex, jint toIndex) { return call_method<SCAPIX_META_STRING("clear"), void>(fromIndex, toIndex); }
inline void BitSet::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline jboolean BitSet::get(jint bitIndex) { return call_method<SCAPIX_META_STRING("get"), jboolean>(bitIndex); }
inline ref<java::util::BitSet> BitSet::get(jint fromIndex, jint toIndex) { return call_method<SCAPIX_META_STRING("get"), ref<java::util::BitSet>>(fromIndex, toIndex); }
inline jint BitSet::nextSetBit(jint fromIndex) { return call_method<SCAPIX_META_STRING("nextSetBit"), jint>(fromIndex); }
inline jint BitSet::nextClearBit(jint fromIndex) { return call_method<SCAPIX_META_STRING("nextClearBit"), jint>(fromIndex); }
inline jint BitSet::previousSetBit(jint fromIndex) { return call_method<SCAPIX_META_STRING("previousSetBit"), jint>(fromIndex); }
inline jint BitSet::previousClearBit(jint fromIndex) { return call_method<SCAPIX_META_STRING("previousClearBit"), jint>(fromIndex); }
inline jint BitSet::length() { return call_method<SCAPIX_META_STRING("length"), jint>(); }
inline jboolean BitSet::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline jboolean BitSet::intersects(ref<java::util::BitSet> set) { return call_method<SCAPIX_META_STRING("intersects"), jboolean>(set); }
inline jint BitSet::cardinality() { return call_method<SCAPIX_META_STRING("cardinality"), jint>(); }
inline void BitSet::and_(ref<java::util::BitSet> set) { return call_method<SCAPIX_META_STRING("and"), void>(set); }
inline void BitSet::or_(ref<java::util::BitSet> set) { return call_method<SCAPIX_META_STRING("or"), void>(set); }
inline void BitSet::xor_(ref<java::util::BitSet> set) { return call_method<SCAPIX_META_STRING("xor"), void>(set); }
inline void BitSet::andNot(ref<java::util::BitSet> set) { return call_method<SCAPIX_META_STRING("andNot"), void>(set); }
inline jint BitSet::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint BitSet::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jboolean BitSet::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline ref<java::lang::Object> BitSet::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline ref<java::lang::String> BitSet::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::util::stream::IntStream> BitSet::stream() { return call_method<SCAPIX_META_STRING("stream"), ref<java::util::stream::IntStream>>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_BITSET_H
