// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_MAP_H
#define SCAPIX_JAVA_UTIL_MAP_H

namespace scapix::java_api {

namespace java::util { class Collection; }
namespace java::util { class Map_Entry; }
namespace java::util { class Set; }
namespace java::util::function { class BiConsumer; }
namespace java::util::function { class BiFunction; }
namespace java::util::function { class Function; }

namespace java::util {

class Map : public object_base<SCAPIX_META_STRING("java/util/Map"),
	java::lang::Object>
{
public:

	using Entry = Map_Entry;

	jint size();
	jboolean isEmpty();
	jboolean containsKey(ref<java::lang::Object> p1);
	jboolean containsValue(ref<java::lang::Object> p1);
	ref<java::lang::Object> get(ref<java::lang::Object> p1);
	ref<java::lang::Object> put(ref<java::lang::Object> p1, ref<java::lang::Object> p2);
	ref<java::lang::Object> remove(ref<java::lang::Object> p1);
	void putAll(ref<java::util::Map> p1);
	void clear();
	ref<java::util::Set> keySet();
	ref<java::util::Collection> values();
	ref<java::util::Set> entrySet();
	jboolean equals(ref<java::lang::Object> p1);
	jint hashCode();
	ref<java::lang::Object> getOrDefault(ref<java::lang::Object> key, ref<java::lang::Object> defaultValue);
	void forEach(ref<java::util::function::BiConsumer> action);
	void replaceAll(ref<java::util::function::BiFunction> function);
	ref<java::lang::Object> putIfAbsent(ref<java::lang::Object> key, ref<java::lang::Object> value);
	jboolean remove(ref<java::lang::Object> key, ref<java::lang::Object> value);
	jboolean replace(ref<java::lang::Object> key, ref<java::lang::Object> oldValue, ref<java::lang::Object> newValue);
	ref<java::lang::Object> replace(ref<java::lang::Object> key, ref<java::lang::Object> value);
	ref<java::lang::Object> computeIfAbsent(ref<java::lang::Object> key, ref<java::util::function::Function> mappingFunction);
	ref<java::lang::Object> computeIfPresent(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction);
	ref<java::lang::Object> compute(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction);
	ref<java::lang::Object> merge(ref<java::lang::Object> key, ref<java::lang::Object> value, ref<java::util::function::BiFunction> remappingFunction);
	static ref<java::util::Map> of();
	static ref<java::util::Map> of(ref<java::lang::Object> k1, ref<java::lang::Object> v1);
	static ref<java::util::Map> of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2);
	static ref<java::util::Map> of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2, ref<java::lang::Object> k3, ref<java::lang::Object> v3);
	static ref<java::util::Map> of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2, ref<java::lang::Object> k3, ref<java::lang::Object> v3, ref<java::lang::Object> k4, ref<java::lang::Object> v4);
	static ref<java::util::Map> of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2, ref<java::lang::Object> k3, ref<java::lang::Object> v3, ref<java::lang::Object> k4, ref<java::lang::Object> v4, ref<java::lang::Object> k5, ref<java::lang::Object> v5);
	static ref<java::util::Map> of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2, ref<java::lang::Object> k3, ref<java::lang::Object> v3, ref<java::lang::Object> k4, ref<java::lang::Object> v4, ref<java::lang::Object> k5, ref<java::lang::Object> v5, ref<java::lang::Object> k6, ref<java::lang::Object> v6);
	static ref<java::util::Map> of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2, ref<java::lang::Object> k3, ref<java::lang::Object> v3, ref<java::lang::Object> k4, ref<java::lang::Object> v4, ref<java::lang::Object> k5, ref<java::lang::Object> v5, ref<java::lang::Object> k6, ref<java::lang::Object> v6, ref<java::lang::Object> k7, ref<java::lang::Object> v7);
	static ref<java::util::Map> of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2, ref<java::lang::Object> k3, ref<java::lang::Object> v3, ref<java::lang::Object> k4, ref<java::lang::Object> v4, ref<java::lang::Object> k5, ref<java::lang::Object> v5, ref<java::lang::Object> k6, ref<java::lang::Object> v6, ref<java::lang::Object> k7, ref<java::lang::Object> v7, ref<java::lang::Object> k8, ref<java::lang::Object> v8);
	static ref<java::util::Map> of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2, ref<java::lang::Object> k3, ref<java::lang::Object> v3, ref<java::lang::Object> k4, ref<java::lang::Object> v4, ref<java::lang::Object> k5, ref<java::lang::Object> v5, ref<java::lang::Object> k6, ref<java::lang::Object> v6, ref<java::lang::Object> k7, ref<java::lang::Object> v7, ref<java::lang::Object> k8, ref<java::lang::Object> v8, ref<java::lang::Object> k9, ref<java::lang::Object> v9);
	static ref<java::util::Map> of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2, ref<java::lang::Object> k3, ref<java::lang::Object> v3, ref<java::lang::Object> k4, ref<java::lang::Object> v4, ref<java::lang::Object> k5, ref<java::lang::Object> v5, ref<java::lang::Object> k6, ref<java::lang::Object> v6, ref<java::lang::Object> k7, ref<java::lang::Object> v7, ref<java::lang::Object> k8, ref<java::lang::Object> v8, ref<java::lang::Object> k9, ref<java::lang::Object> v9, ref<java::lang::Object> k10, ref<java::lang::Object> v10);
	static ref<java::util::Map> ofEntries(ref<link::java::array<java::util::Map_Entry>> entries);
	static ref<java::util::Map_Entry> entry(ref<java::lang::Object> k, ref<java::lang::Object> v);
	static ref<java::util::Map> copyOf(ref<java::util::Map> map);

protected:

	Map(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Map_Entry.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BiFunction.h>
#include <scapix/java_api/java/util/function/Function.h>

namespace scapix::java_api {
namespace java::util {

inline jint Map::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jboolean Map::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline jboolean Map::containsKey(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("containsKey"), jboolean>(p1); }
inline jboolean Map::containsValue(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("containsValue"), jboolean>(p1); }
inline ref<java::lang::Object> Map::get(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> Map::put(ref<java::lang::Object> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("put"), ref<java::lang::Object>>(p1, p2); }
inline ref<java::lang::Object> Map::remove(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("remove"), ref<java::lang::Object>>(p1); }
inline void Map::putAll(ref<java::util::Map> p1) { return call_method<SCAPIX_META_STRING("putAll"), void>(p1); }
inline void Map::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline ref<java::util::Set> Map::keySet() { return call_method<SCAPIX_META_STRING("keySet"), ref<java::util::Set>>(); }
inline ref<java::util::Collection> Map::values() { return call_method<SCAPIX_META_STRING("values"), ref<java::util::Collection>>(); }
inline ref<java::util::Set> Map::entrySet() { return call_method<SCAPIX_META_STRING("entrySet"), ref<java::util::Set>>(); }
inline jboolean Map::equals(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(p1); }
inline jint Map::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::Object> Map::getOrDefault(ref<java::lang::Object> key, ref<java::lang::Object> defaultValue) { return call_method<SCAPIX_META_STRING("getOrDefault"), ref<java::lang::Object>>(key, defaultValue); }
inline void Map::forEach(ref<java::util::function::BiConsumer> action) { return call_method<SCAPIX_META_STRING("forEach"), void>(action); }
inline void Map::replaceAll(ref<java::util::function::BiFunction> function) { return call_method<SCAPIX_META_STRING("replaceAll"), void>(function); }
inline ref<java::lang::Object> Map::putIfAbsent(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("putIfAbsent"), ref<java::lang::Object>>(key, value); }
inline jboolean Map::remove(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("remove"), jboolean>(key, value); }
inline jboolean Map::replace(ref<java::lang::Object> key, ref<java::lang::Object> oldValue, ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("replace"), jboolean>(key, oldValue, newValue); }
inline ref<java::lang::Object> Map::replace(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("replace"), ref<java::lang::Object>>(key, value); }
inline ref<java::lang::Object> Map::computeIfAbsent(ref<java::lang::Object> key, ref<java::util::function::Function> mappingFunction) { return call_method<SCAPIX_META_STRING("computeIfAbsent"), ref<java::lang::Object>>(key, mappingFunction); }
inline ref<java::lang::Object> Map::computeIfPresent(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("computeIfPresent"), ref<java::lang::Object>>(key, remappingFunction); }
inline ref<java::lang::Object> Map::compute(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("compute"), ref<java::lang::Object>>(key, remappingFunction); }
inline ref<java::lang::Object> Map::merge(ref<java::lang::Object> key, ref<java::lang::Object> value, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("merge"), ref<java::lang::Object>>(key, value, remappingFunction); }
inline ref<java::util::Map> Map::of() { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::Map>>(); }
inline ref<java::util::Map> Map::of(ref<java::lang::Object> k1, ref<java::lang::Object> v1) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::Map>>(k1, v1); }
inline ref<java::util::Map> Map::of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::Map>>(k1, v1, k2, v2); }
inline ref<java::util::Map> Map::of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2, ref<java::lang::Object> k3, ref<java::lang::Object> v3) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::Map>>(k1, v1, k2, v2, k3, v3); }
inline ref<java::util::Map> Map::of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2, ref<java::lang::Object> k3, ref<java::lang::Object> v3, ref<java::lang::Object> k4, ref<java::lang::Object> v4) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::Map>>(k1, v1, k2, v2, k3, v3, k4, v4); }
inline ref<java::util::Map> Map::of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2, ref<java::lang::Object> k3, ref<java::lang::Object> v3, ref<java::lang::Object> k4, ref<java::lang::Object> v4, ref<java::lang::Object> k5, ref<java::lang::Object> v5) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::Map>>(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5); }
inline ref<java::util::Map> Map::of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2, ref<java::lang::Object> k3, ref<java::lang::Object> v3, ref<java::lang::Object> k4, ref<java::lang::Object> v4, ref<java::lang::Object> k5, ref<java::lang::Object> v5, ref<java::lang::Object> k6, ref<java::lang::Object> v6) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::Map>>(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5, k6, v6); }
inline ref<java::util::Map> Map::of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2, ref<java::lang::Object> k3, ref<java::lang::Object> v3, ref<java::lang::Object> k4, ref<java::lang::Object> v4, ref<java::lang::Object> k5, ref<java::lang::Object> v5, ref<java::lang::Object> k6, ref<java::lang::Object> v6, ref<java::lang::Object> k7, ref<java::lang::Object> v7) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::Map>>(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5, k6, v6, k7, v7); }
inline ref<java::util::Map> Map::of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2, ref<java::lang::Object> k3, ref<java::lang::Object> v3, ref<java::lang::Object> k4, ref<java::lang::Object> v4, ref<java::lang::Object> k5, ref<java::lang::Object> v5, ref<java::lang::Object> k6, ref<java::lang::Object> v6, ref<java::lang::Object> k7, ref<java::lang::Object> v7, ref<java::lang::Object> k8, ref<java::lang::Object> v8) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::Map>>(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5, k6, v6, k7, v7, k8, v8); }
inline ref<java::util::Map> Map::of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2, ref<java::lang::Object> k3, ref<java::lang::Object> v3, ref<java::lang::Object> k4, ref<java::lang::Object> v4, ref<java::lang::Object> k5, ref<java::lang::Object> v5, ref<java::lang::Object> k6, ref<java::lang::Object> v6, ref<java::lang::Object> k7, ref<java::lang::Object> v7, ref<java::lang::Object> k8, ref<java::lang::Object> v8, ref<java::lang::Object> k9, ref<java::lang::Object> v9) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::Map>>(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5, k6, v6, k7, v7, k8, v8, k9, v9); }
inline ref<java::util::Map> Map::of(ref<java::lang::Object> k1, ref<java::lang::Object> v1, ref<java::lang::Object> k2, ref<java::lang::Object> v2, ref<java::lang::Object> k3, ref<java::lang::Object> v3, ref<java::lang::Object> k4, ref<java::lang::Object> v4, ref<java::lang::Object> k5, ref<java::lang::Object> v5, ref<java::lang::Object> k6, ref<java::lang::Object> v6, ref<java::lang::Object> k7, ref<java::lang::Object> v7, ref<java::lang::Object> k8, ref<java::lang::Object> v8, ref<java::lang::Object> k9, ref<java::lang::Object> v9, ref<java::lang::Object> k10, ref<java::lang::Object> v10) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::Map>>(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5, k6, v6, k7, v7, k8, v8, k9, v9, k10, v10); }
inline ref<java::util::Map> Map::ofEntries(ref<link::java::array<java::util::Map_Entry>> entries) { return call_static_method<SCAPIX_META_STRING("ofEntries"), ref<java::util::Map>>(entries); }
inline ref<java::util::Map_Entry> Map::entry(ref<java::lang::Object> k, ref<java::lang::Object> v) { return call_static_method<SCAPIX_META_STRING("entry"), ref<java::util::Map_Entry>>(k, v); }
inline ref<java::util::Map> Map::copyOf(ref<java::util::Map> map) { return call_static_method<SCAPIX_META_STRING("copyOf"), ref<java::util::Map>>(map); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_MAP_H
