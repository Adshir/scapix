// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_OPTIONALLONG_H
#define SCAPIX_JAVA_UTIL_OPTIONALLONG_H

namespace scapix::java_api {

namespace java::lang { class Runnable; }
namespace java::lang { class String; }
namespace java::util::function { class LongConsumer; }
namespace java::util::function { class LongSupplier; }
namespace java::util::function { class Supplier; }
namespace java::util::stream { class LongStream; }

namespace java::util {

class OptionalLong : public object_base<SCAPIX_META_STRING("java/util/OptionalLong"),
	java::lang::Object>
{
public:

	static ref<java::util::OptionalLong> empty();
	static ref<java::util::OptionalLong> of(jlong value);
	jlong getAsLong();
	jboolean isPresent();
	jboolean isEmpty();
	void ifPresent(ref<java::util::function::LongConsumer> action);
	void ifPresentOrElse(ref<java::util::function::LongConsumer> action, ref<java::lang::Runnable> emptyAction);
	ref<java::util::stream::LongStream> stream();
	jlong orElse(jlong other);
	jlong orElseGet(ref<java::util::function::LongSupplier> supplier);
	jlong orElseThrow();
	jlong orElseThrow(ref<java::util::function::Supplier> exceptionSupplier);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	OptionalLong(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/LongConsumer.h>
#include <scapix/java_api/java/util/function/LongSupplier.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#include <scapix/java_api/java/util/stream/LongStream.h>

namespace scapix::java_api {
namespace java::util {

inline ref<java::util::OptionalLong> OptionalLong::empty() { return call_static_method<SCAPIX_META_STRING("empty"), ref<java::util::OptionalLong>>(); }
inline ref<java::util::OptionalLong> OptionalLong::of(jlong value) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::OptionalLong>>(value); }
inline jlong OptionalLong::getAsLong() { return call_method<SCAPIX_META_STRING("getAsLong"), jlong>(); }
inline jboolean OptionalLong::isPresent() { return call_method<SCAPIX_META_STRING("isPresent"), jboolean>(); }
inline jboolean OptionalLong::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline void OptionalLong::ifPresent(ref<java::util::function::LongConsumer> action) { return call_method<SCAPIX_META_STRING("ifPresent"), void>(action); }
inline void OptionalLong::ifPresentOrElse(ref<java::util::function::LongConsumer> action, ref<java::lang::Runnable> emptyAction) { return call_method<SCAPIX_META_STRING("ifPresentOrElse"), void>(action, emptyAction); }
inline ref<java::util::stream::LongStream> OptionalLong::stream() { return call_method<SCAPIX_META_STRING("stream"), ref<java::util::stream::LongStream>>(); }
inline jlong OptionalLong::orElse(jlong other) { return call_method<SCAPIX_META_STRING("orElse"), jlong>(other); }
inline jlong OptionalLong::orElseGet(ref<java::util::function::LongSupplier> supplier) { return call_method<SCAPIX_META_STRING("orElseGet"), jlong>(supplier); }
inline jlong OptionalLong::orElseThrow() { return call_method<SCAPIX_META_STRING("orElseThrow"), jlong>(); }
inline jlong OptionalLong::orElseThrow(ref<java::util::function::Supplier> exceptionSupplier) { return call_method<SCAPIX_META_STRING("orElseThrow"), jlong>(exceptionSupplier); }
inline jboolean OptionalLong::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint OptionalLong::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> OptionalLong::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_OPTIONALLONG_H
