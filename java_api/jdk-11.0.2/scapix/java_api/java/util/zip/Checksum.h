// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_ZIP_CHECKSUM_H
#define SCAPIX_JAVA_UTIL_ZIP_CHECKSUM_H

namespace scapix::java_api {

namespace java::nio { class ByteBuffer; }

namespace java::util::zip {

class Checksum : public object_base<SCAPIX_META_STRING("java/util/zip/Checksum"),
	java::lang::Object>
{
public:

	void update(jint p1);
	void update(ref<link::java::array<jbyte>> b);
	void update(ref<link::java::array<jbyte>> p1, jint p2, jint p3);
	void update(ref<java::nio::ByteBuffer> buffer);
	jlong getValue();
	void reset();

protected:

	Checksum(handle_type h) : base_(h) {}

};

} // namespace java::util::zip
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/ByteBuffer.h>

namespace scapix::java_api {
namespace java::util::zip {

inline void Checksum::update(jint p1) { return call_method<SCAPIX_META_STRING("update"), void>(p1); }
inline void Checksum::update(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("update"), void>(b); }
inline void Checksum::update(ref<link::java::array<jbyte>> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("update"), void>(p1, p2, p3); }
inline void Checksum::update(ref<java::nio::ByteBuffer> buffer) { return call_method<SCAPIX_META_STRING("update"), void>(buffer); }
inline jlong Checksum::getValue() { return call_method<SCAPIX_META_STRING("getValue"), jlong>(); }
inline void Checksum::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }

} // namespace java::util::zip
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_ZIP_CHECKSUM_H
