// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/zip/InflaterInputStream.h>
#include <scapix/java_api/java/util/zip/ZipConstants.h>

#ifndef SCAPIX_JAVA_UTIL_ZIP_ZIPINPUTSTREAM_H
#define SCAPIX_JAVA_UTIL_ZIP_ZIPINPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::nio::charset { class Charset; }
namespace java::util::zip { class ZipEntry; }

namespace java::util::zip {

class ZipInputStream : public object_base<SCAPIX_META_STRING("java/util/zip/ZipInputStream"),
	java::util::zip::InflaterInputStream,
	java::util::zip::ZipConstants>
{
public:

	static ref<ZipInputStream> new_object(ref<java::io::InputStream> in);
	static ref<ZipInputStream> new_object(ref<java::io::InputStream> in, ref<java::nio::charset::Charset> charset);
	ref<java::util::zip::ZipEntry> getNextEntry();
	void closeEntry();
	jint available();
	jint read(ref<link::java::array<jbyte>> b, jint off, jint len);
	jlong skip(jlong n);
	void close();

protected:

	ZipInputStream(handle_type h) : base_(h) {}

};

} // namespace java::util::zip
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#include <scapix/java_api/java/util/zip/ZipEntry.h>

namespace scapix::java_api {
namespace java::util::zip {

inline ref<ZipInputStream> ZipInputStream::new_object(ref<java::io::InputStream> in) { return base_::new_object(in); }
inline ref<ZipInputStream> ZipInputStream::new_object(ref<java::io::InputStream> in, ref<java::nio::charset::Charset> charset) { return base_::new_object(in, charset); }
inline ref<java::util::zip::ZipEntry> ZipInputStream::getNextEntry() { return call_method<SCAPIX_META_STRING("getNextEntry"), ref<java::util::zip::ZipEntry>>(); }
inline void ZipInputStream::closeEntry() { return call_method<SCAPIX_META_STRING("closeEntry"), void>(); }
inline jint ZipInputStream::available() { return call_method<SCAPIX_META_STRING("available"), jint>(); }
inline jint ZipInputStream::read(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(b, off, len); }
inline jlong ZipInputStream::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), jlong>(n); }
inline void ZipInputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::util::zip
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_ZIP_ZIPINPUTSTREAM_H
