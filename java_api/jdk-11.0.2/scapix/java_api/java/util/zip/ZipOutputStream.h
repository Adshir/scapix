// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/zip/DeflaterOutputStream.h>
#include <scapix/java_api/java/util/zip/ZipConstants.h>

#ifndef SCAPIX_JAVA_UTIL_ZIP_ZIPOUTPUTSTREAM_H
#define SCAPIX_JAVA_UTIL_ZIP_ZIPOUTPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class OutputStream; }
namespace java::lang { class String; }
namespace java::nio::charset { class Charset; }
namespace java::util::zip { class ZipEntry; }

namespace java::util::zip {

class ZipOutputStream : public object_base<SCAPIX_META_STRING("java/util/zip/ZipOutputStream"),
	java::util::zip::DeflaterOutputStream,
	java::util::zip::ZipConstants>
{
public:

	static jint STORED_();
	static jint DEFLATED_();

	static ref<ZipOutputStream> new_object(ref<java::io::OutputStream> out);
	static ref<ZipOutputStream> new_object(ref<java::io::OutputStream> out, ref<java::nio::charset::Charset> charset);
	void setComment(ref<java::lang::String> comment);
	void setMethod(jint method);
	void setLevel(jint level);
	void putNextEntry(ref<java::util::zip::ZipEntry> e);
	void closeEntry();
	void write(ref<link::java::array<jbyte>> b, jint off, jint len);
	void finish();
	void close();

protected:

	ZipOutputStream(handle_type h) : base_(h) {}

};

} // namespace java::util::zip
} // namespace scapix::java_api

#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#include <scapix/java_api/java/util/zip/ZipEntry.h>

namespace scapix::java_api {
namespace java::util::zip {

inline jint ZipOutputStream::STORED_() { return get_static_field<SCAPIX_META_STRING("STORED"), jint>(); }
inline jint ZipOutputStream::DEFLATED_() { return get_static_field<SCAPIX_META_STRING("DEFLATED"), jint>(); }
inline ref<ZipOutputStream> ZipOutputStream::new_object(ref<java::io::OutputStream> out) { return base_::new_object(out); }
inline ref<ZipOutputStream> ZipOutputStream::new_object(ref<java::io::OutputStream> out, ref<java::nio::charset::Charset> charset) { return base_::new_object(out, charset); }
inline void ZipOutputStream::setComment(ref<java::lang::String> comment) { return call_method<SCAPIX_META_STRING("setComment"), void>(comment); }
inline void ZipOutputStream::setMethod(jint method) { return call_method<SCAPIX_META_STRING("setMethod"), void>(method); }
inline void ZipOutputStream::setLevel(jint level) { return call_method<SCAPIX_META_STRING("setLevel"), void>(level); }
inline void ZipOutputStream::putNextEntry(ref<java::util::zip::ZipEntry> e) { return call_method<SCAPIX_META_STRING("putNextEntry"), void>(e); }
inline void ZipOutputStream::closeEntry() { return call_method<SCAPIX_META_STRING("closeEntry"), void>(); }
inline void ZipOutputStream::write(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(b, off, len); }
inline void ZipOutputStream::finish() { return call_method<SCAPIX_META_STRING("finish"), void>(); }
inline void ZipOutputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::util::zip
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_ZIP_ZIPOUTPUTSTREAM_H
