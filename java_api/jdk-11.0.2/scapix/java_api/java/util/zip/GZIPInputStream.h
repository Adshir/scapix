// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/zip/InflaterInputStream.h>

#ifndef SCAPIX_JAVA_UTIL_ZIP_GZIPINPUTSTREAM_H
#define SCAPIX_JAVA_UTIL_ZIP_GZIPINPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class InputStream; }

namespace java::util::zip {

class GZIPInputStream : public object_base<SCAPIX_META_STRING("java/util/zip/GZIPInputStream"),
	java::util::zip::InflaterInputStream>
{
public:

	static jint GZIP_MAGIC_();

	static ref<GZIPInputStream> new_object(ref<java::io::InputStream> in, jint size);
	static ref<GZIPInputStream> new_object(ref<java::io::InputStream> in);
	jint read(ref<link::java::array<jbyte>> buf, jint off, jint len);
	void close();

protected:

	GZIPInputStream(handle_type h) : base_(h) {}

};

} // namespace java::util::zip
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>

namespace scapix::java_api {
namespace java::util::zip {

inline jint GZIPInputStream::GZIP_MAGIC_() { return get_static_field<SCAPIX_META_STRING("GZIP_MAGIC"), jint>(); }
inline ref<GZIPInputStream> GZIPInputStream::new_object(ref<java::io::InputStream> in, jint size) { return base_::new_object(in, size); }
inline ref<GZIPInputStream> GZIPInputStream::new_object(ref<java::io::InputStream> in) { return base_::new_object(in); }
inline jint GZIPInputStream::read(ref<link::java::array<jbyte>> buf, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(buf, off, len); }
inline void GZIPInputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::util::zip
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_ZIP_GZIPINPUTSTREAM_H
