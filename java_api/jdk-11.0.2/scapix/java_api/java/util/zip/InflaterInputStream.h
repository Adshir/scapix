// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/FilterInputStream.h>

#ifndef SCAPIX_JAVA_UTIL_ZIP_INFLATERINPUTSTREAM_H
#define SCAPIX_JAVA_UTIL_ZIP_INFLATERINPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::util::zip { class Inflater; }

namespace java::util::zip {

class InflaterInputStream : public object_base<SCAPIX_META_STRING("java/util/zip/InflaterInputStream"),
	java::io::FilterInputStream>
{
public:

	static ref<InflaterInputStream> new_object(ref<java::io::InputStream> in, ref<java::util::zip::Inflater> inf, jint size);
	static ref<InflaterInputStream> new_object(ref<java::io::InputStream> in, ref<java::util::zip::Inflater> inf);
	static ref<InflaterInputStream> new_object(ref<java::io::InputStream> in);
	jint read();
	jint read(ref<link::java::array<jbyte>> b, jint off, jint len);
	jint available();
	jlong skip(jlong n);
	void close();
	jboolean markSupported();
	void mark(jint readlimit);
	void reset();

protected:

	InflaterInputStream(handle_type h) : base_(h) {}

};

} // namespace java::util::zip
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/util/zip/Inflater.h>

namespace scapix::java_api {
namespace java::util::zip {

inline ref<InflaterInputStream> InflaterInputStream::new_object(ref<java::io::InputStream> in, ref<java::util::zip::Inflater> inf, jint size) { return base_::new_object(in, inf, size); }
inline ref<InflaterInputStream> InflaterInputStream::new_object(ref<java::io::InputStream> in, ref<java::util::zip::Inflater> inf) { return base_::new_object(in, inf); }
inline ref<InflaterInputStream> InflaterInputStream::new_object(ref<java::io::InputStream> in) { return base_::new_object(in); }
inline jint InflaterInputStream::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint InflaterInputStream::read(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(b, off, len); }
inline jint InflaterInputStream::available() { return call_method<SCAPIX_META_STRING("available"), jint>(); }
inline jlong InflaterInputStream::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), jlong>(n); }
inline void InflaterInputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jboolean InflaterInputStream::markSupported() { return call_method<SCAPIX_META_STRING("markSupported"), jboolean>(); }
inline void InflaterInputStream::mark(jint readlimit) { return call_method<SCAPIX_META_STRING("mark"), void>(readlimit); }
inline void InflaterInputStream::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }

} // namespace java::util::zip
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_ZIP_INFLATERINPUTSTREAM_H
