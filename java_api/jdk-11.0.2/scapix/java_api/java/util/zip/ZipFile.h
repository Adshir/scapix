// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/zip/ZipConstants.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_UTIL_ZIP_ZIPFILE_H
#define SCAPIX_JAVA_UTIL_ZIP_ZIPFILE_H

namespace scapix::java_api {

namespace java::io { class File; }
namespace java::io { class InputStream; }
namespace java::lang { class String; }
namespace java::nio::charset { class Charset; }
namespace java::util { class Enumeration; }
namespace java::util::stream { class Stream; }
namespace java::util::zip { class ZipEntry; }

namespace java::util::zip {

class ZipFile : public object_base<SCAPIX_META_STRING("java/util/zip/ZipFile"),
	java::lang::Object,
	java::util::zip::ZipConstants,
	java::io::Closeable>
{
public:

	static jint OPEN_READ_();
	static jint OPEN_DELETE_();

	static ref<ZipFile> new_object(ref<java::lang::String> name);
	static ref<ZipFile> new_object(ref<java::io::File> file, jint mode);
	static ref<ZipFile> new_object(ref<java::io::File> file);
	static ref<ZipFile> new_object(ref<java::io::File> file, jint mode, ref<java::nio::charset::Charset> charset);
	static ref<ZipFile> new_object(ref<java::lang::String> name, ref<java::nio::charset::Charset> charset);
	static ref<ZipFile> new_object(ref<java::io::File> file, ref<java::nio::charset::Charset> charset);
	ref<java::lang::String> getComment();
	ref<java::util::zip::ZipEntry> getEntry(ref<java::lang::String> name);
	ref<java::io::InputStream> getInputStream(ref<java::util::zip::ZipEntry> entry);
	ref<java::lang::String> getName();
	ref<java::util::Enumeration> entries();
	ref<java::util::stream::Stream> stream();
	jint size();
	void close();

protected:

	ZipFile(handle_type h) : base_(h) {}

};

} // namespace java::util::zip
} // namespace scapix::java_api

#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/stream/Stream.h>
#include <scapix/java_api/java/util/zip/ZipEntry.h>

namespace scapix::java_api {
namespace java::util::zip {

inline jint ZipFile::OPEN_READ_() { return get_static_field<SCAPIX_META_STRING("OPEN_READ"), jint>(); }
inline jint ZipFile::OPEN_DELETE_() { return get_static_field<SCAPIX_META_STRING("OPEN_DELETE"), jint>(); }
inline ref<ZipFile> ZipFile::new_object(ref<java::lang::String> name) { return base_::new_object(name); }
inline ref<ZipFile> ZipFile::new_object(ref<java::io::File> file, jint mode) { return base_::new_object(file, mode); }
inline ref<ZipFile> ZipFile::new_object(ref<java::io::File> file) { return base_::new_object(file); }
inline ref<ZipFile> ZipFile::new_object(ref<java::io::File> file, jint mode, ref<java::nio::charset::Charset> charset) { return base_::new_object(file, mode, charset); }
inline ref<ZipFile> ZipFile::new_object(ref<java::lang::String> name, ref<java::nio::charset::Charset> charset) { return base_::new_object(name, charset); }
inline ref<ZipFile> ZipFile::new_object(ref<java::io::File> file, ref<java::nio::charset::Charset> charset) { return base_::new_object(file, charset); }
inline ref<java::lang::String> ZipFile::getComment() { return call_method<SCAPIX_META_STRING("getComment"), ref<java::lang::String>>(); }
inline ref<java::util::zip::ZipEntry> ZipFile::getEntry(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getEntry"), ref<java::util::zip::ZipEntry>>(name); }
inline ref<java::io::InputStream> ZipFile::getInputStream(ref<java::util::zip::ZipEntry> entry) { return call_method<SCAPIX_META_STRING("getInputStream"), ref<java::io::InputStream>>(entry); }
inline ref<java::lang::String> ZipFile::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<java::util::Enumeration> ZipFile::entries() { return call_method<SCAPIX_META_STRING("entries"), ref<java::util::Enumeration>>(); }
inline ref<java::util::stream::Stream> ZipFile::stream() { return call_method<SCAPIX_META_STRING("stream"), ref<java::util::stream::Stream>>(); }
inline jint ZipFile::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline void ZipFile::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::util::zip
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_ZIP_ZIPFILE_H
