// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/FilterOutputStream.h>

#ifndef SCAPIX_JAVA_UTIL_ZIP_DEFLATEROUTPUTSTREAM_H
#define SCAPIX_JAVA_UTIL_ZIP_DEFLATEROUTPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class OutputStream; }
namespace java::util::zip { class Deflater; }

namespace java::util::zip {

class DeflaterOutputStream : public object_base<SCAPIX_META_STRING("java/util/zip/DeflaterOutputStream"),
	java::io::FilterOutputStream>
{
public:

	static ref<DeflaterOutputStream> new_object(ref<java::io::OutputStream> out, ref<java::util::zip::Deflater> def, jint size, jboolean syncFlush);
	static ref<DeflaterOutputStream> new_object(ref<java::io::OutputStream> out, ref<java::util::zip::Deflater> def, jint size);
	static ref<DeflaterOutputStream> new_object(ref<java::io::OutputStream> out, ref<java::util::zip::Deflater> def, jboolean syncFlush);
	static ref<DeflaterOutputStream> new_object(ref<java::io::OutputStream> out, ref<java::util::zip::Deflater> def);
	static ref<DeflaterOutputStream> new_object(ref<java::io::OutputStream> out, jboolean syncFlush);
	static ref<DeflaterOutputStream> new_object(ref<java::io::OutputStream> out);
	void write(jint b);
	void write(ref<link::java::array<jbyte>> b, jint off, jint len);
	void finish();
	void close();
	void flush();

protected:

	DeflaterOutputStream(handle_type h) : base_(h) {}

};

} // namespace java::util::zip
} // namespace scapix::java_api

#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/util/zip/Deflater.h>

namespace scapix::java_api {
namespace java::util::zip {

inline ref<DeflaterOutputStream> DeflaterOutputStream::new_object(ref<java::io::OutputStream> out, ref<java::util::zip::Deflater> def, jint size, jboolean syncFlush) { return base_::new_object(out, def, size, syncFlush); }
inline ref<DeflaterOutputStream> DeflaterOutputStream::new_object(ref<java::io::OutputStream> out, ref<java::util::zip::Deflater> def, jint size) { return base_::new_object(out, def, size); }
inline ref<DeflaterOutputStream> DeflaterOutputStream::new_object(ref<java::io::OutputStream> out, ref<java::util::zip::Deflater> def, jboolean syncFlush) { return base_::new_object(out, def, syncFlush); }
inline ref<DeflaterOutputStream> DeflaterOutputStream::new_object(ref<java::io::OutputStream> out, ref<java::util::zip::Deflater> def) { return base_::new_object(out, def); }
inline ref<DeflaterOutputStream> DeflaterOutputStream::new_object(ref<java::io::OutputStream> out, jboolean syncFlush) { return base_::new_object(out, syncFlush); }
inline ref<DeflaterOutputStream> DeflaterOutputStream::new_object(ref<java::io::OutputStream> out) { return base_::new_object(out); }
inline void DeflaterOutputStream::write(jint b) { return call_method<SCAPIX_META_STRING("write"), void>(b); }
inline void DeflaterOutputStream::write(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(b, off, len); }
inline void DeflaterOutputStream::finish() { return call_method<SCAPIX_META_STRING("finish"), void>(); }
inline void DeflaterOutputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void DeflaterOutputStream::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }

} // namespace java::util::zip
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_ZIP_DEFLATEROUTPUTSTREAM_H
