// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_ZIP_ZIPUTILS_H
#define SCAPIX_JAVA_UTIL_ZIP_ZIPUTILS_H

namespace scapix::java_api {

namespace java::nio::file::attribute { class FileTime; }

namespace java::util::zip {

// private
class ZipUtils : public object_base<SCAPIX_META_STRING("java/util/zip/ZipUtils"),
	java::lang::Object>
{
public:

	static jlong WINDOWS_TIME_NOT_AVAILABLE_();
	static jlong UPPER_UNIXTIME_BOUND_();

	static ref<java::nio::file::attribute::FileTime> winTimeToFileTime(jlong wtime);
	static jlong fileTimeToWinTime(ref<java::nio::file::attribute::FileTime> ftime);
	static ref<java::nio::file::attribute::FileTime> unixTimeToFileTime(jlong utime);
	static jlong fileTimeToUnixTime(ref<java::nio::file::attribute::FileTime> ftime);
	static jlong dosToJavaTime(jlong dtime);
	static jlong extendedDosToJavaTime(jlong xdostime);
	static jlong javaToExtendedDosTime(jlong time);
	static jint get16(ref<link::java::array<jbyte>> b, jint off);
	static jlong get32(ref<link::java::array<jbyte>> b, jint off);
	static jlong get64(ref<link::java::array<jbyte>> b, jint off);
	static jint get32S(ref<link::java::array<jbyte>> b, jint off);

protected:

	ZipUtils(handle_type h) : base_(h) {}

};

} // namespace java::util::zip
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/file/attribute/FileTime.h>

namespace scapix::java_api {
namespace java::util::zip {

inline jlong ZipUtils::WINDOWS_TIME_NOT_AVAILABLE_() { return get_static_field<SCAPIX_META_STRING("WINDOWS_TIME_NOT_AVAILABLE"), jlong>(); }
inline jlong ZipUtils::UPPER_UNIXTIME_BOUND_() { return get_static_field<SCAPIX_META_STRING("UPPER_UNIXTIME_BOUND"), jlong>(); }
inline ref<java::nio::file::attribute::FileTime> ZipUtils::winTimeToFileTime(jlong wtime) { return call_static_method<SCAPIX_META_STRING("winTimeToFileTime"), ref<java::nio::file::attribute::FileTime>>(wtime); }
inline jlong ZipUtils::fileTimeToWinTime(ref<java::nio::file::attribute::FileTime> ftime) { return call_static_method<SCAPIX_META_STRING("fileTimeToWinTime"), jlong>(ftime); }
inline ref<java::nio::file::attribute::FileTime> ZipUtils::unixTimeToFileTime(jlong utime) { return call_static_method<SCAPIX_META_STRING("unixTimeToFileTime"), ref<java::nio::file::attribute::FileTime>>(utime); }
inline jlong ZipUtils::fileTimeToUnixTime(ref<java::nio::file::attribute::FileTime> ftime) { return call_static_method<SCAPIX_META_STRING("fileTimeToUnixTime"), jlong>(ftime); }
inline jlong ZipUtils::dosToJavaTime(jlong dtime) { return call_static_method<SCAPIX_META_STRING("dosToJavaTime"), jlong>(dtime); }
inline jlong ZipUtils::extendedDosToJavaTime(jlong xdostime) { return call_static_method<SCAPIX_META_STRING("extendedDosToJavaTime"), jlong>(xdostime); }
inline jlong ZipUtils::javaToExtendedDosTime(jlong time) { return call_static_method<SCAPIX_META_STRING("javaToExtendedDosTime"), jlong>(time); }
inline jint ZipUtils::get16(ref<link::java::array<jbyte>> b, jint off) { return call_static_method<SCAPIX_META_STRING("get16"), jint>(b, off); }
inline jlong ZipUtils::get32(ref<link::java::array<jbyte>> b, jint off) { return call_static_method<SCAPIX_META_STRING("get32"), jlong>(b, off); }
inline jlong ZipUtils::get64(ref<link::java::array<jbyte>> b, jint off) { return call_static_method<SCAPIX_META_STRING("get64"), jlong>(b, off); }
inline jint ZipUtils::get32S(ref<link::java::array<jbyte>> b, jint off) { return call_static_method<SCAPIX_META_STRING("get32S"), jint>(b, off); }

} // namespace java::util::zip
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_ZIP_ZIPUTILS_H
