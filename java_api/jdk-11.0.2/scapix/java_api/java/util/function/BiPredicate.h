// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_FUNCTION_BIPREDICATE_H
#define SCAPIX_JAVA_UTIL_FUNCTION_BIPREDICATE_H

namespace scapix::java_api {


namespace java::util::function {

class BiPredicate : public object_base<SCAPIX_META_STRING("java/util/function/BiPredicate"),
	java::lang::Object>
{
public:

	jboolean test(ref<java::lang::Object> p1, ref<java::lang::Object> p2);
	ref<java::util::function::BiPredicate> and_(ref<java::util::function::BiPredicate> other);
	ref<java::util::function::BiPredicate> negate();
	ref<java::util::function::BiPredicate> or_(ref<java::util::function::BiPredicate> other);

protected:

	BiPredicate(handle_type h) : base_(h) {}

};

} // namespace java::util::function
} // namespace scapix::java_api


namespace scapix::java_api {
namespace java::util::function {

inline jboolean BiPredicate::test(ref<java::lang::Object> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("test"), jboolean>(p1, p2); }
inline ref<java::util::function::BiPredicate> BiPredicate::and_(ref<java::util::function::BiPredicate> other) { return call_method<SCAPIX_META_STRING("and"), ref<java::util::function::BiPredicate>>(other); }
inline ref<java::util::function::BiPredicate> BiPredicate::negate() { return call_method<SCAPIX_META_STRING("negate"), ref<java::util::function::BiPredicate>>(); }
inline ref<java::util::function::BiPredicate> BiPredicate::or_(ref<java::util::function::BiPredicate> other) { return call_method<SCAPIX_META_STRING("or"), ref<java::util::function::BiPredicate>>(other); }

} // namespace java::util::function
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_FUNCTION_BIPREDICATE_H
