// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_FUNCTION_DOUBLEUNARYOPERATOR_H
#define SCAPIX_JAVA_UTIL_FUNCTION_DOUBLEUNARYOPERATOR_H

namespace scapix::java_api {


namespace java::util::function {

class DoubleUnaryOperator : public object_base<SCAPIX_META_STRING("java/util/function/DoubleUnaryOperator"),
	java::lang::Object>
{
public:

	jdouble applyAsDouble(jdouble p1);
	ref<java::util::function::DoubleUnaryOperator> compose(ref<java::util::function::DoubleUnaryOperator> before);
	ref<java::util::function::DoubleUnaryOperator> andThen(ref<java::util::function::DoubleUnaryOperator> after);
	static ref<java::util::function::DoubleUnaryOperator> identity();

protected:

	DoubleUnaryOperator(handle_type h) : base_(h) {}

};

} // namespace java::util::function
} // namespace scapix::java_api


namespace scapix::java_api {
namespace java::util::function {

inline jdouble DoubleUnaryOperator::applyAsDouble(jdouble p1) { return call_method<SCAPIX_META_STRING("applyAsDouble"), jdouble>(p1); }
inline ref<java::util::function::DoubleUnaryOperator> DoubleUnaryOperator::compose(ref<java::util::function::DoubleUnaryOperator> before) { return call_method<SCAPIX_META_STRING("compose"), ref<java::util::function::DoubleUnaryOperator>>(before); }
inline ref<java::util::function::DoubleUnaryOperator> DoubleUnaryOperator::andThen(ref<java::util::function::DoubleUnaryOperator> after) { return call_method<SCAPIX_META_STRING("andThen"), ref<java::util::function::DoubleUnaryOperator>>(after); }
inline ref<java::util::function::DoubleUnaryOperator> DoubleUnaryOperator::identity() { return call_static_method<SCAPIX_META_STRING("identity"), ref<java::util::function::DoubleUnaryOperator>>(); }

} // namespace java::util::function
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_FUNCTION_DOUBLEUNARYOPERATOR_H
