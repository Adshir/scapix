// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_FUNCTION_BIFUNCTION_H
#define SCAPIX_JAVA_UTIL_FUNCTION_BIFUNCTION_H

namespace scapix::java_api {

namespace java::util::function { class Function; }

namespace java::util::function {

class BiFunction : public object_base<SCAPIX_META_STRING("java/util/function/BiFunction"),
	java::lang::Object>
{
public:

	ref<java::lang::Object> apply(ref<java::lang::Object> p1, ref<java::lang::Object> p2);
	ref<java::util::function::BiFunction> andThen(ref<java::util::function::Function> after);

protected:

	BiFunction(handle_type h) : base_(h) {}

};

} // namespace java::util::function
} // namespace scapix::java_api

#include <scapix/java_api/java/util/function/Function.h>

namespace scapix::java_api {
namespace java::util::function {

inline ref<java::lang::Object> BiFunction::apply(ref<java::lang::Object> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("apply"), ref<java::lang::Object>>(p1, p2); }
inline ref<java::util::function::BiFunction> BiFunction::andThen(ref<java::util::function::Function> after) { return call_method<SCAPIX_META_STRING("andThen"), ref<java::util::function::BiFunction>>(after); }

} // namespace java::util::function
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_FUNCTION_BIFUNCTION_H
