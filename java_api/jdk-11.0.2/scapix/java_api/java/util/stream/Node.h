// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_STREAM_NODE_H
#define SCAPIX_JAVA_UTIL_STREAM_NODE_H

namespace scapix::java_api {

namespace java::util { class Spliterator; }
namespace java::util::function { class Consumer; }
namespace java::util::function { class IntFunction; }
namespace java::util::stream { class StreamShape; }
namespace java::util::stream { class Node_OfDouble; }
namespace java::util::stream { class Node_OfLong; }
namespace java::util::stream { class Node_OfInt; }
namespace java::util::stream { class Node_OfPrimitive; }
namespace java::util::stream { class Node_Builder; }

namespace java::util::stream {

// private
class Node : public object_base<SCAPIX_META_STRING("java/util/stream/Node"),
	java::lang::Object>
{
public:

	using OfDouble = Node_OfDouble;
	using OfLong = Node_OfLong;
	using OfInt = Node_OfInt;
	using OfPrimitive = Node_OfPrimitive;
	using Builder = Node_Builder;

	ref<java::util::Spliterator> spliterator();
	void forEach(ref<java::util::function::Consumer> p1);
	jint getChildCount();
	ref<java::util::stream::Node> getChild(jint i);
	ref<java::util::stream::Node> truncate(jlong from, jlong p2, ref<java::util::function::IntFunction> to);
	ref<link::java::array<java::lang::Object>> asArray(ref<java::util::function::IntFunction> p1);
	void copyInto(ref<link::java::array<java::lang::Object>> p1, jint p2);
	ref<java::util::stream::StreamShape> getShape();
	jlong count();

protected:

	Node(handle_type h) : base_(h) {}

};

} // namespace java::util::stream
} // namespace scapix::java_api

#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/java/util/function/IntFunction.h>
#include <scapix/java_api/java/util/stream/StreamShape.h>

namespace scapix::java_api {
namespace java::util::stream {

inline ref<java::util::Spliterator> Node::spliterator() { return call_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator>>(); }
inline void Node::forEach(ref<java::util::function::Consumer> p1) { return call_method<SCAPIX_META_STRING("forEach"), void>(p1); }
inline jint Node::getChildCount() { return call_method<SCAPIX_META_STRING("getChildCount"), jint>(); }
inline ref<java::util::stream::Node> Node::getChild(jint i) { return call_method<SCAPIX_META_STRING("getChild"), ref<java::util::stream::Node>>(i); }
inline ref<java::util::stream::Node> Node::truncate(jlong from, jlong p2, ref<java::util::function::IntFunction> to) { return call_method<SCAPIX_META_STRING("truncate"), ref<java::util::stream::Node>>(from, p2, to); }
inline ref<link::java::array<java::lang::Object>> Node::asArray(ref<java::util::function::IntFunction> p1) { return call_method<SCAPIX_META_STRING("asArray"), ref<link::java::array<java::lang::Object>>>(p1); }
inline void Node::copyInto(ref<link::java::array<java::lang::Object>> p1, jint p2) { return call_method<SCAPIX_META_STRING("copyInto"), void>(p1, p2); }
inline ref<java::util::stream::StreamShape> Node::getShape() { return call_method<SCAPIX_META_STRING("getShape"), ref<java::util::stream::StreamShape>>(); }
inline jlong Node::count() { return call_method<SCAPIX_META_STRING("count"), jlong>(); }

} // namespace java::util::stream
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STREAM_NODE_H
