// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/stream/BaseStream.h>

#ifndef SCAPIX_JAVA_UTIL_STREAM_STREAM_H
#define SCAPIX_JAVA_UTIL_STREAM_STREAM_H

namespace scapix::java_api {

namespace java::util { class Comparator; }
namespace java::util { class Optional; }
namespace java::util::function { class BiConsumer; }
namespace java::util::function { class BiFunction; }
namespace java::util::function { class BinaryOperator; }
namespace java::util::function { class Consumer; }
namespace java::util::function { class Function; }
namespace java::util::function { class IntFunction; }
namespace java::util::function { class Predicate; }
namespace java::util::function { class Supplier; }
namespace java::util::function { class ToDoubleFunction; }
namespace java::util::function { class ToIntFunction; }
namespace java::util::function { class ToLongFunction; }
namespace java::util::function { class UnaryOperator; }
namespace java::util::stream { class Collector; }
namespace java::util::stream { class DoubleStream; }
namespace java::util::stream { class IntStream; }
namespace java::util::stream { class LongStream; }
namespace java::util::stream { class Stream_Builder; }

namespace java::util::stream {

class Stream : public object_base<SCAPIX_META_STRING("java/util/stream/Stream"),
	java::lang::Object,
	java::util::stream::BaseStream>
{
public:

	using Builder = Stream_Builder;

	ref<java::util::stream::Stream> filter(ref<java::util::function::Predicate> p1);
	ref<java::util::stream::Stream> map(ref<java::util::function::Function> p1);
	ref<java::util::stream::IntStream> mapToInt(ref<java::util::function::ToIntFunction> p1);
	ref<java::util::stream::LongStream> mapToLong(ref<java::util::function::ToLongFunction> p1);
	ref<java::util::stream::DoubleStream> mapToDouble(ref<java::util::function::ToDoubleFunction> p1);
	ref<java::util::stream::Stream> flatMap(ref<java::util::function::Function> p1);
	ref<java::util::stream::IntStream> flatMapToInt(ref<java::util::function::Function> p1);
	ref<java::util::stream::LongStream> flatMapToLong(ref<java::util::function::Function> p1);
	ref<java::util::stream::DoubleStream> flatMapToDouble(ref<java::util::function::Function> p1);
	ref<java::util::stream::Stream> distinct();
	ref<java::util::stream::Stream> sorted();
	ref<java::util::stream::Stream> sorted(ref<java::util::Comparator> p1);
	ref<java::util::stream::Stream> peek(ref<java::util::function::Consumer> p1);
	ref<java::util::stream::Stream> limit(jlong p1);
	ref<java::util::stream::Stream> skip(jlong p1);
	ref<java::util::stream::Stream> takeWhile(ref<java::util::function::Predicate> predicate);
	ref<java::util::stream::Stream> dropWhile(ref<java::util::function::Predicate> predicate);
	void forEach(ref<java::util::function::Consumer> p1);
	void forEachOrdered(ref<java::util::function::Consumer> p1);
	ref<link::java::array<java::lang::Object>> toArray();
	ref<link::java::array<java::lang::Object>> toArray(ref<java::util::function::IntFunction> p1);
	ref<java::lang::Object> reduce(ref<java::lang::Object> p1, ref<java::util::function::BinaryOperator> p2);
	ref<java::util::Optional> reduce(ref<java::util::function::BinaryOperator> p1);
	ref<java::lang::Object> reduce(ref<java::lang::Object> p1, ref<java::util::function::BiFunction> p2, ref<java::util::function::BinaryOperator> p3);
	ref<java::lang::Object> collect(ref<java::util::function::Supplier> p1, ref<java::util::function::BiConsumer> p2, ref<java::util::function::BiConsumer> p3);
	ref<java::lang::Object> collect(ref<java::util::stream::Collector> p1);
	ref<java::util::Optional> min(ref<java::util::Comparator> p1);
	ref<java::util::Optional> max(ref<java::util::Comparator> p1);
	jlong count();
	jboolean anyMatch(ref<java::util::function::Predicate> p1);
	jboolean allMatch(ref<java::util::function::Predicate> p1);
	jboolean noneMatch(ref<java::util::function::Predicate> p1);
	ref<java::util::Optional> findFirst();
	ref<java::util::Optional> findAny();
	static ref<java::util::stream::Stream_Builder> builder();
	static ref<java::util::stream::Stream> empty();
	static ref<java::util::stream::Stream> of(ref<java::lang::Object> t);
	static ref<java::util::stream::Stream> ofNullable(ref<java::lang::Object> t);
	static ref<java::util::stream::Stream> of(ref<link::java::array<java::lang::Object>> values);
	static ref<java::util::stream::Stream> iterate(ref<java::lang::Object> seed, ref<java::util::function::UnaryOperator> f);
	static ref<java::util::stream::Stream> iterate(ref<java::lang::Object> seed, ref<java::util::function::Predicate> hasNext, ref<java::util::function::UnaryOperator> next);
	static ref<java::util::stream::Stream> generate(ref<java::util::function::Supplier> s);
	static ref<java::util::stream::Stream> concat(ref<java::util::stream::Stream> a, ref<java::util::stream::Stream> b);

protected:

	Stream(handle_type h) : base_(h) {}

};

} // namespace java::util::stream
} // namespace scapix::java_api

#include <scapix/java_api/java/util/Comparator.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BiFunction.h>
#include <scapix/java_api/java/util/function/BinaryOperator.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/java/util/function/Function.h>
#include <scapix/java_api/java/util/function/IntFunction.h>
#include <scapix/java_api/java/util/function/Predicate.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#include <scapix/java_api/java/util/function/ToDoubleFunction.h>
#include <scapix/java_api/java/util/function/ToIntFunction.h>
#include <scapix/java_api/java/util/function/ToLongFunction.h>
#include <scapix/java_api/java/util/function/UnaryOperator.h>
#include <scapix/java_api/java/util/stream/Collector.h>
#include <scapix/java_api/java/util/stream/DoubleStream.h>
#include <scapix/java_api/java/util/stream/IntStream.h>
#include <scapix/java_api/java/util/stream/LongStream.h>
#include <scapix/java_api/java/util/stream/Stream_Builder.h>

namespace scapix::java_api {
namespace java::util::stream {

inline ref<java::util::stream::Stream> Stream::filter(ref<java::util::function::Predicate> p1) { return call_method<SCAPIX_META_STRING("filter"), ref<java::util::stream::Stream>>(p1); }
inline ref<java::util::stream::Stream> Stream::map(ref<java::util::function::Function> p1) { return call_method<SCAPIX_META_STRING("map"), ref<java::util::stream::Stream>>(p1); }
inline ref<java::util::stream::IntStream> Stream::mapToInt(ref<java::util::function::ToIntFunction> p1) { return call_method<SCAPIX_META_STRING("mapToInt"), ref<java::util::stream::IntStream>>(p1); }
inline ref<java::util::stream::LongStream> Stream::mapToLong(ref<java::util::function::ToLongFunction> p1) { return call_method<SCAPIX_META_STRING("mapToLong"), ref<java::util::stream::LongStream>>(p1); }
inline ref<java::util::stream::DoubleStream> Stream::mapToDouble(ref<java::util::function::ToDoubleFunction> p1) { return call_method<SCAPIX_META_STRING("mapToDouble"), ref<java::util::stream::DoubleStream>>(p1); }
inline ref<java::util::stream::Stream> Stream::flatMap(ref<java::util::function::Function> p1) { return call_method<SCAPIX_META_STRING("flatMap"), ref<java::util::stream::Stream>>(p1); }
inline ref<java::util::stream::IntStream> Stream::flatMapToInt(ref<java::util::function::Function> p1) { return call_method<SCAPIX_META_STRING("flatMapToInt"), ref<java::util::stream::IntStream>>(p1); }
inline ref<java::util::stream::LongStream> Stream::flatMapToLong(ref<java::util::function::Function> p1) { return call_method<SCAPIX_META_STRING("flatMapToLong"), ref<java::util::stream::LongStream>>(p1); }
inline ref<java::util::stream::DoubleStream> Stream::flatMapToDouble(ref<java::util::function::Function> p1) { return call_method<SCAPIX_META_STRING("flatMapToDouble"), ref<java::util::stream::DoubleStream>>(p1); }
inline ref<java::util::stream::Stream> Stream::distinct() { return call_method<SCAPIX_META_STRING("distinct"), ref<java::util::stream::Stream>>(); }
inline ref<java::util::stream::Stream> Stream::sorted() { return call_method<SCAPIX_META_STRING("sorted"), ref<java::util::stream::Stream>>(); }
inline ref<java::util::stream::Stream> Stream::sorted(ref<java::util::Comparator> p1) { return call_method<SCAPIX_META_STRING("sorted"), ref<java::util::stream::Stream>>(p1); }
inline ref<java::util::stream::Stream> Stream::peek(ref<java::util::function::Consumer> p1) { return call_method<SCAPIX_META_STRING("peek"), ref<java::util::stream::Stream>>(p1); }
inline ref<java::util::stream::Stream> Stream::limit(jlong p1) { return call_method<SCAPIX_META_STRING("limit"), ref<java::util::stream::Stream>>(p1); }
inline ref<java::util::stream::Stream> Stream::skip(jlong p1) { return call_method<SCAPIX_META_STRING("skip"), ref<java::util::stream::Stream>>(p1); }
inline ref<java::util::stream::Stream> Stream::takeWhile(ref<java::util::function::Predicate> predicate) { return call_method<SCAPIX_META_STRING("takeWhile"), ref<java::util::stream::Stream>>(predicate); }
inline ref<java::util::stream::Stream> Stream::dropWhile(ref<java::util::function::Predicate> predicate) { return call_method<SCAPIX_META_STRING("dropWhile"), ref<java::util::stream::Stream>>(predicate); }
inline void Stream::forEach(ref<java::util::function::Consumer> p1) { return call_method<SCAPIX_META_STRING("forEach"), void>(p1); }
inline void Stream::forEachOrdered(ref<java::util::function::Consumer> p1) { return call_method<SCAPIX_META_STRING("forEachOrdered"), void>(p1); }
inline ref<link::java::array<java::lang::Object>> Stream::toArray() { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<java::lang::Object>>>(); }
inline ref<link::java::array<java::lang::Object>> Stream::toArray(ref<java::util::function::IntFunction> p1) { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<java::lang::Object>>>(p1); }
inline ref<java::lang::Object> Stream::reduce(ref<java::lang::Object> p1, ref<java::util::function::BinaryOperator> p2) { return call_method<SCAPIX_META_STRING("reduce"), ref<java::lang::Object>>(p1, p2); }
inline ref<java::util::Optional> Stream::reduce(ref<java::util::function::BinaryOperator> p1) { return call_method<SCAPIX_META_STRING("reduce"), ref<java::util::Optional>>(p1); }
inline ref<java::lang::Object> Stream::reduce(ref<java::lang::Object> p1, ref<java::util::function::BiFunction> p2, ref<java::util::function::BinaryOperator> p3) { return call_method<SCAPIX_META_STRING("reduce"), ref<java::lang::Object>>(p1, p2, p3); }
inline ref<java::lang::Object> Stream::collect(ref<java::util::function::Supplier> p1, ref<java::util::function::BiConsumer> p2, ref<java::util::function::BiConsumer> p3) { return call_method<SCAPIX_META_STRING("collect"), ref<java::lang::Object>>(p1, p2, p3); }
inline ref<java::lang::Object> Stream::collect(ref<java::util::stream::Collector> p1) { return call_method<SCAPIX_META_STRING("collect"), ref<java::lang::Object>>(p1); }
inline ref<java::util::Optional> Stream::min(ref<java::util::Comparator> p1) { return call_method<SCAPIX_META_STRING("min"), ref<java::util::Optional>>(p1); }
inline ref<java::util::Optional> Stream::max(ref<java::util::Comparator> p1) { return call_method<SCAPIX_META_STRING("max"), ref<java::util::Optional>>(p1); }
inline jlong Stream::count() { return call_method<SCAPIX_META_STRING("count"), jlong>(); }
inline jboolean Stream::anyMatch(ref<java::util::function::Predicate> p1) { return call_method<SCAPIX_META_STRING("anyMatch"), jboolean>(p1); }
inline jboolean Stream::allMatch(ref<java::util::function::Predicate> p1) { return call_method<SCAPIX_META_STRING("allMatch"), jboolean>(p1); }
inline jboolean Stream::noneMatch(ref<java::util::function::Predicate> p1) { return call_method<SCAPIX_META_STRING("noneMatch"), jboolean>(p1); }
inline ref<java::util::Optional> Stream::findFirst() { return call_method<SCAPIX_META_STRING("findFirst"), ref<java::util::Optional>>(); }
inline ref<java::util::Optional> Stream::findAny() { return call_method<SCAPIX_META_STRING("findAny"), ref<java::util::Optional>>(); }
inline ref<java::util::stream::Stream_Builder> Stream::builder() { return call_static_method<SCAPIX_META_STRING("builder"), ref<java::util::stream::Stream_Builder>>(); }
inline ref<java::util::stream::Stream> Stream::empty() { return call_static_method<SCAPIX_META_STRING("empty"), ref<java::util::stream::Stream>>(); }
inline ref<java::util::stream::Stream> Stream::of(ref<java::lang::Object> t) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::stream::Stream>>(t); }
inline ref<java::util::stream::Stream> Stream::ofNullable(ref<java::lang::Object> t) { return call_static_method<SCAPIX_META_STRING("ofNullable"), ref<java::util::stream::Stream>>(t); }
inline ref<java::util::stream::Stream> Stream::of(ref<link::java::array<java::lang::Object>> values) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::stream::Stream>>(values); }
inline ref<java::util::stream::Stream> Stream::iterate(ref<java::lang::Object> seed, ref<java::util::function::UnaryOperator> f) { return call_static_method<SCAPIX_META_STRING("iterate"), ref<java::util::stream::Stream>>(seed, f); }
inline ref<java::util::stream::Stream> Stream::iterate(ref<java::lang::Object> seed, ref<java::util::function::Predicate> hasNext, ref<java::util::function::UnaryOperator> next) { return call_static_method<SCAPIX_META_STRING("iterate"), ref<java::util::stream::Stream>>(seed, hasNext, next); }
inline ref<java::util::stream::Stream> Stream::generate(ref<java::util::function::Supplier> s) { return call_static_method<SCAPIX_META_STRING("generate"), ref<java::util::stream::Stream>>(s); }
inline ref<java::util::stream::Stream> Stream::concat(ref<java::util::stream::Stream> a, ref<java::util::stream::Stream> b) { return call_static_method<SCAPIX_META_STRING("concat"), ref<java::util::stream::Stream>>(a, b); }

} // namespace java::util::stream
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STREAM_STREAM_H
