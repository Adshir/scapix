// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_STREAM_SLICEOPS_H
#define SCAPIX_JAVA_UTIL_STREAM_SLICEOPS_H

namespace scapix::java_api {

namespace java::util::stream { class AbstractPipeline; }
namespace java::util::stream { class DoubleStream; }
namespace java::util::stream { class IntStream; }
namespace java::util::stream { class LongStream; }
namespace java::util::stream { class Stream; }

namespace java::util::stream {

// private
class SliceOps : public object_base<SCAPIX_META_STRING("java/util/stream/SliceOps"),
	java::lang::Object>
{
public:

	static ref<java::util::stream::Stream> makeRef(ref<java::util::stream::AbstractPipeline> upstream, jlong skip, jlong p3);
	static ref<java::util::stream::IntStream> makeInt(ref<java::util::stream::AbstractPipeline> upstream, jlong skip, jlong p3);
	static ref<java::util::stream::LongStream> makeLong(ref<java::util::stream::AbstractPipeline> upstream, jlong skip, jlong p3);
	static ref<java::util::stream::DoubleStream> makeDouble(ref<java::util::stream::AbstractPipeline> upstream, jlong skip, jlong p3);

protected:

	SliceOps(handle_type h) : base_(h) {}

};

} // namespace java::util::stream
} // namespace scapix::java_api

#include <scapix/java_api/java/util/stream/AbstractPipeline.h>
#include <scapix/java_api/java/util/stream/DoubleStream.h>
#include <scapix/java_api/java/util/stream/IntStream.h>
#include <scapix/java_api/java/util/stream/LongStream.h>
#include <scapix/java_api/java/util/stream/Stream.h>

namespace scapix::java_api {
namespace java::util::stream {

inline ref<java::util::stream::Stream> SliceOps::makeRef(ref<java::util::stream::AbstractPipeline> upstream, jlong skip, jlong p3) { return call_static_method<SCAPIX_META_STRING("makeRef"), ref<java::util::stream::Stream>>(upstream, skip, p3); }
inline ref<java::util::stream::IntStream> SliceOps::makeInt(ref<java::util::stream::AbstractPipeline> upstream, jlong skip, jlong p3) { return call_static_method<SCAPIX_META_STRING("makeInt"), ref<java::util::stream::IntStream>>(upstream, skip, p3); }
inline ref<java::util::stream::LongStream> SliceOps::makeLong(ref<java::util::stream::AbstractPipeline> upstream, jlong skip, jlong p3) { return call_static_method<SCAPIX_META_STRING("makeLong"), ref<java::util::stream::LongStream>>(upstream, skip, p3); }
inline ref<java::util::stream::DoubleStream> SliceOps::makeDouble(ref<java::util::stream::AbstractPipeline> upstream, jlong skip, jlong p3) { return call_static_method<SCAPIX_META_STRING("makeDouble"), ref<java::util::stream::DoubleStream>>(upstream, skip, p3); }

} // namespace java::util::stream
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STREAM_SLICEOPS_H
