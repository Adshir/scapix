// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/stream/AbstractPipeline.h>
#include <scapix/java_api/java/util/stream/LongStream.h>

#ifndef SCAPIX_JAVA_UTIL_STREAM_LONGPIPELINE_H
#define SCAPIX_JAVA_UTIL_STREAM_LONGPIPELINE_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::util { class LongSummaryStatistics; }
namespace java::util { class OptionalDouble; }
namespace java::util { class OptionalLong; }
namespace java::util { class PrimitiveIterator_OfLong; }
namespace java::util { class Spliterator_OfLong; }
namespace java::util::function { class BiConsumer; }
namespace java::util::function { class LongBinaryOperator; }
namespace java::util::function { class LongConsumer; }
namespace java::util::function { class LongFunction; }
namespace java::util::function { class LongPredicate; }
namespace java::util::function { class LongToDoubleFunction; }
namespace java::util::function { class LongToIntFunction; }
namespace java::util::function { class LongUnaryOperator; }
namespace java::util::function { class ObjLongConsumer; }
namespace java::util::function { class Supplier; }
namespace java::util::stream { class DoubleStream; }
namespace java::util::stream { class IntStream; }
namespace java::util::stream { class Stream; }

namespace java::util::stream {

// private
class LongPipeline : public object_base<SCAPIX_META_STRING("java/util/stream/LongPipeline"),
	java::util::stream::AbstractPipeline,
	java::util::stream::LongStream>
{
public:

	ref<java::util::PrimitiveIterator_OfLong> iterator();
	ref<java::util::Spliterator_OfLong> spliterator();
	ref<java::util::stream::DoubleStream> asDoubleStream();
	ref<java::util::stream::Stream> boxed();
	ref<java::util::stream::LongStream> map(ref<java::util::function::LongUnaryOperator> mapper);
	ref<java::util::stream::Stream> mapToObj(ref<java::util::function::LongFunction> mapper);
	ref<java::util::stream::IntStream> mapToInt(ref<java::util::function::LongToIntFunction> mapper);
	ref<java::util::stream::DoubleStream> mapToDouble(ref<java::util::function::LongToDoubleFunction> mapper);
	ref<java::util::stream::LongStream> flatMap(ref<java::util::function::LongFunction> mapper);
	ref<java::util::stream::LongStream> unordered();
	ref<java::util::stream::LongStream> filter(ref<java::util::function::LongPredicate> predicate);
	ref<java::util::stream::LongStream> peek(ref<java::util::function::LongConsumer> action);
	ref<java::util::stream::LongStream> limit(jlong maxSize);
	ref<java::util::stream::LongStream> skip(jlong n);
	ref<java::util::stream::LongStream> takeWhile(ref<java::util::function::LongPredicate> predicate);
	ref<java::util::stream::LongStream> dropWhile(ref<java::util::function::LongPredicate> predicate);
	ref<java::util::stream::LongStream> sorted();
	ref<java::util::stream::LongStream> distinct();
	void forEach(ref<java::util::function::LongConsumer> action);
	void forEachOrdered(ref<java::util::function::LongConsumer> action);
	jlong sum();
	ref<java::util::OptionalLong> min();
	ref<java::util::OptionalLong> max();
	ref<java::util::OptionalDouble> average();
	jlong count();
	ref<java::util::LongSummaryStatistics> summaryStatistics();
	jlong reduce(jlong identity, ref<java::util::function::LongBinaryOperator> p2);
	ref<java::util::OptionalLong> reduce(ref<java::util::function::LongBinaryOperator> op);
	ref<java::lang::Object> collect(ref<java::util::function::Supplier> supplier, ref<java::util::function::ObjLongConsumer> accumulator, ref<java::util::function::BiConsumer> combiner);
	jboolean anyMatch(ref<java::util::function::LongPredicate> predicate);
	jboolean allMatch(ref<java::util::function::LongPredicate> predicate);
	jboolean noneMatch(ref<java::util::function::LongPredicate> predicate);
	ref<java::util::OptionalLong> findFirst();
	ref<java::util::OptionalLong> findAny();
	ref<link::java::array<jlong>> toArray();

protected:

	LongPipeline(handle_type h) : base_(h) {}

};

} // namespace java::util::stream
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/LongSummaryStatistics.h>
#include <scapix/java_api/java/util/OptionalDouble.h>
#include <scapix/java_api/java/util/OptionalLong.h>
#include <scapix/java_api/java/util/PrimitiveIterator_OfLong.h>
#include <scapix/java_api/java/util/Spliterator_OfLong.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/LongBinaryOperator.h>
#include <scapix/java_api/java/util/function/LongConsumer.h>
#include <scapix/java_api/java/util/function/LongFunction.h>
#include <scapix/java_api/java/util/function/LongPredicate.h>
#include <scapix/java_api/java/util/function/LongToDoubleFunction.h>
#include <scapix/java_api/java/util/function/LongToIntFunction.h>
#include <scapix/java_api/java/util/function/LongUnaryOperator.h>
#include <scapix/java_api/java/util/function/ObjLongConsumer.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#include <scapix/java_api/java/util/stream/DoubleStream.h>
#include <scapix/java_api/java/util/stream/IntStream.h>
#include <scapix/java_api/java/util/stream/Stream.h>

namespace scapix::java_api {
namespace java::util::stream {

inline ref<java::util::PrimitiveIterator_OfLong> LongPipeline::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::PrimitiveIterator_OfLong>>(); }
inline ref<java::util::Spliterator_OfLong> LongPipeline::spliterator() { return call_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator_OfLong>>(); }
inline ref<java::util::stream::DoubleStream> LongPipeline::asDoubleStream() { return call_method<SCAPIX_META_STRING("asDoubleStream"), ref<java::util::stream::DoubleStream>>(); }
inline ref<java::util::stream::Stream> LongPipeline::boxed() { return call_method<SCAPIX_META_STRING("boxed"), ref<java::util::stream::Stream>>(); }
inline ref<java::util::stream::LongStream> LongPipeline::map(ref<java::util::function::LongUnaryOperator> mapper) { return call_method<SCAPIX_META_STRING("map"), ref<java::util::stream::LongStream>>(mapper); }
inline ref<java::util::stream::Stream> LongPipeline::mapToObj(ref<java::util::function::LongFunction> mapper) { return call_method<SCAPIX_META_STRING("mapToObj"), ref<java::util::stream::Stream>>(mapper); }
inline ref<java::util::stream::IntStream> LongPipeline::mapToInt(ref<java::util::function::LongToIntFunction> mapper) { return call_method<SCAPIX_META_STRING("mapToInt"), ref<java::util::stream::IntStream>>(mapper); }
inline ref<java::util::stream::DoubleStream> LongPipeline::mapToDouble(ref<java::util::function::LongToDoubleFunction> mapper) { return call_method<SCAPIX_META_STRING("mapToDouble"), ref<java::util::stream::DoubleStream>>(mapper); }
inline ref<java::util::stream::LongStream> LongPipeline::flatMap(ref<java::util::function::LongFunction> mapper) { return call_method<SCAPIX_META_STRING("flatMap"), ref<java::util::stream::LongStream>>(mapper); }
inline ref<java::util::stream::LongStream> LongPipeline::unordered() { return call_method<SCAPIX_META_STRING("unordered"), ref<java::util::stream::LongStream>>(); }
inline ref<java::util::stream::LongStream> LongPipeline::filter(ref<java::util::function::LongPredicate> predicate) { return call_method<SCAPIX_META_STRING("filter"), ref<java::util::stream::LongStream>>(predicate); }
inline ref<java::util::stream::LongStream> LongPipeline::peek(ref<java::util::function::LongConsumer> action) { return call_method<SCAPIX_META_STRING("peek"), ref<java::util::stream::LongStream>>(action); }
inline ref<java::util::stream::LongStream> LongPipeline::limit(jlong maxSize) { return call_method<SCAPIX_META_STRING("limit"), ref<java::util::stream::LongStream>>(maxSize); }
inline ref<java::util::stream::LongStream> LongPipeline::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), ref<java::util::stream::LongStream>>(n); }
inline ref<java::util::stream::LongStream> LongPipeline::takeWhile(ref<java::util::function::LongPredicate> predicate) { return call_method<SCAPIX_META_STRING("takeWhile"), ref<java::util::stream::LongStream>>(predicate); }
inline ref<java::util::stream::LongStream> LongPipeline::dropWhile(ref<java::util::function::LongPredicate> predicate) { return call_method<SCAPIX_META_STRING("dropWhile"), ref<java::util::stream::LongStream>>(predicate); }
inline ref<java::util::stream::LongStream> LongPipeline::sorted() { return call_method<SCAPIX_META_STRING("sorted"), ref<java::util::stream::LongStream>>(); }
inline ref<java::util::stream::LongStream> LongPipeline::distinct() { return call_method<SCAPIX_META_STRING("distinct"), ref<java::util::stream::LongStream>>(); }
inline void LongPipeline::forEach(ref<java::util::function::LongConsumer> action) { return call_method<SCAPIX_META_STRING("forEach"), void>(action); }
inline void LongPipeline::forEachOrdered(ref<java::util::function::LongConsumer> action) { return call_method<SCAPIX_META_STRING("forEachOrdered"), void>(action); }
inline jlong LongPipeline::sum() { return call_method<SCAPIX_META_STRING("sum"), jlong>(); }
inline ref<java::util::OptionalLong> LongPipeline::min() { return call_method<SCAPIX_META_STRING("min"), ref<java::util::OptionalLong>>(); }
inline ref<java::util::OptionalLong> LongPipeline::max() { return call_method<SCAPIX_META_STRING("max"), ref<java::util::OptionalLong>>(); }
inline ref<java::util::OptionalDouble> LongPipeline::average() { return call_method<SCAPIX_META_STRING("average"), ref<java::util::OptionalDouble>>(); }
inline jlong LongPipeline::count() { return call_method<SCAPIX_META_STRING("count"), jlong>(); }
inline ref<java::util::LongSummaryStatistics> LongPipeline::summaryStatistics() { return call_method<SCAPIX_META_STRING("summaryStatistics"), ref<java::util::LongSummaryStatistics>>(); }
inline jlong LongPipeline::reduce(jlong identity, ref<java::util::function::LongBinaryOperator> p2) { return call_method<SCAPIX_META_STRING("reduce"), jlong>(identity, p2); }
inline ref<java::util::OptionalLong> LongPipeline::reduce(ref<java::util::function::LongBinaryOperator> op) { return call_method<SCAPIX_META_STRING("reduce"), ref<java::util::OptionalLong>>(op); }
inline ref<java::lang::Object> LongPipeline::collect(ref<java::util::function::Supplier> supplier, ref<java::util::function::ObjLongConsumer> accumulator, ref<java::util::function::BiConsumer> combiner) { return call_method<SCAPIX_META_STRING("collect"), ref<java::lang::Object>>(supplier, accumulator, combiner); }
inline jboolean LongPipeline::anyMatch(ref<java::util::function::LongPredicate> predicate) { return call_method<SCAPIX_META_STRING("anyMatch"), jboolean>(predicate); }
inline jboolean LongPipeline::allMatch(ref<java::util::function::LongPredicate> predicate) { return call_method<SCAPIX_META_STRING("allMatch"), jboolean>(predicate); }
inline jboolean LongPipeline::noneMatch(ref<java::util::function::LongPredicate> predicate) { return call_method<SCAPIX_META_STRING("noneMatch"), jboolean>(predicate); }
inline ref<java::util::OptionalLong> LongPipeline::findFirst() { return call_method<SCAPIX_META_STRING("findFirst"), ref<java::util::OptionalLong>>(); }
inline ref<java::util::OptionalLong> LongPipeline::findAny() { return call_method<SCAPIX_META_STRING("findAny"), ref<java::util::OptionalLong>>(); }
inline ref<link::java::array<jlong>> LongPipeline::toArray() { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<jlong>>>(); }

} // namespace java::util::stream
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STREAM_LONGPIPELINE_H
