// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_STREAM_NODES_H
#define SCAPIX_JAVA_UTIL_STREAM_NODES_H

namespace scapix::java_api {

namespace java::util { class Spliterator; }
namespace java::util::function { class IntFunction; }
namespace java::util::stream { class Node; }
namespace java::util::stream { class Node_OfDouble; }
namespace java::util::stream { class Node_OfInt; }
namespace java::util::stream { class Node_OfLong; }
namespace java::util::stream { class PipelineHelper; }

namespace java::util::stream {

// private
class Nodes : public object_base<SCAPIX_META_STRING("java/util/stream/Nodes"),
	java::lang::Object>
{
public:

	static ref<java::util::stream::Node> collect(ref<java::util::stream::PipelineHelper> helper, ref<java::util::Spliterator> spliterator, jboolean flattenTree, ref<java::util::function::IntFunction> generator);
	static ref<java::util::stream::Node_OfInt> collectInt(ref<java::util::stream::PipelineHelper> helper, ref<java::util::Spliterator> spliterator, jboolean flattenTree);
	static ref<java::util::stream::Node_OfLong> collectLong(ref<java::util::stream::PipelineHelper> helper, ref<java::util::Spliterator> spliterator, jboolean flattenTree);
	static ref<java::util::stream::Node_OfDouble> collectDouble(ref<java::util::stream::PipelineHelper> helper, ref<java::util::Spliterator> spliterator, jboolean flattenTree);
	static ref<java::util::stream::Node> flatten(ref<java::util::stream::Node> node, ref<java::util::function::IntFunction> generator);
	static ref<java::util::stream::Node_OfInt> flattenInt(ref<java::util::stream::Node_OfInt> node);
	static ref<java::util::stream::Node_OfLong> flattenLong(ref<java::util::stream::Node_OfLong> node);
	static ref<java::util::stream::Node_OfDouble> flattenDouble(ref<java::util::stream::Node_OfDouble> node);

protected:

	Nodes(handle_type h) : base_(h) {}

};

} // namespace java::util::stream
} // namespace scapix::java_api

#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/function/IntFunction.h>
#include <scapix/java_api/java/util/stream/Node.h>
#include <scapix/java_api/java/util/stream/Node_OfDouble.h>
#include <scapix/java_api/java/util/stream/Node_OfInt.h>
#include <scapix/java_api/java/util/stream/Node_OfLong.h>
#include <scapix/java_api/java/util/stream/PipelineHelper.h>

namespace scapix::java_api {
namespace java::util::stream {

inline ref<java::util::stream::Node> Nodes::collect(ref<java::util::stream::PipelineHelper> helper, ref<java::util::Spliterator> spliterator, jboolean flattenTree, ref<java::util::function::IntFunction> generator) { return call_static_method<SCAPIX_META_STRING("collect"), ref<java::util::stream::Node>>(helper, spliterator, flattenTree, generator); }
inline ref<java::util::stream::Node_OfInt> Nodes::collectInt(ref<java::util::stream::PipelineHelper> helper, ref<java::util::Spliterator> spliterator, jboolean flattenTree) { return call_static_method<SCAPIX_META_STRING("collectInt"), ref<java::util::stream::Node_OfInt>>(helper, spliterator, flattenTree); }
inline ref<java::util::stream::Node_OfLong> Nodes::collectLong(ref<java::util::stream::PipelineHelper> helper, ref<java::util::Spliterator> spliterator, jboolean flattenTree) { return call_static_method<SCAPIX_META_STRING("collectLong"), ref<java::util::stream::Node_OfLong>>(helper, spliterator, flattenTree); }
inline ref<java::util::stream::Node_OfDouble> Nodes::collectDouble(ref<java::util::stream::PipelineHelper> helper, ref<java::util::Spliterator> spliterator, jboolean flattenTree) { return call_static_method<SCAPIX_META_STRING("collectDouble"), ref<java::util::stream::Node_OfDouble>>(helper, spliterator, flattenTree); }
inline ref<java::util::stream::Node> Nodes::flatten(ref<java::util::stream::Node> node, ref<java::util::function::IntFunction> generator) { return call_static_method<SCAPIX_META_STRING("flatten"), ref<java::util::stream::Node>>(node, generator); }
inline ref<java::util::stream::Node_OfInt> Nodes::flattenInt(ref<java::util::stream::Node_OfInt> node) { return call_static_method<SCAPIX_META_STRING("flattenInt"), ref<java::util::stream::Node_OfInt>>(node); }
inline ref<java::util::stream::Node_OfLong> Nodes::flattenLong(ref<java::util::stream::Node_OfLong> node) { return call_static_method<SCAPIX_META_STRING("flattenLong"), ref<java::util::stream::Node_OfLong>>(node); }
inline ref<java::util::stream::Node_OfDouble> Nodes::flattenDouble(ref<java::util::stream::Node_OfDouble> node) { return call_static_method<SCAPIX_META_STRING("flattenDouble"), ref<java::util::stream::Node_OfDouble>>(node); }

} // namespace java::util::stream
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STREAM_NODES_H
