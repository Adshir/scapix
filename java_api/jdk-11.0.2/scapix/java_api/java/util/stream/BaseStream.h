// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_UTIL_STREAM_BASESTREAM_H
#define SCAPIX_JAVA_UTIL_STREAM_BASESTREAM_H

namespace scapix::java_api {

namespace java::lang { class Runnable; }
namespace java::util { class Iterator; }
namespace java::util { class Spliterator; }

namespace java::util::stream {

class BaseStream : public object_base<SCAPIX_META_STRING("java/util/stream/BaseStream"),
	java::lang::Object,
	java::lang::AutoCloseable>
{
public:

	ref<java::util::Iterator> iterator();
	ref<java::util::Spliterator> spliterator();
	jboolean isParallel();
	ref<java::util::stream::BaseStream> sequential();
	ref<java::util::stream::BaseStream> parallel();
	ref<java::util::stream::BaseStream> unordered();
	ref<java::util::stream::BaseStream> onClose(ref<java::lang::Runnable> p1);
	void close();

protected:

	BaseStream(handle_type h) : base_(h) {}

};

} // namespace java::util::stream
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/Spliterator.h>

namespace scapix::java_api {
namespace java::util::stream {

inline ref<java::util::Iterator> BaseStream::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::Iterator>>(); }
inline ref<java::util::Spliterator> BaseStream::spliterator() { return call_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator>>(); }
inline jboolean BaseStream::isParallel() { return call_method<SCAPIX_META_STRING("isParallel"), jboolean>(); }
inline ref<java::util::stream::BaseStream> BaseStream::sequential() { return call_method<SCAPIX_META_STRING("sequential"), ref<java::util::stream::BaseStream>>(); }
inline ref<java::util::stream::BaseStream> BaseStream::parallel() { return call_method<SCAPIX_META_STRING("parallel"), ref<java::util::stream::BaseStream>>(); }
inline ref<java::util::stream::BaseStream> BaseStream::unordered() { return call_method<SCAPIX_META_STRING("unordered"), ref<java::util::stream::BaseStream>>(); }
inline ref<java::util::stream::BaseStream> BaseStream::onClose(ref<java::lang::Runnable> p1) { return call_method<SCAPIX_META_STRING("onClose"), ref<java::util::stream::BaseStream>>(p1); }
inline void BaseStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::util::stream
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STREAM_BASESTREAM_H
