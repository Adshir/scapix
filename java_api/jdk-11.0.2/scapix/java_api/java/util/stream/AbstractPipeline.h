// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/stream/PipelineHelper.h>
#include <scapix/java_api/java/util/stream/BaseStream.h>

#ifndef SCAPIX_JAVA_UTIL_STREAM_ABSTRACTPIPELINE_H
#define SCAPIX_JAVA_UTIL_STREAM_ABSTRACTPIPELINE_H

namespace scapix::java_api {

namespace java::lang { class Runnable; }
namespace java::util { class Spliterator; }

namespace java::util::stream {

// private
class AbstractPipeline : public object_base<SCAPIX_META_STRING("java/util/stream/AbstractPipeline"),
	java::util::stream::PipelineHelper,
	java::util::stream::BaseStream>
{
public:

	ref<java::util::stream::BaseStream> sequential();
	ref<java::util::stream::BaseStream> parallel();
	void close();
	ref<java::util::stream::BaseStream> onClose(ref<java::lang::Runnable> closeHandler);
	ref<java::util::Spliterator> spliterator();
	jboolean isParallel();

protected:

	AbstractPipeline(handle_type h) : base_(h) {}

};

} // namespace java::util::stream
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/util/Spliterator.h>

namespace scapix::java_api {
namespace java::util::stream {

inline ref<java::util::stream::BaseStream> AbstractPipeline::sequential() { return call_method<SCAPIX_META_STRING("sequential"), ref<java::util::stream::BaseStream>>(); }
inline ref<java::util::stream::BaseStream> AbstractPipeline::parallel() { return call_method<SCAPIX_META_STRING("parallel"), ref<java::util::stream::BaseStream>>(); }
inline void AbstractPipeline::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline ref<java::util::stream::BaseStream> AbstractPipeline::onClose(ref<java::lang::Runnable> closeHandler) { return call_method<SCAPIX_META_STRING("onClose"), ref<java::util::stream::BaseStream>>(closeHandler); }
inline ref<java::util::Spliterator> AbstractPipeline::spliterator() { return call_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator>>(); }
inline jboolean AbstractPipeline::isParallel() { return call_method<SCAPIX_META_STRING("isParallel"), jboolean>(); }

} // namespace java::util::stream
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STREAM_ABSTRACTPIPELINE_H
