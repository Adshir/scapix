// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>

#ifndef SCAPIX_JAVA_UTIL_STREAM_STREAMOPFLAG_H
#define SCAPIX_JAVA_UTIL_STREAM_STREAMOPFLAG_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace java::util::stream {

// private
class StreamOpFlag : public object_base<SCAPIX_META_STRING("java/util/stream/StreamOpFlag"),
	java::lang::Enum>
{
public:

	static ref<java::util::stream::StreamOpFlag> DISTINCT_();
	static ref<java::util::stream::StreamOpFlag> SORTED_();
	static ref<java::util::stream::StreamOpFlag> ORDERED_();
	static ref<java::util::stream::StreamOpFlag> SIZED_();
	static ref<java::util::stream::StreamOpFlag> SHORT_CIRCUIT_();

	static ref<link::java::array<java::util::stream::StreamOpFlag>> values();
	static ref<java::util::stream::StreamOpFlag> valueOf(ref<java::lang::String> name);

protected:

	StreamOpFlag(handle_type h) : base_(h) {}

};

} // namespace java::util::stream
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::util::stream {

inline ref<java::util::stream::StreamOpFlag> StreamOpFlag::DISTINCT_() { return get_static_field<SCAPIX_META_STRING("DISTINCT"), ref<java::util::stream::StreamOpFlag>>(); }
inline ref<java::util::stream::StreamOpFlag> StreamOpFlag::SORTED_() { return get_static_field<SCAPIX_META_STRING("SORTED"), ref<java::util::stream::StreamOpFlag>>(); }
inline ref<java::util::stream::StreamOpFlag> StreamOpFlag::ORDERED_() { return get_static_field<SCAPIX_META_STRING("ORDERED"), ref<java::util::stream::StreamOpFlag>>(); }
inline ref<java::util::stream::StreamOpFlag> StreamOpFlag::SIZED_() { return get_static_field<SCAPIX_META_STRING("SIZED"), ref<java::util::stream::StreamOpFlag>>(); }
inline ref<java::util::stream::StreamOpFlag> StreamOpFlag::SHORT_CIRCUIT_() { return get_static_field<SCAPIX_META_STRING("SHORT_CIRCUIT"), ref<java::util::stream::StreamOpFlag>>(); }
inline ref<link::java::array<java::util::stream::StreamOpFlag>> StreamOpFlag::values() { return call_static_method<SCAPIX_META_STRING("values"), ref<link::java::array<java::util::stream::StreamOpFlag>>>(); }
inline ref<java::util::stream::StreamOpFlag> StreamOpFlag::valueOf(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::util::stream::StreamOpFlag>>(name); }

} // namespace java::util::stream
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STREAM_STREAMOPFLAG_H
