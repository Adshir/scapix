// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/function/DoubleConsumer.h>

#ifndef SCAPIX_JAVA_UTIL_STREAM_DOUBLESTREAM_BUILDER_H
#define SCAPIX_JAVA_UTIL_STREAM_DOUBLESTREAM_BUILDER_H

namespace scapix::java_api {

namespace java::util::stream { class DoubleStream; }

namespace java::util::stream {

class DoubleStream_Builder : public object_base<SCAPIX_META_STRING("java/util/stream/DoubleStream$Builder"),
	java::lang::Object,
	java::util::function::DoubleConsumer>
{
public:

	void accept(jdouble p1);
	ref<java::util::stream::DoubleStream_Builder> add(jdouble t);
	ref<java::util::stream::DoubleStream> build();

protected:

	DoubleStream_Builder(handle_type h) : base_(h) {}

};

} // namespace java::util::stream
} // namespace scapix::java_api

#include <scapix/java_api/java/util/stream/DoubleStream.h>

namespace scapix::java_api {
namespace java::util::stream {

inline void DoubleStream_Builder::accept(jdouble p1) { return call_method<SCAPIX_META_STRING("accept"), void>(p1); }
inline ref<java::util::stream::DoubleStream_Builder> DoubleStream_Builder::add(jdouble t) { return call_method<SCAPIX_META_STRING("add"), ref<java::util::stream::DoubleStream_Builder>>(t); }
inline ref<java::util::stream::DoubleStream> DoubleStream_Builder::build() { return call_method<SCAPIX_META_STRING("build"), ref<java::util::stream::DoubleStream>>(); }

} // namespace java::util::stream
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STREAM_DOUBLESTREAM_BUILDER_H
