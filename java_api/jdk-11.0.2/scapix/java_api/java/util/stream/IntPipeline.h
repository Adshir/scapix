// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/stream/AbstractPipeline.h>
#include <scapix/java_api/java/util/stream/IntStream.h>

#ifndef SCAPIX_JAVA_UTIL_STREAM_INTPIPELINE_H
#define SCAPIX_JAVA_UTIL_STREAM_INTPIPELINE_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::util { class IntSummaryStatistics; }
namespace java::util { class OptionalDouble; }
namespace java::util { class OptionalInt; }
namespace java::util { class PrimitiveIterator_OfInt; }
namespace java::util { class Spliterator_OfInt; }
namespace java::util::function { class BiConsumer; }
namespace java::util::function { class IntBinaryOperator; }
namespace java::util::function { class IntConsumer; }
namespace java::util::function { class IntFunction; }
namespace java::util::function { class IntPredicate; }
namespace java::util::function { class IntToDoubleFunction; }
namespace java::util::function { class IntToLongFunction; }
namespace java::util::function { class IntUnaryOperator; }
namespace java::util::function { class ObjIntConsumer; }
namespace java::util::function { class Supplier; }
namespace java::util::stream { class DoubleStream; }
namespace java::util::stream { class LongStream; }
namespace java::util::stream { class Stream; }

namespace java::util::stream {

// private
class IntPipeline : public object_base<SCAPIX_META_STRING("java/util/stream/IntPipeline"),
	java::util::stream::AbstractPipeline,
	java::util::stream::IntStream>
{
public:

	ref<java::util::PrimitiveIterator_OfInt> iterator();
	ref<java::util::Spliterator_OfInt> spliterator();
	ref<java::util::stream::LongStream> asLongStream();
	ref<java::util::stream::DoubleStream> asDoubleStream();
	ref<java::util::stream::Stream> boxed();
	ref<java::util::stream::IntStream> map(ref<java::util::function::IntUnaryOperator> mapper);
	ref<java::util::stream::Stream> mapToObj(ref<java::util::function::IntFunction> mapper);
	ref<java::util::stream::LongStream> mapToLong(ref<java::util::function::IntToLongFunction> mapper);
	ref<java::util::stream::DoubleStream> mapToDouble(ref<java::util::function::IntToDoubleFunction> mapper);
	ref<java::util::stream::IntStream> flatMap(ref<java::util::function::IntFunction> mapper);
	ref<java::util::stream::IntStream> unordered();
	ref<java::util::stream::IntStream> filter(ref<java::util::function::IntPredicate> predicate);
	ref<java::util::stream::IntStream> peek(ref<java::util::function::IntConsumer> action);
	ref<java::util::stream::IntStream> limit(jlong maxSize);
	ref<java::util::stream::IntStream> skip(jlong n);
	ref<java::util::stream::IntStream> takeWhile(ref<java::util::function::IntPredicate> predicate);
	ref<java::util::stream::IntStream> dropWhile(ref<java::util::function::IntPredicate> predicate);
	ref<java::util::stream::IntStream> sorted();
	ref<java::util::stream::IntStream> distinct();
	void forEach(ref<java::util::function::IntConsumer> action);
	void forEachOrdered(ref<java::util::function::IntConsumer> action);
	jint sum();
	ref<java::util::OptionalInt> min();
	ref<java::util::OptionalInt> max();
	jlong count();
	ref<java::util::OptionalDouble> average();
	ref<java::util::IntSummaryStatistics> summaryStatistics();
	jint reduce(jint identity, ref<java::util::function::IntBinaryOperator> op);
	ref<java::util::OptionalInt> reduce(ref<java::util::function::IntBinaryOperator> op);
	ref<java::lang::Object> collect(ref<java::util::function::Supplier> supplier, ref<java::util::function::ObjIntConsumer> accumulator, ref<java::util::function::BiConsumer> combiner);
	jboolean anyMatch(ref<java::util::function::IntPredicate> predicate);
	jboolean allMatch(ref<java::util::function::IntPredicate> predicate);
	jboolean noneMatch(ref<java::util::function::IntPredicate> predicate);
	ref<java::util::OptionalInt> findFirst();
	ref<java::util::OptionalInt> findAny();
	ref<link::java::array<jint>> toArray();

protected:

	IntPipeline(handle_type h) : base_(h) {}

};

} // namespace java::util::stream
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/IntSummaryStatistics.h>
#include <scapix/java_api/java/util/OptionalDouble.h>
#include <scapix/java_api/java/util/OptionalInt.h>
#include <scapix/java_api/java/util/PrimitiveIterator_OfInt.h>
#include <scapix/java_api/java/util/Spliterator_OfInt.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/IntBinaryOperator.h>
#include <scapix/java_api/java/util/function/IntConsumer.h>
#include <scapix/java_api/java/util/function/IntFunction.h>
#include <scapix/java_api/java/util/function/IntPredicate.h>
#include <scapix/java_api/java/util/function/IntToDoubleFunction.h>
#include <scapix/java_api/java/util/function/IntToLongFunction.h>
#include <scapix/java_api/java/util/function/IntUnaryOperator.h>
#include <scapix/java_api/java/util/function/ObjIntConsumer.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#include <scapix/java_api/java/util/stream/DoubleStream.h>
#include <scapix/java_api/java/util/stream/LongStream.h>
#include <scapix/java_api/java/util/stream/Stream.h>

namespace scapix::java_api {
namespace java::util::stream {

inline ref<java::util::PrimitiveIterator_OfInt> IntPipeline::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::PrimitiveIterator_OfInt>>(); }
inline ref<java::util::Spliterator_OfInt> IntPipeline::spliterator() { return call_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator_OfInt>>(); }
inline ref<java::util::stream::LongStream> IntPipeline::asLongStream() { return call_method<SCAPIX_META_STRING("asLongStream"), ref<java::util::stream::LongStream>>(); }
inline ref<java::util::stream::DoubleStream> IntPipeline::asDoubleStream() { return call_method<SCAPIX_META_STRING("asDoubleStream"), ref<java::util::stream::DoubleStream>>(); }
inline ref<java::util::stream::Stream> IntPipeline::boxed() { return call_method<SCAPIX_META_STRING("boxed"), ref<java::util::stream::Stream>>(); }
inline ref<java::util::stream::IntStream> IntPipeline::map(ref<java::util::function::IntUnaryOperator> mapper) { return call_method<SCAPIX_META_STRING("map"), ref<java::util::stream::IntStream>>(mapper); }
inline ref<java::util::stream::Stream> IntPipeline::mapToObj(ref<java::util::function::IntFunction> mapper) { return call_method<SCAPIX_META_STRING("mapToObj"), ref<java::util::stream::Stream>>(mapper); }
inline ref<java::util::stream::LongStream> IntPipeline::mapToLong(ref<java::util::function::IntToLongFunction> mapper) { return call_method<SCAPIX_META_STRING("mapToLong"), ref<java::util::stream::LongStream>>(mapper); }
inline ref<java::util::stream::DoubleStream> IntPipeline::mapToDouble(ref<java::util::function::IntToDoubleFunction> mapper) { return call_method<SCAPIX_META_STRING("mapToDouble"), ref<java::util::stream::DoubleStream>>(mapper); }
inline ref<java::util::stream::IntStream> IntPipeline::flatMap(ref<java::util::function::IntFunction> mapper) { return call_method<SCAPIX_META_STRING("flatMap"), ref<java::util::stream::IntStream>>(mapper); }
inline ref<java::util::stream::IntStream> IntPipeline::unordered() { return call_method<SCAPIX_META_STRING("unordered"), ref<java::util::stream::IntStream>>(); }
inline ref<java::util::stream::IntStream> IntPipeline::filter(ref<java::util::function::IntPredicate> predicate) { return call_method<SCAPIX_META_STRING("filter"), ref<java::util::stream::IntStream>>(predicate); }
inline ref<java::util::stream::IntStream> IntPipeline::peek(ref<java::util::function::IntConsumer> action) { return call_method<SCAPIX_META_STRING("peek"), ref<java::util::stream::IntStream>>(action); }
inline ref<java::util::stream::IntStream> IntPipeline::limit(jlong maxSize) { return call_method<SCAPIX_META_STRING("limit"), ref<java::util::stream::IntStream>>(maxSize); }
inline ref<java::util::stream::IntStream> IntPipeline::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), ref<java::util::stream::IntStream>>(n); }
inline ref<java::util::stream::IntStream> IntPipeline::takeWhile(ref<java::util::function::IntPredicate> predicate) { return call_method<SCAPIX_META_STRING("takeWhile"), ref<java::util::stream::IntStream>>(predicate); }
inline ref<java::util::stream::IntStream> IntPipeline::dropWhile(ref<java::util::function::IntPredicate> predicate) { return call_method<SCAPIX_META_STRING("dropWhile"), ref<java::util::stream::IntStream>>(predicate); }
inline ref<java::util::stream::IntStream> IntPipeline::sorted() { return call_method<SCAPIX_META_STRING("sorted"), ref<java::util::stream::IntStream>>(); }
inline ref<java::util::stream::IntStream> IntPipeline::distinct() { return call_method<SCAPIX_META_STRING("distinct"), ref<java::util::stream::IntStream>>(); }
inline void IntPipeline::forEach(ref<java::util::function::IntConsumer> action) { return call_method<SCAPIX_META_STRING("forEach"), void>(action); }
inline void IntPipeline::forEachOrdered(ref<java::util::function::IntConsumer> action) { return call_method<SCAPIX_META_STRING("forEachOrdered"), void>(action); }
inline jint IntPipeline::sum() { return call_method<SCAPIX_META_STRING("sum"), jint>(); }
inline ref<java::util::OptionalInt> IntPipeline::min() { return call_method<SCAPIX_META_STRING("min"), ref<java::util::OptionalInt>>(); }
inline ref<java::util::OptionalInt> IntPipeline::max() { return call_method<SCAPIX_META_STRING("max"), ref<java::util::OptionalInt>>(); }
inline jlong IntPipeline::count() { return call_method<SCAPIX_META_STRING("count"), jlong>(); }
inline ref<java::util::OptionalDouble> IntPipeline::average() { return call_method<SCAPIX_META_STRING("average"), ref<java::util::OptionalDouble>>(); }
inline ref<java::util::IntSummaryStatistics> IntPipeline::summaryStatistics() { return call_method<SCAPIX_META_STRING("summaryStatistics"), ref<java::util::IntSummaryStatistics>>(); }
inline jint IntPipeline::reduce(jint identity, ref<java::util::function::IntBinaryOperator> op) { return call_method<SCAPIX_META_STRING("reduce"), jint>(identity, op); }
inline ref<java::util::OptionalInt> IntPipeline::reduce(ref<java::util::function::IntBinaryOperator> op) { return call_method<SCAPIX_META_STRING("reduce"), ref<java::util::OptionalInt>>(op); }
inline ref<java::lang::Object> IntPipeline::collect(ref<java::util::function::Supplier> supplier, ref<java::util::function::ObjIntConsumer> accumulator, ref<java::util::function::BiConsumer> combiner) { return call_method<SCAPIX_META_STRING("collect"), ref<java::lang::Object>>(supplier, accumulator, combiner); }
inline jboolean IntPipeline::anyMatch(ref<java::util::function::IntPredicate> predicate) { return call_method<SCAPIX_META_STRING("anyMatch"), jboolean>(predicate); }
inline jboolean IntPipeline::allMatch(ref<java::util::function::IntPredicate> predicate) { return call_method<SCAPIX_META_STRING("allMatch"), jboolean>(predicate); }
inline jboolean IntPipeline::noneMatch(ref<java::util::function::IntPredicate> predicate) { return call_method<SCAPIX_META_STRING("noneMatch"), jboolean>(predicate); }
inline ref<java::util::OptionalInt> IntPipeline::findFirst() { return call_method<SCAPIX_META_STRING("findFirst"), ref<java::util::OptionalInt>>(); }
inline ref<java::util::OptionalInt> IntPipeline::findAny() { return call_method<SCAPIX_META_STRING("findAny"), ref<java::util::OptionalInt>>(); }
inline ref<link::java::array<jint>> IntPipeline::toArray() { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<jint>>>(); }

} // namespace java::util::stream
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STREAM_INTPIPELINE_H
