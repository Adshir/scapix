// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/stream/AbstractSpinedBuffer.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/java/lang/Iterable.h>

#ifndef SCAPIX_JAVA_UTIL_STREAM_SPINEDBUFFER_H
#define SCAPIX_JAVA_UTIL_STREAM_SPINEDBUFFER_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::util { class Iterator; }
namespace java::util { class Spliterator; }
namespace java::util::function { class IntFunction; }

namespace java::util::stream {

// private
class SpinedBuffer : public object_base<SCAPIX_META_STRING("java/util/stream/SpinedBuffer"),
	java::util::stream::AbstractSpinedBuffer,
	java::util::function::Consumer,
	java::lang::Iterable>
{
public:

	ref<java::lang::Object> get(jlong index);
	void copyInto(ref<link::java::array<java::lang::Object>> array, jint offset);
	ref<link::java::array<java::lang::Object>> asArray(ref<java::util::function::IntFunction> arrayFactory);
	void clear();
	ref<java::util::Iterator> iterator();
	void forEach(ref<java::util::function::Consumer> consumer);
	void accept(ref<java::lang::Object> e);
	ref<java::lang::String> toString();
	ref<java::util::Spliterator> spliterator();

protected:

	SpinedBuffer(handle_type h) : base_(h) {}

};

} // namespace java::util::stream
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/function/IntFunction.h>

namespace scapix::java_api {
namespace java::util::stream {

inline ref<java::lang::Object> SpinedBuffer::get(jlong index) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(index); }
inline void SpinedBuffer::copyInto(ref<link::java::array<java::lang::Object>> array, jint offset) { return call_method<SCAPIX_META_STRING("copyInto"), void>(array, offset); }
inline ref<link::java::array<java::lang::Object>> SpinedBuffer::asArray(ref<java::util::function::IntFunction> arrayFactory) { return call_method<SCAPIX_META_STRING("asArray"), ref<link::java::array<java::lang::Object>>>(arrayFactory); }
inline void SpinedBuffer::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline ref<java::util::Iterator> SpinedBuffer::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::Iterator>>(); }
inline void SpinedBuffer::forEach(ref<java::util::function::Consumer> consumer) { return call_method<SCAPIX_META_STRING("forEach"), void>(consumer); }
inline void SpinedBuffer::accept(ref<java::lang::Object> e) { return call_method<SCAPIX_META_STRING("accept"), void>(e); }
inline ref<java::lang::String> SpinedBuffer::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::util::Spliterator> SpinedBuffer::spliterator() { return call_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator>>(); }

} // namespace java::util::stream
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STREAM_SPINEDBUFFER_H
