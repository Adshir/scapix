// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_STREAM_COLLECTOR_H
#define SCAPIX_JAVA_UTIL_STREAM_COLLECTOR_H

namespace scapix::java_api {

namespace java::util { class Set; }
namespace java::util::function { class BiConsumer; }
namespace java::util::function { class BinaryOperator; }
namespace java::util::function { class Function; }
namespace java::util::function { class Supplier; }
namespace java::util::stream { class Collector_Characteristics; }

namespace java::util::stream {

class Collector : public object_base<SCAPIX_META_STRING("java/util/stream/Collector"),
	java::lang::Object>
{
public:

	using Characteristics = Collector_Characteristics;

	ref<java::util::function::Supplier> supplier();
	ref<java::util::function::BiConsumer> accumulator();
	ref<java::util::function::BinaryOperator> combiner();
	ref<java::util::function::Function> finisher();
	ref<java::util::Set> characteristics();
	static ref<java::util::stream::Collector> of(ref<java::util::function::Supplier> supplier, ref<java::util::function::BiConsumer> accumulator, ref<java::util::function::BinaryOperator> combiner, ref<link::java::array<java::util::stream::Collector_Characteristics>> characteristics);
	static ref<java::util::stream::Collector> of(ref<java::util::function::Supplier> supplier, ref<java::util::function::BiConsumer> accumulator, ref<java::util::function::BinaryOperator> combiner, ref<java::util::function::Function> finisher, ref<link::java::array<java::util::stream::Collector_Characteristics>> characteristics);

protected:

	Collector(handle_type h) : base_(h) {}

};

} // namespace java::util::stream
} // namespace scapix::java_api

#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BinaryOperator.h>
#include <scapix/java_api/java/util/function/Function.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#include <scapix/java_api/java/util/stream/Collector_Characteristics.h>

namespace scapix::java_api {
namespace java::util::stream {

inline ref<java::util::function::Supplier> Collector::supplier() { return call_method<SCAPIX_META_STRING("supplier"), ref<java::util::function::Supplier>>(); }
inline ref<java::util::function::BiConsumer> Collector::accumulator() { return call_method<SCAPIX_META_STRING("accumulator"), ref<java::util::function::BiConsumer>>(); }
inline ref<java::util::function::BinaryOperator> Collector::combiner() { return call_method<SCAPIX_META_STRING("combiner"), ref<java::util::function::BinaryOperator>>(); }
inline ref<java::util::function::Function> Collector::finisher() { return call_method<SCAPIX_META_STRING("finisher"), ref<java::util::function::Function>>(); }
inline ref<java::util::Set> Collector::characteristics() { return call_method<SCAPIX_META_STRING("characteristics"), ref<java::util::Set>>(); }
inline ref<java::util::stream::Collector> Collector::of(ref<java::util::function::Supplier> supplier, ref<java::util::function::BiConsumer> accumulator, ref<java::util::function::BinaryOperator> combiner, ref<link::java::array<java::util::stream::Collector_Characteristics>> characteristics) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::stream::Collector>>(supplier, accumulator, combiner, characteristics); }
inline ref<java::util::stream::Collector> Collector::of(ref<java::util::function::Supplier> supplier, ref<java::util::function::BiConsumer> accumulator, ref<java::util::function::BinaryOperator> combiner, ref<java::util::function::Function> finisher, ref<link::java::array<java::util::stream::Collector_Characteristics>> characteristics) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::stream::Collector>>(supplier, accumulator, combiner, finisher, characteristics); }

} // namespace java::util::stream
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STREAM_COLLECTOR_H
