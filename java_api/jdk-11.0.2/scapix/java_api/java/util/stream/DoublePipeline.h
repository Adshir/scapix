// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/stream/AbstractPipeline.h>
#include <scapix/java_api/java/util/stream/DoubleStream.h>

#ifndef SCAPIX_JAVA_UTIL_STREAM_DOUBLEPIPELINE_H
#define SCAPIX_JAVA_UTIL_STREAM_DOUBLEPIPELINE_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::util { class DoubleSummaryStatistics; }
namespace java::util { class OptionalDouble; }
namespace java::util { class PrimitiveIterator_OfDouble; }
namespace java::util { class Spliterator_OfDouble; }
namespace java::util::function { class BiConsumer; }
namespace java::util::function { class DoubleBinaryOperator; }
namespace java::util::function { class DoubleConsumer; }
namespace java::util::function { class DoubleFunction; }
namespace java::util::function { class DoublePredicate; }
namespace java::util::function { class DoubleToIntFunction; }
namespace java::util::function { class DoubleToLongFunction; }
namespace java::util::function { class DoubleUnaryOperator; }
namespace java::util::function { class ObjDoubleConsumer; }
namespace java::util::function { class Supplier; }
namespace java::util::stream { class IntStream; }
namespace java::util::stream { class LongStream; }
namespace java::util::stream { class Stream; }

namespace java::util::stream {

// private
class DoublePipeline : public object_base<SCAPIX_META_STRING("java/util/stream/DoublePipeline"),
	java::util::stream::AbstractPipeline,
	java::util::stream::DoubleStream>
{
public:

	ref<java::util::PrimitiveIterator_OfDouble> iterator();
	ref<java::util::Spliterator_OfDouble> spliterator();
	ref<java::util::stream::Stream> boxed();
	ref<java::util::stream::DoubleStream> map(ref<java::util::function::DoubleUnaryOperator> mapper);
	ref<java::util::stream::Stream> mapToObj(ref<java::util::function::DoubleFunction> mapper);
	ref<java::util::stream::IntStream> mapToInt(ref<java::util::function::DoubleToIntFunction> mapper);
	ref<java::util::stream::LongStream> mapToLong(ref<java::util::function::DoubleToLongFunction> mapper);
	ref<java::util::stream::DoubleStream> flatMap(ref<java::util::function::DoubleFunction> mapper);
	ref<java::util::stream::DoubleStream> unordered();
	ref<java::util::stream::DoubleStream> filter(ref<java::util::function::DoublePredicate> predicate);
	ref<java::util::stream::DoubleStream> peek(ref<java::util::function::DoubleConsumer> action);
	ref<java::util::stream::DoubleStream> limit(jlong maxSize);
	ref<java::util::stream::DoubleStream> skip(jlong n);
	ref<java::util::stream::DoubleStream> takeWhile(ref<java::util::function::DoublePredicate> predicate);
	ref<java::util::stream::DoubleStream> dropWhile(ref<java::util::function::DoublePredicate> predicate);
	ref<java::util::stream::DoubleStream> sorted();
	ref<java::util::stream::DoubleStream> distinct();
	void forEach(ref<java::util::function::DoubleConsumer> consumer);
	void forEachOrdered(ref<java::util::function::DoubleConsumer> consumer);
	jdouble sum();
	ref<java::util::OptionalDouble> min();
	ref<java::util::OptionalDouble> max();
	ref<java::util::OptionalDouble> average();
	jlong count();
	ref<java::util::DoubleSummaryStatistics> summaryStatistics();
	jdouble reduce(jdouble identity, ref<java::util::function::DoubleBinaryOperator> p2);
	ref<java::util::OptionalDouble> reduce(ref<java::util::function::DoubleBinaryOperator> op);
	ref<java::lang::Object> collect(ref<java::util::function::Supplier> supplier, ref<java::util::function::ObjDoubleConsumer> accumulator, ref<java::util::function::BiConsumer> combiner);
	jboolean anyMatch(ref<java::util::function::DoublePredicate> predicate);
	jboolean allMatch(ref<java::util::function::DoublePredicate> predicate);
	jboolean noneMatch(ref<java::util::function::DoublePredicate> predicate);
	ref<java::util::OptionalDouble> findFirst();
	ref<java::util::OptionalDouble> findAny();
	ref<link::java::array<jdouble>> toArray();

protected:

	DoublePipeline(handle_type h) : base_(h) {}

};

} // namespace java::util::stream
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/DoubleSummaryStatistics.h>
#include <scapix/java_api/java/util/OptionalDouble.h>
#include <scapix/java_api/java/util/PrimitiveIterator_OfDouble.h>
#include <scapix/java_api/java/util/Spliterator_OfDouble.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/DoubleBinaryOperator.h>
#include <scapix/java_api/java/util/function/DoubleConsumer.h>
#include <scapix/java_api/java/util/function/DoubleFunction.h>
#include <scapix/java_api/java/util/function/DoublePredicate.h>
#include <scapix/java_api/java/util/function/DoubleToIntFunction.h>
#include <scapix/java_api/java/util/function/DoubleToLongFunction.h>
#include <scapix/java_api/java/util/function/DoubleUnaryOperator.h>
#include <scapix/java_api/java/util/function/ObjDoubleConsumer.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#include <scapix/java_api/java/util/stream/IntStream.h>
#include <scapix/java_api/java/util/stream/LongStream.h>
#include <scapix/java_api/java/util/stream/Stream.h>

namespace scapix::java_api {
namespace java::util::stream {

inline ref<java::util::PrimitiveIterator_OfDouble> DoublePipeline::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::PrimitiveIterator_OfDouble>>(); }
inline ref<java::util::Spliterator_OfDouble> DoublePipeline::spliterator() { return call_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator_OfDouble>>(); }
inline ref<java::util::stream::Stream> DoublePipeline::boxed() { return call_method<SCAPIX_META_STRING("boxed"), ref<java::util::stream::Stream>>(); }
inline ref<java::util::stream::DoubleStream> DoublePipeline::map(ref<java::util::function::DoubleUnaryOperator> mapper) { return call_method<SCAPIX_META_STRING("map"), ref<java::util::stream::DoubleStream>>(mapper); }
inline ref<java::util::stream::Stream> DoublePipeline::mapToObj(ref<java::util::function::DoubleFunction> mapper) { return call_method<SCAPIX_META_STRING("mapToObj"), ref<java::util::stream::Stream>>(mapper); }
inline ref<java::util::stream::IntStream> DoublePipeline::mapToInt(ref<java::util::function::DoubleToIntFunction> mapper) { return call_method<SCAPIX_META_STRING("mapToInt"), ref<java::util::stream::IntStream>>(mapper); }
inline ref<java::util::stream::LongStream> DoublePipeline::mapToLong(ref<java::util::function::DoubleToLongFunction> mapper) { return call_method<SCAPIX_META_STRING("mapToLong"), ref<java::util::stream::LongStream>>(mapper); }
inline ref<java::util::stream::DoubleStream> DoublePipeline::flatMap(ref<java::util::function::DoubleFunction> mapper) { return call_method<SCAPIX_META_STRING("flatMap"), ref<java::util::stream::DoubleStream>>(mapper); }
inline ref<java::util::stream::DoubleStream> DoublePipeline::unordered() { return call_method<SCAPIX_META_STRING("unordered"), ref<java::util::stream::DoubleStream>>(); }
inline ref<java::util::stream::DoubleStream> DoublePipeline::filter(ref<java::util::function::DoublePredicate> predicate) { return call_method<SCAPIX_META_STRING("filter"), ref<java::util::stream::DoubleStream>>(predicate); }
inline ref<java::util::stream::DoubleStream> DoublePipeline::peek(ref<java::util::function::DoubleConsumer> action) { return call_method<SCAPIX_META_STRING("peek"), ref<java::util::stream::DoubleStream>>(action); }
inline ref<java::util::stream::DoubleStream> DoublePipeline::limit(jlong maxSize) { return call_method<SCAPIX_META_STRING("limit"), ref<java::util::stream::DoubleStream>>(maxSize); }
inline ref<java::util::stream::DoubleStream> DoublePipeline::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), ref<java::util::stream::DoubleStream>>(n); }
inline ref<java::util::stream::DoubleStream> DoublePipeline::takeWhile(ref<java::util::function::DoublePredicate> predicate) { return call_method<SCAPIX_META_STRING("takeWhile"), ref<java::util::stream::DoubleStream>>(predicate); }
inline ref<java::util::stream::DoubleStream> DoublePipeline::dropWhile(ref<java::util::function::DoublePredicate> predicate) { return call_method<SCAPIX_META_STRING("dropWhile"), ref<java::util::stream::DoubleStream>>(predicate); }
inline ref<java::util::stream::DoubleStream> DoublePipeline::sorted() { return call_method<SCAPIX_META_STRING("sorted"), ref<java::util::stream::DoubleStream>>(); }
inline ref<java::util::stream::DoubleStream> DoublePipeline::distinct() { return call_method<SCAPIX_META_STRING("distinct"), ref<java::util::stream::DoubleStream>>(); }
inline void DoublePipeline::forEach(ref<java::util::function::DoubleConsumer> consumer) { return call_method<SCAPIX_META_STRING("forEach"), void>(consumer); }
inline void DoublePipeline::forEachOrdered(ref<java::util::function::DoubleConsumer> consumer) { return call_method<SCAPIX_META_STRING("forEachOrdered"), void>(consumer); }
inline jdouble DoublePipeline::sum() { return call_method<SCAPIX_META_STRING("sum"), jdouble>(); }
inline ref<java::util::OptionalDouble> DoublePipeline::min() { return call_method<SCAPIX_META_STRING("min"), ref<java::util::OptionalDouble>>(); }
inline ref<java::util::OptionalDouble> DoublePipeline::max() { return call_method<SCAPIX_META_STRING("max"), ref<java::util::OptionalDouble>>(); }
inline ref<java::util::OptionalDouble> DoublePipeline::average() { return call_method<SCAPIX_META_STRING("average"), ref<java::util::OptionalDouble>>(); }
inline jlong DoublePipeline::count() { return call_method<SCAPIX_META_STRING("count"), jlong>(); }
inline ref<java::util::DoubleSummaryStatistics> DoublePipeline::summaryStatistics() { return call_method<SCAPIX_META_STRING("summaryStatistics"), ref<java::util::DoubleSummaryStatistics>>(); }
inline jdouble DoublePipeline::reduce(jdouble identity, ref<java::util::function::DoubleBinaryOperator> p2) { return call_method<SCAPIX_META_STRING("reduce"), jdouble>(identity, p2); }
inline ref<java::util::OptionalDouble> DoublePipeline::reduce(ref<java::util::function::DoubleBinaryOperator> op) { return call_method<SCAPIX_META_STRING("reduce"), ref<java::util::OptionalDouble>>(op); }
inline ref<java::lang::Object> DoublePipeline::collect(ref<java::util::function::Supplier> supplier, ref<java::util::function::ObjDoubleConsumer> accumulator, ref<java::util::function::BiConsumer> combiner) { return call_method<SCAPIX_META_STRING("collect"), ref<java::lang::Object>>(supplier, accumulator, combiner); }
inline jboolean DoublePipeline::anyMatch(ref<java::util::function::DoublePredicate> predicate) { return call_method<SCAPIX_META_STRING("anyMatch"), jboolean>(predicate); }
inline jboolean DoublePipeline::allMatch(ref<java::util::function::DoublePredicate> predicate) { return call_method<SCAPIX_META_STRING("allMatch"), jboolean>(predicate); }
inline jboolean DoublePipeline::noneMatch(ref<java::util::function::DoublePredicate> predicate) { return call_method<SCAPIX_META_STRING("noneMatch"), jboolean>(predicate); }
inline ref<java::util::OptionalDouble> DoublePipeline::findFirst() { return call_method<SCAPIX_META_STRING("findFirst"), ref<java::util::OptionalDouble>>(); }
inline ref<java::util::OptionalDouble> DoublePipeline::findAny() { return call_method<SCAPIX_META_STRING("findAny"), ref<java::util::OptionalDouble>>(); }
inline ref<link::java::array<jdouble>> DoublePipeline::toArray() { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<jdouble>>>(); }

} // namespace java::util::stream
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STREAM_DOUBLEPIPELINE_H
