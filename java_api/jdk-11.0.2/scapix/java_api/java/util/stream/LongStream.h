// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/stream/BaseStream.h>

#ifndef SCAPIX_JAVA_UTIL_STREAM_LONGSTREAM_H
#define SCAPIX_JAVA_UTIL_STREAM_LONGSTREAM_H

namespace scapix::java_api {

namespace java::util { class LongSummaryStatistics; }
namespace java::util { class OptionalDouble; }
namespace java::util { class OptionalLong; }
namespace java::util { class PrimitiveIterator_OfLong; }
namespace java::util { class Spliterator_OfLong; }
namespace java::util::function { class BiConsumer; }
namespace java::util::function { class LongBinaryOperator; }
namespace java::util::function { class LongConsumer; }
namespace java::util::function { class LongFunction; }
namespace java::util::function { class LongPredicate; }
namespace java::util::function { class LongSupplier; }
namespace java::util::function { class LongToDoubleFunction; }
namespace java::util::function { class LongToIntFunction; }
namespace java::util::function { class LongUnaryOperator; }
namespace java::util::function { class ObjLongConsumer; }
namespace java::util::function { class Supplier; }
namespace java::util::stream { class DoubleStream; }
namespace java::util::stream { class IntStream; }
namespace java::util::stream { class LongStream_Builder; }
namespace java::util::stream { class Stream; }

namespace java::util::stream {

class LongStream : public object_base<SCAPIX_META_STRING("java/util/stream/LongStream"),
	java::lang::Object,
	java::util::stream::BaseStream>
{
public:

	using Builder = LongStream_Builder;

	ref<java::util::stream::LongStream> filter(ref<java::util::function::LongPredicate> p1);
	ref<java::util::stream::LongStream> map(ref<java::util::function::LongUnaryOperator> p1);
	ref<java::util::stream::Stream> mapToObj(ref<java::util::function::LongFunction> p1);
	ref<java::util::stream::IntStream> mapToInt(ref<java::util::function::LongToIntFunction> p1);
	ref<java::util::stream::DoubleStream> mapToDouble(ref<java::util::function::LongToDoubleFunction> p1);
	ref<java::util::stream::LongStream> flatMap(ref<java::util::function::LongFunction> p1);
	ref<java::util::stream::LongStream> distinct();
	ref<java::util::stream::LongStream> sorted();
	ref<java::util::stream::LongStream> peek(ref<java::util::function::LongConsumer> p1);
	ref<java::util::stream::LongStream> limit(jlong p1);
	ref<java::util::stream::LongStream> skip(jlong p1);
	ref<java::util::stream::LongStream> takeWhile(ref<java::util::function::LongPredicate> predicate);
	ref<java::util::stream::LongStream> dropWhile(ref<java::util::function::LongPredicate> predicate);
	void forEach(ref<java::util::function::LongConsumer> p1);
	void forEachOrdered(ref<java::util::function::LongConsumer> p1);
	ref<link::java::array<jlong>> toArray();
	jlong reduce(jlong p1, ref<java::util::function::LongBinaryOperator> p2);
	ref<java::util::OptionalLong> reduce(ref<java::util::function::LongBinaryOperator> p1);
	ref<java::lang::Object> collect(ref<java::util::function::Supplier> p1, ref<java::util::function::ObjLongConsumer> p2, ref<java::util::function::BiConsumer> p3);
	jlong sum();
	ref<java::util::OptionalLong> min();
	ref<java::util::OptionalLong> max();
	jlong count();
	ref<java::util::OptionalDouble> average();
	ref<java::util::LongSummaryStatistics> summaryStatistics();
	jboolean anyMatch(ref<java::util::function::LongPredicate> p1);
	jboolean allMatch(ref<java::util::function::LongPredicate> p1);
	jboolean noneMatch(ref<java::util::function::LongPredicate> p1);
	ref<java::util::OptionalLong> findFirst();
	ref<java::util::OptionalLong> findAny();
	ref<java::util::stream::DoubleStream> asDoubleStream();
	ref<java::util::stream::Stream> boxed();
	ref<java::util::stream::LongStream> sequential();
	ref<java::util::stream::LongStream> parallel();
	ref<java::util::PrimitiveIterator_OfLong> iterator();
	ref<java::util::Spliterator_OfLong> spliterator();
	static ref<java::util::stream::LongStream_Builder> builder();
	static ref<java::util::stream::LongStream> empty();
	static ref<java::util::stream::LongStream> of(jlong t);
	static ref<java::util::stream::LongStream> of(ref<link::java::array<jlong>> values);
	static ref<java::util::stream::LongStream> iterate(jlong seed, ref<java::util::function::LongUnaryOperator> p2);
	static ref<java::util::stream::LongStream> iterate(jlong seed, ref<java::util::function::LongPredicate> p2, ref<java::util::function::LongUnaryOperator> hasNext);
	static ref<java::util::stream::LongStream> generate(ref<java::util::function::LongSupplier> s);
	static ref<java::util::stream::LongStream> range(jlong startInclusive, jlong p2);
	static ref<java::util::stream::LongStream> rangeClosed(jlong startInclusive, jlong p2);
	static ref<java::util::stream::LongStream> concat(ref<java::util::stream::LongStream> a, ref<java::util::stream::LongStream> b);

protected:

	LongStream(handle_type h) : base_(h) {}

};

} // namespace java::util::stream
} // namespace scapix::java_api

#include <scapix/java_api/java/util/LongSummaryStatistics.h>
#include <scapix/java_api/java/util/OptionalDouble.h>
#include <scapix/java_api/java/util/OptionalLong.h>
#include <scapix/java_api/java/util/PrimitiveIterator_OfLong.h>
#include <scapix/java_api/java/util/Spliterator_OfLong.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/LongBinaryOperator.h>
#include <scapix/java_api/java/util/function/LongConsumer.h>
#include <scapix/java_api/java/util/function/LongFunction.h>
#include <scapix/java_api/java/util/function/LongPredicate.h>
#include <scapix/java_api/java/util/function/LongSupplier.h>
#include <scapix/java_api/java/util/function/LongToDoubleFunction.h>
#include <scapix/java_api/java/util/function/LongToIntFunction.h>
#include <scapix/java_api/java/util/function/LongUnaryOperator.h>
#include <scapix/java_api/java/util/function/ObjLongConsumer.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#include <scapix/java_api/java/util/stream/DoubleStream.h>
#include <scapix/java_api/java/util/stream/IntStream.h>
#include <scapix/java_api/java/util/stream/LongStream_Builder.h>
#include <scapix/java_api/java/util/stream/Stream.h>

namespace scapix::java_api {
namespace java::util::stream {

inline ref<java::util::stream::LongStream> LongStream::filter(ref<java::util::function::LongPredicate> p1) { return call_method<SCAPIX_META_STRING("filter"), ref<java::util::stream::LongStream>>(p1); }
inline ref<java::util::stream::LongStream> LongStream::map(ref<java::util::function::LongUnaryOperator> p1) { return call_method<SCAPIX_META_STRING("map"), ref<java::util::stream::LongStream>>(p1); }
inline ref<java::util::stream::Stream> LongStream::mapToObj(ref<java::util::function::LongFunction> p1) { return call_method<SCAPIX_META_STRING("mapToObj"), ref<java::util::stream::Stream>>(p1); }
inline ref<java::util::stream::IntStream> LongStream::mapToInt(ref<java::util::function::LongToIntFunction> p1) { return call_method<SCAPIX_META_STRING("mapToInt"), ref<java::util::stream::IntStream>>(p1); }
inline ref<java::util::stream::DoubleStream> LongStream::mapToDouble(ref<java::util::function::LongToDoubleFunction> p1) { return call_method<SCAPIX_META_STRING("mapToDouble"), ref<java::util::stream::DoubleStream>>(p1); }
inline ref<java::util::stream::LongStream> LongStream::flatMap(ref<java::util::function::LongFunction> p1) { return call_method<SCAPIX_META_STRING("flatMap"), ref<java::util::stream::LongStream>>(p1); }
inline ref<java::util::stream::LongStream> LongStream::distinct() { return call_method<SCAPIX_META_STRING("distinct"), ref<java::util::stream::LongStream>>(); }
inline ref<java::util::stream::LongStream> LongStream::sorted() { return call_method<SCAPIX_META_STRING("sorted"), ref<java::util::stream::LongStream>>(); }
inline ref<java::util::stream::LongStream> LongStream::peek(ref<java::util::function::LongConsumer> p1) { return call_method<SCAPIX_META_STRING("peek"), ref<java::util::stream::LongStream>>(p1); }
inline ref<java::util::stream::LongStream> LongStream::limit(jlong p1) { return call_method<SCAPIX_META_STRING("limit"), ref<java::util::stream::LongStream>>(p1); }
inline ref<java::util::stream::LongStream> LongStream::skip(jlong p1) { return call_method<SCAPIX_META_STRING("skip"), ref<java::util::stream::LongStream>>(p1); }
inline ref<java::util::stream::LongStream> LongStream::takeWhile(ref<java::util::function::LongPredicate> predicate) { return call_method<SCAPIX_META_STRING("takeWhile"), ref<java::util::stream::LongStream>>(predicate); }
inline ref<java::util::stream::LongStream> LongStream::dropWhile(ref<java::util::function::LongPredicate> predicate) { return call_method<SCAPIX_META_STRING("dropWhile"), ref<java::util::stream::LongStream>>(predicate); }
inline void LongStream::forEach(ref<java::util::function::LongConsumer> p1) { return call_method<SCAPIX_META_STRING("forEach"), void>(p1); }
inline void LongStream::forEachOrdered(ref<java::util::function::LongConsumer> p1) { return call_method<SCAPIX_META_STRING("forEachOrdered"), void>(p1); }
inline ref<link::java::array<jlong>> LongStream::toArray() { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<jlong>>>(); }
inline jlong LongStream::reduce(jlong p1, ref<java::util::function::LongBinaryOperator> p2) { return call_method<SCAPIX_META_STRING("reduce"), jlong>(p1, p2); }
inline ref<java::util::OptionalLong> LongStream::reduce(ref<java::util::function::LongBinaryOperator> p1) { return call_method<SCAPIX_META_STRING("reduce"), ref<java::util::OptionalLong>>(p1); }
inline ref<java::lang::Object> LongStream::collect(ref<java::util::function::Supplier> p1, ref<java::util::function::ObjLongConsumer> p2, ref<java::util::function::BiConsumer> p3) { return call_method<SCAPIX_META_STRING("collect"), ref<java::lang::Object>>(p1, p2, p3); }
inline jlong LongStream::sum() { return call_method<SCAPIX_META_STRING("sum"), jlong>(); }
inline ref<java::util::OptionalLong> LongStream::min() { return call_method<SCAPIX_META_STRING("min"), ref<java::util::OptionalLong>>(); }
inline ref<java::util::OptionalLong> LongStream::max() { return call_method<SCAPIX_META_STRING("max"), ref<java::util::OptionalLong>>(); }
inline jlong LongStream::count() { return call_method<SCAPIX_META_STRING("count"), jlong>(); }
inline ref<java::util::OptionalDouble> LongStream::average() { return call_method<SCAPIX_META_STRING("average"), ref<java::util::OptionalDouble>>(); }
inline ref<java::util::LongSummaryStatistics> LongStream::summaryStatistics() { return call_method<SCAPIX_META_STRING("summaryStatistics"), ref<java::util::LongSummaryStatistics>>(); }
inline jboolean LongStream::anyMatch(ref<java::util::function::LongPredicate> p1) { return call_method<SCAPIX_META_STRING("anyMatch"), jboolean>(p1); }
inline jboolean LongStream::allMatch(ref<java::util::function::LongPredicate> p1) { return call_method<SCAPIX_META_STRING("allMatch"), jboolean>(p1); }
inline jboolean LongStream::noneMatch(ref<java::util::function::LongPredicate> p1) { return call_method<SCAPIX_META_STRING("noneMatch"), jboolean>(p1); }
inline ref<java::util::OptionalLong> LongStream::findFirst() { return call_method<SCAPIX_META_STRING("findFirst"), ref<java::util::OptionalLong>>(); }
inline ref<java::util::OptionalLong> LongStream::findAny() { return call_method<SCAPIX_META_STRING("findAny"), ref<java::util::OptionalLong>>(); }
inline ref<java::util::stream::DoubleStream> LongStream::asDoubleStream() { return call_method<SCAPIX_META_STRING("asDoubleStream"), ref<java::util::stream::DoubleStream>>(); }
inline ref<java::util::stream::Stream> LongStream::boxed() { return call_method<SCAPIX_META_STRING("boxed"), ref<java::util::stream::Stream>>(); }
inline ref<java::util::stream::LongStream> LongStream::sequential() { return call_method<SCAPIX_META_STRING("sequential"), ref<java::util::stream::LongStream>>(); }
inline ref<java::util::stream::LongStream> LongStream::parallel() { return call_method<SCAPIX_META_STRING("parallel"), ref<java::util::stream::LongStream>>(); }
inline ref<java::util::PrimitiveIterator_OfLong> LongStream::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::PrimitiveIterator_OfLong>>(); }
inline ref<java::util::Spliterator_OfLong> LongStream::spliterator() { return call_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator_OfLong>>(); }
inline ref<java::util::stream::LongStream_Builder> LongStream::builder() { return call_static_method<SCAPIX_META_STRING("builder"), ref<java::util::stream::LongStream_Builder>>(); }
inline ref<java::util::stream::LongStream> LongStream::empty() { return call_static_method<SCAPIX_META_STRING("empty"), ref<java::util::stream::LongStream>>(); }
inline ref<java::util::stream::LongStream> LongStream::of(jlong t) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::stream::LongStream>>(t); }
inline ref<java::util::stream::LongStream> LongStream::of(ref<link::java::array<jlong>> values) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::stream::LongStream>>(values); }
inline ref<java::util::stream::LongStream> LongStream::iterate(jlong seed, ref<java::util::function::LongUnaryOperator> p2) { return call_static_method<SCAPIX_META_STRING("iterate"), ref<java::util::stream::LongStream>>(seed, p2); }
inline ref<java::util::stream::LongStream> LongStream::iterate(jlong seed, ref<java::util::function::LongPredicate> p2, ref<java::util::function::LongUnaryOperator> hasNext) { return call_static_method<SCAPIX_META_STRING("iterate"), ref<java::util::stream::LongStream>>(seed, p2, hasNext); }
inline ref<java::util::stream::LongStream> LongStream::generate(ref<java::util::function::LongSupplier> s) { return call_static_method<SCAPIX_META_STRING("generate"), ref<java::util::stream::LongStream>>(s); }
inline ref<java::util::stream::LongStream> LongStream::range(jlong startInclusive, jlong p2) { return call_static_method<SCAPIX_META_STRING("range"), ref<java::util::stream::LongStream>>(startInclusive, p2); }
inline ref<java::util::stream::LongStream> LongStream::rangeClosed(jlong startInclusive, jlong p2) { return call_static_method<SCAPIX_META_STRING("rangeClosed"), ref<java::util::stream::LongStream>>(startInclusive, p2); }
inline ref<java::util::stream::LongStream> LongStream::concat(ref<java::util::stream::LongStream> a, ref<java::util::stream::LongStream> b) { return call_static_method<SCAPIX_META_STRING("concat"), ref<java::util::stream::LongStream>>(a, b); }

} // namespace java::util::stream
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STREAM_LONGSTREAM_H
