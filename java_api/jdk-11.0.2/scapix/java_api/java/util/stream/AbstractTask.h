// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/concurrent/CountedCompleter.h>

#ifndef SCAPIX_JAVA_UTIL_STREAM_ABSTRACTTASK_H
#define SCAPIX_JAVA_UTIL_STREAM_ABSTRACTTASK_H

namespace scapix::java_api {

namespace java::lang { class Object; }

namespace java::util::stream {

// private
class AbstractTask : public object_base<SCAPIX_META_STRING("java/util/stream/AbstractTask"),
	java::util::concurrent::CountedCompleter>
{
public:

	static jint getLeafTarget();
	static jlong suggestTargetSize(jlong sizeEstimate);
	ref<java::lang::Object> getRawResult();
	void compute();
	void onCompletion(ref<java::util::concurrent::CountedCompleter> caller);

protected:

	AbstractTask(handle_type h) : base_(h) {}

};

} // namespace java::util::stream
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>

namespace scapix::java_api {
namespace java::util::stream {

inline jint AbstractTask::getLeafTarget() { return call_static_method<SCAPIX_META_STRING("getLeafTarget"), jint>(); }
inline jlong AbstractTask::suggestTargetSize(jlong sizeEstimate) { return call_static_method<SCAPIX_META_STRING("suggestTargetSize"), jlong>(sizeEstimate); }
inline ref<java::lang::Object> AbstractTask::getRawResult() { return call_method<SCAPIX_META_STRING("getRawResult"), ref<java::lang::Object>>(); }
inline void AbstractTask::compute() { return call_method<SCAPIX_META_STRING("compute"), void>(); }
inline void AbstractTask::onCompletion(ref<java::util::concurrent::CountedCompleter> caller) { return call_method<SCAPIX_META_STRING("onCompletion"), void>(caller); }

} // namespace java::util::stream
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STREAM_ABSTRACTTASK_H
