// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/Vector.h>

#ifndef SCAPIX_JAVA_UTIL_STACK_H
#define SCAPIX_JAVA_UTIL_STACK_H

namespace scapix::java_api {

namespace java::lang { class Object; }

namespace java::util {

class Stack : public object_base<SCAPIX_META_STRING("java/util/Stack"),
	java::util::Vector>
{
public:

	static ref<Stack> new_object();
	ref<java::lang::Object> push(ref<java::lang::Object> item);
	ref<java::lang::Object> pop();
	ref<java::lang::Object> peek();
	jboolean empty();
	jint search(ref<java::lang::Object> o);

protected:

	Stack(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>

namespace scapix::java_api {
namespace java::util {

inline ref<Stack> Stack::new_object() { return base_::new_object(); }
inline ref<java::lang::Object> Stack::push(ref<java::lang::Object> item) { return call_method<SCAPIX_META_STRING("push"), ref<java::lang::Object>>(item); }
inline ref<java::lang::Object> Stack::pop() { return call_method<SCAPIX_META_STRING("pop"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> Stack::peek() { return call_method<SCAPIX_META_STRING("peek"), ref<java::lang::Object>>(); }
inline jboolean Stack::empty() { return call_method<SCAPIX_META_STRING("empty"), jboolean>(); }
inline jint Stack::search(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("search"), jint>(o); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STACK_H
