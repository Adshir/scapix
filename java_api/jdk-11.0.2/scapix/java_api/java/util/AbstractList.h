// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractCollection.h>
#include <scapix/java_api/java/util/List.h>

#ifndef SCAPIX_JAVA_UTIL_ABSTRACTLIST_H
#define SCAPIX_JAVA_UTIL_ABSTRACTLIST_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::util { class Collection; }
namespace java::util { class Iterator; }
namespace java::util { class ListIterator; }

namespace java::util {

class AbstractList : public object_base<SCAPIX_META_STRING("java/util/AbstractList"),
	java::util::AbstractCollection,
	java::util::List>
{
public:

	jboolean add(ref<java::lang::Object> e);
	ref<java::lang::Object> get(jint p1);
	ref<java::lang::Object> set(jint index, ref<java::lang::Object> element);
	void add(jint index, ref<java::lang::Object> element);
	ref<java::lang::Object> remove(jint index);
	jint indexOf(ref<java::lang::Object> o);
	jint lastIndexOf(ref<java::lang::Object> o);
	void clear();
	jboolean addAll(jint index, ref<java::util::Collection> c);
	ref<java::util::Iterator> iterator();
	ref<java::util::ListIterator> listIterator();
	ref<java::util::ListIterator> listIterator(jint index);
	ref<java::util::List> subList(jint fromIndex, jint toIndex);
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();

protected:

	AbstractList(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/ListIterator.h>

namespace scapix::java_api {
namespace java::util {

inline jboolean AbstractList::add(ref<java::lang::Object> e) { return call_method<SCAPIX_META_STRING("add"), jboolean>(e); }
inline ref<java::lang::Object> AbstractList::get(jint p1) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> AbstractList::set(jint index, ref<java::lang::Object> element) { return call_method<SCAPIX_META_STRING("set"), ref<java::lang::Object>>(index, element); }
inline void AbstractList::add(jint index, ref<java::lang::Object> element) { return call_method<SCAPIX_META_STRING("add"), void>(index, element); }
inline ref<java::lang::Object> AbstractList::remove(jint index) { return call_method<SCAPIX_META_STRING("remove"), ref<java::lang::Object>>(index); }
inline jint AbstractList::indexOf(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("indexOf"), jint>(o); }
inline jint AbstractList::lastIndexOf(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("lastIndexOf"), jint>(o); }
inline void AbstractList::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline jboolean AbstractList::addAll(jint index, ref<java::util::Collection> c) { return call_method<SCAPIX_META_STRING("addAll"), jboolean>(index, c); }
inline ref<java::util::Iterator> AbstractList::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::Iterator>>(); }
inline ref<java::util::ListIterator> AbstractList::listIterator() { return call_method<SCAPIX_META_STRING("listIterator"), ref<java::util::ListIterator>>(); }
inline ref<java::util::ListIterator> AbstractList::listIterator(jint index) { return call_method<SCAPIX_META_STRING("listIterator"), ref<java::util::ListIterator>>(index); }
inline ref<java::util::List> AbstractList::subList(jint fromIndex, jint toIndex) { return call_method<SCAPIX_META_STRING("subList"), ref<java::util::List>>(fromIndex, toIndex); }
inline jboolean AbstractList::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint AbstractList::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_ABSTRACTLIST_H
