// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_RESOURCEBUNDLE_H
#define SCAPIX_JAVA_UTIL_RESOURCEBUNDLE_H

namespace scapix::java_api {

namespace java::lang { class ClassLoader; }
namespace java::lang { class Module; }
namespace java::lang { class String; }
namespace java::util { class Enumeration; }
namespace java::util { class Locale; }
namespace java::util { class ResourceBundle_Control; }
namespace java::util { class Set; }

namespace java::util {

class ResourceBundle : public object_base<SCAPIX_META_STRING("java/util/ResourceBundle"),
	java::lang::Object>
{
public:

	using Control = ResourceBundle_Control;

	ref<java::lang::String> getBaseBundleName();
	static ref<ResourceBundle> new_object();
	ref<java::lang::String> getString(ref<java::lang::String> key);
	ref<link::java::array<java::lang::String>> getStringArray(ref<java::lang::String> key);
	ref<java::lang::Object> getObject(ref<java::lang::String> key);
	ref<java::util::Locale> getLocale();
	static ref<java::util::ResourceBundle> getBundle(ref<java::lang::String> baseName);
	static ref<java::util::ResourceBundle> getBundle(ref<java::lang::String> baseName, ref<java::util::ResourceBundle_Control> control);
	static ref<java::util::ResourceBundle> getBundle(ref<java::lang::String> baseName, ref<java::util::Locale> locale);
	static ref<java::util::ResourceBundle> getBundle(ref<java::lang::String> baseName, ref<java::lang::Module> module);
	static ref<java::util::ResourceBundle> getBundle(ref<java::lang::String> baseName, ref<java::util::Locale> targetLocale, ref<java::lang::Module> module);
	static ref<java::util::ResourceBundle> getBundle(ref<java::lang::String> baseName, ref<java::util::Locale> targetLocale, ref<java::util::ResourceBundle_Control> control);
	static ref<java::util::ResourceBundle> getBundle(ref<java::lang::String> baseName, ref<java::util::Locale> locale, ref<java::lang::ClassLoader> loader);
	static ref<java::util::ResourceBundle> getBundle(ref<java::lang::String> baseName, ref<java::util::Locale> targetLocale, ref<java::lang::ClassLoader> loader, ref<java::util::ResourceBundle_Control> control);
	static void clearCache();
	static void clearCache(ref<java::lang::ClassLoader> loader);
	ref<java::util::Enumeration> getKeys();
	jboolean containsKey(ref<java::lang::String> key);
	ref<java::util::Set> keySet();

protected:

	ResourceBundle(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/Module.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/ResourceBundle_Control.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace java::util {

inline ref<java::lang::String> ResourceBundle::getBaseBundleName() { return call_method<SCAPIX_META_STRING("getBaseBundleName"), ref<java::lang::String>>(); }
inline ref<ResourceBundle> ResourceBundle::new_object() { return base_::new_object(); }
inline ref<java::lang::String> ResourceBundle::getString(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(key); }
inline ref<link::java::array<java::lang::String>> ResourceBundle::getStringArray(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getStringArray"), ref<link::java::array<java::lang::String>>>(key); }
inline ref<java::lang::Object> ResourceBundle::getObject(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getObject"), ref<java::lang::Object>>(key); }
inline ref<java::util::Locale> ResourceBundle::getLocale() { return call_method<SCAPIX_META_STRING("getLocale"), ref<java::util::Locale>>(); }
inline ref<java::util::ResourceBundle> ResourceBundle::getBundle(ref<java::lang::String> baseName) { return call_static_method<SCAPIX_META_STRING("getBundle"), ref<java::util::ResourceBundle>>(baseName); }
inline ref<java::util::ResourceBundle> ResourceBundle::getBundle(ref<java::lang::String> baseName, ref<java::util::ResourceBundle_Control> control) { return call_static_method<SCAPIX_META_STRING("getBundle"), ref<java::util::ResourceBundle>>(baseName, control); }
inline ref<java::util::ResourceBundle> ResourceBundle::getBundle(ref<java::lang::String> baseName, ref<java::util::Locale> locale) { return call_static_method<SCAPIX_META_STRING("getBundle"), ref<java::util::ResourceBundle>>(baseName, locale); }
inline ref<java::util::ResourceBundle> ResourceBundle::getBundle(ref<java::lang::String> baseName, ref<java::lang::Module> module) { return call_static_method<SCAPIX_META_STRING("getBundle"), ref<java::util::ResourceBundle>>(baseName, module); }
inline ref<java::util::ResourceBundle> ResourceBundle::getBundle(ref<java::lang::String> baseName, ref<java::util::Locale> targetLocale, ref<java::lang::Module> module) { return call_static_method<SCAPIX_META_STRING("getBundle"), ref<java::util::ResourceBundle>>(baseName, targetLocale, module); }
inline ref<java::util::ResourceBundle> ResourceBundle::getBundle(ref<java::lang::String> baseName, ref<java::util::Locale> targetLocale, ref<java::util::ResourceBundle_Control> control) { return call_static_method<SCAPIX_META_STRING("getBundle"), ref<java::util::ResourceBundle>>(baseName, targetLocale, control); }
inline ref<java::util::ResourceBundle> ResourceBundle::getBundle(ref<java::lang::String> baseName, ref<java::util::Locale> locale, ref<java::lang::ClassLoader> loader) { return call_static_method<SCAPIX_META_STRING("getBundle"), ref<java::util::ResourceBundle>>(baseName, locale, loader); }
inline ref<java::util::ResourceBundle> ResourceBundle::getBundle(ref<java::lang::String> baseName, ref<java::util::Locale> targetLocale, ref<java::lang::ClassLoader> loader, ref<java::util::ResourceBundle_Control> control) { return call_static_method<SCAPIX_META_STRING("getBundle"), ref<java::util::ResourceBundle>>(baseName, targetLocale, loader, control); }
inline void ResourceBundle::clearCache() { return call_static_method<SCAPIX_META_STRING("clearCache"), void>(); }
inline void ResourceBundle::clearCache(ref<java::lang::ClassLoader> loader) { return call_static_method<SCAPIX_META_STRING("clearCache"), void>(loader); }
inline ref<java::util::Enumeration> ResourceBundle::getKeys() { return call_method<SCAPIX_META_STRING("getKeys"), ref<java::util::Enumeration>>(); }
inline jboolean ResourceBundle::containsKey(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("containsKey"), jboolean>(key); }
inline ref<java::util::Set> ResourceBundle::keySet() { return call_method<SCAPIX_META_STRING("keySet"), ref<java::util::Set>>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_RESOURCEBUNDLE_H
