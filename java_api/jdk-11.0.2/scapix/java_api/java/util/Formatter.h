// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>
#include <scapix/java_api/java/io/Flushable.h>

#ifndef SCAPIX_JAVA_UTIL_FORMATTER_H
#define SCAPIX_JAVA_UTIL_FORMATTER_H

namespace scapix::java_api {

namespace java::io { class File; }
namespace java::io { class IOException; }
namespace java::io { class OutputStream; }
namespace java::io { class PrintStream; }
namespace java::lang { class Appendable; }
namespace java::lang { class String; }
namespace java::nio::charset { class Charset; }
namespace java::util { class Locale; }
namespace java::util { class Formatter_BigDecimalLayoutForm; }

namespace java::util {

class Formatter : public object_base<SCAPIX_META_STRING("java/util/Formatter"),
	java::lang::Object,
	java::io::Closeable,
	java::io::Flushable>
{
public:

	using BigDecimalLayoutForm = Formatter_BigDecimalLayoutForm;

	static ref<Formatter> new_object();
	static ref<Formatter> new_object(ref<java::lang::Appendable> a);
	static ref<Formatter> new_object(ref<java::util::Locale> l);
	static ref<Formatter> new_object(ref<java::lang::Appendable> a, ref<java::util::Locale> l);
	static ref<Formatter> new_object(ref<java::lang::String> fileName);
	static ref<Formatter> new_object(ref<java::lang::String> fileName, ref<java::lang::String> csn);
	static ref<Formatter> new_object(ref<java::lang::String> fileName, ref<java::lang::String> csn, ref<java::util::Locale> l);
	static ref<Formatter> new_object(ref<java::lang::String> fileName, ref<java::nio::charset::Charset> charset, ref<java::util::Locale> l);
	static ref<Formatter> new_object(ref<java::io::File> file);
	static ref<Formatter> new_object(ref<java::io::File> file, ref<java::lang::String> csn);
	static ref<Formatter> new_object(ref<java::io::File> file, ref<java::lang::String> csn, ref<java::util::Locale> l);
	static ref<Formatter> new_object(ref<java::io::File> file, ref<java::nio::charset::Charset> charset, ref<java::util::Locale> l);
	static ref<Formatter> new_object(ref<java::io::PrintStream> ps);
	static ref<Formatter> new_object(ref<java::io::OutputStream> os);
	static ref<Formatter> new_object(ref<java::io::OutputStream> os, ref<java::lang::String> csn);
	static ref<Formatter> new_object(ref<java::io::OutputStream> os, ref<java::lang::String> csn, ref<java::util::Locale> l);
	static ref<Formatter> new_object(ref<java::io::OutputStream> os, ref<java::nio::charset::Charset> charset, ref<java::util::Locale> l);
	ref<java::util::Locale> locale();
	ref<java::lang::Appendable> out();
	ref<java::lang::String> toString();
	void flush();
	void close();
	ref<java::io::IOException> ioException();
	ref<java::util::Formatter> format(ref<java::lang::String> format, ref<link::java::array<java::lang::Object>> args);
	ref<java::util::Formatter> format(ref<java::util::Locale> l, ref<java::lang::String> format, ref<link::java::array<java::lang::Object>> args);

protected:

	Formatter(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/IOException.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/lang/Appendable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#include <scapix/java_api/java/util/Locale.h>

namespace scapix::java_api {
namespace java::util {

inline ref<Formatter> Formatter::new_object() { return base_::new_object(); }
inline ref<Formatter> Formatter::new_object(ref<java::lang::Appendable> a) { return base_::new_object(a); }
inline ref<Formatter> Formatter::new_object(ref<java::util::Locale> l) { return base_::new_object(l); }
inline ref<Formatter> Formatter::new_object(ref<java::lang::Appendable> a, ref<java::util::Locale> l) { return base_::new_object(a, l); }
inline ref<Formatter> Formatter::new_object(ref<java::lang::String> fileName) { return base_::new_object(fileName); }
inline ref<Formatter> Formatter::new_object(ref<java::lang::String> fileName, ref<java::lang::String> csn) { return base_::new_object(fileName, csn); }
inline ref<Formatter> Formatter::new_object(ref<java::lang::String> fileName, ref<java::lang::String> csn, ref<java::util::Locale> l) { return base_::new_object(fileName, csn, l); }
inline ref<Formatter> Formatter::new_object(ref<java::lang::String> fileName, ref<java::nio::charset::Charset> charset, ref<java::util::Locale> l) { return base_::new_object(fileName, charset, l); }
inline ref<Formatter> Formatter::new_object(ref<java::io::File> file) { return base_::new_object(file); }
inline ref<Formatter> Formatter::new_object(ref<java::io::File> file, ref<java::lang::String> csn) { return base_::new_object(file, csn); }
inline ref<Formatter> Formatter::new_object(ref<java::io::File> file, ref<java::lang::String> csn, ref<java::util::Locale> l) { return base_::new_object(file, csn, l); }
inline ref<Formatter> Formatter::new_object(ref<java::io::File> file, ref<java::nio::charset::Charset> charset, ref<java::util::Locale> l) { return base_::new_object(file, charset, l); }
inline ref<Formatter> Formatter::new_object(ref<java::io::PrintStream> ps) { return base_::new_object(ps); }
inline ref<Formatter> Formatter::new_object(ref<java::io::OutputStream> os) { return base_::new_object(os); }
inline ref<Formatter> Formatter::new_object(ref<java::io::OutputStream> os, ref<java::lang::String> csn) { return base_::new_object(os, csn); }
inline ref<Formatter> Formatter::new_object(ref<java::io::OutputStream> os, ref<java::lang::String> csn, ref<java::util::Locale> l) { return base_::new_object(os, csn, l); }
inline ref<Formatter> Formatter::new_object(ref<java::io::OutputStream> os, ref<java::nio::charset::Charset> charset, ref<java::util::Locale> l) { return base_::new_object(os, charset, l); }
inline ref<java::util::Locale> Formatter::locale() { return call_method<SCAPIX_META_STRING("locale"), ref<java::util::Locale>>(); }
inline ref<java::lang::Appendable> Formatter::out() { return call_method<SCAPIX_META_STRING("out"), ref<java::lang::Appendable>>(); }
inline ref<java::lang::String> Formatter::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline void Formatter::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline void Formatter::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline ref<java::io::IOException> Formatter::ioException() { return call_method<SCAPIX_META_STRING("ioException"), ref<java::io::IOException>>(); }
inline ref<java::util::Formatter> Formatter::format(ref<java::lang::String> format, ref<link::java::array<java::lang::Object>> args) { return call_method<SCAPIX_META_STRING("format"), ref<java::util::Formatter>>(format, args); }
inline ref<java::util::Formatter> Formatter::format(ref<java::util::Locale> l, ref<java::lang::String> format, ref<link::java::array<java::lang::Object>> args) { return call_method<SCAPIX_META_STRING("format"), ref<java::util::Formatter>>(l, format, args); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_FORMATTER_H
