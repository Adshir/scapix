// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_STRINGUTF16_H
#define SCAPIX_JAVA_LANG_STRINGUTF16_H

namespace scapix::java_api {

namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::util { class Locale; }

namespace java::lang {

// private
class StringUTF16 : public object_base<SCAPIX_META_STRING("java/lang/StringUTF16"),
	java::lang::Object>
{
public:

	static ref<link::java::array<jbyte>> newBytesFor(jint len);
	static jint length(ref<link::java::array<jbyte>> value);
	static jint codePointAt(ref<link::java::array<jbyte>> value, jint index, jint end);
	static jint codePointBefore(ref<link::java::array<jbyte>> value, jint index);
	static jint codePointCount(ref<link::java::array<jbyte>> value, jint beginIndex, jint endIndex);
	static ref<link::java::array<jchar>> toChars(ref<link::java::array<jbyte>> value);
	static ref<link::java::array<jbyte>> toBytes(ref<link::java::array<jchar>> value, jint off, jint len);
	static ref<link::java::array<jbyte>> compress(ref<link::java::array<jchar>> val, jint off, jint len);
	static ref<link::java::array<jbyte>> compress(ref<link::java::array<jbyte>> val, jint off, jint len);
	static jint compress(ref<link::java::array<jchar>> src, jint srcOff, ref<link::java::array<jbyte>> dst, jint dstOff, jint len);
	static jint compress(ref<link::java::array<jbyte>> src, jint srcOff, ref<link::java::array<jbyte>> dst, jint dstOff, jint len);
	static ref<link::java::array<jbyte>> toBytes(ref<link::java::array<jint>> val, jint index, jint len);
	static ref<link::java::array<jbyte>> toBytes(jchar c);
	static void getChars(ref<link::java::array<jbyte>> value, jint srcBegin, jint srcEnd, ref<link::java::array<jchar>> dst, jint dstBegin);
	static void getBytes(ref<link::java::array<jbyte>> value, jint srcBegin, jint srcEnd, ref<link::java::array<jbyte>> dst, jint dstBegin);
	static jboolean equals(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other);
	static jint compareTo(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other);
	static jint compareTo(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other, jint len1, jint len2);
	static jint compareToLatin1(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other);
	static jint compareToLatin1(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other, jint len1, jint len2);
	static jint compareToCI(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other);
	static jint compareToCI_Latin1(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other);
	static jint hashCode(ref<link::java::array<jbyte>> value);
	static jint indexOf(ref<link::java::array<jbyte>> value, jint ch, jint fromIndex);
	static jint indexOf(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> str);
	static jint indexOf(ref<link::java::array<jbyte>> value, jint valueCount, ref<link::java::array<jbyte>> str, jint strCount, jint fromIndex);
	static jint indexOfLatin1(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> str);
	static jint indexOfLatin1(ref<link::java::array<jbyte>> src, jint srcCount, ref<link::java::array<jbyte>> tgt, jint tgtCount, jint fromIndex);
	static jint indexOfLatin1Unsafe(ref<link::java::array<jbyte>> src, jint srcCount, ref<link::java::array<jbyte>> tgt, jint tgtCount, jint fromIndex);
	static jint lastIndexOf(ref<link::java::array<jbyte>> src, jint srcCount, ref<link::java::array<jbyte>> tgt, jint tgtCount, jint fromIndex);
	static jint lastIndexOf(ref<link::java::array<jbyte>> value, jint ch, jint fromIndex);
	static ref<java::lang::String> replace(ref<link::java::array<jbyte>> value, jchar oldChar, jchar newChar);
	static jboolean regionMatchesCI(ref<link::java::array<jbyte>> value, jint toffset, ref<link::java::array<jbyte>> other, jint ooffset, jint len);
	static jboolean regionMatchesCI_Latin1(ref<link::java::array<jbyte>> value, jint toffset, ref<link::java::array<jbyte>> other, jint ooffset, jint len);
	static ref<java::lang::String> toLowerCase(ref<java::lang::String> str, ref<link::java::array<jbyte>> value, ref<java::util::Locale> locale);
	static ref<java::lang::String> toUpperCase(ref<java::lang::String> str, ref<link::java::array<jbyte>> value, ref<java::util::Locale> locale);
	static ref<java::lang::String> trim(ref<link::java::array<jbyte>> value);
	static jint indexOfNonWhitespace(ref<link::java::array<jbyte>> value);
	static jint lastIndexOfNonWhitespace(ref<link::java::array<jbyte>> value);
	static ref<java::lang::String> strip(ref<link::java::array<jbyte>> value);
	static ref<java::lang::String> stripLeading(ref<link::java::array<jbyte>> value);
	static ref<java::lang::String> stripTrailing(ref<link::java::array<jbyte>> value);
	static ref<java::lang::String> newString(ref<link::java::array<jbyte>> val, jint index, jint len);
	static void fillNull(ref<link::java::array<jbyte>> val, jint index, jint end);
	static void putCharSB(ref<link::java::array<jbyte>> val, jint index, jint c);
	static void putCharsSB(ref<link::java::array<jbyte>> val, jint index, ref<link::java::array<jchar>> ca, jint off, jint end);
	static void putCharsSB(ref<link::java::array<jbyte>> val, jint index, ref<java::lang::CharSequence> s, jint off, jint end);
	static jint codePointAtSB(ref<link::java::array<jbyte>> val, jint index, jint end);
	static jint codePointBeforeSB(ref<link::java::array<jbyte>> val, jint index);
	static jint codePointCountSB(ref<link::java::array<jbyte>> val, jint beginIndex, jint endIndex);
	static jint getChars(jint i, jint begin, jint end, ref<link::java::array<jbyte>> value);
	static jint getChars(jlong l, jint p2, jint begin, ref<link::java::array<jbyte>> end);
	static jboolean contentEquals(ref<link::java::array<jbyte>> v1, ref<link::java::array<jbyte>> v2, jint len);
	static jboolean contentEquals(ref<link::java::array<jbyte>> value, ref<java::lang::CharSequence> cs, jint len);
	static jint putCharsAt(ref<link::java::array<jbyte>> value, jint i, jchar c1, jchar c2, jchar c3, jchar c4);
	static jint putCharsAt(ref<link::java::array<jbyte>> value, jint i, jchar c1, jchar c2, jchar c3, jchar c4, jchar c5);
	static jchar charAt(ref<link::java::array<jbyte>> value, jint index);
	static void reverse(ref<link::java::array<jbyte>> val, jint count);
	static void inflate(ref<link::java::array<jbyte>> src, jint srcOff, ref<link::java::array<jbyte>> dst, jint dstOff, jint len);
	static jint lastIndexOfLatin1(ref<link::java::array<jbyte>> src, jint srcCount, ref<link::java::array<jbyte>> tgt, jint tgtCount, jint fromIndex);
	static void checkIndex(jint off, ref<link::java::array<jbyte>> val);
	static void checkOffset(jint off, ref<link::java::array<jbyte>> val);
	static void checkBoundsBeginEnd(jint begin, jint end, ref<link::java::array<jbyte>> val);
	static void checkBoundsOffCount(jint offset, jint count, ref<link::java::array<jbyte>> val);

protected:

	StringUTF16(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>

namespace scapix::java_api {
namespace java::lang {

inline ref<link::java::array<jbyte>> StringUTF16::newBytesFor(jint len) { return call_static_method<SCAPIX_META_STRING("newBytesFor"), ref<link::java::array<jbyte>>>(len); }
inline jint StringUTF16::length(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("length"), jint>(value); }
inline jint StringUTF16::codePointAt(ref<link::java::array<jbyte>> value, jint index, jint end) { return call_static_method<SCAPIX_META_STRING("codePointAt"), jint>(value, index, end); }
inline jint StringUTF16::codePointBefore(ref<link::java::array<jbyte>> value, jint index) { return call_static_method<SCAPIX_META_STRING("codePointBefore"), jint>(value, index); }
inline jint StringUTF16::codePointCount(ref<link::java::array<jbyte>> value, jint beginIndex, jint endIndex) { return call_static_method<SCAPIX_META_STRING("codePointCount"), jint>(value, beginIndex, endIndex); }
inline ref<link::java::array<jchar>> StringUTF16::toChars(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("toChars"), ref<link::java::array<jchar>>>(value); }
inline ref<link::java::array<jbyte>> StringUTF16::toBytes(ref<link::java::array<jchar>> value, jint off, jint len) { return call_static_method<SCAPIX_META_STRING("toBytes"), ref<link::java::array<jbyte>>>(value, off, len); }
inline ref<link::java::array<jbyte>> StringUTF16::compress(ref<link::java::array<jchar>> val, jint off, jint len) { return call_static_method<SCAPIX_META_STRING("compress"), ref<link::java::array<jbyte>>>(val, off, len); }
inline ref<link::java::array<jbyte>> StringUTF16::compress(ref<link::java::array<jbyte>> val, jint off, jint len) { return call_static_method<SCAPIX_META_STRING("compress"), ref<link::java::array<jbyte>>>(val, off, len); }
inline jint StringUTF16::compress(ref<link::java::array<jchar>> src, jint srcOff, ref<link::java::array<jbyte>> dst, jint dstOff, jint len) { return call_static_method<SCAPIX_META_STRING("compress"), jint>(src, srcOff, dst, dstOff, len); }
inline jint StringUTF16::compress(ref<link::java::array<jbyte>> src, jint srcOff, ref<link::java::array<jbyte>> dst, jint dstOff, jint len) { return call_static_method<SCAPIX_META_STRING("compress"), jint>(src, srcOff, dst, dstOff, len); }
inline ref<link::java::array<jbyte>> StringUTF16::toBytes(ref<link::java::array<jint>> val, jint index, jint len) { return call_static_method<SCAPIX_META_STRING("toBytes"), ref<link::java::array<jbyte>>>(val, index, len); }
inline ref<link::java::array<jbyte>> StringUTF16::toBytes(jchar c) { return call_static_method<SCAPIX_META_STRING("toBytes"), ref<link::java::array<jbyte>>>(c); }
inline void StringUTF16::getChars(ref<link::java::array<jbyte>> value, jint srcBegin, jint srcEnd, ref<link::java::array<jchar>> dst, jint dstBegin) { return call_static_method<SCAPIX_META_STRING("getChars"), void>(value, srcBegin, srcEnd, dst, dstBegin); }
inline void StringUTF16::getBytes(ref<link::java::array<jbyte>> value, jint srcBegin, jint srcEnd, ref<link::java::array<jbyte>> dst, jint dstBegin) { return call_static_method<SCAPIX_META_STRING("getBytes"), void>(value, srcBegin, srcEnd, dst, dstBegin); }
inline jboolean StringUTF16::equals(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other) { return call_static_method<SCAPIX_META_STRING("equals"), jboolean>(value, other); }
inline jint StringUTF16::compareTo(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other) { return call_static_method<SCAPIX_META_STRING("compareTo"), jint>(value, other); }
inline jint StringUTF16::compareTo(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other, jint len1, jint len2) { return call_static_method<SCAPIX_META_STRING("compareTo"), jint>(value, other, len1, len2); }
inline jint StringUTF16::compareToLatin1(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other) { return call_static_method<SCAPIX_META_STRING("compareToLatin1"), jint>(value, other); }
inline jint StringUTF16::compareToLatin1(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other, jint len1, jint len2) { return call_static_method<SCAPIX_META_STRING("compareToLatin1"), jint>(value, other, len1, len2); }
inline jint StringUTF16::compareToCI(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other) { return call_static_method<SCAPIX_META_STRING("compareToCI"), jint>(value, other); }
inline jint StringUTF16::compareToCI_Latin1(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other) { return call_static_method<SCAPIX_META_STRING("compareToCI_Latin1"), jint>(value, other); }
inline jint StringUTF16::hashCode(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(value); }
inline jint StringUTF16::indexOf(ref<link::java::array<jbyte>> value, jint ch, jint fromIndex) { return call_static_method<SCAPIX_META_STRING("indexOf"), jint>(value, ch, fromIndex); }
inline jint StringUTF16::indexOf(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> str) { return call_static_method<SCAPIX_META_STRING("indexOf"), jint>(value, str); }
inline jint StringUTF16::indexOf(ref<link::java::array<jbyte>> value, jint valueCount, ref<link::java::array<jbyte>> str, jint strCount, jint fromIndex) { return call_static_method<SCAPIX_META_STRING("indexOf"), jint>(value, valueCount, str, strCount, fromIndex); }
inline jint StringUTF16::indexOfLatin1(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> str) { return call_static_method<SCAPIX_META_STRING("indexOfLatin1"), jint>(value, str); }
inline jint StringUTF16::indexOfLatin1(ref<link::java::array<jbyte>> src, jint srcCount, ref<link::java::array<jbyte>> tgt, jint tgtCount, jint fromIndex) { return call_static_method<SCAPIX_META_STRING("indexOfLatin1"), jint>(src, srcCount, tgt, tgtCount, fromIndex); }
inline jint StringUTF16::indexOfLatin1Unsafe(ref<link::java::array<jbyte>> src, jint srcCount, ref<link::java::array<jbyte>> tgt, jint tgtCount, jint fromIndex) { return call_static_method<SCAPIX_META_STRING("indexOfLatin1Unsafe"), jint>(src, srcCount, tgt, tgtCount, fromIndex); }
inline jint StringUTF16::lastIndexOf(ref<link::java::array<jbyte>> src, jint srcCount, ref<link::java::array<jbyte>> tgt, jint tgtCount, jint fromIndex) { return call_static_method<SCAPIX_META_STRING("lastIndexOf"), jint>(src, srcCount, tgt, tgtCount, fromIndex); }
inline jint StringUTF16::lastIndexOf(ref<link::java::array<jbyte>> value, jint ch, jint fromIndex) { return call_static_method<SCAPIX_META_STRING("lastIndexOf"), jint>(value, ch, fromIndex); }
inline ref<java::lang::String> StringUTF16::replace(ref<link::java::array<jbyte>> value, jchar oldChar, jchar newChar) { return call_static_method<SCAPIX_META_STRING("replace"), ref<java::lang::String>>(value, oldChar, newChar); }
inline jboolean StringUTF16::regionMatchesCI(ref<link::java::array<jbyte>> value, jint toffset, ref<link::java::array<jbyte>> other, jint ooffset, jint len) { return call_static_method<SCAPIX_META_STRING("regionMatchesCI"), jboolean>(value, toffset, other, ooffset, len); }
inline jboolean StringUTF16::regionMatchesCI_Latin1(ref<link::java::array<jbyte>> value, jint toffset, ref<link::java::array<jbyte>> other, jint ooffset, jint len) { return call_static_method<SCAPIX_META_STRING("regionMatchesCI_Latin1"), jboolean>(value, toffset, other, ooffset, len); }
inline ref<java::lang::String> StringUTF16::toLowerCase(ref<java::lang::String> str, ref<link::java::array<jbyte>> value, ref<java::util::Locale> locale) { return call_static_method<SCAPIX_META_STRING("toLowerCase"), ref<java::lang::String>>(str, value, locale); }
inline ref<java::lang::String> StringUTF16::toUpperCase(ref<java::lang::String> str, ref<link::java::array<jbyte>> value, ref<java::util::Locale> locale) { return call_static_method<SCAPIX_META_STRING("toUpperCase"), ref<java::lang::String>>(str, value, locale); }
inline ref<java::lang::String> StringUTF16::trim(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("trim"), ref<java::lang::String>>(value); }
inline jint StringUTF16::indexOfNonWhitespace(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("indexOfNonWhitespace"), jint>(value); }
inline jint StringUTF16::lastIndexOfNonWhitespace(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("lastIndexOfNonWhitespace"), jint>(value); }
inline ref<java::lang::String> StringUTF16::strip(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("strip"), ref<java::lang::String>>(value); }
inline ref<java::lang::String> StringUTF16::stripLeading(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("stripLeading"), ref<java::lang::String>>(value); }
inline ref<java::lang::String> StringUTF16::stripTrailing(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("stripTrailing"), ref<java::lang::String>>(value); }
inline ref<java::lang::String> StringUTF16::newString(ref<link::java::array<jbyte>> val, jint index, jint len) { return call_static_method<SCAPIX_META_STRING("newString"), ref<java::lang::String>>(val, index, len); }
inline void StringUTF16::fillNull(ref<link::java::array<jbyte>> val, jint index, jint end) { return call_static_method<SCAPIX_META_STRING("fillNull"), void>(val, index, end); }
inline void StringUTF16::putCharSB(ref<link::java::array<jbyte>> val, jint index, jint c) { return call_static_method<SCAPIX_META_STRING("putCharSB"), void>(val, index, c); }
inline void StringUTF16::putCharsSB(ref<link::java::array<jbyte>> val, jint index, ref<link::java::array<jchar>> ca, jint off, jint end) { return call_static_method<SCAPIX_META_STRING("putCharsSB"), void>(val, index, ca, off, end); }
inline void StringUTF16::putCharsSB(ref<link::java::array<jbyte>> val, jint index, ref<java::lang::CharSequence> s, jint off, jint end) { return call_static_method<SCAPIX_META_STRING("putCharsSB"), void>(val, index, s, off, end); }
inline jint StringUTF16::codePointAtSB(ref<link::java::array<jbyte>> val, jint index, jint end) { return call_static_method<SCAPIX_META_STRING("codePointAtSB"), jint>(val, index, end); }
inline jint StringUTF16::codePointBeforeSB(ref<link::java::array<jbyte>> val, jint index) { return call_static_method<SCAPIX_META_STRING("codePointBeforeSB"), jint>(val, index); }
inline jint StringUTF16::codePointCountSB(ref<link::java::array<jbyte>> val, jint beginIndex, jint endIndex) { return call_static_method<SCAPIX_META_STRING("codePointCountSB"), jint>(val, beginIndex, endIndex); }
inline jint StringUTF16::getChars(jint i, jint begin, jint end, ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("getChars"), jint>(i, begin, end, value); }
inline jint StringUTF16::getChars(jlong l, jint p2, jint begin, ref<link::java::array<jbyte>> end) { return call_static_method<SCAPIX_META_STRING("getChars"), jint>(l, p2, begin, end); }
inline jboolean StringUTF16::contentEquals(ref<link::java::array<jbyte>> v1, ref<link::java::array<jbyte>> v2, jint len) { return call_static_method<SCAPIX_META_STRING("contentEquals"), jboolean>(v1, v2, len); }
inline jboolean StringUTF16::contentEquals(ref<link::java::array<jbyte>> value, ref<java::lang::CharSequence> cs, jint len) { return call_static_method<SCAPIX_META_STRING("contentEquals"), jboolean>(value, cs, len); }
inline jint StringUTF16::putCharsAt(ref<link::java::array<jbyte>> value, jint i, jchar c1, jchar c2, jchar c3, jchar c4) { return call_static_method<SCAPIX_META_STRING("putCharsAt"), jint>(value, i, c1, c2, c3, c4); }
inline jint StringUTF16::putCharsAt(ref<link::java::array<jbyte>> value, jint i, jchar c1, jchar c2, jchar c3, jchar c4, jchar c5) { return call_static_method<SCAPIX_META_STRING("putCharsAt"), jint>(value, i, c1, c2, c3, c4, c5); }
inline jchar StringUTF16::charAt(ref<link::java::array<jbyte>> value, jint index) { return call_static_method<SCAPIX_META_STRING("charAt"), jchar>(value, index); }
inline void StringUTF16::reverse(ref<link::java::array<jbyte>> val, jint count) { return call_static_method<SCAPIX_META_STRING("reverse"), void>(val, count); }
inline void StringUTF16::inflate(ref<link::java::array<jbyte>> src, jint srcOff, ref<link::java::array<jbyte>> dst, jint dstOff, jint len) { return call_static_method<SCAPIX_META_STRING("inflate"), void>(src, srcOff, dst, dstOff, len); }
inline jint StringUTF16::lastIndexOfLatin1(ref<link::java::array<jbyte>> src, jint srcCount, ref<link::java::array<jbyte>> tgt, jint tgtCount, jint fromIndex) { return call_static_method<SCAPIX_META_STRING("lastIndexOfLatin1"), jint>(src, srcCount, tgt, tgtCount, fromIndex); }
inline void StringUTF16::checkIndex(jint off, ref<link::java::array<jbyte>> val) { return call_static_method<SCAPIX_META_STRING("checkIndex"), void>(off, val); }
inline void StringUTF16::checkOffset(jint off, ref<link::java::array<jbyte>> val) { return call_static_method<SCAPIX_META_STRING("checkOffset"), void>(off, val); }
inline void StringUTF16::checkBoundsBeginEnd(jint begin, jint end, ref<link::java::array<jbyte>> val) { return call_static_method<SCAPIX_META_STRING("checkBoundsBeginEnd"), void>(begin, end, val); }
inline void StringUTF16::checkBoundsOffCount(jint offset, jint count, ref<link::java::array<jbyte>> val) { return call_static_method<SCAPIX_META_STRING("checkBoundsOffCount"), void>(offset, count, val); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_STRINGUTF16_H
