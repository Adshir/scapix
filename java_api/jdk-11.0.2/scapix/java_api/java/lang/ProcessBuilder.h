// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_PROCESSBUILDER_H
#define SCAPIX_JAVA_LANG_PROCESSBUILDER_H

namespace scapix::java_api {

namespace java::io { class File; }
namespace java::lang { class Process; }
namespace java::lang { class ProcessBuilder_Redirect; }
namespace java::lang { class String; }
namespace java::util { class List; }
namespace java::util { class Map; }

namespace java::lang {

class ProcessBuilder : public object_base<SCAPIX_META_STRING("java/lang/ProcessBuilder"),
	java::lang::Object>
{
public:

	using Redirect = ProcessBuilder_Redirect;

	static ref<ProcessBuilder> new_object(ref<java::util::List> command);
	static ref<ProcessBuilder> new_object(ref<link::java::array<java::lang::String>> command);
	ref<java::lang::ProcessBuilder> command(ref<java::util::List> command);
	ref<java::lang::ProcessBuilder> command(ref<link::java::array<java::lang::String>> command);
	ref<java::util::List> command();
	ref<java::util::Map> environment();
	ref<java::io::File> directory();
	ref<java::lang::ProcessBuilder> directory(ref<java::io::File> directory);
	ref<java::lang::ProcessBuilder> redirectInput(ref<java::lang::ProcessBuilder_Redirect> source);
	ref<java::lang::ProcessBuilder> redirectOutput(ref<java::lang::ProcessBuilder_Redirect> destination);
	ref<java::lang::ProcessBuilder> redirectError(ref<java::lang::ProcessBuilder_Redirect> destination);
	ref<java::lang::ProcessBuilder> redirectInput(ref<java::io::File> file);
	ref<java::lang::ProcessBuilder> redirectOutput(ref<java::io::File> file);
	ref<java::lang::ProcessBuilder> redirectError(ref<java::io::File> file);
	ref<java::lang::ProcessBuilder_Redirect> redirectInput();
	ref<java::lang::ProcessBuilder_Redirect> redirectOutput();
	ref<java::lang::ProcessBuilder_Redirect> redirectError();
	ref<java::lang::ProcessBuilder> inheritIO();
	jboolean redirectErrorStream();
	ref<java::lang::ProcessBuilder> redirectErrorStream(jboolean redirectErrorStream);
	ref<java::lang::Process> start();
	static ref<java::util::List> startPipeline(ref<java::util::List> builders);

protected:

	ProcessBuilder(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/Process.h>
#include <scapix/java_api/java/lang/ProcessBuilder_Redirect.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>

namespace scapix::java_api {
namespace java::lang {

inline ref<ProcessBuilder> ProcessBuilder::new_object(ref<java::util::List> command) { return base_::new_object(command); }
inline ref<ProcessBuilder> ProcessBuilder::new_object(ref<link::java::array<java::lang::String>> command) { return base_::new_object(command); }
inline ref<java::lang::ProcessBuilder> ProcessBuilder::command(ref<java::util::List> command) { return call_method<SCAPIX_META_STRING("command"), ref<java::lang::ProcessBuilder>>(command); }
inline ref<java::lang::ProcessBuilder> ProcessBuilder::command(ref<link::java::array<java::lang::String>> command) { return call_method<SCAPIX_META_STRING("command"), ref<java::lang::ProcessBuilder>>(command); }
inline ref<java::util::List> ProcessBuilder::command() { return call_method<SCAPIX_META_STRING("command"), ref<java::util::List>>(); }
inline ref<java::util::Map> ProcessBuilder::environment() { return call_method<SCAPIX_META_STRING("environment"), ref<java::util::Map>>(); }
inline ref<java::io::File> ProcessBuilder::directory() { return call_method<SCAPIX_META_STRING("directory"), ref<java::io::File>>(); }
inline ref<java::lang::ProcessBuilder> ProcessBuilder::directory(ref<java::io::File> directory) { return call_method<SCAPIX_META_STRING("directory"), ref<java::lang::ProcessBuilder>>(directory); }
inline ref<java::lang::ProcessBuilder> ProcessBuilder::redirectInput(ref<java::lang::ProcessBuilder_Redirect> source) { return call_method<SCAPIX_META_STRING("redirectInput"), ref<java::lang::ProcessBuilder>>(source); }
inline ref<java::lang::ProcessBuilder> ProcessBuilder::redirectOutput(ref<java::lang::ProcessBuilder_Redirect> destination) { return call_method<SCAPIX_META_STRING("redirectOutput"), ref<java::lang::ProcessBuilder>>(destination); }
inline ref<java::lang::ProcessBuilder> ProcessBuilder::redirectError(ref<java::lang::ProcessBuilder_Redirect> destination) { return call_method<SCAPIX_META_STRING("redirectError"), ref<java::lang::ProcessBuilder>>(destination); }
inline ref<java::lang::ProcessBuilder> ProcessBuilder::redirectInput(ref<java::io::File> file) { return call_method<SCAPIX_META_STRING("redirectInput"), ref<java::lang::ProcessBuilder>>(file); }
inline ref<java::lang::ProcessBuilder> ProcessBuilder::redirectOutput(ref<java::io::File> file) { return call_method<SCAPIX_META_STRING("redirectOutput"), ref<java::lang::ProcessBuilder>>(file); }
inline ref<java::lang::ProcessBuilder> ProcessBuilder::redirectError(ref<java::io::File> file) { return call_method<SCAPIX_META_STRING("redirectError"), ref<java::lang::ProcessBuilder>>(file); }
inline ref<java::lang::ProcessBuilder_Redirect> ProcessBuilder::redirectInput() { return call_method<SCAPIX_META_STRING("redirectInput"), ref<java::lang::ProcessBuilder_Redirect>>(); }
inline ref<java::lang::ProcessBuilder_Redirect> ProcessBuilder::redirectOutput() { return call_method<SCAPIX_META_STRING("redirectOutput"), ref<java::lang::ProcessBuilder_Redirect>>(); }
inline ref<java::lang::ProcessBuilder_Redirect> ProcessBuilder::redirectError() { return call_method<SCAPIX_META_STRING("redirectError"), ref<java::lang::ProcessBuilder_Redirect>>(); }
inline ref<java::lang::ProcessBuilder> ProcessBuilder::inheritIO() { return call_method<SCAPIX_META_STRING("inheritIO"), ref<java::lang::ProcessBuilder>>(); }
inline jboolean ProcessBuilder::redirectErrorStream() { return call_method<SCAPIX_META_STRING("redirectErrorStream"), jboolean>(); }
inline ref<java::lang::ProcessBuilder> ProcessBuilder::redirectErrorStream(jboolean redirectErrorStream) { return call_method<SCAPIX_META_STRING("redirectErrorStream"), ref<java::lang::ProcessBuilder>>(redirectErrorStream); }
inline ref<java::lang::Process> ProcessBuilder::start() { return call_method<SCAPIX_META_STRING("start"), ref<java::lang::Process>>(); }
inline ref<java::util::List> ProcessBuilder::startPipeline(ref<java::util::List> builders) { return call_static_method<SCAPIX_META_STRING("startPipeline"), ref<java::util::List>>(builders); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_PROCESSBUILDER_H
