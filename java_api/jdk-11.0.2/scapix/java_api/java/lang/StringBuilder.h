// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/AbstractStringBuilder.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/lang/CharSequence.h>

#ifndef SCAPIX_JAVA_LANG_STRINGBUILDER_H
#define SCAPIX_JAVA_LANG_STRINGBUILDER_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::lang { class StringBuffer; }

namespace java::lang {

class StringBuilder : public object_base<SCAPIX_META_STRING("java/lang/StringBuilder"),
	java::lang::AbstractStringBuilder,
	java::io::Serializable,
	java::lang::Comparable,
	java::lang::CharSequence>
{
public:

	static ref<StringBuilder> new_object();
	static ref<StringBuilder> new_object(jint capacity);
	static ref<StringBuilder> new_object(ref<java::lang::String> str);
	static ref<StringBuilder> new_object(ref<java::lang::CharSequence> seq);
	jint compareTo(ref<java::lang::StringBuilder> another);
	ref<java::lang::StringBuilder> append(ref<java::lang::Object> obj);
	ref<java::lang::StringBuilder> append(ref<java::lang::String> str);
	ref<java::lang::StringBuilder> append(ref<java::lang::StringBuffer> sb);
	ref<java::lang::StringBuilder> append(ref<java::lang::CharSequence> s);
	ref<java::lang::StringBuilder> append(ref<java::lang::CharSequence> s, jint start, jint end);
	ref<java::lang::StringBuilder> append(ref<link::java::array<jchar>> str);
	ref<java::lang::StringBuilder> append(ref<link::java::array<jchar>> str, jint offset, jint len);
	ref<java::lang::StringBuilder> append(jboolean b);
	ref<java::lang::StringBuilder> append(jchar c);
	ref<java::lang::StringBuilder> append(jint i);
	ref<java::lang::StringBuilder> append(jlong lng);
	ref<java::lang::StringBuilder> append(jfloat f);
	ref<java::lang::StringBuilder> append(jdouble d);
	ref<java::lang::StringBuilder> appendCodePoint(jint codePoint);
	ref<java::lang::StringBuilder> delete_(jint start, jint end);
	ref<java::lang::StringBuilder> deleteCharAt(jint index);
	ref<java::lang::StringBuilder> replace(jint start, jint end, ref<java::lang::String> str);
	ref<java::lang::StringBuilder> insert(jint index, ref<link::java::array<jchar>> str, jint offset, jint len);
	ref<java::lang::StringBuilder> insert(jint offset, ref<java::lang::Object> obj);
	ref<java::lang::StringBuilder> insert(jint offset, ref<java::lang::String> str);
	ref<java::lang::StringBuilder> insert(jint offset, ref<link::java::array<jchar>> str);
	ref<java::lang::StringBuilder> insert(jint dstOffset, ref<java::lang::CharSequence> s);
	ref<java::lang::StringBuilder> insert(jint dstOffset, ref<java::lang::CharSequence> s, jint start, jint end);
	ref<java::lang::StringBuilder> insert(jint offset, jboolean b);
	ref<java::lang::StringBuilder> insert(jint offset, jchar c);
	ref<java::lang::StringBuilder> insert(jint offset, jint i);
	ref<java::lang::StringBuilder> insert(jint offset, jlong l);
	ref<java::lang::StringBuilder> insert(jint offset, jfloat f);
	ref<java::lang::StringBuilder> insert(jint offset, jdouble d);
	jint indexOf(ref<java::lang::String> str);
	jint indexOf(ref<java::lang::String> str, jint fromIndex);
	jint lastIndexOf(ref<java::lang::String> str);
	jint lastIndexOf(ref<java::lang::String> str, jint fromIndex);
	ref<java::lang::StringBuilder> reverse();
	ref<java::lang::String> toString();

protected:

	StringBuilder(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>

namespace scapix::java_api {
namespace java::lang {

inline ref<StringBuilder> StringBuilder::new_object() { return base_::new_object(); }
inline ref<StringBuilder> StringBuilder::new_object(jint capacity) { return base_::new_object(capacity); }
inline ref<StringBuilder> StringBuilder::new_object(ref<java::lang::String> str) { return base_::new_object(str); }
inline ref<StringBuilder> StringBuilder::new_object(ref<java::lang::CharSequence> seq) { return base_::new_object(seq); }
inline jint StringBuilder::compareTo(ref<java::lang::StringBuilder> another) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(another); }
inline ref<java::lang::StringBuilder> StringBuilder::append(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuilder>>(obj); }
inline ref<java::lang::StringBuilder> StringBuilder::append(ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuilder>>(str); }
inline ref<java::lang::StringBuilder> StringBuilder::append(ref<java::lang::StringBuffer> sb) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuilder>>(sb); }
inline ref<java::lang::StringBuilder> StringBuilder::append(ref<java::lang::CharSequence> s) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuilder>>(s); }
inline ref<java::lang::StringBuilder> StringBuilder::append(ref<java::lang::CharSequence> s, jint start, jint end) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuilder>>(s, start, end); }
inline ref<java::lang::StringBuilder> StringBuilder::append(ref<link::java::array<jchar>> str) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuilder>>(str); }
inline ref<java::lang::StringBuilder> StringBuilder::append(ref<link::java::array<jchar>> str, jint offset, jint len) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuilder>>(str, offset, len); }
inline ref<java::lang::StringBuilder> StringBuilder::append(jboolean b) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuilder>>(b); }
inline ref<java::lang::StringBuilder> StringBuilder::append(jchar c) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuilder>>(c); }
inline ref<java::lang::StringBuilder> StringBuilder::append(jint i) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuilder>>(i); }
inline ref<java::lang::StringBuilder> StringBuilder::append(jlong lng) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuilder>>(lng); }
inline ref<java::lang::StringBuilder> StringBuilder::append(jfloat f) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuilder>>(f); }
inline ref<java::lang::StringBuilder> StringBuilder::append(jdouble d) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuilder>>(d); }
inline ref<java::lang::StringBuilder> StringBuilder::appendCodePoint(jint codePoint) { return call_method<SCAPIX_META_STRING("appendCodePoint"), ref<java::lang::StringBuilder>>(codePoint); }
inline ref<java::lang::StringBuilder> StringBuilder::delete_(jint start, jint end) { return call_method<SCAPIX_META_STRING("delete"), ref<java::lang::StringBuilder>>(start, end); }
inline ref<java::lang::StringBuilder> StringBuilder::deleteCharAt(jint index) { return call_method<SCAPIX_META_STRING("deleteCharAt"), ref<java::lang::StringBuilder>>(index); }
inline ref<java::lang::StringBuilder> StringBuilder::replace(jint start, jint end, ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("replace"), ref<java::lang::StringBuilder>>(start, end, str); }
inline ref<java::lang::StringBuilder> StringBuilder::insert(jint index, ref<link::java::array<jchar>> str, jint offset, jint len) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuilder>>(index, str, offset, len); }
inline ref<java::lang::StringBuilder> StringBuilder::insert(jint offset, ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuilder>>(offset, obj); }
inline ref<java::lang::StringBuilder> StringBuilder::insert(jint offset, ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuilder>>(offset, str); }
inline ref<java::lang::StringBuilder> StringBuilder::insert(jint offset, ref<link::java::array<jchar>> str) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuilder>>(offset, str); }
inline ref<java::lang::StringBuilder> StringBuilder::insert(jint dstOffset, ref<java::lang::CharSequence> s) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuilder>>(dstOffset, s); }
inline ref<java::lang::StringBuilder> StringBuilder::insert(jint dstOffset, ref<java::lang::CharSequence> s, jint start, jint end) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuilder>>(dstOffset, s, start, end); }
inline ref<java::lang::StringBuilder> StringBuilder::insert(jint offset, jboolean b) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuilder>>(offset, b); }
inline ref<java::lang::StringBuilder> StringBuilder::insert(jint offset, jchar c) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuilder>>(offset, c); }
inline ref<java::lang::StringBuilder> StringBuilder::insert(jint offset, jint i) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuilder>>(offset, i); }
inline ref<java::lang::StringBuilder> StringBuilder::insert(jint offset, jlong l) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuilder>>(offset, l); }
inline ref<java::lang::StringBuilder> StringBuilder::insert(jint offset, jfloat f) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuilder>>(offset, f); }
inline ref<java::lang::StringBuilder> StringBuilder::insert(jint offset, jdouble d) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuilder>>(offset, d); }
inline jint StringBuilder::indexOf(ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("indexOf"), jint>(str); }
inline jint StringBuilder::indexOf(ref<java::lang::String> str, jint fromIndex) { return call_method<SCAPIX_META_STRING("indexOf"), jint>(str, fromIndex); }
inline jint StringBuilder::lastIndexOf(ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("lastIndexOf"), jint>(str); }
inline jint StringBuilder::lastIndexOf(ref<java::lang::String> str, jint fromIndex) { return call_method<SCAPIX_META_STRING("lastIndexOf"), jint>(str, fromIndex); }
inline ref<java::lang::StringBuilder> StringBuilder::reverse() { return call_method<SCAPIX_META_STRING("reverse"), ref<java::lang::StringBuilder>>(); }
inline ref<java::lang::String> StringBuilder::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_STRINGBUILDER_H
