// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_MATH_H
#define SCAPIX_JAVA_LANG_MATH_H

namespace scapix::java_api {
namespace java::lang {

class Math : public object_base<SCAPIX_META_STRING("java/lang/Math"),
	java::lang::Object>
{
public:

	static jdouble E_();
	static jdouble PI_();

	static jdouble sin(jdouble a);
	static jdouble cos(jdouble a);
	static jdouble tan(jdouble a);
	static jdouble asin(jdouble a);
	static jdouble acos(jdouble a);
	static jdouble atan(jdouble a);
	static jdouble toRadians(jdouble angdeg);
	static jdouble toDegrees(jdouble angrad);
	static jdouble exp(jdouble a);
	static jdouble log(jdouble a);
	static jdouble log10(jdouble a);
	static jdouble sqrt(jdouble a);
	static jdouble cbrt(jdouble a);
	static jdouble IEEEremainder(jdouble f1, jdouble p2);
	static jdouble ceil(jdouble a);
	static jdouble floor(jdouble a);
	static jdouble rint(jdouble a);
	static jdouble atan2(jdouble y, jdouble p2);
	static jdouble pow(jdouble a, jdouble p2);
	static jint round(jfloat a);
	static jlong round(jdouble a);
	static jdouble random();
	static jint addExact(jint x, jint y);
	static jlong addExact(jlong x, jlong p2);
	static jint subtractExact(jint x, jint y);
	static jlong subtractExact(jlong x, jlong p2);
	static jint multiplyExact(jint x, jint y);
	static jlong multiplyExact(jlong x, jint p2);
	static jlong multiplyExact(jlong x, jlong p2);
	static jint incrementExact(jint a);
	static jlong incrementExact(jlong a);
	static jint decrementExact(jint a);
	static jlong decrementExact(jlong a);
	static jint negateExact(jint a);
	static jlong negateExact(jlong a);
	static jint toIntExact(jlong value);
	static jlong multiplyFull(jint x, jint y);
	static jlong multiplyHigh(jlong x, jlong p2);
	static jint floorDiv(jint x, jint y);
	static jlong floorDiv(jlong x, jint p2);
	static jlong floorDiv(jlong x, jlong p2);
	static jint floorMod(jint x, jint y);
	static jint floorMod(jlong x, jint p2);
	static jlong floorMod(jlong x, jlong p2);
	static jint abs(jint a);
	static jlong abs(jlong a);
	static jfloat abs(jfloat a);
	static jdouble abs(jdouble a);
	static jint max(jint a, jint b);
	static jlong max(jlong a, jlong p2);
	static jfloat max(jfloat a, jfloat b);
	static jdouble max(jdouble a, jdouble p2);
	static jint min(jint a, jint b);
	static jlong min(jlong a, jlong p2);
	static jfloat min(jfloat a, jfloat b);
	static jdouble min(jdouble a, jdouble p2);
	static jdouble fma(jdouble a, jdouble p2, jdouble b);
	static jfloat fma(jfloat a, jfloat b, jfloat c);
	static jdouble ulp(jdouble d);
	static jfloat ulp(jfloat f);
	static jdouble signum(jdouble d);
	static jfloat signum(jfloat f);
	static jdouble sinh(jdouble x);
	static jdouble cosh(jdouble x);
	static jdouble tanh(jdouble x);
	static jdouble hypot(jdouble x, jdouble p2);
	static jdouble expm1(jdouble x);
	static jdouble log1p(jdouble x);
	static jdouble copySign(jdouble magnitude, jdouble p2);
	static jfloat copySign(jfloat magnitude, jfloat sign);
	static jint getExponent(jfloat f);
	static jint getExponent(jdouble d);
	static jdouble nextAfter(jdouble start, jdouble p2);
	static jfloat nextAfter(jfloat start, jdouble direction);
	static jdouble nextUp(jdouble d);
	static jfloat nextUp(jfloat f);
	static jdouble nextDown(jdouble d);
	static jfloat nextDown(jfloat f);
	static jdouble scalb(jdouble d, jint p2);
	static jfloat scalb(jfloat f, jint scaleFactor);

protected:

	Math(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api


namespace scapix::java_api {
namespace java::lang {

inline jdouble Math::E_() { return get_static_field<SCAPIX_META_STRING("E"), jdouble>(); }
inline jdouble Math::PI_() { return get_static_field<SCAPIX_META_STRING("PI"), jdouble>(); }
inline jdouble Math::sin(jdouble a) { return call_static_method<SCAPIX_META_STRING("sin"), jdouble>(a); }
inline jdouble Math::cos(jdouble a) { return call_static_method<SCAPIX_META_STRING("cos"), jdouble>(a); }
inline jdouble Math::tan(jdouble a) { return call_static_method<SCAPIX_META_STRING("tan"), jdouble>(a); }
inline jdouble Math::asin(jdouble a) { return call_static_method<SCAPIX_META_STRING("asin"), jdouble>(a); }
inline jdouble Math::acos(jdouble a) { return call_static_method<SCAPIX_META_STRING("acos"), jdouble>(a); }
inline jdouble Math::atan(jdouble a) { return call_static_method<SCAPIX_META_STRING("atan"), jdouble>(a); }
inline jdouble Math::toRadians(jdouble angdeg) { return call_static_method<SCAPIX_META_STRING("toRadians"), jdouble>(angdeg); }
inline jdouble Math::toDegrees(jdouble angrad) { return call_static_method<SCAPIX_META_STRING("toDegrees"), jdouble>(angrad); }
inline jdouble Math::exp(jdouble a) { return call_static_method<SCAPIX_META_STRING("exp"), jdouble>(a); }
inline jdouble Math::log(jdouble a) { return call_static_method<SCAPIX_META_STRING("log"), jdouble>(a); }
inline jdouble Math::log10(jdouble a) { return call_static_method<SCAPIX_META_STRING("log10"), jdouble>(a); }
inline jdouble Math::sqrt(jdouble a) { return call_static_method<SCAPIX_META_STRING("sqrt"), jdouble>(a); }
inline jdouble Math::cbrt(jdouble a) { return call_static_method<SCAPIX_META_STRING("cbrt"), jdouble>(a); }
inline jdouble Math::IEEEremainder(jdouble f1, jdouble p2) { return call_static_method<SCAPIX_META_STRING("IEEEremainder"), jdouble>(f1, p2); }
inline jdouble Math::ceil(jdouble a) { return call_static_method<SCAPIX_META_STRING("ceil"), jdouble>(a); }
inline jdouble Math::floor(jdouble a) { return call_static_method<SCAPIX_META_STRING("floor"), jdouble>(a); }
inline jdouble Math::rint(jdouble a) { return call_static_method<SCAPIX_META_STRING("rint"), jdouble>(a); }
inline jdouble Math::atan2(jdouble y, jdouble p2) { return call_static_method<SCAPIX_META_STRING("atan2"), jdouble>(y, p2); }
inline jdouble Math::pow(jdouble a, jdouble p2) { return call_static_method<SCAPIX_META_STRING("pow"), jdouble>(a, p2); }
inline jint Math::round(jfloat a) { return call_static_method<SCAPIX_META_STRING("round"), jint>(a); }
inline jlong Math::round(jdouble a) { return call_static_method<SCAPIX_META_STRING("round"), jlong>(a); }
inline jdouble Math::random() { return call_static_method<SCAPIX_META_STRING("random"), jdouble>(); }
inline jint Math::addExact(jint x, jint y) { return call_static_method<SCAPIX_META_STRING("addExact"), jint>(x, y); }
inline jlong Math::addExact(jlong x, jlong p2) { return call_static_method<SCAPIX_META_STRING("addExact"), jlong>(x, p2); }
inline jint Math::subtractExact(jint x, jint y) { return call_static_method<SCAPIX_META_STRING("subtractExact"), jint>(x, y); }
inline jlong Math::subtractExact(jlong x, jlong p2) { return call_static_method<SCAPIX_META_STRING("subtractExact"), jlong>(x, p2); }
inline jint Math::multiplyExact(jint x, jint y) { return call_static_method<SCAPIX_META_STRING("multiplyExact"), jint>(x, y); }
inline jlong Math::multiplyExact(jlong x, jint p2) { return call_static_method<SCAPIX_META_STRING("multiplyExact"), jlong>(x, p2); }
inline jlong Math::multiplyExact(jlong x, jlong p2) { return call_static_method<SCAPIX_META_STRING("multiplyExact"), jlong>(x, p2); }
inline jint Math::incrementExact(jint a) { return call_static_method<SCAPIX_META_STRING("incrementExact"), jint>(a); }
inline jlong Math::incrementExact(jlong a) { return call_static_method<SCAPIX_META_STRING("incrementExact"), jlong>(a); }
inline jint Math::decrementExact(jint a) { return call_static_method<SCAPIX_META_STRING("decrementExact"), jint>(a); }
inline jlong Math::decrementExact(jlong a) { return call_static_method<SCAPIX_META_STRING("decrementExact"), jlong>(a); }
inline jint Math::negateExact(jint a) { return call_static_method<SCAPIX_META_STRING("negateExact"), jint>(a); }
inline jlong Math::negateExact(jlong a) { return call_static_method<SCAPIX_META_STRING("negateExact"), jlong>(a); }
inline jint Math::toIntExact(jlong value) { return call_static_method<SCAPIX_META_STRING("toIntExact"), jint>(value); }
inline jlong Math::multiplyFull(jint x, jint y) { return call_static_method<SCAPIX_META_STRING("multiplyFull"), jlong>(x, y); }
inline jlong Math::multiplyHigh(jlong x, jlong p2) { return call_static_method<SCAPIX_META_STRING("multiplyHigh"), jlong>(x, p2); }
inline jint Math::floorDiv(jint x, jint y) { return call_static_method<SCAPIX_META_STRING("floorDiv"), jint>(x, y); }
inline jlong Math::floorDiv(jlong x, jint p2) { return call_static_method<SCAPIX_META_STRING("floorDiv"), jlong>(x, p2); }
inline jlong Math::floorDiv(jlong x, jlong p2) { return call_static_method<SCAPIX_META_STRING("floorDiv"), jlong>(x, p2); }
inline jint Math::floorMod(jint x, jint y) { return call_static_method<SCAPIX_META_STRING("floorMod"), jint>(x, y); }
inline jint Math::floorMod(jlong x, jint p2) { return call_static_method<SCAPIX_META_STRING("floorMod"), jint>(x, p2); }
inline jlong Math::floorMod(jlong x, jlong p2) { return call_static_method<SCAPIX_META_STRING("floorMod"), jlong>(x, p2); }
inline jint Math::abs(jint a) { return call_static_method<SCAPIX_META_STRING("abs"), jint>(a); }
inline jlong Math::abs(jlong a) { return call_static_method<SCAPIX_META_STRING("abs"), jlong>(a); }
inline jfloat Math::abs(jfloat a) { return call_static_method<SCAPIX_META_STRING("abs"), jfloat>(a); }
inline jdouble Math::abs(jdouble a) { return call_static_method<SCAPIX_META_STRING("abs"), jdouble>(a); }
inline jint Math::max(jint a, jint b) { return call_static_method<SCAPIX_META_STRING("max"), jint>(a, b); }
inline jlong Math::max(jlong a, jlong p2) { return call_static_method<SCAPIX_META_STRING("max"), jlong>(a, p2); }
inline jfloat Math::max(jfloat a, jfloat b) { return call_static_method<SCAPIX_META_STRING("max"), jfloat>(a, b); }
inline jdouble Math::max(jdouble a, jdouble p2) { return call_static_method<SCAPIX_META_STRING("max"), jdouble>(a, p2); }
inline jint Math::min(jint a, jint b) { return call_static_method<SCAPIX_META_STRING("min"), jint>(a, b); }
inline jlong Math::min(jlong a, jlong p2) { return call_static_method<SCAPIX_META_STRING("min"), jlong>(a, p2); }
inline jfloat Math::min(jfloat a, jfloat b) { return call_static_method<SCAPIX_META_STRING("min"), jfloat>(a, b); }
inline jdouble Math::min(jdouble a, jdouble p2) { return call_static_method<SCAPIX_META_STRING("min"), jdouble>(a, p2); }
inline jdouble Math::fma(jdouble a, jdouble p2, jdouble b) { return call_static_method<SCAPIX_META_STRING("fma"), jdouble>(a, p2, b); }
inline jfloat Math::fma(jfloat a, jfloat b, jfloat c) { return call_static_method<SCAPIX_META_STRING("fma"), jfloat>(a, b, c); }
inline jdouble Math::ulp(jdouble d) { return call_static_method<SCAPIX_META_STRING("ulp"), jdouble>(d); }
inline jfloat Math::ulp(jfloat f) { return call_static_method<SCAPIX_META_STRING("ulp"), jfloat>(f); }
inline jdouble Math::signum(jdouble d) { return call_static_method<SCAPIX_META_STRING("signum"), jdouble>(d); }
inline jfloat Math::signum(jfloat f) { return call_static_method<SCAPIX_META_STRING("signum"), jfloat>(f); }
inline jdouble Math::sinh(jdouble x) { return call_static_method<SCAPIX_META_STRING("sinh"), jdouble>(x); }
inline jdouble Math::cosh(jdouble x) { return call_static_method<SCAPIX_META_STRING("cosh"), jdouble>(x); }
inline jdouble Math::tanh(jdouble x) { return call_static_method<SCAPIX_META_STRING("tanh"), jdouble>(x); }
inline jdouble Math::hypot(jdouble x, jdouble p2) { return call_static_method<SCAPIX_META_STRING("hypot"), jdouble>(x, p2); }
inline jdouble Math::expm1(jdouble x) { return call_static_method<SCAPIX_META_STRING("expm1"), jdouble>(x); }
inline jdouble Math::log1p(jdouble x) { return call_static_method<SCAPIX_META_STRING("log1p"), jdouble>(x); }
inline jdouble Math::copySign(jdouble magnitude, jdouble p2) { return call_static_method<SCAPIX_META_STRING("copySign"), jdouble>(magnitude, p2); }
inline jfloat Math::copySign(jfloat magnitude, jfloat sign) { return call_static_method<SCAPIX_META_STRING("copySign"), jfloat>(magnitude, sign); }
inline jint Math::getExponent(jfloat f) { return call_static_method<SCAPIX_META_STRING("getExponent"), jint>(f); }
inline jint Math::getExponent(jdouble d) { return call_static_method<SCAPIX_META_STRING("getExponent"), jint>(d); }
inline jdouble Math::nextAfter(jdouble start, jdouble p2) { return call_static_method<SCAPIX_META_STRING("nextAfter"), jdouble>(start, p2); }
inline jfloat Math::nextAfter(jfloat start, jdouble direction) { return call_static_method<SCAPIX_META_STRING("nextAfter"), jfloat>(start, direction); }
inline jdouble Math::nextUp(jdouble d) { return call_static_method<SCAPIX_META_STRING("nextUp"), jdouble>(d); }
inline jfloat Math::nextUp(jfloat f) { return call_static_method<SCAPIX_META_STRING("nextUp"), jfloat>(f); }
inline jdouble Math::nextDown(jdouble d) { return call_static_method<SCAPIX_META_STRING("nextDown"), jdouble>(d); }
inline jfloat Math::nextDown(jfloat f) { return call_static_method<SCAPIX_META_STRING("nextDown"), jfloat>(f); }
inline jdouble Math::scalb(jdouble d, jint p2) { return call_static_method<SCAPIX_META_STRING("scalb"), jdouble>(d, p2); }
inline jfloat Math::scalb(jfloat f, jint scaleFactor) { return call_static_method<SCAPIX_META_STRING("scalb"), jfloat>(f, scaleFactor); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_MATH_H
