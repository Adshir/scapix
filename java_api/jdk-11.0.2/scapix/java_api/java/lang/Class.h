// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/reflect/GenericDeclaration.h>
#include <scapix/java_api/java/lang/reflect/Type.h>
#include <scapix/java_api/java/lang/reflect/AnnotatedElement.h>

#ifndef SCAPIX_JAVA_LANG_CLASS_H
#define SCAPIX_JAVA_LANG_CLASS_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::lang { class ClassLoader; }
namespace java::lang { class Module; }
namespace java::lang { class Package; }
namespace java::lang { class String; }
namespace java::lang::annotation { class Annotation; }
namespace java::lang::reflect { class AnnotatedType; }
namespace java::lang::reflect { class Constructor; }
namespace java::lang::reflect { class Field; }
namespace java::lang::reflect { class Method; }
namespace java::lang::reflect { class TypeVariable; }
namespace java::net { class URL; }
namespace java::security { class ProtectionDomain; }

namespace java::lang {

class Class : public object_base<SCAPIX_META_STRING("java/lang/Class"),
	java::lang::Object,
	java::io::Serializable,
	java::lang::reflect::GenericDeclaration,
	java::lang::reflect::Type,
	java::lang::reflect::AnnotatedElement>
{
public:

	ref<java::lang::String> toString();
	ref<java::lang::String> toGenericString();
	static ref<java::lang::Class> forName(ref<java::lang::String> className);
	static ref<java::lang::Class> forName(ref<java::lang::String> name, jboolean initialize, ref<java::lang::ClassLoader> loader);
	static ref<java::lang::Class> forName(ref<java::lang::Module> module, ref<java::lang::String> name);
	ref<java::lang::Object> newInstance();
	jboolean isInstance(ref<java::lang::Object> p1);
	jboolean isAssignableFrom(ref<java::lang::Class> p1);
	jboolean isInterface();
	jboolean isArray();
	jboolean isPrimitive();
	jboolean isAnnotation();
	jboolean isSynthetic();
	ref<java::lang::String> getName();
	ref<java::lang::ClassLoader> getClassLoader();
	ref<java::lang::Module> getModule();
	ref<link::java::array<java::lang::reflect::TypeVariable>> getTypeParameters();
	ref<java::lang::Class> getSuperclass();
	ref<java::lang::reflect::Type> getGenericSuperclass();
	ref<java::lang::Package> getPackage();
	ref<java::lang::String> getPackageName();
	ref<link::java::array<java::lang::Class>> getInterfaces();
	ref<link::java::array<java::lang::reflect::Type>> getGenericInterfaces();
	ref<java::lang::Class> getComponentType();
	jint getModifiers();
	ref<link::java::array<java::lang::Object>> getSigners();
	ref<java::lang::reflect::Method> getEnclosingMethod();
	ref<java::lang::reflect::Constructor> getEnclosingConstructor();
	ref<java::lang::Class> getDeclaringClass();
	ref<java::lang::Class> getEnclosingClass();
	ref<java::lang::String> getSimpleName();
	ref<java::lang::String> getTypeName();
	ref<java::lang::String> getCanonicalName();
	jboolean isAnonymousClass();
	jboolean isLocalClass();
	jboolean isMemberClass();
	ref<link::java::array<java::lang::Class>> getClasses();
	ref<link::java::array<java::lang::reflect::Field>> getFields();
	ref<link::java::array<java::lang::reflect::Method>> getMethods();
	ref<link::java::array<java::lang::reflect::Constructor>> getConstructors();
	ref<java::lang::reflect::Field> getField(ref<java::lang::String> name);
	ref<java::lang::reflect::Method> getMethod(ref<java::lang::String> name, ref<link::java::array<java::lang::Class>> parameterTypes);
	ref<java::lang::reflect::Constructor> getConstructor(ref<link::java::array<java::lang::Class>> parameterTypes);
	ref<link::java::array<java::lang::Class>> getDeclaredClasses();
	ref<link::java::array<java::lang::reflect::Field>> getDeclaredFields();
	ref<link::java::array<java::lang::reflect::Method>> getDeclaredMethods();
	ref<link::java::array<java::lang::reflect::Constructor>> getDeclaredConstructors();
	ref<java::lang::reflect::Field> getDeclaredField(ref<java::lang::String> name);
	ref<java::lang::reflect::Method> getDeclaredMethod(ref<java::lang::String> name, ref<link::java::array<java::lang::Class>> parameterTypes);
	ref<java::lang::reflect::Constructor> getDeclaredConstructor(ref<link::java::array<java::lang::Class>> parameterTypes);
	ref<java::io::InputStream> getResourceAsStream(ref<java::lang::String> name);
	ref<java::net::URL> getResource(ref<java::lang::String> name);
	ref<java::security::ProtectionDomain> getProtectionDomain();
	jboolean desiredAssertionStatus();
	jboolean isEnum();
	ref<link::java::array<java::lang::Object>> getEnumConstants();
	ref<java::lang::Object> cast(ref<java::lang::Object> obj);
	ref<java::lang::Class> asSubclass(ref<java::lang::Class> clazz);
	ref<java::lang::annotation::Annotation> getAnnotation(ref<java::lang::Class> annotationClass);
	jboolean isAnnotationPresent(ref<java::lang::Class> annotationClass);
	ref<link::java::array<java::lang::annotation::Annotation>> getAnnotationsByType(ref<java::lang::Class> annotationClass);
	ref<link::java::array<java::lang::annotation::Annotation>> getAnnotations();
	ref<java::lang::annotation::Annotation> getDeclaredAnnotation(ref<java::lang::Class> annotationClass);
	ref<link::java::array<java::lang::annotation::Annotation>> getDeclaredAnnotationsByType(ref<java::lang::Class> annotationClass);
	ref<link::java::array<java::lang::annotation::Annotation>> getDeclaredAnnotations();
	ref<java::lang::reflect::AnnotatedType> getAnnotatedSuperclass();
	ref<link::java::array<java::lang::reflect::AnnotatedType>> getAnnotatedInterfaces();
	ref<java::lang::Class> getNestHost();
	jboolean isNestmateOf(ref<java::lang::Class> c);
	ref<link::java::array<java::lang::Class>> getNestMembers();

protected:

	Class(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/Module.h>
#include <scapix/java_api/java/lang/Package.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/annotation/Annotation.h>
#include <scapix/java_api/java/lang/reflect/AnnotatedType.h>
#include <scapix/java_api/java/lang/reflect/Constructor.h>
#include <scapix/java_api/java/lang/reflect/Field.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#include <scapix/java_api/java/lang/reflect/TypeVariable.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/security/ProtectionDomain.h>

namespace scapix::java_api {
namespace java::lang {

inline ref<java::lang::String> Class::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Class::toGenericString() { return call_method<SCAPIX_META_STRING("toGenericString"), ref<java::lang::String>>(); }
inline ref<java::lang::Class> Class::forName(ref<java::lang::String> className) { return call_static_method<SCAPIX_META_STRING("forName"), ref<java::lang::Class>>(className); }
inline ref<java::lang::Class> Class::forName(ref<java::lang::String> name, jboolean initialize, ref<java::lang::ClassLoader> loader) { return call_static_method<SCAPIX_META_STRING("forName"), ref<java::lang::Class>>(name, initialize, loader); }
inline ref<java::lang::Class> Class::forName(ref<java::lang::Module> module, ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("forName"), ref<java::lang::Class>>(module, name); }
inline ref<java::lang::Object> Class::newInstance() { return call_method<SCAPIX_META_STRING("newInstance"), ref<java::lang::Object>>(); }
inline jboolean Class::isInstance(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("isInstance"), jboolean>(p1); }
inline jboolean Class::isAssignableFrom(ref<java::lang::Class> p1) { return call_method<SCAPIX_META_STRING("isAssignableFrom"), jboolean>(p1); }
inline jboolean Class::isInterface() { return call_method<SCAPIX_META_STRING("isInterface"), jboolean>(); }
inline jboolean Class::isArray() { return call_method<SCAPIX_META_STRING("isArray"), jboolean>(); }
inline jboolean Class::isPrimitive() { return call_method<SCAPIX_META_STRING("isPrimitive"), jboolean>(); }
inline jboolean Class::isAnnotation() { return call_method<SCAPIX_META_STRING("isAnnotation"), jboolean>(); }
inline jboolean Class::isSynthetic() { return call_method<SCAPIX_META_STRING("isSynthetic"), jboolean>(); }
inline ref<java::lang::String> Class::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<java::lang::ClassLoader> Class::getClassLoader() { return call_method<SCAPIX_META_STRING("getClassLoader"), ref<java::lang::ClassLoader>>(); }
inline ref<java::lang::Module> Class::getModule() { return call_method<SCAPIX_META_STRING("getModule"), ref<java::lang::Module>>(); }
inline ref<link::java::array<java::lang::reflect::TypeVariable>> Class::getTypeParameters() { return call_method<SCAPIX_META_STRING("getTypeParameters"), ref<link::java::array<java::lang::reflect::TypeVariable>>>(); }
inline ref<java::lang::Class> Class::getSuperclass() { return call_method<SCAPIX_META_STRING("getSuperclass"), ref<java::lang::Class>>(); }
inline ref<java::lang::reflect::Type> Class::getGenericSuperclass() { return call_method<SCAPIX_META_STRING("getGenericSuperclass"), ref<java::lang::reflect::Type>>(); }
inline ref<java::lang::Package> Class::getPackage() { return call_method<SCAPIX_META_STRING("getPackage"), ref<java::lang::Package>>(); }
inline ref<java::lang::String> Class::getPackageName() { return call_method<SCAPIX_META_STRING("getPackageName"), ref<java::lang::String>>(); }
inline ref<link::java::array<java::lang::Class>> Class::getInterfaces() { return call_method<SCAPIX_META_STRING("getInterfaces"), ref<link::java::array<java::lang::Class>>>(); }
inline ref<link::java::array<java::lang::reflect::Type>> Class::getGenericInterfaces() { return call_method<SCAPIX_META_STRING("getGenericInterfaces"), ref<link::java::array<java::lang::reflect::Type>>>(); }
inline ref<java::lang::Class> Class::getComponentType() { return call_method<SCAPIX_META_STRING("getComponentType"), ref<java::lang::Class>>(); }
inline jint Class::getModifiers() { return call_method<SCAPIX_META_STRING("getModifiers"), jint>(); }
inline ref<link::java::array<java::lang::Object>> Class::getSigners() { return call_method<SCAPIX_META_STRING("getSigners"), ref<link::java::array<java::lang::Object>>>(); }
inline ref<java::lang::reflect::Method> Class::getEnclosingMethod() { return call_method<SCAPIX_META_STRING("getEnclosingMethod"), ref<java::lang::reflect::Method>>(); }
inline ref<java::lang::reflect::Constructor> Class::getEnclosingConstructor() { return call_method<SCAPIX_META_STRING("getEnclosingConstructor"), ref<java::lang::reflect::Constructor>>(); }
inline ref<java::lang::Class> Class::getDeclaringClass() { return call_method<SCAPIX_META_STRING("getDeclaringClass"), ref<java::lang::Class>>(); }
inline ref<java::lang::Class> Class::getEnclosingClass() { return call_method<SCAPIX_META_STRING("getEnclosingClass"), ref<java::lang::Class>>(); }
inline ref<java::lang::String> Class::getSimpleName() { return call_method<SCAPIX_META_STRING("getSimpleName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Class::getTypeName() { return call_method<SCAPIX_META_STRING("getTypeName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Class::getCanonicalName() { return call_method<SCAPIX_META_STRING("getCanonicalName"), ref<java::lang::String>>(); }
inline jboolean Class::isAnonymousClass() { return call_method<SCAPIX_META_STRING("isAnonymousClass"), jboolean>(); }
inline jboolean Class::isLocalClass() { return call_method<SCAPIX_META_STRING("isLocalClass"), jboolean>(); }
inline jboolean Class::isMemberClass() { return call_method<SCAPIX_META_STRING("isMemberClass"), jboolean>(); }
inline ref<link::java::array<java::lang::Class>> Class::getClasses() { return call_method<SCAPIX_META_STRING("getClasses"), ref<link::java::array<java::lang::Class>>>(); }
inline ref<link::java::array<java::lang::reflect::Field>> Class::getFields() { return call_method<SCAPIX_META_STRING("getFields"), ref<link::java::array<java::lang::reflect::Field>>>(); }
inline ref<link::java::array<java::lang::reflect::Method>> Class::getMethods() { return call_method<SCAPIX_META_STRING("getMethods"), ref<link::java::array<java::lang::reflect::Method>>>(); }
inline ref<link::java::array<java::lang::reflect::Constructor>> Class::getConstructors() { return call_method<SCAPIX_META_STRING("getConstructors"), ref<link::java::array<java::lang::reflect::Constructor>>>(); }
inline ref<java::lang::reflect::Field> Class::getField(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getField"), ref<java::lang::reflect::Field>>(name); }
inline ref<java::lang::reflect::Method> Class::getMethod(ref<java::lang::String> name, ref<link::java::array<java::lang::Class>> parameterTypes) { return call_method<SCAPIX_META_STRING("getMethod"), ref<java::lang::reflect::Method>>(name, parameterTypes); }
inline ref<java::lang::reflect::Constructor> Class::getConstructor(ref<link::java::array<java::lang::Class>> parameterTypes) { return call_method<SCAPIX_META_STRING("getConstructor"), ref<java::lang::reflect::Constructor>>(parameterTypes); }
inline ref<link::java::array<java::lang::Class>> Class::getDeclaredClasses() { return call_method<SCAPIX_META_STRING("getDeclaredClasses"), ref<link::java::array<java::lang::Class>>>(); }
inline ref<link::java::array<java::lang::reflect::Field>> Class::getDeclaredFields() { return call_method<SCAPIX_META_STRING("getDeclaredFields"), ref<link::java::array<java::lang::reflect::Field>>>(); }
inline ref<link::java::array<java::lang::reflect::Method>> Class::getDeclaredMethods() { return call_method<SCAPIX_META_STRING("getDeclaredMethods"), ref<link::java::array<java::lang::reflect::Method>>>(); }
inline ref<link::java::array<java::lang::reflect::Constructor>> Class::getDeclaredConstructors() { return call_method<SCAPIX_META_STRING("getDeclaredConstructors"), ref<link::java::array<java::lang::reflect::Constructor>>>(); }
inline ref<java::lang::reflect::Field> Class::getDeclaredField(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getDeclaredField"), ref<java::lang::reflect::Field>>(name); }
inline ref<java::lang::reflect::Method> Class::getDeclaredMethod(ref<java::lang::String> name, ref<link::java::array<java::lang::Class>> parameterTypes) { return call_method<SCAPIX_META_STRING("getDeclaredMethod"), ref<java::lang::reflect::Method>>(name, parameterTypes); }
inline ref<java::lang::reflect::Constructor> Class::getDeclaredConstructor(ref<link::java::array<java::lang::Class>> parameterTypes) { return call_method<SCAPIX_META_STRING("getDeclaredConstructor"), ref<java::lang::reflect::Constructor>>(parameterTypes); }
inline ref<java::io::InputStream> Class::getResourceAsStream(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getResourceAsStream"), ref<java::io::InputStream>>(name); }
inline ref<java::net::URL> Class::getResource(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getResource"), ref<java::net::URL>>(name); }
inline ref<java::security::ProtectionDomain> Class::getProtectionDomain() { return call_method<SCAPIX_META_STRING("getProtectionDomain"), ref<java::security::ProtectionDomain>>(); }
inline jboolean Class::desiredAssertionStatus() { return call_method<SCAPIX_META_STRING("desiredAssertionStatus"), jboolean>(); }
inline jboolean Class::isEnum() { return call_method<SCAPIX_META_STRING("isEnum"), jboolean>(); }
inline ref<link::java::array<java::lang::Object>> Class::getEnumConstants() { return call_method<SCAPIX_META_STRING("getEnumConstants"), ref<link::java::array<java::lang::Object>>>(); }
inline ref<java::lang::Object> Class::cast(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("cast"), ref<java::lang::Object>>(obj); }
inline ref<java::lang::Class> Class::asSubclass(ref<java::lang::Class> clazz) { return call_method<SCAPIX_META_STRING("asSubclass"), ref<java::lang::Class>>(clazz); }
inline ref<java::lang::annotation::Annotation> Class::getAnnotation(ref<java::lang::Class> annotationClass) { return call_method<SCAPIX_META_STRING("getAnnotation"), ref<java::lang::annotation::Annotation>>(annotationClass); }
inline jboolean Class::isAnnotationPresent(ref<java::lang::Class> annotationClass) { return call_method<SCAPIX_META_STRING("isAnnotationPresent"), jboolean>(annotationClass); }
inline ref<link::java::array<java::lang::annotation::Annotation>> Class::getAnnotationsByType(ref<java::lang::Class> annotationClass) { return call_method<SCAPIX_META_STRING("getAnnotationsByType"), ref<link::java::array<java::lang::annotation::Annotation>>>(annotationClass); }
inline ref<link::java::array<java::lang::annotation::Annotation>> Class::getAnnotations() { return call_method<SCAPIX_META_STRING("getAnnotations"), ref<link::java::array<java::lang::annotation::Annotation>>>(); }
inline ref<java::lang::annotation::Annotation> Class::getDeclaredAnnotation(ref<java::lang::Class> annotationClass) { return call_method<SCAPIX_META_STRING("getDeclaredAnnotation"), ref<java::lang::annotation::Annotation>>(annotationClass); }
inline ref<link::java::array<java::lang::annotation::Annotation>> Class::getDeclaredAnnotationsByType(ref<java::lang::Class> annotationClass) { return call_method<SCAPIX_META_STRING("getDeclaredAnnotationsByType"), ref<link::java::array<java::lang::annotation::Annotation>>>(annotationClass); }
inline ref<link::java::array<java::lang::annotation::Annotation>> Class::getDeclaredAnnotations() { return call_method<SCAPIX_META_STRING("getDeclaredAnnotations"), ref<link::java::array<java::lang::annotation::Annotation>>>(); }
inline ref<java::lang::reflect::AnnotatedType> Class::getAnnotatedSuperclass() { return call_method<SCAPIX_META_STRING("getAnnotatedSuperclass"), ref<java::lang::reflect::AnnotatedType>>(); }
inline ref<link::java::array<java::lang::reflect::AnnotatedType>> Class::getAnnotatedInterfaces() { return call_method<SCAPIX_META_STRING("getAnnotatedInterfaces"), ref<link::java::array<java::lang::reflect::AnnotatedType>>>(); }
inline ref<java::lang::Class> Class::getNestHost() { return call_method<SCAPIX_META_STRING("getNestHost"), ref<java::lang::Class>>(); }
inline jboolean Class::isNestmateOf(ref<java::lang::Class> c) { return call_method<SCAPIX_META_STRING("isNestmateOf"), jboolean>(c); }
inline ref<link::java::array<java::lang::Class>> Class::getNestMembers() { return call_method<SCAPIX_META_STRING("getNestMembers"), ref<link::java::array<java::lang::Class>>>(); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_CLASS_H
