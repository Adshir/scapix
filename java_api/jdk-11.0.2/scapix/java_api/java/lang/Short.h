// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_LANG_SHORT_H
#define SCAPIX_JAVA_LANG_SHORT_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class Object; }
namespace java::lang { class String; }

namespace java::lang {

class Short : public object_base<SCAPIX_META_STRING("java/lang/Short"),
	java::lang::Number,
	java::lang::Comparable>
{
public:

	static jshort MIN_VALUE_();
	static jshort MAX_VALUE_();
	static ref<java::lang::Class> TYPE_();
	static jint SIZE_();
	static jint BYTES_();

	static ref<java::lang::String> toString(jshort s);
	static jshort parseShort(ref<java::lang::String> s, jint radix);
	static jshort parseShort(ref<java::lang::String> s);
	static ref<java::lang::Short> valueOf(ref<java::lang::String> s, jint radix);
	static ref<java::lang::Short> valueOf(ref<java::lang::String> s);
	static ref<java::lang::Short> valueOf(jshort s);
	static ref<java::lang::Short> decode(ref<java::lang::String> nm);
	static ref<Short> new_object(jshort value);
	static ref<Short> new_object(ref<java::lang::String> s);
	jbyte byteValue();
	jshort shortValue();
	jint intValue();
	jlong longValue();
	jfloat floatValue();
	jdouble doubleValue();
	ref<java::lang::String> toString();
	jint hashCode();
	static jint hashCode(jshort value);
	jboolean equals(ref<java::lang::Object> obj);
	jint compareTo(ref<java::lang::Short> anotherShort);
	static jint compare(jshort x, jshort y);
	static jint compareUnsigned(jshort x, jshort y);
	static jshort reverseBytes(jshort i);
	static jint toUnsignedInt(jshort x);
	static jlong toUnsignedLong(jshort x);

protected:

	Short(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::lang {

inline jshort Short::MIN_VALUE_() { return get_static_field<SCAPIX_META_STRING("MIN_VALUE"), jshort>(); }
inline jshort Short::MAX_VALUE_() { return get_static_field<SCAPIX_META_STRING("MAX_VALUE"), jshort>(); }
inline ref<java::lang::Class> Short::TYPE_() { return get_static_field<SCAPIX_META_STRING("TYPE"), ref<java::lang::Class>>(); }
inline jint Short::SIZE_() { return get_static_field<SCAPIX_META_STRING("SIZE"), jint>(); }
inline jint Short::BYTES_() { return get_static_field<SCAPIX_META_STRING("BYTES"), jint>(); }
inline ref<java::lang::String> Short::toString(jshort s) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(s); }
inline jshort Short::parseShort(ref<java::lang::String> s, jint radix) { return call_static_method<SCAPIX_META_STRING("parseShort"), jshort>(s, radix); }
inline jshort Short::parseShort(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("parseShort"), jshort>(s); }
inline ref<java::lang::Short> Short::valueOf(ref<java::lang::String> s, jint radix) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::lang::Short>>(s, radix); }
inline ref<java::lang::Short> Short::valueOf(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::lang::Short>>(s); }
inline ref<java::lang::Short> Short::valueOf(jshort s) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::lang::Short>>(s); }
inline ref<java::lang::Short> Short::decode(ref<java::lang::String> nm) { return call_static_method<SCAPIX_META_STRING("decode"), ref<java::lang::Short>>(nm); }
inline ref<Short> Short::new_object(jshort value) { return base_::new_object(value); }
inline ref<Short> Short::new_object(ref<java::lang::String> s) { return base_::new_object(s); }
inline jbyte Short::byteValue() { return call_method<SCAPIX_META_STRING("byteValue"), jbyte>(); }
inline jshort Short::shortValue() { return call_method<SCAPIX_META_STRING("shortValue"), jshort>(); }
inline jint Short::intValue() { return call_method<SCAPIX_META_STRING("intValue"), jint>(); }
inline jlong Short::longValue() { return call_method<SCAPIX_META_STRING("longValue"), jlong>(); }
inline jfloat Short::floatValue() { return call_method<SCAPIX_META_STRING("floatValue"), jfloat>(); }
inline jdouble Short::doubleValue() { return call_method<SCAPIX_META_STRING("doubleValue"), jdouble>(); }
inline ref<java::lang::String> Short::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint Short::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint Short::hashCode(jshort value) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(value); }
inline jboolean Short::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint Short::compareTo(ref<java::lang::Short> anotherShort) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(anotherShort); }
inline jint Short::compare(jshort x, jshort y) { return call_static_method<SCAPIX_META_STRING("compare"), jint>(x, y); }
inline jint Short::compareUnsigned(jshort x, jshort y) { return call_static_method<SCAPIX_META_STRING("compareUnsigned"), jint>(x, y); }
inline jshort Short::reverseBytes(jshort i) { return call_static_method<SCAPIX_META_STRING("reverseBytes"), jshort>(i); }
inline jint Short::toUnsignedInt(jshort x) { return call_static_method<SCAPIX_META_STRING("toUnsignedInt"), jint>(x); }
inline jlong Short::toUnsignedLong(jshort x) { return call_static_method<SCAPIX_META_STRING("toUnsignedLong"), jlong>(x); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_SHORT_H
