// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_LANG_CHARACTER_H
#define SCAPIX_JAVA_LANG_CHARACTER_H

namespace scapix::java_api {

namespace java::lang { class CharSequence; }
namespace java::lang { class Class; }
namespace java::lang { class String; }
namespace java::lang { class Character_UnicodeScript; }
namespace java::lang { class Character_UnicodeBlock; }
namespace java::lang { class Character_Subset; }

namespace java::lang {

class Character : public object_base<SCAPIX_META_STRING("java/lang/Character"),
	java::lang::Object,
	java::io::Serializable,
	java::lang::Comparable>
{
public:

	using UnicodeScript = Character_UnicodeScript;
	using UnicodeBlock = Character_UnicodeBlock;
	using Subset = Character_Subset;

	static jint MIN_RADIX_();
	static jint MAX_RADIX_();
	static jchar MIN_VALUE_();
	static jchar MAX_VALUE_();
	static ref<java::lang::Class> TYPE_();
	static jbyte UNASSIGNED_();
	static jbyte UPPERCASE_LETTER_();
	static jbyte LOWERCASE_LETTER_();
	static jbyte TITLECASE_LETTER_();
	static jbyte MODIFIER_LETTER_();
	static jbyte OTHER_LETTER_();
	static jbyte NON_SPACING_MARK_();
	static jbyte ENCLOSING_MARK_();
	static jbyte COMBINING_SPACING_MARK_();
	static jbyte DECIMAL_DIGIT_NUMBER_();
	static jbyte LETTER_NUMBER_();
	static jbyte OTHER_NUMBER_();
	static jbyte SPACE_SEPARATOR_();
	static jbyte LINE_SEPARATOR_();
	static jbyte PARAGRAPH_SEPARATOR_();
	static jbyte CONTROL_();
	static jbyte FORMAT_();
	static jbyte PRIVATE_USE_();
	static jbyte SURROGATE_();
	static jbyte DASH_PUNCTUATION_();
	static jbyte START_PUNCTUATION_();
	static jbyte END_PUNCTUATION_();
	static jbyte CONNECTOR_PUNCTUATION_();
	static jbyte OTHER_PUNCTUATION_();
	static jbyte MATH_SYMBOL_();
	static jbyte CURRENCY_SYMBOL_();
	static jbyte MODIFIER_SYMBOL_();
	static jbyte OTHER_SYMBOL_();
	static jbyte INITIAL_QUOTE_PUNCTUATION_();
	static jbyte FINAL_QUOTE_PUNCTUATION_();
	static jbyte DIRECTIONALITY_UNDEFINED_();
	static jbyte DIRECTIONALITY_LEFT_TO_RIGHT_();
	static jbyte DIRECTIONALITY_RIGHT_TO_LEFT_();
	static jbyte DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC_();
	static jbyte DIRECTIONALITY_EUROPEAN_NUMBER_();
	static jbyte DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR_();
	static jbyte DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR_();
	static jbyte DIRECTIONALITY_ARABIC_NUMBER_();
	static jbyte DIRECTIONALITY_COMMON_NUMBER_SEPARATOR_();
	static jbyte DIRECTIONALITY_NONSPACING_MARK_();
	static jbyte DIRECTIONALITY_BOUNDARY_NEUTRAL_();
	static jbyte DIRECTIONALITY_PARAGRAPH_SEPARATOR_();
	static jbyte DIRECTIONALITY_SEGMENT_SEPARATOR_();
	static jbyte DIRECTIONALITY_WHITESPACE_();
	static jbyte DIRECTIONALITY_OTHER_NEUTRALS_();
	static jbyte DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING_();
	static jbyte DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE_();
	static jbyte DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING_();
	static jbyte DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE_();
	static jbyte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT_();
	static jbyte DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE_();
	static jbyte DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE_();
	static jbyte DIRECTIONALITY_FIRST_STRONG_ISOLATE_();
	static jbyte DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE_();
	static jchar MIN_HIGH_SURROGATE_();
	static jchar MAX_HIGH_SURROGATE_();
	static jchar MIN_LOW_SURROGATE_();
	static jchar MAX_LOW_SURROGATE_();
	static jchar MIN_SURROGATE_();
	static jchar MAX_SURROGATE_();
	static jint MIN_SUPPLEMENTARY_CODE_POINT_();
	static jint MIN_CODE_POINT_();
	static jint MAX_CODE_POINT_();
	static jint SIZE_();
	static jint BYTES_();

	static ref<Character> new_object(jchar value);
	static ref<java::lang::Character> valueOf(jchar c);
	jchar charValue();
	jint hashCode();
	static jint hashCode(jchar value);
	jboolean equals(ref<java::lang::Object> obj);
	ref<java::lang::String> toString();
	static ref<java::lang::String> toString(jchar c);
	static ref<java::lang::String> toString(jint codePoint);
	static jboolean isValidCodePoint(jint codePoint);
	static jboolean isBmpCodePoint(jint codePoint);
	static jboolean isSupplementaryCodePoint(jint codePoint);
	static jboolean isHighSurrogate(jchar ch);
	static jboolean isLowSurrogate(jchar ch);
	static jboolean isSurrogate(jchar ch);
	static jboolean isSurrogatePair(jchar high, jchar low);
	static jint charCount(jint codePoint);
	static jint toCodePoint(jchar high, jchar low);
	static jint codePointAt(ref<java::lang::CharSequence> seq, jint index);
	static jint codePointAt(ref<link::java::array<jchar>> a, jint index);
	static jint codePointAt(ref<link::java::array<jchar>> a, jint index, jint limit);
	static jint codePointBefore(ref<java::lang::CharSequence> seq, jint index);
	static jint codePointBefore(ref<link::java::array<jchar>> a, jint index);
	static jint codePointBefore(ref<link::java::array<jchar>> a, jint index, jint start);
	static jchar highSurrogate(jint codePoint);
	static jchar lowSurrogate(jint codePoint);
	static jint toChars(jint codePoint, ref<link::java::array<jchar>> dst, jint dstIndex);
	static ref<link::java::array<jchar>> toChars(jint codePoint);
	static jint codePointCount(ref<java::lang::CharSequence> seq, jint beginIndex, jint endIndex);
	static jint codePointCount(ref<link::java::array<jchar>> a, jint offset, jint count);
	static jint offsetByCodePoints(ref<java::lang::CharSequence> seq, jint index, jint codePointOffset);
	static jint offsetByCodePoints(ref<link::java::array<jchar>> a, jint start, jint count, jint index, jint codePointOffset);
	static jboolean isLowerCase(jchar ch);
	static jboolean isLowerCase(jint codePoint);
	static jboolean isUpperCase(jchar ch);
	static jboolean isUpperCase(jint codePoint);
	static jboolean isTitleCase(jchar ch);
	static jboolean isTitleCase(jint codePoint);
	static jboolean isDigit(jchar ch);
	static jboolean isDigit(jint codePoint);
	static jboolean isDefined(jchar ch);
	static jboolean isDefined(jint codePoint);
	static jboolean isLetter(jchar ch);
	static jboolean isLetter(jint codePoint);
	static jboolean isLetterOrDigit(jchar ch);
	static jboolean isLetterOrDigit(jint codePoint);
	static jboolean isJavaLetter(jchar ch);
	static jboolean isJavaLetterOrDigit(jchar ch);
	static jboolean isAlphabetic(jint codePoint);
	static jboolean isIdeographic(jint codePoint);
	static jboolean isJavaIdentifierStart(jchar ch);
	static jboolean isJavaIdentifierStart(jint codePoint);
	static jboolean isJavaIdentifierPart(jchar ch);
	static jboolean isJavaIdentifierPart(jint codePoint);
	static jboolean isUnicodeIdentifierStart(jchar ch);
	static jboolean isUnicodeIdentifierStart(jint codePoint);
	static jboolean isUnicodeIdentifierPart(jchar ch);
	static jboolean isUnicodeIdentifierPart(jint codePoint);
	static jboolean isIdentifierIgnorable(jchar ch);
	static jboolean isIdentifierIgnorable(jint codePoint);
	static jchar toLowerCase(jchar ch);
	static jint toLowerCase(jint codePoint);
	static jchar toUpperCase(jchar ch);
	static jint toUpperCase(jint codePoint);
	static jchar toTitleCase(jchar ch);
	static jint toTitleCase(jint codePoint);
	static jint digit(jchar ch, jint radix);
	static jint digit(jint codePoint, jint radix);
	static jint getNumericValue(jchar ch);
	static jint getNumericValue(jint codePoint);
	static jboolean isSpace(jchar ch);
	static jboolean isSpaceChar(jchar ch);
	static jboolean isSpaceChar(jint codePoint);
	static jboolean isWhitespace(jchar ch);
	static jboolean isWhitespace(jint codePoint);
	static jboolean isISOControl(jchar ch);
	static jboolean isISOControl(jint codePoint);
	static jint getType(jchar ch);
	static jint getType(jint codePoint);
	static jchar forDigit(jint digit, jint radix);
	static jbyte getDirectionality(jchar ch);
	static jbyte getDirectionality(jint codePoint);
	static jboolean isMirrored(jchar ch);
	static jboolean isMirrored(jint codePoint);
	jint compareTo(ref<java::lang::Character> anotherCharacter);
	static jint compare(jchar x, jchar y);
	static jchar reverseBytes(jchar ch);
	static ref<java::lang::String> getName(jint codePoint);
	static jint codePointOf(ref<java::lang::String> name);

protected:

	Character(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::lang {

inline jint Character::MIN_RADIX_() { return get_static_field<SCAPIX_META_STRING("MIN_RADIX"), jint>(); }
inline jint Character::MAX_RADIX_() { return get_static_field<SCAPIX_META_STRING("MAX_RADIX"), jint>(); }
inline jchar Character::MIN_VALUE_() { return get_static_field<SCAPIX_META_STRING("MIN_VALUE"), jchar>(); }
inline jchar Character::MAX_VALUE_() { return get_static_field<SCAPIX_META_STRING("MAX_VALUE"), jchar>(); }
inline ref<java::lang::Class> Character::TYPE_() { return get_static_field<SCAPIX_META_STRING("TYPE"), ref<java::lang::Class>>(); }
inline jbyte Character::UNASSIGNED_() { return get_static_field<SCAPIX_META_STRING("UNASSIGNED"), jbyte>(); }
inline jbyte Character::UPPERCASE_LETTER_() { return get_static_field<SCAPIX_META_STRING("UPPERCASE_LETTER"), jbyte>(); }
inline jbyte Character::LOWERCASE_LETTER_() { return get_static_field<SCAPIX_META_STRING("LOWERCASE_LETTER"), jbyte>(); }
inline jbyte Character::TITLECASE_LETTER_() { return get_static_field<SCAPIX_META_STRING("TITLECASE_LETTER"), jbyte>(); }
inline jbyte Character::MODIFIER_LETTER_() { return get_static_field<SCAPIX_META_STRING("MODIFIER_LETTER"), jbyte>(); }
inline jbyte Character::OTHER_LETTER_() { return get_static_field<SCAPIX_META_STRING("OTHER_LETTER"), jbyte>(); }
inline jbyte Character::NON_SPACING_MARK_() { return get_static_field<SCAPIX_META_STRING("NON_SPACING_MARK"), jbyte>(); }
inline jbyte Character::ENCLOSING_MARK_() { return get_static_field<SCAPIX_META_STRING("ENCLOSING_MARK"), jbyte>(); }
inline jbyte Character::COMBINING_SPACING_MARK_() { return get_static_field<SCAPIX_META_STRING("COMBINING_SPACING_MARK"), jbyte>(); }
inline jbyte Character::DECIMAL_DIGIT_NUMBER_() { return get_static_field<SCAPIX_META_STRING("DECIMAL_DIGIT_NUMBER"), jbyte>(); }
inline jbyte Character::LETTER_NUMBER_() { return get_static_field<SCAPIX_META_STRING("LETTER_NUMBER"), jbyte>(); }
inline jbyte Character::OTHER_NUMBER_() { return get_static_field<SCAPIX_META_STRING("OTHER_NUMBER"), jbyte>(); }
inline jbyte Character::SPACE_SEPARATOR_() { return get_static_field<SCAPIX_META_STRING("SPACE_SEPARATOR"), jbyte>(); }
inline jbyte Character::LINE_SEPARATOR_() { return get_static_field<SCAPIX_META_STRING("LINE_SEPARATOR"), jbyte>(); }
inline jbyte Character::PARAGRAPH_SEPARATOR_() { return get_static_field<SCAPIX_META_STRING("PARAGRAPH_SEPARATOR"), jbyte>(); }
inline jbyte Character::CONTROL_() { return get_static_field<SCAPIX_META_STRING("CONTROL"), jbyte>(); }
inline jbyte Character::FORMAT_() { return get_static_field<SCAPIX_META_STRING("FORMAT"), jbyte>(); }
inline jbyte Character::PRIVATE_USE_() { return get_static_field<SCAPIX_META_STRING("PRIVATE_USE"), jbyte>(); }
inline jbyte Character::SURROGATE_() { return get_static_field<SCAPIX_META_STRING("SURROGATE"), jbyte>(); }
inline jbyte Character::DASH_PUNCTUATION_() { return get_static_field<SCAPIX_META_STRING("DASH_PUNCTUATION"), jbyte>(); }
inline jbyte Character::START_PUNCTUATION_() { return get_static_field<SCAPIX_META_STRING("START_PUNCTUATION"), jbyte>(); }
inline jbyte Character::END_PUNCTUATION_() { return get_static_field<SCAPIX_META_STRING("END_PUNCTUATION"), jbyte>(); }
inline jbyte Character::CONNECTOR_PUNCTUATION_() { return get_static_field<SCAPIX_META_STRING("CONNECTOR_PUNCTUATION"), jbyte>(); }
inline jbyte Character::OTHER_PUNCTUATION_() { return get_static_field<SCAPIX_META_STRING("OTHER_PUNCTUATION"), jbyte>(); }
inline jbyte Character::MATH_SYMBOL_() { return get_static_field<SCAPIX_META_STRING("MATH_SYMBOL"), jbyte>(); }
inline jbyte Character::CURRENCY_SYMBOL_() { return get_static_field<SCAPIX_META_STRING("CURRENCY_SYMBOL"), jbyte>(); }
inline jbyte Character::MODIFIER_SYMBOL_() { return get_static_field<SCAPIX_META_STRING("MODIFIER_SYMBOL"), jbyte>(); }
inline jbyte Character::OTHER_SYMBOL_() { return get_static_field<SCAPIX_META_STRING("OTHER_SYMBOL"), jbyte>(); }
inline jbyte Character::INITIAL_QUOTE_PUNCTUATION_() { return get_static_field<SCAPIX_META_STRING("INITIAL_QUOTE_PUNCTUATION"), jbyte>(); }
inline jbyte Character::FINAL_QUOTE_PUNCTUATION_() { return get_static_field<SCAPIX_META_STRING("FINAL_QUOTE_PUNCTUATION"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_UNDEFINED"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_LEFT_TO_RIGHT"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_RIGHT_TO_LEFT"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_EUROPEAN_NUMBER"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_ARABIC_NUMBER_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_ARABIC_NUMBER"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_COMMON_NUMBER_SEPARATOR_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_COMMON_NUMBER_SEPARATOR"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_NONSPACING_MARK_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_NONSPACING_MARK"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_BOUNDARY_NEUTRAL_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_BOUNDARY_NEUTRAL"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_PARAGRAPH_SEPARATOR_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_PARAGRAPH_SEPARATOR"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_SEGMENT_SEPARATOR_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_SEGMENT_SEPARATOR"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_WHITESPACE_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_WHITESPACE"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_OTHER_NEUTRALS_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_OTHER_NEUTRALS"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_POP_DIRECTIONAL_FORMAT_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_POP_DIRECTIONAL_FORMAT"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_FIRST_STRONG_ISOLATE_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_FIRST_STRONG_ISOLATE"), jbyte>(); }
inline jbyte Character::DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE_() { return get_static_field<SCAPIX_META_STRING("DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE"), jbyte>(); }
inline jchar Character::MIN_HIGH_SURROGATE_() { return get_static_field<SCAPIX_META_STRING("MIN_HIGH_SURROGATE"), jchar>(); }
inline jchar Character::MAX_HIGH_SURROGATE_() { return get_static_field<SCAPIX_META_STRING("MAX_HIGH_SURROGATE"), jchar>(); }
inline jchar Character::MIN_LOW_SURROGATE_() { return get_static_field<SCAPIX_META_STRING("MIN_LOW_SURROGATE"), jchar>(); }
inline jchar Character::MAX_LOW_SURROGATE_() { return get_static_field<SCAPIX_META_STRING("MAX_LOW_SURROGATE"), jchar>(); }
inline jchar Character::MIN_SURROGATE_() { return get_static_field<SCAPIX_META_STRING("MIN_SURROGATE"), jchar>(); }
inline jchar Character::MAX_SURROGATE_() { return get_static_field<SCAPIX_META_STRING("MAX_SURROGATE"), jchar>(); }
inline jint Character::MIN_SUPPLEMENTARY_CODE_POINT_() { return get_static_field<SCAPIX_META_STRING("MIN_SUPPLEMENTARY_CODE_POINT"), jint>(); }
inline jint Character::MIN_CODE_POINT_() { return get_static_field<SCAPIX_META_STRING("MIN_CODE_POINT"), jint>(); }
inline jint Character::MAX_CODE_POINT_() { return get_static_field<SCAPIX_META_STRING("MAX_CODE_POINT"), jint>(); }
inline jint Character::SIZE_() { return get_static_field<SCAPIX_META_STRING("SIZE"), jint>(); }
inline jint Character::BYTES_() { return get_static_field<SCAPIX_META_STRING("BYTES"), jint>(); }
inline ref<Character> Character::new_object(jchar value) { return base_::new_object(value); }
inline ref<java::lang::Character> Character::valueOf(jchar c) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::lang::Character>>(c); }
inline jchar Character::charValue() { return call_method<SCAPIX_META_STRING("charValue"), jchar>(); }
inline jint Character::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint Character::hashCode(jchar value) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(value); }
inline jboolean Character::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline ref<java::lang::String> Character::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Character::toString(jchar c) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(c); }
inline ref<java::lang::String> Character::toString(jint codePoint) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(codePoint); }
inline jboolean Character::isValidCodePoint(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isValidCodePoint"), jboolean>(codePoint); }
inline jboolean Character::isBmpCodePoint(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isBmpCodePoint"), jboolean>(codePoint); }
inline jboolean Character::isSupplementaryCodePoint(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isSupplementaryCodePoint"), jboolean>(codePoint); }
inline jboolean Character::isHighSurrogate(jchar ch) { return call_static_method<SCAPIX_META_STRING("isHighSurrogate"), jboolean>(ch); }
inline jboolean Character::isLowSurrogate(jchar ch) { return call_static_method<SCAPIX_META_STRING("isLowSurrogate"), jboolean>(ch); }
inline jboolean Character::isSurrogate(jchar ch) { return call_static_method<SCAPIX_META_STRING("isSurrogate"), jboolean>(ch); }
inline jboolean Character::isSurrogatePair(jchar high, jchar low) { return call_static_method<SCAPIX_META_STRING("isSurrogatePair"), jboolean>(high, low); }
inline jint Character::charCount(jint codePoint) { return call_static_method<SCAPIX_META_STRING("charCount"), jint>(codePoint); }
inline jint Character::toCodePoint(jchar high, jchar low) { return call_static_method<SCAPIX_META_STRING("toCodePoint"), jint>(high, low); }
inline jint Character::codePointAt(ref<java::lang::CharSequence> seq, jint index) { return call_static_method<SCAPIX_META_STRING("codePointAt"), jint>(seq, index); }
inline jint Character::codePointAt(ref<link::java::array<jchar>> a, jint index) { return call_static_method<SCAPIX_META_STRING("codePointAt"), jint>(a, index); }
inline jint Character::codePointAt(ref<link::java::array<jchar>> a, jint index, jint limit) { return call_static_method<SCAPIX_META_STRING("codePointAt"), jint>(a, index, limit); }
inline jint Character::codePointBefore(ref<java::lang::CharSequence> seq, jint index) { return call_static_method<SCAPIX_META_STRING("codePointBefore"), jint>(seq, index); }
inline jint Character::codePointBefore(ref<link::java::array<jchar>> a, jint index) { return call_static_method<SCAPIX_META_STRING("codePointBefore"), jint>(a, index); }
inline jint Character::codePointBefore(ref<link::java::array<jchar>> a, jint index, jint start) { return call_static_method<SCAPIX_META_STRING("codePointBefore"), jint>(a, index, start); }
inline jchar Character::highSurrogate(jint codePoint) { return call_static_method<SCAPIX_META_STRING("highSurrogate"), jchar>(codePoint); }
inline jchar Character::lowSurrogate(jint codePoint) { return call_static_method<SCAPIX_META_STRING("lowSurrogate"), jchar>(codePoint); }
inline jint Character::toChars(jint codePoint, ref<link::java::array<jchar>> dst, jint dstIndex) { return call_static_method<SCAPIX_META_STRING("toChars"), jint>(codePoint, dst, dstIndex); }
inline ref<link::java::array<jchar>> Character::toChars(jint codePoint) { return call_static_method<SCAPIX_META_STRING("toChars"), ref<link::java::array<jchar>>>(codePoint); }
inline jint Character::codePointCount(ref<java::lang::CharSequence> seq, jint beginIndex, jint endIndex) { return call_static_method<SCAPIX_META_STRING("codePointCount"), jint>(seq, beginIndex, endIndex); }
inline jint Character::codePointCount(ref<link::java::array<jchar>> a, jint offset, jint count) { return call_static_method<SCAPIX_META_STRING("codePointCount"), jint>(a, offset, count); }
inline jint Character::offsetByCodePoints(ref<java::lang::CharSequence> seq, jint index, jint codePointOffset) { return call_static_method<SCAPIX_META_STRING("offsetByCodePoints"), jint>(seq, index, codePointOffset); }
inline jint Character::offsetByCodePoints(ref<link::java::array<jchar>> a, jint start, jint count, jint index, jint codePointOffset) { return call_static_method<SCAPIX_META_STRING("offsetByCodePoints"), jint>(a, start, count, index, codePointOffset); }
inline jboolean Character::isLowerCase(jchar ch) { return call_static_method<SCAPIX_META_STRING("isLowerCase"), jboolean>(ch); }
inline jboolean Character::isLowerCase(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isLowerCase"), jboolean>(codePoint); }
inline jboolean Character::isUpperCase(jchar ch) { return call_static_method<SCAPIX_META_STRING("isUpperCase"), jboolean>(ch); }
inline jboolean Character::isUpperCase(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isUpperCase"), jboolean>(codePoint); }
inline jboolean Character::isTitleCase(jchar ch) { return call_static_method<SCAPIX_META_STRING("isTitleCase"), jboolean>(ch); }
inline jboolean Character::isTitleCase(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isTitleCase"), jboolean>(codePoint); }
inline jboolean Character::isDigit(jchar ch) { return call_static_method<SCAPIX_META_STRING("isDigit"), jboolean>(ch); }
inline jboolean Character::isDigit(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isDigit"), jboolean>(codePoint); }
inline jboolean Character::isDefined(jchar ch) { return call_static_method<SCAPIX_META_STRING("isDefined"), jboolean>(ch); }
inline jboolean Character::isDefined(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isDefined"), jboolean>(codePoint); }
inline jboolean Character::isLetter(jchar ch) { return call_static_method<SCAPIX_META_STRING("isLetter"), jboolean>(ch); }
inline jboolean Character::isLetter(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isLetter"), jboolean>(codePoint); }
inline jboolean Character::isLetterOrDigit(jchar ch) { return call_static_method<SCAPIX_META_STRING("isLetterOrDigit"), jboolean>(ch); }
inline jboolean Character::isLetterOrDigit(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isLetterOrDigit"), jboolean>(codePoint); }
inline jboolean Character::isJavaLetter(jchar ch) { return call_static_method<SCAPIX_META_STRING("isJavaLetter"), jboolean>(ch); }
inline jboolean Character::isJavaLetterOrDigit(jchar ch) { return call_static_method<SCAPIX_META_STRING("isJavaLetterOrDigit"), jboolean>(ch); }
inline jboolean Character::isAlphabetic(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isAlphabetic"), jboolean>(codePoint); }
inline jboolean Character::isIdeographic(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isIdeographic"), jboolean>(codePoint); }
inline jboolean Character::isJavaIdentifierStart(jchar ch) { return call_static_method<SCAPIX_META_STRING("isJavaIdentifierStart"), jboolean>(ch); }
inline jboolean Character::isJavaIdentifierStart(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isJavaIdentifierStart"), jboolean>(codePoint); }
inline jboolean Character::isJavaIdentifierPart(jchar ch) { return call_static_method<SCAPIX_META_STRING("isJavaIdentifierPart"), jboolean>(ch); }
inline jboolean Character::isJavaIdentifierPart(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isJavaIdentifierPart"), jboolean>(codePoint); }
inline jboolean Character::isUnicodeIdentifierStart(jchar ch) { return call_static_method<SCAPIX_META_STRING("isUnicodeIdentifierStart"), jboolean>(ch); }
inline jboolean Character::isUnicodeIdentifierStart(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isUnicodeIdentifierStart"), jboolean>(codePoint); }
inline jboolean Character::isUnicodeIdentifierPart(jchar ch) { return call_static_method<SCAPIX_META_STRING("isUnicodeIdentifierPart"), jboolean>(ch); }
inline jboolean Character::isUnicodeIdentifierPart(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isUnicodeIdentifierPart"), jboolean>(codePoint); }
inline jboolean Character::isIdentifierIgnorable(jchar ch) { return call_static_method<SCAPIX_META_STRING("isIdentifierIgnorable"), jboolean>(ch); }
inline jboolean Character::isIdentifierIgnorable(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isIdentifierIgnorable"), jboolean>(codePoint); }
inline jchar Character::toLowerCase(jchar ch) { return call_static_method<SCAPIX_META_STRING("toLowerCase"), jchar>(ch); }
inline jint Character::toLowerCase(jint codePoint) { return call_static_method<SCAPIX_META_STRING("toLowerCase"), jint>(codePoint); }
inline jchar Character::toUpperCase(jchar ch) { return call_static_method<SCAPIX_META_STRING("toUpperCase"), jchar>(ch); }
inline jint Character::toUpperCase(jint codePoint) { return call_static_method<SCAPIX_META_STRING("toUpperCase"), jint>(codePoint); }
inline jchar Character::toTitleCase(jchar ch) { return call_static_method<SCAPIX_META_STRING("toTitleCase"), jchar>(ch); }
inline jint Character::toTitleCase(jint codePoint) { return call_static_method<SCAPIX_META_STRING("toTitleCase"), jint>(codePoint); }
inline jint Character::digit(jchar ch, jint radix) { return call_static_method<SCAPIX_META_STRING("digit"), jint>(ch, radix); }
inline jint Character::digit(jint codePoint, jint radix) { return call_static_method<SCAPIX_META_STRING("digit"), jint>(codePoint, radix); }
inline jint Character::getNumericValue(jchar ch) { return call_static_method<SCAPIX_META_STRING("getNumericValue"), jint>(ch); }
inline jint Character::getNumericValue(jint codePoint) { return call_static_method<SCAPIX_META_STRING("getNumericValue"), jint>(codePoint); }
inline jboolean Character::isSpace(jchar ch) { return call_static_method<SCAPIX_META_STRING("isSpace"), jboolean>(ch); }
inline jboolean Character::isSpaceChar(jchar ch) { return call_static_method<SCAPIX_META_STRING("isSpaceChar"), jboolean>(ch); }
inline jboolean Character::isSpaceChar(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isSpaceChar"), jboolean>(codePoint); }
inline jboolean Character::isWhitespace(jchar ch) { return call_static_method<SCAPIX_META_STRING("isWhitespace"), jboolean>(ch); }
inline jboolean Character::isWhitespace(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isWhitespace"), jboolean>(codePoint); }
inline jboolean Character::isISOControl(jchar ch) { return call_static_method<SCAPIX_META_STRING("isISOControl"), jboolean>(ch); }
inline jboolean Character::isISOControl(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isISOControl"), jboolean>(codePoint); }
inline jint Character::getType(jchar ch) { return call_static_method<SCAPIX_META_STRING("getType"), jint>(ch); }
inline jint Character::getType(jint codePoint) { return call_static_method<SCAPIX_META_STRING("getType"), jint>(codePoint); }
inline jchar Character::forDigit(jint digit, jint radix) { return call_static_method<SCAPIX_META_STRING("forDigit"), jchar>(digit, radix); }
inline jbyte Character::getDirectionality(jchar ch) { return call_static_method<SCAPIX_META_STRING("getDirectionality"), jbyte>(ch); }
inline jbyte Character::getDirectionality(jint codePoint) { return call_static_method<SCAPIX_META_STRING("getDirectionality"), jbyte>(codePoint); }
inline jboolean Character::isMirrored(jchar ch) { return call_static_method<SCAPIX_META_STRING("isMirrored"), jboolean>(ch); }
inline jboolean Character::isMirrored(jint codePoint) { return call_static_method<SCAPIX_META_STRING("isMirrored"), jboolean>(codePoint); }
inline jint Character::compareTo(ref<java::lang::Character> anotherCharacter) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(anotherCharacter); }
inline jint Character::compare(jchar x, jchar y) { return call_static_method<SCAPIX_META_STRING("compare"), jint>(x, y); }
inline jchar Character::reverseBytes(jchar ch) { return call_static_method<SCAPIX_META_STRING("reverseBytes"), jchar>(ch); }
inline ref<java::lang::String> Character::getName(jint codePoint) { return call_static_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(codePoint); }
inline jint Character::codePointOf(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("codePointOf"), jint>(name); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_CHARACTER_H
