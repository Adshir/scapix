// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_LANG_BYTE_H
#define SCAPIX_JAVA_LANG_BYTE_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class Object; }
namespace java::lang { class String; }

namespace java::lang {

class Byte : public object_base<SCAPIX_META_STRING("java/lang/Byte"),
	java::lang::Number,
	java::lang::Comparable>
{
public:

	static jbyte MIN_VALUE_();
	static jbyte MAX_VALUE_();
	static ref<java::lang::Class> TYPE_();
	static jint SIZE_();
	static jint BYTES_();

	static ref<java::lang::String> toString(jbyte b);
	static ref<java::lang::Byte> valueOf(jbyte b);
	static jbyte parseByte(ref<java::lang::String> s, jint radix);
	static jbyte parseByte(ref<java::lang::String> s);
	static ref<java::lang::Byte> valueOf(ref<java::lang::String> s, jint radix);
	static ref<java::lang::Byte> valueOf(ref<java::lang::String> s);
	static ref<java::lang::Byte> decode(ref<java::lang::String> nm);
	static ref<Byte> new_object(jbyte value);
	static ref<Byte> new_object(ref<java::lang::String> s);
	jbyte byteValue();
	jshort shortValue();
	jint intValue();
	jlong longValue();
	jfloat floatValue();
	jdouble doubleValue();
	ref<java::lang::String> toString();
	jint hashCode();
	static jint hashCode(jbyte value);
	jboolean equals(ref<java::lang::Object> obj);
	jint compareTo(ref<java::lang::Byte> anotherByte);
	static jint compare(jbyte x, jbyte y);
	static jint compareUnsigned(jbyte x, jbyte y);
	static jint toUnsignedInt(jbyte x);
	static jlong toUnsignedLong(jbyte x);

protected:

	Byte(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::lang {

inline jbyte Byte::MIN_VALUE_() { return get_static_field<SCAPIX_META_STRING("MIN_VALUE"), jbyte>(); }
inline jbyte Byte::MAX_VALUE_() { return get_static_field<SCAPIX_META_STRING("MAX_VALUE"), jbyte>(); }
inline ref<java::lang::Class> Byte::TYPE_() { return get_static_field<SCAPIX_META_STRING("TYPE"), ref<java::lang::Class>>(); }
inline jint Byte::SIZE_() { return get_static_field<SCAPIX_META_STRING("SIZE"), jint>(); }
inline jint Byte::BYTES_() { return get_static_field<SCAPIX_META_STRING("BYTES"), jint>(); }
inline ref<java::lang::String> Byte::toString(jbyte b) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(b); }
inline ref<java::lang::Byte> Byte::valueOf(jbyte b) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::lang::Byte>>(b); }
inline jbyte Byte::parseByte(ref<java::lang::String> s, jint radix) { return call_static_method<SCAPIX_META_STRING("parseByte"), jbyte>(s, radix); }
inline jbyte Byte::parseByte(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("parseByte"), jbyte>(s); }
inline ref<java::lang::Byte> Byte::valueOf(ref<java::lang::String> s, jint radix) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::lang::Byte>>(s, radix); }
inline ref<java::lang::Byte> Byte::valueOf(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::lang::Byte>>(s); }
inline ref<java::lang::Byte> Byte::decode(ref<java::lang::String> nm) { return call_static_method<SCAPIX_META_STRING("decode"), ref<java::lang::Byte>>(nm); }
inline ref<Byte> Byte::new_object(jbyte value) { return base_::new_object(value); }
inline ref<Byte> Byte::new_object(ref<java::lang::String> s) { return base_::new_object(s); }
inline jbyte Byte::byteValue() { return call_method<SCAPIX_META_STRING("byteValue"), jbyte>(); }
inline jshort Byte::shortValue() { return call_method<SCAPIX_META_STRING("shortValue"), jshort>(); }
inline jint Byte::intValue() { return call_method<SCAPIX_META_STRING("intValue"), jint>(); }
inline jlong Byte::longValue() { return call_method<SCAPIX_META_STRING("longValue"), jlong>(); }
inline jfloat Byte::floatValue() { return call_method<SCAPIX_META_STRING("floatValue"), jfloat>(); }
inline jdouble Byte::doubleValue() { return call_method<SCAPIX_META_STRING("doubleValue"), jdouble>(); }
inline ref<java::lang::String> Byte::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint Byte::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint Byte::hashCode(jbyte value) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(value); }
inline jboolean Byte::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint Byte::compareTo(ref<java::lang::Byte> anotherByte) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(anotherByte); }
inline jint Byte::compare(jbyte x, jbyte y) { return call_static_method<SCAPIX_META_STRING("compare"), jint>(x, y); }
inline jint Byte::compareUnsigned(jbyte x, jbyte y) { return call_static_method<SCAPIX_META_STRING("compareUnsigned"), jint>(x, y); }
inline jint Byte::toUnsignedInt(jbyte x) { return call_static_method<SCAPIX_META_STRING("toUnsignedInt"), jint>(x); }
inline jlong Byte::toUnsignedLong(jbyte x) { return call_static_method<SCAPIX_META_STRING("toUnsignedLong"), jlong>(x); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_BYTE_H
