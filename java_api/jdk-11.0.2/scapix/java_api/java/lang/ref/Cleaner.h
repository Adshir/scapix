// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_REF_CLEANER_H
#define SCAPIX_JAVA_LANG_REF_CLEANER_H

namespace scapix::java_api {

namespace java::lang { class Runnable; }
namespace java::lang::ref { class Cleaner_Cleanable; }
namespace java::util::concurrent { class ThreadFactory; }

namespace java::lang::ref {

class Cleaner : public object_base<SCAPIX_META_STRING("java/lang/ref/Cleaner"),
	java::lang::Object>
{
public:

	using Cleanable = Cleaner_Cleanable;

	static ref<java::lang::ref::Cleaner> create();
	static ref<java::lang::ref::Cleaner> create(ref<java::util::concurrent::ThreadFactory> threadFactory);
	ref<java::lang::ref::Cleaner_Cleanable> register_(ref<java::lang::Object> obj, ref<java::lang::Runnable> action);

protected:

	Cleaner(handle_type h) : base_(h) {}

};

} // namespace java::lang::ref
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/ref/Cleaner_Cleanable.h>
#include <scapix/java_api/java/util/concurrent/ThreadFactory.h>

namespace scapix::java_api {
namespace java::lang::ref {

inline ref<java::lang::ref::Cleaner> Cleaner::create() { return call_static_method<SCAPIX_META_STRING("create"), ref<java::lang::ref::Cleaner>>(); }
inline ref<java::lang::ref::Cleaner> Cleaner::create(ref<java::util::concurrent::ThreadFactory> threadFactory) { return call_static_method<SCAPIX_META_STRING("create"), ref<java::lang::ref::Cleaner>>(threadFactory); }
inline ref<java::lang::ref::Cleaner_Cleanable> Cleaner::register_(ref<java::lang::Object> obj, ref<java::lang::Runnable> action) { return call_method<SCAPIX_META_STRING("register"), ref<java::lang::ref::Cleaner_Cleanable>>(obj, action); }

} // namespace java::lang::ref
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_REF_CLEANER_H
