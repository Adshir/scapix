// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_LANG_MODULE_MODULEREADER_H
#define SCAPIX_JAVA_LANG_MODULE_MODULEREADER_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::nio { class ByteBuffer; }
namespace java::util { class Optional; }
namespace java::util::stream { class Stream; }

namespace java::lang::module {

class ModuleReader : public object_base<SCAPIX_META_STRING("java/lang/module/ModuleReader"),
	java::lang::Object,
	java::io::Closeable>
{
public:

	ref<java::util::Optional> find(ref<java::lang::String> p1);
	ref<java::util::Optional> open(ref<java::lang::String> name);
	ref<java::util::Optional> read(ref<java::lang::String> name);
	void release(ref<java::nio::ByteBuffer> bb);
	ref<java::util::stream::Stream> list();
	void close();

protected:

	ModuleReader(handle_type h) : base_(h) {}

};

} // namespace java::lang::module
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/stream/Stream.h>

namespace scapix::java_api {
namespace java::lang::module {

inline ref<java::util::Optional> ModuleReader::find(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("find"), ref<java::util::Optional>>(p1); }
inline ref<java::util::Optional> ModuleReader::open(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("open"), ref<java::util::Optional>>(name); }
inline ref<java::util::Optional> ModuleReader::read(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("read"), ref<java::util::Optional>>(name); }
inline void ModuleReader::release(ref<java::nio::ByteBuffer> bb) { return call_method<SCAPIX_META_STRING("release"), void>(bb); }
inline ref<java::util::stream::Stream> ModuleReader::list() { return call_method<SCAPIX_META_STRING("list"), ref<java::util::stream::Stream>>(); }
inline void ModuleReader::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::lang::module
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_MODULE_MODULEREADER_H
