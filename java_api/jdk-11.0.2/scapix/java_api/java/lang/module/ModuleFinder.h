// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_MODULE_MODULEFINDER_H
#define SCAPIX_JAVA_LANG_MODULE_MODULEFINDER_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::nio::file { class Path; }
namespace java::util { class Optional; }
namespace java::util { class Set; }

namespace java::lang::module {

class ModuleFinder : public object_base<SCAPIX_META_STRING("java/lang/module/ModuleFinder"),
	java::lang::Object>
{
public:

	ref<java::util::Optional> find(ref<java::lang::String> p1);
	ref<java::util::Set> findAll();
	static ref<java::lang::module::ModuleFinder> ofSystem();
	static ref<java::lang::module::ModuleFinder> of(ref<link::java::array<java::nio::file::Path>> entries);
	static ref<java::lang::module::ModuleFinder> compose(ref<link::java::array<java::lang::module::ModuleFinder>> finders);

protected:

	ModuleFinder(handle_type h) : base_(h) {}

};

} // namespace java::lang::module
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/file/Path.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace java::lang::module {

inline ref<java::util::Optional> ModuleFinder::find(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("find"), ref<java::util::Optional>>(p1); }
inline ref<java::util::Set> ModuleFinder::findAll() { return call_method<SCAPIX_META_STRING("findAll"), ref<java::util::Set>>(); }
inline ref<java::lang::module::ModuleFinder> ModuleFinder::ofSystem() { return call_static_method<SCAPIX_META_STRING("ofSystem"), ref<java::lang::module::ModuleFinder>>(); }
inline ref<java::lang::module::ModuleFinder> ModuleFinder::of(ref<link::java::array<java::nio::file::Path>> entries) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::lang::module::ModuleFinder>>(entries); }
inline ref<java::lang::module::ModuleFinder> ModuleFinder::compose(ref<link::java::array<java::lang::module::ModuleFinder>> finders) { return call_static_method<SCAPIX_META_STRING("compose"), ref<java::lang::module::ModuleFinder>>(finders); }

} // namespace java::lang::module
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_MODULE_MODULEFINDER_H
