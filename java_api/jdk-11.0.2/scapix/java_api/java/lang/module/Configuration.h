// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_MODULE_CONFIGURATION_H
#define SCAPIX_JAVA_LANG_MODULE_CONFIGURATION_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::lang::module { class ModuleFinder; }
namespace java::util { class Collection; }
namespace java::util { class List; }
namespace java::util { class Optional; }
namespace java::util { class Set; }

namespace java::lang::module {

class Configuration : public object_base<SCAPIX_META_STRING("java/lang/module/Configuration"),
	java::lang::Object>
{
public:

	ref<java::lang::module::Configuration> resolve(ref<java::lang::module::ModuleFinder> before, ref<java::lang::module::ModuleFinder> after, ref<java::util::Collection> roots);
	ref<java::lang::module::Configuration> resolveAndBind(ref<java::lang::module::ModuleFinder> before, ref<java::lang::module::ModuleFinder> after, ref<java::util::Collection> roots);
	static ref<java::lang::module::Configuration> resolve(ref<java::lang::module::ModuleFinder> before, ref<java::util::List> parents, ref<java::lang::module::ModuleFinder> after, ref<java::util::Collection> roots);
	static ref<java::lang::module::Configuration> resolveAndBind(ref<java::lang::module::ModuleFinder> before, ref<java::util::List> parents, ref<java::lang::module::ModuleFinder> after, ref<java::util::Collection> roots);
	static ref<java::lang::module::Configuration> empty();
	ref<java::util::List> parents();
	ref<java::util::Set> modules();
	ref<java::util::Optional> findModule(ref<java::lang::String> name);
	ref<java::lang::String> toString();

protected:

	Configuration(handle_type h) : base_(h) {}

};

} // namespace java::lang::module
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/module/ModuleFinder.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace java::lang::module {

inline ref<java::lang::module::Configuration> Configuration::resolve(ref<java::lang::module::ModuleFinder> before, ref<java::lang::module::ModuleFinder> after, ref<java::util::Collection> roots) { return call_method<SCAPIX_META_STRING("resolve"), ref<java::lang::module::Configuration>>(before, after, roots); }
inline ref<java::lang::module::Configuration> Configuration::resolveAndBind(ref<java::lang::module::ModuleFinder> before, ref<java::lang::module::ModuleFinder> after, ref<java::util::Collection> roots) { return call_method<SCAPIX_META_STRING("resolveAndBind"), ref<java::lang::module::Configuration>>(before, after, roots); }
inline ref<java::lang::module::Configuration> Configuration::resolve(ref<java::lang::module::ModuleFinder> before, ref<java::util::List> parents, ref<java::lang::module::ModuleFinder> after, ref<java::util::Collection> roots) { return call_static_method<SCAPIX_META_STRING("resolve"), ref<java::lang::module::Configuration>>(before, parents, after, roots); }
inline ref<java::lang::module::Configuration> Configuration::resolveAndBind(ref<java::lang::module::ModuleFinder> before, ref<java::util::List> parents, ref<java::lang::module::ModuleFinder> after, ref<java::util::Collection> roots) { return call_static_method<SCAPIX_META_STRING("resolveAndBind"), ref<java::lang::module::Configuration>>(before, parents, after, roots); }
inline ref<java::lang::module::Configuration> Configuration::empty() { return call_static_method<SCAPIX_META_STRING("empty"), ref<java::lang::module::Configuration>>(); }
inline ref<java::util::List> Configuration::parents() { return call_method<SCAPIX_META_STRING("parents"), ref<java::util::List>>(); }
inline ref<java::util::Set> Configuration::modules() { return call_method<SCAPIX_META_STRING("modules"), ref<java::util::Set>>(); }
inline ref<java::util::Optional> Configuration::findModule(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("findModule"), ref<java::util::Optional>>(name); }
inline ref<java::lang::String> Configuration::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::lang::module
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_MODULE_CONFIGURATION_H
