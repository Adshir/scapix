// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_LANG_MODULE_MODULEDESCRIPTOR_EXPORTS_H
#define SCAPIX_JAVA_LANG_MODULE_MODULEDESCRIPTOR_EXPORTS_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util { class Set; }
namespace java::lang::module { class ModuleDescriptor_Exports_Modifier; }

namespace java::lang::module {

class ModuleDescriptor_Exports : public object_base<SCAPIX_META_STRING("java/lang/module/ModuleDescriptor$Exports"),
	java::lang::Object,
	java::lang::Comparable>
{
public:

	using Modifier = ModuleDescriptor_Exports_Modifier;

	ref<java::util::Set> modifiers();
	jboolean isQualified();
	ref<java::lang::String> source();
	ref<java::util::Set> targets();
	jint compareTo(ref<java::lang::module::ModuleDescriptor_Exports> that);
	jint hashCode();
	jboolean equals(ref<java::lang::Object> ob);
	ref<java::lang::String> toString();

protected:

	ModuleDescriptor_Exports(handle_type h) : base_(h) {}

};

} // namespace java::lang::module
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace java::lang::module {

inline ref<java::util::Set> ModuleDescriptor_Exports::modifiers() { return call_method<SCAPIX_META_STRING("modifiers"), ref<java::util::Set>>(); }
inline jboolean ModuleDescriptor_Exports::isQualified() { return call_method<SCAPIX_META_STRING("isQualified"), jboolean>(); }
inline ref<java::lang::String> ModuleDescriptor_Exports::source() { return call_method<SCAPIX_META_STRING("source"), ref<java::lang::String>>(); }
inline ref<java::util::Set> ModuleDescriptor_Exports::targets() { return call_method<SCAPIX_META_STRING("targets"), ref<java::util::Set>>(); }
inline jint ModuleDescriptor_Exports::compareTo(ref<java::lang::module::ModuleDescriptor_Exports> that) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(that); }
inline jint ModuleDescriptor_Exports::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean ModuleDescriptor_Exports::equals(ref<java::lang::Object> ob) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(ob); }
inline ref<java::lang::String> ModuleDescriptor_Exports::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::lang::module
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_MODULE_MODULEDESCRIPTOR_EXPORTS_H
