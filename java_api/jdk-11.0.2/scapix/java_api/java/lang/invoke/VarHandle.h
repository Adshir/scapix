// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_INVOKE_VARHANDLE_H
#define SCAPIX_JAVA_LANG_INVOKE_VARHANDLE_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang::invoke { class MethodHandle; }
namespace java::lang::invoke { class MethodType; }
namespace java::lang::invoke { class VarHandle_AccessMode; }
namespace java::util { class List; }

namespace java::lang::invoke {

class VarHandle : public object_base<SCAPIX_META_STRING("java/lang/invoke/VarHandle"),
	java::lang::Object>
{
public:

	using AccessMode = VarHandle_AccessMode;

	ref<java::lang::Object> get(ref<link::java::array<java::lang::Object>> p1);
	void set(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getVolatile(ref<link::java::array<java::lang::Object>> p1);
	void setVolatile(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getOpaque(ref<link::java::array<java::lang::Object>> p1);
	void setOpaque(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getAcquire(ref<link::java::array<java::lang::Object>> p1);
	void setRelease(ref<link::java::array<java::lang::Object>> p1);
	jboolean compareAndSet(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> compareAndExchange(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> compareAndExchangeAcquire(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> compareAndExchangeRelease(ref<link::java::array<java::lang::Object>> p1);
	jboolean weakCompareAndSetPlain(ref<link::java::array<java::lang::Object>> p1);
	jboolean weakCompareAndSet(ref<link::java::array<java::lang::Object>> p1);
	jboolean weakCompareAndSetAcquire(ref<link::java::array<java::lang::Object>> p1);
	jboolean weakCompareAndSetRelease(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getAndSet(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getAndSetAcquire(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getAndSetRelease(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getAndAdd(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getAndAddAcquire(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getAndAddRelease(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getAndBitwiseOr(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getAndBitwiseOrAcquire(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getAndBitwiseOrRelease(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getAndBitwiseAnd(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getAndBitwiseAndAcquire(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getAndBitwiseAndRelease(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getAndBitwiseXor(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getAndBitwiseXorAcquire(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> getAndBitwiseXorRelease(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Class> varType();
	ref<java::util::List> coordinateTypes();
	ref<java::lang::invoke::MethodType> accessModeType(ref<java::lang::invoke::VarHandle_AccessMode> accessMode);
	jboolean isAccessModeSupported(ref<java::lang::invoke::VarHandle_AccessMode> accessMode);
	ref<java::lang::invoke::MethodHandle> toMethodHandle(ref<java::lang::invoke::VarHandle_AccessMode> accessMode);
	static void fullFence();
	static void acquireFence();
	static void releaseFence();
	static void loadLoadFence();
	static void storeStoreFence();

protected:

	VarHandle(handle_type h) : base_(h) {}

};

} // namespace java::lang::invoke
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/invoke/MethodHandle.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>
#include <scapix/java_api/java/lang/invoke/VarHandle_AccessMode.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace java::lang::invoke {

inline ref<java::lang::Object> VarHandle::get(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(p1); }
inline void VarHandle::set(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("set"), void>(p1); }
inline ref<java::lang::Object> VarHandle::getVolatile(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getVolatile"), ref<java::lang::Object>>(p1); }
inline void VarHandle::setVolatile(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("setVolatile"), void>(p1); }
inline ref<java::lang::Object> VarHandle::getOpaque(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getOpaque"), ref<java::lang::Object>>(p1); }
inline void VarHandle::setOpaque(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("setOpaque"), void>(p1); }
inline ref<java::lang::Object> VarHandle::getAcquire(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getAcquire"), ref<java::lang::Object>>(p1); }
inline void VarHandle::setRelease(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("setRelease"), void>(p1); }
inline jboolean VarHandle::compareAndSet(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("compareAndSet"), jboolean>(p1); }
inline ref<java::lang::Object> VarHandle::compareAndExchange(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("compareAndExchange"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> VarHandle::compareAndExchangeAcquire(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("compareAndExchangeAcquire"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> VarHandle::compareAndExchangeRelease(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("compareAndExchangeRelease"), ref<java::lang::Object>>(p1); }
inline jboolean VarHandle::weakCompareAndSetPlain(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("weakCompareAndSetPlain"), jboolean>(p1); }
inline jboolean VarHandle::weakCompareAndSet(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("weakCompareAndSet"), jboolean>(p1); }
inline jboolean VarHandle::weakCompareAndSetAcquire(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("weakCompareAndSetAcquire"), jboolean>(p1); }
inline jboolean VarHandle::weakCompareAndSetRelease(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("weakCompareAndSetRelease"), jboolean>(p1); }
inline ref<java::lang::Object> VarHandle::getAndSet(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getAndSet"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> VarHandle::getAndSetAcquire(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getAndSetAcquire"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> VarHandle::getAndSetRelease(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getAndSetRelease"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> VarHandle::getAndAdd(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getAndAdd"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> VarHandle::getAndAddAcquire(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getAndAddAcquire"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> VarHandle::getAndAddRelease(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getAndAddRelease"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> VarHandle::getAndBitwiseOr(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getAndBitwiseOr"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> VarHandle::getAndBitwiseOrAcquire(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getAndBitwiseOrAcquire"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> VarHandle::getAndBitwiseOrRelease(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getAndBitwiseOrRelease"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> VarHandle::getAndBitwiseAnd(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getAndBitwiseAnd"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> VarHandle::getAndBitwiseAndAcquire(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getAndBitwiseAndAcquire"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> VarHandle::getAndBitwiseAndRelease(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getAndBitwiseAndRelease"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> VarHandle::getAndBitwiseXor(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getAndBitwiseXor"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> VarHandle::getAndBitwiseXorAcquire(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getAndBitwiseXorAcquire"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> VarHandle::getAndBitwiseXorRelease(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("getAndBitwiseXorRelease"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Class> VarHandle::varType() { return call_method<SCAPIX_META_STRING("varType"), ref<java::lang::Class>>(); }
inline ref<java::util::List> VarHandle::coordinateTypes() { return call_method<SCAPIX_META_STRING("coordinateTypes"), ref<java::util::List>>(); }
inline ref<java::lang::invoke::MethodType> VarHandle::accessModeType(ref<java::lang::invoke::VarHandle_AccessMode> accessMode) { return call_method<SCAPIX_META_STRING("accessModeType"), ref<java::lang::invoke::MethodType>>(accessMode); }
inline jboolean VarHandle::isAccessModeSupported(ref<java::lang::invoke::VarHandle_AccessMode> accessMode) { return call_method<SCAPIX_META_STRING("isAccessModeSupported"), jboolean>(accessMode); }
inline ref<java::lang::invoke::MethodHandle> VarHandle::toMethodHandle(ref<java::lang::invoke::VarHandle_AccessMode> accessMode) { return call_method<SCAPIX_META_STRING("toMethodHandle"), ref<java::lang::invoke::MethodHandle>>(accessMode); }
inline void VarHandle::fullFence() { return call_static_method<SCAPIX_META_STRING("fullFence"), void>(); }
inline void VarHandle::acquireFence() { return call_static_method<SCAPIX_META_STRING("acquireFence"), void>(); }
inline void VarHandle::releaseFence() { return call_static_method<SCAPIX_META_STRING("releaseFence"), void>(); }
inline void VarHandle::loadLoadFence() { return call_static_method<SCAPIX_META_STRING("loadLoadFence"), void>(); }
inline void VarHandle::storeStoreFence() { return call_static_method<SCAPIX_META_STRING("storeStoreFence"), void>(); }

} // namespace java::lang::invoke
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_INVOKE_VARHANDLE_H
