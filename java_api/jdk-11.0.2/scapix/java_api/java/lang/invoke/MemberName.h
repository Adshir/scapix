// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/reflect/Member.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_LANG_INVOKE_MEMBERNAME_H
#define SCAPIX_JAVA_LANG_INVOKE_MEMBERNAME_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class ClassLoader; }
namespace java::lang { class IllegalAccessException; }
namespace java::lang { class ReflectiveOperationException; }
namespace java::lang { class String; }
namespace java::lang::invoke { class MethodType; }
namespace java::lang::reflect { class Constructor; }
namespace java::lang::reflect { class Field; }
namespace java::lang::reflect { class Method; }

namespace java::lang::invoke {

// private
class MemberName : public object_base<SCAPIX_META_STRING("java/lang/invoke/MemberName"),
	java::lang::Object,
	java::lang::reflect::Member,
	java::lang::Cloneable>
{
public:

	ref<java::lang::Class> getDeclaringClass();
	ref<java::lang::ClassLoader> getClassLoader();
	ref<java::lang::String> getName();
	ref<java::lang::invoke::MethodType> getMethodOrFieldType();
	ref<java::lang::invoke::MethodType> getMethodType();
	ref<java::lang::invoke::MethodType> getInvocationType();
	ref<link::java::array<java::lang::Class>> getParameterTypes();
	ref<java::lang::Class> getReturnType();
	ref<java::lang::Class> getFieldType();
	ref<java::lang::Object> getType();
	ref<java::lang::String> getSignature();
	jint getModifiers();
	jbyte getReferenceKind();
	jboolean isMethodHandleInvoke();
	static jboolean isMethodHandleInvokeName(ref<java::lang::String> name);
	jboolean isVarHandleMethodInvoke();
	static jboolean isVarHandleMethodInvokeName(ref<java::lang::String> name);
	jboolean isStatic();
	jboolean isPublic();
	jboolean isPrivate();
	jboolean isProtected();
	jboolean isFinal();
	jboolean canBeStaticallyBound();
	jboolean isVolatile();
	jboolean isAbstract();
	jboolean isNative();
	jboolean isBridge();
	jboolean isVarargs();
	jboolean isSynthetic();
	jboolean isInvocable();
	jboolean isFieldOrMethod();
	jboolean isMethod();
	jboolean isConstructor();
	jboolean isField();
	jboolean isType();
	jboolean isPackage();
	jboolean isCallerSensitive();
	jboolean isAccessibleFrom(ref<java::lang::Class> lookupClass);
	jboolean refersTo(ref<java::lang::Class> declc, ref<java::lang::String> n);
	static ref<MemberName> new_object(ref<java::lang::reflect::Method> m);
	static ref<MemberName> new_object(ref<java::lang::reflect::Method> m, jboolean wantSpecial);
	ref<java::lang::invoke::MemberName> asSpecial();
	ref<java::lang::invoke::MemberName> asConstructor();
	ref<java::lang::invoke::MemberName> asNormalOriginal();
	static ref<MemberName> new_object(ref<java::lang::reflect::Constructor> ctor);
	static ref<MemberName> new_object(ref<java::lang::reflect::Field> fld);
	static ref<MemberName> new_object(ref<java::lang::reflect::Field> fld, jboolean makeSetter);
	jboolean isGetter();
	jboolean isSetter();
	ref<java::lang::invoke::MemberName> asSetter();
	static ref<MemberName> new_object(ref<java::lang::Class> type);
	ref<java::lang::invoke::MemberName> getDefinition();
	jint hashCode();
	jboolean equals(ref<java::lang::Object> that);
	jboolean equals(ref<java::lang::invoke::MemberName> that);
	static ref<MemberName> new_object(ref<java::lang::Class> defClass, ref<java::lang::String> name, ref<java::lang::Class> type, jbyte refKind);
	static ref<MemberName> new_object(ref<java::lang::Class> defClass, ref<java::lang::String> name, ref<java::lang::invoke::MethodType> type, jbyte refKind);
	static ref<MemberName> new_object(jbyte refKind, ref<java::lang::Class> defClass, ref<java::lang::String> name, ref<java::lang::Object> type);
	jboolean hasReceiverTypeDispatch();
	jboolean isResolved();
	ref<java::lang::String> toString();
	ref<java::lang::IllegalAccessException> makeAccessException(ref<java::lang::String> message, ref<java::lang::Object> from);
	ref<java::lang::ReflectiveOperationException> makeAccessException();

protected:

	MemberName(handle_type h) : base_(h) {}

};

} // namespace java::lang::invoke
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/IllegalAccessException.h>
#include <scapix/java_api/java/lang/ReflectiveOperationException.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>
#include <scapix/java_api/java/lang/reflect/Constructor.h>
#include <scapix/java_api/java/lang/reflect/Field.h>
#include <scapix/java_api/java/lang/reflect/Method.h>

namespace scapix::java_api {
namespace java::lang::invoke {

inline ref<java::lang::Class> MemberName::getDeclaringClass() { return call_method<SCAPIX_META_STRING("getDeclaringClass"), ref<java::lang::Class>>(); }
inline ref<java::lang::ClassLoader> MemberName::getClassLoader() { return call_method<SCAPIX_META_STRING("getClassLoader"), ref<java::lang::ClassLoader>>(); }
inline ref<java::lang::String> MemberName::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<java::lang::invoke::MethodType> MemberName::getMethodOrFieldType() { return call_method<SCAPIX_META_STRING("getMethodOrFieldType"), ref<java::lang::invoke::MethodType>>(); }
inline ref<java::lang::invoke::MethodType> MemberName::getMethodType() { return call_method<SCAPIX_META_STRING("getMethodType"), ref<java::lang::invoke::MethodType>>(); }
inline ref<java::lang::invoke::MethodType> MemberName::getInvocationType() { return call_method<SCAPIX_META_STRING("getInvocationType"), ref<java::lang::invoke::MethodType>>(); }
inline ref<link::java::array<java::lang::Class>> MemberName::getParameterTypes() { return call_method<SCAPIX_META_STRING("getParameterTypes"), ref<link::java::array<java::lang::Class>>>(); }
inline ref<java::lang::Class> MemberName::getReturnType() { return call_method<SCAPIX_META_STRING("getReturnType"), ref<java::lang::Class>>(); }
inline ref<java::lang::Class> MemberName::getFieldType() { return call_method<SCAPIX_META_STRING("getFieldType"), ref<java::lang::Class>>(); }
inline ref<java::lang::Object> MemberName::getType() { return call_method<SCAPIX_META_STRING("getType"), ref<java::lang::Object>>(); }
inline ref<java::lang::String> MemberName::getSignature() { return call_method<SCAPIX_META_STRING("getSignature"), ref<java::lang::String>>(); }
inline jint MemberName::getModifiers() { return call_method<SCAPIX_META_STRING("getModifiers"), jint>(); }
inline jbyte MemberName::getReferenceKind() { return call_method<SCAPIX_META_STRING("getReferenceKind"), jbyte>(); }
inline jboolean MemberName::isMethodHandleInvoke() { return call_method<SCAPIX_META_STRING("isMethodHandleInvoke"), jboolean>(); }
inline jboolean MemberName::isMethodHandleInvokeName(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("isMethodHandleInvokeName"), jboolean>(name); }
inline jboolean MemberName::isVarHandleMethodInvoke() { return call_method<SCAPIX_META_STRING("isVarHandleMethodInvoke"), jboolean>(); }
inline jboolean MemberName::isVarHandleMethodInvokeName(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("isVarHandleMethodInvokeName"), jboolean>(name); }
inline jboolean MemberName::isStatic() { return call_method<SCAPIX_META_STRING("isStatic"), jboolean>(); }
inline jboolean MemberName::isPublic() { return call_method<SCAPIX_META_STRING("isPublic"), jboolean>(); }
inline jboolean MemberName::isPrivate() { return call_method<SCAPIX_META_STRING("isPrivate"), jboolean>(); }
inline jboolean MemberName::isProtected() { return call_method<SCAPIX_META_STRING("isProtected"), jboolean>(); }
inline jboolean MemberName::isFinal() { return call_method<SCAPIX_META_STRING("isFinal"), jboolean>(); }
inline jboolean MemberName::canBeStaticallyBound() { return call_method<SCAPIX_META_STRING("canBeStaticallyBound"), jboolean>(); }
inline jboolean MemberName::isVolatile() { return call_method<SCAPIX_META_STRING("isVolatile"), jboolean>(); }
inline jboolean MemberName::isAbstract() { return call_method<SCAPIX_META_STRING("isAbstract"), jboolean>(); }
inline jboolean MemberName::isNative() { return call_method<SCAPIX_META_STRING("isNative"), jboolean>(); }
inline jboolean MemberName::isBridge() { return call_method<SCAPIX_META_STRING("isBridge"), jboolean>(); }
inline jboolean MemberName::isVarargs() { return call_method<SCAPIX_META_STRING("isVarargs"), jboolean>(); }
inline jboolean MemberName::isSynthetic() { return call_method<SCAPIX_META_STRING("isSynthetic"), jboolean>(); }
inline jboolean MemberName::isInvocable() { return call_method<SCAPIX_META_STRING("isInvocable"), jboolean>(); }
inline jboolean MemberName::isFieldOrMethod() { return call_method<SCAPIX_META_STRING("isFieldOrMethod"), jboolean>(); }
inline jboolean MemberName::isMethod() { return call_method<SCAPIX_META_STRING("isMethod"), jboolean>(); }
inline jboolean MemberName::isConstructor() { return call_method<SCAPIX_META_STRING("isConstructor"), jboolean>(); }
inline jboolean MemberName::isField() { return call_method<SCAPIX_META_STRING("isField"), jboolean>(); }
inline jboolean MemberName::isType() { return call_method<SCAPIX_META_STRING("isType"), jboolean>(); }
inline jboolean MemberName::isPackage() { return call_method<SCAPIX_META_STRING("isPackage"), jboolean>(); }
inline jboolean MemberName::isCallerSensitive() { return call_method<SCAPIX_META_STRING("isCallerSensitive"), jboolean>(); }
inline jboolean MemberName::isAccessibleFrom(ref<java::lang::Class> lookupClass) { return call_method<SCAPIX_META_STRING("isAccessibleFrom"), jboolean>(lookupClass); }
inline jboolean MemberName::refersTo(ref<java::lang::Class> declc, ref<java::lang::String> n) { return call_method<SCAPIX_META_STRING("refersTo"), jboolean>(declc, n); }
inline ref<MemberName> MemberName::new_object(ref<java::lang::reflect::Method> m) { return base_::new_object(m); }
inline ref<MemberName> MemberName::new_object(ref<java::lang::reflect::Method> m, jboolean wantSpecial) { return base_::new_object(m, wantSpecial); }
inline ref<java::lang::invoke::MemberName> MemberName::asSpecial() { return call_method<SCAPIX_META_STRING("asSpecial"), ref<java::lang::invoke::MemberName>>(); }
inline ref<java::lang::invoke::MemberName> MemberName::asConstructor() { return call_method<SCAPIX_META_STRING("asConstructor"), ref<java::lang::invoke::MemberName>>(); }
inline ref<java::lang::invoke::MemberName> MemberName::asNormalOriginal() { return call_method<SCAPIX_META_STRING("asNormalOriginal"), ref<java::lang::invoke::MemberName>>(); }
inline ref<MemberName> MemberName::new_object(ref<java::lang::reflect::Constructor> ctor) { return base_::new_object(ctor); }
inline ref<MemberName> MemberName::new_object(ref<java::lang::reflect::Field> fld) { return base_::new_object(fld); }
inline ref<MemberName> MemberName::new_object(ref<java::lang::reflect::Field> fld, jboolean makeSetter) { return base_::new_object(fld, makeSetter); }
inline jboolean MemberName::isGetter() { return call_method<SCAPIX_META_STRING("isGetter"), jboolean>(); }
inline jboolean MemberName::isSetter() { return call_method<SCAPIX_META_STRING("isSetter"), jboolean>(); }
inline ref<java::lang::invoke::MemberName> MemberName::asSetter() { return call_method<SCAPIX_META_STRING("asSetter"), ref<java::lang::invoke::MemberName>>(); }
inline ref<MemberName> MemberName::new_object(ref<java::lang::Class> type) { return base_::new_object(type); }
inline ref<java::lang::invoke::MemberName> MemberName::getDefinition() { return call_method<SCAPIX_META_STRING("getDefinition"), ref<java::lang::invoke::MemberName>>(); }
inline jint MemberName::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean MemberName::equals(ref<java::lang::Object> that) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(that); }
inline jboolean MemberName::equals(ref<java::lang::invoke::MemberName> that) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(that); }
inline ref<MemberName> MemberName::new_object(ref<java::lang::Class> defClass, ref<java::lang::String> name, ref<java::lang::Class> type, jbyte refKind) { return base_::new_object(defClass, name, type, refKind); }
inline ref<MemberName> MemberName::new_object(ref<java::lang::Class> defClass, ref<java::lang::String> name, ref<java::lang::invoke::MethodType> type, jbyte refKind) { return base_::new_object(defClass, name, type, refKind); }
inline ref<MemberName> MemberName::new_object(jbyte refKind, ref<java::lang::Class> defClass, ref<java::lang::String> name, ref<java::lang::Object> type) { return base_::new_object(refKind, defClass, name, type); }
inline jboolean MemberName::hasReceiverTypeDispatch() { return call_method<SCAPIX_META_STRING("hasReceiverTypeDispatch"), jboolean>(); }
inline jboolean MemberName::isResolved() { return call_method<SCAPIX_META_STRING("isResolved"), jboolean>(); }
inline ref<java::lang::String> MemberName::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::IllegalAccessException> MemberName::makeAccessException(ref<java::lang::String> message, ref<java::lang::Object> from) { return call_method<SCAPIX_META_STRING("makeAccessException"), ref<java::lang::IllegalAccessException>>(message, from); }
inline ref<java::lang::ReflectiveOperationException> MemberName::makeAccessException() { return call_method<SCAPIX_META_STRING("makeAccessException"), ref<java::lang::ReflectiveOperationException>>(); }

} // namespace java::lang::invoke
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_INVOKE_MEMBERNAME_H
