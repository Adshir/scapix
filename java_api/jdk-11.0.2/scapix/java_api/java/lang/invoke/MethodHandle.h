// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_INVOKE_METHODHANDLE_H
#define SCAPIX_JAVA_LANG_INVOKE_METHODHANDLE_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class String; }
namespace java::lang::invoke { class MethodType; }
namespace java::util { class List; }

namespace java::lang::invoke {

class MethodHandle : public object_base<SCAPIX_META_STRING("java/lang/invoke/MethodHandle"),
	java::lang::Object>
{
public:

	ref<java::lang::invoke::MethodType> type();
	ref<java::lang::Object> invokeExact(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> invoke(ref<link::java::array<java::lang::Object>> p1);
	ref<java::lang::Object> invokeWithArguments(ref<link::java::array<java::lang::Object>> arguments);
	ref<java::lang::Object> invokeWithArguments(ref<java::util::List> arguments);
	ref<java::lang::invoke::MethodHandle> asType(ref<java::lang::invoke::MethodType> newType);
	ref<java::lang::invoke::MethodHandle> asSpreader(ref<java::lang::Class> arrayType, jint arrayLength);
	ref<java::lang::invoke::MethodHandle> asSpreader(jint spreadArgPos, ref<java::lang::Class> arrayType, jint arrayLength);
	ref<java::lang::invoke::MethodHandle> withVarargs(jboolean makeVarargs);
	ref<java::lang::invoke::MethodHandle> asCollector(ref<java::lang::Class> arrayType, jint arrayLength);
	ref<java::lang::invoke::MethodHandle> asCollector(jint collectArgPos, ref<java::lang::Class> arrayType, jint arrayLength);
	ref<java::lang::invoke::MethodHandle> asVarargsCollector(ref<java::lang::Class> arrayType);
	jboolean isVarargsCollector();
	ref<java::lang::invoke::MethodHandle> asFixedArity();
	ref<java::lang::invoke::MethodHandle> bindTo(ref<java::lang::Object> x);
	ref<java::lang::String> toString();

protected:

	MethodHandle(handle_type h) : base_(h) {}

};

} // namespace java::lang::invoke
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace java::lang::invoke {

inline ref<java::lang::invoke::MethodType> MethodHandle::type() { return call_method<SCAPIX_META_STRING("type"), ref<java::lang::invoke::MethodType>>(); }
inline ref<java::lang::Object> MethodHandle::invokeExact(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("invokeExact"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> MethodHandle::invoke(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("invoke"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> MethodHandle::invokeWithArguments(ref<link::java::array<java::lang::Object>> arguments) { return call_method<SCAPIX_META_STRING("invokeWithArguments"), ref<java::lang::Object>>(arguments); }
inline ref<java::lang::Object> MethodHandle::invokeWithArguments(ref<java::util::List> arguments) { return call_method<SCAPIX_META_STRING("invokeWithArguments"), ref<java::lang::Object>>(arguments); }
inline ref<java::lang::invoke::MethodHandle> MethodHandle::asType(ref<java::lang::invoke::MethodType> newType) { return call_method<SCAPIX_META_STRING("asType"), ref<java::lang::invoke::MethodHandle>>(newType); }
inline ref<java::lang::invoke::MethodHandle> MethodHandle::asSpreader(ref<java::lang::Class> arrayType, jint arrayLength) { return call_method<SCAPIX_META_STRING("asSpreader"), ref<java::lang::invoke::MethodHandle>>(arrayType, arrayLength); }
inline ref<java::lang::invoke::MethodHandle> MethodHandle::asSpreader(jint spreadArgPos, ref<java::lang::Class> arrayType, jint arrayLength) { return call_method<SCAPIX_META_STRING("asSpreader"), ref<java::lang::invoke::MethodHandle>>(spreadArgPos, arrayType, arrayLength); }
inline ref<java::lang::invoke::MethodHandle> MethodHandle::withVarargs(jboolean makeVarargs) { return call_method<SCAPIX_META_STRING("withVarargs"), ref<java::lang::invoke::MethodHandle>>(makeVarargs); }
inline ref<java::lang::invoke::MethodHandle> MethodHandle::asCollector(ref<java::lang::Class> arrayType, jint arrayLength) { return call_method<SCAPIX_META_STRING("asCollector"), ref<java::lang::invoke::MethodHandle>>(arrayType, arrayLength); }
inline ref<java::lang::invoke::MethodHandle> MethodHandle::asCollector(jint collectArgPos, ref<java::lang::Class> arrayType, jint arrayLength) { return call_method<SCAPIX_META_STRING("asCollector"), ref<java::lang::invoke::MethodHandle>>(collectArgPos, arrayType, arrayLength); }
inline ref<java::lang::invoke::MethodHandle> MethodHandle::asVarargsCollector(ref<java::lang::Class> arrayType) { return call_method<SCAPIX_META_STRING("asVarargsCollector"), ref<java::lang::invoke::MethodHandle>>(arrayType); }
inline jboolean MethodHandle::isVarargsCollector() { return call_method<SCAPIX_META_STRING("isVarargsCollector"), jboolean>(); }
inline ref<java::lang::invoke::MethodHandle> MethodHandle::asFixedArity() { return call_method<SCAPIX_META_STRING("asFixedArity"), ref<java::lang::invoke::MethodHandle>>(); }
inline ref<java::lang::invoke::MethodHandle> MethodHandle::bindTo(ref<java::lang::Object> x) { return call_method<SCAPIX_META_STRING("bindTo"), ref<java::lang::invoke::MethodHandle>>(x); }
inline ref<java::lang::String> MethodHandle::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::lang::invoke
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_INVOKE_METHODHANDLE_H
