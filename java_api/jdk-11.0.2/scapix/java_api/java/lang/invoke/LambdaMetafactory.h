// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_INVOKE_LAMBDAMETAFACTORY_H
#define SCAPIX_JAVA_LANG_INVOKE_LAMBDAMETAFACTORY_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::lang::invoke { class CallSite; }
namespace java::lang::invoke { class MethodHandle; }
namespace java::lang::invoke { class MethodHandles_Lookup; }
namespace java::lang::invoke { class MethodType; }

namespace java::lang::invoke {

class LambdaMetafactory : public object_base<SCAPIX_META_STRING("java/lang/invoke/LambdaMetafactory"),
	java::lang::Object>
{
public:

	static jint FLAG_SERIALIZABLE_();
	static jint FLAG_MARKERS_();
	static jint FLAG_BRIDGES_();

	static ref<java::lang::invoke::CallSite> metafactory(ref<java::lang::invoke::MethodHandles_Lookup> caller, ref<java::lang::String> invokedName, ref<java::lang::invoke::MethodType> invokedType, ref<java::lang::invoke::MethodType> samMethodType, ref<java::lang::invoke::MethodHandle> implMethod, ref<java::lang::invoke::MethodType> instantiatedMethodType);
	static ref<java::lang::invoke::CallSite> altMetafactory(ref<java::lang::invoke::MethodHandles_Lookup> caller, ref<java::lang::String> invokedName, ref<java::lang::invoke::MethodType> invokedType, ref<link::java::array<java::lang::Object>> args);

protected:

	LambdaMetafactory(handle_type h) : base_(h) {}

};

} // namespace java::lang::invoke
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/invoke/CallSite.h>
#include <scapix/java_api/java/lang/invoke/MethodHandle.h>
#include <scapix/java_api/java/lang/invoke/MethodHandles_Lookup.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>

namespace scapix::java_api {
namespace java::lang::invoke {

inline jint LambdaMetafactory::FLAG_SERIALIZABLE_() { return get_static_field<SCAPIX_META_STRING("FLAG_SERIALIZABLE"), jint>(); }
inline jint LambdaMetafactory::FLAG_MARKERS_() { return get_static_field<SCAPIX_META_STRING("FLAG_MARKERS"), jint>(); }
inline jint LambdaMetafactory::FLAG_BRIDGES_() { return get_static_field<SCAPIX_META_STRING("FLAG_BRIDGES"), jint>(); }
inline ref<java::lang::invoke::CallSite> LambdaMetafactory::metafactory(ref<java::lang::invoke::MethodHandles_Lookup> caller, ref<java::lang::String> invokedName, ref<java::lang::invoke::MethodType> invokedType, ref<java::lang::invoke::MethodType> samMethodType, ref<java::lang::invoke::MethodHandle> implMethod, ref<java::lang::invoke::MethodType> instantiatedMethodType) { return call_static_method<SCAPIX_META_STRING("metafactory"), ref<java::lang::invoke::CallSite>>(caller, invokedName, invokedType, samMethodType, implMethod, instantiatedMethodType); }
inline ref<java::lang::invoke::CallSite> LambdaMetafactory::altMetafactory(ref<java::lang::invoke::MethodHandles_Lookup> caller, ref<java::lang::String> invokedName, ref<java::lang::invoke::MethodType> invokedType, ref<link::java::array<java::lang::Object>> args) { return call_static_method<SCAPIX_META_STRING("altMetafactory"), ref<java::lang::invoke::CallSite>>(caller, invokedName, invokedType, args); }

} // namespace java::lang::invoke
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_INVOKE_LAMBDAMETAFACTORY_H
