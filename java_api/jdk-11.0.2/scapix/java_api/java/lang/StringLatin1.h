// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_STRINGLATIN1_H
#define SCAPIX_JAVA_LANG_STRINGLATIN1_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util { class Locale; }

namespace java::lang {

// private
class StringLatin1 : public object_base<SCAPIX_META_STRING("java/lang/StringLatin1"),
	java::lang::Object>
{
public:

	static jchar charAt(ref<link::java::array<jbyte>> value, jint index);
	static jboolean canEncode(jint cp);
	static jint length(ref<link::java::array<jbyte>> value);
	static jint codePointAt(ref<link::java::array<jbyte>> value, jint index, jint end);
	static jint codePointBefore(ref<link::java::array<jbyte>> value, jint index);
	static jint codePointCount(ref<link::java::array<jbyte>> value, jint beginIndex, jint endIndex);
	static ref<link::java::array<jchar>> toChars(ref<link::java::array<jbyte>> value);
	static ref<link::java::array<jbyte>> inflate(ref<link::java::array<jbyte>> value, jint off, jint len);
	static void getChars(ref<link::java::array<jbyte>> value, jint srcBegin, jint srcEnd, ref<link::java::array<jchar>> dst, jint dstBegin);
	static void getBytes(ref<link::java::array<jbyte>> value, jint srcBegin, jint srcEnd, ref<link::java::array<jbyte>> dst, jint dstBegin);
	static jboolean equals(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other);
	static jint compareTo(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other);
	static jint compareTo(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other, jint len1, jint len2);
	static jint compareToUTF16(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other);
	static jint compareToUTF16(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other, jint len1, jint len2);
	static jint compareToCI(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other);
	static jint compareToCI_UTF16(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other);
	static jint hashCode(ref<link::java::array<jbyte>> value);
	static jint indexOf(ref<link::java::array<jbyte>> value, jint ch, jint fromIndex);
	static jint indexOf(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> str);
	static jint indexOf(ref<link::java::array<jbyte>> value, jint valueCount, ref<link::java::array<jbyte>> str, jint strCount, jint fromIndex);
	static jint lastIndexOf(ref<link::java::array<jbyte>> src, jint srcCount, ref<link::java::array<jbyte>> tgt, jint tgtCount, jint fromIndex);
	static jint lastIndexOf(ref<link::java::array<jbyte>> value, jint ch, jint fromIndex);
	static ref<java::lang::String> replace(ref<link::java::array<jbyte>> value, jchar oldChar, jchar newChar);
	static jboolean regionMatchesCI(ref<link::java::array<jbyte>> value, jint toffset, ref<link::java::array<jbyte>> other, jint ooffset, jint len);
	static jboolean regionMatchesCI_UTF16(ref<link::java::array<jbyte>> value, jint toffset, ref<link::java::array<jbyte>> other, jint ooffset, jint len);
	static ref<java::lang::String> toLowerCase(ref<java::lang::String> str, ref<link::java::array<jbyte>> value, ref<java::util::Locale> locale);
	static ref<java::lang::String> toUpperCase(ref<java::lang::String> str, ref<link::java::array<jbyte>> value, ref<java::util::Locale> locale);
	static ref<java::lang::String> trim(ref<link::java::array<jbyte>> value);
	static jint indexOfNonWhitespace(ref<link::java::array<jbyte>> value);
	static jint lastIndexOfNonWhitespace(ref<link::java::array<jbyte>> value);
	static ref<java::lang::String> strip(ref<link::java::array<jbyte>> value);
	static ref<java::lang::String> stripLeading(ref<link::java::array<jbyte>> value);
	static ref<java::lang::String> stripTrailing(ref<link::java::array<jbyte>> value);
	static void putChar(ref<link::java::array<jbyte>> val, jint index, jint c);
	static jchar getChar(ref<link::java::array<jbyte>> val, jint index);
	static ref<link::java::array<jbyte>> toBytes(ref<link::java::array<jint>> val, jint off, jint len);
	static ref<link::java::array<jbyte>> toBytes(jchar c);
	static ref<java::lang::String> newString(ref<link::java::array<jbyte>> val, jint index, jint len);
	static void fillNull(ref<link::java::array<jbyte>> val, jint index, jint end);
	static void inflate(ref<link::java::array<jbyte>> src, jint srcOff, ref<link::java::array<jchar>> dst, jint dstOff, jint len);
	static void inflate(ref<link::java::array<jbyte>> src, jint srcOff, ref<link::java::array<jbyte>> dst, jint dstOff, jint len);

protected:

	StringLatin1(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>

namespace scapix::java_api {
namespace java::lang {

inline jchar StringLatin1::charAt(ref<link::java::array<jbyte>> value, jint index) { return call_static_method<SCAPIX_META_STRING("charAt"), jchar>(value, index); }
inline jboolean StringLatin1::canEncode(jint cp) { return call_static_method<SCAPIX_META_STRING("canEncode"), jboolean>(cp); }
inline jint StringLatin1::length(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("length"), jint>(value); }
inline jint StringLatin1::codePointAt(ref<link::java::array<jbyte>> value, jint index, jint end) { return call_static_method<SCAPIX_META_STRING("codePointAt"), jint>(value, index, end); }
inline jint StringLatin1::codePointBefore(ref<link::java::array<jbyte>> value, jint index) { return call_static_method<SCAPIX_META_STRING("codePointBefore"), jint>(value, index); }
inline jint StringLatin1::codePointCount(ref<link::java::array<jbyte>> value, jint beginIndex, jint endIndex) { return call_static_method<SCAPIX_META_STRING("codePointCount"), jint>(value, beginIndex, endIndex); }
inline ref<link::java::array<jchar>> StringLatin1::toChars(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("toChars"), ref<link::java::array<jchar>>>(value); }
inline ref<link::java::array<jbyte>> StringLatin1::inflate(ref<link::java::array<jbyte>> value, jint off, jint len) { return call_static_method<SCAPIX_META_STRING("inflate"), ref<link::java::array<jbyte>>>(value, off, len); }
inline void StringLatin1::getChars(ref<link::java::array<jbyte>> value, jint srcBegin, jint srcEnd, ref<link::java::array<jchar>> dst, jint dstBegin) { return call_static_method<SCAPIX_META_STRING("getChars"), void>(value, srcBegin, srcEnd, dst, dstBegin); }
inline void StringLatin1::getBytes(ref<link::java::array<jbyte>> value, jint srcBegin, jint srcEnd, ref<link::java::array<jbyte>> dst, jint dstBegin) { return call_static_method<SCAPIX_META_STRING("getBytes"), void>(value, srcBegin, srcEnd, dst, dstBegin); }
inline jboolean StringLatin1::equals(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other) { return call_static_method<SCAPIX_META_STRING("equals"), jboolean>(value, other); }
inline jint StringLatin1::compareTo(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other) { return call_static_method<SCAPIX_META_STRING("compareTo"), jint>(value, other); }
inline jint StringLatin1::compareTo(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other, jint len1, jint len2) { return call_static_method<SCAPIX_META_STRING("compareTo"), jint>(value, other, len1, len2); }
inline jint StringLatin1::compareToUTF16(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other) { return call_static_method<SCAPIX_META_STRING("compareToUTF16"), jint>(value, other); }
inline jint StringLatin1::compareToUTF16(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other, jint len1, jint len2) { return call_static_method<SCAPIX_META_STRING("compareToUTF16"), jint>(value, other, len1, len2); }
inline jint StringLatin1::compareToCI(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other) { return call_static_method<SCAPIX_META_STRING("compareToCI"), jint>(value, other); }
inline jint StringLatin1::compareToCI_UTF16(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> other) { return call_static_method<SCAPIX_META_STRING("compareToCI_UTF16"), jint>(value, other); }
inline jint StringLatin1::hashCode(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(value); }
inline jint StringLatin1::indexOf(ref<link::java::array<jbyte>> value, jint ch, jint fromIndex) { return call_static_method<SCAPIX_META_STRING("indexOf"), jint>(value, ch, fromIndex); }
inline jint StringLatin1::indexOf(ref<link::java::array<jbyte>> value, ref<link::java::array<jbyte>> str) { return call_static_method<SCAPIX_META_STRING("indexOf"), jint>(value, str); }
inline jint StringLatin1::indexOf(ref<link::java::array<jbyte>> value, jint valueCount, ref<link::java::array<jbyte>> str, jint strCount, jint fromIndex) { return call_static_method<SCAPIX_META_STRING("indexOf"), jint>(value, valueCount, str, strCount, fromIndex); }
inline jint StringLatin1::lastIndexOf(ref<link::java::array<jbyte>> src, jint srcCount, ref<link::java::array<jbyte>> tgt, jint tgtCount, jint fromIndex) { return call_static_method<SCAPIX_META_STRING("lastIndexOf"), jint>(src, srcCount, tgt, tgtCount, fromIndex); }
inline jint StringLatin1::lastIndexOf(ref<link::java::array<jbyte>> value, jint ch, jint fromIndex) { return call_static_method<SCAPIX_META_STRING("lastIndexOf"), jint>(value, ch, fromIndex); }
inline ref<java::lang::String> StringLatin1::replace(ref<link::java::array<jbyte>> value, jchar oldChar, jchar newChar) { return call_static_method<SCAPIX_META_STRING("replace"), ref<java::lang::String>>(value, oldChar, newChar); }
inline jboolean StringLatin1::regionMatchesCI(ref<link::java::array<jbyte>> value, jint toffset, ref<link::java::array<jbyte>> other, jint ooffset, jint len) { return call_static_method<SCAPIX_META_STRING("regionMatchesCI"), jboolean>(value, toffset, other, ooffset, len); }
inline jboolean StringLatin1::regionMatchesCI_UTF16(ref<link::java::array<jbyte>> value, jint toffset, ref<link::java::array<jbyte>> other, jint ooffset, jint len) { return call_static_method<SCAPIX_META_STRING("regionMatchesCI_UTF16"), jboolean>(value, toffset, other, ooffset, len); }
inline ref<java::lang::String> StringLatin1::toLowerCase(ref<java::lang::String> str, ref<link::java::array<jbyte>> value, ref<java::util::Locale> locale) { return call_static_method<SCAPIX_META_STRING("toLowerCase"), ref<java::lang::String>>(str, value, locale); }
inline ref<java::lang::String> StringLatin1::toUpperCase(ref<java::lang::String> str, ref<link::java::array<jbyte>> value, ref<java::util::Locale> locale) { return call_static_method<SCAPIX_META_STRING("toUpperCase"), ref<java::lang::String>>(str, value, locale); }
inline ref<java::lang::String> StringLatin1::trim(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("trim"), ref<java::lang::String>>(value); }
inline jint StringLatin1::indexOfNonWhitespace(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("indexOfNonWhitespace"), jint>(value); }
inline jint StringLatin1::lastIndexOfNonWhitespace(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("lastIndexOfNonWhitespace"), jint>(value); }
inline ref<java::lang::String> StringLatin1::strip(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("strip"), ref<java::lang::String>>(value); }
inline ref<java::lang::String> StringLatin1::stripLeading(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("stripLeading"), ref<java::lang::String>>(value); }
inline ref<java::lang::String> StringLatin1::stripTrailing(ref<link::java::array<jbyte>> value) { return call_static_method<SCAPIX_META_STRING("stripTrailing"), ref<java::lang::String>>(value); }
inline void StringLatin1::putChar(ref<link::java::array<jbyte>> val, jint index, jint c) { return call_static_method<SCAPIX_META_STRING("putChar"), void>(val, index, c); }
inline jchar StringLatin1::getChar(ref<link::java::array<jbyte>> val, jint index) { return call_static_method<SCAPIX_META_STRING("getChar"), jchar>(val, index); }
inline ref<link::java::array<jbyte>> StringLatin1::toBytes(ref<link::java::array<jint>> val, jint off, jint len) { return call_static_method<SCAPIX_META_STRING("toBytes"), ref<link::java::array<jbyte>>>(val, off, len); }
inline ref<link::java::array<jbyte>> StringLatin1::toBytes(jchar c) { return call_static_method<SCAPIX_META_STRING("toBytes"), ref<link::java::array<jbyte>>>(c); }
inline ref<java::lang::String> StringLatin1::newString(ref<link::java::array<jbyte>> val, jint index, jint len) { return call_static_method<SCAPIX_META_STRING("newString"), ref<java::lang::String>>(val, index, len); }
inline void StringLatin1::fillNull(ref<link::java::array<jbyte>> val, jint index, jint end) { return call_static_method<SCAPIX_META_STRING("fillNull"), void>(val, index, end); }
inline void StringLatin1::inflate(ref<link::java::array<jbyte>> src, jint srcOff, ref<link::java::array<jchar>> dst, jint dstOff, jint len) { return call_static_method<SCAPIX_META_STRING("inflate"), void>(src, srcOff, dst, dstOff, len); }
inline void StringLatin1::inflate(ref<link::java::array<jbyte>> src, jint srcOff, ref<link::java::array<jbyte>> dst, jint dstOff, jint len) { return call_static_method<SCAPIX_META_STRING("inflate"), void>(src, srcOff, dst, dstOff, len); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_STRINGLATIN1_H
