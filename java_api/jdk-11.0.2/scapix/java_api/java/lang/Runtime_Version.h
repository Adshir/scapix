// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_LANG_RUNTIME_VERSION_H
#define SCAPIX_JAVA_LANG_RUNTIME_VERSION_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util { class List; }
namespace java::util { class Optional; }

namespace java::lang {

class Runtime_Version : public object_base<SCAPIX_META_STRING("java/lang/Runtime$Version"),
	java::lang::Object,
	java::lang::Comparable>
{
public:

	static ref<java::lang::Runtime_Version> parse(ref<java::lang::String> s);
	jint feature();
	jint interim();
	jint update();
	jint patch();
	jint major();
	jint minor();
	jint security();
	ref<java::util::List> version();
	ref<java::util::Optional> pre();
	ref<java::util::Optional> build();
	ref<java::util::Optional> optional();
	jint compareTo(ref<java::lang::Runtime_Version> obj);
	jint compareToIgnoreOptional(ref<java::lang::Runtime_Version> obj);
	ref<java::lang::String> toString();
	jboolean equals(ref<java::lang::Object> obj);
	jboolean equalsIgnoreOptional(ref<java::lang::Object> obj);
	jint hashCode();

protected:

	Runtime_Version(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Optional.h>

namespace scapix::java_api {
namespace java::lang {

inline ref<java::lang::Runtime_Version> Runtime_Version::parse(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("parse"), ref<java::lang::Runtime_Version>>(s); }
inline jint Runtime_Version::feature() { return call_method<SCAPIX_META_STRING("feature"), jint>(); }
inline jint Runtime_Version::interim() { return call_method<SCAPIX_META_STRING("interim"), jint>(); }
inline jint Runtime_Version::update() { return call_method<SCAPIX_META_STRING("update"), jint>(); }
inline jint Runtime_Version::patch() { return call_method<SCAPIX_META_STRING("patch"), jint>(); }
inline jint Runtime_Version::major() { return call_method<SCAPIX_META_STRING("major"), jint>(); }
inline jint Runtime_Version::minor() { return call_method<SCAPIX_META_STRING("minor"), jint>(); }
inline jint Runtime_Version::security() { return call_method<SCAPIX_META_STRING("security"), jint>(); }
inline ref<java::util::List> Runtime_Version::version() { return call_method<SCAPIX_META_STRING("version"), ref<java::util::List>>(); }
inline ref<java::util::Optional> Runtime_Version::pre() { return call_method<SCAPIX_META_STRING("pre"), ref<java::util::Optional>>(); }
inline ref<java::util::Optional> Runtime_Version::build() { return call_method<SCAPIX_META_STRING("build"), ref<java::util::Optional>>(); }
inline ref<java::util::Optional> Runtime_Version::optional() { return call_method<SCAPIX_META_STRING("optional"), ref<java::util::Optional>>(); }
inline jint Runtime_Version::compareTo(ref<java::lang::Runtime_Version> obj) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(obj); }
inline jint Runtime_Version::compareToIgnoreOptional(ref<java::lang::Runtime_Version> obj) { return call_method<SCAPIX_META_STRING("compareToIgnoreOptional"), jint>(obj); }
inline ref<java::lang::String> Runtime_Version::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean Runtime_Version::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jboolean Runtime_Version::equalsIgnoreOptional(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equalsIgnoreOptional"), jboolean>(obj); }
inline jint Runtime_Version::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_RUNTIME_VERSION_H
