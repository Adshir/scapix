// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_LANG_REFLECT_PROXY_H
#define SCAPIX_JAVA_LANG_REFLECT_PROXY_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class ClassLoader; }
namespace java::lang::reflect { class InvocationHandler; }

namespace java::lang::reflect {

class Proxy : public object_base<SCAPIX_META_STRING("java/lang/reflect/Proxy"),
	java::lang::Object,
	java::io::Serializable>
{
public:

	static ref<java::lang::Class> getProxyClass(ref<java::lang::ClassLoader> loader, ref<link::java::array<java::lang::Class>> interfaces);
	static ref<java::lang::Object> newProxyInstance(ref<java::lang::ClassLoader> loader, ref<link::java::array<java::lang::Class>> interfaces, ref<java::lang::reflect::InvocationHandler> h);
	static jboolean isProxyClass(ref<java::lang::Class> cl);
	static ref<java::lang::reflect::InvocationHandler> getInvocationHandler(ref<java::lang::Object> proxy);

protected:

	Proxy(handle_type h) : base_(h) {}

};

} // namespace java::lang::reflect
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/reflect/InvocationHandler.h>

namespace scapix::java_api {
namespace java::lang::reflect {

inline ref<java::lang::Class> Proxy::getProxyClass(ref<java::lang::ClassLoader> loader, ref<link::java::array<java::lang::Class>> interfaces) { return call_static_method<SCAPIX_META_STRING("getProxyClass"), ref<java::lang::Class>>(loader, interfaces); }
inline ref<java::lang::Object> Proxy::newProxyInstance(ref<java::lang::ClassLoader> loader, ref<link::java::array<java::lang::Class>> interfaces, ref<java::lang::reflect::InvocationHandler> h) { return call_static_method<SCAPIX_META_STRING("newProxyInstance"), ref<java::lang::Object>>(loader, interfaces, h); }
inline jboolean Proxy::isProxyClass(ref<java::lang::Class> cl) { return call_static_method<SCAPIX_META_STRING("isProxyClass"), jboolean>(cl); }
inline ref<java::lang::reflect::InvocationHandler> Proxy::getInvocationHandler(ref<java::lang::Object> proxy) { return call_static_method<SCAPIX_META_STRING("getInvocationHandler"), ref<java::lang::reflect::InvocationHandler>>(proxy); }

} // namespace java::lang::reflect
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_REFLECT_PROXY_H
