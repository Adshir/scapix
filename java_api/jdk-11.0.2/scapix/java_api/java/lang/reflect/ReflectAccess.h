// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/jdk/internal/reflect/LangReflectAccess.h>

#ifndef SCAPIX_JAVA_LANG_REFLECT_REFLECTACCESS_H
#define SCAPIX_JAVA_LANG_REFLECT_REFLECTACCESS_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class String; }
namespace java::lang::reflect { class AccessibleObject; }
namespace java::lang::reflect { class Constructor; }
namespace java::lang::reflect { class Executable; }
namespace java::lang::reflect { class Field; }
namespace java::lang::reflect { class Method; }
namespace jdk::internal::reflect { class ConstructorAccessor; }
namespace jdk::internal::reflect { class MethodAccessor; }

namespace java::lang::reflect {

// private
class ReflectAccess : public object_base<SCAPIX_META_STRING("java/lang/reflect/ReflectAccess"),
	java::lang::Object,
	jdk::internal::reflect::LangReflectAccess>
{
public:

	ref<java::lang::reflect::Field> newField(ref<java::lang::Class> declaringClass, ref<java::lang::String> name, ref<java::lang::Class> type, jint modifiers, jint slot, ref<java::lang::String> signature, ref<link::java::array<jbyte>> annotations);
	ref<java::lang::reflect::Method> newMethod(ref<java::lang::Class> declaringClass, ref<java::lang::String> name, ref<link::java::array<java::lang::Class>> parameterTypes, ref<java::lang::Class> returnType, ref<link::java::array<java::lang::Class>> checkedExceptions, jint modifiers, jint slot, ref<java::lang::String> signature, ref<link::java::array<jbyte>> annotations, ref<link::java::array<jbyte>> parameterAnnotations, ref<link::java::array<jbyte>> annotationDefault);
	ref<java::lang::reflect::Constructor> newConstructor(ref<java::lang::Class> declaringClass, ref<link::java::array<java::lang::Class>> parameterTypes, ref<link::java::array<java::lang::Class>> checkedExceptions, jint modifiers, jint slot, ref<java::lang::String> signature, ref<link::java::array<jbyte>> annotations, ref<link::java::array<jbyte>> parameterAnnotations);
	ref<jdk::internal::reflect::MethodAccessor> getMethodAccessor(ref<java::lang::reflect::Method> m);
	void setMethodAccessor(ref<java::lang::reflect::Method> m, ref<jdk::internal::reflect::MethodAccessor> accessor);
	ref<jdk::internal::reflect::ConstructorAccessor> getConstructorAccessor(ref<java::lang::reflect::Constructor> c);
	void setConstructorAccessor(ref<java::lang::reflect::Constructor> c, ref<jdk::internal::reflect::ConstructorAccessor> accessor);
	jint getConstructorSlot(ref<java::lang::reflect::Constructor> c);
	ref<java::lang::String> getConstructorSignature(ref<java::lang::reflect::Constructor> c);
	ref<link::java::array<jbyte>> getConstructorAnnotations(ref<java::lang::reflect::Constructor> c);
	ref<link::java::array<jbyte>> getConstructorParameterAnnotations(ref<java::lang::reflect::Constructor> c);
	ref<link::java::array<jbyte>> getExecutableTypeAnnotationBytes(ref<java::lang::reflect::Executable> ex);
	ref<link::java::array<java::lang::Class>> getExecutableSharedParameterTypes(ref<java::lang::reflect::Executable> ex);
	ref<java::lang::reflect::Method> copyMethod(ref<java::lang::reflect::Method> arg);
	ref<java::lang::reflect::Method> leafCopyMethod(ref<java::lang::reflect::Method> arg);
	ref<java::lang::reflect::Field> copyField(ref<java::lang::reflect::Field> arg);
	ref<java::lang::reflect::Constructor> copyConstructor(ref<java::lang::reflect::Constructor> arg);
	ref<java::lang::reflect::AccessibleObject> getRoot(ref<java::lang::reflect::AccessibleObject> obj);

protected:

	ReflectAccess(handle_type h) : base_(h) {}

};

} // namespace java::lang::reflect
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/AccessibleObject.h>
#include <scapix/java_api/java/lang/reflect/Constructor.h>
#include <scapix/java_api/java/lang/reflect/Executable.h>
#include <scapix/java_api/java/lang/reflect/Field.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#include <scapix/java_api/jdk/internal/reflect/ConstructorAccessor.h>
#include <scapix/java_api/jdk/internal/reflect/MethodAccessor.h>

namespace scapix::java_api {
namespace java::lang::reflect {

inline ref<java::lang::reflect::Field> ReflectAccess::newField(ref<java::lang::Class> declaringClass, ref<java::lang::String> name, ref<java::lang::Class> type, jint modifiers, jint slot, ref<java::lang::String> signature, ref<link::java::array<jbyte>> annotations) { return call_method<SCAPIX_META_STRING("newField"), ref<java::lang::reflect::Field>>(declaringClass, name, type, modifiers, slot, signature, annotations); }
inline ref<java::lang::reflect::Method> ReflectAccess::newMethod(ref<java::lang::Class> declaringClass, ref<java::lang::String> name, ref<link::java::array<java::lang::Class>> parameterTypes, ref<java::lang::Class> returnType, ref<link::java::array<java::lang::Class>> checkedExceptions, jint modifiers, jint slot, ref<java::lang::String> signature, ref<link::java::array<jbyte>> annotations, ref<link::java::array<jbyte>> parameterAnnotations, ref<link::java::array<jbyte>> annotationDefault) { return call_method<SCAPIX_META_STRING("newMethod"), ref<java::lang::reflect::Method>>(declaringClass, name, parameterTypes, returnType, checkedExceptions, modifiers, slot, signature, annotations, parameterAnnotations, annotationDefault); }
inline ref<java::lang::reflect::Constructor> ReflectAccess::newConstructor(ref<java::lang::Class> declaringClass, ref<link::java::array<java::lang::Class>> parameterTypes, ref<link::java::array<java::lang::Class>> checkedExceptions, jint modifiers, jint slot, ref<java::lang::String> signature, ref<link::java::array<jbyte>> annotations, ref<link::java::array<jbyte>> parameterAnnotations) { return call_method<SCAPIX_META_STRING("newConstructor"), ref<java::lang::reflect::Constructor>>(declaringClass, parameterTypes, checkedExceptions, modifiers, slot, signature, annotations, parameterAnnotations); }
inline ref<jdk::internal::reflect::MethodAccessor> ReflectAccess::getMethodAccessor(ref<java::lang::reflect::Method> m) { return call_method<SCAPIX_META_STRING("getMethodAccessor"), ref<jdk::internal::reflect::MethodAccessor>>(m); }
inline void ReflectAccess::setMethodAccessor(ref<java::lang::reflect::Method> m, ref<jdk::internal::reflect::MethodAccessor> accessor) { return call_method<SCAPIX_META_STRING("setMethodAccessor"), void>(m, accessor); }
inline ref<jdk::internal::reflect::ConstructorAccessor> ReflectAccess::getConstructorAccessor(ref<java::lang::reflect::Constructor> c) { return call_method<SCAPIX_META_STRING("getConstructorAccessor"), ref<jdk::internal::reflect::ConstructorAccessor>>(c); }
inline void ReflectAccess::setConstructorAccessor(ref<java::lang::reflect::Constructor> c, ref<jdk::internal::reflect::ConstructorAccessor> accessor) { return call_method<SCAPIX_META_STRING("setConstructorAccessor"), void>(c, accessor); }
inline jint ReflectAccess::getConstructorSlot(ref<java::lang::reflect::Constructor> c) { return call_method<SCAPIX_META_STRING("getConstructorSlot"), jint>(c); }
inline ref<java::lang::String> ReflectAccess::getConstructorSignature(ref<java::lang::reflect::Constructor> c) { return call_method<SCAPIX_META_STRING("getConstructorSignature"), ref<java::lang::String>>(c); }
inline ref<link::java::array<jbyte>> ReflectAccess::getConstructorAnnotations(ref<java::lang::reflect::Constructor> c) { return call_method<SCAPIX_META_STRING("getConstructorAnnotations"), ref<link::java::array<jbyte>>>(c); }
inline ref<link::java::array<jbyte>> ReflectAccess::getConstructorParameterAnnotations(ref<java::lang::reflect::Constructor> c) { return call_method<SCAPIX_META_STRING("getConstructorParameterAnnotations"), ref<link::java::array<jbyte>>>(c); }
inline ref<link::java::array<jbyte>> ReflectAccess::getExecutableTypeAnnotationBytes(ref<java::lang::reflect::Executable> ex) { return call_method<SCAPIX_META_STRING("getExecutableTypeAnnotationBytes"), ref<link::java::array<jbyte>>>(ex); }
inline ref<link::java::array<java::lang::Class>> ReflectAccess::getExecutableSharedParameterTypes(ref<java::lang::reflect::Executable> ex) { return call_method<SCAPIX_META_STRING("getExecutableSharedParameterTypes"), ref<link::java::array<java::lang::Class>>>(ex); }
inline ref<java::lang::reflect::Method> ReflectAccess::copyMethod(ref<java::lang::reflect::Method> arg) { return call_method<SCAPIX_META_STRING("copyMethod"), ref<java::lang::reflect::Method>>(arg); }
inline ref<java::lang::reflect::Method> ReflectAccess::leafCopyMethod(ref<java::lang::reflect::Method> arg) { return call_method<SCAPIX_META_STRING("leafCopyMethod"), ref<java::lang::reflect::Method>>(arg); }
inline ref<java::lang::reflect::Field> ReflectAccess::copyField(ref<java::lang::reflect::Field> arg) { return call_method<SCAPIX_META_STRING("copyField"), ref<java::lang::reflect::Field>>(arg); }
inline ref<java::lang::reflect::Constructor> ReflectAccess::copyConstructor(ref<java::lang::reflect::Constructor> arg) { return call_method<SCAPIX_META_STRING("copyConstructor"), ref<java::lang::reflect::Constructor>>(arg); }
inline ref<java::lang::reflect::AccessibleObject> ReflectAccess::getRoot(ref<java::lang::reflect::AccessibleObject> obj) { return call_method<SCAPIX_META_STRING("getRoot"), ref<java::lang::reflect::AccessibleObject>>(obj); }

} // namespace java::lang::reflect
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_REFLECT_REFLECTACCESS_H
