// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/reflect/Executable.h>

#ifndef SCAPIX_JAVA_LANG_REFLECT_METHOD_H
#define SCAPIX_JAVA_LANG_REFLECT_METHOD_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::lang::annotation { class Annotation; }
namespace java::lang::reflect { class AnnotatedType; }
namespace java::lang::reflect { class Type; }
namespace java::lang::reflect { class TypeVariable; }

namespace java::lang::reflect {

class Method : public object_base<SCAPIX_META_STRING("java/lang/reflect/Method"),
	java::lang::reflect::Executable>
{
public:

	void setAccessible(jboolean flag);
	ref<java::lang::Class> getDeclaringClass();
	ref<java::lang::String> getName();
	jint getModifiers();
	ref<link::java::array<java::lang::reflect::TypeVariable>> getTypeParameters();
	ref<java::lang::Class> getReturnType();
	ref<java::lang::reflect::Type> getGenericReturnType();
	ref<link::java::array<java::lang::Class>> getParameterTypes();
	jint getParameterCount();
	ref<link::java::array<java::lang::reflect::Type>> getGenericParameterTypes();
	ref<link::java::array<java::lang::Class>> getExceptionTypes();
	ref<link::java::array<java::lang::reflect::Type>> getGenericExceptionTypes();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();
	ref<java::lang::String> toGenericString();
	ref<java::lang::Object> invoke(ref<java::lang::Object> obj, ref<link::java::array<java::lang::Object>> args);
	jboolean isBridge();
	jboolean isVarArgs();
	jboolean isSynthetic();
	jboolean isDefault();
	ref<java::lang::Object> getDefaultValue();
	ref<java::lang::annotation::Annotation> getAnnotation(ref<java::lang::Class> annotationClass);
	ref<link::java::array<java::lang::annotation::Annotation>> getDeclaredAnnotations();
	ref<link::java::array<link::java::array<java::lang::annotation::Annotation>>> getParameterAnnotations();
	ref<java::lang::reflect::AnnotatedType> getAnnotatedReturnType();

protected:

	Method(handle_type h) : base_(h) {}

};

} // namespace java::lang::reflect
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/annotation/Annotation.h>
#include <scapix/java_api/java/lang/reflect/AnnotatedType.h>
#include <scapix/java_api/java/lang/reflect/Type.h>
#include <scapix/java_api/java/lang/reflect/TypeVariable.h>

namespace scapix::java_api {
namespace java::lang::reflect {

inline void Method::setAccessible(jboolean flag) { return call_method<SCAPIX_META_STRING("setAccessible"), void>(flag); }
inline ref<java::lang::Class> Method::getDeclaringClass() { return call_method<SCAPIX_META_STRING("getDeclaringClass"), ref<java::lang::Class>>(); }
inline ref<java::lang::String> Method::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline jint Method::getModifiers() { return call_method<SCAPIX_META_STRING("getModifiers"), jint>(); }
inline ref<link::java::array<java::lang::reflect::TypeVariable>> Method::getTypeParameters() { return call_method<SCAPIX_META_STRING("getTypeParameters"), ref<link::java::array<java::lang::reflect::TypeVariable>>>(); }
inline ref<java::lang::Class> Method::getReturnType() { return call_method<SCAPIX_META_STRING("getReturnType"), ref<java::lang::Class>>(); }
inline ref<java::lang::reflect::Type> Method::getGenericReturnType() { return call_method<SCAPIX_META_STRING("getGenericReturnType"), ref<java::lang::reflect::Type>>(); }
inline ref<link::java::array<java::lang::Class>> Method::getParameterTypes() { return call_method<SCAPIX_META_STRING("getParameterTypes"), ref<link::java::array<java::lang::Class>>>(); }
inline jint Method::getParameterCount() { return call_method<SCAPIX_META_STRING("getParameterCount"), jint>(); }
inline ref<link::java::array<java::lang::reflect::Type>> Method::getGenericParameterTypes() { return call_method<SCAPIX_META_STRING("getGenericParameterTypes"), ref<link::java::array<java::lang::reflect::Type>>>(); }
inline ref<link::java::array<java::lang::Class>> Method::getExceptionTypes() { return call_method<SCAPIX_META_STRING("getExceptionTypes"), ref<link::java::array<java::lang::Class>>>(); }
inline ref<link::java::array<java::lang::reflect::Type>> Method::getGenericExceptionTypes() { return call_method<SCAPIX_META_STRING("getGenericExceptionTypes"), ref<link::java::array<java::lang::reflect::Type>>>(); }
inline jboolean Method::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint Method::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> Method::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Method::toGenericString() { return call_method<SCAPIX_META_STRING("toGenericString"), ref<java::lang::String>>(); }
inline ref<java::lang::Object> Method::invoke(ref<java::lang::Object> obj, ref<link::java::array<java::lang::Object>> args) { return call_method<SCAPIX_META_STRING("invoke"), ref<java::lang::Object>>(obj, args); }
inline jboolean Method::isBridge() { return call_method<SCAPIX_META_STRING("isBridge"), jboolean>(); }
inline jboolean Method::isVarArgs() { return call_method<SCAPIX_META_STRING("isVarArgs"), jboolean>(); }
inline jboolean Method::isSynthetic() { return call_method<SCAPIX_META_STRING("isSynthetic"), jboolean>(); }
inline jboolean Method::isDefault() { return call_method<SCAPIX_META_STRING("isDefault"), jboolean>(); }
inline ref<java::lang::Object> Method::getDefaultValue() { return call_method<SCAPIX_META_STRING("getDefaultValue"), ref<java::lang::Object>>(); }
inline ref<java::lang::annotation::Annotation> Method::getAnnotation(ref<java::lang::Class> annotationClass) { return call_method<SCAPIX_META_STRING("getAnnotation"), ref<java::lang::annotation::Annotation>>(annotationClass); }
inline ref<link::java::array<java::lang::annotation::Annotation>> Method::getDeclaredAnnotations() { return call_method<SCAPIX_META_STRING("getDeclaredAnnotations"), ref<link::java::array<java::lang::annotation::Annotation>>>(); }
inline ref<link::java::array<link::java::array<java::lang::annotation::Annotation>>> Method::getParameterAnnotations() { return call_method<SCAPIX_META_STRING("getParameterAnnotations"), ref<link::java::array<link::java::array<java::lang::annotation::Annotation>>>>(); }
inline ref<java::lang::reflect::AnnotatedType> Method::getAnnotatedReturnType() { return call_method<SCAPIX_META_STRING("getAnnotatedReturnType"), ref<java::lang::reflect::AnnotatedType>>(); }

} // namespace java::lang::reflect
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_REFLECT_METHOD_H
