// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/reflect/AnnotatedElement.h>

#ifndef SCAPIX_JAVA_LANG_REFLECT_PARAMETER_H
#define SCAPIX_JAVA_LANG_REFLECT_PARAMETER_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class String; }
namespace java::lang::annotation { class Annotation; }
namespace java::lang::reflect { class AnnotatedType; }
namespace java::lang::reflect { class Executable; }
namespace java::lang::reflect { class Type; }

namespace java::lang::reflect {

class Parameter : public object_base<SCAPIX_META_STRING("java/lang/reflect/Parameter"),
	java::lang::Object,
	java::lang::reflect::AnnotatedElement>
{
public:

	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	jboolean isNamePresent();
	ref<java::lang::String> toString();
	ref<java::lang::reflect::Executable> getDeclaringExecutable();
	jint getModifiers();
	ref<java::lang::String> getName();
	ref<java::lang::reflect::Type> getParameterizedType();
	ref<java::lang::Class> getType();
	ref<java::lang::reflect::AnnotatedType> getAnnotatedType();
	jboolean isImplicit();
	jboolean isSynthetic();
	jboolean isVarArgs();
	ref<java::lang::annotation::Annotation> getAnnotation(ref<java::lang::Class> annotationClass);
	ref<link::java::array<java::lang::annotation::Annotation>> getAnnotationsByType(ref<java::lang::Class> annotationClass);
	ref<link::java::array<java::lang::annotation::Annotation>> getDeclaredAnnotations();
	ref<java::lang::annotation::Annotation> getDeclaredAnnotation(ref<java::lang::Class> annotationClass);
	ref<link::java::array<java::lang::annotation::Annotation>> getDeclaredAnnotationsByType(ref<java::lang::Class> annotationClass);
	ref<link::java::array<java::lang::annotation::Annotation>> getAnnotations();

protected:

	Parameter(handle_type h) : base_(h) {}

};

} // namespace java::lang::reflect
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/annotation/Annotation.h>
#include <scapix/java_api/java/lang/reflect/AnnotatedType.h>
#include <scapix/java_api/java/lang/reflect/Executable.h>
#include <scapix/java_api/java/lang/reflect/Type.h>

namespace scapix::java_api {
namespace java::lang::reflect {

inline jboolean Parameter::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint Parameter::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean Parameter::isNamePresent() { return call_method<SCAPIX_META_STRING("isNamePresent"), jboolean>(); }
inline ref<java::lang::String> Parameter::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::reflect::Executable> Parameter::getDeclaringExecutable() { return call_method<SCAPIX_META_STRING("getDeclaringExecutable"), ref<java::lang::reflect::Executable>>(); }
inline jint Parameter::getModifiers() { return call_method<SCAPIX_META_STRING("getModifiers"), jint>(); }
inline ref<java::lang::String> Parameter::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<java::lang::reflect::Type> Parameter::getParameterizedType() { return call_method<SCAPIX_META_STRING("getParameterizedType"), ref<java::lang::reflect::Type>>(); }
inline ref<java::lang::Class> Parameter::getType() { return call_method<SCAPIX_META_STRING("getType"), ref<java::lang::Class>>(); }
inline ref<java::lang::reflect::AnnotatedType> Parameter::getAnnotatedType() { return call_method<SCAPIX_META_STRING("getAnnotatedType"), ref<java::lang::reflect::AnnotatedType>>(); }
inline jboolean Parameter::isImplicit() { return call_method<SCAPIX_META_STRING("isImplicit"), jboolean>(); }
inline jboolean Parameter::isSynthetic() { return call_method<SCAPIX_META_STRING("isSynthetic"), jboolean>(); }
inline jboolean Parameter::isVarArgs() { return call_method<SCAPIX_META_STRING("isVarArgs"), jboolean>(); }
inline ref<java::lang::annotation::Annotation> Parameter::getAnnotation(ref<java::lang::Class> annotationClass) { return call_method<SCAPIX_META_STRING("getAnnotation"), ref<java::lang::annotation::Annotation>>(annotationClass); }
inline ref<link::java::array<java::lang::annotation::Annotation>> Parameter::getAnnotationsByType(ref<java::lang::Class> annotationClass) { return call_method<SCAPIX_META_STRING("getAnnotationsByType"), ref<link::java::array<java::lang::annotation::Annotation>>>(annotationClass); }
inline ref<link::java::array<java::lang::annotation::Annotation>> Parameter::getDeclaredAnnotations() { return call_method<SCAPIX_META_STRING("getDeclaredAnnotations"), ref<link::java::array<java::lang::annotation::Annotation>>>(); }
inline ref<java::lang::annotation::Annotation> Parameter::getDeclaredAnnotation(ref<java::lang::Class> annotationClass) { return call_method<SCAPIX_META_STRING("getDeclaredAnnotation"), ref<java::lang::annotation::Annotation>>(annotationClass); }
inline ref<link::java::array<java::lang::annotation::Annotation>> Parameter::getDeclaredAnnotationsByType(ref<java::lang::Class> annotationClass) { return call_method<SCAPIX_META_STRING("getDeclaredAnnotationsByType"), ref<link::java::array<java::lang::annotation::Annotation>>>(annotationClass); }
inline ref<link::java::array<java::lang::annotation::Annotation>> Parameter::getAnnotations() { return call_method<SCAPIX_META_STRING("getAnnotations"), ref<link::java::array<java::lang::annotation::Annotation>>>(); }

} // namespace java::lang::reflect
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_REFLECT_PARAMETER_H
