// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/reflect/AccessibleObject.h>
#include <scapix/java_api/java/lang/reflect/Member.h>

#ifndef SCAPIX_JAVA_LANG_REFLECT_FIELD_H
#define SCAPIX_JAVA_LANG_REFLECT_FIELD_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::lang::annotation { class Annotation; }
namespace java::lang::reflect { class AnnotatedType; }
namespace java::lang::reflect { class Type; }

namespace java::lang::reflect {

class Field : public object_base<SCAPIX_META_STRING("java/lang/reflect/Field"),
	java::lang::reflect::AccessibleObject,
	java::lang::reflect::Member>
{
public:

	void setAccessible(jboolean flag);
	ref<java::lang::Class> getDeclaringClass();
	ref<java::lang::String> getName();
	jint getModifiers();
	jboolean isEnumConstant();
	jboolean isSynthetic();
	ref<java::lang::Class> getType();
	ref<java::lang::reflect::Type> getGenericType();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();
	ref<java::lang::String> toGenericString();
	ref<java::lang::Object> get(ref<java::lang::Object> obj);
	jboolean getBoolean(ref<java::lang::Object> obj);
	jbyte getByte(ref<java::lang::Object> obj);
	jchar getChar(ref<java::lang::Object> obj);
	jshort getShort(ref<java::lang::Object> obj);
	jint getInt(ref<java::lang::Object> obj);
	jlong getLong(ref<java::lang::Object> obj);
	jfloat getFloat(ref<java::lang::Object> obj);
	jdouble getDouble(ref<java::lang::Object> obj);
	void set(ref<java::lang::Object> obj, ref<java::lang::Object> value);
	void setBoolean(ref<java::lang::Object> obj, jboolean z);
	void setByte(ref<java::lang::Object> obj, jbyte b);
	void setChar(ref<java::lang::Object> obj, jchar c);
	void setShort(ref<java::lang::Object> obj, jshort s);
	void setInt(ref<java::lang::Object> obj, jint i);
	void setLong(ref<java::lang::Object> obj, jlong l);
	void setFloat(ref<java::lang::Object> obj, jfloat f);
	void setDouble(ref<java::lang::Object> obj, jdouble d);
	ref<java::lang::annotation::Annotation> getAnnotation(ref<java::lang::Class> annotationClass);
	ref<link::java::array<java::lang::annotation::Annotation>> getAnnotationsByType(ref<java::lang::Class> annotationClass);
	ref<link::java::array<java::lang::annotation::Annotation>> getDeclaredAnnotations();
	ref<java::lang::reflect::AnnotatedType> getAnnotatedType();

protected:

	Field(handle_type h) : base_(h) {}

};

} // namespace java::lang::reflect
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/annotation/Annotation.h>
#include <scapix/java_api/java/lang/reflect/AnnotatedType.h>
#include <scapix/java_api/java/lang/reflect/Type.h>

namespace scapix::java_api {
namespace java::lang::reflect {

inline void Field::setAccessible(jboolean flag) { return call_method<SCAPIX_META_STRING("setAccessible"), void>(flag); }
inline ref<java::lang::Class> Field::getDeclaringClass() { return call_method<SCAPIX_META_STRING("getDeclaringClass"), ref<java::lang::Class>>(); }
inline ref<java::lang::String> Field::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline jint Field::getModifiers() { return call_method<SCAPIX_META_STRING("getModifiers"), jint>(); }
inline jboolean Field::isEnumConstant() { return call_method<SCAPIX_META_STRING("isEnumConstant"), jboolean>(); }
inline jboolean Field::isSynthetic() { return call_method<SCAPIX_META_STRING("isSynthetic"), jboolean>(); }
inline ref<java::lang::Class> Field::getType() { return call_method<SCAPIX_META_STRING("getType"), ref<java::lang::Class>>(); }
inline ref<java::lang::reflect::Type> Field::getGenericType() { return call_method<SCAPIX_META_STRING("getGenericType"), ref<java::lang::reflect::Type>>(); }
inline jboolean Field::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint Field::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> Field::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Field::toGenericString() { return call_method<SCAPIX_META_STRING("toGenericString"), ref<java::lang::String>>(); }
inline ref<java::lang::Object> Field::get(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(obj); }
inline jboolean Field::getBoolean(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("getBoolean"), jboolean>(obj); }
inline jbyte Field::getByte(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("getByte"), jbyte>(obj); }
inline jchar Field::getChar(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("getChar"), jchar>(obj); }
inline jshort Field::getShort(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("getShort"), jshort>(obj); }
inline jint Field::getInt(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("getInt"), jint>(obj); }
inline jlong Field::getLong(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(obj); }
inline jfloat Field::getFloat(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(obj); }
inline jdouble Field::getDouble(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(obj); }
inline void Field::set(ref<java::lang::Object> obj, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("set"), void>(obj, value); }
inline void Field::setBoolean(ref<java::lang::Object> obj, jboolean z) { return call_method<SCAPIX_META_STRING("setBoolean"), void>(obj, z); }
inline void Field::setByte(ref<java::lang::Object> obj, jbyte b) { return call_method<SCAPIX_META_STRING("setByte"), void>(obj, b); }
inline void Field::setChar(ref<java::lang::Object> obj, jchar c) { return call_method<SCAPIX_META_STRING("setChar"), void>(obj, c); }
inline void Field::setShort(ref<java::lang::Object> obj, jshort s) { return call_method<SCAPIX_META_STRING("setShort"), void>(obj, s); }
inline void Field::setInt(ref<java::lang::Object> obj, jint i) { return call_method<SCAPIX_META_STRING("setInt"), void>(obj, i); }
inline void Field::setLong(ref<java::lang::Object> obj, jlong l) { return call_method<SCAPIX_META_STRING("setLong"), void>(obj, l); }
inline void Field::setFloat(ref<java::lang::Object> obj, jfloat f) { return call_method<SCAPIX_META_STRING("setFloat"), void>(obj, f); }
inline void Field::setDouble(ref<java::lang::Object> obj, jdouble d) { return call_method<SCAPIX_META_STRING("setDouble"), void>(obj, d); }
inline ref<java::lang::annotation::Annotation> Field::getAnnotation(ref<java::lang::Class> annotationClass) { return call_method<SCAPIX_META_STRING("getAnnotation"), ref<java::lang::annotation::Annotation>>(annotationClass); }
inline ref<link::java::array<java::lang::annotation::Annotation>> Field::getAnnotationsByType(ref<java::lang::Class> annotationClass) { return call_method<SCAPIX_META_STRING("getAnnotationsByType"), ref<link::java::array<java::lang::annotation::Annotation>>>(annotationClass); }
inline ref<link::java::array<java::lang::annotation::Annotation>> Field::getDeclaredAnnotations() { return call_method<SCAPIX_META_STRING("getDeclaredAnnotations"), ref<link::java::array<java::lang::annotation::Annotation>>>(); }
inline ref<java::lang::reflect::AnnotatedType> Field::getAnnotatedType() { return call_method<SCAPIX_META_STRING("getAnnotatedType"), ref<java::lang::reflect::AnnotatedType>>(); }

} // namespace java::lang::reflect
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_REFLECT_FIELD_H
