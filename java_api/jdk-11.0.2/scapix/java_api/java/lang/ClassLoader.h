// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_CLASSLOADER_H
#define SCAPIX_JAVA_LANG_CLASSLOADER_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::lang { class Class; }
namespace java::lang { class Module; }
namespace java::lang { class Package; }
namespace java::lang { class String; }
namespace java::net { class URL; }
namespace java::util { class Enumeration; }
namespace java::util::stream { class Stream; }

namespace java::lang {

class ClassLoader : public object_base<SCAPIX_META_STRING("java/lang/ClassLoader"),
	java::lang::Object>
{
public:

	ref<java::lang::String> getName();
	ref<java::lang::Class> loadClass(ref<java::lang::String> name);
	ref<java::net::URL> getResource(ref<java::lang::String> name);
	ref<java::util::Enumeration> getResources(ref<java::lang::String> name);
	ref<java::util::stream::Stream> resources(ref<java::lang::String> name);
	jboolean isRegisteredAsParallelCapable();
	static ref<java::net::URL> getSystemResource(ref<java::lang::String> name);
	static ref<java::util::Enumeration> getSystemResources(ref<java::lang::String> name);
	ref<java::io::InputStream> getResourceAsStream(ref<java::lang::String> name);
	static ref<java::io::InputStream> getSystemResourceAsStream(ref<java::lang::String> name);
	ref<java::lang::ClassLoader> getParent();
	ref<java::lang::Module> getUnnamedModule();
	static ref<java::lang::ClassLoader> getPlatformClassLoader();
	static ref<java::lang::ClassLoader> getSystemClassLoader();
	ref<java::lang::Package> getDefinedPackage(ref<java::lang::String> name);
	ref<link::java::array<java::lang::Package>> getDefinedPackages();
	void setDefaultAssertionStatus(jboolean enabled);
	void setPackageAssertionStatus(ref<java::lang::String> packageName, jboolean enabled);
	void setClassAssertionStatus(ref<java::lang::String> className, jboolean enabled);
	void clearAssertionStatus();

protected:

	ClassLoader(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Module.h>
#include <scapix/java_api/java/lang/Package.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/stream/Stream.h>

namespace scapix::java_api {
namespace java::lang {

inline ref<java::lang::String> ClassLoader::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<java::lang::Class> ClassLoader::loadClass(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("loadClass"), ref<java::lang::Class>>(name); }
inline ref<java::net::URL> ClassLoader::getResource(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getResource"), ref<java::net::URL>>(name); }
inline ref<java::util::Enumeration> ClassLoader::getResources(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getResources"), ref<java::util::Enumeration>>(name); }
inline ref<java::util::stream::Stream> ClassLoader::resources(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("resources"), ref<java::util::stream::Stream>>(name); }
inline jboolean ClassLoader::isRegisteredAsParallelCapable() { return call_method<SCAPIX_META_STRING("isRegisteredAsParallelCapable"), jboolean>(); }
inline ref<java::net::URL> ClassLoader::getSystemResource(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("getSystemResource"), ref<java::net::URL>>(name); }
inline ref<java::util::Enumeration> ClassLoader::getSystemResources(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("getSystemResources"), ref<java::util::Enumeration>>(name); }
inline ref<java::io::InputStream> ClassLoader::getResourceAsStream(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getResourceAsStream"), ref<java::io::InputStream>>(name); }
inline ref<java::io::InputStream> ClassLoader::getSystemResourceAsStream(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("getSystemResourceAsStream"), ref<java::io::InputStream>>(name); }
inline ref<java::lang::ClassLoader> ClassLoader::getParent() { return call_method<SCAPIX_META_STRING("getParent"), ref<java::lang::ClassLoader>>(); }
inline ref<java::lang::Module> ClassLoader::getUnnamedModule() { return call_method<SCAPIX_META_STRING("getUnnamedModule"), ref<java::lang::Module>>(); }
inline ref<java::lang::ClassLoader> ClassLoader::getPlatformClassLoader() { return call_static_method<SCAPIX_META_STRING("getPlatformClassLoader"), ref<java::lang::ClassLoader>>(); }
inline ref<java::lang::ClassLoader> ClassLoader::getSystemClassLoader() { return call_static_method<SCAPIX_META_STRING("getSystemClassLoader"), ref<java::lang::ClassLoader>>(); }
inline ref<java::lang::Package> ClassLoader::getDefinedPackage(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getDefinedPackage"), ref<java::lang::Package>>(name); }
inline ref<link::java::array<java::lang::Package>> ClassLoader::getDefinedPackages() { return call_method<SCAPIX_META_STRING("getDefinedPackages"), ref<link::java::array<java::lang::Package>>>(); }
inline void ClassLoader::setDefaultAssertionStatus(jboolean enabled) { return call_method<SCAPIX_META_STRING("setDefaultAssertionStatus"), void>(enabled); }
inline void ClassLoader::setPackageAssertionStatus(ref<java::lang::String> packageName, jboolean enabled) { return call_method<SCAPIX_META_STRING("setPackageAssertionStatus"), void>(packageName, enabled); }
inline void ClassLoader::setClassAssertionStatus(ref<java::lang::String> className, jboolean enabled) { return call_method<SCAPIX_META_STRING("setClassAssertionStatus"), void>(className, enabled); }
inline void ClassLoader::clearAssertionStatus() { return call_method<SCAPIX_META_STRING("clearAssertionStatus"), void>(); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_CLASSLOADER_H
