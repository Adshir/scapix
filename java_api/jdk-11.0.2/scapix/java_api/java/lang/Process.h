// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_PROCESS_H
#define SCAPIX_JAVA_LANG_PROCESS_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::io { class OutputStream; }
namespace java::lang { class ProcessHandle; }
namespace java::lang { class ProcessHandle_Info; }
namespace java::util::concurrent { class CompletableFuture; }
namespace java::util::concurrent { class TimeUnit; }
namespace java::util::stream { class Stream; }

namespace java::lang {

class Process : public object_base<SCAPIX_META_STRING("java/lang/Process"),
	java::lang::Object>
{
public:

	static ref<Process> new_object();
	ref<java::io::OutputStream> getOutputStream();
	ref<java::io::InputStream> getInputStream();
	ref<java::io::InputStream> getErrorStream();
	jint waitFor();
	jboolean waitFor(jlong timeout, ref<java::util::concurrent::TimeUnit> p2);
	jint exitValue();
	void destroy();
	ref<java::lang::Process> destroyForcibly();
	jboolean supportsNormalTermination();
	jboolean isAlive();
	jlong pid();
	ref<java::util::concurrent::CompletableFuture> onExit();
	ref<java::lang::ProcessHandle> toHandle();
	ref<java::lang::ProcessHandle_Info> info();
	ref<java::util::stream::Stream> children();
	ref<java::util::stream::Stream> descendants();

protected:

	Process(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/ProcessHandle.h>
#include <scapix/java_api/java/lang/ProcessHandle_Info.h>
#include <scapix/java_api/java/util/concurrent/CompletableFuture.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#include <scapix/java_api/java/util/stream/Stream.h>

namespace scapix::java_api {
namespace java::lang {

inline ref<Process> Process::new_object() { return base_::new_object(); }
inline ref<java::io::OutputStream> Process::getOutputStream() { return call_method<SCAPIX_META_STRING("getOutputStream"), ref<java::io::OutputStream>>(); }
inline ref<java::io::InputStream> Process::getInputStream() { return call_method<SCAPIX_META_STRING("getInputStream"), ref<java::io::InputStream>>(); }
inline ref<java::io::InputStream> Process::getErrorStream() { return call_method<SCAPIX_META_STRING("getErrorStream"), ref<java::io::InputStream>>(); }
inline jint Process::waitFor() { return call_method<SCAPIX_META_STRING("waitFor"), jint>(); }
inline jboolean Process::waitFor(jlong timeout, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("waitFor"), jboolean>(timeout, p2); }
inline jint Process::exitValue() { return call_method<SCAPIX_META_STRING("exitValue"), jint>(); }
inline void Process::destroy() { return call_method<SCAPIX_META_STRING("destroy"), void>(); }
inline ref<java::lang::Process> Process::destroyForcibly() { return call_method<SCAPIX_META_STRING("destroyForcibly"), ref<java::lang::Process>>(); }
inline jboolean Process::supportsNormalTermination() { return call_method<SCAPIX_META_STRING("supportsNormalTermination"), jboolean>(); }
inline jboolean Process::isAlive() { return call_method<SCAPIX_META_STRING("isAlive"), jboolean>(); }
inline jlong Process::pid() { return call_method<SCAPIX_META_STRING("pid"), jlong>(); }
inline ref<java::util::concurrent::CompletableFuture> Process::onExit() { return call_method<SCAPIX_META_STRING("onExit"), ref<java::util::concurrent::CompletableFuture>>(); }
inline ref<java::lang::ProcessHandle> Process::toHandle() { return call_method<SCAPIX_META_STRING("toHandle"), ref<java::lang::ProcessHandle>>(); }
inline ref<java::lang::ProcessHandle_Info> Process::info() { return call_method<SCAPIX_META_STRING("info"), ref<java::lang::ProcessHandle_Info>>(); }
inline ref<java::util::stream::Stream> Process::children() { return call_method<SCAPIX_META_STRING("children"), ref<java::util::stream::Stream>>(); }
inline ref<java::util::stream::Stream> Process::descendants() { return call_method<SCAPIX_META_STRING("descendants"), ref<java::util::stream::Stream>>(); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_PROCESS_H
