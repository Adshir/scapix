// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/reflect/AnnotatedElement.h>

#ifndef SCAPIX_JAVA_LANG_MODULE_H
#define SCAPIX_JAVA_LANG_MODULE_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::lang { class Class; }
namespace java::lang { class ClassLoader; }
namespace java::lang { class ModuleLayer; }
namespace java::lang { class String; }
namespace java::lang::annotation { class Annotation; }
namespace java::lang::module { class ModuleDescriptor; }
namespace java::util { class Set; }

namespace java::lang {

class Module : public object_base<SCAPIX_META_STRING("java/lang/Module"),
	java::lang::Object,
	java::lang::reflect::AnnotatedElement>
{
public:

	jboolean isNamed();
	ref<java::lang::String> getName();
	ref<java::lang::ClassLoader> getClassLoader();
	ref<java::lang::module::ModuleDescriptor> getDescriptor();
	ref<java::lang::ModuleLayer> getLayer();
	jboolean canRead(ref<java::lang::Module> other);
	ref<java::lang::Module> addReads(ref<java::lang::Module> other);
	jboolean isExported(ref<java::lang::String> pn, ref<java::lang::Module> other);
	jboolean isOpen(ref<java::lang::String> pn, ref<java::lang::Module> other);
	jboolean isExported(ref<java::lang::String> pn);
	jboolean isOpen(ref<java::lang::String> pn);
	ref<java::lang::Module> addExports(ref<java::lang::String> pn, ref<java::lang::Module> other);
	ref<java::lang::Module> addOpens(ref<java::lang::String> pn, ref<java::lang::Module> other);
	ref<java::lang::Module> addUses(ref<java::lang::Class> service);
	jboolean canUse(ref<java::lang::Class> service);
	ref<java::util::Set> getPackages();
	ref<java::lang::annotation::Annotation> getAnnotation(ref<java::lang::Class> annotationClass);
	ref<link::java::array<java::lang::annotation::Annotation>> getAnnotations();
	ref<link::java::array<java::lang::annotation::Annotation>> getDeclaredAnnotations();
	ref<java::io::InputStream> getResourceAsStream(ref<java::lang::String> name);
	ref<java::lang::String> toString();

protected:

	Module(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/ModuleLayer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/annotation/Annotation.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace java::lang {

inline jboolean Module::isNamed() { return call_method<SCAPIX_META_STRING("isNamed"), jboolean>(); }
inline ref<java::lang::String> Module::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<java::lang::ClassLoader> Module::getClassLoader() { return call_method<SCAPIX_META_STRING("getClassLoader"), ref<java::lang::ClassLoader>>(); }
inline ref<java::lang::module::ModuleDescriptor> Module::getDescriptor() { return call_method<SCAPIX_META_STRING("getDescriptor"), ref<java::lang::module::ModuleDescriptor>>(); }
inline ref<java::lang::ModuleLayer> Module::getLayer() { return call_method<SCAPIX_META_STRING("getLayer"), ref<java::lang::ModuleLayer>>(); }
inline jboolean Module::canRead(ref<java::lang::Module> other) { return call_method<SCAPIX_META_STRING("canRead"), jboolean>(other); }
inline ref<java::lang::Module> Module::addReads(ref<java::lang::Module> other) { return call_method<SCAPIX_META_STRING("addReads"), ref<java::lang::Module>>(other); }
inline jboolean Module::isExported(ref<java::lang::String> pn, ref<java::lang::Module> other) { return call_method<SCAPIX_META_STRING("isExported"), jboolean>(pn, other); }
inline jboolean Module::isOpen(ref<java::lang::String> pn, ref<java::lang::Module> other) { return call_method<SCAPIX_META_STRING("isOpen"), jboolean>(pn, other); }
inline jboolean Module::isExported(ref<java::lang::String> pn) { return call_method<SCAPIX_META_STRING("isExported"), jboolean>(pn); }
inline jboolean Module::isOpen(ref<java::lang::String> pn) { return call_method<SCAPIX_META_STRING("isOpen"), jboolean>(pn); }
inline ref<java::lang::Module> Module::addExports(ref<java::lang::String> pn, ref<java::lang::Module> other) { return call_method<SCAPIX_META_STRING("addExports"), ref<java::lang::Module>>(pn, other); }
inline ref<java::lang::Module> Module::addOpens(ref<java::lang::String> pn, ref<java::lang::Module> other) { return call_method<SCAPIX_META_STRING("addOpens"), ref<java::lang::Module>>(pn, other); }
inline ref<java::lang::Module> Module::addUses(ref<java::lang::Class> service) { return call_method<SCAPIX_META_STRING("addUses"), ref<java::lang::Module>>(service); }
inline jboolean Module::canUse(ref<java::lang::Class> service) { return call_method<SCAPIX_META_STRING("canUse"), jboolean>(service); }
inline ref<java::util::Set> Module::getPackages() { return call_method<SCAPIX_META_STRING("getPackages"), ref<java::util::Set>>(); }
inline ref<java::lang::annotation::Annotation> Module::getAnnotation(ref<java::lang::Class> annotationClass) { return call_method<SCAPIX_META_STRING("getAnnotation"), ref<java::lang::annotation::Annotation>>(annotationClass); }
inline ref<link::java::array<java::lang::annotation::Annotation>> Module::getAnnotations() { return call_method<SCAPIX_META_STRING("getAnnotations"), ref<link::java::array<java::lang::annotation::Annotation>>>(); }
inline ref<link::java::array<java::lang::annotation::Annotation>> Module::getDeclaredAnnotations() { return call_method<SCAPIX_META_STRING("getDeclaredAnnotations"), ref<link::java::array<java::lang::annotation::Annotation>>>(); }
inline ref<java::io::InputStream> Module::getResourceAsStream(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getResourceAsStream"), ref<java::io::InputStream>>(name); }
inline ref<java::lang::String> Module::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_MODULE_H
