// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_MODULELAYER_H
#define SCAPIX_JAVA_LANG_MODULELAYER_H

namespace scapix::java_api {

namespace java::lang { class ClassLoader; }
namespace java::lang { class ModuleLayer_Controller; }
namespace java::lang { class String; }
namespace java::lang::module { class Configuration; }
namespace java::util { class List; }
namespace java::util { class Optional; }
namespace java::util { class Set; }
namespace java::util::function { class Function; }

namespace java::lang {

class ModuleLayer : public object_base<SCAPIX_META_STRING("java/lang/ModuleLayer"),
	java::lang::Object>
{
public:

	using Controller = ModuleLayer_Controller;

	ref<java::lang::ModuleLayer> defineModulesWithOneLoader(ref<java::lang::module::Configuration> cf, ref<java::lang::ClassLoader> parentLoader);
	ref<java::lang::ModuleLayer> defineModulesWithManyLoaders(ref<java::lang::module::Configuration> cf, ref<java::lang::ClassLoader> parentLoader);
	ref<java::lang::ModuleLayer> defineModules(ref<java::lang::module::Configuration> cf, ref<java::util::function::Function> clf);
	static ref<java::lang::ModuleLayer_Controller> defineModulesWithOneLoader(ref<java::lang::module::Configuration> cf, ref<java::util::List> parentLayers, ref<java::lang::ClassLoader> parentLoader);
	static ref<java::lang::ModuleLayer_Controller> defineModulesWithManyLoaders(ref<java::lang::module::Configuration> cf, ref<java::util::List> parentLayers, ref<java::lang::ClassLoader> parentLoader);
	static ref<java::lang::ModuleLayer_Controller> defineModules(ref<java::lang::module::Configuration> cf, ref<java::util::List> parentLayers, ref<java::util::function::Function> clf);
	ref<java::lang::module::Configuration> configuration();
	ref<java::util::List> parents();
	ref<java::util::Set> modules();
	ref<java::util::Optional> findModule(ref<java::lang::String> name);
	ref<java::lang::ClassLoader> findLoader(ref<java::lang::String> name);
	ref<java::lang::String> toString();
	static ref<java::lang::ModuleLayer> empty();
	static ref<java::lang::ModuleLayer> boot();

protected:

	ModuleLayer(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/ModuleLayer_Controller.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/module/Configuration.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/function/Function.h>

namespace scapix::java_api {
namespace java::lang {

inline ref<java::lang::ModuleLayer> ModuleLayer::defineModulesWithOneLoader(ref<java::lang::module::Configuration> cf, ref<java::lang::ClassLoader> parentLoader) { return call_method<SCAPIX_META_STRING("defineModulesWithOneLoader"), ref<java::lang::ModuleLayer>>(cf, parentLoader); }
inline ref<java::lang::ModuleLayer> ModuleLayer::defineModulesWithManyLoaders(ref<java::lang::module::Configuration> cf, ref<java::lang::ClassLoader> parentLoader) { return call_method<SCAPIX_META_STRING("defineModulesWithManyLoaders"), ref<java::lang::ModuleLayer>>(cf, parentLoader); }
inline ref<java::lang::ModuleLayer> ModuleLayer::defineModules(ref<java::lang::module::Configuration> cf, ref<java::util::function::Function> clf) { return call_method<SCAPIX_META_STRING("defineModules"), ref<java::lang::ModuleLayer>>(cf, clf); }
inline ref<java::lang::ModuleLayer_Controller> ModuleLayer::defineModulesWithOneLoader(ref<java::lang::module::Configuration> cf, ref<java::util::List> parentLayers, ref<java::lang::ClassLoader> parentLoader) { return call_static_method<SCAPIX_META_STRING("defineModulesWithOneLoader"), ref<java::lang::ModuleLayer_Controller>>(cf, parentLayers, parentLoader); }
inline ref<java::lang::ModuleLayer_Controller> ModuleLayer::defineModulesWithManyLoaders(ref<java::lang::module::Configuration> cf, ref<java::util::List> parentLayers, ref<java::lang::ClassLoader> parentLoader) { return call_static_method<SCAPIX_META_STRING("defineModulesWithManyLoaders"), ref<java::lang::ModuleLayer_Controller>>(cf, parentLayers, parentLoader); }
inline ref<java::lang::ModuleLayer_Controller> ModuleLayer::defineModules(ref<java::lang::module::Configuration> cf, ref<java::util::List> parentLayers, ref<java::util::function::Function> clf) { return call_static_method<SCAPIX_META_STRING("defineModules"), ref<java::lang::ModuleLayer_Controller>>(cf, parentLayers, clf); }
inline ref<java::lang::module::Configuration> ModuleLayer::configuration() { return call_method<SCAPIX_META_STRING("configuration"), ref<java::lang::module::Configuration>>(); }
inline ref<java::util::List> ModuleLayer::parents() { return call_method<SCAPIX_META_STRING("parents"), ref<java::util::List>>(); }
inline ref<java::util::Set> ModuleLayer::modules() { return call_method<SCAPIX_META_STRING("modules"), ref<java::util::Set>>(); }
inline ref<java::util::Optional> ModuleLayer::findModule(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("findModule"), ref<java::util::Optional>>(name); }
inline ref<java::lang::ClassLoader> ModuleLayer::findLoader(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("findLoader"), ref<java::lang::ClassLoader>>(name); }
inline ref<java::lang::String> ModuleLayer::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::ModuleLayer> ModuleLayer::empty() { return call_static_method<SCAPIX_META_STRING("empty"), ref<java::lang::ModuleLayer>>(); }
inline ref<java::lang::ModuleLayer> ModuleLayer::boot() { return call_static_method<SCAPIX_META_STRING("boot"), ref<java::lang::ModuleLayer>>(); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_MODULELAYER_H
