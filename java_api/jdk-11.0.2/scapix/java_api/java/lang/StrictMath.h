// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_STRICTMATH_H
#define SCAPIX_JAVA_LANG_STRICTMATH_H

namespace scapix::java_api {


namespace java::lang {

class StrictMath : public object_base<SCAPIX_META_STRING("java/lang/StrictMath"),
	java::lang::Object>
{
public:

	static jdouble E_();
	static jdouble PI_();

	static jdouble sin(jdouble p1);
	static jdouble cos(jdouble p1);
	static jdouble tan(jdouble p1);
	static jdouble asin(jdouble p1);
	static jdouble acos(jdouble p1);
	static jdouble atan(jdouble p1);
	static jdouble toRadians(jdouble angdeg);
	static jdouble toDegrees(jdouble angrad);
	static jdouble exp(jdouble a);
	static jdouble log(jdouble p1);
	static jdouble log10(jdouble p1);
	static jdouble sqrt(jdouble p1);
	static jdouble cbrt(jdouble a);
	static jdouble IEEEremainder(jdouble p1, jdouble p2);
	static jdouble ceil(jdouble a);
	static jdouble floor(jdouble a);
	static jdouble rint(jdouble a);
	static jdouble atan2(jdouble p1, jdouble p2);
	static jdouble pow(jdouble a, jdouble p2);
	static jint round(jfloat a);
	static jlong round(jdouble a);
	static jdouble random();
	static jint addExact(jint x, jint y);
	static jlong addExact(jlong x, jlong p2);
	static jint subtractExact(jint x, jint y);
	static jlong subtractExact(jlong x, jlong p2);
	static jint multiplyExact(jint x, jint y);
	static jlong multiplyExact(jlong x, jint p2);
	static jlong multiplyExact(jlong x, jlong p2);
	static jint toIntExact(jlong value);
	static jlong multiplyFull(jint x, jint y);
	static jlong multiplyHigh(jlong x, jlong p2);
	static jint floorDiv(jint x, jint y);
	static jlong floorDiv(jlong x, jint p2);
	static jlong floorDiv(jlong x, jlong p2);
	static jint floorMod(jint x, jint y);
	static jint floorMod(jlong x, jint p2);
	static jlong floorMod(jlong x, jlong p2);
	static jint abs(jint a);
	static jlong abs(jlong a);
	static jfloat abs(jfloat a);
	static jdouble abs(jdouble a);
	static jint max(jint a, jint b);
	static jlong max(jlong a, jlong p2);
	static jfloat max(jfloat a, jfloat b);
	static jdouble max(jdouble a, jdouble p2);
	static jint min(jint a, jint b);
	static jlong min(jlong a, jlong p2);
	static jfloat min(jfloat a, jfloat b);
	static jdouble min(jdouble a, jdouble p2);
	static jdouble fma(jdouble a, jdouble p2, jdouble b);
	static jfloat fma(jfloat a, jfloat b, jfloat c);
	static jdouble ulp(jdouble d);
	static jfloat ulp(jfloat f);
	static jdouble signum(jdouble d);
	static jfloat signum(jfloat f);
	static jdouble sinh(jdouble p1);
	static jdouble cosh(jdouble p1);
	static jdouble tanh(jdouble p1);
	static jdouble hypot(jdouble x, jdouble p2);
	static jdouble expm1(jdouble p1);
	static jdouble log1p(jdouble p1);
	static jdouble copySign(jdouble magnitude, jdouble p2);
	static jfloat copySign(jfloat magnitude, jfloat sign);
	static jint getExponent(jfloat f);
	static jint getExponent(jdouble d);
	static jdouble nextAfter(jdouble start, jdouble p2);
	static jfloat nextAfter(jfloat start, jdouble direction);
	static jdouble nextUp(jdouble d);
	static jfloat nextUp(jfloat f);
	static jdouble nextDown(jdouble d);
	static jfloat nextDown(jfloat f);
	static jdouble scalb(jdouble d, jint p2);
	static jfloat scalb(jfloat f, jint scaleFactor);

protected:

	StrictMath(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api


namespace scapix::java_api {
namespace java::lang {

inline jdouble StrictMath::E_() { return get_static_field<SCAPIX_META_STRING("E"), jdouble>(); }
inline jdouble StrictMath::PI_() { return get_static_field<SCAPIX_META_STRING("PI"), jdouble>(); }
inline jdouble StrictMath::sin(jdouble p1) { return call_static_method<SCAPIX_META_STRING("sin"), jdouble>(p1); }
inline jdouble StrictMath::cos(jdouble p1) { return call_static_method<SCAPIX_META_STRING("cos"), jdouble>(p1); }
inline jdouble StrictMath::tan(jdouble p1) { return call_static_method<SCAPIX_META_STRING("tan"), jdouble>(p1); }
inline jdouble StrictMath::asin(jdouble p1) { return call_static_method<SCAPIX_META_STRING("asin"), jdouble>(p1); }
inline jdouble StrictMath::acos(jdouble p1) { return call_static_method<SCAPIX_META_STRING("acos"), jdouble>(p1); }
inline jdouble StrictMath::atan(jdouble p1) { return call_static_method<SCAPIX_META_STRING("atan"), jdouble>(p1); }
inline jdouble StrictMath::toRadians(jdouble angdeg) { return call_static_method<SCAPIX_META_STRING("toRadians"), jdouble>(angdeg); }
inline jdouble StrictMath::toDegrees(jdouble angrad) { return call_static_method<SCAPIX_META_STRING("toDegrees"), jdouble>(angrad); }
inline jdouble StrictMath::exp(jdouble a) { return call_static_method<SCAPIX_META_STRING("exp"), jdouble>(a); }
inline jdouble StrictMath::log(jdouble p1) { return call_static_method<SCAPIX_META_STRING("log"), jdouble>(p1); }
inline jdouble StrictMath::log10(jdouble p1) { return call_static_method<SCAPIX_META_STRING("log10"), jdouble>(p1); }
inline jdouble StrictMath::sqrt(jdouble p1) { return call_static_method<SCAPIX_META_STRING("sqrt"), jdouble>(p1); }
inline jdouble StrictMath::cbrt(jdouble a) { return call_static_method<SCAPIX_META_STRING("cbrt"), jdouble>(a); }
inline jdouble StrictMath::IEEEremainder(jdouble p1, jdouble p2) { return call_static_method<SCAPIX_META_STRING("IEEEremainder"), jdouble>(p1, p2); }
inline jdouble StrictMath::ceil(jdouble a) { return call_static_method<SCAPIX_META_STRING("ceil"), jdouble>(a); }
inline jdouble StrictMath::floor(jdouble a) { return call_static_method<SCAPIX_META_STRING("floor"), jdouble>(a); }
inline jdouble StrictMath::rint(jdouble a) { return call_static_method<SCAPIX_META_STRING("rint"), jdouble>(a); }
inline jdouble StrictMath::atan2(jdouble p1, jdouble p2) { return call_static_method<SCAPIX_META_STRING("atan2"), jdouble>(p1, p2); }
inline jdouble StrictMath::pow(jdouble a, jdouble p2) { return call_static_method<SCAPIX_META_STRING("pow"), jdouble>(a, p2); }
inline jint StrictMath::round(jfloat a) { return call_static_method<SCAPIX_META_STRING("round"), jint>(a); }
inline jlong StrictMath::round(jdouble a) { return call_static_method<SCAPIX_META_STRING("round"), jlong>(a); }
inline jdouble StrictMath::random() { return call_static_method<SCAPIX_META_STRING("random"), jdouble>(); }
inline jint StrictMath::addExact(jint x, jint y) { return call_static_method<SCAPIX_META_STRING("addExact"), jint>(x, y); }
inline jlong StrictMath::addExact(jlong x, jlong p2) { return call_static_method<SCAPIX_META_STRING("addExact"), jlong>(x, p2); }
inline jint StrictMath::subtractExact(jint x, jint y) { return call_static_method<SCAPIX_META_STRING("subtractExact"), jint>(x, y); }
inline jlong StrictMath::subtractExact(jlong x, jlong p2) { return call_static_method<SCAPIX_META_STRING("subtractExact"), jlong>(x, p2); }
inline jint StrictMath::multiplyExact(jint x, jint y) { return call_static_method<SCAPIX_META_STRING("multiplyExact"), jint>(x, y); }
inline jlong StrictMath::multiplyExact(jlong x, jint p2) { return call_static_method<SCAPIX_META_STRING("multiplyExact"), jlong>(x, p2); }
inline jlong StrictMath::multiplyExact(jlong x, jlong p2) { return call_static_method<SCAPIX_META_STRING("multiplyExact"), jlong>(x, p2); }
inline jint StrictMath::toIntExact(jlong value) { return call_static_method<SCAPIX_META_STRING("toIntExact"), jint>(value); }
inline jlong StrictMath::multiplyFull(jint x, jint y) { return call_static_method<SCAPIX_META_STRING("multiplyFull"), jlong>(x, y); }
inline jlong StrictMath::multiplyHigh(jlong x, jlong p2) { return call_static_method<SCAPIX_META_STRING("multiplyHigh"), jlong>(x, p2); }
inline jint StrictMath::floorDiv(jint x, jint y) { return call_static_method<SCAPIX_META_STRING("floorDiv"), jint>(x, y); }
inline jlong StrictMath::floorDiv(jlong x, jint p2) { return call_static_method<SCAPIX_META_STRING("floorDiv"), jlong>(x, p2); }
inline jlong StrictMath::floorDiv(jlong x, jlong p2) { return call_static_method<SCAPIX_META_STRING("floorDiv"), jlong>(x, p2); }
inline jint StrictMath::floorMod(jint x, jint y) { return call_static_method<SCAPIX_META_STRING("floorMod"), jint>(x, y); }
inline jint StrictMath::floorMod(jlong x, jint p2) { return call_static_method<SCAPIX_META_STRING("floorMod"), jint>(x, p2); }
inline jlong StrictMath::floorMod(jlong x, jlong p2) { return call_static_method<SCAPIX_META_STRING("floorMod"), jlong>(x, p2); }
inline jint StrictMath::abs(jint a) { return call_static_method<SCAPIX_META_STRING("abs"), jint>(a); }
inline jlong StrictMath::abs(jlong a) { return call_static_method<SCAPIX_META_STRING("abs"), jlong>(a); }
inline jfloat StrictMath::abs(jfloat a) { return call_static_method<SCAPIX_META_STRING("abs"), jfloat>(a); }
inline jdouble StrictMath::abs(jdouble a) { return call_static_method<SCAPIX_META_STRING("abs"), jdouble>(a); }
inline jint StrictMath::max(jint a, jint b) { return call_static_method<SCAPIX_META_STRING("max"), jint>(a, b); }
inline jlong StrictMath::max(jlong a, jlong p2) { return call_static_method<SCAPIX_META_STRING("max"), jlong>(a, p2); }
inline jfloat StrictMath::max(jfloat a, jfloat b) { return call_static_method<SCAPIX_META_STRING("max"), jfloat>(a, b); }
inline jdouble StrictMath::max(jdouble a, jdouble p2) { return call_static_method<SCAPIX_META_STRING("max"), jdouble>(a, p2); }
inline jint StrictMath::min(jint a, jint b) { return call_static_method<SCAPIX_META_STRING("min"), jint>(a, b); }
inline jlong StrictMath::min(jlong a, jlong p2) { return call_static_method<SCAPIX_META_STRING("min"), jlong>(a, p2); }
inline jfloat StrictMath::min(jfloat a, jfloat b) { return call_static_method<SCAPIX_META_STRING("min"), jfloat>(a, b); }
inline jdouble StrictMath::min(jdouble a, jdouble p2) { return call_static_method<SCAPIX_META_STRING("min"), jdouble>(a, p2); }
inline jdouble StrictMath::fma(jdouble a, jdouble p2, jdouble b) { return call_static_method<SCAPIX_META_STRING("fma"), jdouble>(a, p2, b); }
inline jfloat StrictMath::fma(jfloat a, jfloat b, jfloat c) { return call_static_method<SCAPIX_META_STRING("fma"), jfloat>(a, b, c); }
inline jdouble StrictMath::ulp(jdouble d) { return call_static_method<SCAPIX_META_STRING("ulp"), jdouble>(d); }
inline jfloat StrictMath::ulp(jfloat f) { return call_static_method<SCAPIX_META_STRING("ulp"), jfloat>(f); }
inline jdouble StrictMath::signum(jdouble d) { return call_static_method<SCAPIX_META_STRING("signum"), jdouble>(d); }
inline jfloat StrictMath::signum(jfloat f) { return call_static_method<SCAPIX_META_STRING("signum"), jfloat>(f); }
inline jdouble StrictMath::sinh(jdouble p1) { return call_static_method<SCAPIX_META_STRING("sinh"), jdouble>(p1); }
inline jdouble StrictMath::cosh(jdouble p1) { return call_static_method<SCAPIX_META_STRING("cosh"), jdouble>(p1); }
inline jdouble StrictMath::tanh(jdouble p1) { return call_static_method<SCAPIX_META_STRING("tanh"), jdouble>(p1); }
inline jdouble StrictMath::hypot(jdouble x, jdouble p2) { return call_static_method<SCAPIX_META_STRING("hypot"), jdouble>(x, p2); }
inline jdouble StrictMath::expm1(jdouble p1) { return call_static_method<SCAPIX_META_STRING("expm1"), jdouble>(p1); }
inline jdouble StrictMath::log1p(jdouble p1) { return call_static_method<SCAPIX_META_STRING("log1p"), jdouble>(p1); }
inline jdouble StrictMath::copySign(jdouble magnitude, jdouble p2) { return call_static_method<SCAPIX_META_STRING("copySign"), jdouble>(magnitude, p2); }
inline jfloat StrictMath::copySign(jfloat magnitude, jfloat sign) { return call_static_method<SCAPIX_META_STRING("copySign"), jfloat>(magnitude, sign); }
inline jint StrictMath::getExponent(jfloat f) { return call_static_method<SCAPIX_META_STRING("getExponent"), jint>(f); }
inline jint StrictMath::getExponent(jdouble d) { return call_static_method<SCAPIX_META_STRING("getExponent"), jint>(d); }
inline jdouble StrictMath::nextAfter(jdouble start, jdouble p2) { return call_static_method<SCAPIX_META_STRING("nextAfter"), jdouble>(start, p2); }
inline jfloat StrictMath::nextAfter(jfloat start, jdouble direction) { return call_static_method<SCAPIX_META_STRING("nextAfter"), jfloat>(start, direction); }
inline jdouble StrictMath::nextUp(jdouble d) { return call_static_method<SCAPIX_META_STRING("nextUp"), jdouble>(d); }
inline jfloat StrictMath::nextUp(jfloat f) { return call_static_method<SCAPIX_META_STRING("nextUp"), jfloat>(f); }
inline jdouble StrictMath::nextDown(jdouble d) { return call_static_method<SCAPIX_META_STRING("nextDown"), jdouble>(d); }
inline jfloat StrictMath::nextDown(jfloat f) { return call_static_method<SCAPIX_META_STRING("nextDown"), jfloat>(f); }
inline jdouble StrictMath::scalb(jdouble d, jint p2) { return call_static_method<SCAPIX_META_STRING("scalb"), jdouble>(d, p2); }
inline jfloat StrictMath::scalb(jfloat f, jint scaleFactor) { return call_static_method<SCAPIX_META_STRING("scalb"), jfloat>(f, scaleFactor); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_STRICTMATH_H
