// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/ProcessHandle.h>

#ifndef SCAPIX_JAVA_LANG_PROCESSHANDLEIMPL_H
#define SCAPIX_JAVA_LANG_PROCESSHANDLEIMPL_H

namespace scapix::java_api {

namespace java::lang { class ProcessHandle_Info; }
namespace java::lang { class String; }
namespace java::util { class Optional; }
namespace java::util::concurrent { class CompletableFuture; }
namespace java::util::stream { class Stream; }

namespace java::lang {

// private
class ProcessHandleImpl : public object_base<SCAPIX_META_STRING("java/lang/ProcessHandleImpl"),
	java::lang::Object,
	java::lang::ProcessHandle>
{
public:

	ref<java::util::concurrent::CompletableFuture> onExit();
	jlong pid();
	static ref<java::lang::ProcessHandleImpl> current();
	ref<java::util::Optional> parent();
	jboolean destroy();
	jboolean destroyForcibly();
	jboolean supportsNormalTermination();
	jboolean isAlive();
	ref<java::util::stream::Stream> children();
	ref<java::util::stream::Stream> descendants();
	ref<java::lang::ProcessHandle_Info> info();
	jint compareTo(ref<java::lang::ProcessHandle> other);
	ref<java::lang::String> toString();
	jint hashCode();
	jboolean equals(ref<java::lang::Object> obj);

protected:

	ProcessHandleImpl(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/ProcessHandle_Info.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/concurrent/CompletableFuture.h>
#include <scapix/java_api/java/util/stream/Stream.h>

namespace scapix::java_api {
namespace java::lang {

inline ref<java::util::concurrent::CompletableFuture> ProcessHandleImpl::onExit() { return call_method<SCAPIX_META_STRING("onExit"), ref<java::util::concurrent::CompletableFuture>>(); }
inline jlong ProcessHandleImpl::pid() { return call_method<SCAPIX_META_STRING("pid"), jlong>(); }
inline ref<java::lang::ProcessHandleImpl> ProcessHandleImpl::current() { return call_static_method<SCAPIX_META_STRING("current"), ref<java::lang::ProcessHandleImpl>>(); }
inline ref<java::util::Optional> ProcessHandleImpl::parent() { return call_method<SCAPIX_META_STRING("parent"), ref<java::util::Optional>>(); }
inline jboolean ProcessHandleImpl::destroy() { return call_method<SCAPIX_META_STRING("destroy"), jboolean>(); }
inline jboolean ProcessHandleImpl::destroyForcibly() { return call_method<SCAPIX_META_STRING("destroyForcibly"), jboolean>(); }
inline jboolean ProcessHandleImpl::supportsNormalTermination() { return call_method<SCAPIX_META_STRING("supportsNormalTermination"), jboolean>(); }
inline jboolean ProcessHandleImpl::isAlive() { return call_method<SCAPIX_META_STRING("isAlive"), jboolean>(); }
inline ref<java::util::stream::Stream> ProcessHandleImpl::children() { return call_method<SCAPIX_META_STRING("children"), ref<java::util::stream::Stream>>(); }
inline ref<java::util::stream::Stream> ProcessHandleImpl::descendants() { return call_method<SCAPIX_META_STRING("descendants"), ref<java::util::stream::Stream>>(); }
inline ref<java::lang::ProcessHandle_Info> ProcessHandleImpl::info() { return call_method<SCAPIX_META_STRING("info"), ref<java::lang::ProcessHandle_Info>>(); }
inline jint ProcessHandleImpl::compareTo(ref<java::lang::ProcessHandle> other) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(other); }
inline ref<java::lang::String> ProcessHandleImpl::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint ProcessHandleImpl::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean ProcessHandleImpl::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_PROCESSHANDLEIMPL_H
