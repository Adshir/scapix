// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVAX_XML_TRANSFORM_TRANSFORMERFACTORY_H
#define SCAPIX_JAVAX_XML_TRANSFORM_TRANSFORMERFACTORY_H

namespace scapix::java_api {

namespace java::lang { class ClassLoader; }
namespace java::lang { class String; }
namespace javax::xml::transform { class ErrorListener; }
namespace javax::xml::transform { class Source; }
namespace javax::xml::transform { class Templates; }
namespace javax::xml::transform { class Transformer; }
namespace javax::xml::transform { class URIResolver; }

namespace javax::xml::transform {

class TransformerFactory : public object_base<SCAPIX_META_STRING("javax/xml/transform/TransformerFactory"),
	java::lang::Object>
{
public:

	static ref<javax::xml::transform::TransformerFactory> newInstance();
	static ref<javax::xml::transform::TransformerFactory> newInstance(ref<java::lang::String> factoryClassName, ref<java::lang::ClassLoader> classLoader);
	ref<javax::xml::transform::Transformer> newTransformer(ref<javax::xml::transform::Source> p1);
	ref<javax::xml::transform::Transformer> newTransformer();
	ref<javax::xml::transform::Templates> newTemplates(ref<javax::xml::transform::Source> p1);
	ref<javax::xml::transform::Source> getAssociatedStylesheet(ref<javax::xml::transform::Source> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<java::lang::String> p4);
	void setURIResolver(ref<javax::xml::transform::URIResolver> p1);
	ref<javax::xml::transform::URIResolver> getURIResolver();
	void setFeature(ref<java::lang::String> p1, jboolean p2);
	jboolean getFeature(ref<java::lang::String> p1);
	void setAttribute(ref<java::lang::String> p1, ref<java::lang::Object> p2);
	ref<java::lang::Object> getAttribute(ref<java::lang::String> p1);
	void setErrorListener(ref<javax::xml::transform::ErrorListener> p1);
	ref<javax::xml::transform::ErrorListener> getErrorListener();

protected:

	TransformerFactory(handle_type h) : base_(h) {}

};

} // namespace javax::xml::transform
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/xml/transform/ErrorListener.h>
#include <scapix/java_api/javax/xml/transform/Source.h>
#include <scapix/java_api/javax/xml/transform/Templates.h>
#include <scapix/java_api/javax/xml/transform/Transformer.h>
#include <scapix/java_api/javax/xml/transform/URIResolver.h>

namespace scapix::java_api {
namespace javax::xml::transform {

inline ref<javax::xml::transform::TransformerFactory> TransformerFactory::newInstance() { return call_static_method<SCAPIX_META_STRING("newInstance"), ref<javax::xml::transform::TransformerFactory>>(); }
inline ref<javax::xml::transform::TransformerFactory> TransformerFactory::newInstance(ref<java::lang::String> factoryClassName, ref<java::lang::ClassLoader> classLoader) { return call_static_method<SCAPIX_META_STRING("newInstance"), ref<javax::xml::transform::TransformerFactory>>(factoryClassName, classLoader); }
inline ref<javax::xml::transform::Transformer> TransformerFactory::newTransformer(ref<javax::xml::transform::Source> p1) { return call_method<SCAPIX_META_STRING("newTransformer"), ref<javax::xml::transform::Transformer>>(p1); }
inline ref<javax::xml::transform::Transformer> TransformerFactory::newTransformer() { return call_method<SCAPIX_META_STRING("newTransformer"), ref<javax::xml::transform::Transformer>>(); }
inline ref<javax::xml::transform::Templates> TransformerFactory::newTemplates(ref<javax::xml::transform::Source> p1) { return call_method<SCAPIX_META_STRING("newTemplates"), ref<javax::xml::transform::Templates>>(p1); }
inline ref<javax::xml::transform::Source> TransformerFactory::getAssociatedStylesheet(ref<javax::xml::transform::Source> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<java::lang::String> p4) { return call_method<SCAPIX_META_STRING("getAssociatedStylesheet"), ref<javax::xml::transform::Source>>(p1, p2, p3, p4); }
inline void TransformerFactory::setURIResolver(ref<javax::xml::transform::URIResolver> p1) { return call_method<SCAPIX_META_STRING("setURIResolver"), void>(p1); }
inline ref<javax::xml::transform::URIResolver> TransformerFactory::getURIResolver() { return call_method<SCAPIX_META_STRING("getURIResolver"), ref<javax::xml::transform::URIResolver>>(); }
inline void TransformerFactory::setFeature(ref<java::lang::String> p1, jboolean p2) { return call_method<SCAPIX_META_STRING("setFeature"), void>(p1, p2); }
inline jboolean TransformerFactory::getFeature(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getFeature"), jboolean>(p1); }
inline void TransformerFactory::setAttribute(ref<java::lang::String> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("setAttribute"), void>(p1, p2); }
inline ref<java::lang::Object> TransformerFactory::getAttribute(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getAttribute"), ref<java::lang::Object>>(p1); }
inline void TransformerFactory::setErrorListener(ref<javax::xml::transform::ErrorListener> p1) { return call_method<SCAPIX_META_STRING("setErrorListener"), void>(p1); }
inline ref<javax::xml::transform::ErrorListener> TransformerFactory::getErrorListener() { return call_method<SCAPIX_META_STRING("getErrorListener"), ref<javax::xml::transform::ErrorListener>>(); }

} // namespace javax::xml::transform
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_XML_TRANSFORM_TRANSFORMERFACTORY_H
