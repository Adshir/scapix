// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVAX_XML_XPATH_XPATHFACTORY_H
#define SCAPIX_JAVAX_XML_XPATH_XPATHFACTORY_H

namespace scapix::java_api {

namespace java::lang { class ClassLoader; }
namespace java::lang { class String; }
namespace javax::xml::xpath { class XPath; }
namespace javax::xml::xpath { class XPathFunctionResolver; }
namespace javax::xml::xpath { class XPathVariableResolver; }

namespace javax::xml::xpath {

class XPathFactory : public object_base<SCAPIX_META_STRING("javax/xml/xpath/XPathFactory"),
	java::lang::Object>
{
public:

	static ref<java::lang::String> DEFAULT_OBJECT_MODEL_URI_();
	static ref<java::lang::String> DEFAULT_PROPERTY_NAME_();

	static ref<javax::xml::xpath::XPathFactory> newInstance();
	static ref<javax::xml::xpath::XPathFactory> newInstance(ref<java::lang::String> uri);
	static ref<javax::xml::xpath::XPathFactory> newInstance(ref<java::lang::String> uri, ref<java::lang::String> factoryClassName, ref<java::lang::ClassLoader> classLoader);
	jboolean isObjectModelSupported(ref<java::lang::String> p1);
	void setFeature(ref<java::lang::String> p1, jboolean p2);
	jboolean getFeature(ref<java::lang::String> p1);
	void setXPathVariableResolver(ref<javax::xml::xpath::XPathVariableResolver> p1);
	void setXPathFunctionResolver(ref<javax::xml::xpath::XPathFunctionResolver> p1);
	ref<javax::xml::xpath::XPath> newXPath();

protected:

	XPathFactory(handle_type h) : base_(h) {}

};

} // namespace javax::xml::xpath
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/xml/xpath/XPath.h>
#include <scapix/java_api/javax/xml/xpath/XPathFunctionResolver.h>
#include <scapix/java_api/javax/xml/xpath/XPathVariableResolver.h>

namespace scapix::java_api {
namespace javax::xml::xpath {

inline ref<java::lang::String> XPathFactory::DEFAULT_OBJECT_MODEL_URI_() { return get_static_field<SCAPIX_META_STRING("DEFAULT_OBJECT_MODEL_URI"), ref<java::lang::String>>(); }
inline ref<java::lang::String> XPathFactory::DEFAULT_PROPERTY_NAME_() { return get_static_field<SCAPIX_META_STRING("DEFAULT_PROPERTY_NAME"), ref<java::lang::String>>(); }
inline ref<javax::xml::xpath::XPathFactory> XPathFactory::newInstance() { return call_static_method<SCAPIX_META_STRING("newInstance"), ref<javax::xml::xpath::XPathFactory>>(); }
inline ref<javax::xml::xpath::XPathFactory> XPathFactory::newInstance(ref<java::lang::String> uri) { return call_static_method<SCAPIX_META_STRING("newInstance"), ref<javax::xml::xpath::XPathFactory>>(uri); }
inline ref<javax::xml::xpath::XPathFactory> XPathFactory::newInstance(ref<java::lang::String> uri, ref<java::lang::String> factoryClassName, ref<java::lang::ClassLoader> classLoader) { return call_static_method<SCAPIX_META_STRING("newInstance"), ref<javax::xml::xpath::XPathFactory>>(uri, factoryClassName, classLoader); }
inline jboolean XPathFactory::isObjectModelSupported(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("isObjectModelSupported"), jboolean>(p1); }
inline void XPathFactory::setFeature(ref<java::lang::String> p1, jboolean p2) { return call_method<SCAPIX_META_STRING("setFeature"), void>(p1, p2); }
inline jboolean XPathFactory::getFeature(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getFeature"), jboolean>(p1); }
inline void XPathFactory::setXPathVariableResolver(ref<javax::xml::xpath::XPathVariableResolver> p1) { return call_method<SCAPIX_META_STRING("setXPathVariableResolver"), void>(p1); }
inline void XPathFactory::setXPathFunctionResolver(ref<javax::xml::xpath::XPathFunctionResolver> p1) { return call_method<SCAPIX_META_STRING("setXPathFunctionResolver"), void>(p1); }
inline ref<javax::xml::xpath::XPath> XPathFactory::newXPath() { return call_method<SCAPIX_META_STRING("newXPath"), ref<javax::xml::xpath::XPath>>(); }

} // namespace javax::xml::xpath
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_XML_XPATH_XPATHFACTORY_H
