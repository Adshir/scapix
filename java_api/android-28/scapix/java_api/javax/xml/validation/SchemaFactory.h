// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVAX_XML_VALIDATION_SCHEMAFACTORY_H
#define SCAPIX_JAVAX_XML_VALIDATION_SCHEMAFACTORY_H

namespace scapix::java_api {

namespace java::io { class File; }
namespace java::lang { class ClassLoader; }
namespace java::lang { class String; }
namespace java::net { class URL; }
namespace javax::xml::transform { class Source; }
namespace javax::xml::validation { class Schema; }
namespace org::w3c::dom::ls { class LSResourceResolver; }
namespace org::xml::sax { class ErrorHandler; }

namespace javax::xml::validation {

class SchemaFactory : public object_base<SCAPIX_META_STRING("javax/xml/validation/SchemaFactory"),
	java::lang::Object>
{
public:

	static ref<javax::xml::validation::SchemaFactory> newInstance(ref<java::lang::String> schemaLanguage);
	static ref<javax::xml::validation::SchemaFactory> newInstance(ref<java::lang::String> schemaLanguage, ref<java::lang::String> factoryClassName, ref<java::lang::ClassLoader> classLoader);
	jboolean isSchemaLanguageSupported(ref<java::lang::String> p1);
	jboolean getFeature(ref<java::lang::String> name);
	void setFeature(ref<java::lang::String> name, jboolean value);
	void setProperty(ref<java::lang::String> name, ref<java::lang::Object> object);
	ref<java::lang::Object> getProperty(ref<java::lang::String> name);
	void setErrorHandler(ref<org::xml::sax::ErrorHandler> p1);
	ref<org::xml::sax::ErrorHandler> getErrorHandler();
	void setResourceResolver(ref<org::w3c::dom::ls::LSResourceResolver> p1);
	ref<org::w3c::dom::ls::LSResourceResolver> getResourceResolver();
	ref<javax::xml::validation::Schema> newSchema(ref<javax::xml::transform::Source> schema);
	ref<javax::xml::validation::Schema> newSchema(ref<java::io::File> schema);
	ref<javax::xml::validation::Schema> newSchema(ref<java::net::URL> schema);
	ref<javax::xml::validation::Schema> newSchema(ref<link::java::array<javax::xml::transform::Source>> p1);
	ref<javax::xml::validation::Schema> newSchema();

protected:

	SchemaFactory(handle_type h) : base_(h) {}

};

} // namespace javax::xml::validation
} // namespace scapix::java_api

#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/javax/xml/transform/Source.h>
#include <scapix/java_api/javax/xml/validation/Schema.h>
#include <scapix/java_api/org/w3c/dom/ls/LSResourceResolver.h>
#include <scapix/java_api/org/xml/sax/ErrorHandler.h>

namespace scapix::java_api {
namespace javax::xml::validation {

inline ref<javax::xml::validation::SchemaFactory> SchemaFactory::newInstance(ref<java::lang::String> schemaLanguage) { return call_static_method<SCAPIX_META_STRING("newInstance"), ref<javax::xml::validation::SchemaFactory>>(schemaLanguage); }
inline ref<javax::xml::validation::SchemaFactory> SchemaFactory::newInstance(ref<java::lang::String> schemaLanguage, ref<java::lang::String> factoryClassName, ref<java::lang::ClassLoader> classLoader) { return call_static_method<SCAPIX_META_STRING("newInstance"), ref<javax::xml::validation::SchemaFactory>>(schemaLanguage, factoryClassName, classLoader); }
inline jboolean SchemaFactory::isSchemaLanguageSupported(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("isSchemaLanguageSupported"), jboolean>(p1); }
inline jboolean SchemaFactory::getFeature(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getFeature"), jboolean>(name); }
inline void SchemaFactory::setFeature(ref<java::lang::String> name, jboolean value) { return call_method<SCAPIX_META_STRING("setFeature"), void>(name, value); }
inline void SchemaFactory::setProperty(ref<java::lang::String> name, ref<java::lang::Object> object) { return call_method<SCAPIX_META_STRING("setProperty"), void>(name, object); }
inline ref<java::lang::Object> SchemaFactory::getProperty(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getProperty"), ref<java::lang::Object>>(name); }
inline void SchemaFactory::setErrorHandler(ref<org::xml::sax::ErrorHandler> p1) { return call_method<SCAPIX_META_STRING("setErrorHandler"), void>(p1); }
inline ref<org::xml::sax::ErrorHandler> SchemaFactory::getErrorHandler() { return call_method<SCAPIX_META_STRING("getErrorHandler"), ref<org::xml::sax::ErrorHandler>>(); }
inline void SchemaFactory::setResourceResolver(ref<org::w3c::dom::ls::LSResourceResolver> p1) { return call_method<SCAPIX_META_STRING("setResourceResolver"), void>(p1); }
inline ref<org::w3c::dom::ls::LSResourceResolver> SchemaFactory::getResourceResolver() { return call_method<SCAPIX_META_STRING("getResourceResolver"), ref<org::w3c::dom::ls::LSResourceResolver>>(); }
inline ref<javax::xml::validation::Schema> SchemaFactory::newSchema(ref<javax::xml::transform::Source> schema) { return call_method<SCAPIX_META_STRING("newSchema"), ref<javax::xml::validation::Schema>>(schema); }
inline ref<javax::xml::validation::Schema> SchemaFactory::newSchema(ref<java::io::File> schema) { return call_method<SCAPIX_META_STRING("newSchema"), ref<javax::xml::validation::Schema>>(schema); }
inline ref<javax::xml::validation::Schema> SchemaFactory::newSchema(ref<java::net::URL> schema) { return call_method<SCAPIX_META_STRING("newSchema"), ref<javax::xml::validation::Schema>>(schema); }
inline ref<javax::xml::validation::Schema> SchemaFactory::newSchema(ref<link::java::array<javax::xml::transform::Source>> p1) { return call_method<SCAPIX_META_STRING("newSchema"), ref<javax::xml::validation::Schema>>(p1); }
inline ref<javax::xml::validation::Schema> SchemaFactory::newSchema() { return call_method<SCAPIX_META_STRING("newSchema"), ref<javax::xml::validation::Schema>>(); }

} // namespace javax::xml::validation
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_XML_VALIDATION_SCHEMAFACTORY_H
