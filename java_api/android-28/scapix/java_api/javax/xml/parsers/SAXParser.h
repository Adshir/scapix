// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVAX_XML_PARSERS_SAXPARSER_H
#define SCAPIX_JAVAX_XML_PARSERS_SAXPARSER_H

namespace scapix::java_api {

namespace java::io { class File; }
namespace java::io { class InputStream; }
namespace java::lang { class String; }
namespace javax::xml::validation { class Schema; }
namespace org::xml::sax { class HandlerBase; }
namespace org::xml::sax { class InputSource; }
namespace org::xml::sax { class Parser; }
namespace org::xml::sax { class XMLReader; }
namespace org::xml::sax::helpers { class DefaultHandler; }

namespace javax::xml::parsers {

class SAXParser : public object_base<SCAPIX_META_STRING("javax/xml/parsers/SAXParser"),
	java::lang::Object>
{
public:

	void reset();
	void parse(ref<java::io::InputStream> is, ref<org::xml::sax::HandlerBase> hb);
	void parse(ref<java::io::InputStream> is, ref<org::xml::sax::HandlerBase> hb, ref<java::lang::String> systemId);
	void parse(ref<java::io::InputStream> is, ref<org::xml::sax::helpers::DefaultHandler> dh);
	void parse(ref<java::io::InputStream> is, ref<org::xml::sax::helpers::DefaultHandler> dh, ref<java::lang::String> systemId);
	void parse(ref<java::lang::String> uri, ref<org::xml::sax::HandlerBase> hb);
	void parse(ref<java::lang::String> uri, ref<org::xml::sax::helpers::DefaultHandler> dh);
	void parse(ref<java::io::File> f, ref<org::xml::sax::HandlerBase> hb);
	void parse(ref<java::io::File> f, ref<org::xml::sax::helpers::DefaultHandler> dh);
	void parse(ref<org::xml::sax::InputSource> is, ref<org::xml::sax::HandlerBase> hb);
	void parse(ref<org::xml::sax::InputSource> is, ref<org::xml::sax::helpers::DefaultHandler> dh);
	ref<org::xml::sax::Parser> getParser();
	ref<org::xml::sax::XMLReader> getXMLReader();
	jboolean isNamespaceAware();
	jboolean isValidating();
	void setProperty(ref<java::lang::String> p1, ref<java::lang::Object> p2);
	ref<java::lang::Object> getProperty(ref<java::lang::String> p1);
	ref<javax::xml::validation::Schema> getSchema();
	jboolean isXIncludeAware();

protected:

	SAXParser(handle_type h) : base_(h) {}

};

} // namespace javax::xml::parsers
} // namespace scapix::java_api

#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/xml/validation/Schema.h>
#include <scapix/java_api/org/xml/sax/HandlerBase.h>
#include <scapix/java_api/org/xml/sax/InputSource.h>
#include <scapix/java_api/org/xml/sax/Parser.h>
#include <scapix/java_api/org/xml/sax/XMLReader.h>
#include <scapix/java_api/org/xml/sax/helpers/DefaultHandler.h>

namespace scapix::java_api {
namespace javax::xml::parsers {

inline void SAXParser::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline void SAXParser::parse(ref<java::io::InputStream> is, ref<org::xml::sax::HandlerBase> hb) { return call_method<SCAPIX_META_STRING("parse"), void>(is, hb); }
inline void SAXParser::parse(ref<java::io::InputStream> is, ref<org::xml::sax::HandlerBase> hb, ref<java::lang::String> systemId) { return call_method<SCAPIX_META_STRING("parse"), void>(is, hb, systemId); }
inline void SAXParser::parse(ref<java::io::InputStream> is, ref<org::xml::sax::helpers::DefaultHandler> dh) { return call_method<SCAPIX_META_STRING("parse"), void>(is, dh); }
inline void SAXParser::parse(ref<java::io::InputStream> is, ref<org::xml::sax::helpers::DefaultHandler> dh, ref<java::lang::String> systemId) { return call_method<SCAPIX_META_STRING("parse"), void>(is, dh, systemId); }
inline void SAXParser::parse(ref<java::lang::String> uri, ref<org::xml::sax::HandlerBase> hb) { return call_method<SCAPIX_META_STRING("parse"), void>(uri, hb); }
inline void SAXParser::parse(ref<java::lang::String> uri, ref<org::xml::sax::helpers::DefaultHandler> dh) { return call_method<SCAPIX_META_STRING("parse"), void>(uri, dh); }
inline void SAXParser::parse(ref<java::io::File> f, ref<org::xml::sax::HandlerBase> hb) { return call_method<SCAPIX_META_STRING("parse"), void>(f, hb); }
inline void SAXParser::parse(ref<java::io::File> f, ref<org::xml::sax::helpers::DefaultHandler> dh) { return call_method<SCAPIX_META_STRING("parse"), void>(f, dh); }
inline void SAXParser::parse(ref<org::xml::sax::InputSource> is, ref<org::xml::sax::HandlerBase> hb) { return call_method<SCAPIX_META_STRING("parse"), void>(is, hb); }
inline void SAXParser::parse(ref<org::xml::sax::InputSource> is, ref<org::xml::sax::helpers::DefaultHandler> dh) { return call_method<SCAPIX_META_STRING("parse"), void>(is, dh); }
inline ref<org::xml::sax::Parser> SAXParser::getParser() { return call_method<SCAPIX_META_STRING("getParser"), ref<org::xml::sax::Parser>>(); }
inline ref<org::xml::sax::XMLReader> SAXParser::getXMLReader() { return call_method<SCAPIX_META_STRING("getXMLReader"), ref<org::xml::sax::XMLReader>>(); }
inline jboolean SAXParser::isNamespaceAware() { return call_method<SCAPIX_META_STRING("isNamespaceAware"), jboolean>(); }
inline jboolean SAXParser::isValidating() { return call_method<SCAPIX_META_STRING("isValidating"), jboolean>(); }
inline void SAXParser::setProperty(ref<java::lang::String> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("setProperty"), void>(p1, p2); }
inline ref<java::lang::Object> SAXParser::getProperty(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getProperty"), ref<java::lang::Object>>(p1); }
inline ref<javax::xml::validation::Schema> SAXParser::getSchema() { return call_method<SCAPIX_META_STRING("getSchema"), ref<javax::xml::validation::Schema>>(); }
inline jboolean SAXParser::isXIncludeAware() { return call_method<SCAPIX_META_STRING("isXIncludeAware"), jboolean>(); }

} // namespace javax::xml::parsers
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_XML_PARSERS_SAXPARSER_H
