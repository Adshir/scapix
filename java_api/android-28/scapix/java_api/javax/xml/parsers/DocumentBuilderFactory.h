// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVAX_XML_PARSERS_DOCUMENTBUILDERFACTORY_H
#define SCAPIX_JAVAX_XML_PARSERS_DOCUMENTBUILDERFACTORY_H

namespace scapix::java_api {

namespace java::lang { class ClassLoader; }
namespace java::lang { class String; }
namespace javax::xml::parsers { class DocumentBuilder; }
namespace javax::xml::validation { class Schema; }

namespace javax::xml::parsers {

class DocumentBuilderFactory : public object_base<SCAPIX_META_STRING("javax/xml/parsers/DocumentBuilderFactory"),
	java::lang::Object>
{
public:

	static ref<javax::xml::parsers::DocumentBuilderFactory> newInstance();
	static ref<javax::xml::parsers::DocumentBuilderFactory> newInstance(ref<java::lang::String> factoryClassName, ref<java::lang::ClassLoader> classLoader);
	ref<javax::xml::parsers::DocumentBuilder> newDocumentBuilder();
	void setNamespaceAware(jboolean awareness);
	void setValidating(jboolean validating);
	void setIgnoringElementContentWhitespace(jboolean whitespace);
	void setExpandEntityReferences(jboolean expandEntityRef);
	void setIgnoringComments(jboolean ignoreComments);
	void setCoalescing(jboolean coalescing);
	jboolean isNamespaceAware();
	jboolean isValidating();
	jboolean isIgnoringElementContentWhitespace();
	jboolean isExpandEntityReferences();
	jboolean isIgnoringComments();
	jboolean isCoalescing();
	void setAttribute(ref<java::lang::String> p1, ref<java::lang::Object> p2);
	ref<java::lang::Object> getAttribute(ref<java::lang::String> p1);
	void setFeature(ref<java::lang::String> p1, jboolean p2);
	jboolean getFeature(ref<java::lang::String> p1);
	ref<javax::xml::validation::Schema> getSchema();
	void setSchema(ref<javax::xml::validation::Schema> schema);
	void setXIncludeAware(jboolean state);
	jboolean isXIncludeAware();

protected:

	DocumentBuilderFactory(handle_type h) : base_(h) {}

};

} // namespace javax::xml::parsers
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/xml/parsers/DocumentBuilder.h>
#include <scapix/java_api/javax/xml/validation/Schema.h>

namespace scapix::java_api {
namespace javax::xml::parsers {

inline ref<javax::xml::parsers::DocumentBuilderFactory> DocumentBuilderFactory::newInstance() { return call_static_method<SCAPIX_META_STRING("newInstance"), ref<javax::xml::parsers::DocumentBuilderFactory>>(); }
inline ref<javax::xml::parsers::DocumentBuilderFactory> DocumentBuilderFactory::newInstance(ref<java::lang::String> factoryClassName, ref<java::lang::ClassLoader> classLoader) { return call_static_method<SCAPIX_META_STRING("newInstance"), ref<javax::xml::parsers::DocumentBuilderFactory>>(factoryClassName, classLoader); }
inline ref<javax::xml::parsers::DocumentBuilder> DocumentBuilderFactory::newDocumentBuilder() { return call_method<SCAPIX_META_STRING("newDocumentBuilder"), ref<javax::xml::parsers::DocumentBuilder>>(); }
inline void DocumentBuilderFactory::setNamespaceAware(jboolean awareness) { return call_method<SCAPIX_META_STRING("setNamespaceAware"), void>(awareness); }
inline void DocumentBuilderFactory::setValidating(jboolean validating) { return call_method<SCAPIX_META_STRING("setValidating"), void>(validating); }
inline void DocumentBuilderFactory::setIgnoringElementContentWhitespace(jboolean whitespace) { return call_method<SCAPIX_META_STRING("setIgnoringElementContentWhitespace"), void>(whitespace); }
inline void DocumentBuilderFactory::setExpandEntityReferences(jboolean expandEntityRef) { return call_method<SCAPIX_META_STRING("setExpandEntityReferences"), void>(expandEntityRef); }
inline void DocumentBuilderFactory::setIgnoringComments(jboolean ignoreComments) { return call_method<SCAPIX_META_STRING("setIgnoringComments"), void>(ignoreComments); }
inline void DocumentBuilderFactory::setCoalescing(jboolean coalescing) { return call_method<SCAPIX_META_STRING("setCoalescing"), void>(coalescing); }
inline jboolean DocumentBuilderFactory::isNamespaceAware() { return call_method<SCAPIX_META_STRING("isNamespaceAware"), jboolean>(); }
inline jboolean DocumentBuilderFactory::isValidating() { return call_method<SCAPIX_META_STRING("isValidating"), jboolean>(); }
inline jboolean DocumentBuilderFactory::isIgnoringElementContentWhitespace() { return call_method<SCAPIX_META_STRING("isIgnoringElementContentWhitespace"), jboolean>(); }
inline jboolean DocumentBuilderFactory::isExpandEntityReferences() { return call_method<SCAPIX_META_STRING("isExpandEntityReferences"), jboolean>(); }
inline jboolean DocumentBuilderFactory::isIgnoringComments() { return call_method<SCAPIX_META_STRING("isIgnoringComments"), jboolean>(); }
inline jboolean DocumentBuilderFactory::isCoalescing() { return call_method<SCAPIX_META_STRING("isCoalescing"), jboolean>(); }
inline void DocumentBuilderFactory::setAttribute(ref<java::lang::String> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("setAttribute"), void>(p1, p2); }
inline ref<java::lang::Object> DocumentBuilderFactory::getAttribute(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getAttribute"), ref<java::lang::Object>>(p1); }
inline void DocumentBuilderFactory::setFeature(ref<java::lang::String> p1, jboolean p2) { return call_method<SCAPIX_META_STRING("setFeature"), void>(p1, p2); }
inline jboolean DocumentBuilderFactory::getFeature(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getFeature"), jboolean>(p1); }
inline ref<javax::xml::validation::Schema> DocumentBuilderFactory::getSchema() { return call_method<SCAPIX_META_STRING("getSchema"), ref<javax::xml::validation::Schema>>(); }
inline void DocumentBuilderFactory::setSchema(ref<javax::xml::validation::Schema> schema) { return call_method<SCAPIX_META_STRING("setSchema"), void>(schema); }
inline void DocumentBuilderFactory::setXIncludeAware(jboolean state) { return call_method<SCAPIX_META_STRING("setXIncludeAware"), void>(state); }
inline jboolean DocumentBuilderFactory::isXIncludeAware() { return call_method<SCAPIX_META_STRING("isXIncludeAware"), jboolean>(); }

} // namespace javax::xml::parsers
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_XML_PARSERS_DOCUMENTBUILDERFACTORY_H
