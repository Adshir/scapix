// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVAX_XML_NAMESPACE_QNAME_H
#define SCAPIX_JAVAX_XML_NAMESPACE_QNAME_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace javax::xml::namespace {

class QName : public object_base<SCAPIX_META_STRING("javax/xml/namespace/QName"),
	java::lang::Object,
	java::io::Serializable>
{
public:

	static ref<QName> new_object(ref<java::lang::String> namespaceURI, ref<java::lang::String> localPart);
	static ref<QName> new_object(ref<java::lang::String> namespaceURI, ref<java::lang::String> localPart, ref<java::lang::String> prefix);
	static ref<QName> new_object(ref<java::lang::String> localPart);
	ref<java::lang::String> getNamespaceURI();
	ref<java::lang::String> getLocalPart();
	ref<java::lang::String> getPrefix();
	jboolean equals(ref<java::lang::Object> objectToTest);
	jint hashCode();
	ref<java::lang::String> toString();
	static ref<javax::xml::namespace::QName> valueOf(ref<java::lang::String> qNameAsString);

protected:

	QName(handle_type h) : base_(h) {}

};

} // namespace javax::xml::namespace
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace javax::xml::namespace {

inline ref<QName> QName::new_object(ref<java::lang::String> namespaceURI, ref<java::lang::String> localPart) { return base_::new_object(namespaceURI, localPart); }
inline ref<QName> QName::new_object(ref<java::lang::String> namespaceURI, ref<java::lang::String> localPart, ref<java::lang::String> prefix) { return base_::new_object(namespaceURI, localPart, prefix); }
inline ref<QName> QName::new_object(ref<java::lang::String> localPart) { return base_::new_object(localPart); }
inline ref<java::lang::String> QName::getNamespaceURI() { return call_method<SCAPIX_META_STRING("getNamespaceURI"), ref<java::lang::String>>(); }
inline ref<java::lang::String> QName::getLocalPart() { return call_method<SCAPIX_META_STRING("getLocalPart"), ref<java::lang::String>>(); }
inline ref<java::lang::String> QName::getPrefix() { return call_method<SCAPIX_META_STRING("getPrefix"), ref<java::lang::String>>(); }
inline jboolean QName::equals(ref<java::lang::Object> objectToTest) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(objectToTest); }
inline jint QName::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> QName::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<javax::xml::namespace::QName> QName::valueOf(ref<java::lang::String> qNameAsString) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<javax::xml::namespace::QName>>(qNameAsString); }

} // namespace javax::xml::namespace
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_XML_NAMESPACE_QNAME_H
