// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/sql/ResultSet.h>

#ifndef SCAPIX_JAVAX_SQL_ROWSET_H
#define SCAPIX_JAVAX_SQL_ROWSET_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::io { class Reader; }
namespace java::lang { class String; }
namespace java::math { class BigDecimal; }
namespace java::net { class URL; }
namespace java::sql { class Array; }
namespace java::sql { class Blob; }
namespace java::sql { class Clob; }
namespace java::sql { class Date; }
namespace java::sql { class NClob; }
namespace java::sql { class Ref; }
namespace java::sql { class RowId; }
namespace java::sql { class SQLXML; }
namespace java::sql { class Time; }
namespace java::sql { class Timestamp; }
namespace java::util { class Calendar; }
namespace java::util { class Map; }
namespace javax::sql { class RowSetListener; }

namespace javax::sql {

class RowSet : public object_base<SCAPIX_META_STRING("javax/sql/RowSet"),
	java::lang::Object,
	java::sql::ResultSet>
{
public:

	ref<java::lang::String> getUrl();
	void setUrl(ref<java::lang::String> p1);
	ref<java::lang::String> getDataSourceName();
	void setDataSourceName(ref<java::lang::String> p1);
	ref<java::lang::String> getUsername();
	void setUsername(ref<java::lang::String> p1);
	ref<java::lang::String> getPassword();
	void setPassword(ref<java::lang::String> p1);
	jint getTransactionIsolation();
	void setTransactionIsolation(jint p1);
	ref<java::util::Map> getTypeMap();
	void setTypeMap(ref<java::util::Map> p1);
	ref<java::lang::String> getCommand();
	void setCommand(ref<java::lang::String> p1);
	jboolean isReadOnly();
	void setReadOnly(jboolean p1);
	jint getMaxFieldSize();
	void setMaxFieldSize(jint p1);
	jint getMaxRows();
	void setMaxRows(jint p1);
	jboolean getEscapeProcessing();
	void setEscapeProcessing(jboolean p1);
	jint getQueryTimeout();
	void setQueryTimeout(jint p1);
	void setType(jint p1);
	void setConcurrency(jint p1);
	void setNull(jint p1, jint p2);
	void setNull(ref<java::lang::String> p1, jint p2);
	void setNull(jint p1, jint p2, ref<java::lang::String> p3);
	void setNull(ref<java::lang::String> p1, jint p2, ref<java::lang::String> p3);
	void setBoolean(jint p1, jboolean p2);
	void setBoolean(ref<java::lang::String> p1, jboolean p2);
	void setByte(jint p1, jbyte p2);
	void setByte(ref<java::lang::String> p1, jbyte p2);
	void setShort(jint p1, jshort p2);
	void setShort(ref<java::lang::String> p1, jshort p2);
	void setInt(jint p1, jint p2);
	void setInt(ref<java::lang::String> p1, jint p2);
	void setLong(jint p1, jlong p2);
	void setLong(ref<java::lang::String> p1, jlong p2);
	void setFloat(jint p1, jfloat p2);
	void setFloat(ref<java::lang::String> p1, jfloat p2);
	void setDouble(jint p1, jdouble p2);
	void setDouble(ref<java::lang::String> p1, jdouble p2);
	void setBigDecimal(jint p1, ref<java::math::BigDecimal> p2);
	void setBigDecimal(ref<java::lang::String> p1, ref<java::math::BigDecimal> p2);
	void setString(jint p1, ref<java::lang::String> p2);
	void setString(ref<java::lang::String> p1, ref<java::lang::String> p2);
	void setBytes(jint p1, ref<link::java::array<jbyte>> p2);
	void setBytes(ref<java::lang::String> p1, ref<link::java::array<jbyte>> p2);
	void setDate(jint p1, ref<java::sql::Date> p2);
	void setTime(jint p1, ref<java::sql::Time> p2);
	void setTimestamp(jint p1, ref<java::sql::Timestamp> p2);
	void setTimestamp(ref<java::lang::String> p1, ref<java::sql::Timestamp> p2);
	void setAsciiStream(jint p1, ref<java::io::InputStream> p2, jint p3);
	void setAsciiStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jint p3);
	void setBinaryStream(jint p1, ref<java::io::InputStream> p2, jint p3);
	void setBinaryStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jint p3);
	void setCharacterStream(jint p1, ref<java::io::Reader> p2, jint p3);
	void setCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2, jint p3);
	void setAsciiStream(jint p1, ref<java::io::InputStream> p2);
	void setAsciiStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2);
	void setBinaryStream(jint p1, ref<java::io::InputStream> p2);
	void setBinaryStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2);
	void setCharacterStream(jint p1, ref<java::io::Reader> p2);
	void setCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2);
	void setNCharacterStream(jint p1, ref<java::io::Reader> p2);
	void setObject(jint p1, ref<java::lang::Object> p2, jint p3, jint p4);
	void setObject(ref<java::lang::String> p1, ref<java::lang::Object> p2, jint p3, jint p4);
	void setObject(jint p1, ref<java::lang::Object> p2, jint p3);
	void setObject(ref<java::lang::String> p1, ref<java::lang::Object> p2, jint p3);
	void setObject(ref<java::lang::String> p1, ref<java::lang::Object> p2);
	void setObject(jint p1, ref<java::lang::Object> p2);
	void setRef(jint p1, ref<java::sql::Ref> p2);
	void setBlob(jint p1, ref<java::sql::Blob> p2);
	void setBlob(jint p1, ref<java::io::InputStream> p2, jlong p3);
	void setBlob(jint p1, ref<java::io::InputStream> p2);
	void setBlob(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jlong p3);
	void setBlob(ref<java::lang::String> p1, ref<java::sql::Blob> p2);
	void setBlob(ref<java::lang::String> p1, ref<java::io::InputStream> p2);
	void setClob(jint p1, ref<java::sql::Clob> p2);
	void setClob(jint p1, ref<java::io::Reader> p2, jlong p3);
	void setClob(jint p1, ref<java::io::Reader> p2);
	void setClob(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3);
	void setClob(ref<java::lang::String> p1, ref<java::sql::Clob> p2);
	void setClob(ref<java::lang::String> p1, ref<java::io::Reader> p2);
	void setArray(jint p1, ref<java::sql::Array> p2);
	void setDate(jint p1, ref<java::sql::Date> p2, ref<java::util::Calendar> p3);
	void setDate(ref<java::lang::String> p1, ref<java::sql::Date> p2);
	void setDate(ref<java::lang::String> p1, ref<java::sql::Date> p2, ref<java::util::Calendar> p3);
	void setTime(jint p1, ref<java::sql::Time> p2, ref<java::util::Calendar> p3);
	void setTime(ref<java::lang::String> p1, ref<java::sql::Time> p2);
	void setTime(ref<java::lang::String> p1, ref<java::sql::Time> p2, ref<java::util::Calendar> p3);
	void setTimestamp(jint p1, ref<java::sql::Timestamp> p2, ref<java::util::Calendar> p3);
	void setTimestamp(ref<java::lang::String> p1, ref<java::sql::Timestamp> p2, ref<java::util::Calendar> p3);
	void clearParameters();
	void execute();
	void addRowSetListener(ref<javax::sql::RowSetListener> p1);
	void removeRowSetListener(ref<javax::sql::RowSetListener> p1);
	void setSQLXML(jint p1, ref<java::sql::SQLXML> p2);
	void setSQLXML(ref<java::lang::String> p1, ref<java::sql::SQLXML> p2);
	void setRowId(jint p1, ref<java::sql::RowId> p2);
	void setRowId(ref<java::lang::String> p1, ref<java::sql::RowId> p2);
	void setNString(jint p1, ref<java::lang::String> p2);
	void setNString(ref<java::lang::String> p1, ref<java::lang::String> p2);
	void setNCharacterStream(jint p1, ref<java::io::Reader> p2, jlong p3);
	void setNCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3);
	void setNCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2);
	void setNClob(ref<java::lang::String> p1, ref<java::sql::NClob> p2);
	void setNClob(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3);
	void setNClob(ref<java::lang::String> p1, ref<java::io::Reader> p2);
	void setNClob(jint p1, ref<java::io::Reader> p2, jlong p3);
	void setNClob(jint p1, ref<java::sql::NClob> p2);
	void setNClob(jint p1, ref<java::io::Reader> p2);
	void setURL(jint p1, ref<java::net::URL> p2);

protected:

	RowSet(handle_type h) : base_(h) {}

};

} // namespace javax::sql
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigDecimal.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/sql/Array.h>
#include <scapix/java_api/java/sql/Blob.h>
#include <scapix/java_api/java/sql/Clob.h>
#include <scapix/java_api/java/sql/Date.h>
#include <scapix/java_api/java/sql/NClob.h>
#include <scapix/java_api/java/sql/Ref.h>
#include <scapix/java_api/java/sql/RowId.h>
#include <scapix/java_api/java/sql/SQLXML.h>
#include <scapix/java_api/java/sql/Time.h>
#include <scapix/java_api/java/sql/Timestamp.h>
#include <scapix/java_api/java/util/Calendar.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/javax/sql/RowSetListener.h>

namespace scapix::java_api {
namespace javax::sql {

inline ref<java::lang::String> RowSet::getUrl() { return call_method<SCAPIX_META_STRING("getUrl"), ref<java::lang::String>>(); }
inline void RowSet::setUrl(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setUrl"), void>(p1); }
inline ref<java::lang::String> RowSet::getDataSourceName() { return call_method<SCAPIX_META_STRING("getDataSourceName"), ref<java::lang::String>>(); }
inline void RowSet::setDataSourceName(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setDataSourceName"), void>(p1); }
inline ref<java::lang::String> RowSet::getUsername() { return call_method<SCAPIX_META_STRING("getUsername"), ref<java::lang::String>>(); }
inline void RowSet::setUsername(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setUsername"), void>(p1); }
inline ref<java::lang::String> RowSet::getPassword() { return call_method<SCAPIX_META_STRING("getPassword"), ref<java::lang::String>>(); }
inline void RowSet::setPassword(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setPassword"), void>(p1); }
inline jint RowSet::getTransactionIsolation() { return call_method<SCAPIX_META_STRING("getTransactionIsolation"), jint>(); }
inline void RowSet::setTransactionIsolation(jint p1) { return call_method<SCAPIX_META_STRING("setTransactionIsolation"), void>(p1); }
inline ref<java::util::Map> RowSet::getTypeMap() { return call_method<SCAPIX_META_STRING("getTypeMap"), ref<java::util::Map>>(); }
inline void RowSet::setTypeMap(ref<java::util::Map> p1) { return call_method<SCAPIX_META_STRING("setTypeMap"), void>(p1); }
inline ref<java::lang::String> RowSet::getCommand() { return call_method<SCAPIX_META_STRING("getCommand"), ref<java::lang::String>>(); }
inline void RowSet::setCommand(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setCommand"), void>(p1); }
inline jboolean RowSet::isReadOnly() { return call_method<SCAPIX_META_STRING("isReadOnly"), jboolean>(); }
inline void RowSet::setReadOnly(jboolean p1) { return call_method<SCAPIX_META_STRING("setReadOnly"), void>(p1); }
inline jint RowSet::getMaxFieldSize() { return call_method<SCAPIX_META_STRING("getMaxFieldSize"), jint>(); }
inline void RowSet::setMaxFieldSize(jint p1) { return call_method<SCAPIX_META_STRING("setMaxFieldSize"), void>(p1); }
inline jint RowSet::getMaxRows() { return call_method<SCAPIX_META_STRING("getMaxRows"), jint>(); }
inline void RowSet::setMaxRows(jint p1) { return call_method<SCAPIX_META_STRING("setMaxRows"), void>(p1); }
inline jboolean RowSet::getEscapeProcessing() { return call_method<SCAPIX_META_STRING("getEscapeProcessing"), jboolean>(); }
inline void RowSet::setEscapeProcessing(jboolean p1) { return call_method<SCAPIX_META_STRING("setEscapeProcessing"), void>(p1); }
inline jint RowSet::getQueryTimeout() { return call_method<SCAPIX_META_STRING("getQueryTimeout"), jint>(); }
inline void RowSet::setQueryTimeout(jint p1) { return call_method<SCAPIX_META_STRING("setQueryTimeout"), void>(p1); }
inline void RowSet::setType(jint p1) { return call_method<SCAPIX_META_STRING("setType"), void>(p1); }
inline void RowSet::setConcurrency(jint p1) { return call_method<SCAPIX_META_STRING("setConcurrency"), void>(p1); }
inline void RowSet::setNull(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("setNull"), void>(p1, p2); }
inline void RowSet::setNull(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("setNull"), void>(p1, p2); }
inline void RowSet::setNull(jint p1, jint p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("setNull"), void>(p1, p2, p3); }
inline void RowSet::setNull(ref<java::lang::String> p1, jint p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("setNull"), void>(p1, p2, p3); }
inline void RowSet::setBoolean(jint p1, jboolean p2) { return call_method<SCAPIX_META_STRING("setBoolean"), void>(p1, p2); }
inline void RowSet::setBoolean(ref<java::lang::String> p1, jboolean p2) { return call_method<SCAPIX_META_STRING("setBoolean"), void>(p1, p2); }
inline void RowSet::setByte(jint p1, jbyte p2) { return call_method<SCAPIX_META_STRING("setByte"), void>(p1, p2); }
inline void RowSet::setByte(ref<java::lang::String> p1, jbyte p2) { return call_method<SCAPIX_META_STRING("setByte"), void>(p1, p2); }
inline void RowSet::setShort(jint p1, jshort p2) { return call_method<SCAPIX_META_STRING("setShort"), void>(p1, p2); }
inline void RowSet::setShort(ref<java::lang::String> p1, jshort p2) { return call_method<SCAPIX_META_STRING("setShort"), void>(p1, p2); }
inline void RowSet::setInt(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("setInt"), void>(p1, p2); }
inline void RowSet::setInt(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("setInt"), void>(p1, p2); }
inline void RowSet::setLong(jint p1, jlong p2) { return call_method<SCAPIX_META_STRING("setLong"), void>(p1, p2); }
inline void RowSet::setLong(ref<java::lang::String> p1, jlong p2) { return call_method<SCAPIX_META_STRING("setLong"), void>(p1, p2); }
inline void RowSet::setFloat(jint p1, jfloat p2) { return call_method<SCAPIX_META_STRING("setFloat"), void>(p1, p2); }
inline void RowSet::setFloat(ref<java::lang::String> p1, jfloat p2) { return call_method<SCAPIX_META_STRING("setFloat"), void>(p1, p2); }
inline void RowSet::setDouble(jint p1, jdouble p2) { return call_method<SCAPIX_META_STRING("setDouble"), void>(p1, p2); }
inline void RowSet::setDouble(ref<java::lang::String> p1, jdouble p2) { return call_method<SCAPIX_META_STRING("setDouble"), void>(p1, p2); }
inline void RowSet::setBigDecimal(jint p1, ref<java::math::BigDecimal> p2) { return call_method<SCAPIX_META_STRING("setBigDecimal"), void>(p1, p2); }
inline void RowSet::setBigDecimal(ref<java::lang::String> p1, ref<java::math::BigDecimal> p2) { return call_method<SCAPIX_META_STRING("setBigDecimal"), void>(p1, p2); }
inline void RowSet::setString(jint p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("setString"), void>(p1, p2); }
inline void RowSet::setString(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("setString"), void>(p1, p2); }
inline void RowSet::setBytes(jint p1, ref<link::java::array<jbyte>> p2) { return call_method<SCAPIX_META_STRING("setBytes"), void>(p1, p2); }
inline void RowSet::setBytes(ref<java::lang::String> p1, ref<link::java::array<jbyte>> p2) { return call_method<SCAPIX_META_STRING("setBytes"), void>(p1, p2); }
inline void RowSet::setDate(jint p1, ref<java::sql::Date> p2) { return call_method<SCAPIX_META_STRING("setDate"), void>(p1, p2); }
inline void RowSet::setTime(jint p1, ref<java::sql::Time> p2) { return call_method<SCAPIX_META_STRING("setTime"), void>(p1, p2); }
inline void RowSet::setTimestamp(jint p1, ref<java::sql::Timestamp> p2) { return call_method<SCAPIX_META_STRING("setTimestamp"), void>(p1, p2); }
inline void RowSet::setTimestamp(ref<java::lang::String> p1, ref<java::sql::Timestamp> p2) { return call_method<SCAPIX_META_STRING("setTimestamp"), void>(p1, p2); }
inline void RowSet::setAsciiStream(jint p1, ref<java::io::InputStream> p2, jint p3) { return call_method<SCAPIX_META_STRING("setAsciiStream"), void>(p1, p2, p3); }
inline void RowSet::setAsciiStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jint p3) { return call_method<SCAPIX_META_STRING("setAsciiStream"), void>(p1, p2, p3); }
inline void RowSet::setBinaryStream(jint p1, ref<java::io::InputStream> p2, jint p3) { return call_method<SCAPIX_META_STRING("setBinaryStream"), void>(p1, p2, p3); }
inline void RowSet::setBinaryStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jint p3) { return call_method<SCAPIX_META_STRING("setBinaryStream"), void>(p1, p2, p3); }
inline void RowSet::setCharacterStream(jint p1, ref<java::io::Reader> p2, jint p3) { return call_method<SCAPIX_META_STRING("setCharacterStream"), void>(p1, p2, p3); }
inline void RowSet::setCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2, jint p3) { return call_method<SCAPIX_META_STRING("setCharacterStream"), void>(p1, p2, p3); }
inline void RowSet::setAsciiStream(jint p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("setAsciiStream"), void>(p1, p2); }
inline void RowSet::setAsciiStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("setAsciiStream"), void>(p1, p2); }
inline void RowSet::setBinaryStream(jint p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("setBinaryStream"), void>(p1, p2); }
inline void RowSet::setBinaryStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("setBinaryStream"), void>(p1, p2); }
inline void RowSet::setCharacterStream(jint p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("setCharacterStream"), void>(p1, p2); }
inline void RowSet::setCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("setCharacterStream"), void>(p1, p2); }
inline void RowSet::setNCharacterStream(jint p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("setNCharacterStream"), void>(p1, p2); }
inline void RowSet::setObject(jint p1, ref<java::lang::Object> p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("setObject"), void>(p1, p2, p3, p4); }
inline void RowSet::setObject(ref<java::lang::String> p1, ref<java::lang::Object> p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("setObject"), void>(p1, p2, p3, p4); }
inline void RowSet::setObject(jint p1, ref<java::lang::Object> p2, jint p3) { return call_method<SCAPIX_META_STRING("setObject"), void>(p1, p2, p3); }
inline void RowSet::setObject(ref<java::lang::String> p1, ref<java::lang::Object> p2, jint p3) { return call_method<SCAPIX_META_STRING("setObject"), void>(p1, p2, p3); }
inline void RowSet::setObject(ref<java::lang::String> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("setObject"), void>(p1, p2); }
inline void RowSet::setObject(jint p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("setObject"), void>(p1, p2); }
inline void RowSet::setRef(jint p1, ref<java::sql::Ref> p2) { return call_method<SCAPIX_META_STRING("setRef"), void>(p1, p2); }
inline void RowSet::setBlob(jint p1, ref<java::sql::Blob> p2) { return call_method<SCAPIX_META_STRING("setBlob"), void>(p1, p2); }
inline void RowSet::setBlob(jint p1, ref<java::io::InputStream> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setBlob"), void>(p1, p2, p3); }
inline void RowSet::setBlob(jint p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("setBlob"), void>(p1, p2); }
inline void RowSet::setBlob(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setBlob"), void>(p1, p2, p3); }
inline void RowSet::setBlob(ref<java::lang::String> p1, ref<java::sql::Blob> p2) { return call_method<SCAPIX_META_STRING("setBlob"), void>(p1, p2); }
inline void RowSet::setBlob(ref<java::lang::String> p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("setBlob"), void>(p1, p2); }
inline void RowSet::setClob(jint p1, ref<java::sql::Clob> p2) { return call_method<SCAPIX_META_STRING("setClob"), void>(p1, p2); }
inline void RowSet::setClob(jint p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setClob"), void>(p1, p2, p3); }
inline void RowSet::setClob(jint p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("setClob"), void>(p1, p2); }
inline void RowSet::setClob(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setClob"), void>(p1, p2, p3); }
inline void RowSet::setClob(ref<java::lang::String> p1, ref<java::sql::Clob> p2) { return call_method<SCAPIX_META_STRING("setClob"), void>(p1, p2); }
inline void RowSet::setClob(ref<java::lang::String> p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("setClob"), void>(p1, p2); }
inline void RowSet::setArray(jint p1, ref<java::sql::Array> p2) { return call_method<SCAPIX_META_STRING("setArray"), void>(p1, p2); }
inline void RowSet::setDate(jint p1, ref<java::sql::Date> p2, ref<java::util::Calendar> p3) { return call_method<SCAPIX_META_STRING("setDate"), void>(p1, p2, p3); }
inline void RowSet::setDate(ref<java::lang::String> p1, ref<java::sql::Date> p2) { return call_method<SCAPIX_META_STRING("setDate"), void>(p1, p2); }
inline void RowSet::setDate(ref<java::lang::String> p1, ref<java::sql::Date> p2, ref<java::util::Calendar> p3) { return call_method<SCAPIX_META_STRING("setDate"), void>(p1, p2, p3); }
inline void RowSet::setTime(jint p1, ref<java::sql::Time> p2, ref<java::util::Calendar> p3) { return call_method<SCAPIX_META_STRING("setTime"), void>(p1, p2, p3); }
inline void RowSet::setTime(ref<java::lang::String> p1, ref<java::sql::Time> p2) { return call_method<SCAPIX_META_STRING("setTime"), void>(p1, p2); }
inline void RowSet::setTime(ref<java::lang::String> p1, ref<java::sql::Time> p2, ref<java::util::Calendar> p3) { return call_method<SCAPIX_META_STRING("setTime"), void>(p1, p2, p3); }
inline void RowSet::setTimestamp(jint p1, ref<java::sql::Timestamp> p2, ref<java::util::Calendar> p3) { return call_method<SCAPIX_META_STRING("setTimestamp"), void>(p1, p2, p3); }
inline void RowSet::setTimestamp(ref<java::lang::String> p1, ref<java::sql::Timestamp> p2, ref<java::util::Calendar> p3) { return call_method<SCAPIX_META_STRING("setTimestamp"), void>(p1, p2, p3); }
inline void RowSet::clearParameters() { return call_method<SCAPIX_META_STRING("clearParameters"), void>(); }
inline void RowSet::execute() { return call_method<SCAPIX_META_STRING("execute"), void>(); }
inline void RowSet::addRowSetListener(ref<javax::sql::RowSetListener> p1) { return call_method<SCAPIX_META_STRING("addRowSetListener"), void>(p1); }
inline void RowSet::removeRowSetListener(ref<javax::sql::RowSetListener> p1) { return call_method<SCAPIX_META_STRING("removeRowSetListener"), void>(p1); }
inline void RowSet::setSQLXML(jint p1, ref<java::sql::SQLXML> p2) { return call_method<SCAPIX_META_STRING("setSQLXML"), void>(p1, p2); }
inline void RowSet::setSQLXML(ref<java::lang::String> p1, ref<java::sql::SQLXML> p2) { return call_method<SCAPIX_META_STRING("setSQLXML"), void>(p1, p2); }
inline void RowSet::setRowId(jint p1, ref<java::sql::RowId> p2) { return call_method<SCAPIX_META_STRING("setRowId"), void>(p1, p2); }
inline void RowSet::setRowId(ref<java::lang::String> p1, ref<java::sql::RowId> p2) { return call_method<SCAPIX_META_STRING("setRowId"), void>(p1, p2); }
inline void RowSet::setNString(jint p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("setNString"), void>(p1, p2); }
inline void RowSet::setNString(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("setNString"), void>(p1, p2); }
inline void RowSet::setNCharacterStream(jint p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setNCharacterStream"), void>(p1, p2, p3); }
inline void RowSet::setNCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setNCharacterStream"), void>(p1, p2, p3); }
inline void RowSet::setNCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("setNCharacterStream"), void>(p1, p2); }
inline void RowSet::setNClob(ref<java::lang::String> p1, ref<java::sql::NClob> p2) { return call_method<SCAPIX_META_STRING("setNClob"), void>(p1, p2); }
inline void RowSet::setNClob(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setNClob"), void>(p1, p2, p3); }
inline void RowSet::setNClob(ref<java::lang::String> p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("setNClob"), void>(p1, p2); }
inline void RowSet::setNClob(jint p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setNClob"), void>(p1, p2, p3); }
inline void RowSet::setNClob(jint p1, ref<java::sql::NClob> p2) { return call_method<SCAPIX_META_STRING("setNClob"), void>(p1, p2); }
inline void RowSet::setNClob(jint p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("setNClob"), void>(p1, p2); }
inline void RowSet::setURL(jint p1, ref<java::net::URL> p2) { return call_method<SCAPIX_META_STRING("setURL"), void>(p1, p2); }

} // namespace javax::sql
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_SQL_ROWSET_H
