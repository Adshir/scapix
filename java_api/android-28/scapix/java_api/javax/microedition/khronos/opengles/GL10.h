// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/microedition/khronos/opengles/GL.h>

#ifndef SCAPIX_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL10_H
#define SCAPIX_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL10_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::nio { class Buffer; }
namespace java::nio { class FloatBuffer; }
namespace java::nio { class IntBuffer; }

namespace javax::microedition::khronos::opengles {

class GL10 : public object_base<SCAPIX_META_STRING("javax/microedition/khronos/opengles/GL10"),
	java::lang::Object,
	javax::microedition::khronos::opengles::GL>
{
public:

	static jint GL_ADD_();
	static jint GL_ALIASED_LINE_WIDTH_RANGE_();
	static jint GL_ALIASED_POINT_SIZE_RANGE_();
	static jint GL_ALPHA_();
	static jint GL_ALPHA_BITS_();
	static jint GL_ALPHA_TEST_();
	static jint GL_ALWAYS_();
	static jint GL_AMBIENT_();
	static jint GL_AMBIENT_AND_DIFFUSE_();
	static jint GL_AND_();
	static jint GL_AND_INVERTED_();
	static jint GL_AND_REVERSE_();
	static jint GL_BACK_();
	static jint GL_BLEND_();
	static jint GL_BLUE_BITS_();
	static jint GL_BYTE_();
	static jint GL_CCW_();
	static jint GL_CLAMP_TO_EDGE_();
	static jint GL_CLEAR_();
	static jint GL_COLOR_ARRAY_();
	static jint GL_COLOR_BUFFER_BIT_();
	static jint GL_COLOR_LOGIC_OP_();
	static jint GL_COLOR_MATERIAL_();
	static jint GL_COMPRESSED_TEXTURE_FORMATS_();
	static jint GL_CONSTANT_ATTENUATION_();
	static jint GL_COPY_();
	static jint GL_COPY_INVERTED_();
	static jint GL_CULL_FACE_();
	static jint GL_CW_();
	static jint GL_DECAL_();
	static jint GL_DECR_();
	static jint GL_DEPTH_BITS_();
	static jint GL_DEPTH_BUFFER_BIT_();
	static jint GL_DEPTH_TEST_();
	static jint GL_DIFFUSE_();
	static jint GL_DITHER_();
	static jint GL_DONT_CARE_();
	static jint GL_DST_ALPHA_();
	static jint GL_DST_COLOR_();
	static jint GL_EMISSION_();
	static jint GL_EQUAL_();
	static jint GL_EQUIV_();
	static jint GL_EXP_();
	static jint GL_EXP2_();
	static jint GL_EXTENSIONS_();
	static jint GL_FALSE_();
	static jint GL_FASTEST_();
	static jint GL_FIXED_();
	static jint GL_FLAT_();
	static jint GL_FLOAT_();
	static jint GL_FOG_();
	static jint GL_FOG_COLOR_();
	static jint GL_FOG_DENSITY_();
	static jint GL_FOG_END_();
	static jint GL_FOG_HINT_();
	static jint GL_FOG_MODE_();
	static jint GL_FOG_START_();
	static jint GL_FRONT_();
	static jint GL_FRONT_AND_BACK_();
	static jint GL_GEQUAL_();
	static jint GL_GREATER_();
	static jint GL_GREEN_BITS_();
	static jint GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES_();
	static jint GL_IMPLEMENTATION_COLOR_READ_TYPE_OES_();
	static jint GL_INCR_();
	static jint GL_INVALID_ENUM_();
	static jint GL_INVALID_OPERATION_();
	static jint GL_INVALID_VALUE_();
	static jint GL_INVERT_();
	static jint GL_KEEP_();
	static jint GL_LEQUAL_();
	static jint GL_LESS_();
	static jint GL_LIGHT0_();
	static jint GL_LIGHT1_();
	static jint GL_LIGHT2_();
	static jint GL_LIGHT3_();
	static jint GL_LIGHT4_();
	static jint GL_LIGHT5_();
	static jint GL_LIGHT6_();
	static jint GL_LIGHT7_();
	static jint GL_LIGHTING_();
	static jint GL_LIGHT_MODEL_AMBIENT_();
	static jint GL_LIGHT_MODEL_TWO_SIDE_();
	static jint GL_LINEAR_();
	static jint GL_LINEAR_ATTENUATION_();
	static jint GL_LINEAR_MIPMAP_LINEAR_();
	static jint GL_LINEAR_MIPMAP_NEAREST_();
	static jint GL_LINES_();
	static jint GL_LINE_LOOP_();
	static jint GL_LINE_SMOOTH_();
	static jint GL_LINE_SMOOTH_HINT_();
	static jint GL_LINE_STRIP_();
	static jint GL_LUMINANCE_();
	static jint GL_LUMINANCE_ALPHA_();
	static jint GL_MAX_ELEMENTS_INDICES_();
	static jint GL_MAX_ELEMENTS_VERTICES_();
	static jint GL_MAX_LIGHTS_();
	static jint GL_MAX_MODELVIEW_STACK_DEPTH_();
	static jint GL_MAX_PROJECTION_STACK_DEPTH_();
	static jint GL_MAX_TEXTURE_SIZE_();
	static jint GL_MAX_TEXTURE_STACK_DEPTH_();
	static jint GL_MAX_TEXTURE_UNITS_();
	static jint GL_MAX_VIEWPORT_DIMS_();
	static jint GL_MODELVIEW_();
	static jint GL_MODULATE_();
	static jint GL_MULTISAMPLE_();
	static jint GL_NAND_();
	static jint GL_NEAREST_();
	static jint GL_NEAREST_MIPMAP_LINEAR_();
	static jint GL_NEAREST_MIPMAP_NEAREST_();
	static jint GL_NEVER_();
	static jint GL_NICEST_();
	static jint GL_NOOP_();
	static jint GL_NOR_();
	static jint GL_NORMALIZE_();
	static jint GL_NORMAL_ARRAY_();
	static jint GL_NOTEQUAL_();
	static jint GL_NO_ERROR_();
	static jint GL_NUM_COMPRESSED_TEXTURE_FORMATS_();
	static jint GL_ONE_();
	static jint GL_ONE_MINUS_DST_ALPHA_();
	static jint GL_ONE_MINUS_DST_COLOR_();
	static jint GL_ONE_MINUS_SRC_ALPHA_();
	static jint GL_ONE_MINUS_SRC_COLOR_();
	static jint GL_OR_();
	static jint GL_OR_INVERTED_();
	static jint GL_OR_REVERSE_();
	static jint GL_OUT_OF_MEMORY_();
	static jint GL_PACK_ALIGNMENT_();
	static jint GL_PALETTE4_R5_G6_B5_OES_();
	static jint GL_PALETTE4_RGB5_A1_OES_();
	static jint GL_PALETTE4_RGB8_OES_();
	static jint GL_PALETTE4_RGBA4_OES_();
	static jint GL_PALETTE4_RGBA8_OES_();
	static jint GL_PALETTE8_R5_G6_B5_OES_();
	static jint GL_PALETTE8_RGB5_A1_OES_();
	static jint GL_PALETTE8_RGB8_OES_();
	static jint GL_PALETTE8_RGBA4_OES_();
	static jint GL_PALETTE8_RGBA8_OES_();
	static jint GL_PERSPECTIVE_CORRECTION_HINT_();
	static jint GL_POINTS_();
	static jint GL_POINT_FADE_THRESHOLD_SIZE_();
	static jint GL_POINT_SIZE_();
	static jint GL_POINT_SMOOTH_();
	static jint GL_POINT_SMOOTH_HINT_();
	static jint GL_POLYGON_OFFSET_FILL_();
	static jint GL_POLYGON_SMOOTH_HINT_();
	static jint GL_POSITION_();
	static jint GL_PROJECTION_();
	static jint GL_QUADRATIC_ATTENUATION_();
	static jint GL_RED_BITS_();
	static jint GL_RENDERER_();
	static jint GL_REPEAT_();
	static jint GL_REPLACE_();
	static jint GL_RESCALE_NORMAL_();
	static jint GL_RGB_();
	static jint GL_RGBA_();
	static jint GL_SAMPLE_ALPHA_TO_COVERAGE_();
	static jint GL_SAMPLE_ALPHA_TO_ONE_();
	static jint GL_SAMPLE_COVERAGE_();
	static jint GL_SCISSOR_TEST_();
	static jint GL_SET_();
	static jint GL_SHININESS_();
	static jint GL_SHORT_();
	static jint GL_SMOOTH_();
	static jint GL_SMOOTH_LINE_WIDTH_RANGE_();
	static jint GL_SMOOTH_POINT_SIZE_RANGE_();
	static jint GL_SPECULAR_();
	static jint GL_SPOT_CUTOFF_();
	static jint GL_SPOT_DIRECTION_();
	static jint GL_SPOT_EXPONENT_();
	static jint GL_SRC_ALPHA_();
	static jint GL_SRC_ALPHA_SATURATE_();
	static jint GL_SRC_COLOR_();
	static jint GL_STACK_OVERFLOW_();
	static jint GL_STACK_UNDERFLOW_();
	static jint GL_STENCIL_BITS_();
	static jint GL_STENCIL_BUFFER_BIT_();
	static jint GL_STENCIL_TEST_();
	static jint GL_SUBPIXEL_BITS_();
	static jint GL_TEXTURE_();
	static jint GL_TEXTURE0_();
	static jint GL_TEXTURE1_();
	static jint GL_TEXTURE10_();
	static jint GL_TEXTURE11_();
	static jint GL_TEXTURE12_();
	static jint GL_TEXTURE13_();
	static jint GL_TEXTURE14_();
	static jint GL_TEXTURE15_();
	static jint GL_TEXTURE16_();
	static jint GL_TEXTURE17_();
	static jint GL_TEXTURE18_();
	static jint GL_TEXTURE19_();
	static jint GL_TEXTURE2_();
	static jint GL_TEXTURE20_();
	static jint GL_TEXTURE21_();
	static jint GL_TEXTURE22_();
	static jint GL_TEXTURE23_();
	static jint GL_TEXTURE24_();
	static jint GL_TEXTURE25_();
	static jint GL_TEXTURE26_();
	static jint GL_TEXTURE27_();
	static jint GL_TEXTURE28_();
	static jint GL_TEXTURE29_();
	static jint GL_TEXTURE3_();
	static jint GL_TEXTURE30_();
	static jint GL_TEXTURE31_();
	static jint GL_TEXTURE4_();
	static jint GL_TEXTURE5_();
	static jint GL_TEXTURE6_();
	static jint GL_TEXTURE7_();
	static jint GL_TEXTURE8_();
	static jint GL_TEXTURE9_();
	static jint GL_TEXTURE_2D_();
	static jint GL_TEXTURE_COORD_ARRAY_();
	static jint GL_TEXTURE_ENV_();
	static jint GL_TEXTURE_ENV_COLOR_();
	static jint GL_TEXTURE_ENV_MODE_();
	static jint GL_TEXTURE_MAG_FILTER_();
	static jint GL_TEXTURE_MIN_FILTER_();
	static jint GL_TEXTURE_WRAP_S_();
	static jint GL_TEXTURE_WRAP_T_();
	static jint GL_TRIANGLES_();
	static jint GL_TRIANGLE_FAN_();
	static jint GL_TRIANGLE_STRIP_();
	static jint GL_TRUE_();
	static jint GL_UNPACK_ALIGNMENT_();
	static jint GL_UNSIGNED_BYTE_();
	static jint GL_UNSIGNED_SHORT_();
	static jint GL_UNSIGNED_SHORT_4_4_4_4_();
	static jint GL_UNSIGNED_SHORT_5_5_5_1_();
	static jint GL_UNSIGNED_SHORT_5_6_5_();
	static jint GL_VENDOR_();
	static jint GL_VERSION_();
	static jint GL_VERTEX_ARRAY_();
	static jint GL_XOR_();
	static jint GL_ZERO_();

	void glActiveTexture(jint p1);
	void glAlphaFunc(jint p1, jfloat p2);
	void glAlphaFuncx(jint p1, jint p2);
	void glBindTexture(jint p1, jint p2);
	void glBlendFunc(jint p1, jint p2);
	void glClear(jint p1);
	void glClearColor(jfloat p1, jfloat p2, jfloat p3, jfloat p4);
	void glClearColorx(jint p1, jint p2, jint p3, jint p4);
	void glClearDepthf(jfloat p1);
	void glClearDepthx(jint p1);
	void glClearStencil(jint p1);
	void glClientActiveTexture(jint p1);
	void glColor4f(jfloat p1, jfloat p2, jfloat p3, jfloat p4);
	void glColor4x(jint p1, jint p2, jint p3, jint p4);
	void glColorMask(jboolean p1, jboolean p2, jboolean p3, jboolean p4);
	void glColorPointer(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4);
	void glCompressedTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, ref<java::nio::Buffer> p8);
	void glCompressedTexSubImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, ref<java::nio::Buffer> p9);
	void glCopyTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8);
	void glCopyTexSubImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8);
	void glCullFace(jint p1);
	void glDeleteTextures(jint p1, ref<link::java::array<jint>> p2, jint p3);
	void glDeleteTextures(jint p1, ref<java::nio::IntBuffer> p2);
	void glDepthFunc(jint p1);
	void glDepthMask(jboolean p1);
	void glDepthRangef(jfloat p1, jfloat p2);
	void glDepthRangex(jint p1, jint p2);
	void glDisable(jint p1);
	void glDisableClientState(jint p1);
	void glDrawArrays(jint p1, jint p2, jint p3);
	void glDrawElements(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4);
	void glEnable(jint p1);
	void glEnableClientState(jint p1);
	void glFinish();
	void glFlush();
	void glFogf(jint p1, jfloat p2);
	void glFogfv(jint p1, ref<link::java::array<jfloat>> p2, jint p3);
	void glFogfv(jint p1, ref<java::nio::FloatBuffer> p2);
	void glFogx(jint p1, jint p2);
	void glFogxv(jint p1, ref<link::java::array<jint>> p2, jint p3);
	void glFogxv(jint p1, ref<java::nio::IntBuffer> p2);
	void glFrontFace(jint p1);
	void glFrustumf(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6);
	void glFrustumx(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6);
	void glGenTextures(jint p1, ref<link::java::array<jint>> p2, jint p3);
	void glGenTextures(jint p1, ref<java::nio::IntBuffer> p2);
	jint glGetError();
	void glGetIntegerv(jint p1, ref<link::java::array<jint>> p2, jint p3);
	void glGetIntegerv(jint p1, ref<java::nio::IntBuffer> p2);
	ref<java::lang::String> glGetString(jint p1);
	void glHint(jint p1, jint p2);
	void glLightModelf(jint p1, jfloat p2);
	void glLightModelfv(jint p1, ref<link::java::array<jfloat>> p2, jint p3);
	void glLightModelfv(jint p1, ref<java::nio::FloatBuffer> p2);
	void glLightModelx(jint p1, jint p2);
	void glLightModelxv(jint p1, ref<link::java::array<jint>> p2, jint p3);
	void glLightModelxv(jint p1, ref<java::nio::IntBuffer> p2);
	void glLightf(jint p1, jint p2, jfloat p3);
	void glLightfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4);
	void glLightfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3);
	void glLightx(jint p1, jint p2, jint p3);
	void glLightxv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	void glLightxv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	void glLineWidth(jfloat p1);
	void glLineWidthx(jint p1);
	void glLoadIdentity();
	void glLoadMatrixf(ref<link::java::array<jfloat>> p1, jint p2);
	void glLoadMatrixf(ref<java::nio::FloatBuffer> p1);
	void glLoadMatrixx(ref<link::java::array<jint>> p1, jint p2);
	void glLoadMatrixx(ref<java::nio::IntBuffer> p1);
	void glLogicOp(jint p1);
	void glMaterialf(jint p1, jint p2, jfloat p3);
	void glMaterialfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4);
	void glMaterialfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3);
	void glMaterialx(jint p1, jint p2, jint p3);
	void glMaterialxv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	void glMaterialxv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	void glMatrixMode(jint p1);
	void glMultMatrixf(ref<link::java::array<jfloat>> p1, jint p2);
	void glMultMatrixf(ref<java::nio::FloatBuffer> p1);
	void glMultMatrixx(ref<link::java::array<jint>> p1, jint p2);
	void glMultMatrixx(ref<java::nio::IntBuffer> p1);
	void glMultiTexCoord4f(jint p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5);
	void glMultiTexCoord4x(jint p1, jint p2, jint p3, jint p4, jint p5);
	void glNormal3f(jfloat p1, jfloat p2, jfloat p3);
	void glNormal3x(jint p1, jint p2, jint p3);
	void glNormalPointer(jint p1, jint p2, ref<java::nio::Buffer> p3);
	void glOrthof(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6);
	void glOrthox(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6);
	void glPixelStorei(jint p1, jint p2);
	void glPointSize(jfloat p1);
	void glPointSizex(jint p1);
	void glPolygonOffset(jfloat p1, jfloat p2);
	void glPolygonOffsetx(jint p1, jint p2);
	void glPopMatrix();
	void glPushMatrix();
	void glReadPixels(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, ref<java::nio::Buffer> p7);
	void glRotatef(jfloat p1, jfloat p2, jfloat p3, jfloat p4);
	void glRotatex(jint p1, jint p2, jint p3, jint p4);
	void glSampleCoverage(jfloat p1, jboolean p2);
	void glSampleCoveragex(jint p1, jboolean p2);
	void glScalef(jfloat p1, jfloat p2, jfloat p3);
	void glScalex(jint p1, jint p2, jint p3);
	void glScissor(jint p1, jint p2, jint p3, jint p4);
	void glShadeModel(jint p1);
	void glStencilFunc(jint p1, jint p2, jint p3);
	void glStencilMask(jint p1);
	void glStencilOp(jint p1, jint p2, jint p3);
	void glTexCoordPointer(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4);
	void glTexEnvf(jint p1, jint p2, jfloat p3);
	void glTexEnvfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4);
	void glTexEnvfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3);
	void glTexEnvx(jint p1, jint p2, jint p3);
	void glTexEnvxv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	void glTexEnvxv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	void glTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, ref<java::nio::Buffer> p9);
	void glTexParameterf(jint p1, jint p2, jfloat p3);
	void glTexParameterx(jint p1, jint p2, jint p3);
	void glTexSubImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, ref<java::nio::Buffer> p9);
	void glTranslatef(jfloat p1, jfloat p2, jfloat p3);
	void glTranslatex(jint p1, jint p2, jint p3);
	void glVertexPointer(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4);
	void glViewport(jint p1, jint p2, jint p3, jint p4);

protected:

	GL10(handle_type h) : base_(h) {}

};

} // namespace javax::microedition::khronos::opengles
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/nio/FloatBuffer.h>
#include <scapix/java_api/java/nio/IntBuffer.h>

namespace scapix::java_api {
namespace javax::microedition::khronos::opengles {

inline jint GL10::GL_ADD_() { return get_static_field<SCAPIX_META_STRING("GL_ADD"), jint>(); }
inline jint GL10::GL_ALIASED_LINE_WIDTH_RANGE_() { return get_static_field<SCAPIX_META_STRING("GL_ALIASED_LINE_WIDTH_RANGE"), jint>(); }
inline jint GL10::GL_ALIASED_POINT_SIZE_RANGE_() { return get_static_field<SCAPIX_META_STRING("GL_ALIASED_POINT_SIZE_RANGE"), jint>(); }
inline jint GL10::GL_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_ALPHA"), jint>(); }
inline jint GL10::GL_ALPHA_BITS_() { return get_static_field<SCAPIX_META_STRING("GL_ALPHA_BITS"), jint>(); }
inline jint GL10::GL_ALPHA_TEST_() { return get_static_field<SCAPIX_META_STRING("GL_ALPHA_TEST"), jint>(); }
inline jint GL10::GL_ALWAYS_() { return get_static_field<SCAPIX_META_STRING("GL_ALWAYS"), jint>(); }
inline jint GL10::GL_AMBIENT_() { return get_static_field<SCAPIX_META_STRING("GL_AMBIENT"), jint>(); }
inline jint GL10::GL_AMBIENT_AND_DIFFUSE_() { return get_static_field<SCAPIX_META_STRING("GL_AMBIENT_AND_DIFFUSE"), jint>(); }
inline jint GL10::GL_AND_() { return get_static_field<SCAPIX_META_STRING("GL_AND"), jint>(); }
inline jint GL10::GL_AND_INVERTED_() { return get_static_field<SCAPIX_META_STRING("GL_AND_INVERTED"), jint>(); }
inline jint GL10::GL_AND_REVERSE_() { return get_static_field<SCAPIX_META_STRING("GL_AND_REVERSE"), jint>(); }
inline jint GL10::GL_BACK_() { return get_static_field<SCAPIX_META_STRING("GL_BACK"), jint>(); }
inline jint GL10::GL_BLEND_() { return get_static_field<SCAPIX_META_STRING("GL_BLEND"), jint>(); }
inline jint GL10::GL_BLUE_BITS_() { return get_static_field<SCAPIX_META_STRING("GL_BLUE_BITS"), jint>(); }
inline jint GL10::GL_BYTE_() { return get_static_field<SCAPIX_META_STRING("GL_BYTE"), jint>(); }
inline jint GL10::GL_CCW_() { return get_static_field<SCAPIX_META_STRING("GL_CCW"), jint>(); }
inline jint GL10::GL_CLAMP_TO_EDGE_() { return get_static_field<SCAPIX_META_STRING("GL_CLAMP_TO_EDGE"), jint>(); }
inline jint GL10::GL_CLEAR_() { return get_static_field<SCAPIX_META_STRING("GL_CLEAR"), jint>(); }
inline jint GL10::GL_COLOR_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_COLOR_ARRAY"), jint>(); }
inline jint GL10::GL_COLOR_BUFFER_BIT_() { return get_static_field<SCAPIX_META_STRING("GL_COLOR_BUFFER_BIT"), jint>(); }
inline jint GL10::GL_COLOR_LOGIC_OP_() { return get_static_field<SCAPIX_META_STRING("GL_COLOR_LOGIC_OP"), jint>(); }
inline jint GL10::GL_COLOR_MATERIAL_() { return get_static_field<SCAPIX_META_STRING("GL_COLOR_MATERIAL"), jint>(); }
inline jint GL10::GL_COMPRESSED_TEXTURE_FORMATS_() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_TEXTURE_FORMATS"), jint>(); }
inline jint GL10::GL_CONSTANT_ATTENUATION_() { return get_static_field<SCAPIX_META_STRING("GL_CONSTANT_ATTENUATION"), jint>(); }
inline jint GL10::GL_COPY_() { return get_static_field<SCAPIX_META_STRING("GL_COPY"), jint>(); }
inline jint GL10::GL_COPY_INVERTED_() { return get_static_field<SCAPIX_META_STRING("GL_COPY_INVERTED"), jint>(); }
inline jint GL10::GL_CULL_FACE_() { return get_static_field<SCAPIX_META_STRING("GL_CULL_FACE"), jint>(); }
inline jint GL10::GL_CW_() { return get_static_field<SCAPIX_META_STRING("GL_CW"), jint>(); }
inline jint GL10::GL_DECAL_() { return get_static_field<SCAPIX_META_STRING("GL_DECAL"), jint>(); }
inline jint GL10::GL_DECR_() { return get_static_field<SCAPIX_META_STRING("GL_DECR"), jint>(); }
inline jint GL10::GL_DEPTH_BITS_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_BITS"), jint>(); }
inline jint GL10::GL_DEPTH_BUFFER_BIT_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_BUFFER_BIT"), jint>(); }
inline jint GL10::GL_DEPTH_TEST_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_TEST"), jint>(); }
inline jint GL10::GL_DIFFUSE_() { return get_static_field<SCAPIX_META_STRING("GL_DIFFUSE"), jint>(); }
inline jint GL10::GL_DITHER_() { return get_static_field<SCAPIX_META_STRING("GL_DITHER"), jint>(); }
inline jint GL10::GL_DONT_CARE_() { return get_static_field<SCAPIX_META_STRING("GL_DONT_CARE"), jint>(); }
inline jint GL10::GL_DST_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_DST_ALPHA"), jint>(); }
inline jint GL10::GL_DST_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_DST_COLOR"), jint>(); }
inline jint GL10::GL_EMISSION_() { return get_static_field<SCAPIX_META_STRING("GL_EMISSION"), jint>(); }
inline jint GL10::GL_EQUAL_() { return get_static_field<SCAPIX_META_STRING("GL_EQUAL"), jint>(); }
inline jint GL10::GL_EQUIV_() { return get_static_field<SCAPIX_META_STRING("GL_EQUIV"), jint>(); }
inline jint GL10::GL_EXP_() { return get_static_field<SCAPIX_META_STRING("GL_EXP"), jint>(); }
inline jint GL10::GL_EXP2_() { return get_static_field<SCAPIX_META_STRING("GL_EXP2"), jint>(); }
inline jint GL10::GL_EXTENSIONS_() { return get_static_field<SCAPIX_META_STRING("GL_EXTENSIONS"), jint>(); }
inline jint GL10::GL_FALSE_() { return get_static_field<SCAPIX_META_STRING("GL_FALSE"), jint>(); }
inline jint GL10::GL_FASTEST_() { return get_static_field<SCAPIX_META_STRING("GL_FASTEST"), jint>(); }
inline jint GL10::GL_FIXED_() { return get_static_field<SCAPIX_META_STRING("GL_FIXED"), jint>(); }
inline jint GL10::GL_FLAT_() { return get_static_field<SCAPIX_META_STRING("GL_FLAT"), jint>(); }
inline jint GL10::GL_FLOAT_() { return get_static_field<SCAPIX_META_STRING("GL_FLOAT"), jint>(); }
inline jint GL10::GL_FOG_() { return get_static_field<SCAPIX_META_STRING("GL_FOG"), jint>(); }
inline jint GL10::GL_FOG_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_FOG_COLOR"), jint>(); }
inline jint GL10::GL_FOG_DENSITY_() { return get_static_field<SCAPIX_META_STRING("GL_FOG_DENSITY"), jint>(); }
inline jint GL10::GL_FOG_END_() { return get_static_field<SCAPIX_META_STRING("GL_FOG_END"), jint>(); }
inline jint GL10::GL_FOG_HINT_() { return get_static_field<SCAPIX_META_STRING("GL_FOG_HINT"), jint>(); }
inline jint GL10::GL_FOG_MODE_() { return get_static_field<SCAPIX_META_STRING("GL_FOG_MODE"), jint>(); }
inline jint GL10::GL_FOG_START_() { return get_static_field<SCAPIX_META_STRING("GL_FOG_START"), jint>(); }
inline jint GL10::GL_FRONT_() { return get_static_field<SCAPIX_META_STRING("GL_FRONT"), jint>(); }
inline jint GL10::GL_FRONT_AND_BACK_() { return get_static_field<SCAPIX_META_STRING("GL_FRONT_AND_BACK"), jint>(); }
inline jint GL10::GL_GEQUAL_() { return get_static_field<SCAPIX_META_STRING("GL_GEQUAL"), jint>(); }
inline jint GL10::GL_GREATER_() { return get_static_field<SCAPIX_META_STRING("GL_GREATER"), jint>(); }
inline jint GL10::GL_GREEN_BITS_() { return get_static_field<SCAPIX_META_STRING("GL_GREEN_BITS"), jint>(); }
inline jint GL10::GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES_() { return get_static_field<SCAPIX_META_STRING("GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES"), jint>(); }
inline jint GL10::GL_IMPLEMENTATION_COLOR_READ_TYPE_OES_() { return get_static_field<SCAPIX_META_STRING("GL_IMPLEMENTATION_COLOR_READ_TYPE_OES"), jint>(); }
inline jint GL10::GL_INCR_() { return get_static_field<SCAPIX_META_STRING("GL_INCR"), jint>(); }
inline jint GL10::GL_INVALID_ENUM_() { return get_static_field<SCAPIX_META_STRING("GL_INVALID_ENUM"), jint>(); }
inline jint GL10::GL_INVALID_OPERATION_() { return get_static_field<SCAPIX_META_STRING("GL_INVALID_OPERATION"), jint>(); }
inline jint GL10::GL_INVALID_VALUE_() { return get_static_field<SCAPIX_META_STRING("GL_INVALID_VALUE"), jint>(); }
inline jint GL10::GL_INVERT_() { return get_static_field<SCAPIX_META_STRING("GL_INVERT"), jint>(); }
inline jint GL10::GL_KEEP_() { return get_static_field<SCAPIX_META_STRING("GL_KEEP"), jint>(); }
inline jint GL10::GL_LEQUAL_() { return get_static_field<SCAPIX_META_STRING("GL_LEQUAL"), jint>(); }
inline jint GL10::GL_LESS_() { return get_static_field<SCAPIX_META_STRING("GL_LESS"), jint>(); }
inline jint GL10::GL_LIGHT0_() { return get_static_field<SCAPIX_META_STRING("GL_LIGHT0"), jint>(); }
inline jint GL10::GL_LIGHT1_() { return get_static_field<SCAPIX_META_STRING("GL_LIGHT1"), jint>(); }
inline jint GL10::GL_LIGHT2_() { return get_static_field<SCAPIX_META_STRING("GL_LIGHT2"), jint>(); }
inline jint GL10::GL_LIGHT3_() { return get_static_field<SCAPIX_META_STRING("GL_LIGHT3"), jint>(); }
inline jint GL10::GL_LIGHT4_() { return get_static_field<SCAPIX_META_STRING("GL_LIGHT4"), jint>(); }
inline jint GL10::GL_LIGHT5_() { return get_static_field<SCAPIX_META_STRING("GL_LIGHT5"), jint>(); }
inline jint GL10::GL_LIGHT6_() { return get_static_field<SCAPIX_META_STRING("GL_LIGHT6"), jint>(); }
inline jint GL10::GL_LIGHT7_() { return get_static_field<SCAPIX_META_STRING("GL_LIGHT7"), jint>(); }
inline jint GL10::GL_LIGHTING_() { return get_static_field<SCAPIX_META_STRING("GL_LIGHTING"), jint>(); }
inline jint GL10::GL_LIGHT_MODEL_AMBIENT_() { return get_static_field<SCAPIX_META_STRING("GL_LIGHT_MODEL_AMBIENT"), jint>(); }
inline jint GL10::GL_LIGHT_MODEL_TWO_SIDE_() { return get_static_field<SCAPIX_META_STRING("GL_LIGHT_MODEL_TWO_SIDE"), jint>(); }
inline jint GL10::GL_LINEAR_() { return get_static_field<SCAPIX_META_STRING("GL_LINEAR"), jint>(); }
inline jint GL10::GL_LINEAR_ATTENUATION_() { return get_static_field<SCAPIX_META_STRING("GL_LINEAR_ATTENUATION"), jint>(); }
inline jint GL10::GL_LINEAR_MIPMAP_LINEAR_() { return get_static_field<SCAPIX_META_STRING("GL_LINEAR_MIPMAP_LINEAR"), jint>(); }
inline jint GL10::GL_LINEAR_MIPMAP_NEAREST_() { return get_static_field<SCAPIX_META_STRING("GL_LINEAR_MIPMAP_NEAREST"), jint>(); }
inline jint GL10::GL_LINES_() { return get_static_field<SCAPIX_META_STRING("GL_LINES"), jint>(); }
inline jint GL10::GL_LINE_LOOP_() { return get_static_field<SCAPIX_META_STRING("GL_LINE_LOOP"), jint>(); }
inline jint GL10::GL_LINE_SMOOTH_() { return get_static_field<SCAPIX_META_STRING("GL_LINE_SMOOTH"), jint>(); }
inline jint GL10::GL_LINE_SMOOTH_HINT_() { return get_static_field<SCAPIX_META_STRING("GL_LINE_SMOOTH_HINT"), jint>(); }
inline jint GL10::GL_LINE_STRIP_() { return get_static_field<SCAPIX_META_STRING("GL_LINE_STRIP"), jint>(); }
inline jint GL10::GL_LUMINANCE_() { return get_static_field<SCAPIX_META_STRING("GL_LUMINANCE"), jint>(); }
inline jint GL10::GL_LUMINANCE_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_LUMINANCE_ALPHA"), jint>(); }
inline jint GL10::GL_MAX_ELEMENTS_INDICES_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_ELEMENTS_INDICES"), jint>(); }
inline jint GL10::GL_MAX_ELEMENTS_VERTICES_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_ELEMENTS_VERTICES"), jint>(); }
inline jint GL10::GL_MAX_LIGHTS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_LIGHTS"), jint>(); }
inline jint GL10::GL_MAX_MODELVIEW_STACK_DEPTH_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_MODELVIEW_STACK_DEPTH"), jint>(); }
inline jint GL10::GL_MAX_PROJECTION_STACK_DEPTH_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_PROJECTION_STACK_DEPTH"), jint>(); }
inline jint GL10::GL_MAX_TEXTURE_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TEXTURE_SIZE"), jint>(); }
inline jint GL10::GL_MAX_TEXTURE_STACK_DEPTH_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TEXTURE_STACK_DEPTH"), jint>(); }
inline jint GL10::GL_MAX_TEXTURE_UNITS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TEXTURE_UNITS"), jint>(); }
inline jint GL10::GL_MAX_VIEWPORT_DIMS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_VIEWPORT_DIMS"), jint>(); }
inline jint GL10::GL_MODELVIEW_() { return get_static_field<SCAPIX_META_STRING("GL_MODELVIEW"), jint>(); }
inline jint GL10::GL_MODULATE_() { return get_static_field<SCAPIX_META_STRING("GL_MODULATE"), jint>(); }
inline jint GL10::GL_MULTISAMPLE_() { return get_static_field<SCAPIX_META_STRING("GL_MULTISAMPLE"), jint>(); }
inline jint GL10::GL_NAND_() { return get_static_field<SCAPIX_META_STRING("GL_NAND"), jint>(); }
inline jint GL10::GL_NEAREST_() { return get_static_field<SCAPIX_META_STRING("GL_NEAREST"), jint>(); }
inline jint GL10::GL_NEAREST_MIPMAP_LINEAR_() { return get_static_field<SCAPIX_META_STRING("GL_NEAREST_MIPMAP_LINEAR"), jint>(); }
inline jint GL10::GL_NEAREST_MIPMAP_NEAREST_() { return get_static_field<SCAPIX_META_STRING("GL_NEAREST_MIPMAP_NEAREST"), jint>(); }
inline jint GL10::GL_NEVER_() { return get_static_field<SCAPIX_META_STRING("GL_NEVER"), jint>(); }
inline jint GL10::GL_NICEST_() { return get_static_field<SCAPIX_META_STRING("GL_NICEST"), jint>(); }
inline jint GL10::GL_NOOP_() { return get_static_field<SCAPIX_META_STRING("GL_NOOP"), jint>(); }
inline jint GL10::GL_NOR_() { return get_static_field<SCAPIX_META_STRING("GL_NOR"), jint>(); }
inline jint GL10::GL_NORMALIZE_() { return get_static_field<SCAPIX_META_STRING("GL_NORMALIZE"), jint>(); }
inline jint GL10::GL_NORMAL_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_NORMAL_ARRAY"), jint>(); }
inline jint GL10::GL_NOTEQUAL_() { return get_static_field<SCAPIX_META_STRING("GL_NOTEQUAL"), jint>(); }
inline jint GL10::GL_NO_ERROR_() { return get_static_field<SCAPIX_META_STRING("GL_NO_ERROR"), jint>(); }
inline jint GL10::GL_NUM_COMPRESSED_TEXTURE_FORMATS_() { return get_static_field<SCAPIX_META_STRING("GL_NUM_COMPRESSED_TEXTURE_FORMATS"), jint>(); }
inline jint GL10::GL_ONE_() { return get_static_field<SCAPIX_META_STRING("GL_ONE"), jint>(); }
inline jint GL10::GL_ONE_MINUS_DST_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_ONE_MINUS_DST_ALPHA"), jint>(); }
inline jint GL10::GL_ONE_MINUS_DST_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_ONE_MINUS_DST_COLOR"), jint>(); }
inline jint GL10::GL_ONE_MINUS_SRC_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_ONE_MINUS_SRC_ALPHA"), jint>(); }
inline jint GL10::GL_ONE_MINUS_SRC_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_ONE_MINUS_SRC_COLOR"), jint>(); }
inline jint GL10::GL_OR_() { return get_static_field<SCAPIX_META_STRING("GL_OR"), jint>(); }
inline jint GL10::GL_OR_INVERTED_() { return get_static_field<SCAPIX_META_STRING("GL_OR_INVERTED"), jint>(); }
inline jint GL10::GL_OR_REVERSE_() { return get_static_field<SCAPIX_META_STRING("GL_OR_REVERSE"), jint>(); }
inline jint GL10::GL_OUT_OF_MEMORY_() { return get_static_field<SCAPIX_META_STRING("GL_OUT_OF_MEMORY"), jint>(); }
inline jint GL10::GL_PACK_ALIGNMENT_() { return get_static_field<SCAPIX_META_STRING("GL_PACK_ALIGNMENT"), jint>(); }
inline jint GL10::GL_PALETTE4_R5_G6_B5_OES_() { return get_static_field<SCAPIX_META_STRING("GL_PALETTE4_R5_G6_B5_OES"), jint>(); }
inline jint GL10::GL_PALETTE4_RGB5_A1_OES_() { return get_static_field<SCAPIX_META_STRING("GL_PALETTE4_RGB5_A1_OES"), jint>(); }
inline jint GL10::GL_PALETTE4_RGB8_OES_() { return get_static_field<SCAPIX_META_STRING("GL_PALETTE4_RGB8_OES"), jint>(); }
inline jint GL10::GL_PALETTE4_RGBA4_OES_() { return get_static_field<SCAPIX_META_STRING("GL_PALETTE4_RGBA4_OES"), jint>(); }
inline jint GL10::GL_PALETTE4_RGBA8_OES_() { return get_static_field<SCAPIX_META_STRING("GL_PALETTE4_RGBA8_OES"), jint>(); }
inline jint GL10::GL_PALETTE8_R5_G6_B5_OES_() { return get_static_field<SCAPIX_META_STRING("GL_PALETTE8_R5_G6_B5_OES"), jint>(); }
inline jint GL10::GL_PALETTE8_RGB5_A1_OES_() { return get_static_field<SCAPIX_META_STRING("GL_PALETTE8_RGB5_A1_OES"), jint>(); }
inline jint GL10::GL_PALETTE8_RGB8_OES_() { return get_static_field<SCAPIX_META_STRING("GL_PALETTE8_RGB8_OES"), jint>(); }
inline jint GL10::GL_PALETTE8_RGBA4_OES_() { return get_static_field<SCAPIX_META_STRING("GL_PALETTE8_RGBA4_OES"), jint>(); }
inline jint GL10::GL_PALETTE8_RGBA8_OES_() { return get_static_field<SCAPIX_META_STRING("GL_PALETTE8_RGBA8_OES"), jint>(); }
inline jint GL10::GL_PERSPECTIVE_CORRECTION_HINT_() { return get_static_field<SCAPIX_META_STRING("GL_PERSPECTIVE_CORRECTION_HINT"), jint>(); }
inline jint GL10::GL_POINTS_() { return get_static_field<SCAPIX_META_STRING("GL_POINTS"), jint>(); }
inline jint GL10::GL_POINT_FADE_THRESHOLD_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_POINT_FADE_THRESHOLD_SIZE"), jint>(); }
inline jint GL10::GL_POINT_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_POINT_SIZE"), jint>(); }
inline jint GL10::GL_POINT_SMOOTH_() { return get_static_field<SCAPIX_META_STRING("GL_POINT_SMOOTH"), jint>(); }
inline jint GL10::GL_POINT_SMOOTH_HINT_() { return get_static_field<SCAPIX_META_STRING("GL_POINT_SMOOTH_HINT"), jint>(); }
inline jint GL10::GL_POLYGON_OFFSET_FILL_() { return get_static_field<SCAPIX_META_STRING("GL_POLYGON_OFFSET_FILL"), jint>(); }
inline jint GL10::GL_POLYGON_SMOOTH_HINT_() { return get_static_field<SCAPIX_META_STRING("GL_POLYGON_SMOOTH_HINT"), jint>(); }
inline jint GL10::GL_POSITION_() { return get_static_field<SCAPIX_META_STRING("GL_POSITION"), jint>(); }
inline jint GL10::GL_PROJECTION_() { return get_static_field<SCAPIX_META_STRING("GL_PROJECTION"), jint>(); }
inline jint GL10::GL_QUADRATIC_ATTENUATION_() { return get_static_field<SCAPIX_META_STRING("GL_QUADRATIC_ATTENUATION"), jint>(); }
inline jint GL10::GL_RED_BITS_() { return get_static_field<SCAPIX_META_STRING("GL_RED_BITS"), jint>(); }
inline jint GL10::GL_RENDERER_() { return get_static_field<SCAPIX_META_STRING("GL_RENDERER"), jint>(); }
inline jint GL10::GL_REPEAT_() { return get_static_field<SCAPIX_META_STRING("GL_REPEAT"), jint>(); }
inline jint GL10::GL_REPLACE_() { return get_static_field<SCAPIX_META_STRING("GL_REPLACE"), jint>(); }
inline jint GL10::GL_RESCALE_NORMAL_() { return get_static_field<SCAPIX_META_STRING("GL_RESCALE_NORMAL"), jint>(); }
inline jint GL10::GL_RGB_() { return get_static_field<SCAPIX_META_STRING("GL_RGB"), jint>(); }
inline jint GL10::GL_RGBA_() { return get_static_field<SCAPIX_META_STRING("GL_RGBA"), jint>(); }
inline jint GL10::GL_SAMPLE_ALPHA_TO_COVERAGE_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLE_ALPHA_TO_COVERAGE"), jint>(); }
inline jint GL10::GL_SAMPLE_ALPHA_TO_ONE_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLE_ALPHA_TO_ONE"), jint>(); }
inline jint GL10::GL_SAMPLE_COVERAGE_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLE_COVERAGE"), jint>(); }
inline jint GL10::GL_SCISSOR_TEST_() { return get_static_field<SCAPIX_META_STRING("GL_SCISSOR_TEST"), jint>(); }
inline jint GL10::GL_SET_() { return get_static_field<SCAPIX_META_STRING("GL_SET"), jint>(); }
inline jint GL10::GL_SHININESS_() { return get_static_field<SCAPIX_META_STRING("GL_SHININESS"), jint>(); }
inline jint GL10::GL_SHORT_() { return get_static_field<SCAPIX_META_STRING("GL_SHORT"), jint>(); }
inline jint GL10::GL_SMOOTH_() { return get_static_field<SCAPIX_META_STRING("GL_SMOOTH"), jint>(); }
inline jint GL10::GL_SMOOTH_LINE_WIDTH_RANGE_() { return get_static_field<SCAPIX_META_STRING("GL_SMOOTH_LINE_WIDTH_RANGE"), jint>(); }
inline jint GL10::GL_SMOOTH_POINT_SIZE_RANGE_() { return get_static_field<SCAPIX_META_STRING("GL_SMOOTH_POINT_SIZE_RANGE"), jint>(); }
inline jint GL10::GL_SPECULAR_() { return get_static_field<SCAPIX_META_STRING("GL_SPECULAR"), jint>(); }
inline jint GL10::GL_SPOT_CUTOFF_() { return get_static_field<SCAPIX_META_STRING("GL_SPOT_CUTOFF"), jint>(); }
inline jint GL10::GL_SPOT_DIRECTION_() { return get_static_field<SCAPIX_META_STRING("GL_SPOT_DIRECTION"), jint>(); }
inline jint GL10::GL_SPOT_EXPONENT_() { return get_static_field<SCAPIX_META_STRING("GL_SPOT_EXPONENT"), jint>(); }
inline jint GL10::GL_SRC_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_SRC_ALPHA"), jint>(); }
inline jint GL10::GL_SRC_ALPHA_SATURATE_() { return get_static_field<SCAPIX_META_STRING("GL_SRC_ALPHA_SATURATE"), jint>(); }
inline jint GL10::GL_SRC_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_SRC_COLOR"), jint>(); }
inline jint GL10::GL_STACK_OVERFLOW_() { return get_static_field<SCAPIX_META_STRING("GL_STACK_OVERFLOW"), jint>(); }
inline jint GL10::GL_STACK_UNDERFLOW_() { return get_static_field<SCAPIX_META_STRING("GL_STACK_UNDERFLOW"), jint>(); }
inline jint GL10::GL_STENCIL_BITS_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_BITS"), jint>(); }
inline jint GL10::GL_STENCIL_BUFFER_BIT_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_BUFFER_BIT"), jint>(); }
inline jint GL10::GL_STENCIL_TEST_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_TEST"), jint>(); }
inline jint GL10::GL_SUBPIXEL_BITS_() { return get_static_field<SCAPIX_META_STRING("GL_SUBPIXEL_BITS"), jint>(); }
inline jint GL10::GL_TEXTURE_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE"), jint>(); }
inline jint GL10::GL_TEXTURE0_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE0"), jint>(); }
inline jint GL10::GL_TEXTURE1_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE1"), jint>(); }
inline jint GL10::GL_TEXTURE10_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE10"), jint>(); }
inline jint GL10::GL_TEXTURE11_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE11"), jint>(); }
inline jint GL10::GL_TEXTURE12_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE12"), jint>(); }
inline jint GL10::GL_TEXTURE13_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE13"), jint>(); }
inline jint GL10::GL_TEXTURE14_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE14"), jint>(); }
inline jint GL10::GL_TEXTURE15_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE15"), jint>(); }
inline jint GL10::GL_TEXTURE16_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE16"), jint>(); }
inline jint GL10::GL_TEXTURE17_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE17"), jint>(); }
inline jint GL10::GL_TEXTURE18_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE18"), jint>(); }
inline jint GL10::GL_TEXTURE19_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE19"), jint>(); }
inline jint GL10::GL_TEXTURE2_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE2"), jint>(); }
inline jint GL10::GL_TEXTURE20_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE20"), jint>(); }
inline jint GL10::GL_TEXTURE21_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE21"), jint>(); }
inline jint GL10::GL_TEXTURE22_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE22"), jint>(); }
inline jint GL10::GL_TEXTURE23_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE23"), jint>(); }
inline jint GL10::GL_TEXTURE24_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE24"), jint>(); }
inline jint GL10::GL_TEXTURE25_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE25"), jint>(); }
inline jint GL10::GL_TEXTURE26_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE26"), jint>(); }
inline jint GL10::GL_TEXTURE27_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE27"), jint>(); }
inline jint GL10::GL_TEXTURE28_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE28"), jint>(); }
inline jint GL10::GL_TEXTURE29_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE29"), jint>(); }
inline jint GL10::GL_TEXTURE3_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE3"), jint>(); }
inline jint GL10::GL_TEXTURE30_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE30"), jint>(); }
inline jint GL10::GL_TEXTURE31_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE31"), jint>(); }
inline jint GL10::GL_TEXTURE4_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE4"), jint>(); }
inline jint GL10::GL_TEXTURE5_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE5"), jint>(); }
inline jint GL10::GL_TEXTURE6_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE6"), jint>(); }
inline jint GL10::GL_TEXTURE7_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE7"), jint>(); }
inline jint GL10::GL_TEXTURE8_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE8"), jint>(); }
inline jint GL10::GL_TEXTURE9_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE9"), jint>(); }
inline jint GL10::GL_TEXTURE_2D_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_2D"), jint>(); }
inline jint GL10::GL_TEXTURE_COORD_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_COORD_ARRAY"), jint>(); }
inline jint GL10::GL_TEXTURE_ENV_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_ENV"), jint>(); }
inline jint GL10::GL_TEXTURE_ENV_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_ENV_COLOR"), jint>(); }
inline jint GL10::GL_TEXTURE_ENV_MODE_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_ENV_MODE"), jint>(); }
inline jint GL10::GL_TEXTURE_MAG_FILTER_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_MAG_FILTER"), jint>(); }
inline jint GL10::GL_TEXTURE_MIN_FILTER_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_MIN_FILTER"), jint>(); }
inline jint GL10::GL_TEXTURE_WRAP_S_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_WRAP_S"), jint>(); }
inline jint GL10::GL_TEXTURE_WRAP_T_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_WRAP_T"), jint>(); }
inline jint GL10::GL_TRIANGLES_() { return get_static_field<SCAPIX_META_STRING("GL_TRIANGLES"), jint>(); }
inline jint GL10::GL_TRIANGLE_FAN_() { return get_static_field<SCAPIX_META_STRING("GL_TRIANGLE_FAN"), jint>(); }
inline jint GL10::GL_TRIANGLE_STRIP_() { return get_static_field<SCAPIX_META_STRING("GL_TRIANGLE_STRIP"), jint>(); }
inline jint GL10::GL_TRUE_() { return get_static_field<SCAPIX_META_STRING("GL_TRUE"), jint>(); }
inline jint GL10::GL_UNPACK_ALIGNMENT_() { return get_static_field<SCAPIX_META_STRING("GL_UNPACK_ALIGNMENT"), jint>(); }
inline jint GL10::GL_UNSIGNED_BYTE_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_BYTE"), jint>(); }
inline jint GL10::GL_UNSIGNED_SHORT_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_SHORT"), jint>(); }
inline jint GL10::GL_UNSIGNED_SHORT_4_4_4_4_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_SHORT_4_4_4_4"), jint>(); }
inline jint GL10::GL_UNSIGNED_SHORT_5_5_5_1_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_SHORT_5_5_5_1"), jint>(); }
inline jint GL10::GL_UNSIGNED_SHORT_5_6_5_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_SHORT_5_6_5"), jint>(); }
inline jint GL10::GL_VENDOR_() { return get_static_field<SCAPIX_META_STRING("GL_VENDOR"), jint>(); }
inline jint GL10::GL_VERSION_() { return get_static_field<SCAPIX_META_STRING("GL_VERSION"), jint>(); }
inline jint GL10::GL_VERTEX_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_VERTEX_ARRAY"), jint>(); }
inline jint GL10::GL_XOR_() { return get_static_field<SCAPIX_META_STRING("GL_XOR"), jint>(); }
inline jint GL10::GL_ZERO_() { return get_static_field<SCAPIX_META_STRING("GL_ZERO"), jint>(); }
inline void GL10::glActiveTexture(jint p1) { return call_method<SCAPIX_META_STRING("glActiveTexture"), void>(p1); }
inline void GL10::glAlphaFunc(jint p1, jfloat p2) { return call_method<SCAPIX_META_STRING("glAlphaFunc"), void>(p1, p2); }
inline void GL10::glAlphaFuncx(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("glAlphaFuncx"), void>(p1, p2); }
inline void GL10::glBindTexture(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("glBindTexture"), void>(p1, p2); }
inline void GL10::glBlendFunc(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("glBlendFunc"), void>(p1, p2); }
inline void GL10::glClear(jint p1) { return call_method<SCAPIX_META_STRING("glClear"), void>(p1); }
inline void GL10::glClearColor(jfloat p1, jfloat p2, jfloat p3, jfloat p4) { return call_method<SCAPIX_META_STRING("glClearColor"), void>(p1, p2, p3, p4); }
inline void GL10::glClearColorx(jint p1, jint p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("glClearColorx"), void>(p1, p2, p3, p4); }
inline void GL10::glClearDepthf(jfloat p1) { return call_method<SCAPIX_META_STRING("glClearDepthf"), void>(p1); }
inline void GL10::glClearDepthx(jint p1) { return call_method<SCAPIX_META_STRING("glClearDepthx"), void>(p1); }
inline void GL10::glClearStencil(jint p1) { return call_method<SCAPIX_META_STRING("glClearStencil"), void>(p1); }
inline void GL10::glClientActiveTexture(jint p1) { return call_method<SCAPIX_META_STRING("glClientActiveTexture"), void>(p1); }
inline void GL10::glColor4f(jfloat p1, jfloat p2, jfloat p3, jfloat p4) { return call_method<SCAPIX_META_STRING("glColor4f"), void>(p1, p2, p3, p4); }
inline void GL10::glColor4x(jint p1, jint p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("glColor4x"), void>(p1, p2, p3, p4); }
inline void GL10::glColorMask(jboolean p1, jboolean p2, jboolean p3, jboolean p4) { return call_method<SCAPIX_META_STRING("glColorMask"), void>(p1, p2, p3, p4); }
inline void GL10::glColorPointer(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4) { return call_method<SCAPIX_META_STRING("glColorPointer"), void>(p1, p2, p3, p4); }
inline void GL10::glCompressedTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, ref<java::nio::Buffer> p8) { return call_method<SCAPIX_META_STRING("glCompressedTexImage2D"), void>(p1, p2, p3, p4, p5, p6, p7, p8); }
inline void GL10::glCompressedTexSubImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, ref<java::nio::Buffer> p9) { return call_method<SCAPIX_META_STRING("glCompressedTexSubImage2D"), void>(p1, p2, p3, p4, p5, p6, p7, p8, p9); }
inline void GL10::glCopyTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8) { return call_method<SCAPIX_META_STRING("glCopyTexImage2D"), void>(p1, p2, p3, p4, p5, p6, p7, p8); }
inline void GL10::glCopyTexSubImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8) { return call_method<SCAPIX_META_STRING("glCopyTexSubImage2D"), void>(p1, p2, p3, p4, p5, p6, p7, p8); }
inline void GL10::glCullFace(jint p1) { return call_method<SCAPIX_META_STRING("glCullFace"), void>(p1); }
inline void GL10::glDeleteTextures(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_method<SCAPIX_META_STRING("glDeleteTextures"), void>(p1, p2, p3); }
inline void GL10::glDeleteTextures(jint p1, ref<java::nio::IntBuffer> p2) { return call_method<SCAPIX_META_STRING("glDeleteTextures"), void>(p1, p2); }
inline void GL10::glDepthFunc(jint p1) { return call_method<SCAPIX_META_STRING("glDepthFunc"), void>(p1); }
inline void GL10::glDepthMask(jboolean p1) { return call_method<SCAPIX_META_STRING("glDepthMask"), void>(p1); }
inline void GL10::glDepthRangef(jfloat p1, jfloat p2) { return call_method<SCAPIX_META_STRING("glDepthRangef"), void>(p1, p2); }
inline void GL10::glDepthRangex(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("glDepthRangex"), void>(p1, p2); }
inline void GL10::glDisable(jint p1) { return call_method<SCAPIX_META_STRING("glDisable"), void>(p1); }
inline void GL10::glDisableClientState(jint p1) { return call_method<SCAPIX_META_STRING("glDisableClientState"), void>(p1); }
inline void GL10::glDrawArrays(jint p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("glDrawArrays"), void>(p1, p2, p3); }
inline void GL10::glDrawElements(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4) { return call_method<SCAPIX_META_STRING("glDrawElements"), void>(p1, p2, p3, p4); }
inline void GL10::glEnable(jint p1) { return call_method<SCAPIX_META_STRING("glEnable"), void>(p1); }
inline void GL10::glEnableClientState(jint p1) { return call_method<SCAPIX_META_STRING("glEnableClientState"), void>(p1); }
inline void GL10::glFinish() { return call_method<SCAPIX_META_STRING("glFinish"), void>(); }
inline void GL10::glFlush() { return call_method<SCAPIX_META_STRING("glFlush"), void>(); }
inline void GL10::glFogf(jint p1, jfloat p2) { return call_method<SCAPIX_META_STRING("glFogf"), void>(p1, p2); }
inline void GL10::glFogfv(jint p1, ref<link::java::array<jfloat>> p2, jint p3) { return call_method<SCAPIX_META_STRING("glFogfv"), void>(p1, p2, p3); }
inline void GL10::glFogfv(jint p1, ref<java::nio::FloatBuffer> p2) { return call_method<SCAPIX_META_STRING("glFogfv"), void>(p1, p2); }
inline void GL10::glFogx(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("glFogx"), void>(p1, p2); }
inline void GL10::glFogxv(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_method<SCAPIX_META_STRING("glFogxv"), void>(p1, p2, p3); }
inline void GL10::glFogxv(jint p1, ref<java::nio::IntBuffer> p2) { return call_method<SCAPIX_META_STRING("glFogxv"), void>(p1, p2); }
inline void GL10::glFrontFace(jint p1) { return call_method<SCAPIX_META_STRING("glFrontFace"), void>(p1); }
inline void GL10::glFrustumf(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6) { return call_method<SCAPIX_META_STRING("glFrustumf"), void>(p1, p2, p3, p4, p5, p6); }
inline void GL10::glFrustumx(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<SCAPIX_META_STRING("glFrustumx"), void>(p1, p2, p3, p4, p5, p6); }
inline void GL10::glGenTextures(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_method<SCAPIX_META_STRING("glGenTextures"), void>(p1, p2, p3); }
inline void GL10::glGenTextures(jint p1, ref<java::nio::IntBuffer> p2) { return call_method<SCAPIX_META_STRING("glGenTextures"), void>(p1, p2); }
inline jint GL10::glGetError() { return call_method<SCAPIX_META_STRING("glGetError"), jint>(); }
inline void GL10::glGetIntegerv(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_method<SCAPIX_META_STRING("glGetIntegerv"), void>(p1, p2, p3); }
inline void GL10::glGetIntegerv(jint p1, ref<java::nio::IntBuffer> p2) { return call_method<SCAPIX_META_STRING("glGetIntegerv"), void>(p1, p2); }
inline ref<java::lang::String> GL10::glGetString(jint p1) { return call_method<SCAPIX_META_STRING("glGetString"), ref<java::lang::String>>(p1); }
inline void GL10::glHint(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("glHint"), void>(p1, p2); }
inline void GL10::glLightModelf(jint p1, jfloat p2) { return call_method<SCAPIX_META_STRING("glLightModelf"), void>(p1, p2); }
inline void GL10::glLightModelfv(jint p1, ref<link::java::array<jfloat>> p2, jint p3) { return call_method<SCAPIX_META_STRING("glLightModelfv"), void>(p1, p2, p3); }
inline void GL10::glLightModelfv(jint p1, ref<java::nio::FloatBuffer> p2) { return call_method<SCAPIX_META_STRING("glLightModelfv"), void>(p1, p2); }
inline void GL10::glLightModelx(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("glLightModelx"), void>(p1, p2); }
inline void GL10::glLightModelxv(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_method<SCAPIX_META_STRING("glLightModelxv"), void>(p1, p2, p3); }
inline void GL10::glLightModelxv(jint p1, ref<java::nio::IntBuffer> p2) { return call_method<SCAPIX_META_STRING("glLightModelxv"), void>(p1, p2); }
inline void GL10::glLightf(jint p1, jint p2, jfloat p3) { return call_method<SCAPIX_META_STRING("glLightf"), void>(p1, p2, p3); }
inline void GL10::glLightfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4) { return call_method<SCAPIX_META_STRING("glLightfv"), void>(p1, p2, p3, p4); }
inline void GL10::glLightfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3) { return call_method<SCAPIX_META_STRING("glLightfv"), void>(p1, p2, p3); }
inline void GL10::glLightx(jint p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("glLightx"), void>(p1, p2, p3); }
inline void GL10::glLightxv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_method<SCAPIX_META_STRING("glLightxv"), void>(p1, p2, p3, p4); }
inline void GL10::glLightxv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_method<SCAPIX_META_STRING("glLightxv"), void>(p1, p2, p3); }
inline void GL10::glLineWidth(jfloat p1) { return call_method<SCAPIX_META_STRING("glLineWidth"), void>(p1); }
inline void GL10::glLineWidthx(jint p1) { return call_method<SCAPIX_META_STRING("glLineWidthx"), void>(p1); }
inline void GL10::glLoadIdentity() { return call_method<SCAPIX_META_STRING("glLoadIdentity"), void>(); }
inline void GL10::glLoadMatrixf(ref<link::java::array<jfloat>> p1, jint p2) { return call_method<SCAPIX_META_STRING("glLoadMatrixf"), void>(p1, p2); }
inline void GL10::glLoadMatrixf(ref<java::nio::FloatBuffer> p1) { return call_method<SCAPIX_META_STRING("glLoadMatrixf"), void>(p1); }
inline void GL10::glLoadMatrixx(ref<link::java::array<jint>> p1, jint p2) { return call_method<SCAPIX_META_STRING("glLoadMatrixx"), void>(p1, p2); }
inline void GL10::glLoadMatrixx(ref<java::nio::IntBuffer> p1) { return call_method<SCAPIX_META_STRING("glLoadMatrixx"), void>(p1); }
inline void GL10::glLogicOp(jint p1) { return call_method<SCAPIX_META_STRING("glLogicOp"), void>(p1); }
inline void GL10::glMaterialf(jint p1, jint p2, jfloat p3) { return call_method<SCAPIX_META_STRING("glMaterialf"), void>(p1, p2, p3); }
inline void GL10::glMaterialfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4) { return call_method<SCAPIX_META_STRING("glMaterialfv"), void>(p1, p2, p3, p4); }
inline void GL10::glMaterialfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3) { return call_method<SCAPIX_META_STRING("glMaterialfv"), void>(p1, p2, p3); }
inline void GL10::glMaterialx(jint p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("glMaterialx"), void>(p1, p2, p3); }
inline void GL10::glMaterialxv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_method<SCAPIX_META_STRING("glMaterialxv"), void>(p1, p2, p3, p4); }
inline void GL10::glMaterialxv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_method<SCAPIX_META_STRING("glMaterialxv"), void>(p1, p2, p3); }
inline void GL10::glMatrixMode(jint p1) { return call_method<SCAPIX_META_STRING("glMatrixMode"), void>(p1); }
inline void GL10::glMultMatrixf(ref<link::java::array<jfloat>> p1, jint p2) { return call_method<SCAPIX_META_STRING("glMultMatrixf"), void>(p1, p2); }
inline void GL10::glMultMatrixf(ref<java::nio::FloatBuffer> p1) { return call_method<SCAPIX_META_STRING("glMultMatrixf"), void>(p1); }
inline void GL10::glMultMatrixx(ref<link::java::array<jint>> p1, jint p2) { return call_method<SCAPIX_META_STRING("glMultMatrixx"), void>(p1, p2); }
inline void GL10::glMultMatrixx(ref<java::nio::IntBuffer> p1) { return call_method<SCAPIX_META_STRING("glMultMatrixx"), void>(p1); }
inline void GL10::glMultiTexCoord4f(jint p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) { return call_method<SCAPIX_META_STRING("glMultiTexCoord4f"), void>(p1, p2, p3, p4, p5); }
inline void GL10::glMultiTexCoord4x(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_method<SCAPIX_META_STRING("glMultiTexCoord4x"), void>(p1, p2, p3, p4, p5); }
inline void GL10::glNormal3f(jfloat p1, jfloat p2, jfloat p3) { return call_method<SCAPIX_META_STRING("glNormal3f"), void>(p1, p2, p3); }
inline void GL10::glNormal3x(jint p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("glNormal3x"), void>(p1, p2, p3); }
inline void GL10::glNormalPointer(jint p1, jint p2, ref<java::nio::Buffer> p3) { return call_method<SCAPIX_META_STRING("glNormalPointer"), void>(p1, p2, p3); }
inline void GL10::glOrthof(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6) { return call_method<SCAPIX_META_STRING("glOrthof"), void>(p1, p2, p3, p4, p5, p6); }
inline void GL10::glOrthox(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<SCAPIX_META_STRING("glOrthox"), void>(p1, p2, p3, p4, p5, p6); }
inline void GL10::glPixelStorei(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("glPixelStorei"), void>(p1, p2); }
inline void GL10::glPointSize(jfloat p1) { return call_method<SCAPIX_META_STRING("glPointSize"), void>(p1); }
inline void GL10::glPointSizex(jint p1) { return call_method<SCAPIX_META_STRING("glPointSizex"), void>(p1); }
inline void GL10::glPolygonOffset(jfloat p1, jfloat p2) { return call_method<SCAPIX_META_STRING("glPolygonOffset"), void>(p1, p2); }
inline void GL10::glPolygonOffsetx(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("glPolygonOffsetx"), void>(p1, p2); }
inline void GL10::glPopMatrix() { return call_method<SCAPIX_META_STRING("glPopMatrix"), void>(); }
inline void GL10::glPushMatrix() { return call_method<SCAPIX_META_STRING("glPushMatrix"), void>(); }
inline void GL10::glReadPixels(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, ref<java::nio::Buffer> p7) { return call_method<SCAPIX_META_STRING("glReadPixels"), void>(p1, p2, p3, p4, p5, p6, p7); }
inline void GL10::glRotatef(jfloat p1, jfloat p2, jfloat p3, jfloat p4) { return call_method<SCAPIX_META_STRING("glRotatef"), void>(p1, p2, p3, p4); }
inline void GL10::glRotatex(jint p1, jint p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("glRotatex"), void>(p1, p2, p3, p4); }
inline void GL10::glSampleCoverage(jfloat p1, jboolean p2) { return call_method<SCAPIX_META_STRING("glSampleCoverage"), void>(p1, p2); }
inline void GL10::glSampleCoveragex(jint p1, jboolean p2) { return call_method<SCAPIX_META_STRING("glSampleCoveragex"), void>(p1, p2); }
inline void GL10::glScalef(jfloat p1, jfloat p2, jfloat p3) { return call_method<SCAPIX_META_STRING("glScalef"), void>(p1, p2, p3); }
inline void GL10::glScalex(jint p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("glScalex"), void>(p1, p2, p3); }
inline void GL10::glScissor(jint p1, jint p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("glScissor"), void>(p1, p2, p3, p4); }
inline void GL10::glShadeModel(jint p1) { return call_method<SCAPIX_META_STRING("glShadeModel"), void>(p1); }
inline void GL10::glStencilFunc(jint p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("glStencilFunc"), void>(p1, p2, p3); }
inline void GL10::glStencilMask(jint p1) { return call_method<SCAPIX_META_STRING("glStencilMask"), void>(p1); }
inline void GL10::glStencilOp(jint p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("glStencilOp"), void>(p1, p2, p3); }
inline void GL10::glTexCoordPointer(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4) { return call_method<SCAPIX_META_STRING("glTexCoordPointer"), void>(p1, p2, p3, p4); }
inline void GL10::glTexEnvf(jint p1, jint p2, jfloat p3) { return call_method<SCAPIX_META_STRING("glTexEnvf"), void>(p1, p2, p3); }
inline void GL10::glTexEnvfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4) { return call_method<SCAPIX_META_STRING("glTexEnvfv"), void>(p1, p2, p3, p4); }
inline void GL10::glTexEnvfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3) { return call_method<SCAPIX_META_STRING("glTexEnvfv"), void>(p1, p2, p3); }
inline void GL10::glTexEnvx(jint p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("glTexEnvx"), void>(p1, p2, p3); }
inline void GL10::glTexEnvxv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_method<SCAPIX_META_STRING("glTexEnvxv"), void>(p1, p2, p3, p4); }
inline void GL10::glTexEnvxv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_method<SCAPIX_META_STRING("glTexEnvxv"), void>(p1, p2, p3); }
inline void GL10::glTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, ref<java::nio::Buffer> p9) { return call_method<SCAPIX_META_STRING("glTexImage2D"), void>(p1, p2, p3, p4, p5, p6, p7, p8, p9); }
inline void GL10::glTexParameterf(jint p1, jint p2, jfloat p3) { return call_method<SCAPIX_META_STRING("glTexParameterf"), void>(p1, p2, p3); }
inline void GL10::glTexParameterx(jint p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("glTexParameterx"), void>(p1, p2, p3); }
inline void GL10::glTexSubImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, ref<java::nio::Buffer> p9) { return call_method<SCAPIX_META_STRING("glTexSubImage2D"), void>(p1, p2, p3, p4, p5, p6, p7, p8, p9); }
inline void GL10::glTranslatef(jfloat p1, jfloat p2, jfloat p3) { return call_method<SCAPIX_META_STRING("glTranslatef"), void>(p1, p2, p3); }
inline void GL10::glTranslatex(jint p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("glTranslatex"), void>(p1, p2, p3); }
inline void GL10::glVertexPointer(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4) { return call_method<SCAPIX_META_STRING("glVertexPointer"), void>(p1, p2, p3, p4); }
inline void GL10::glViewport(jint p1, jint p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("glViewport"), void>(p1, p2, p3, p4); }

} // namespace javax::microedition::khronos::opengles
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL10_H
