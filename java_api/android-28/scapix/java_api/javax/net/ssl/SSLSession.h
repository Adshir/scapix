// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVAX_NET_SSL_SSLSESSION_H
#define SCAPIX_JAVAX_NET_SSL_SSLSESSION_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::security { class Principal; }
namespace java::security::cert { class Certificate; }
namespace javax::net::ssl { class SSLSessionContext; }
namespace javax::security::cert { class X509Certificate; }

namespace javax::net::ssl {

class SSLSession : public object_base<SCAPIX_META_STRING("javax/net/ssl/SSLSession"),
	java::lang::Object>
{
public:

	ref<link::java::array<jbyte>> getId();
	ref<javax::net::ssl::SSLSessionContext> getSessionContext();
	jlong getCreationTime();
	jlong getLastAccessedTime();
	void invalidate();
	jboolean isValid();
	void putValue(ref<java::lang::String> p1, ref<java::lang::Object> p2);
	ref<java::lang::Object> getValue(ref<java::lang::String> p1);
	void removeValue(ref<java::lang::String> p1);
	ref<link::java::array<java::lang::String>> getValueNames();
	ref<link::java::array<java::security::cert::Certificate>> getPeerCertificates();
	ref<link::java::array<java::security::cert::Certificate>> getLocalCertificates();
	ref<link::java::array<javax::security::cert::X509Certificate>> getPeerCertificateChain();
	ref<java::security::Principal> getPeerPrincipal();
	ref<java::security::Principal> getLocalPrincipal();
	ref<java::lang::String> getCipherSuite();
	ref<java::lang::String> getProtocol();
	ref<java::lang::String> getPeerHost();
	jint getPeerPort();
	jint getPacketBufferSize();
	jint getApplicationBufferSize();

protected:

	SSLSession(handle_type h) : base_(h) {}

};

} // namespace javax::net::ssl
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/Principal.h>
#include <scapix/java_api/java/security/cert/Certificate.h>
#include <scapix/java_api/javax/net/ssl/SSLSessionContext.h>
#include <scapix/java_api/javax/security/cert/X509Certificate.h>

namespace scapix::java_api {
namespace javax::net::ssl {

inline ref<link::java::array<jbyte>> SSLSession::getId() { return call_method<SCAPIX_META_STRING("getId"), ref<link::java::array<jbyte>>>(); }
inline ref<javax::net::ssl::SSLSessionContext> SSLSession::getSessionContext() { return call_method<SCAPIX_META_STRING("getSessionContext"), ref<javax::net::ssl::SSLSessionContext>>(); }
inline jlong SSLSession::getCreationTime() { return call_method<SCAPIX_META_STRING("getCreationTime"), jlong>(); }
inline jlong SSLSession::getLastAccessedTime() { return call_method<SCAPIX_META_STRING("getLastAccessedTime"), jlong>(); }
inline void SSLSession::invalidate() { return call_method<SCAPIX_META_STRING("invalidate"), void>(); }
inline jboolean SSLSession::isValid() { return call_method<SCAPIX_META_STRING("isValid"), jboolean>(); }
inline void SSLSession::putValue(ref<java::lang::String> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("putValue"), void>(p1, p2); }
inline ref<java::lang::Object> SSLSession::getValue(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getValue"), ref<java::lang::Object>>(p1); }
inline void SSLSession::removeValue(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("removeValue"), void>(p1); }
inline ref<link::java::array<java::lang::String>> SSLSession::getValueNames() { return call_method<SCAPIX_META_STRING("getValueNames"), ref<link::java::array<java::lang::String>>>(); }
inline ref<link::java::array<java::security::cert::Certificate>> SSLSession::getPeerCertificates() { return call_method<SCAPIX_META_STRING("getPeerCertificates"), ref<link::java::array<java::security::cert::Certificate>>>(); }
inline ref<link::java::array<java::security::cert::Certificate>> SSLSession::getLocalCertificates() { return call_method<SCAPIX_META_STRING("getLocalCertificates"), ref<link::java::array<java::security::cert::Certificate>>>(); }
inline ref<link::java::array<javax::security::cert::X509Certificate>> SSLSession::getPeerCertificateChain() { return call_method<SCAPIX_META_STRING("getPeerCertificateChain"), ref<link::java::array<javax::security::cert::X509Certificate>>>(); }
inline ref<java::security::Principal> SSLSession::getPeerPrincipal() { return call_method<SCAPIX_META_STRING("getPeerPrincipal"), ref<java::security::Principal>>(); }
inline ref<java::security::Principal> SSLSession::getLocalPrincipal() { return call_method<SCAPIX_META_STRING("getLocalPrincipal"), ref<java::security::Principal>>(); }
inline ref<java::lang::String> SSLSession::getCipherSuite() { return call_method<SCAPIX_META_STRING("getCipherSuite"), ref<java::lang::String>>(); }
inline ref<java::lang::String> SSLSession::getProtocol() { return call_method<SCAPIX_META_STRING("getProtocol"), ref<java::lang::String>>(); }
inline ref<java::lang::String> SSLSession::getPeerHost() { return call_method<SCAPIX_META_STRING("getPeerHost"), ref<java::lang::String>>(); }
inline jint SSLSession::getPeerPort() { return call_method<SCAPIX_META_STRING("getPeerPort"), jint>(); }
inline jint SSLSession::getPacketBufferSize() { return call_method<SCAPIX_META_STRING("getPacketBufferSize"), jint>(); }
inline jint SSLSession::getApplicationBufferSize() { return call_method<SCAPIX_META_STRING("getApplicationBufferSize"), jint>(); }

} // namespace javax::net::ssl
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_NET_SSL_SSLSESSION_H
