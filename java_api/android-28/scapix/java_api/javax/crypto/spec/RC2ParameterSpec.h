// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/security/spec/AlgorithmParameterSpec.h>

#ifndef SCAPIX_JAVAX_CRYPTO_SPEC_RC2PARAMETERSPEC_H
#define SCAPIX_JAVAX_CRYPTO_SPEC_RC2PARAMETERSPEC_H

namespace scapix::java_api {
namespace javax::crypto::spec {

class RC2ParameterSpec : public object_base<SCAPIX_META_STRING("javax/crypto/spec/RC2ParameterSpec"),
	java::lang::Object,
	java::security::spec::AlgorithmParameterSpec>
{
public:

	static ref<RC2ParameterSpec> new_object(jint effectiveKeyBits);
	static ref<RC2ParameterSpec> new_object(jint effectiveKeyBits, ref<link::java::array<jbyte>> iv);
	static ref<RC2ParameterSpec> new_object(jint effectiveKeyBits, ref<link::java::array<jbyte>> iv, jint offset);
	jint getEffectiveKeyBits();
	ref<link::java::array<jbyte>> getIV();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();

protected:

	RC2ParameterSpec(handle_type h) : base_(h) {}

};

} // namespace javax::crypto::spec
} // namespace scapix::java_api


namespace scapix::java_api {
namespace javax::crypto::spec {

inline ref<RC2ParameterSpec> RC2ParameterSpec::new_object(jint effectiveKeyBits) { return base_::new_object(effectiveKeyBits); }
inline ref<RC2ParameterSpec> RC2ParameterSpec::new_object(jint effectiveKeyBits, ref<link::java::array<jbyte>> iv) { return base_::new_object(effectiveKeyBits, iv); }
inline ref<RC2ParameterSpec> RC2ParameterSpec::new_object(jint effectiveKeyBits, ref<link::java::array<jbyte>> iv, jint offset) { return base_::new_object(effectiveKeyBits, iv, offset); }
inline jint RC2ParameterSpec::getEffectiveKeyBits() { return call_method<SCAPIX_META_STRING("getEffectiveKeyBits"), jint>(); }
inline ref<link::java::array<jbyte>> RC2ParameterSpec::getIV() { return call_method<SCAPIX_META_STRING("getIV"), ref<link::java::array<jbyte>>>(); }
inline jboolean RC2ParameterSpec::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint RC2ParameterSpec::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }

} // namespace javax::crypto::spec
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_CRYPTO_SPEC_RC2PARAMETERSPEC_H
