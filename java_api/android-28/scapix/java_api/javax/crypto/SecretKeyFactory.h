// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVAX_CRYPTO_SECRETKEYFACTORY_H
#define SCAPIX_JAVAX_CRYPTO_SECRETKEYFACTORY_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class String; }
namespace java::security { class Provider; }
namespace java::security::spec { class KeySpec; }
namespace javax::crypto { class SecretKey; }

namespace javax::crypto {

class SecretKeyFactory : public object_base<SCAPIX_META_STRING("javax/crypto/SecretKeyFactory"),
	java::lang::Object>
{
public:

	static ref<javax::crypto::SecretKeyFactory> getInstance(ref<java::lang::String> algorithm);
	static ref<javax::crypto::SecretKeyFactory> getInstance(ref<java::lang::String> algorithm, ref<java::lang::String> provider);
	static ref<javax::crypto::SecretKeyFactory> getInstance(ref<java::lang::String> algorithm, ref<java::security::Provider> provider);
	ref<java::security::Provider> getProvider();
	ref<java::lang::String> getAlgorithm();
	ref<javax::crypto::SecretKey> generateSecret(ref<java::security::spec::KeySpec> keySpec);
	ref<java::security::spec::KeySpec> getKeySpec(ref<javax::crypto::SecretKey> key, ref<java::lang::Class> keySpec);
	ref<javax::crypto::SecretKey> translateKey(ref<javax::crypto::SecretKey> key);

protected:

	SecretKeyFactory(handle_type h) : base_(h) {}

};

} // namespace javax::crypto
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/Provider.h>
#include <scapix/java_api/java/security/spec/KeySpec.h>
#include <scapix/java_api/javax/crypto/SecretKey.h>

namespace scapix::java_api {
namespace javax::crypto {

inline ref<javax::crypto::SecretKeyFactory> SecretKeyFactory::getInstance(ref<java::lang::String> algorithm) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::crypto::SecretKeyFactory>>(algorithm); }
inline ref<javax::crypto::SecretKeyFactory> SecretKeyFactory::getInstance(ref<java::lang::String> algorithm, ref<java::lang::String> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::crypto::SecretKeyFactory>>(algorithm, provider); }
inline ref<javax::crypto::SecretKeyFactory> SecretKeyFactory::getInstance(ref<java::lang::String> algorithm, ref<java::security::Provider> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::crypto::SecretKeyFactory>>(algorithm, provider); }
inline ref<java::security::Provider> SecretKeyFactory::getProvider() { return call_method<SCAPIX_META_STRING("getProvider"), ref<java::security::Provider>>(); }
inline ref<java::lang::String> SecretKeyFactory::getAlgorithm() { return call_method<SCAPIX_META_STRING("getAlgorithm"), ref<java::lang::String>>(); }
inline ref<javax::crypto::SecretKey> SecretKeyFactory::generateSecret(ref<java::security::spec::KeySpec> keySpec) { return call_method<SCAPIX_META_STRING("generateSecret"), ref<javax::crypto::SecretKey>>(keySpec); }
inline ref<java::security::spec::KeySpec> SecretKeyFactory::getKeySpec(ref<javax::crypto::SecretKey> key, ref<java::lang::Class> keySpec) { return call_method<SCAPIX_META_STRING("getKeySpec"), ref<java::security::spec::KeySpec>>(key, keySpec); }
inline ref<javax::crypto::SecretKey> SecretKeyFactory::translateKey(ref<javax::crypto::SecretKey> key) { return call_method<SCAPIX_META_STRING("translateKey"), ref<javax::crypto::SecretKey>>(key); }

} // namespace javax::crypto
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_CRYPTO_SECRETKEYFACTORY_H
