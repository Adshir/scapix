// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVAX_CRYPTO_MAC_H
#define SCAPIX_JAVAX_CRYPTO_MAC_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::nio { class ByteBuffer; }
namespace java::security { class Key; }
namespace java::security { class Provider; }
namespace java::security::spec { class AlgorithmParameterSpec; }

namespace javax::crypto {

class Mac : public object_base<SCAPIX_META_STRING("javax/crypto/Mac"),
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	ref<java::lang::String> getAlgorithm();
	static ref<javax::crypto::Mac> getInstance(ref<java::lang::String> algorithm);
	static ref<javax::crypto::Mac> getInstance(ref<java::lang::String> algorithm, ref<java::lang::String> provider);
	static ref<javax::crypto::Mac> getInstance(ref<java::lang::String> algorithm, ref<java::security::Provider> provider);
	ref<java::security::Provider> getProvider();
	jint getMacLength();
	void init(ref<java::security::Key> key);
	void init(ref<java::security::Key> key, ref<java::security::spec::AlgorithmParameterSpec> params);
	void update(jbyte input);
	void update(ref<link::java::array<jbyte>> input);
	void update(ref<link::java::array<jbyte>> input, jint offset, jint len);
	void update(ref<java::nio::ByteBuffer> input);
	ref<link::java::array<jbyte>> doFinal();
	void doFinal(ref<link::java::array<jbyte>> output, jint outOffset);
	ref<link::java::array<jbyte>> doFinal(ref<link::java::array<jbyte>> input);
	void reset();
	ref<java::lang::Object> clone();

protected:

	Mac(handle_type h) : base_(h) {}

};

} // namespace javax::crypto
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/security/Key.h>
#include <scapix/java_api/java/security/Provider.h>
#include <scapix/java_api/java/security/spec/AlgorithmParameterSpec.h>

namespace scapix::java_api {
namespace javax::crypto {

inline ref<java::lang::String> Mac::getAlgorithm() { return call_method<SCAPIX_META_STRING("getAlgorithm"), ref<java::lang::String>>(); }
inline ref<javax::crypto::Mac> Mac::getInstance(ref<java::lang::String> algorithm) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::crypto::Mac>>(algorithm); }
inline ref<javax::crypto::Mac> Mac::getInstance(ref<java::lang::String> algorithm, ref<java::lang::String> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::crypto::Mac>>(algorithm, provider); }
inline ref<javax::crypto::Mac> Mac::getInstance(ref<java::lang::String> algorithm, ref<java::security::Provider> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<javax::crypto::Mac>>(algorithm, provider); }
inline ref<java::security::Provider> Mac::getProvider() { return call_method<SCAPIX_META_STRING("getProvider"), ref<java::security::Provider>>(); }
inline jint Mac::getMacLength() { return call_method<SCAPIX_META_STRING("getMacLength"), jint>(); }
inline void Mac::init(ref<java::security::Key> key) { return call_method<SCAPIX_META_STRING("init"), void>(key); }
inline void Mac::init(ref<java::security::Key> key, ref<java::security::spec::AlgorithmParameterSpec> params) { return call_method<SCAPIX_META_STRING("init"), void>(key, params); }
inline void Mac::update(jbyte input) { return call_method<SCAPIX_META_STRING("update"), void>(input); }
inline void Mac::update(ref<link::java::array<jbyte>> input) { return call_method<SCAPIX_META_STRING("update"), void>(input); }
inline void Mac::update(ref<link::java::array<jbyte>> input, jint offset, jint len) { return call_method<SCAPIX_META_STRING("update"), void>(input, offset, len); }
inline void Mac::update(ref<java::nio::ByteBuffer> input) { return call_method<SCAPIX_META_STRING("update"), void>(input); }
inline ref<link::java::array<jbyte>> Mac::doFinal() { return call_method<SCAPIX_META_STRING("doFinal"), ref<link::java::array<jbyte>>>(); }
inline void Mac::doFinal(ref<link::java::array<jbyte>> output, jint outOffset) { return call_method<SCAPIX_META_STRING("doFinal"), void>(output, outOffset); }
inline ref<link::java::array<jbyte>> Mac::doFinal(ref<link::java::array<jbyte>> input) { return call_method<SCAPIX_META_STRING("doFinal"), ref<link::java::array<jbyte>>>(input); }
inline void Mac::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline ref<java::lang::Object> Mac::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }

} // namespace javax::crypto
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_CRYPTO_MAC_H
