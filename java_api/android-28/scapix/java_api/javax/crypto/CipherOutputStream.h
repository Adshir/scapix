// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/FilterOutputStream.h>

#ifndef SCAPIX_JAVAX_CRYPTO_CIPHEROUTPUTSTREAM_H
#define SCAPIX_JAVAX_CRYPTO_CIPHEROUTPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class OutputStream; }
namespace javax::crypto { class Cipher; }

namespace javax::crypto {

class CipherOutputStream : public object_base<SCAPIX_META_STRING("javax/crypto/CipherOutputStream"),
	java::io::FilterOutputStream>
{
public:

	static ref<CipherOutputStream> new_object(ref<java::io::OutputStream> os, ref<javax::crypto::Cipher> c);
	void write(jint b);
	void write(ref<link::java::array<jbyte>> b);
	void write(ref<link::java::array<jbyte>> b, jint off, jint len);
	void flush();
	void close();

protected:

	CipherOutputStream(handle_type h) : base_(h) {}

};

} // namespace javax::crypto
} // namespace scapix::java_api

#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/javax/crypto/Cipher.h>

namespace scapix::java_api {
namespace javax::crypto {

inline ref<CipherOutputStream> CipherOutputStream::new_object(ref<java::io::OutputStream> os, ref<javax::crypto::Cipher> c) { return base_::new_object(os, c); }
inline void CipherOutputStream::write(jint b) { return call_method<SCAPIX_META_STRING("write"), void>(b); }
inline void CipherOutputStream::write(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("write"), void>(b); }
inline void CipherOutputStream::write(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(b, off, len); }
inline void CipherOutputStream::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline void CipherOutputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace javax::crypto
} // namespace scapix::java_api

#endif // SCAPIX_JAVAX_CRYPTO_CIPHEROUTPUTSTREAM_H
