// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_AWT_FONT_NUMERICSHAPER_H
#define SCAPIX_JAVA_AWT_FONT_NUMERICSHAPER_H

namespace scapix::java_api {

namespace java::awt::font { class NumericShaper_Range; }
namespace java::lang { class String; }
namespace java::util { class Set; }

namespace java::awt::font {

class NumericShaper : public object_base<SCAPIX_META_STRING("java/awt/font/NumericShaper"),
	java::lang::Object,
	java::io::Serializable>
{
public:

	using Range = NumericShaper_Range;

	static jint ALL_RANGES_();
	static jint ARABIC_();
	static jint BENGALI_();
	static jint DEVANAGARI_();
	static jint EASTERN_ARABIC_();
	static jint ETHIOPIC_();
	static jint EUROPEAN_();
	static jint GUJARATI_();
	static jint GURMUKHI_();
	static jint KANNADA_();
	static jint KHMER_();
	static jint LAO_();
	static jint MALAYALAM_();
	static jint MONGOLIAN_();
	static jint MYANMAR_();
	static jint ORIYA_();
	static jint TAMIL_();
	static jint TELUGU_();
	static jint THAI_();
	static jint TIBETAN_();

	static ref<java::awt::font::NumericShaper> getShaper(jint singleRange);
	static ref<java::awt::font::NumericShaper> getShaper(ref<java::awt::font::NumericShaper_Range> singleRange);
	static ref<java::awt::font::NumericShaper> getContextualShaper(jint ranges);
	static ref<java::awt::font::NumericShaper> getContextualShaper(ref<java::util::Set> ranges);
	static ref<java::awt::font::NumericShaper> getContextualShaper(jint ranges, jint defaultContext);
	static ref<java::awt::font::NumericShaper> getContextualShaper(ref<java::util::Set> ranges, ref<java::awt::font::NumericShaper_Range> defaultContext);
	void shape(ref<link::java::array<jchar>> text, jint start, jint count);
	void shape(ref<link::java::array<jchar>> text, jint start, jint count, jint context);
	void shape(ref<link::java::array<jchar>> text, jint start, jint count, ref<java::awt::font::NumericShaper_Range> context);
	jboolean isContextual();
	jint getRanges();
	ref<java::util::Set> getRangeSet();
	jint hashCode();
	jboolean equals(ref<java::lang::Object> o);
	ref<java::lang::String> toString();

protected:

	NumericShaper(handle_type h) : base_(h) {}

};

} // namespace java::awt::font
} // namespace scapix::java_api

#include <scapix/java_api/java/awt/font/NumericShaper_Range.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace java::awt::font {

inline jint NumericShaper::ALL_RANGES_() { return get_static_field<SCAPIX_META_STRING("ALL_RANGES"), jint>(); }
inline jint NumericShaper::ARABIC_() { return get_static_field<SCAPIX_META_STRING("ARABIC"), jint>(); }
inline jint NumericShaper::BENGALI_() { return get_static_field<SCAPIX_META_STRING("BENGALI"), jint>(); }
inline jint NumericShaper::DEVANAGARI_() { return get_static_field<SCAPIX_META_STRING("DEVANAGARI"), jint>(); }
inline jint NumericShaper::EASTERN_ARABIC_() { return get_static_field<SCAPIX_META_STRING("EASTERN_ARABIC"), jint>(); }
inline jint NumericShaper::ETHIOPIC_() { return get_static_field<SCAPIX_META_STRING("ETHIOPIC"), jint>(); }
inline jint NumericShaper::EUROPEAN_() { return get_static_field<SCAPIX_META_STRING("EUROPEAN"), jint>(); }
inline jint NumericShaper::GUJARATI_() { return get_static_field<SCAPIX_META_STRING("GUJARATI"), jint>(); }
inline jint NumericShaper::GURMUKHI_() { return get_static_field<SCAPIX_META_STRING("GURMUKHI"), jint>(); }
inline jint NumericShaper::KANNADA_() { return get_static_field<SCAPIX_META_STRING("KANNADA"), jint>(); }
inline jint NumericShaper::KHMER_() { return get_static_field<SCAPIX_META_STRING("KHMER"), jint>(); }
inline jint NumericShaper::LAO_() { return get_static_field<SCAPIX_META_STRING("LAO"), jint>(); }
inline jint NumericShaper::MALAYALAM_() { return get_static_field<SCAPIX_META_STRING("MALAYALAM"), jint>(); }
inline jint NumericShaper::MONGOLIAN_() { return get_static_field<SCAPIX_META_STRING("MONGOLIAN"), jint>(); }
inline jint NumericShaper::MYANMAR_() { return get_static_field<SCAPIX_META_STRING("MYANMAR"), jint>(); }
inline jint NumericShaper::ORIYA_() { return get_static_field<SCAPIX_META_STRING("ORIYA"), jint>(); }
inline jint NumericShaper::TAMIL_() { return get_static_field<SCAPIX_META_STRING("TAMIL"), jint>(); }
inline jint NumericShaper::TELUGU_() { return get_static_field<SCAPIX_META_STRING("TELUGU"), jint>(); }
inline jint NumericShaper::THAI_() { return get_static_field<SCAPIX_META_STRING("THAI"), jint>(); }
inline jint NumericShaper::TIBETAN_() { return get_static_field<SCAPIX_META_STRING("TIBETAN"), jint>(); }
inline ref<java::awt::font::NumericShaper> NumericShaper::getShaper(jint singleRange) { return call_static_method<SCAPIX_META_STRING("getShaper"), ref<java::awt::font::NumericShaper>>(singleRange); }
inline ref<java::awt::font::NumericShaper> NumericShaper::getShaper(ref<java::awt::font::NumericShaper_Range> singleRange) { return call_static_method<SCAPIX_META_STRING("getShaper"), ref<java::awt::font::NumericShaper>>(singleRange); }
inline ref<java::awt::font::NumericShaper> NumericShaper::getContextualShaper(jint ranges) { return call_static_method<SCAPIX_META_STRING("getContextualShaper"), ref<java::awt::font::NumericShaper>>(ranges); }
inline ref<java::awt::font::NumericShaper> NumericShaper::getContextualShaper(ref<java::util::Set> ranges) { return call_static_method<SCAPIX_META_STRING("getContextualShaper"), ref<java::awt::font::NumericShaper>>(ranges); }
inline ref<java::awt::font::NumericShaper> NumericShaper::getContextualShaper(jint ranges, jint defaultContext) { return call_static_method<SCAPIX_META_STRING("getContextualShaper"), ref<java::awt::font::NumericShaper>>(ranges, defaultContext); }
inline ref<java::awt::font::NumericShaper> NumericShaper::getContextualShaper(ref<java::util::Set> ranges, ref<java::awt::font::NumericShaper_Range> defaultContext) { return call_static_method<SCAPIX_META_STRING("getContextualShaper"), ref<java::awt::font::NumericShaper>>(ranges, defaultContext); }
inline void NumericShaper::shape(ref<link::java::array<jchar>> text, jint start, jint count) { return call_method<SCAPIX_META_STRING("shape"), void>(text, start, count); }
inline void NumericShaper::shape(ref<link::java::array<jchar>> text, jint start, jint count, jint context) { return call_method<SCAPIX_META_STRING("shape"), void>(text, start, count, context); }
inline void NumericShaper::shape(ref<link::java::array<jchar>> text, jint start, jint count, ref<java::awt::font::NumericShaper_Range> context) { return call_method<SCAPIX_META_STRING("shape"), void>(text, start, count, context); }
inline jboolean NumericShaper::isContextual() { return call_method<SCAPIX_META_STRING("isContextual"), jboolean>(); }
inline jint NumericShaper::getRanges() { return call_method<SCAPIX_META_STRING("getRanges"), jint>(); }
inline ref<java::util::Set> NumericShaper::getRangeSet() { return call_method<SCAPIX_META_STRING("getRangeSet"), ref<java::util::Set>>(); }
inline jint NumericShaper::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean NumericShaper::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline ref<java::lang::String> NumericShaper::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::awt::font
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_AWT_FONT_NUMERICSHAPER_H
