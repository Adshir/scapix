// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_EXECUTORSERVICE_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_EXECUTORSERVICE_H

namespace scapix::java_api {

namespace java::lang { class Runnable; }
namespace java::util { class Collection; }
namespace java::util { class List; }
namespace java::util::concurrent { class Callable; }
namespace java::util::concurrent { class Future; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::util::concurrent {

class ExecutorService : public object_base<SCAPIX_META_STRING("java/util/concurrent/ExecutorService"),
	java::lang::Object,
	java::util::concurrent::Executor>
{
public:

	void shutdown();
	ref<java::util::List> shutdownNow();
	jboolean isShutdown();
	jboolean isTerminated();
	jboolean awaitTermination(jlong p1, ref<java::util::concurrent::TimeUnit> p2);
	ref<java::util::concurrent::Future> submit(ref<java::util::concurrent::Callable> p1);
	ref<java::util::concurrent::Future> submit(ref<java::lang::Runnable> p1, ref<java::lang::Object> p2);
	ref<java::util::concurrent::Future> submit(ref<java::lang::Runnable> p1);
	ref<java::util::List> invokeAll(ref<java::util::Collection> p1);
	ref<java::util::List> invokeAll(ref<java::util::Collection> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3);
	ref<java::lang::Object> invokeAny(ref<java::util::Collection> p1);
	ref<java::lang::Object> invokeAny(ref<java::util::Collection> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3);

protected:

	ExecutorService(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/java/util/concurrent/Future.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline void ExecutorService::shutdown() { return call_method<SCAPIX_META_STRING("shutdown"), void>(); }
inline ref<java::util::List> ExecutorService::shutdownNow() { return call_method<SCAPIX_META_STRING("shutdownNow"), ref<java::util::List>>(); }
inline jboolean ExecutorService::isShutdown() { return call_method<SCAPIX_META_STRING("isShutdown"), jboolean>(); }
inline jboolean ExecutorService::isTerminated() { return call_method<SCAPIX_META_STRING("isTerminated"), jboolean>(); }
inline jboolean ExecutorService::awaitTermination(jlong p1, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("awaitTermination"), jboolean>(p1, p2); }
inline ref<java::util::concurrent::Future> ExecutorService::submit(ref<java::util::concurrent::Callable> p1) { return call_method<SCAPIX_META_STRING("submit"), ref<java::util::concurrent::Future>>(p1); }
inline ref<java::util::concurrent::Future> ExecutorService::submit(ref<java::lang::Runnable> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("submit"), ref<java::util::concurrent::Future>>(p1, p2); }
inline ref<java::util::concurrent::Future> ExecutorService::submit(ref<java::lang::Runnable> p1) { return call_method<SCAPIX_META_STRING("submit"), ref<java::util::concurrent::Future>>(p1); }
inline ref<java::util::List> ExecutorService::invokeAll(ref<java::util::Collection> p1) { return call_method<SCAPIX_META_STRING("invokeAll"), ref<java::util::List>>(p1); }
inline ref<java::util::List> ExecutorService::invokeAll(ref<java::util::Collection> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("invokeAll"), ref<java::util::List>>(p1, p2, p3); }
inline ref<java::lang::Object> ExecutorService::invokeAny(ref<java::util::Collection> p1) { return call_method<SCAPIX_META_STRING("invokeAny"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> ExecutorService::invokeAny(ref<java::util::Collection> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("invokeAny"), ref<java::lang::Object>>(p1, p2, p3); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_EXECUTORSERVICE_H
