// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_COMPLETIONSERVICE_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_COMPLETIONSERVICE_H

namespace scapix::java_api {

namespace java::lang { class Runnable; }
namespace java::util::concurrent { class Callable; }
namespace java::util::concurrent { class Future; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::util::concurrent {

class CompletionService : public object_base<SCAPIX_META_STRING("java/util/concurrent/CompletionService"),
	java::lang::Object>
{
public:

	ref<java::util::concurrent::Future> submit(ref<java::util::concurrent::Callable> p1);
	ref<java::util::concurrent::Future> submit(ref<java::lang::Runnable> p1, ref<java::lang::Object> p2);
	ref<java::util::concurrent::Future> take();
	ref<java::util::concurrent::Future> poll();
	ref<java::util::concurrent::Future> poll(jlong p1, ref<java::util::concurrent::TimeUnit> p2);

protected:

	CompletionService(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/java/util/concurrent/Future.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<java::util::concurrent::Future> CompletionService::submit(ref<java::util::concurrent::Callable> p1) { return call_method<SCAPIX_META_STRING("submit"), ref<java::util::concurrent::Future>>(p1); }
inline ref<java::util::concurrent::Future> CompletionService::submit(ref<java::lang::Runnable> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("submit"), ref<java::util::concurrent::Future>>(p1, p2); }
inline ref<java::util::concurrent::Future> CompletionService::take() { return call_method<SCAPIX_META_STRING("take"), ref<java::util::concurrent::Future>>(); }
inline ref<java::util::concurrent::Future> CompletionService::poll() { return call_method<SCAPIX_META_STRING("poll"), ref<java::util::concurrent::Future>>(); }
inline ref<java::util::concurrent::Future> CompletionService::poll(jlong p1, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("poll"), ref<java::util::concurrent::Future>>(p1, p2); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_COMPLETIONSERVICE_H
