// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/CompletionService.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_EXECUTORCOMPLETIONSERVICE_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_EXECUTORCOMPLETIONSERVICE_H

namespace scapix::java_api {

namespace java::lang { class Runnable; }
namespace java::util::concurrent { class BlockingQueue; }
namespace java::util::concurrent { class Callable; }
namespace java::util::concurrent { class Executor; }
namespace java::util::concurrent { class Future; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::util::concurrent {

class ExecutorCompletionService : public object_base<SCAPIX_META_STRING("java/util/concurrent/ExecutorCompletionService"),
	java::lang::Object,
	java::util::concurrent::CompletionService>
{
public:

	static ref<ExecutorCompletionService> new_object(ref<java::util::concurrent::Executor> executor);
	static ref<ExecutorCompletionService> new_object(ref<java::util::concurrent::Executor> executor, ref<java::util::concurrent::BlockingQueue> completionQueue);
	ref<java::util::concurrent::Future> submit(ref<java::util::concurrent::Callable> task);
	ref<java::util::concurrent::Future> submit(ref<java::lang::Runnable> task, ref<java::lang::Object> result);
	ref<java::util::concurrent::Future> take();
	ref<java::util::concurrent::Future> poll();
	ref<java::util::concurrent::Future> poll(jlong timeout, ref<java::util::concurrent::TimeUnit> p2);

protected:

	ExecutorCompletionService(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/util/concurrent/BlockingQueue.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#include <scapix/java_api/java/util/concurrent/Future.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<ExecutorCompletionService> ExecutorCompletionService::new_object(ref<java::util::concurrent::Executor> executor) { return base_::new_object(executor); }
inline ref<ExecutorCompletionService> ExecutorCompletionService::new_object(ref<java::util::concurrent::Executor> executor, ref<java::util::concurrent::BlockingQueue> completionQueue) { return base_::new_object(executor, completionQueue); }
inline ref<java::util::concurrent::Future> ExecutorCompletionService::submit(ref<java::util::concurrent::Callable> task) { return call_method<SCAPIX_META_STRING("submit"), ref<java::util::concurrent::Future>>(task); }
inline ref<java::util::concurrent::Future> ExecutorCompletionService::submit(ref<java::lang::Runnable> task, ref<java::lang::Object> result) { return call_method<SCAPIX_META_STRING("submit"), ref<java::util::concurrent::Future>>(task, result); }
inline ref<java::util::concurrent::Future> ExecutorCompletionService::take() { return call_method<SCAPIX_META_STRING("take"), ref<java::util::concurrent::Future>>(); }
inline ref<java::util::concurrent::Future> ExecutorCompletionService::poll() { return call_method<SCAPIX_META_STRING("poll"), ref<java::util::concurrent::Future>>(); }
inline ref<java::util::concurrent::Future> ExecutorCompletionService::poll(jlong timeout, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("poll"), ref<java::util::concurrent::Future>>(timeout, p2); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_EXECUTORCOMPLETIONSERVICE_H
