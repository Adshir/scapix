// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/concurrent/AbstractExecutorService.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_FORKJOINPOOL_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_FORKJOINPOOL_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class Runnable; }
namespace java::lang { class String; }
namespace java::lang { class Thread_UncaughtExceptionHandler; }
namespace java::util { class Collection; }
namespace java::util { class List; }
namespace java::util::concurrent { class Callable; }
namespace java::util::concurrent { class ForkJoinPool_ForkJoinWorkerThreadFactory; }
namespace java::util::concurrent { class ForkJoinPool_ManagedBlocker; }
namespace java::util::concurrent { class ForkJoinTask; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::util::concurrent {

class ForkJoinPool : public object_base<SCAPIX_META_STRING("java/util/concurrent/ForkJoinPool"),
	java::util::concurrent::AbstractExecutorService>
{
public:

	using ManagedBlocker = ForkJoinPool_ManagedBlocker;
	using ForkJoinWorkerThreadFactory = ForkJoinPool_ForkJoinWorkerThreadFactory;

	static ref<java::util::concurrent::ForkJoinPool_ForkJoinWorkerThreadFactory> defaultForkJoinWorkerThreadFactory();

	static ref<ForkJoinPool> new_object();
	static ref<ForkJoinPool> new_object(jint parallelism);
	static ref<ForkJoinPool> new_object(jint parallelism, ref<java::util::concurrent::ForkJoinPool_ForkJoinWorkerThreadFactory> factory, ref<java::lang::Thread_UncaughtExceptionHandler> handler, jboolean asyncMode);
	static ref<java::util::concurrent::ForkJoinPool> commonPool();
	ref<java::lang::Object> invoke(ref<java::util::concurrent::ForkJoinTask> task);
	void execute(ref<java::util::concurrent::ForkJoinTask> task);
	void execute(ref<java::lang::Runnable> task);
	ref<java::util::concurrent::ForkJoinTask> submit(ref<java::util::concurrent::ForkJoinTask> task);
	ref<java::util::concurrent::ForkJoinTask> submit(ref<java::util::concurrent::Callable> task);
	ref<java::util::concurrent::ForkJoinTask> submit(ref<java::lang::Runnable> task, ref<java::lang::Object> result);
	ref<java::util::concurrent::ForkJoinTask> submit(ref<java::lang::Runnable> task);
	ref<java::util::List> invokeAll(ref<java::util::Collection> tasks);
	ref<java::util::concurrent::ForkJoinPool_ForkJoinWorkerThreadFactory> getFactory();
	ref<java::lang::Thread_UncaughtExceptionHandler> getUncaughtExceptionHandler();
	jint getParallelism();
	static jint getCommonPoolParallelism();
	jint getPoolSize();
	jboolean getAsyncMode();
	jint getRunningThreadCount();
	jint getActiveThreadCount();
	jboolean isQuiescent();
	jlong getStealCount();
	jlong getQueuedTaskCount();
	jint getQueuedSubmissionCount();
	jboolean hasQueuedSubmissions();
	ref<java::lang::String> toString();
	void shutdown();
	ref<java::util::List> shutdownNow();
	jboolean isTerminated();
	jboolean isTerminating();
	jboolean isShutdown();
	jboolean awaitTermination(jlong timeout, ref<java::util::concurrent::TimeUnit> p2);
	jboolean awaitQuiescence(jlong timeout, ref<java::util::concurrent::TimeUnit> p2);
	static void managedBlock(ref<java::util::concurrent::ForkJoinPool_ManagedBlocker> blocker);

protected:

	ForkJoinPool(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread_UncaughtExceptionHandler.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/java/util/concurrent/ForkJoinPool_ForkJoinWorkerThreadFactory.h>
#include <scapix/java_api/java/util/concurrent/ForkJoinPool_ManagedBlocker.h>
#include <scapix/java_api/java/util/concurrent/ForkJoinTask.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<java::util::concurrent::ForkJoinPool_ForkJoinWorkerThreadFactory> ForkJoinPool::defaultForkJoinWorkerThreadFactory() { return get_static_field<SCAPIX_META_STRING("defaultForkJoinWorkerThreadFactory"), ref<java::util::concurrent::ForkJoinPool_ForkJoinWorkerThreadFactory>>(); }
inline ref<ForkJoinPool> ForkJoinPool::new_object() { return base_::new_object(); }
inline ref<ForkJoinPool> ForkJoinPool::new_object(jint parallelism) { return base_::new_object(parallelism); }
inline ref<ForkJoinPool> ForkJoinPool::new_object(jint parallelism, ref<java::util::concurrent::ForkJoinPool_ForkJoinWorkerThreadFactory> factory, ref<java::lang::Thread_UncaughtExceptionHandler> handler, jboolean asyncMode) { return base_::new_object(parallelism, factory, handler, asyncMode); }
inline ref<java::util::concurrent::ForkJoinPool> ForkJoinPool::commonPool() { return call_static_method<SCAPIX_META_STRING("commonPool"), ref<java::util::concurrent::ForkJoinPool>>(); }
inline ref<java::lang::Object> ForkJoinPool::invoke(ref<java::util::concurrent::ForkJoinTask> task) { return call_method<SCAPIX_META_STRING("invoke"), ref<java::lang::Object>>(task); }
inline void ForkJoinPool::execute(ref<java::util::concurrent::ForkJoinTask> task) { return call_method<SCAPIX_META_STRING("execute"), void>(task); }
inline void ForkJoinPool::execute(ref<java::lang::Runnable> task) { return call_method<SCAPIX_META_STRING("execute"), void>(task); }
inline ref<java::util::concurrent::ForkJoinTask> ForkJoinPool::submit(ref<java::util::concurrent::ForkJoinTask> task) { return call_method<SCAPIX_META_STRING("submit"), ref<java::util::concurrent::ForkJoinTask>>(task); }
inline ref<java::util::concurrent::ForkJoinTask> ForkJoinPool::submit(ref<java::util::concurrent::Callable> task) { return call_method<SCAPIX_META_STRING("submit"), ref<java::util::concurrent::ForkJoinTask>>(task); }
inline ref<java::util::concurrent::ForkJoinTask> ForkJoinPool::submit(ref<java::lang::Runnable> task, ref<java::lang::Object> result) { return call_method<SCAPIX_META_STRING("submit"), ref<java::util::concurrent::ForkJoinTask>>(task, result); }
inline ref<java::util::concurrent::ForkJoinTask> ForkJoinPool::submit(ref<java::lang::Runnable> task) { return call_method<SCAPIX_META_STRING("submit"), ref<java::util::concurrent::ForkJoinTask>>(task); }
inline ref<java::util::List> ForkJoinPool::invokeAll(ref<java::util::Collection> tasks) { return call_method<SCAPIX_META_STRING("invokeAll"), ref<java::util::List>>(tasks); }
inline ref<java::util::concurrent::ForkJoinPool_ForkJoinWorkerThreadFactory> ForkJoinPool::getFactory() { return call_method<SCAPIX_META_STRING("getFactory"), ref<java::util::concurrent::ForkJoinPool_ForkJoinWorkerThreadFactory>>(); }
inline ref<java::lang::Thread_UncaughtExceptionHandler> ForkJoinPool::getUncaughtExceptionHandler() { return call_method<SCAPIX_META_STRING("getUncaughtExceptionHandler"), ref<java::lang::Thread_UncaughtExceptionHandler>>(); }
inline jint ForkJoinPool::getParallelism() { return call_method<SCAPIX_META_STRING("getParallelism"), jint>(); }
inline jint ForkJoinPool::getCommonPoolParallelism() { return call_static_method<SCAPIX_META_STRING("getCommonPoolParallelism"), jint>(); }
inline jint ForkJoinPool::getPoolSize() { return call_method<SCAPIX_META_STRING("getPoolSize"), jint>(); }
inline jboolean ForkJoinPool::getAsyncMode() { return call_method<SCAPIX_META_STRING("getAsyncMode"), jboolean>(); }
inline jint ForkJoinPool::getRunningThreadCount() { return call_method<SCAPIX_META_STRING("getRunningThreadCount"), jint>(); }
inline jint ForkJoinPool::getActiveThreadCount() { return call_method<SCAPIX_META_STRING("getActiveThreadCount"), jint>(); }
inline jboolean ForkJoinPool::isQuiescent() { return call_method<SCAPIX_META_STRING("isQuiescent"), jboolean>(); }
inline jlong ForkJoinPool::getStealCount() { return call_method<SCAPIX_META_STRING("getStealCount"), jlong>(); }
inline jlong ForkJoinPool::getQueuedTaskCount() { return call_method<SCAPIX_META_STRING("getQueuedTaskCount"), jlong>(); }
inline jint ForkJoinPool::getQueuedSubmissionCount() { return call_method<SCAPIX_META_STRING("getQueuedSubmissionCount"), jint>(); }
inline jboolean ForkJoinPool::hasQueuedSubmissions() { return call_method<SCAPIX_META_STRING("hasQueuedSubmissions"), jboolean>(); }
inline ref<java::lang::String> ForkJoinPool::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline void ForkJoinPool::shutdown() { return call_method<SCAPIX_META_STRING("shutdown"), void>(); }
inline ref<java::util::List> ForkJoinPool::shutdownNow() { return call_method<SCAPIX_META_STRING("shutdownNow"), ref<java::util::List>>(); }
inline jboolean ForkJoinPool::isTerminated() { return call_method<SCAPIX_META_STRING("isTerminated"), jboolean>(); }
inline jboolean ForkJoinPool::isTerminating() { return call_method<SCAPIX_META_STRING("isTerminating"), jboolean>(); }
inline jboolean ForkJoinPool::isShutdown() { return call_method<SCAPIX_META_STRING("isShutdown"), jboolean>(); }
inline jboolean ForkJoinPool::awaitTermination(jlong timeout, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("awaitTermination"), jboolean>(timeout, p2); }
inline jboolean ForkJoinPool::awaitQuiescence(jlong timeout, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("awaitQuiescence"), jboolean>(timeout, p2); }
inline void ForkJoinPool::managedBlock(ref<java::util::concurrent::ForkJoinPool_ManagedBlocker> blocker) { return call_static_method<SCAPIX_META_STRING("managedBlock"), void>(blocker); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_FORKJOINPOOL_H
