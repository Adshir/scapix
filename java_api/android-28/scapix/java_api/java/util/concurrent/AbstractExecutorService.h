// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/ExecutorService.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_ABSTRACTEXECUTORSERVICE_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_ABSTRACTEXECUTORSERVICE_H

namespace scapix::java_api {

namespace java::lang { class Runnable; }
namespace java::util { class Collection; }
namespace java::util { class List; }
namespace java::util::concurrent { class Callable; }
namespace java::util::concurrent { class Future; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::util::concurrent {

class AbstractExecutorService : public object_base<SCAPIX_META_STRING("java/util/concurrent/AbstractExecutorService"),
	java::lang::Object,
	java::util::concurrent::ExecutorService>
{
public:

	static ref<AbstractExecutorService> new_object();
	ref<java::util::concurrent::Future> submit(ref<java::lang::Runnable> task);
	ref<java::util::concurrent::Future> submit(ref<java::lang::Runnable> task, ref<java::lang::Object> result);
	ref<java::util::concurrent::Future> submit(ref<java::util::concurrent::Callable> task);
	ref<java::lang::Object> invokeAny(ref<java::util::Collection> tasks);
	ref<java::lang::Object> invokeAny(ref<java::util::Collection> tasks, jlong timeout, ref<java::util::concurrent::TimeUnit> p3);
	ref<java::util::List> invokeAll(ref<java::util::Collection> tasks);
	ref<java::util::List> invokeAll(ref<java::util::Collection> tasks, jlong timeout, ref<java::util::concurrent::TimeUnit> p3);

protected:

	AbstractExecutorService(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/java/util/concurrent/Future.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<AbstractExecutorService> AbstractExecutorService::new_object() { return base_::new_object(); }
inline ref<java::util::concurrent::Future> AbstractExecutorService::submit(ref<java::lang::Runnable> task) { return call_method<SCAPIX_META_STRING("submit"), ref<java::util::concurrent::Future>>(task); }
inline ref<java::util::concurrent::Future> AbstractExecutorService::submit(ref<java::lang::Runnable> task, ref<java::lang::Object> result) { return call_method<SCAPIX_META_STRING("submit"), ref<java::util::concurrent::Future>>(task, result); }
inline ref<java::util::concurrent::Future> AbstractExecutorService::submit(ref<java::util::concurrent::Callable> task) { return call_method<SCAPIX_META_STRING("submit"), ref<java::util::concurrent::Future>>(task); }
inline ref<java::lang::Object> AbstractExecutorService::invokeAny(ref<java::util::Collection> tasks) { return call_method<SCAPIX_META_STRING("invokeAny"), ref<java::lang::Object>>(tasks); }
inline ref<java::lang::Object> AbstractExecutorService::invokeAny(ref<java::util::Collection> tasks, jlong timeout, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("invokeAny"), ref<java::lang::Object>>(tasks, timeout, p3); }
inline ref<java::util::List> AbstractExecutorService::invokeAll(ref<java::util::Collection> tasks) { return call_method<SCAPIX_META_STRING("invokeAll"), ref<java::util::List>>(tasks); }
inline ref<java::util::List> AbstractExecutorService::invokeAll(ref<java::util::Collection> tasks, jlong timeout, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("invokeAll"), ref<java::util::List>>(tasks, timeout, p3); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_ABSTRACTEXECUTORSERVICE_H
