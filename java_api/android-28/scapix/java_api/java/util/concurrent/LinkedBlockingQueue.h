// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractQueue.h>
#include <scapix/java_api/java/util/concurrent/BlockingQueue.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_LINKEDBLOCKINGQUEUE_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_LINKEDBLOCKINGQUEUE_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::util { class Collection; }
namespace java::util { class Iterator; }
namespace java::util { class Spliterator; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::util::concurrent {

class LinkedBlockingQueue : public object_base<SCAPIX_META_STRING("java/util/concurrent/LinkedBlockingQueue"),
	java::util::AbstractQueue,
	java::util::concurrent::BlockingQueue,
	java::io::Serializable>
{
public:

	static ref<LinkedBlockingQueue> new_object();
	static ref<LinkedBlockingQueue> new_object(jint capacity);
	static ref<LinkedBlockingQueue> new_object(ref<java::util::Collection> c);
	jint size();
	jint remainingCapacity();
	void put(ref<java::lang::Object> e);
	jboolean offer(ref<java::lang::Object> e, jlong timeout, ref<java::util::concurrent::TimeUnit> p3);
	jboolean offer(ref<java::lang::Object> e);
	ref<java::lang::Object> take();
	ref<java::lang::Object> poll(jlong timeout, ref<java::util::concurrent::TimeUnit> p2);
	ref<java::lang::Object> poll();
	ref<java::lang::Object> peek();
	jboolean remove(ref<java::lang::Object> o);
	jboolean contains(ref<java::lang::Object> o);
	ref<link::java::array<java::lang::Object>> toArray();
	ref<link::java::array<java::lang::Object>> toArray(ref<link::java::array<java::lang::Object>> a);
	ref<java::lang::String> toString();
	void clear();
	jint drainTo(ref<java::util::Collection> c);
	jint drainTo(ref<java::util::Collection> c, jint maxElements);
	ref<java::util::Iterator> iterator();
	ref<java::util::Spliterator> spliterator();

protected:

	LinkedBlockingQueue(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<LinkedBlockingQueue> LinkedBlockingQueue::new_object() { return base_::new_object(); }
inline ref<LinkedBlockingQueue> LinkedBlockingQueue::new_object(jint capacity) { return base_::new_object(capacity); }
inline ref<LinkedBlockingQueue> LinkedBlockingQueue::new_object(ref<java::util::Collection> c) { return base_::new_object(c); }
inline jint LinkedBlockingQueue::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jint LinkedBlockingQueue::remainingCapacity() { return call_method<SCAPIX_META_STRING("remainingCapacity"), jint>(); }
inline void LinkedBlockingQueue::put(ref<java::lang::Object> e) { return call_method<SCAPIX_META_STRING("put"), void>(e); }
inline jboolean LinkedBlockingQueue::offer(ref<java::lang::Object> e, jlong timeout, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("offer"), jboolean>(e, timeout, p3); }
inline jboolean LinkedBlockingQueue::offer(ref<java::lang::Object> e) { return call_method<SCAPIX_META_STRING("offer"), jboolean>(e); }
inline ref<java::lang::Object> LinkedBlockingQueue::take() { return call_method<SCAPIX_META_STRING("take"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> LinkedBlockingQueue::poll(jlong timeout, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("poll"), ref<java::lang::Object>>(timeout, p2); }
inline ref<java::lang::Object> LinkedBlockingQueue::poll() { return call_method<SCAPIX_META_STRING("poll"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> LinkedBlockingQueue::peek() { return call_method<SCAPIX_META_STRING("peek"), ref<java::lang::Object>>(); }
inline jboolean LinkedBlockingQueue::remove(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("remove"), jboolean>(o); }
inline jboolean LinkedBlockingQueue::contains(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(o); }
inline ref<link::java::array<java::lang::Object>> LinkedBlockingQueue::toArray() { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<java::lang::Object>>>(); }
inline ref<link::java::array<java::lang::Object>> LinkedBlockingQueue::toArray(ref<link::java::array<java::lang::Object>> a) { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<java::lang::Object>>>(a); }
inline ref<java::lang::String> LinkedBlockingQueue::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline void LinkedBlockingQueue::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline jint LinkedBlockingQueue::drainTo(ref<java::util::Collection> c) { return call_method<SCAPIX_META_STRING("drainTo"), jint>(c); }
inline jint LinkedBlockingQueue::drainTo(ref<java::util::Collection> c, jint maxElements) { return call_method<SCAPIX_META_STRING("drainTo"), jint>(c, maxElements); }
inline ref<java::util::Iterator> LinkedBlockingQueue::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::Iterator>>(); }
inline ref<java::util::Spliterator> LinkedBlockingQueue::spliterator() { return call_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator>>(); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_LINKEDBLOCKINGQUEUE_H
