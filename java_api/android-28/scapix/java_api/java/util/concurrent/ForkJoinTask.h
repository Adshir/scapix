// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/Future.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_FORKJOINTASK_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_FORKJOINTASK_H

namespace scapix::java_api {

namespace java::lang { class Runnable; }
namespace java::lang { class Throwable; }
namespace java::util { class Collection; }
namespace java::util::concurrent { class Callable; }
namespace java::util::concurrent { class ForkJoinPool; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::util::concurrent {

class ForkJoinTask : public object_base<SCAPIX_META_STRING("java/util/concurrent/ForkJoinTask"),
	java::lang::Object,
	java::util::concurrent::Future,
	java::io::Serializable>
{
public:

	static ref<ForkJoinTask> new_object();
	ref<java::util::concurrent::ForkJoinTask> fork();
	ref<java::lang::Object> join();
	ref<java::lang::Object> invoke();
	static void invokeAll(ref<java::util::concurrent::ForkJoinTask> t1, ref<java::util::concurrent::ForkJoinTask> t2);
	static void invokeAll(ref<link::java::array<java::util::concurrent::ForkJoinTask>> tasks);
	static ref<java::util::Collection> invokeAll(ref<java::util::Collection> tasks);
	jboolean cancel(jboolean mayInterruptIfRunning);
	jboolean isDone();
	jboolean isCancelled();
	jboolean isCompletedAbnormally();
	jboolean isCompletedNormally();
	ref<java::lang::Throwable> getException();
	void completeExceptionally(ref<java::lang::Throwable> ex);
	void complete(ref<java::lang::Object> value);
	void quietlyComplete();
	ref<java::lang::Object> get();
	ref<java::lang::Object> get(jlong timeout, ref<java::util::concurrent::TimeUnit> p2);
	void quietlyJoin();
	void quietlyInvoke();
	static void helpQuiesce();
	void reinitialize();
	static ref<java::util::concurrent::ForkJoinPool> getPool();
	static jboolean inForkJoinPool();
	jboolean tryUnfork();
	static jint getQueuedTaskCount();
	static jint getSurplusQueuedTaskCount();
	ref<java::lang::Object> getRawResult();
	jshort getForkJoinTaskTag();
	jshort setForkJoinTaskTag(jshort newValue);
	jboolean compareAndSetForkJoinTaskTag(jshort expect, jshort update);
	static ref<java::util::concurrent::ForkJoinTask> adapt(ref<java::lang::Runnable> runnable);
	static ref<java::util::concurrent::ForkJoinTask> adapt(ref<java::lang::Runnable> runnable, ref<java::lang::Object> result);
	static ref<java::util::concurrent::ForkJoinTask> adapt(ref<java::util::concurrent::Callable> callable);

protected:

	ForkJoinTask(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/java/util/concurrent/ForkJoinPool.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<ForkJoinTask> ForkJoinTask::new_object() { return base_::new_object(); }
inline ref<java::util::concurrent::ForkJoinTask> ForkJoinTask::fork() { return call_method<SCAPIX_META_STRING("fork"), ref<java::util::concurrent::ForkJoinTask>>(); }
inline ref<java::lang::Object> ForkJoinTask::join() { return call_method<SCAPIX_META_STRING("join"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> ForkJoinTask::invoke() { return call_method<SCAPIX_META_STRING("invoke"), ref<java::lang::Object>>(); }
inline void ForkJoinTask::invokeAll(ref<java::util::concurrent::ForkJoinTask> t1, ref<java::util::concurrent::ForkJoinTask> t2) { return call_static_method<SCAPIX_META_STRING("invokeAll"), void>(t1, t2); }
inline void ForkJoinTask::invokeAll(ref<link::java::array<java::util::concurrent::ForkJoinTask>> tasks) { return call_static_method<SCAPIX_META_STRING("invokeAll"), void>(tasks); }
inline ref<java::util::Collection> ForkJoinTask::invokeAll(ref<java::util::Collection> tasks) { return call_static_method<SCAPIX_META_STRING("invokeAll"), ref<java::util::Collection>>(tasks); }
inline jboolean ForkJoinTask::cancel(jboolean mayInterruptIfRunning) { return call_method<SCAPIX_META_STRING("cancel"), jboolean>(mayInterruptIfRunning); }
inline jboolean ForkJoinTask::isDone() { return call_method<SCAPIX_META_STRING("isDone"), jboolean>(); }
inline jboolean ForkJoinTask::isCancelled() { return call_method<SCAPIX_META_STRING("isCancelled"), jboolean>(); }
inline jboolean ForkJoinTask::isCompletedAbnormally() { return call_method<SCAPIX_META_STRING("isCompletedAbnormally"), jboolean>(); }
inline jboolean ForkJoinTask::isCompletedNormally() { return call_method<SCAPIX_META_STRING("isCompletedNormally"), jboolean>(); }
inline ref<java::lang::Throwable> ForkJoinTask::getException() { return call_method<SCAPIX_META_STRING("getException"), ref<java::lang::Throwable>>(); }
inline void ForkJoinTask::completeExceptionally(ref<java::lang::Throwable> ex) { return call_method<SCAPIX_META_STRING("completeExceptionally"), void>(ex); }
inline void ForkJoinTask::complete(ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("complete"), void>(value); }
inline void ForkJoinTask::quietlyComplete() { return call_method<SCAPIX_META_STRING("quietlyComplete"), void>(); }
inline ref<java::lang::Object> ForkJoinTask::get() { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> ForkJoinTask::get(jlong timeout, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(timeout, p2); }
inline void ForkJoinTask::quietlyJoin() { return call_method<SCAPIX_META_STRING("quietlyJoin"), void>(); }
inline void ForkJoinTask::quietlyInvoke() { return call_method<SCAPIX_META_STRING("quietlyInvoke"), void>(); }
inline void ForkJoinTask::helpQuiesce() { return call_static_method<SCAPIX_META_STRING("helpQuiesce"), void>(); }
inline void ForkJoinTask::reinitialize() { return call_method<SCAPIX_META_STRING("reinitialize"), void>(); }
inline ref<java::util::concurrent::ForkJoinPool> ForkJoinTask::getPool() { return call_static_method<SCAPIX_META_STRING("getPool"), ref<java::util::concurrent::ForkJoinPool>>(); }
inline jboolean ForkJoinTask::inForkJoinPool() { return call_static_method<SCAPIX_META_STRING("inForkJoinPool"), jboolean>(); }
inline jboolean ForkJoinTask::tryUnfork() { return call_method<SCAPIX_META_STRING("tryUnfork"), jboolean>(); }
inline jint ForkJoinTask::getQueuedTaskCount() { return call_static_method<SCAPIX_META_STRING("getQueuedTaskCount"), jint>(); }
inline jint ForkJoinTask::getSurplusQueuedTaskCount() { return call_static_method<SCAPIX_META_STRING("getSurplusQueuedTaskCount"), jint>(); }
inline ref<java::lang::Object> ForkJoinTask::getRawResult() { return call_method<SCAPIX_META_STRING("getRawResult"), ref<java::lang::Object>>(); }
inline jshort ForkJoinTask::getForkJoinTaskTag() { return call_method<SCAPIX_META_STRING("getForkJoinTaskTag"), jshort>(); }
inline jshort ForkJoinTask::setForkJoinTaskTag(jshort newValue) { return call_method<SCAPIX_META_STRING("setForkJoinTaskTag"), jshort>(newValue); }
inline jboolean ForkJoinTask::compareAndSetForkJoinTaskTag(jshort expect, jshort update) { return call_method<SCAPIX_META_STRING("compareAndSetForkJoinTaskTag"), jboolean>(expect, update); }
inline ref<java::util::concurrent::ForkJoinTask> ForkJoinTask::adapt(ref<java::lang::Runnable> runnable) { return call_static_method<SCAPIX_META_STRING("adapt"), ref<java::util::concurrent::ForkJoinTask>>(runnable); }
inline ref<java::util::concurrent::ForkJoinTask> ForkJoinTask::adapt(ref<java::lang::Runnable> runnable, ref<java::lang::Object> result) { return call_static_method<SCAPIX_META_STRING("adapt"), ref<java::util::concurrent::ForkJoinTask>>(runnable, result); }
inline ref<java::util::concurrent::ForkJoinTask> ForkJoinTask::adapt(ref<java::util::concurrent::Callable> callable) { return call_static_method<SCAPIX_META_STRING("adapt"), ref<java::util::concurrent::ForkJoinTask>>(callable); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_FORKJOINTASK_H
