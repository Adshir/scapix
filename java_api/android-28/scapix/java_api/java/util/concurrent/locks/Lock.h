// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_LOCK_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_LOCK_H

namespace scapix::java_api {

namespace java::util::concurrent { class TimeUnit; }
namespace java::util::concurrent::locks { class Condition; }

namespace java::util::concurrent::locks {

class Lock : public object_base<SCAPIX_META_STRING("java/util/concurrent/locks/Lock"),
	java::lang::Object>
{
public:

	void lock();
	void lockInterruptibly();
	jboolean tryLock();
	jboolean tryLock(jlong p1, ref<java::util::concurrent::TimeUnit> p2);
	void unlock();
	ref<java::util::concurrent::locks::Condition> newCondition();

protected:

	Lock(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent::locks
} // namespace scapix::java_api

#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#include <scapix/java_api/java/util/concurrent/locks/Condition.h>

namespace scapix::java_api {
namespace java::util::concurrent::locks {

inline void Lock::lock() { return call_method<SCAPIX_META_STRING("lock"), void>(); }
inline void Lock::lockInterruptibly() { return call_method<SCAPIX_META_STRING("lockInterruptibly"), void>(); }
inline jboolean Lock::tryLock() { return call_method<SCAPIX_META_STRING("tryLock"), jboolean>(); }
inline jboolean Lock::tryLock(jlong p1, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("tryLock"), jboolean>(p1, p2); }
inline void Lock::unlock() { return call_method<SCAPIX_META_STRING("unlock"), void>(); }
inline ref<java::util::concurrent::locks::Condition> Lock::newCondition() { return call_method<SCAPIX_META_STRING("newCondition"), ref<java::util::concurrent::locks::Condition>>(); }

} // namespace java::util::concurrent::locks
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_LOCK_H
