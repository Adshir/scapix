// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/locks/Lock.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTLOCK_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTLOCK_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::lang { class Thread; }
namespace java::util::concurrent { class TimeUnit; }
namespace java::util::concurrent::locks { class Condition; }

namespace java::util::concurrent::locks {

class ReentrantLock : public object_base<SCAPIX_META_STRING("java/util/concurrent/locks/ReentrantLock"),
	java::lang::Object,
	java::util::concurrent::locks::Lock,
	java::io::Serializable>
{
public:

	static ref<ReentrantLock> new_object();
	static ref<ReentrantLock> new_object(jboolean fair);
	void lock();
	void lockInterruptibly();
	jboolean tryLock();
	jboolean tryLock(jlong timeout, ref<java::util::concurrent::TimeUnit> p2);
	void unlock();
	ref<java::util::concurrent::locks::Condition> newCondition();
	jint getHoldCount();
	jboolean isHeldByCurrentThread();
	jboolean isLocked();
	jboolean isFair();
	jboolean hasQueuedThreads();
	jboolean hasQueuedThread(ref<java::lang::Thread> thread);
	jint getQueueLength();
	jboolean hasWaiters(ref<java::util::concurrent::locks::Condition> condition);
	jint getWaitQueueLength(ref<java::util::concurrent::locks::Condition> condition);
	ref<java::lang::String> toString();

protected:

	ReentrantLock(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent::locks
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#include <scapix/java_api/java/util/concurrent/locks/Condition.h>

namespace scapix::java_api {
namespace java::util::concurrent::locks {

inline ref<ReentrantLock> ReentrantLock::new_object() { return base_::new_object(); }
inline ref<ReentrantLock> ReentrantLock::new_object(jboolean fair) { return base_::new_object(fair); }
inline void ReentrantLock::lock() { return call_method<SCAPIX_META_STRING("lock"), void>(); }
inline void ReentrantLock::lockInterruptibly() { return call_method<SCAPIX_META_STRING("lockInterruptibly"), void>(); }
inline jboolean ReentrantLock::tryLock() { return call_method<SCAPIX_META_STRING("tryLock"), jboolean>(); }
inline jboolean ReentrantLock::tryLock(jlong timeout, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("tryLock"), jboolean>(timeout, p2); }
inline void ReentrantLock::unlock() { return call_method<SCAPIX_META_STRING("unlock"), void>(); }
inline ref<java::util::concurrent::locks::Condition> ReentrantLock::newCondition() { return call_method<SCAPIX_META_STRING("newCondition"), ref<java::util::concurrent::locks::Condition>>(); }
inline jint ReentrantLock::getHoldCount() { return call_method<SCAPIX_META_STRING("getHoldCount"), jint>(); }
inline jboolean ReentrantLock::isHeldByCurrentThread() { return call_method<SCAPIX_META_STRING("isHeldByCurrentThread"), jboolean>(); }
inline jboolean ReentrantLock::isLocked() { return call_method<SCAPIX_META_STRING("isLocked"), jboolean>(); }
inline jboolean ReentrantLock::isFair() { return call_method<SCAPIX_META_STRING("isFair"), jboolean>(); }
inline jboolean ReentrantLock::hasQueuedThreads() { return call_method<SCAPIX_META_STRING("hasQueuedThreads"), jboolean>(); }
inline jboolean ReentrantLock::hasQueuedThread(ref<java::lang::Thread> thread) { return call_method<SCAPIX_META_STRING("hasQueuedThread"), jboolean>(thread); }
inline jint ReentrantLock::getQueueLength() { return call_method<SCAPIX_META_STRING("getQueueLength"), jint>(); }
inline jboolean ReentrantLock::hasWaiters(ref<java::util::concurrent::locks::Condition> condition) { return call_method<SCAPIX_META_STRING("hasWaiters"), jboolean>(condition); }
inline jint ReentrantLock::getWaitQueueLength(ref<java::util::concurrent::locks::Condition> condition) { return call_method<SCAPIX_META_STRING("getWaitQueueLength"), jint>(condition); }
inline ref<java::lang::String> ReentrantLock::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::util::concurrent::locks
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTLOCK_H
