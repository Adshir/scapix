// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/locks/Lock.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_WRITELOCK_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_WRITELOCK_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util::concurrent { class TimeUnit; }
namespace java::util::concurrent::locks { class Condition; }

namespace java::util::concurrent::locks {

class ReentrantReadWriteLock_WriteLock : public object_base<SCAPIX_META_STRING("java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock"),
	java::lang::Object,
	java::util::concurrent::locks::Lock,
	java::io::Serializable>
{
public:

	void lock();
	void lockInterruptibly();
	jboolean tryLock();
	jboolean tryLock(jlong timeout, ref<java::util::concurrent::TimeUnit> p2);
	void unlock();
	ref<java::util::concurrent::locks::Condition> newCondition();
	ref<java::lang::String> toString();
	jboolean isHeldByCurrentThread();
	jint getHoldCount();

protected:

	ReentrantReadWriteLock_WriteLock(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent::locks
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#include <scapix/java_api/java/util/concurrent/locks/Condition.h>

namespace scapix::java_api {
namespace java::util::concurrent::locks {

inline void ReentrantReadWriteLock_WriteLock::lock() { return call_method<SCAPIX_META_STRING("lock"), void>(); }
inline void ReentrantReadWriteLock_WriteLock::lockInterruptibly() { return call_method<SCAPIX_META_STRING("lockInterruptibly"), void>(); }
inline jboolean ReentrantReadWriteLock_WriteLock::tryLock() { return call_method<SCAPIX_META_STRING("tryLock"), jboolean>(); }
inline jboolean ReentrantReadWriteLock_WriteLock::tryLock(jlong timeout, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("tryLock"), jboolean>(timeout, p2); }
inline void ReentrantReadWriteLock_WriteLock::unlock() { return call_method<SCAPIX_META_STRING("unlock"), void>(); }
inline ref<java::util::concurrent::locks::Condition> ReentrantReadWriteLock_WriteLock::newCondition() { return call_method<SCAPIX_META_STRING("newCondition"), ref<java::util::concurrent::locks::Condition>>(); }
inline ref<java::lang::String> ReentrantReadWriteLock_WriteLock::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean ReentrantReadWriteLock_WriteLock::isHeldByCurrentThread() { return call_method<SCAPIX_META_STRING("isHeldByCurrentThread"), jboolean>(); }
inline jint ReentrantReadWriteLock_WriteLock::getHoldCount() { return call_method<SCAPIX_META_STRING("getHoldCount"), jint>(); }

} // namespace java::util::concurrent::locks
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_WRITELOCK_H
