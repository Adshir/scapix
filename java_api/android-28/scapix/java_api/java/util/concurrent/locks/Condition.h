// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_CONDITION_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_CONDITION_H

namespace scapix::java_api {

namespace java::util { class Date; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::util::concurrent::locks {

class Condition : public object_base<SCAPIX_META_STRING("java/util/concurrent/locks/Condition"),
	java::lang::Object>
{
public:

	void await();
	void awaitUninterruptibly();
	jlong awaitNanos(jlong p1);
	jboolean await(jlong p1, ref<java::util::concurrent::TimeUnit> p2);
	jboolean awaitUntil(ref<java::util::Date> p1);
	void signal();
	void signalAll();

protected:

	Condition(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent::locks
} // namespace scapix::java_api

#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent::locks {

inline void Condition::await() { return call_method<SCAPIX_META_STRING("await"), void>(); }
inline void Condition::awaitUninterruptibly() { return call_method<SCAPIX_META_STRING("awaitUninterruptibly"), void>(); }
inline jlong Condition::awaitNanos(jlong p1) { return call_method<SCAPIX_META_STRING("awaitNanos"), jlong>(p1); }
inline jboolean Condition::await(jlong p1, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("await"), jboolean>(p1, p2); }
inline jboolean Condition::awaitUntil(ref<java::util::Date> p1) { return call_method<SCAPIX_META_STRING("awaitUntil"), jboolean>(p1); }
inline void Condition::signal() { return call_method<SCAPIX_META_STRING("signal"), void>(); }
inline void Condition::signalAll() { return call_method<SCAPIX_META_STRING("signalAll"), void>(); }

} // namespace java::util::concurrent::locks
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_LOCKS_CONDITION_H
