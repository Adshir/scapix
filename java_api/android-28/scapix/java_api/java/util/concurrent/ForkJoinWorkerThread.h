// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Thread.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_FORKJOINWORKERTHREAD_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_FORKJOINWORKERTHREAD_H

namespace scapix::java_api {

namespace java::util::concurrent { class ForkJoinPool; }

namespace java::util::concurrent {

class ForkJoinWorkerThread : public object_base<SCAPIX_META_STRING("java/util/concurrent/ForkJoinWorkerThread"),
	java::lang::Thread>
{
public:

	ref<java::util::concurrent::ForkJoinPool> getPool();
	jint getPoolIndex();
	void run();

protected:

	ForkJoinWorkerThread(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/util/concurrent/ForkJoinPool.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<java::util::concurrent::ForkJoinPool> ForkJoinWorkerThread::getPool() { return call_method<SCAPIX_META_STRING("getPool"), ref<java::util::concurrent::ForkJoinPool>>(); }
inline jint ForkJoinWorkerThread::getPoolIndex() { return call_method<SCAPIX_META_STRING("getPoolIndex"), jint>(); }
inline void ForkJoinWorkerThread::run() { return call_method<SCAPIX_META_STRING("run"), void>(); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_FORKJOINWORKERTHREAD_H
