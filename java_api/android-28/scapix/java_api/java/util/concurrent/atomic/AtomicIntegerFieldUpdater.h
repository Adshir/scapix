// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERFIELDUPDATER_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERFIELDUPDATER_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class String; }
namespace java::util::function { class IntBinaryOperator; }
namespace java::util::function { class IntUnaryOperator; }

namespace java::util::concurrent::atomic {

class AtomicIntegerFieldUpdater : public object_base<SCAPIX_META_STRING("java/util/concurrent/atomic/AtomicIntegerFieldUpdater"),
	java::lang::Object>
{
public:

	static ref<java::util::concurrent::atomic::AtomicIntegerFieldUpdater> newUpdater(ref<java::lang::Class> tclass, ref<java::lang::String> fieldName);
	jboolean compareAndSet(ref<java::lang::Object> p1, jint p2, jint p3);
	jboolean weakCompareAndSet(ref<java::lang::Object> p1, jint p2, jint p3);
	void set(ref<java::lang::Object> p1, jint p2);
	void lazySet(ref<java::lang::Object> p1, jint p2);
	jint get(ref<java::lang::Object> p1);
	jint getAndSet(ref<java::lang::Object> obj, jint newValue);
	jint getAndIncrement(ref<java::lang::Object> obj);
	jint getAndDecrement(ref<java::lang::Object> obj);
	jint getAndAdd(ref<java::lang::Object> obj, jint delta);
	jint incrementAndGet(ref<java::lang::Object> obj);
	jint decrementAndGet(ref<java::lang::Object> obj);
	jint addAndGet(ref<java::lang::Object> obj, jint delta);
	jint getAndUpdate(ref<java::lang::Object> obj, ref<java::util::function::IntUnaryOperator> updateFunction);
	jint updateAndGet(ref<java::lang::Object> obj, ref<java::util::function::IntUnaryOperator> updateFunction);
	jint getAndAccumulate(ref<java::lang::Object> obj, jint x, ref<java::util::function::IntBinaryOperator> accumulatorFunction);
	jint accumulateAndGet(ref<java::lang::Object> obj, jint x, ref<java::util::function::IntBinaryOperator> accumulatorFunction);

protected:

	AtomicIntegerFieldUpdater(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent::atomic
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/IntBinaryOperator.h>
#include <scapix/java_api/java/util/function/IntUnaryOperator.h>

namespace scapix::java_api {
namespace java::util::concurrent::atomic {

inline ref<java::util::concurrent::atomic::AtomicIntegerFieldUpdater> AtomicIntegerFieldUpdater::newUpdater(ref<java::lang::Class> tclass, ref<java::lang::String> fieldName) { return call_static_method<SCAPIX_META_STRING("newUpdater"), ref<java::util::concurrent::atomic::AtomicIntegerFieldUpdater>>(tclass, fieldName); }
inline jboolean AtomicIntegerFieldUpdater::compareAndSet(ref<java::lang::Object> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("compareAndSet"), jboolean>(p1, p2, p3); }
inline jboolean AtomicIntegerFieldUpdater::weakCompareAndSet(ref<java::lang::Object> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("weakCompareAndSet"), jboolean>(p1, p2, p3); }
inline void AtomicIntegerFieldUpdater::set(ref<java::lang::Object> p1, jint p2) { return call_method<SCAPIX_META_STRING("set"), void>(p1, p2); }
inline void AtomicIntegerFieldUpdater::lazySet(ref<java::lang::Object> p1, jint p2) { return call_method<SCAPIX_META_STRING("lazySet"), void>(p1, p2); }
inline jint AtomicIntegerFieldUpdater::get(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("get"), jint>(p1); }
inline jint AtomicIntegerFieldUpdater::getAndSet(ref<java::lang::Object> obj, jint newValue) { return call_method<SCAPIX_META_STRING("getAndSet"), jint>(obj, newValue); }
inline jint AtomicIntegerFieldUpdater::getAndIncrement(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("getAndIncrement"), jint>(obj); }
inline jint AtomicIntegerFieldUpdater::getAndDecrement(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("getAndDecrement"), jint>(obj); }
inline jint AtomicIntegerFieldUpdater::getAndAdd(ref<java::lang::Object> obj, jint delta) { return call_method<SCAPIX_META_STRING("getAndAdd"), jint>(obj, delta); }
inline jint AtomicIntegerFieldUpdater::incrementAndGet(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("incrementAndGet"), jint>(obj); }
inline jint AtomicIntegerFieldUpdater::decrementAndGet(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("decrementAndGet"), jint>(obj); }
inline jint AtomicIntegerFieldUpdater::addAndGet(ref<java::lang::Object> obj, jint delta) { return call_method<SCAPIX_META_STRING("addAndGet"), jint>(obj, delta); }
inline jint AtomicIntegerFieldUpdater::getAndUpdate(ref<java::lang::Object> obj, ref<java::util::function::IntUnaryOperator> updateFunction) { return call_method<SCAPIX_META_STRING("getAndUpdate"), jint>(obj, updateFunction); }
inline jint AtomicIntegerFieldUpdater::updateAndGet(ref<java::lang::Object> obj, ref<java::util::function::IntUnaryOperator> updateFunction) { return call_method<SCAPIX_META_STRING("updateAndGet"), jint>(obj, updateFunction); }
inline jint AtomicIntegerFieldUpdater::getAndAccumulate(ref<java::lang::Object> obj, jint x, ref<java::util::function::IntBinaryOperator> accumulatorFunction) { return call_method<SCAPIX_META_STRING("getAndAccumulate"), jint>(obj, x, accumulatorFunction); }
inline jint AtomicIntegerFieldUpdater::accumulateAndGet(ref<java::lang::Object> obj, jint x, ref<java::util::function::IntBinaryOperator> accumulatorFunction) { return call_method<SCAPIX_META_STRING("accumulateAndGet"), jint>(obj, x, accumulatorFunction); }

} // namespace java::util::concurrent::atomic
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERFIELDUPDATER_H
