// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICSTAMPEDREFERENCE_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICSTAMPEDREFERENCE_H

namespace scapix::java_api {
namespace java::util::concurrent::atomic {

class AtomicStampedReference : public object_base<SCAPIX_META_STRING("java/util/concurrent/atomic/AtomicStampedReference"),
	java::lang::Object>
{
public:

	static ref<AtomicStampedReference> new_object(ref<java::lang::Object> initialRef, jint initialStamp);
	ref<java::lang::Object> getReference();
	jint getStamp();
	ref<java::lang::Object> get(ref<link::java::array<jint>> stampHolder);
	jboolean weakCompareAndSet(ref<java::lang::Object> expectedReference, ref<java::lang::Object> newReference, jint expectedStamp, jint newStamp);
	jboolean compareAndSet(ref<java::lang::Object> expectedReference, ref<java::lang::Object> newReference, jint expectedStamp, jint newStamp);
	void set(ref<java::lang::Object> newReference, jint newStamp);
	jboolean attemptStamp(ref<java::lang::Object> expectedReference, jint newStamp);

protected:

	AtomicStampedReference(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent::atomic
} // namespace scapix::java_api


namespace scapix::java_api {
namespace java::util::concurrent::atomic {

inline ref<AtomicStampedReference> AtomicStampedReference::new_object(ref<java::lang::Object> initialRef, jint initialStamp) { return base_::new_object(initialRef, initialStamp); }
inline ref<java::lang::Object> AtomicStampedReference::getReference() { return call_method<SCAPIX_META_STRING("getReference"), ref<java::lang::Object>>(); }
inline jint AtomicStampedReference::getStamp() { return call_method<SCAPIX_META_STRING("getStamp"), jint>(); }
inline ref<java::lang::Object> AtomicStampedReference::get(ref<link::java::array<jint>> stampHolder) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(stampHolder); }
inline jboolean AtomicStampedReference::weakCompareAndSet(ref<java::lang::Object> expectedReference, ref<java::lang::Object> newReference, jint expectedStamp, jint newStamp) { return call_method<SCAPIX_META_STRING("weakCompareAndSet"), jboolean>(expectedReference, newReference, expectedStamp, newStamp); }
inline jboolean AtomicStampedReference::compareAndSet(ref<java::lang::Object> expectedReference, ref<java::lang::Object> newReference, jint expectedStamp, jint newStamp) { return call_method<SCAPIX_META_STRING("compareAndSet"), jboolean>(expectedReference, newReference, expectedStamp, newStamp); }
inline void AtomicStampedReference::set(ref<java::lang::Object> newReference, jint newStamp) { return call_method<SCAPIX_META_STRING("set"), void>(newReference, newStamp); }
inline jboolean AtomicStampedReference::attemptStamp(ref<java::lang::Object> expectedReference, jint newStamp) { return call_method<SCAPIX_META_STRING("attemptStamp"), jboolean>(expectedReference, newStamp); }

} // namespace java::util::concurrent::atomic
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICSTAMPEDREFERENCE_H
