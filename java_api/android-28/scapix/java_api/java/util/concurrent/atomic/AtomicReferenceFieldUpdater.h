// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEFIELDUPDATER_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEFIELDUPDATER_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class String; }
namespace java::util::function { class BinaryOperator; }
namespace java::util::function { class UnaryOperator; }

namespace java::util::concurrent::atomic {

class AtomicReferenceFieldUpdater : public object_base<SCAPIX_META_STRING("java/util/concurrent/atomic/AtomicReferenceFieldUpdater"),
	java::lang::Object>
{
public:

	static ref<java::util::concurrent::atomic::AtomicReferenceFieldUpdater> newUpdater(ref<java::lang::Class> tclass, ref<java::lang::Class> vclass, ref<java::lang::String> fieldName);
	jboolean compareAndSet(ref<java::lang::Object> p1, ref<java::lang::Object> p2, ref<java::lang::Object> p3);
	jboolean weakCompareAndSet(ref<java::lang::Object> p1, ref<java::lang::Object> p2, ref<java::lang::Object> p3);
	void set(ref<java::lang::Object> p1, ref<java::lang::Object> p2);
	void lazySet(ref<java::lang::Object> p1, ref<java::lang::Object> p2);
	ref<java::lang::Object> get(ref<java::lang::Object> p1);
	ref<java::lang::Object> getAndSet(ref<java::lang::Object> obj, ref<java::lang::Object> newValue);
	ref<java::lang::Object> getAndUpdate(ref<java::lang::Object> obj, ref<java::util::function::UnaryOperator> updateFunction);
	ref<java::lang::Object> updateAndGet(ref<java::lang::Object> obj, ref<java::util::function::UnaryOperator> updateFunction);
	ref<java::lang::Object> getAndAccumulate(ref<java::lang::Object> obj, ref<java::lang::Object> x, ref<java::util::function::BinaryOperator> accumulatorFunction);
	ref<java::lang::Object> accumulateAndGet(ref<java::lang::Object> obj, ref<java::lang::Object> x, ref<java::util::function::BinaryOperator> accumulatorFunction);

protected:

	AtomicReferenceFieldUpdater(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent::atomic
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/BinaryOperator.h>
#include <scapix/java_api/java/util/function/UnaryOperator.h>

namespace scapix::java_api {
namespace java::util::concurrent::atomic {

inline ref<java::util::concurrent::atomic::AtomicReferenceFieldUpdater> AtomicReferenceFieldUpdater::newUpdater(ref<java::lang::Class> tclass, ref<java::lang::Class> vclass, ref<java::lang::String> fieldName) { return call_static_method<SCAPIX_META_STRING("newUpdater"), ref<java::util::concurrent::atomic::AtomicReferenceFieldUpdater>>(tclass, vclass, fieldName); }
inline jboolean AtomicReferenceFieldUpdater::compareAndSet(ref<java::lang::Object> p1, ref<java::lang::Object> p2, ref<java::lang::Object> p3) { return call_method<SCAPIX_META_STRING("compareAndSet"), jboolean>(p1, p2, p3); }
inline jboolean AtomicReferenceFieldUpdater::weakCompareAndSet(ref<java::lang::Object> p1, ref<java::lang::Object> p2, ref<java::lang::Object> p3) { return call_method<SCAPIX_META_STRING("weakCompareAndSet"), jboolean>(p1, p2, p3); }
inline void AtomicReferenceFieldUpdater::set(ref<java::lang::Object> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("set"), void>(p1, p2); }
inline void AtomicReferenceFieldUpdater::lazySet(ref<java::lang::Object> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("lazySet"), void>(p1, p2); }
inline ref<java::lang::Object> AtomicReferenceFieldUpdater::get(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> AtomicReferenceFieldUpdater::getAndSet(ref<java::lang::Object> obj, ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("getAndSet"), ref<java::lang::Object>>(obj, newValue); }
inline ref<java::lang::Object> AtomicReferenceFieldUpdater::getAndUpdate(ref<java::lang::Object> obj, ref<java::util::function::UnaryOperator> updateFunction) { return call_method<SCAPIX_META_STRING("getAndUpdate"), ref<java::lang::Object>>(obj, updateFunction); }
inline ref<java::lang::Object> AtomicReferenceFieldUpdater::updateAndGet(ref<java::lang::Object> obj, ref<java::util::function::UnaryOperator> updateFunction) { return call_method<SCAPIX_META_STRING("updateAndGet"), ref<java::lang::Object>>(obj, updateFunction); }
inline ref<java::lang::Object> AtomicReferenceFieldUpdater::getAndAccumulate(ref<java::lang::Object> obj, ref<java::lang::Object> x, ref<java::util::function::BinaryOperator> accumulatorFunction) { return call_method<SCAPIX_META_STRING("getAndAccumulate"), ref<java::lang::Object>>(obj, x, accumulatorFunction); }
inline ref<java::lang::Object> AtomicReferenceFieldUpdater::accumulateAndGet(ref<java::lang::Object> obj, ref<java::lang::Object> x, ref<java::util::function::BinaryOperator> accumulatorFunction) { return call_method<SCAPIX_META_STRING("accumulateAndGet"), ref<java::lang::Object>>(obj, x, accumulatorFunction); }

} // namespace java::util::concurrent::atomic
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEFIELDUPDATER_H
