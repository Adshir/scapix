// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_PHASER_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_PHASER_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::util::concurrent {

class Phaser : public object_base<SCAPIX_META_STRING("java/util/concurrent/Phaser"),
	java::lang::Object>
{
public:

	static ref<Phaser> new_object();
	static ref<Phaser> new_object(jint parties);
	static ref<Phaser> new_object(ref<java::util::concurrent::Phaser> parent);
	static ref<Phaser> new_object(ref<java::util::concurrent::Phaser> parent, jint parties);
	jint register_();
	jint bulkRegister(jint parties);
	jint arrive();
	jint arriveAndDeregister();
	jint arriveAndAwaitAdvance();
	jint awaitAdvance(jint phase);
	jint awaitAdvanceInterruptibly(jint phase);
	jint awaitAdvanceInterruptibly(jint phase, jlong timeout, ref<java::util::concurrent::TimeUnit> p3);
	void forceTermination();
	jint getPhase();
	jint getRegisteredParties();
	jint getArrivedParties();
	jint getUnarrivedParties();
	ref<java::util::concurrent::Phaser> getParent();
	ref<java::util::concurrent::Phaser> getRoot();
	jboolean isTerminated();
	ref<java::lang::String> toString();

protected:

	Phaser(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<Phaser> Phaser::new_object() { return base_::new_object(); }
inline ref<Phaser> Phaser::new_object(jint parties) { return base_::new_object(parties); }
inline ref<Phaser> Phaser::new_object(ref<java::util::concurrent::Phaser> parent) { return base_::new_object(parent); }
inline ref<Phaser> Phaser::new_object(ref<java::util::concurrent::Phaser> parent, jint parties) { return base_::new_object(parent, parties); }
inline jint Phaser::register_() { return call_method<SCAPIX_META_STRING("register"), jint>(); }
inline jint Phaser::bulkRegister(jint parties) { return call_method<SCAPIX_META_STRING("bulkRegister"), jint>(parties); }
inline jint Phaser::arrive() { return call_method<SCAPIX_META_STRING("arrive"), jint>(); }
inline jint Phaser::arriveAndDeregister() { return call_method<SCAPIX_META_STRING("arriveAndDeregister"), jint>(); }
inline jint Phaser::arriveAndAwaitAdvance() { return call_method<SCAPIX_META_STRING("arriveAndAwaitAdvance"), jint>(); }
inline jint Phaser::awaitAdvance(jint phase) { return call_method<SCAPIX_META_STRING("awaitAdvance"), jint>(phase); }
inline jint Phaser::awaitAdvanceInterruptibly(jint phase) { return call_method<SCAPIX_META_STRING("awaitAdvanceInterruptibly"), jint>(phase); }
inline jint Phaser::awaitAdvanceInterruptibly(jint phase, jlong timeout, ref<java::util::concurrent::TimeUnit> p3) { return call_method<SCAPIX_META_STRING("awaitAdvanceInterruptibly"), jint>(phase, timeout, p3); }
inline void Phaser::forceTermination() { return call_method<SCAPIX_META_STRING("forceTermination"), void>(); }
inline jint Phaser::getPhase() { return call_method<SCAPIX_META_STRING("getPhase"), jint>(); }
inline jint Phaser::getRegisteredParties() { return call_method<SCAPIX_META_STRING("getRegisteredParties"), jint>(); }
inline jint Phaser::getArrivedParties() { return call_method<SCAPIX_META_STRING("getArrivedParties"), jint>(); }
inline jint Phaser::getUnarrivedParties() { return call_method<SCAPIX_META_STRING("getUnarrivedParties"), jint>(); }
inline ref<java::util::concurrent::Phaser> Phaser::getParent() { return call_method<SCAPIX_META_STRING("getParent"), ref<java::util::concurrent::Phaser>>(); }
inline ref<java::util::concurrent::Phaser> Phaser::getRoot() { return call_method<SCAPIX_META_STRING("getRoot"), ref<java::util::concurrent::Phaser>>(); }
inline jboolean Phaser::isTerminated() { return call_method<SCAPIX_META_STRING("isTerminated"), jboolean>(); }
inline ref<java::lang::String> Phaser::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_PHASER_H
