// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Map.h>

#ifndef SCAPIX_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_H
#define SCAPIX_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_H

namespace scapix::java_api {

namespace java::util::function { class BiConsumer; }
namespace java::util::function { class BiFunction; }
namespace java::util::function { class Function; }

namespace java::util::concurrent {

class ConcurrentMap : public object_base<SCAPIX_META_STRING("java/util/concurrent/ConcurrentMap"),
	java::lang::Object,
	java::util::Map>
{
public:

	ref<java::lang::Object> getOrDefault(ref<java::lang::Object> key, ref<java::lang::Object> defaultValue);
	void forEach(ref<java::util::function::BiConsumer> action);
	ref<java::lang::Object> putIfAbsent(ref<java::lang::Object> p1, ref<java::lang::Object> p2);
	jboolean remove(ref<java::lang::Object> p1, ref<java::lang::Object> p2);
	jboolean replace(ref<java::lang::Object> p1, ref<java::lang::Object> p2, ref<java::lang::Object> p3);
	ref<java::lang::Object> replace(ref<java::lang::Object> p1, ref<java::lang::Object> p2);
	void replaceAll(ref<java::util::function::BiFunction> function);
	ref<java::lang::Object> computeIfAbsent(ref<java::lang::Object> key, ref<java::util::function::Function> mappingFunction);
	ref<java::lang::Object> computeIfPresent(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction);
	ref<java::lang::Object> compute(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction);
	ref<java::lang::Object> merge(ref<java::lang::Object> key, ref<java::lang::Object> value, ref<java::util::function::BiFunction> remappingFunction);

protected:

	ConcurrentMap(handle_type h) : base_(h) {}

};

} // namespace java::util::concurrent
} // namespace scapix::java_api

#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BiFunction.h>
#include <scapix/java_api/java/util/function/Function.h>

namespace scapix::java_api {
namespace java::util::concurrent {

inline ref<java::lang::Object> ConcurrentMap::getOrDefault(ref<java::lang::Object> key, ref<java::lang::Object> defaultValue) { return call_method<SCAPIX_META_STRING("getOrDefault"), ref<java::lang::Object>>(key, defaultValue); }
inline void ConcurrentMap::forEach(ref<java::util::function::BiConsumer> action) { return call_method<SCAPIX_META_STRING("forEach"), void>(action); }
inline ref<java::lang::Object> ConcurrentMap::putIfAbsent(ref<java::lang::Object> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("putIfAbsent"), ref<java::lang::Object>>(p1, p2); }
inline jboolean ConcurrentMap::remove(ref<java::lang::Object> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("remove"), jboolean>(p1, p2); }
inline jboolean ConcurrentMap::replace(ref<java::lang::Object> p1, ref<java::lang::Object> p2, ref<java::lang::Object> p3) { return call_method<SCAPIX_META_STRING("replace"), jboolean>(p1, p2, p3); }
inline ref<java::lang::Object> ConcurrentMap::replace(ref<java::lang::Object> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("replace"), ref<java::lang::Object>>(p1, p2); }
inline void ConcurrentMap::replaceAll(ref<java::util::function::BiFunction> function) { return call_method<SCAPIX_META_STRING("replaceAll"), void>(function); }
inline ref<java::lang::Object> ConcurrentMap::computeIfAbsent(ref<java::lang::Object> key, ref<java::util::function::Function> mappingFunction) { return call_method<SCAPIX_META_STRING("computeIfAbsent"), ref<java::lang::Object>>(key, mappingFunction); }
inline ref<java::lang::Object> ConcurrentMap::computeIfPresent(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("computeIfPresent"), ref<java::lang::Object>>(key, remappingFunction); }
inline ref<java::lang::Object> ConcurrentMap::compute(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("compute"), ref<java::lang::Object>>(key, remappingFunction); }
inline ref<java::lang::Object> ConcurrentMap::merge(ref<java::lang::Object> key, ref<java::lang::Object> value, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("merge"), ref<java::lang::Object>>(key, value, remappingFunction); }

} // namespace java::util::concurrent
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_H
