// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_UTIL_TIMEZONE_H
#define SCAPIX_JAVA_UTIL_TIMEZONE_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time { class ZoneId; }
namespace java::util { class Date; }
namespace java::util { class Locale; }

namespace java::util {

class TimeZone : public object_base<SCAPIX_META_STRING("java/util/TimeZone"),
	java::lang::Object,
	java::io::Serializable,
	java::lang::Cloneable>
{
public:

	static jint LONG_();
	static jint SHORT_();

	static ref<TimeZone> new_object();
	jint getOffset(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6);
	jint getOffset(jlong date);
	void setRawOffset(jint p1);
	jint getRawOffset();
	ref<java::lang::String> getID();
	void setID(ref<java::lang::String> ID_);
	ref<java::lang::String> getDisplayName();
	ref<java::lang::String> getDisplayName(ref<java::util::Locale> locale);
	ref<java::lang::String> getDisplayName(jboolean daylight, jint style);
	ref<java::lang::String> getDisplayName(jboolean daylightTime, jint style, ref<java::util::Locale> locale);
	jint getDSTSavings();
	jboolean useDaylightTime();
	jboolean observesDaylightTime();
	jboolean inDaylightTime(ref<java::util::Date> p1);
	static ref<java::util::TimeZone> getTimeZone(ref<java::lang::String> id);
	static ref<java::util::TimeZone> getTimeZone(ref<java::time::ZoneId> zoneId);
	ref<java::time::ZoneId> toZoneId();
	static ref<link::java::array<java::lang::String>> getAvailableIDs(jint rawOffset);
	static ref<link::java::array<java::lang::String>> getAvailableIDs();
	static ref<java::util::TimeZone> getDefault();
	static void setDefault(ref<java::util::TimeZone> timeZone);
	jboolean hasSameRules(ref<java::util::TimeZone> other);
	ref<java::lang::Object> clone();

protected:

	TimeZone(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/Locale.h>

namespace scapix::java_api {
namespace java::util {

inline jint TimeZone::LONG_() { return get_static_field<SCAPIX_META_STRING("LONG"), jint>(); }
inline jint TimeZone::SHORT_() { return get_static_field<SCAPIX_META_STRING("SHORT"), jint>(); }
inline ref<TimeZone> TimeZone::new_object() { return base_::new_object(); }
inline jint TimeZone::getOffset(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<SCAPIX_META_STRING("getOffset"), jint>(p1, p2, p3, p4, p5, p6); }
inline jint TimeZone::getOffset(jlong date) { return call_method<SCAPIX_META_STRING("getOffset"), jint>(date); }
inline void TimeZone::setRawOffset(jint p1) { return call_method<SCAPIX_META_STRING("setRawOffset"), void>(p1); }
inline jint TimeZone::getRawOffset() { return call_method<SCAPIX_META_STRING("getRawOffset"), jint>(); }
inline ref<java::lang::String> TimeZone::getID() { return call_method<SCAPIX_META_STRING("getID"), ref<java::lang::String>>(); }
inline void TimeZone::setID(ref<java::lang::String> ID_) { return call_method<SCAPIX_META_STRING("setID"), void>(ID_); }
inline ref<java::lang::String> TimeZone::getDisplayName() { return call_method<SCAPIX_META_STRING("getDisplayName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> TimeZone::getDisplayName(ref<java::util::Locale> locale) { return call_method<SCAPIX_META_STRING("getDisplayName"), ref<java::lang::String>>(locale); }
inline ref<java::lang::String> TimeZone::getDisplayName(jboolean daylight, jint style) { return call_method<SCAPIX_META_STRING("getDisplayName"), ref<java::lang::String>>(daylight, style); }
inline ref<java::lang::String> TimeZone::getDisplayName(jboolean daylightTime, jint style, ref<java::util::Locale> locale) { return call_method<SCAPIX_META_STRING("getDisplayName"), ref<java::lang::String>>(daylightTime, style, locale); }
inline jint TimeZone::getDSTSavings() { return call_method<SCAPIX_META_STRING("getDSTSavings"), jint>(); }
inline jboolean TimeZone::useDaylightTime() { return call_method<SCAPIX_META_STRING("useDaylightTime"), jboolean>(); }
inline jboolean TimeZone::observesDaylightTime() { return call_method<SCAPIX_META_STRING("observesDaylightTime"), jboolean>(); }
inline jboolean TimeZone::inDaylightTime(ref<java::util::Date> p1) { return call_method<SCAPIX_META_STRING("inDaylightTime"), jboolean>(p1); }
inline ref<java::util::TimeZone> TimeZone::getTimeZone(ref<java::lang::String> id) { return call_static_method<SCAPIX_META_STRING("getTimeZone"), ref<java::util::TimeZone>>(id); }
inline ref<java::util::TimeZone> TimeZone::getTimeZone(ref<java::time::ZoneId> zoneId) { return call_static_method<SCAPIX_META_STRING("getTimeZone"), ref<java::util::TimeZone>>(zoneId); }
inline ref<java::time::ZoneId> TimeZone::toZoneId() { return call_method<SCAPIX_META_STRING("toZoneId"), ref<java::time::ZoneId>>(); }
inline ref<link::java::array<java::lang::String>> TimeZone::getAvailableIDs(jint rawOffset) { return call_static_method<SCAPIX_META_STRING("getAvailableIDs"), ref<link::java::array<java::lang::String>>>(rawOffset); }
inline ref<link::java::array<java::lang::String>> TimeZone::getAvailableIDs() { return call_static_method<SCAPIX_META_STRING("getAvailableIDs"), ref<link::java::array<java::lang::String>>>(); }
inline ref<java::util::TimeZone> TimeZone::getDefault() { return call_static_method<SCAPIX_META_STRING("getDefault"), ref<java::util::TimeZone>>(); }
inline void TimeZone::setDefault(ref<java::util::TimeZone> timeZone) { return call_static_method<SCAPIX_META_STRING("setDefault"), void>(timeZone); }
inline jboolean TimeZone::hasSameRules(ref<java::util::TimeZone> other) { return call_method<SCAPIX_META_STRING("hasSameRules"), jboolean>(other); }
inline ref<java::lang::Object> TimeZone::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_TIMEZONE_H
