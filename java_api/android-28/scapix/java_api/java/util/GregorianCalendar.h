// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/Calendar.h>

#ifndef SCAPIX_JAVA_UTIL_GREGORIANCALENDAR_H
#define SCAPIX_JAVA_UTIL_GREGORIANCALENDAR_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::time { class ZonedDateTime; }
namespace java::util { class Date; }
namespace java::util { class Locale; }
namespace java::util { class TimeZone; }

namespace java::util {

class GregorianCalendar : public object_base<SCAPIX_META_STRING("java/util/GregorianCalendar"),
	java::util::Calendar>
{
public:

	static jint AD_();
	static jint BC_();

	static ref<GregorianCalendar> new_object();
	static ref<GregorianCalendar> new_object(ref<java::util::TimeZone> zone);
	static ref<GregorianCalendar> new_object(ref<java::util::Locale> aLocale);
	static ref<GregorianCalendar> new_object(ref<java::util::TimeZone> zone, ref<java::util::Locale> aLocale);
	static ref<GregorianCalendar> new_object(jint year, jint month, jint dayOfMonth);
	static ref<GregorianCalendar> new_object(jint year, jint month, jint dayOfMonth, jint hourOfDay, jint minute);
	static ref<GregorianCalendar> new_object(jint year, jint month, jint dayOfMonth, jint hourOfDay, jint minute, jint second);
	void setGregorianChange(ref<java::util::Date> date);
	ref<java::util::Date> getGregorianChange();
	jboolean isLeapYear(jint year);
	ref<java::lang::String> getCalendarType();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	void add(jint field, jint amount);
	void roll(jint field, jboolean up);
	void roll(jint field, jint amount);
	jint getMinimum(jint field);
	jint getMaximum(jint field);
	jint getGreatestMinimum(jint field);
	jint getLeastMaximum(jint field);
	jint getActualMinimum(jint field);
	jint getActualMaximum(jint field);
	ref<java::lang::Object> clone();
	ref<java::util::TimeZone> getTimeZone();
	void setTimeZone(ref<java::util::TimeZone> zone);
	jboolean isWeekDateSupported();
	jint getWeekYear();
	void setWeekDate(jint weekYear, jint weekOfYear, jint dayOfWeek);
	jint getWeeksInWeekYear();
	ref<java::time::ZonedDateTime> toZonedDateTime();
	static ref<java::util::GregorianCalendar> from(ref<java::time::ZonedDateTime> zdt);

protected:

	GregorianCalendar(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/ZonedDateTime.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/TimeZone.h>

namespace scapix::java_api {
namespace java::util {

inline jint GregorianCalendar::AD_() { return get_static_field<SCAPIX_META_STRING("AD"), jint>(); }
inline jint GregorianCalendar::BC_() { return get_static_field<SCAPIX_META_STRING("BC"), jint>(); }
inline ref<GregorianCalendar> GregorianCalendar::new_object() { return base_::new_object(); }
inline ref<GregorianCalendar> GregorianCalendar::new_object(ref<java::util::TimeZone> zone) { return base_::new_object(zone); }
inline ref<GregorianCalendar> GregorianCalendar::new_object(ref<java::util::Locale> aLocale) { return base_::new_object(aLocale); }
inline ref<GregorianCalendar> GregorianCalendar::new_object(ref<java::util::TimeZone> zone, ref<java::util::Locale> aLocale) { return base_::new_object(zone, aLocale); }
inline ref<GregorianCalendar> GregorianCalendar::new_object(jint year, jint month, jint dayOfMonth) { return base_::new_object(year, month, dayOfMonth); }
inline ref<GregorianCalendar> GregorianCalendar::new_object(jint year, jint month, jint dayOfMonth, jint hourOfDay, jint minute) { return base_::new_object(year, month, dayOfMonth, hourOfDay, minute); }
inline ref<GregorianCalendar> GregorianCalendar::new_object(jint year, jint month, jint dayOfMonth, jint hourOfDay, jint minute, jint second) { return base_::new_object(year, month, dayOfMonth, hourOfDay, minute, second); }
inline void GregorianCalendar::setGregorianChange(ref<java::util::Date> date) { return call_method<SCAPIX_META_STRING("setGregorianChange"), void>(date); }
inline ref<java::util::Date> GregorianCalendar::getGregorianChange() { return call_method<SCAPIX_META_STRING("getGregorianChange"), ref<java::util::Date>>(); }
inline jboolean GregorianCalendar::isLeapYear(jint year) { return call_method<SCAPIX_META_STRING("isLeapYear"), jboolean>(year); }
inline ref<java::lang::String> GregorianCalendar::getCalendarType() { return call_method<SCAPIX_META_STRING("getCalendarType"), ref<java::lang::String>>(); }
inline jboolean GregorianCalendar::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint GregorianCalendar::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline void GregorianCalendar::add(jint field, jint amount) { return call_method<SCAPIX_META_STRING("add"), void>(field, amount); }
inline void GregorianCalendar::roll(jint field, jboolean up) { return call_method<SCAPIX_META_STRING("roll"), void>(field, up); }
inline void GregorianCalendar::roll(jint field, jint amount) { return call_method<SCAPIX_META_STRING("roll"), void>(field, amount); }
inline jint GregorianCalendar::getMinimum(jint field) { return call_method<SCAPIX_META_STRING("getMinimum"), jint>(field); }
inline jint GregorianCalendar::getMaximum(jint field) { return call_method<SCAPIX_META_STRING("getMaximum"), jint>(field); }
inline jint GregorianCalendar::getGreatestMinimum(jint field) { return call_method<SCAPIX_META_STRING("getGreatestMinimum"), jint>(field); }
inline jint GregorianCalendar::getLeastMaximum(jint field) { return call_method<SCAPIX_META_STRING("getLeastMaximum"), jint>(field); }
inline jint GregorianCalendar::getActualMinimum(jint field) { return call_method<SCAPIX_META_STRING("getActualMinimum"), jint>(field); }
inline jint GregorianCalendar::getActualMaximum(jint field) { return call_method<SCAPIX_META_STRING("getActualMaximum"), jint>(field); }
inline ref<java::lang::Object> GregorianCalendar::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline ref<java::util::TimeZone> GregorianCalendar::getTimeZone() { return call_method<SCAPIX_META_STRING("getTimeZone"), ref<java::util::TimeZone>>(); }
inline void GregorianCalendar::setTimeZone(ref<java::util::TimeZone> zone) { return call_method<SCAPIX_META_STRING("setTimeZone"), void>(zone); }
inline jboolean GregorianCalendar::isWeekDateSupported() { return call_method<SCAPIX_META_STRING("isWeekDateSupported"), jboolean>(); }
inline jint GregorianCalendar::getWeekYear() { return call_method<SCAPIX_META_STRING("getWeekYear"), jint>(); }
inline void GregorianCalendar::setWeekDate(jint weekYear, jint weekOfYear, jint dayOfWeek) { return call_method<SCAPIX_META_STRING("setWeekDate"), void>(weekYear, weekOfYear, dayOfWeek); }
inline jint GregorianCalendar::getWeeksInWeekYear() { return call_method<SCAPIX_META_STRING("getWeeksInWeekYear"), jint>(); }
inline ref<java::time::ZonedDateTime> GregorianCalendar::toZonedDateTime() { return call_method<SCAPIX_META_STRING("toZonedDateTime"), ref<java::time::ZonedDateTime>>(); }
inline ref<java::util::GregorianCalendar> GregorianCalendar::from(ref<java::time::ZonedDateTime> zdt) { return call_static_method<SCAPIX_META_STRING("from"), ref<java::util::GregorianCalendar>>(zdt); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_GREGORIANCALENDAR_H
