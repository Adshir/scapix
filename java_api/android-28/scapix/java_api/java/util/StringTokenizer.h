// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Enumeration.h>

#ifndef SCAPIX_JAVA_UTIL_STRINGTOKENIZER_H
#define SCAPIX_JAVA_UTIL_STRINGTOKENIZER_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace java::util {

class StringTokenizer : public object_base<SCAPIX_META_STRING("java/util/StringTokenizer"),
	java::lang::Object,
	java::util::Enumeration>
{
public:

	static ref<StringTokenizer> new_object(ref<java::lang::String> str, ref<java::lang::String> delim, jboolean returnDelims);
	static ref<StringTokenizer> new_object(ref<java::lang::String> str, ref<java::lang::String> delim);
	static ref<StringTokenizer> new_object(ref<java::lang::String> str);
	jboolean hasMoreTokens();
	ref<java::lang::String> nextToken();
	ref<java::lang::String> nextToken(ref<java::lang::String> delim);
	jboolean hasMoreElements();
	ref<java::lang::Object> nextElement();
	jint countTokens();

protected:

	StringTokenizer(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::util {

inline ref<StringTokenizer> StringTokenizer::new_object(ref<java::lang::String> str, ref<java::lang::String> delim, jboolean returnDelims) { return base_::new_object(str, delim, returnDelims); }
inline ref<StringTokenizer> StringTokenizer::new_object(ref<java::lang::String> str, ref<java::lang::String> delim) { return base_::new_object(str, delim); }
inline ref<StringTokenizer> StringTokenizer::new_object(ref<java::lang::String> str) { return base_::new_object(str); }
inline jboolean StringTokenizer::hasMoreTokens() { return call_method<SCAPIX_META_STRING("hasMoreTokens"), jboolean>(); }
inline ref<java::lang::String> StringTokenizer::nextToken() { return call_method<SCAPIX_META_STRING("nextToken"), ref<java::lang::String>>(); }
inline ref<java::lang::String> StringTokenizer::nextToken(ref<java::lang::String> delim) { return call_method<SCAPIX_META_STRING("nextToken"), ref<java::lang::String>>(delim); }
inline jboolean StringTokenizer::hasMoreElements() { return call_method<SCAPIX_META_STRING("hasMoreElements"), jboolean>(); }
inline ref<java::lang::Object> StringTokenizer::nextElement() { return call_method<SCAPIX_META_STRING("nextElement"), ref<java::lang::Object>>(); }
inline jint StringTokenizer::countTokens() { return call_method<SCAPIX_META_STRING("countTokens"), jint>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_STRINGTOKENIZER_H
