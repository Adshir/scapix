// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_ZIP_INFLATER_H
#define SCAPIX_JAVA_UTIL_ZIP_INFLATER_H

namespace scapix::java_api {
namespace java::util::zip {

class Inflater : public object_base<SCAPIX_META_STRING("java/util/zip/Inflater"),
	java::lang::Object>
{
public:

	static ref<Inflater> new_object(jboolean nowrap);
	static ref<Inflater> new_object();
	void setInput(ref<link::java::array<jbyte>> b, jint off, jint len);
	void setInput(ref<link::java::array<jbyte>> b);
	void setDictionary(ref<link::java::array<jbyte>> b, jint off, jint len);
	void setDictionary(ref<link::java::array<jbyte>> b);
	jint getRemaining();
	jboolean needsInput();
	jboolean needsDictionary();
	jboolean finished();
	jint inflate(ref<link::java::array<jbyte>> b, jint off, jint len);
	jint inflate(ref<link::java::array<jbyte>> b);
	jint getAdler();
	jint getTotalIn();
	jlong getBytesRead();
	jint getTotalOut();
	jlong getBytesWritten();
	void reset();
	void end();

protected:

	Inflater(handle_type h) : base_(h) {}

};

} // namespace java::util::zip
} // namespace scapix::java_api


namespace scapix::java_api {
namespace java::util::zip {

inline ref<Inflater> Inflater::new_object(jboolean nowrap) { return base_::new_object(nowrap); }
inline ref<Inflater> Inflater::new_object() { return base_::new_object(); }
inline void Inflater::setInput(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("setInput"), void>(b, off, len); }
inline void Inflater::setInput(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("setInput"), void>(b); }
inline void Inflater::setDictionary(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("setDictionary"), void>(b, off, len); }
inline void Inflater::setDictionary(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("setDictionary"), void>(b); }
inline jint Inflater::getRemaining() { return call_method<SCAPIX_META_STRING("getRemaining"), jint>(); }
inline jboolean Inflater::needsInput() { return call_method<SCAPIX_META_STRING("needsInput"), jboolean>(); }
inline jboolean Inflater::needsDictionary() { return call_method<SCAPIX_META_STRING("needsDictionary"), jboolean>(); }
inline jboolean Inflater::finished() { return call_method<SCAPIX_META_STRING("finished"), jboolean>(); }
inline jint Inflater::inflate(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("inflate"), jint>(b, off, len); }
inline jint Inflater::inflate(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("inflate"), jint>(b); }
inline jint Inflater::getAdler() { return call_method<SCAPIX_META_STRING("getAdler"), jint>(); }
inline jint Inflater::getTotalIn() { return call_method<SCAPIX_META_STRING("getTotalIn"), jint>(); }
inline jlong Inflater::getBytesRead() { return call_method<SCAPIX_META_STRING("getBytesRead"), jlong>(); }
inline jint Inflater::getTotalOut() { return call_method<SCAPIX_META_STRING("getTotalOut"), jint>(); }
inline jlong Inflater::getBytesWritten() { return call_method<SCAPIX_META_STRING("getBytesWritten"), jlong>(); }
inline void Inflater::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline void Inflater::end() { return call_method<SCAPIX_META_STRING("end"), void>(); }

} // namespace java::util::zip
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_ZIP_INFLATER_H
