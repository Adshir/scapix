// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/FilterInputStream.h>

#ifndef SCAPIX_JAVA_UTIL_ZIP_DEFLATERINPUTSTREAM_H
#define SCAPIX_JAVA_UTIL_ZIP_DEFLATERINPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::util::zip { class Deflater; }

namespace java::util::zip {

class DeflaterInputStream : public object_base<SCAPIX_META_STRING("java/util/zip/DeflaterInputStream"),
	java::io::FilterInputStream>
{
public:

	static ref<DeflaterInputStream> new_object(ref<java::io::InputStream> in);
	static ref<DeflaterInputStream> new_object(ref<java::io::InputStream> in, ref<java::util::zip::Deflater> defl);
	static ref<DeflaterInputStream> new_object(ref<java::io::InputStream> in, ref<java::util::zip::Deflater> defl, jint bufLen);
	void close();
	jint read();
	jint read(ref<link::java::array<jbyte>> b, jint off, jint len);
	jlong skip(jlong n);
	jint available();
	jboolean markSupported();
	void mark(jint limit);
	void reset();

protected:

	DeflaterInputStream(handle_type h) : base_(h) {}

};

} // namespace java::util::zip
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/util/zip/Deflater.h>

namespace scapix::java_api {
namespace java::util::zip {

inline ref<DeflaterInputStream> DeflaterInputStream::new_object(ref<java::io::InputStream> in) { return base_::new_object(in); }
inline ref<DeflaterInputStream> DeflaterInputStream::new_object(ref<java::io::InputStream> in, ref<java::util::zip::Deflater> defl) { return base_::new_object(in, defl); }
inline ref<DeflaterInputStream> DeflaterInputStream::new_object(ref<java::io::InputStream> in, ref<java::util::zip::Deflater> defl, jint bufLen) { return base_::new_object(in, defl, bufLen); }
inline void DeflaterInputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jint DeflaterInputStream::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint DeflaterInputStream::read(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(b, off, len); }
inline jlong DeflaterInputStream::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), jlong>(n); }
inline jint DeflaterInputStream::available() { return call_method<SCAPIX_META_STRING("available"), jint>(); }
inline jboolean DeflaterInputStream::markSupported() { return call_method<SCAPIX_META_STRING("markSupported"), jboolean>(); }
inline void DeflaterInputStream::mark(jint limit) { return call_method<SCAPIX_META_STRING("mark"), void>(limit); }
inline void DeflaterInputStream::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }

} // namespace java::util::zip
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_ZIP_DEFLATERINPUTSTREAM_H
