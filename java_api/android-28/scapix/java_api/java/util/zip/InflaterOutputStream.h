// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/FilterOutputStream.h>

#ifndef SCAPIX_JAVA_UTIL_ZIP_INFLATEROUTPUTSTREAM_H
#define SCAPIX_JAVA_UTIL_ZIP_INFLATEROUTPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class OutputStream; }
namespace java::util::zip { class Inflater; }

namespace java::util::zip {

class InflaterOutputStream : public object_base<SCAPIX_META_STRING("java/util/zip/InflaterOutputStream"),
	java::io::FilterOutputStream>
{
public:

	static ref<InflaterOutputStream> new_object(ref<java::io::OutputStream> out);
	static ref<InflaterOutputStream> new_object(ref<java::io::OutputStream> out, ref<java::util::zip::Inflater> infl);
	static ref<InflaterOutputStream> new_object(ref<java::io::OutputStream> out, ref<java::util::zip::Inflater> infl, jint bufLen);
	void close();
	void flush();
	void finish();
	void write(jint b);
	void write(ref<link::java::array<jbyte>> b, jint off, jint len);

protected:

	InflaterOutputStream(handle_type h) : base_(h) {}

};

} // namespace java::util::zip
} // namespace scapix::java_api

#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/util/zip/Inflater.h>

namespace scapix::java_api {
namespace java::util::zip {

inline ref<InflaterOutputStream> InflaterOutputStream::new_object(ref<java::io::OutputStream> out) { return base_::new_object(out); }
inline ref<InflaterOutputStream> InflaterOutputStream::new_object(ref<java::io::OutputStream> out, ref<java::util::zip::Inflater> infl) { return base_::new_object(out, infl); }
inline ref<InflaterOutputStream> InflaterOutputStream::new_object(ref<java::io::OutputStream> out, ref<java::util::zip::Inflater> infl, jint bufLen) { return base_::new_object(out, infl, bufLen); }
inline void InflaterOutputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void InflaterOutputStream::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline void InflaterOutputStream::finish() { return call_method<SCAPIX_META_STRING("finish"), void>(); }
inline void InflaterOutputStream::write(jint b) { return call_method<SCAPIX_META_STRING("write"), void>(b); }
inline void InflaterOutputStream::write(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(b, off, len); }

} // namespace java::util::zip
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_ZIP_INFLATEROUTPUTSTREAM_H
