// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Collection.h>

#ifndef SCAPIX_JAVA_UTIL_LIST_H
#define SCAPIX_JAVA_UTIL_LIST_H

namespace scapix::java_api {

namespace java::util { class Comparator; }
namespace java::util { class Iterator; }
namespace java::util { class ListIterator; }
namespace java::util { class Spliterator; }
namespace java::util::function { class UnaryOperator; }

namespace java::util {

class List : public object_base<SCAPIX_META_STRING("java/util/List"),
	java::lang::Object,
	java::util::Collection>
{
public:

	jint size();
	jboolean isEmpty();
	jboolean contains(ref<java::lang::Object> p1);
	ref<java::util::Iterator> iterator();
	ref<link::java::array<java::lang::Object>> toArray();
	ref<link::java::array<java::lang::Object>> toArray(ref<link::java::array<java::lang::Object>> p1);
	jboolean add(ref<java::lang::Object> p1);
	jboolean remove(ref<java::lang::Object> p1);
	jboolean containsAll(ref<java::util::Collection> p1);
	jboolean addAll(ref<java::util::Collection> p1);
	jboolean addAll(jint p1, ref<java::util::Collection> p2);
	jboolean removeAll(ref<java::util::Collection> p1);
	jboolean retainAll(ref<java::util::Collection> p1);
	void replaceAll(ref<java::util::function::UnaryOperator> operator_);
	void sort(ref<java::util::Comparator> c);
	void clear();
	jboolean equals(ref<java::lang::Object> p1);
	jint hashCode();
	ref<java::lang::Object> get(jint p1);
	ref<java::lang::Object> set(jint p1, ref<java::lang::Object> p2);
	void add(jint p1, ref<java::lang::Object> p2);
	ref<java::lang::Object> remove(jint p1);
	jint indexOf(ref<java::lang::Object> p1);
	jint lastIndexOf(ref<java::lang::Object> p1);
	ref<java::util::ListIterator> listIterator();
	ref<java::util::ListIterator> listIterator(jint p1);
	ref<java::util::List> subList(jint p1, jint p2);
	ref<java::util::Spliterator> spliterator();

protected:

	List(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/util/Comparator.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/ListIterator.h>
#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/function/UnaryOperator.h>

namespace scapix::java_api {
namespace java::util {

inline jint List::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jboolean List::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline jboolean List::contains(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(p1); }
inline ref<java::util::Iterator> List::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::Iterator>>(); }
inline ref<link::java::array<java::lang::Object>> List::toArray() { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<java::lang::Object>>>(); }
inline ref<link::java::array<java::lang::Object>> List::toArray(ref<link::java::array<java::lang::Object>> p1) { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<java::lang::Object>>>(p1); }
inline jboolean List::add(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("add"), jboolean>(p1); }
inline jboolean List::remove(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("remove"), jboolean>(p1); }
inline jboolean List::containsAll(ref<java::util::Collection> p1) { return call_method<SCAPIX_META_STRING("containsAll"), jboolean>(p1); }
inline jboolean List::addAll(ref<java::util::Collection> p1) { return call_method<SCAPIX_META_STRING("addAll"), jboolean>(p1); }
inline jboolean List::addAll(jint p1, ref<java::util::Collection> p2) { return call_method<SCAPIX_META_STRING("addAll"), jboolean>(p1, p2); }
inline jboolean List::removeAll(ref<java::util::Collection> p1) { return call_method<SCAPIX_META_STRING("removeAll"), jboolean>(p1); }
inline jboolean List::retainAll(ref<java::util::Collection> p1) { return call_method<SCAPIX_META_STRING("retainAll"), jboolean>(p1); }
inline void List::replaceAll(ref<java::util::function::UnaryOperator> operator_) { return call_method<SCAPIX_META_STRING("replaceAll"), void>(operator_); }
inline void List::sort(ref<java::util::Comparator> c) { return call_method<SCAPIX_META_STRING("sort"), void>(c); }
inline void List::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline jboolean List::equals(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(p1); }
inline jint List::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::Object> List::get(jint p1) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> List::set(jint p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("set"), ref<java::lang::Object>>(p1, p2); }
inline void List::add(jint p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("add"), void>(p1, p2); }
inline ref<java::lang::Object> List::remove(jint p1) { return call_method<SCAPIX_META_STRING("remove"), ref<java::lang::Object>>(p1); }
inline jint List::indexOf(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("indexOf"), jint>(p1); }
inline jint List::lastIndexOf(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("lastIndexOf"), jint>(p1); }
inline ref<java::util::ListIterator> List::listIterator() { return call_method<SCAPIX_META_STRING("listIterator"), ref<java::util::ListIterator>>(); }
inline ref<java::util::ListIterator> List::listIterator(jint p1) { return call_method<SCAPIX_META_STRING("listIterator"), ref<java::util::ListIterator>>(p1); }
inline ref<java::util::List> List::subList(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("subList"), ref<java::util::List>>(p1, p2); }
inline ref<java::util::Spliterator> List::spliterator() { return call_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator>>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_LIST_H
