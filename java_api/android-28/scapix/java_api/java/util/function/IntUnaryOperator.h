// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_FUNCTION_INTUNARYOPERATOR_H
#define SCAPIX_JAVA_UTIL_FUNCTION_INTUNARYOPERATOR_H

namespace scapix::java_api {
namespace java::util::function {

class IntUnaryOperator : public object_base<SCAPIX_META_STRING("java/util/function/IntUnaryOperator"),
	java::lang::Object>
{
public:

	jint applyAsInt(jint p1);
	ref<java::util::function::IntUnaryOperator> compose(ref<java::util::function::IntUnaryOperator> before);
	ref<java::util::function::IntUnaryOperator> andThen(ref<java::util::function::IntUnaryOperator> after);
	static ref<java::util::function::IntUnaryOperator> identity();

protected:

	IntUnaryOperator(handle_type h) : base_(h) {}

};

} // namespace java::util::function
} // namespace scapix::java_api


namespace scapix::java_api {
namespace java::util::function {

inline jint IntUnaryOperator::applyAsInt(jint p1) { return call_method<SCAPIX_META_STRING("applyAsInt"), jint>(p1); }
inline ref<java::util::function::IntUnaryOperator> IntUnaryOperator::compose(ref<java::util::function::IntUnaryOperator> before) { return call_method<SCAPIX_META_STRING("compose"), ref<java::util::function::IntUnaryOperator>>(before); }
inline ref<java::util::function::IntUnaryOperator> IntUnaryOperator::andThen(ref<java::util::function::IntUnaryOperator> after) { return call_method<SCAPIX_META_STRING("andThen"), ref<java::util::function::IntUnaryOperator>>(after); }
inline ref<java::util::function::IntUnaryOperator> IntUnaryOperator::identity() { return call_static_method<SCAPIX_META_STRING("identity"), ref<java::util::function::IntUnaryOperator>>(); }

} // namespace java::util::function
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_FUNCTION_INTUNARYOPERATOR_H
