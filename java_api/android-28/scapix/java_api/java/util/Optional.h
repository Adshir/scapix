// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_OPTIONAL_H
#define SCAPIX_JAVA_UTIL_OPTIONAL_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util::function { class Consumer; }
namespace java::util::function { class Function; }
namespace java::util::function { class Predicate; }
namespace java::util::function { class Supplier; }

namespace java::util {

class Optional : public object_base<SCAPIX_META_STRING("java/util/Optional"),
	java::lang::Object>
{
public:

	static ref<java::util::Optional> empty();
	static ref<java::util::Optional> of(ref<java::lang::Object> value);
	static ref<java::util::Optional> ofNullable(ref<java::lang::Object> value);
	ref<java::lang::Object> get();
	jboolean isPresent();
	void ifPresent(ref<java::util::function::Consumer> consumer);
	ref<java::util::Optional> filter(ref<java::util::function::Predicate> predicate);
	ref<java::util::Optional> map(ref<java::util::function::Function> mapper);
	ref<java::util::Optional> flatMap(ref<java::util::function::Function> mapper);
	ref<java::lang::Object> orElse(ref<java::lang::Object> other);
	ref<java::lang::Object> orElseGet(ref<java::util::function::Supplier> other);
	ref<java::lang::Object> orElseThrow(ref<java::util::function::Supplier> exceptionSupplier);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	Optional(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/java/util/function/Function.h>
#include <scapix/java_api/java/util/function/Predicate.h>
#include <scapix/java_api/java/util/function/Supplier.h>

namespace scapix::java_api {
namespace java::util {

inline ref<java::util::Optional> Optional::empty() { return call_static_method<SCAPIX_META_STRING("empty"), ref<java::util::Optional>>(); }
inline ref<java::util::Optional> Optional::of(ref<java::lang::Object> value) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::Optional>>(value); }
inline ref<java::util::Optional> Optional::ofNullable(ref<java::lang::Object> value) { return call_static_method<SCAPIX_META_STRING("ofNullable"), ref<java::util::Optional>>(value); }
inline ref<java::lang::Object> Optional::get() { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(); }
inline jboolean Optional::isPresent() { return call_method<SCAPIX_META_STRING("isPresent"), jboolean>(); }
inline void Optional::ifPresent(ref<java::util::function::Consumer> consumer) { return call_method<SCAPIX_META_STRING("ifPresent"), void>(consumer); }
inline ref<java::util::Optional> Optional::filter(ref<java::util::function::Predicate> predicate) { return call_method<SCAPIX_META_STRING("filter"), ref<java::util::Optional>>(predicate); }
inline ref<java::util::Optional> Optional::map(ref<java::util::function::Function> mapper) { return call_method<SCAPIX_META_STRING("map"), ref<java::util::Optional>>(mapper); }
inline ref<java::util::Optional> Optional::flatMap(ref<java::util::function::Function> mapper) { return call_method<SCAPIX_META_STRING("flatMap"), ref<java::util::Optional>>(mapper); }
inline ref<java::lang::Object> Optional::orElse(ref<java::lang::Object> other) { return call_method<SCAPIX_META_STRING("orElse"), ref<java::lang::Object>>(other); }
inline ref<java::lang::Object> Optional::orElseGet(ref<java::util::function::Supplier> other) { return call_method<SCAPIX_META_STRING("orElseGet"), ref<java::lang::Object>>(other); }
inline ref<java::lang::Object> Optional::orElseThrow(ref<java::util::function::Supplier> exceptionSupplier) { return call_method<SCAPIX_META_STRING("orElseThrow"), ref<java::lang::Object>>(exceptionSupplier); }
inline jboolean Optional::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint Optional::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> Optional::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_OPTIONAL_H
