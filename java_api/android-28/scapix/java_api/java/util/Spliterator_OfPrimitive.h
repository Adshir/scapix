// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Spliterator.h>

#ifndef SCAPIX_JAVA_UTIL_SPLITERATOR_OFPRIMITIVE_H
#define SCAPIX_JAVA_UTIL_SPLITERATOR_OFPRIMITIVE_H

namespace scapix::java_api {


namespace java::util {

class Spliterator_OfPrimitive : public object_base<SCAPIX_META_STRING("java/util/Spliterator$OfPrimitive"),
	java::lang::Object,
	java::util::Spliterator>
{
public:

	ref<java::util::Spliterator_OfPrimitive> trySplit();
	jboolean tryAdvance(ref<java::lang::Object> p1);
	void forEachRemaining(ref<java::lang::Object> action);

protected:

	Spliterator_OfPrimitive(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api


namespace scapix::java_api {
namespace java::util {

inline ref<java::util::Spliterator_OfPrimitive> Spliterator_OfPrimitive::trySplit() { return call_method<SCAPIX_META_STRING("trySplit"), ref<java::util::Spliterator_OfPrimitive>>(); }
inline jboolean Spliterator_OfPrimitive::tryAdvance(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("tryAdvance"), jboolean>(p1); }
inline void Spliterator_OfPrimitive::forEachRemaining(ref<java::lang::Object> action) { return call_method<SCAPIX_META_STRING("forEachRemaining"), void>(action); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_SPLITERATOR_OFPRIMITIVE_H
