// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractSet.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_UTIL_ENUMSET_H
#define SCAPIX_JAVA_UTIL_ENUMSET_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class Enum; }
namespace java::util { class Collection; }

namespace java::util {

class EnumSet : public object_base<SCAPIX_META_STRING("java/util/EnumSet"),
	java::util::AbstractSet,
	java::lang::Cloneable,
	java::io::Serializable>
{
public:

	static ref<java::util::EnumSet> noneOf(ref<java::lang::Class> elementType);
	static ref<java::util::EnumSet> allOf(ref<java::lang::Class> elementType);
	static ref<java::util::EnumSet> copyOf(ref<java::util::EnumSet> s);
	static ref<java::util::EnumSet> copyOf(ref<java::util::Collection> c);
	static ref<java::util::EnumSet> complementOf(ref<java::util::EnumSet> s);
	static ref<java::util::EnumSet> of(ref<java::lang::Enum> e);
	static ref<java::util::EnumSet> of(ref<java::lang::Enum> e1, ref<java::lang::Enum> e2);
	static ref<java::util::EnumSet> of(ref<java::lang::Enum> e1, ref<java::lang::Enum> e2, ref<java::lang::Enum> e3);
	static ref<java::util::EnumSet> of(ref<java::lang::Enum> e1, ref<java::lang::Enum> e2, ref<java::lang::Enum> e3, ref<java::lang::Enum> e4);
	static ref<java::util::EnumSet> of(ref<java::lang::Enum> e1, ref<java::lang::Enum> e2, ref<java::lang::Enum> e3, ref<java::lang::Enum> e4, ref<java::lang::Enum> e5);
	static ref<java::util::EnumSet> of(ref<java::lang::Enum> first, ref<link::java::array<java::lang::Enum>> rest);
	static ref<java::util::EnumSet> range(ref<java::lang::Enum> from, ref<java::lang::Enum> to);
	ref<java::util::EnumSet> clone();

protected:

	EnumSet(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Enum.h>
#include <scapix/java_api/java/util/Collection.h>

namespace scapix::java_api {
namespace java::util {

inline ref<java::util::EnumSet> EnumSet::noneOf(ref<java::lang::Class> elementType) { return call_static_method<SCAPIX_META_STRING("noneOf"), ref<java::util::EnumSet>>(elementType); }
inline ref<java::util::EnumSet> EnumSet::allOf(ref<java::lang::Class> elementType) { return call_static_method<SCAPIX_META_STRING("allOf"), ref<java::util::EnumSet>>(elementType); }
inline ref<java::util::EnumSet> EnumSet::copyOf(ref<java::util::EnumSet> s) { return call_static_method<SCAPIX_META_STRING("copyOf"), ref<java::util::EnumSet>>(s); }
inline ref<java::util::EnumSet> EnumSet::copyOf(ref<java::util::Collection> c) { return call_static_method<SCAPIX_META_STRING("copyOf"), ref<java::util::EnumSet>>(c); }
inline ref<java::util::EnumSet> EnumSet::complementOf(ref<java::util::EnumSet> s) { return call_static_method<SCAPIX_META_STRING("complementOf"), ref<java::util::EnumSet>>(s); }
inline ref<java::util::EnumSet> EnumSet::of(ref<java::lang::Enum> e) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::EnumSet>>(e); }
inline ref<java::util::EnumSet> EnumSet::of(ref<java::lang::Enum> e1, ref<java::lang::Enum> e2) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::EnumSet>>(e1, e2); }
inline ref<java::util::EnumSet> EnumSet::of(ref<java::lang::Enum> e1, ref<java::lang::Enum> e2, ref<java::lang::Enum> e3) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::EnumSet>>(e1, e2, e3); }
inline ref<java::util::EnumSet> EnumSet::of(ref<java::lang::Enum> e1, ref<java::lang::Enum> e2, ref<java::lang::Enum> e3, ref<java::lang::Enum> e4) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::EnumSet>>(e1, e2, e3, e4); }
inline ref<java::util::EnumSet> EnumSet::of(ref<java::lang::Enum> e1, ref<java::lang::Enum> e2, ref<java::lang::Enum> e3, ref<java::lang::Enum> e4, ref<java::lang::Enum> e5) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::EnumSet>>(e1, e2, e3, e4, e5); }
inline ref<java::util::EnumSet> EnumSet::of(ref<java::lang::Enum> first, ref<link::java::array<java::lang::Enum>> rest) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::util::EnumSet>>(first, rest); }
inline ref<java::util::EnumSet> EnumSet::range(ref<java::lang::Enum> from, ref<java::lang::Enum> to) { return call_static_method<SCAPIX_META_STRING("range"), ref<java::util::EnumSet>>(from, to); }
inline ref<java::util::EnumSet> EnumSet::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::util::EnumSet>>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_ENUMSET_H
