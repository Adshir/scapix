// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_ARRAYS_H
#define SCAPIX_JAVA_UTIL_ARRAYS_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class Comparable; }
namespace java::lang { class String; }
namespace java::util { class Comparator; }
namespace java::util { class List; }
namespace java::util { class Spliterator; }
namespace java::util { class Spliterator_OfDouble; }
namespace java::util { class Spliterator_OfInt; }
namespace java::util { class Spliterator_OfLong; }
namespace java::util::function { class BinaryOperator; }
namespace java::util::function { class DoubleBinaryOperator; }
namespace java::util::function { class IntBinaryOperator; }
namespace java::util::function { class IntFunction; }
namespace java::util::function { class IntToDoubleFunction; }
namespace java::util::function { class IntToLongFunction; }
namespace java::util::function { class IntUnaryOperator; }
namespace java::util::function { class LongBinaryOperator; }
namespace java::util::stream { class DoubleStream; }
namespace java::util::stream { class IntStream; }
namespace java::util::stream { class LongStream; }
namespace java::util::stream { class Stream; }

namespace java::util {

class Arrays : public object_base<SCAPIX_META_STRING("java/util/Arrays"),
	java::lang::Object>
{
public:

	static void sort(ref<link::java::array<jint>> a);
	static void sort(ref<link::java::array<jint>> a, jint fromIndex, jint toIndex);
	static void sort(ref<link::java::array<jlong>> a);
	static void sort(ref<link::java::array<jlong>> a, jint fromIndex, jint toIndex);
	static void sort(ref<link::java::array<jshort>> a);
	static void sort(ref<link::java::array<jshort>> a, jint fromIndex, jint toIndex);
	static void sort(ref<link::java::array<jchar>> a);
	static void sort(ref<link::java::array<jchar>> a, jint fromIndex, jint toIndex);
	static void sort(ref<link::java::array<jbyte>> a);
	static void sort(ref<link::java::array<jbyte>> a, jint fromIndex, jint toIndex);
	static void sort(ref<link::java::array<jfloat>> a);
	static void sort(ref<link::java::array<jfloat>> a, jint fromIndex, jint toIndex);
	static void sort(ref<link::java::array<jdouble>> a);
	static void sort(ref<link::java::array<jdouble>> a, jint fromIndex, jint toIndex);
	static void parallelSort(ref<link::java::array<jbyte>> a);
	static void parallelSort(ref<link::java::array<jbyte>> a, jint fromIndex, jint toIndex);
	static void parallelSort(ref<link::java::array<jchar>> a);
	static void parallelSort(ref<link::java::array<jchar>> a, jint fromIndex, jint toIndex);
	static void parallelSort(ref<link::java::array<jshort>> a);
	static void parallelSort(ref<link::java::array<jshort>> a, jint fromIndex, jint toIndex);
	static void parallelSort(ref<link::java::array<jint>> a);
	static void parallelSort(ref<link::java::array<jint>> a, jint fromIndex, jint toIndex);
	static void parallelSort(ref<link::java::array<jlong>> a);
	static void parallelSort(ref<link::java::array<jlong>> a, jint fromIndex, jint toIndex);
	static void parallelSort(ref<link::java::array<jfloat>> a);
	static void parallelSort(ref<link::java::array<jfloat>> a, jint fromIndex, jint toIndex);
	static void parallelSort(ref<link::java::array<jdouble>> a);
	static void parallelSort(ref<link::java::array<jdouble>> a, jint fromIndex, jint toIndex);
	static void parallelSort(ref<link::java::array<java::lang::Comparable>> a);
	static void parallelSort(ref<link::java::array<java::lang::Comparable>> a, jint fromIndex, jint toIndex);
	static void parallelSort(ref<link::java::array<java::lang::Object>> a, ref<java::util::Comparator> cmp);
	static void parallelSort(ref<link::java::array<java::lang::Object>> a, jint fromIndex, jint toIndex, ref<java::util::Comparator> cmp);
	static void sort(ref<link::java::array<java::lang::Object>> a);
	static void sort(ref<link::java::array<java::lang::Object>> a, jint fromIndex, jint toIndex);
	static void sort(ref<link::java::array<java::lang::Object>> a, ref<java::util::Comparator> c);
	static void sort(ref<link::java::array<java::lang::Object>> a, jint fromIndex, jint toIndex, ref<java::util::Comparator> c);
	static void parallelPrefix(ref<link::java::array<java::lang::Object>> array, ref<java::util::function::BinaryOperator> op);
	static void parallelPrefix(ref<link::java::array<java::lang::Object>> array, jint fromIndex, jint toIndex, ref<java::util::function::BinaryOperator> op);
	static void parallelPrefix(ref<link::java::array<jlong>> array, ref<java::util::function::LongBinaryOperator> op);
	static void parallelPrefix(ref<link::java::array<jlong>> array, jint fromIndex, jint toIndex, ref<java::util::function::LongBinaryOperator> op);
	static void parallelPrefix(ref<link::java::array<jdouble>> array, ref<java::util::function::DoubleBinaryOperator> op);
	static void parallelPrefix(ref<link::java::array<jdouble>> array, jint fromIndex, jint toIndex, ref<java::util::function::DoubleBinaryOperator> op);
	static void parallelPrefix(ref<link::java::array<jint>> array, ref<java::util::function::IntBinaryOperator> op);
	static void parallelPrefix(ref<link::java::array<jint>> array, jint fromIndex, jint toIndex, ref<java::util::function::IntBinaryOperator> op);
	static jint binarySearch(ref<link::java::array<jlong>> a, jlong key);
	static jint binarySearch(ref<link::java::array<jlong>> a, jint fromIndex, jint toIndex, jlong key);
	static jint binarySearch(ref<link::java::array<jint>> a, jint key);
	static jint binarySearch(ref<link::java::array<jint>> a, jint fromIndex, jint toIndex, jint key);
	static jint binarySearch(ref<link::java::array<jshort>> a, jshort key);
	static jint binarySearch(ref<link::java::array<jshort>> a, jint fromIndex, jint toIndex, jshort key);
	static jint binarySearch(ref<link::java::array<jchar>> a, jchar key);
	static jint binarySearch(ref<link::java::array<jchar>> a, jint fromIndex, jint toIndex, jchar key);
	static jint binarySearch(ref<link::java::array<jbyte>> a, jbyte key);
	static jint binarySearch(ref<link::java::array<jbyte>> a, jint fromIndex, jint toIndex, jbyte key);
	static jint binarySearch(ref<link::java::array<jdouble>> a, jdouble key);
	static jint binarySearch(ref<link::java::array<jdouble>> a, jint fromIndex, jint toIndex, jdouble key);
	static jint binarySearch(ref<link::java::array<jfloat>> a, jfloat key);
	static jint binarySearch(ref<link::java::array<jfloat>> a, jint fromIndex, jint toIndex, jfloat key);
	static jint binarySearch(ref<link::java::array<java::lang::Object>> a, ref<java::lang::Object> key);
	static jint binarySearch(ref<link::java::array<java::lang::Object>> a, jint fromIndex, jint toIndex, ref<java::lang::Object> key);
	static jint binarySearch(ref<link::java::array<java::lang::Object>> a, ref<java::lang::Object> key, ref<java::util::Comparator> c);
	static jint binarySearch(ref<link::java::array<java::lang::Object>> a, jint fromIndex, jint toIndex, ref<java::lang::Object> key, ref<java::util::Comparator> c);
	static jboolean equals(ref<link::java::array<jlong>> a, ref<link::java::array<jlong>> a2);
	static jboolean equals(ref<link::java::array<jint>> a, ref<link::java::array<jint>> a2);
	static jboolean equals(ref<link::java::array<jshort>> a, ref<link::java::array<jshort>> a2);
	static jboolean equals(ref<link::java::array<jchar>> a, ref<link::java::array<jchar>> a2);
	static jboolean equals(ref<link::java::array<jbyte>> a, ref<link::java::array<jbyte>> a2);
	static jboolean equals(ref<link::java::array<jboolean>> a, ref<link::java::array<jboolean>> a2);
	static jboolean equals(ref<link::java::array<jdouble>> a, ref<link::java::array<jdouble>> a2);
	static jboolean equals(ref<link::java::array<jfloat>> a, ref<link::java::array<jfloat>> a2);
	static jboolean equals(ref<link::java::array<java::lang::Object>> a, ref<link::java::array<java::lang::Object>> a2);
	static void fill(ref<link::java::array<jlong>> a, jlong val);
	static void fill(ref<link::java::array<jlong>> a, jint fromIndex, jint toIndex, jlong val);
	static void fill(ref<link::java::array<jint>> a, jint val);
	static void fill(ref<link::java::array<jint>> a, jint fromIndex, jint toIndex, jint val);
	static void fill(ref<link::java::array<jshort>> a, jshort val);
	static void fill(ref<link::java::array<jshort>> a, jint fromIndex, jint toIndex, jshort val);
	static void fill(ref<link::java::array<jchar>> a, jchar val);
	static void fill(ref<link::java::array<jchar>> a, jint fromIndex, jint toIndex, jchar val);
	static void fill(ref<link::java::array<jbyte>> a, jbyte val);
	static void fill(ref<link::java::array<jbyte>> a, jint fromIndex, jint toIndex, jbyte val);
	static void fill(ref<link::java::array<jboolean>> a, jboolean val);
	static void fill(ref<link::java::array<jboolean>> a, jint fromIndex, jint toIndex, jboolean val);
	static void fill(ref<link::java::array<jdouble>> a, jdouble val);
	static void fill(ref<link::java::array<jdouble>> a, jint fromIndex, jint toIndex, jdouble val);
	static void fill(ref<link::java::array<jfloat>> a, jfloat val);
	static void fill(ref<link::java::array<jfloat>> a, jint fromIndex, jint toIndex, jfloat val);
	static void fill(ref<link::java::array<java::lang::Object>> a, ref<java::lang::Object> val);
	static void fill(ref<link::java::array<java::lang::Object>> a, jint fromIndex, jint toIndex, ref<java::lang::Object> val);
	static ref<link::java::array<java::lang::Object>> copyOf(ref<link::java::array<java::lang::Object>> original, jint newLength);
	static ref<link::java::array<java::lang::Object>> copyOf(ref<link::java::array<java::lang::Object>> original, jint newLength, ref<java::lang::Class> newType);
	static ref<link::java::array<jbyte>> copyOf(ref<link::java::array<jbyte>> original, jint newLength);
	static ref<link::java::array<jshort>> copyOf(ref<link::java::array<jshort>> original, jint newLength);
	static ref<link::java::array<jint>> copyOf(ref<link::java::array<jint>> original, jint newLength);
	static ref<link::java::array<jlong>> copyOf(ref<link::java::array<jlong>> original, jint newLength);
	static ref<link::java::array<jchar>> copyOf(ref<link::java::array<jchar>> original, jint newLength);
	static ref<link::java::array<jfloat>> copyOf(ref<link::java::array<jfloat>> original, jint newLength);
	static ref<link::java::array<jdouble>> copyOf(ref<link::java::array<jdouble>> original, jint newLength);
	static ref<link::java::array<jboolean>> copyOf(ref<link::java::array<jboolean>> original, jint newLength);
	static ref<link::java::array<java::lang::Object>> copyOfRange(ref<link::java::array<java::lang::Object>> original, jint from, jint to);
	static ref<link::java::array<java::lang::Object>> copyOfRange(ref<link::java::array<java::lang::Object>> original, jint from, jint to, ref<java::lang::Class> newType);
	static ref<link::java::array<jbyte>> copyOfRange(ref<link::java::array<jbyte>> original, jint from, jint to);
	static ref<link::java::array<jshort>> copyOfRange(ref<link::java::array<jshort>> original, jint from, jint to);
	static ref<link::java::array<jint>> copyOfRange(ref<link::java::array<jint>> original, jint from, jint to);
	static ref<link::java::array<jlong>> copyOfRange(ref<link::java::array<jlong>> original, jint from, jint to);
	static ref<link::java::array<jchar>> copyOfRange(ref<link::java::array<jchar>> original, jint from, jint to);
	static ref<link::java::array<jfloat>> copyOfRange(ref<link::java::array<jfloat>> original, jint from, jint to);
	static ref<link::java::array<jdouble>> copyOfRange(ref<link::java::array<jdouble>> original, jint from, jint to);
	static ref<link::java::array<jboolean>> copyOfRange(ref<link::java::array<jboolean>> original, jint from, jint to);
	static ref<java::util::List> asList(ref<link::java::array<java::lang::Object>> a);
	static jint hashCode(ref<link::java::array<jlong>> a);
	static jint hashCode(ref<link::java::array<jint>> a);
	static jint hashCode(ref<link::java::array<jshort>> a);
	static jint hashCode(ref<link::java::array<jchar>> a);
	static jint hashCode(ref<link::java::array<jbyte>> a);
	static jint hashCode(ref<link::java::array<jboolean>> a);
	static jint hashCode(ref<link::java::array<jfloat>> a);
	static jint hashCode(ref<link::java::array<jdouble>> a);
	static jint hashCode(ref<link::java::array<java::lang::Object>> a);
	static jint deepHashCode(ref<link::java::array<java::lang::Object>> a);
	static jboolean deepEquals(ref<link::java::array<java::lang::Object>> a1, ref<link::java::array<java::lang::Object>> a2);
	static ref<java::lang::String> toString(ref<link::java::array<jlong>> a);
	static ref<java::lang::String> toString(ref<link::java::array<jint>> a);
	static ref<java::lang::String> toString(ref<link::java::array<jshort>> a);
	static ref<java::lang::String> toString(ref<link::java::array<jchar>> a);
	static ref<java::lang::String> toString(ref<link::java::array<jbyte>> a);
	static ref<java::lang::String> toString(ref<link::java::array<jboolean>> a);
	static ref<java::lang::String> toString(ref<link::java::array<jfloat>> a);
	static ref<java::lang::String> toString(ref<link::java::array<jdouble>> a);
	static ref<java::lang::String> toString(ref<link::java::array<java::lang::Object>> a);
	static ref<java::lang::String> deepToString(ref<link::java::array<java::lang::Object>> a);
	static void setAll(ref<link::java::array<java::lang::Object>> array, ref<java::util::function::IntFunction> generator);
	static void parallelSetAll(ref<link::java::array<java::lang::Object>> array, ref<java::util::function::IntFunction> generator);
	static void setAll(ref<link::java::array<jint>> array, ref<java::util::function::IntUnaryOperator> generator);
	static void parallelSetAll(ref<link::java::array<jint>> array, ref<java::util::function::IntUnaryOperator> generator);
	static void setAll(ref<link::java::array<jlong>> array, ref<java::util::function::IntToLongFunction> generator);
	static void parallelSetAll(ref<link::java::array<jlong>> array, ref<java::util::function::IntToLongFunction> generator);
	static void setAll(ref<link::java::array<jdouble>> array, ref<java::util::function::IntToDoubleFunction> generator);
	static void parallelSetAll(ref<link::java::array<jdouble>> array, ref<java::util::function::IntToDoubleFunction> generator);
	static ref<java::util::Spliterator> spliterator(ref<link::java::array<java::lang::Object>> array);
	static ref<java::util::Spliterator> spliterator(ref<link::java::array<java::lang::Object>> array, jint startInclusive, jint endExclusive);
	static ref<java::util::Spliterator_OfInt> spliterator(ref<link::java::array<jint>> array);
	static ref<java::util::Spliterator_OfInt> spliterator(ref<link::java::array<jint>> array, jint startInclusive, jint endExclusive);
	static ref<java::util::Spliterator_OfLong> spliterator(ref<link::java::array<jlong>> array);
	static ref<java::util::Spliterator_OfLong> spliterator(ref<link::java::array<jlong>> array, jint startInclusive, jint endExclusive);
	static ref<java::util::Spliterator_OfDouble> spliterator(ref<link::java::array<jdouble>> array);
	static ref<java::util::Spliterator_OfDouble> spliterator(ref<link::java::array<jdouble>> array, jint startInclusive, jint endExclusive);
	static ref<java::util::stream::Stream> stream(ref<link::java::array<java::lang::Object>> array);
	static ref<java::util::stream::Stream> stream(ref<link::java::array<java::lang::Object>> array, jint startInclusive, jint endExclusive);
	static ref<java::util::stream::IntStream> stream(ref<link::java::array<jint>> array);
	static ref<java::util::stream::IntStream> stream(ref<link::java::array<jint>> array, jint startInclusive, jint endExclusive);
	static ref<java::util::stream::LongStream> stream(ref<link::java::array<jlong>> array);
	static ref<java::util::stream::LongStream> stream(ref<link::java::array<jlong>> array, jint startInclusive, jint endExclusive);
	static ref<java::util::stream::DoubleStream> stream(ref<link::java::array<jdouble>> array);
	static ref<java::util::stream::DoubleStream> stream(ref<link::java::array<jdouble>> array, jint startInclusive, jint endExclusive);

protected:

	Arrays(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Comparator.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/Spliterator_OfDouble.h>
#include <scapix/java_api/java/util/Spliterator_OfInt.h>
#include <scapix/java_api/java/util/Spliterator_OfLong.h>
#include <scapix/java_api/java/util/function/BinaryOperator.h>
#include <scapix/java_api/java/util/function/DoubleBinaryOperator.h>
#include <scapix/java_api/java/util/function/IntBinaryOperator.h>
#include <scapix/java_api/java/util/function/IntFunction.h>
#include <scapix/java_api/java/util/function/IntToDoubleFunction.h>
#include <scapix/java_api/java/util/function/IntToLongFunction.h>
#include <scapix/java_api/java/util/function/IntUnaryOperator.h>
#include <scapix/java_api/java/util/function/LongBinaryOperator.h>
#include <scapix/java_api/java/util/stream/DoubleStream.h>
#include <scapix/java_api/java/util/stream/IntStream.h>
#include <scapix/java_api/java/util/stream/LongStream.h>
#include <scapix/java_api/java/util/stream/Stream.h>

namespace scapix::java_api {
namespace java::util {

inline void Arrays::sort(ref<link::java::array<jint>> a) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a); }
inline void Arrays::sort(ref<link::java::array<jint>> a, jint fromIndex, jint toIndex) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a, fromIndex, toIndex); }
inline void Arrays::sort(ref<link::java::array<jlong>> a) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a); }
inline void Arrays::sort(ref<link::java::array<jlong>> a, jint fromIndex, jint toIndex) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a, fromIndex, toIndex); }
inline void Arrays::sort(ref<link::java::array<jshort>> a) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a); }
inline void Arrays::sort(ref<link::java::array<jshort>> a, jint fromIndex, jint toIndex) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a, fromIndex, toIndex); }
inline void Arrays::sort(ref<link::java::array<jchar>> a) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a); }
inline void Arrays::sort(ref<link::java::array<jchar>> a, jint fromIndex, jint toIndex) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a, fromIndex, toIndex); }
inline void Arrays::sort(ref<link::java::array<jbyte>> a) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a); }
inline void Arrays::sort(ref<link::java::array<jbyte>> a, jint fromIndex, jint toIndex) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a, fromIndex, toIndex); }
inline void Arrays::sort(ref<link::java::array<jfloat>> a) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a); }
inline void Arrays::sort(ref<link::java::array<jfloat>> a, jint fromIndex, jint toIndex) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a, fromIndex, toIndex); }
inline void Arrays::sort(ref<link::java::array<jdouble>> a) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a); }
inline void Arrays::sort(ref<link::java::array<jdouble>> a, jint fromIndex, jint toIndex) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a, fromIndex, toIndex); }
inline void Arrays::parallelSort(ref<link::java::array<jbyte>> a) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a); }
inline void Arrays::parallelSort(ref<link::java::array<jbyte>> a, jint fromIndex, jint toIndex) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a, fromIndex, toIndex); }
inline void Arrays::parallelSort(ref<link::java::array<jchar>> a) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a); }
inline void Arrays::parallelSort(ref<link::java::array<jchar>> a, jint fromIndex, jint toIndex) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a, fromIndex, toIndex); }
inline void Arrays::parallelSort(ref<link::java::array<jshort>> a) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a); }
inline void Arrays::parallelSort(ref<link::java::array<jshort>> a, jint fromIndex, jint toIndex) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a, fromIndex, toIndex); }
inline void Arrays::parallelSort(ref<link::java::array<jint>> a) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a); }
inline void Arrays::parallelSort(ref<link::java::array<jint>> a, jint fromIndex, jint toIndex) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a, fromIndex, toIndex); }
inline void Arrays::parallelSort(ref<link::java::array<jlong>> a) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a); }
inline void Arrays::parallelSort(ref<link::java::array<jlong>> a, jint fromIndex, jint toIndex) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a, fromIndex, toIndex); }
inline void Arrays::parallelSort(ref<link::java::array<jfloat>> a) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a); }
inline void Arrays::parallelSort(ref<link::java::array<jfloat>> a, jint fromIndex, jint toIndex) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a, fromIndex, toIndex); }
inline void Arrays::parallelSort(ref<link::java::array<jdouble>> a) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a); }
inline void Arrays::parallelSort(ref<link::java::array<jdouble>> a, jint fromIndex, jint toIndex) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a, fromIndex, toIndex); }
inline void Arrays::parallelSort(ref<link::java::array<java::lang::Comparable>> a) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a); }
inline void Arrays::parallelSort(ref<link::java::array<java::lang::Comparable>> a, jint fromIndex, jint toIndex) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a, fromIndex, toIndex); }
inline void Arrays::parallelSort(ref<link::java::array<java::lang::Object>> a, ref<java::util::Comparator> cmp) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a, cmp); }
inline void Arrays::parallelSort(ref<link::java::array<java::lang::Object>> a, jint fromIndex, jint toIndex, ref<java::util::Comparator> cmp) { return call_static_method<SCAPIX_META_STRING("parallelSort"), void>(a, fromIndex, toIndex, cmp); }
inline void Arrays::sort(ref<link::java::array<java::lang::Object>> a) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a); }
inline void Arrays::sort(ref<link::java::array<java::lang::Object>> a, jint fromIndex, jint toIndex) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a, fromIndex, toIndex); }
inline void Arrays::sort(ref<link::java::array<java::lang::Object>> a, ref<java::util::Comparator> c) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a, c); }
inline void Arrays::sort(ref<link::java::array<java::lang::Object>> a, jint fromIndex, jint toIndex, ref<java::util::Comparator> c) { return call_static_method<SCAPIX_META_STRING("sort"), void>(a, fromIndex, toIndex, c); }
inline void Arrays::parallelPrefix(ref<link::java::array<java::lang::Object>> array, ref<java::util::function::BinaryOperator> op) { return call_static_method<SCAPIX_META_STRING("parallelPrefix"), void>(array, op); }
inline void Arrays::parallelPrefix(ref<link::java::array<java::lang::Object>> array, jint fromIndex, jint toIndex, ref<java::util::function::BinaryOperator> op) { return call_static_method<SCAPIX_META_STRING("parallelPrefix"), void>(array, fromIndex, toIndex, op); }
inline void Arrays::parallelPrefix(ref<link::java::array<jlong>> array, ref<java::util::function::LongBinaryOperator> op) { return call_static_method<SCAPIX_META_STRING("parallelPrefix"), void>(array, op); }
inline void Arrays::parallelPrefix(ref<link::java::array<jlong>> array, jint fromIndex, jint toIndex, ref<java::util::function::LongBinaryOperator> op) { return call_static_method<SCAPIX_META_STRING("parallelPrefix"), void>(array, fromIndex, toIndex, op); }
inline void Arrays::parallelPrefix(ref<link::java::array<jdouble>> array, ref<java::util::function::DoubleBinaryOperator> op) { return call_static_method<SCAPIX_META_STRING("parallelPrefix"), void>(array, op); }
inline void Arrays::parallelPrefix(ref<link::java::array<jdouble>> array, jint fromIndex, jint toIndex, ref<java::util::function::DoubleBinaryOperator> op) { return call_static_method<SCAPIX_META_STRING("parallelPrefix"), void>(array, fromIndex, toIndex, op); }
inline void Arrays::parallelPrefix(ref<link::java::array<jint>> array, ref<java::util::function::IntBinaryOperator> op) { return call_static_method<SCAPIX_META_STRING("parallelPrefix"), void>(array, op); }
inline void Arrays::parallelPrefix(ref<link::java::array<jint>> array, jint fromIndex, jint toIndex, ref<java::util::function::IntBinaryOperator> op) { return call_static_method<SCAPIX_META_STRING("parallelPrefix"), void>(array, fromIndex, toIndex, op); }
inline jint Arrays::binarySearch(ref<link::java::array<jlong>> a, jlong key) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, key); }
inline jint Arrays::binarySearch(ref<link::java::array<jlong>> a, jint fromIndex, jint toIndex, jlong key) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, fromIndex, toIndex, key); }
inline jint Arrays::binarySearch(ref<link::java::array<jint>> a, jint key) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, key); }
inline jint Arrays::binarySearch(ref<link::java::array<jint>> a, jint fromIndex, jint toIndex, jint key) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, fromIndex, toIndex, key); }
inline jint Arrays::binarySearch(ref<link::java::array<jshort>> a, jshort key) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, key); }
inline jint Arrays::binarySearch(ref<link::java::array<jshort>> a, jint fromIndex, jint toIndex, jshort key) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, fromIndex, toIndex, key); }
inline jint Arrays::binarySearch(ref<link::java::array<jchar>> a, jchar key) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, key); }
inline jint Arrays::binarySearch(ref<link::java::array<jchar>> a, jint fromIndex, jint toIndex, jchar key) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, fromIndex, toIndex, key); }
inline jint Arrays::binarySearch(ref<link::java::array<jbyte>> a, jbyte key) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, key); }
inline jint Arrays::binarySearch(ref<link::java::array<jbyte>> a, jint fromIndex, jint toIndex, jbyte key) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, fromIndex, toIndex, key); }
inline jint Arrays::binarySearch(ref<link::java::array<jdouble>> a, jdouble key) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, key); }
inline jint Arrays::binarySearch(ref<link::java::array<jdouble>> a, jint fromIndex, jint toIndex, jdouble key) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, fromIndex, toIndex, key); }
inline jint Arrays::binarySearch(ref<link::java::array<jfloat>> a, jfloat key) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, key); }
inline jint Arrays::binarySearch(ref<link::java::array<jfloat>> a, jint fromIndex, jint toIndex, jfloat key) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, fromIndex, toIndex, key); }
inline jint Arrays::binarySearch(ref<link::java::array<java::lang::Object>> a, ref<java::lang::Object> key) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, key); }
inline jint Arrays::binarySearch(ref<link::java::array<java::lang::Object>> a, jint fromIndex, jint toIndex, ref<java::lang::Object> key) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, fromIndex, toIndex, key); }
inline jint Arrays::binarySearch(ref<link::java::array<java::lang::Object>> a, ref<java::lang::Object> key, ref<java::util::Comparator> c) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, key, c); }
inline jint Arrays::binarySearch(ref<link::java::array<java::lang::Object>> a, jint fromIndex, jint toIndex, ref<java::lang::Object> key, ref<java::util::Comparator> c) { return call_static_method<SCAPIX_META_STRING("binarySearch"), jint>(a, fromIndex, toIndex, key, c); }
inline jboolean Arrays::equals(ref<link::java::array<jlong>> a, ref<link::java::array<jlong>> a2) { return call_static_method<SCAPIX_META_STRING("equals"), jboolean>(a, a2); }
inline jboolean Arrays::equals(ref<link::java::array<jint>> a, ref<link::java::array<jint>> a2) { return call_static_method<SCAPIX_META_STRING("equals"), jboolean>(a, a2); }
inline jboolean Arrays::equals(ref<link::java::array<jshort>> a, ref<link::java::array<jshort>> a2) { return call_static_method<SCAPIX_META_STRING("equals"), jboolean>(a, a2); }
inline jboolean Arrays::equals(ref<link::java::array<jchar>> a, ref<link::java::array<jchar>> a2) { return call_static_method<SCAPIX_META_STRING("equals"), jboolean>(a, a2); }
inline jboolean Arrays::equals(ref<link::java::array<jbyte>> a, ref<link::java::array<jbyte>> a2) { return call_static_method<SCAPIX_META_STRING("equals"), jboolean>(a, a2); }
inline jboolean Arrays::equals(ref<link::java::array<jboolean>> a, ref<link::java::array<jboolean>> a2) { return call_static_method<SCAPIX_META_STRING("equals"), jboolean>(a, a2); }
inline jboolean Arrays::equals(ref<link::java::array<jdouble>> a, ref<link::java::array<jdouble>> a2) { return call_static_method<SCAPIX_META_STRING("equals"), jboolean>(a, a2); }
inline jboolean Arrays::equals(ref<link::java::array<jfloat>> a, ref<link::java::array<jfloat>> a2) { return call_static_method<SCAPIX_META_STRING("equals"), jboolean>(a, a2); }
inline jboolean Arrays::equals(ref<link::java::array<java::lang::Object>> a, ref<link::java::array<java::lang::Object>> a2) { return call_static_method<SCAPIX_META_STRING("equals"), jboolean>(a, a2); }
inline void Arrays::fill(ref<link::java::array<jlong>> a, jlong val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, val); }
inline void Arrays::fill(ref<link::java::array<jlong>> a, jint fromIndex, jint toIndex, jlong val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, fromIndex, toIndex, val); }
inline void Arrays::fill(ref<link::java::array<jint>> a, jint val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, val); }
inline void Arrays::fill(ref<link::java::array<jint>> a, jint fromIndex, jint toIndex, jint val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, fromIndex, toIndex, val); }
inline void Arrays::fill(ref<link::java::array<jshort>> a, jshort val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, val); }
inline void Arrays::fill(ref<link::java::array<jshort>> a, jint fromIndex, jint toIndex, jshort val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, fromIndex, toIndex, val); }
inline void Arrays::fill(ref<link::java::array<jchar>> a, jchar val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, val); }
inline void Arrays::fill(ref<link::java::array<jchar>> a, jint fromIndex, jint toIndex, jchar val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, fromIndex, toIndex, val); }
inline void Arrays::fill(ref<link::java::array<jbyte>> a, jbyte val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, val); }
inline void Arrays::fill(ref<link::java::array<jbyte>> a, jint fromIndex, jint toIndex, jbyte val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, fromIndex, toIndex, val); }
inline void Arrays::fill(ref<link::java::array<jboolean>> a, jboolean val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, val); }
inline void Arrays::fill(ref<link::java::array<jboolean>> a, jint fromIndex, jint toIndex, jboolean val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, fromIndex, toIndex, val); }
inline void Arrays::fill(ref<link::java::array<jdouble>> a, jdouble val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, val); }
inline void Arrays::fill(ref<link::java::array<jdouble>> a, jint fromIndex, jint toIndex, jdouble val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, fromIndex, toIndex, val); }
inline void Arrays::fill(ref<link::java::array<jfloat>> a, jfloat val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, val); }
inline void Arrays::fill(ref<link::java::array<jfloat>> a, jint fromIndex, jint toIndex, jfloat val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, fromIndex, toIndex, val); }
inline void Arrays::fill(ref<link::java::array<java::lang::Object>> a, ref<java::lang::Object> val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, val); }
inline void Arrays::fill(ref<link::java::array<java::lang::Object>> a, jint fromIndex, jint toIndex, ref<java::lang::Object> val) { return call_static_method<SCAPIX_META_STRING("fill"), void>(a, fromIndex, toIndex, val); }
inline ref<link::java::array<java::lang::Object>> Arrays::copyOf(ref<link::java::array<java::lang::Object>> original, jint newLength) { return call_static_method<SCAPIX_META_STRING("copyOf"), ref<link::java::array<java::lang::Object>>>(original, newLength); }
inline ref<link::java::array<java::lang::Object>> Arrays::copyOf(ref<link::java::array<java::lang::Object>> original, jint newLength, ref<java::lang::Class> newType) { return call_static_method<SCAPIX_META_STRING("copyOf"), ref<link::java::array<java::lang::Object>>>(original, newLength, newType); }
inline ref<link::java::array<jbyte>> Arrays::copyOf(ref<link::java::array<jbyte>> original, jint newLength) { return call_static_method<SCAPIX_META_STRING("copyOf"), ref<link::java::array<jbyte>>>(original, newLength); }
inline ref<link::java::array<jshort>> Arrays::copyOf(ref<link::java::array<jshort>> original, jint newLength) { return call_static_method<SCAPIX_META_STRING("copyOf"), ref<link::java::array<jshort>>>(original, newLength); }
inline ref<link::java::array<jint>> Arrays::copyOf(ref<link::java::array<jint>> original, jint newLength) { return call_static_method<SCAPIX_META_STRING("copyOf"), ref<link::java::array<jint>>>(original, newLength); }
inline ref<link::java::array<jlong>> Arrays::copyOf(ref<link::java::array<jlong>> original, jint newLength) { return call_static_method<SCAPIX_META_STRING("copyOf"), ref<link::java::array<jlong>>>(original, newLength); }
inline ref<link::java::array<jchar>> Arrays::copyOf(ref<link::java::array<jchar>> original, jint newLength) { return call_static_method<SCAPIX_META_STRING("copyOf"), ref<link::java::array<jchar>>>(original, newLength); }
inline ref<link::java::array<jfloat>> Arrays::copyOf(ref<link::java::array<jfloat>> original, jint newLength) { return call_static_method<SCAPIX_META_STRING("copyOf"), ref<link::java::array<jfloat>>>(original, newLength); }
inline ref<link::java::array<jdouble>> Arrays::copyOf(ref<link::java::array<jdouble>> original, jint newLength) { return call_static_method<SCAPIX_META_STRING("copyOf"), ref<link::java::array<jdouble>>>(original, newLength); }
inline ref<link::java::array<jboolean>> Arrays::copyOf(ref<link::java::array<jboolean>> original, jint newLength) { return call_static_method<SCAPIX_META_STRING("copyOf"), ref<link::java::array<jboolean>>>(original, newLength); }
inline ref<link::java::array<java::lang::Object>> Arrays::copyOfRange(ref<link::java::array<java::lang::Object>> original, jint from, jint to) { return call_static_method<SCAPIX_META_STRING("copyOfRange"), ref<link::java::array<java::lang::Object>>>(original, from, to); }
inline ref<link::java::array<java::lang::Object>> Arrays::copyOfRange(ref<link::java::array<java::lang::Object>> original, jint from, jint to, ref<java::lang::Class> newType) { return call_static_method<SCAPIX_META_STRING("copyOfRange"), ref<link::java::array<java::lang::Object>>>(original, from, to, newType); }
inline ref<link::java::array<jbyte>> Arrays::copyOfRange(ref<link::java::array<jbyte>> original, jint from, jint to) { return call_static_method<SCAPIX_META_STRING("copyOfRange"), ref<link::java::array<jbyte>>>(original, from, to); }
inline ref<link::java::array<jshort>> Arrays::copyOfRange(ref<link::java::array<jshort>> original, jint from, jint to) { return call_static_method<SCAPIX_META_STRING("copyOfRange"), ref<link::java::array<jshort>>>(original, from, to); }
inline ref<link::java::array<jint>> Arrays::copyOfRange(ref<link::java::array<jint>> original, jint from, jint to) { return call_static_method<SCAPIX_META_STRING("copyOfRange"), ref<link::java::array<jint>>>(original, from, to); }
inline ref<link::java::array<jlong>> Arrays::copyOfRange(ref<link::java::array<jlong>> original, jint from, jint to) { return call_static_method<SCAPIX_META_STRING("copyOfRange"), ref<link::java::array<jlong>>>(original, from, to); }
inline ref<link::java::array<jchar>> Arrays::copyOfRange(ref<link::java::array<jchar>> original, jint from, jint to) { return call_static_method<SCAPIX_META_STRING("copyOfRange"), ref<link::java::array<jchar>>>(original, from, to); }
inline ref<link::java::array<jfloat>> Arrays::copyOfRange(ref<link::java::array<jfloat>> original, jint from, jint to) { return call_static_method<SCAPIX_META_STRING("copyOfRange"), ref<link::java::array<jfloat>>>(original, from, to); }
inline ref<link::java::array<jdouble>> Arrays::copyOfRange(ref<link::java::array<jdouble>> original, jint from, jint to) { return call_static_method<SCAPIX_META_STRING("copyOfRange"), ref<link::java::array<jdouble>>>(original, from, to); }
inline ref<link::java::array<jboolean>> Arrays::copyOfRange(ref<link::java::array<jboolean>> original, jint from, jint to) { return call_static_method<SCAPIX_META_STRING("copyOfRange"), ref<link::java::array<jboolean>>>(original, from, to); }
inline ref<java::util::List> Arrays::asList(ref<link::java::array<java::lang::Object>> a) { return call_static_method<SCAPIX_META_STRING("asList"), ref<java::util::List>>(a); }
inline jint Arrays::hashCode(ref<link::java::array<jlong>> a) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(a); }
inline jint Arrays::hashCode(ref<link::java::array<jint>> a) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(a); }
inline jint Arrays::hashCode(ref<link::java::array<jshort>> a) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(a); }
inline jint Arrays::hashCode(ref<link::java::array<jchar>> a) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(a); }
inline jint Arrays::hashCode(ref<link::java::array<jbyte>> a) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(a); }
inline jint Arrays::hashCode(ref<link::java::array<jboolean>> a) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(a); }
inline jint Arrays::hashCode(ref<link::java::array<jfloat>> a) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(a); }
inline jint Arrays::hashCode(ref<link::java::array<jdouble>> a) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(a); }
inline jint Arrays::hashCode(ref<link::java::array<java::lang::Object>> a) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(a); }
inline jint Arrays::deepHashCode(ref<link::java::array<java::lang::Object>> a) { return call_static_method<SCAPIX_META_STRING("deepHashCode"), jint>(a); }
inline jboolean Arrays::deepEquals(ref<link::java::array<java::lang::Object>> a1, ref<link::java::array<java::lang::Object>> a2) { return call_static_method<SCAPIX_META_STRING("deepEquals"), jboolean>(a1, a2); }
inline ref<java::lang::String> Arrays::toString(ref<link::java::array<jlong>> a) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(a); }
inline ref<java::lang::String> Arrays::toString(ref<link::java::array<jint>> a) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(a); }
inline ref<java::lang::String> Arrays::toString(ref<link::java::array<jshort>> a) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(a); }
inline ref<java::lang::String> Arrays::toString(ref<link::java::array<jchar>> a) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(a); }
inline ref<java::lang::String> Arrays::toString(ref<link::java::array<jbyte>> a) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(a); }
inline ref<java::lang::String> Arrays::toString(ref<link::java::array<jboolean>> a) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(a); }
inline ref<java::lang::String> Arrays::toString(ref<link::java::array<jfloat>> a) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(a); }
inline ref<java::lang::String> Arrays::toString(ref<link::java::array<jdouble>> a) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(a); }
inline ref<java::lang::String> Arrays::toString(ref<link::java::array<java::lang::Object>> a) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(a); }
inline ref<java::lang::String> Arrays::deepToString(ref<link::java::array<java::lang::Object>> a) { return call_static_method<SCAPIX_META_STRING("deepToString"), ref<java::lang::String>>(a); }
inline void Arrays::setAll(ref<link::java::array<java::lang::Object>> array, ref<java::util::function::IntFunction> generator) { return call_static_method<SCAPIX_META_STRING("setAll"), void>(array, generator); }
inline void Arrays::parallelSetAll(ref<link::java::array<java::lang::Object>> array, ref<java::util::function::IntFunction> generator) { return call_static_method<SCAPIX_META_STRING("parallelSetAll"), void>(array, generator); }
inline void Arrays::setAll(ref<link::java::array<jint>> array, ref<java::util::function::IntUnaryOperator> generator) { return call_static_method<SCAPIX_META_STRING("setAll"), void>(array, generator); }
inline void Arrays::parallelSetAll(ref<link::java::array<jint>> array, ref<java::util::function::IntUnaryOperator> generator) { return call_static_method<SCAPIX_META_STRING("parallelSetAll"), void>(array, generator); }
inline void Arrays::setAll(ref<link::java::array<jlong>> array, ref<java::util::function::IntToLongFunction> generator) { return call_static_method<SCAPIX_META_STRING("setAll"), void>(array, generator); }
inline void Arrays::parallelSetAll(ref<link::java::array<jlong>> array, ref<java::util::function::IntToLongFunction> generator) { return call_static_method<SCAPIX_META_STRING("parallelSetAll"), void>(array, generator); }
inline void Arrays::setAll(ref<link::java::array<jdouble>> array, ref<java::util::function::IntToDoubleFunction> generator) { return call_static_method<SCAPIX_META_STRING("setAll"), void>(array, generator); }
inline void Arrays::parallelSetAll(ref<link::java::array<jdouble>> array, ref<java::util::function::IntToDoubleFunction> generator) { return call_static_method<SCAPIX_META_STRING("parallelSetAll"), void>(array, generator); }
inline ref<java::util::Spliterator> Arrays::spliterator(ref<link::java::array<java::lang::Object>> array) { return call_static_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator>>(array); }
inline ref<java::util::Spliterator> Arrays::spliterator(ref<link::java::array<java::lang::Object>> array, jint startInclusive, jint endExclusive) { return call_static_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator>>(array, startInclusive, endExclusive); }
inline ref<java::util::Spliterator_OfInt> Arrays::spliterator(ref<link::java::array<jint>> array) { return call_static_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator_OfInt>>(array); }
inline ref<java::util::Spliterator_OfInt> Arrays::spliterator(ref<link::java::array<jint>> array, jint startInclusive, jint endExclusive) { return call_static_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator_OfInt>>(array, startInclusive, endExclusive); }
inline ref<java::util::Spliterator_OfLong> Arrays::spliterator(ref<link::java::array<jlong>> array) { return call_static_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator_OfLong>>(array); }
inline ref<java::util::Spliterator_OfLong> Arrays::spliterator(ref<link::java::array<jlong>> array, jint startInclusive, jint endExclusive) { return call_static_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator_OfLong>>(array, startInclusive, endExclusive); }
inline ref<java::util::Spliterator_OfDouble> Arrays::spliterator(ref<link::java::array<jdouble>> array) { return call_static_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator_OfDouble>>(array); }
inline ref<java::util::Spliterator_OfDouble> Arrays::spliterator(ref<link::java::array<jdouble>> array, jint startInclusive, jint endExclusive) { return call_static_method<SCAPIX_META_STRING("spliterator"), ref<java::util::Spliterator_OfDouble>>(array, startInclusive, endExclusive); }
inline ref<java::util::stream::Stream> Arrays::stream(ref<link::java::array<java::lang::Object>> array) { return call_static_method<SCAPIX_META_STRING("stream"), ref<java::util::stream::Stream>>(array); }
inline ref<java::util::stream::Stream> Arrays::stream(ref<link::java::array<java::lang::Object>> array, jint startInclusive, jint endExclusive) { return call_static_method<SCAPIX_META_STRING("stream"), ref<java::util::stream::Stream>>(array, startInclusive, endExclusive); }
inline ref<java::util::stream::IntStream> Arrays::stream(ref<link::java::array<jint>> array) { return call_static_method<SCAPIX_META_STRING("stream"), ref<java::util::stream::IntStream>>(array); }
inline ref<java::util::stream::IntStream> Arrays::stream(ref<link::java::array<jint>> array, jint startInclusive, jint endExclusive) { return call_static_method<SCAPIX_META_STRING("stream"), ref<java::util::stream::IntStream>>(array, startInclusive, endExclusive); }
inline ref<java::util::stream::LongStream> Arrays::stream(ref<link::java::array<jlong>> array) { return call_static_method<SCAPIX_META_STRING("stream"), ref<java::util::stream::LongStream>>(array); }
inline ref<java::util::stream::LongStream> Arrays::stream(ref<link::java::array<jlong>> array, jint startInclusive, jint endExclusive) { return call_static_method<SCAPIX_META_STRING("stream"), ref<java::util::stream::LongStream>>(array, startInclusive, endExclusive); }
inline ref<java::util::stream::DoubleStream> Arrays::stream(ref<link::java::array<jdouble>> array) { return call_static_method<SCAPIX_META_STRING("stream"), ref<java::util::stream::DoubleStream>>(array); }
inline ref<java::util::stream::DoubleStream> Arrays::stream(ref<link::java::array<jdouble>> array, jint startInclusive, jint endExclusive) { return call_static_method<SCAPIX_META_STRING("stream"), ref<java::util::stream::DoubleStream>>(array, startInclusive, endExclusive); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_ARRAYS_H
