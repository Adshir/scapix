// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_UTIL_JAR_MANIFEST_H
#define SCAPIX_JAVA_UTIL_JAR_MANIFEST_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::io { class OutputStream; }
namespace java::lang { class String; }
namespace java::util { class Map; }
namespace java::util::jar { class Attributes; }

namespace java::util::jar {

class Manifest : public object_base<SCAPIX_META_STRING("java/util/jar/Manifest"),
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static ref<Manifest> new_object();
	static ref<Manifest> new_object(ref<java::io::InputStream> is);
	static ref<Manifest> new_object(ref<java::util::jar::Manifest> man);
	ref<java::util::jar::Attributes> getMainAttributes();
	ref<java::util::Map> getEntries();
	ref<java::util::jar::Attributes> getAttributes(ref<java::lang::String> name);
	void clear();
	void write(ref<java::io::OutputStream> out);
	void read(ref<java::io::InputStream> is);
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	ref<java::lang::Object> clone();

protected:

	Manifest(handle_type h) : base_(h) {}

};

} // namespace java::util::jar
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/jar/Attributes.h>

namespace scapix::java_api {
namespace java::util::jar {

inline ref<Manifest> Manifest::new_object() { return base_::new_object(); }
inline ref<Manifest> Manifest::new_object(ref<java::io::InputStream> is) { return base_::new_object(is); }
inline ref<Manifest> Manifest::new_object(ref<java::util::jar::Manifest> man) { return base_::new_object(man); }
inline ref<java::util::jar::Attributes> Manifest::getMainAttributes() { return call_method<SCAPIX_META_STRING("getMainAttributes"), ref<java::util::jar::Attributes>>(); }
inline ref<java::util::Map> Manifest::getEntries() { return call_method<SCAPIX_META_STRING("getEntries"), ref<java::util::Map>>(); }
inline ref<java::util::jar::Attributes> Manifest::getAttributes(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getAttributes"), ref<java::util::jar::Attributes>>(name); }
inline void Manifest::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline void Manifest::write(ref<java::io::OutputStream> out) { return call_method<SCAPIX_META_STRING("write"), void>(out); }
inline void Manifest::read(ref<java::io::InputStream> is) { return call_method<SCAPIX_META_STRING("read"), void>(is); }
inline jboolean Manifest::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint Manifest::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::Object> Manifest::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }

} // namespace java::util::jar
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_JAR_MANIFEST_H
