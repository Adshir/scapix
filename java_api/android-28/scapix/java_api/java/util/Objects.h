// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_OBJECTS_H
#define SCAPIX_JAVA_UTIL_OBJECTS_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util { class Comparator; }
namespace java::util::function { class Supplier; }

namespace java::util {

class Objects : public object_base<SCAPIX_META_STRING("java/util/Objects"),
	java::lang::Object>
{
public:

	static jboolean equals(ref<java::lang::Object> a, ref<java::lang::Object> b);
	static jboolean deepEquals(ref<java::lang::Object> a, ref<java::lang::Object> b);
	static jint hashCode(ref<java::lang::Object> o);
	static jint hash(ref<link::java::array<java::lang::Object>> values);
	static ref<java::lang::String> toString(ref<java::lang::Object> o);
	static ref<java::lang::String> toString(ref<java::lang::Object> o, ref<java::lang::String> nullDefault);
	static jint compare(ref<java::lang::Object> a, ref<java::lang::Object> b, ref<java::util::Comparator> c);
	static ref<java::lang::Object> requireNonNull(ref<java::lang::Object> obj);
	static ref<java::lang::Object> requireNonNull(ref<java::lang::Object> obj, ref<java::lang::String> message);
	static jboolean isNull(ref<java::lang::Object> obj);
	static jboolean nonNull(ref<java::lang::Object> obj);
	static ref<java::lang::Object> requireNonNull(ref<java::lang::Object> obj, ref<java::util::function::Supplier> messageSupplier);

protected:

	Objects(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Comparator.h>
#include <scapix/java_api/java/util/function/Supplier.h>

namespace scapix::java_api {
namespace java::util {

inline jboolean Objects::equals(ref<java::lang::Object> a, ref<java::lang::Object> b) { return call_static_method<SCAPIX_META_STRING("equals"), jboolean>(a, b); }
inline jboolean Objects::deepEquals(ref<java::lang::Object> a, ref<java::lang::Object> b) { return call_static_method<SCAPIX_META_STRING("deepEquals"), jboolean>(a, b); }
inline jint Objects::hashCode(ref<java::lang::Object> o) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(o); }
inline jint Objects::hash(ref<link::java::array<java::lang::Object>> values) { return call_static_method<SCAPIX_META_STRING("hash"), jint>(values); }
inline ref<java::lang::String> Objects::toString(ref<java::lang::Object> o) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(o); }
inline ref<java::lang::String> Objects::toString(ref<java::lang::Object> o, ref<java::lang::String> nullDefault) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(o, nullDefault); }
inline jint Objects::compare(ref<java::lang::Object> a, ref<java::lang::Object> b, ref<java::util::Comparator> c) { return call_static_method<SCAPIX_META_STRING("compare"), jint>(a, b, c); }
inline ref<java::lang::Object> Objects::requireNonNull(ref<java::lang::Object> obj) { return call_static_method<SCAPIX_META_STRING("requireNonNull"), ref<java::lang::Object>>(obj); }
inline ref<java::lang::Object> Objects::requireNonNull(ref<java::lang::Object> obj, ref<java::lang::String> message) { return call_static_method<SCAPIX_META_STRING("requireNonNull"), ref<java::lang::Object>>(obj, message); }
inline jboolean Objects::isNull(ref<java::lang::Object> obj) { return call_static_method<SCAPIX_META_STRING("isNull"), jboolean>(obj); }
inline jboolean Objects::nonNull(ref<java::lang::Object> obj) { return call_static_method<SCAPIX_META_STRING("nonNull"), jboolean>(obj); }
inline ref<java::lang::Object> Objects::requireNonNull(ref<java::lang::Object> obj, ref<java::util::function::Supplier> messageSupplier) { return call_static_method<SCAPIX_META_STRING("requireNonNull"), ref<java::lang::Object>>(obj, messageSupplier); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_OBJECTS_H
