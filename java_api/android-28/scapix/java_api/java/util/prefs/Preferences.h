// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_PREFS_PREFERENCES_H
#define SCAPIX_JAVA_UTIL_PREFS_PREFERENCES_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::io { class OutputStream; }
namespace java::lang { class Class; }
namespace java::lang { class String; }
namespace java::util::prefs { class NodeChangeListener; }
namespace java::util::prefs { class PreferenceChangeListener; }

namespace java::util::prefs {

class Preferences : public object_base<SCAPIX_META_STRING("java/util/prefs/Preferences"),
	java::lang::Object>
{
public:

	static jint MAX_KEY_LENGTH_();
	static jint MAX_NAME_LENGTH_();
	static jint MAX_VALUE_LENGTH_();

	static ref<java::util::prefs::Preferences> userNodeForPackage(ref<java::lang::Class> c);
	static ref<java::util::prefs::Preferences> systemNodeForPackage(ref<java::lang::Class> c);
	static ref<java::util::prefs::Preferences> userRoot();
	static ref<java::util::prefs::Preferences> systemRoot();
	void put(ref<java::lang::String> p1, ref<java::lang::String> p2);
	ref<java::lang::String> get(ref<java::lang::String> p1, ref<java::lang::String> p2);
	void remove(ref<java::lang::String> p1);
	void clear();
	void putInt(ref<java::lang::String> p1, jint p2);
	jint getInt(ref<java::lang::String> p1, jint p2);
	void putLong(ref<java::lang::String> p1, jlong p2);
	jlong getLong(ref<java::lang::String> p1, jlong p2);
	void putBoolean(ref<java::lang::String> p1, jboolean p2);
	jboolean getBoolean(ref<java::lang::String> p1, jboolean p2);
	void putFloat(ref<java::lang::String> p1, jfloat p2);
	jfloat getFloat(ref<java::lang::String> p1, jfloat p2);
	void putDouble(ref<java::lang::String> p1, jdouble p2);
	jdouble getDouble(ref<java::lang::String> p1, jdouble p2);
	void putByteArray(ref<java::lang::String> p1, ref<link::java::array<jbyte>> p2);
	ref<link::java::array<jbyte>> getByteArray(ref<java::lang::String> p1, ref<link::java::array<jbyte>> p2);
	ref<link::java::array<java::lang::String>> keys();
	ref<link::java::array<java::lang::String>> childrenNames();
	ref<java::util::prefs::Preferences> parent();
	ref<java::util::prefs::Preferences> node(ref<java::lang::String> p1);
	jboolean nodeExists(ref<java::lang::String> p1);
	void removeNode();
	ref<java::lang::String> name();
	ref<java::lang::String> absolutePath();
	jboolean isUserNode();
	ref<java::lang::String> toString();
	void flush();
	void sync();
	void addPreferenceChangeListener(ref<java::util::prefs::PreferenceChangeListener> p1);
	void removePreferenceChangeListener(ref<java::util::prefs::PreferenceChangeListener> p1);
	void addNodeChangeListener(ref<java::util::prefs::NodeChangeListener> p1);
	void removeNodeChangeListener(ref<java::util::prefs::NodeChangeListener> p1);
	void exportNode(ref<java::io::OutputStream> p1);
	void exportSubtree(ref<java::io::OutputStream> p1);
	static void importPreferences(ref<java::io::InputStream> is);

protected:

	Preferences(handle_type h) : base_(h) {}

};

} // namespace java::util::prefs
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/prefs/NodeChangeListener.h>
#include <scapix/java_api/java/util/prefs/PreferenceChangeListener.h>

namespace scapix::java_api {
namespace java::util::prefs {

inline jint Preferences::MAX_KEY_LENGTH_() { return get_static_field<SCAPIX_META_STRING("MAX_KEY_LENGTH"), jint>(); }
inline jint Preferences::MAX_NAME_LENGTH_() { return get_static_field<SCAPIX_META_STRING("MAX_NAME_LENGTH"), jint>(); }
inline jint Preferences::MAX_VALUE_LENGTH_() { return get_static_field<SCAPIX_META_STRING("MAX_VALUE_LENGTH"), jint>(); }
inline ref<java::util::prefs::Preferences> Preferences::userNodeForPackage(ref<java::lang::Class> c) { return call_static_method<SCAPIX_META_STRING("userNodeForPackage"), ref<java::util::prefs::Preferences>>(c); }
inline ref<java::util::prefs::Preferences> Preferences::systemNodeForPackage(ref<java::lang::Class> c) { return call_static_method<SCAPIX_META_STRING("systemNodeForPackage"), ref<java::util::prefs::Preferences>>(c); }
inline ref<java::util::prefs::Preferences> Preferences::userRoot() { return call_static_method<SCAPIX_META_STRING("userRoot"), ref<java::util::prefs::Preferences>>(); }
inline ref<java::util::prefs::Preferences> Preferences::systemRoot() { return call_static_method<SCAPIX_META_STRING("systemRoot"), ref<java::util::prefs::Preferences>>(); }
inline void Preferences::put(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("put"), void>(p1, p2); }
inline ref<java::lang::String> Preferences::get(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::String>>(p1, p2); }
inline void Preferences::remove(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("remove"), void>(p1); }
inline void Preferences::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline void Preferences::putInt(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("putInt"), void>(p1, p2); }
inline jint Preferences::getInt(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("getInt"), jint>(p1, p2); }
inline void Preferences::putLong(ref<java::lang::String> p1, jlong p2) { return call_method<SCAPIX_META_STRING("putLong"), void>(p1, p2); }
inline jlong Preferences::getLong(ref<java::lang::String> p1, jlong p2) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(p1, p2); }
inline void Preferences::putBoolean(ref<java::lang::String> p1, jboolean p2) { return call_method<SCAPIX_META_STRING("putBoolean"), void>(p1, p2); }
inline jboolean Preferences::getBoolean(ref<java::lang::String> p1, jboolean p2) { return call_method<SCAPIX_META_STRING("getBoolean"), jboolean>(p1, p2); }
inline void Preferences::putFloat(ref<java::lang::String> p1, jfloat p2) { return call_method<SCAPIX_META_STRING("putFloat"), void>(p1, p2); }
inline jfloat Preferences::getFloat(ref<java::lang::String> p1, jfloat p2) { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(p1, p2); }
inline void Preferences::putDouble(ref<java::lang::String> p1, jdouble p2) { return call_method<SCAPIX_META_STRING("putDouble"), void>(p1, p2); }
inline jdouble Preferences::getDouble(ref<java::lang::String> p1, jdouble p2) { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(p1, p2); }
inline void Preferences::putByteArray(ref<java::lang::String> p1, ref<link::java::array<jbyte>> p2) { return call_method<SCAPIX_META_STRING("putByteArray"), void>(p1, p2); }
inline ref<link::java::array<jbyte>> Preferences::getByteArray(ref<java::lang::String> p1, ref<link::java::array<jbyte>> p2) { return call_method<SCAPIX_META_STRING("getByteArray"), ref<link::java::array<jbyte>>>(p1, p2); }
inline ref<link::java::array<java::lang::String>> Preferences::keys() { return call_method<SCAPIX_META_STRING("keys"), ref<link::java::array<java::lang::String>>>(); }
inline ref<link::java::array<java::lang::String>> Preferences::childrenNames() { return call_method<SCAPIX_META_STRING("childrenNames"), ref<link::java::array<java::lang::String>>>(); }
inline ref<java::util::prefs::Preferences> Preferences::parent() { return call_method<SCAPIX_META_STRING("parent"), ref<java::util::prefs::Preferences>>(); }
inline ref<java::util::prefs::Preferences> Preferences::node(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("node"), ref<java::util::prefs::Preferences>>(p1); }
inline jboolean Preferences::nodeExists(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("nodeExists"), jboolean>(p1); }
inline void Preferences::removeNode() { return call_method<SCAPIX_META_STRING("removeNode"), void>(); }
inline ref<java::lang::String> Preferences::name() { return call_method<SCAPIX_META_STRING("name"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Preferences::absolutePath() { return call_method<SCAPIX_META_STRING("absolutePath"), ref<java::lang::String>>(); }
inline jboolean Preferences::isUserNode() { return call_method<SCAPIX_META_STRING("isUserNode"), jboolean>(); }
inline ref<java::lang::String> Preferences::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline void Preferences::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline void Preferences::sync() { return call_method<SCAPIX_META_STRING("sync"), void>(); }
inline void Preferences::addPreferenceChangeListener(ref<java::util::prefs::PreferenceChangeListener> p1) { return call_method<SCAPIX_META_STRING("addPreferenceChangeListener"), void>(p1); }
inline void Preferences::removePreferenceChangeListener(ref<java::util::prefs::PreferenceChangeListener> p1) { return call_method<SCAPIX_META_STRING("removePreferenceChangeListener"), void>(p1); }
inline void Preferences::addNodeChangeListener(ref<java::util::prefs::NodeChangeListener> p1) { return call_method<SCAPIX_META_STRING("addNodeChangeListener"), void>(p1); }
inline void Preferences::removeNodeChangeListener(ref<java::util::prefs::NodeChangeListener> p1) { return call_method<SCAPIX_META_STRING("removeNodeChangeListener"), void>(p1); }
inline void Preferences::exportNode(ref<java::io::OutputStream> p1) { return call_method<SCAPIX_META_STRING("exportNode"), void>(p1); }
inline void Preferences::exportSubtree(ref<java::io::OutputStream> p1) { return call_method<SCAPIX_META_STRING("exportSubtree"), void>(p1); }
inline void Preferences::importPreferences(ref<java::io::InputStream> is) { return call_static_method<SCAPIX_META_STRING("importPreferences"), void>(is); }

} // namespace java::util::prefs
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_PREFS_PREFERENCES_H
