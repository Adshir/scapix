// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/prefs/Preferences.h>

#ifndef SCAPIX_JAVA_UTIL_PREFS_ABSTRACTPREFERENCES_H
#define SCAPIX_JAVA_UTIL_PREFS_ABSTRACTPREFERENCES_H

namespace scapix::java_api {

namespace java::io { class OutputStream; }
namespace java::lang { class String; }
namespace java::util::prefs { class NodeChangeListener; }
namespace java::util::prefs { class PreferenceChangeListener; }

namespace java::util::prefs {

class AbstractPreferences : public object_base<SCAPIX_META_STRING("java/util/prefs/AbstractPreferences"),
	java::util::prefs::Preferences>
{
public:

	void put(ref<java::lang::String> key, ref<java::lang::String> value);
	ref<java::lang::String> get(ref<java::lang::String> key, ref<java::lang::String> def);
	void remove(ref<java::lang::String> key);
	void clear();
	void putInt(ref<java::lang::String> key, jint value);
	jint getInt(ref<java::lang::String> key, jint def);
	void putLong(ref<java::lang::String> key, jlong value);
	jlong getLong(ref<java::lang::String> key, jlong def);
	void putBoolean(ref<java::lang::String> key, jboolean value);
	jboolean getBoolean(ref<java::lang::String> key, jboolean def);
	void putFloat(ref<java::lang::String> key, jfloat value);
	jfloat getFloat(ref<java::lang::String> key, jfloat def);
	void putDouble(ref<java::lang::String> key, jdouble value);
	jdouble getDouble(ref<java::lang::String> key, jdouble def);
	void putByteArray(ref<java::lang::String> key, ref<link::java::array<jbyte>> value);
	ref<link::java::array<jbyte>> getByteArray(ref<java::lang::String> key, ref<link::java::array<jbyte>> def);
	ref<link::java::array<java::lang::String>> keys();
	ref<link::java::array<java::lang::String>> childrenNames();
	ref<java::util::prefs::Preferences> parent();
	ref<java::util::prefs::Preferences> node(ref<java::lang::String> path);
	jboolean nodeExists(ref<java::lang::String> path);
	void removeNode();
	ref<java::lang::String> name();
	ref<java::lang::String> absolutePath();
	jboolean isUserNode();
	void addPreferenceChangeListener(ref<java::util::prefs::PreferenceChangeListener> pcl);
	void removePreferenceChangeListener(ref<java::util::prefs::PreferenceChangeListener> pcl);
	void addNodeChangeListener(ref<java::util::prefs::NodeChangeListener> ncl);
	void removeNodeChangeListener(ref<java::util::prefs::NodeChangeListener> ncl);
	ref<java::lang::String> toString();
	void sync();
	void flush();
	void exportNode(ref<java::io::OutputStream> os);
	void exportSubtree(ref<java::io::OutputStream> os);

protected:

	AbstractPreferences(handle_type h) : base_(h) {}

};

} // namespace java::util::prefs
} // namespace scapix::java_api

#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/prefs/NodeChangeListener.h>
#include <scapix/java_api/java/util/prefs/PreferenceChangeListener.h>

namespace scapix::java_api {
namespace java::util::prefs {

inline void AbstractPreferences::put(ref<java::lang::String> key, ref<java::lang::String> value) { return call_method<SCAPIX_META_STRING("put"), void>(key, value); }
inline ref<java::lang::String> AbstractPreferences::get(ref<java::lang::String> key, ref<java::lang::String> def) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::String>>(key, def); }
inline void AbstractPreferences::remove(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("remove"), void>(key); }
inline void AbstractPreferences::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline void AbstractPreferences::putInt(ref<java::lang::String> key, jint value) { return call_method<SCAPIX_META_STRING("putInt"), void>(key, value); }
inline jint AbstractPreferences::getInt(ref<java::lang::String> key, jint def) { return call_method<SCAPIX_META_STRING("getInt"), jint>(key, def); }
inline void AbstractPreferences::putLong(ref<java::lang::String> key, jlong value) { return call_method<SCAPIX_META_STRING("putLong"), void>(key, value); }
inline jlong AbstractPreferences::getLong(ref<java::lang::String> key, jlong def) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(key, def); }
inline void AbstractPreferences::putBoolean(ref<java::lang::String> key, jboolean value) { return call_method<SCAPIX_META_STRING("putBoolean"), void>(key, value); }
inline jboolean AbstractPreferences::getBoolean(ref<java::lang::String> key, jboolean def) { return call_method<SCAPIX_META_STRING("getBoolean"), jboolean>(key, def); }
inline void AbstractPreferences::putFloat(ref<java::lang::String> key, jfloat value) { return call_method<SCAPIX_META_STRING("putFloat"), void>(key, value); }
inline jfloat AbstractPreferences::getFloat(ref<java::lang::String> key, jfloat def) { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(key, def); }
inline void AbstractPreferences::putDouble(ref<java::lang::String> key, jdouble value) { return call_method<SCAPIX_META_STRING("putDouble"), void>(key, value); }
inline jdouble AbstractPreferences::getDouble(ref<java::lang::String> key, jdouble def) { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(key, def); }
inline void AbstractPreferences::putByteArray(ref<java::lang::String> key, ref<link::java::array<jbyte>> value) { return call_method<SCAPIX_META_STRING("putByteArray"), void>(key, value); }
inline ref<link::java::array<jbyte>> AbstractPreferences::getByteArray(ref<java::lang::String> key, ref<link::java::array<jbyte>> def) { return call_method<SCAPIX_META_STRING("getByteArray"), ref<link::java::array<jbyte>>>(key, def); }
inline ref<link::java::array<java::lang::String>> AbstractPreferences::keys() { return call_method<SCAPIX_META_STRING("keys"), ref<link::java::array<java::lang::String>>>(); }
inline ref<link::java::array<java::lang::String>> AbstractPreferences::childrenNames() { return call_method<SCAPIX_META_STRING("childrenNames"), ref<link::java::array<java::lang::String>>>(); }
inline ref<java::util::prefs::Preferences> AbstractPreferences::parent() { return call_method<SCAPIX_META_STRING("parent"), ref<java::util::prefs::Preferences>>(); }
inline ref<java::util::prefs::Preferences> AbstractPreferences::node(ref<java::lang::String> path) { return call_method<SCAPIX_META_STRING("node"), ref<java::util::prefs::Preferences>>(path); }
inline jboolean AbstractPreferences::nodeExists(ref<java::lang::String> path) { return call_method<SCAPIX_META_STRING("nodeExists"), jboolean>(path); }
inline void AbstractPreferences::removeNode() { return call_method<SCAPIX_META_STRING("removeNode"), void>(); }
inline ref<java::lang::String> AbstractPreferences::name() { return call_method<SCAPIX_META_STRING("name"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AbstractPreferences::absolutePath() { return call_method<SCAPIX_META_STRING("absolutePath"), ref<java::lang::String>>(); }
inline jboolean AbstractPreferences::isUserNode() { return call_method<SCAPIX_META_STRING("isUserNode"), jboolean>(); }
inline void AbstractPreferences::addPreferenceChangeListener(ref<java::util::prefs::PreferenceChangeListener> pcl) { return call_method<SCAPIX_META_STRING("addPreferenceChangeListener"), void>(pcl); }
inline void AbstractPreferences::removePreferenceChangeListener(ref<java::util::prefs::PreferenceChangeListener> pcl) { return call_method<SCAPIX_META_STRING("removePreferenceChangeListener"), void>(pcl); }
inline void AbstractPreferences::addNodeChangeListener(ref<java::util::prefs::NodeChangeListener> ncl) { return call_method<SCAPIX_META_STRING("addNodeChangeListener"), void>(ncl); }
inline void AbstractPreferences::removeNodeChangeListener(ref<java::util::prefs::NodeChangeListener> ncl) { return call_method<SCAPIX_META_STRING("removeNodeChangeListener"), void>(ncl); }
inline ref<java::lang::String> AbstractPreferences::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline void AbstractPreferences::sync() { return call_method<SCAPIX_META_STRING("sync"), void>(); }
inline void AbstractPreferences::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline void AbstractPreferences::exportNode(ref<java::io::OutputStream> os) { return call_method<SCAPIX_META_STRING("exportNode"), void>(os); }
inline void AbstractPreferences::exportSubtree(ref<java::io::OutputStream> os) { return call_method<SCAPIX_META_STRING("exportSubtree"), void>(os); }

} // namespace java::util::prefs
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_PREFS_ABSTRACTPREFERENCES_H
