// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/logging/Handler.h>

#ifndef SCAPIX_JAVA_UTIL_LOGGING_STREAMHANDLER_H
#define SCAPIX_JAVA_UTIL_LOGGING_STREAMHANDLER_H

namespace scapix::java_api {

namespace java::io { class OutputStream; }
namespace java::lang { class String; }
namespace java::util::logging { class Formatter; }
namespace java::util::logging { class LogRecord; }

namespace java::util::logging {

class StreamHandler : public object_base<SCAPIX_META_STRING("java/util/logging/StreamHandler"),
	java::util::logging::Handler>
{
public:

	static ref<StreamHandler> new_object();
	static ref<StreamHandler> new_object(ref<java::io::OutputStream> out, ref<java::util::logging::Formatter> formatter);
	void setEncoding(ref<java::lang::String> encoding);
	void publish(ref<java::util::logging::LogRecord> record);
	jboolean isLoggable(ref<java::util::logging::LogRecord> record);
	void flush();
	void close();

protected:

	StreamHandler(handle_type h) : base_(h) {}

};

} // namespace java::util::logging
} // namespace scapix::java_api

#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/logging/Formatter.h>
#include <scapix/java_api/java/util/logging/LogRecord.h>

namespace scapix::java_api {
namespace java::util::logging {

inline ref<StreamHandler> StreamHandler::new_object() { return base_::new_object(); }
inline ref<StreamHandler> StreamHandler::new_object(ref<java::io::OutputStream> out, ref<java::util::logging::Formatter> formatter) { return base_::new_object(out, formatter); }
inline void StreamHandler::setEncoding(ref<java::lang::String> encoding) { return call_method<SCAPIX_META_STRING("setEncoding"), void>(encoding); }
inline void StreamHandler::publish(ref<java::util::logging::LogRecord> record) { return call_method<SCAPIX_META_STRING("publish"), void>(record); }
inline jboolean StreamHandler::isLoggable(ref<java::util::logging::LogRecord> record) { return call_method<SCAPIX_META_STRING("isLoggable"), jboolean>(record); }
inline void StreamHandler::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline void StreamHandler::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::util::logging
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_LOGGING_STREAMHANDLER_H
