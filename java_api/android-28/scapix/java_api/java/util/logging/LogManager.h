// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_LOGGING_LOGMANAGER_H
#define SCAPIX_JAVA_UTIL_LOGGING_LOGMANAGER_H

namespace scapix::java_api {

namespace java::beans { class PropertyChangeListener; }
namespace java::io { class InputStream; }
namespace java::lang { class String; }
namespace java::util { class Enumeration; }
namespace java::util::logging { class Logger; }
namespace java::util::logging { class LoggingMXBean; }

namespace java::util::logging {

class LogManager : public object_base<SCAPIX_META_STRING("java/util/logging/LogManager"),
	java::lang::Object>
{
public:

	static ref<java::lang::String> LOGGING_MXBEAN_NAME_();

	static ref<java::util::logging::LogManager> getLogManager();
	void addPropertyChangeListener(ref<java::beans::PropertyChangeListener> l);
	void removePropertyChangeListener(ref<java::beans::PropertyChangeListener> l);
	jboolean addLogger(ref<java::util::logging::Logger> logger);
	ref<java::util::logging::Logger> getLogger(ref<java::lang::String> name);
	ref<java::util::Enumeration> getLoggerNames();
	void readConfiguration();
	void reset();
	void readConfiguration(ref<java::io::InputStream> ins);
	ref<java::lang::String> getProperty(ref<java::lang::String> name);
	void checkAccess();
	static ref<java::util::logging::LoggingMXBean> getLoggingMXBean();

protected:

	LogManager(handle_type h) : base_(h) {}

};

} // namespace java::util::logging
} // namespace scapix::java_api

#include <scapix/java_api/java/beans/PropertyChangeListener.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/logging/Logger.h>
#include <scapix/java_api/java/util/logging/LoggingMXBean.h>

namespace scapix::java_api {
namespace java::util::logging {

inline ref<java::lang::String> LogManager::LOGGING_MXBEAN_NAME_() { return get_static_field<SCAPIX_META_STRING("LOGGING_MXBEAN_NAME"), ref<java::lang::String>>(); }
inline ref<java::util::logging::LogManager> LogManager::getLogManager() { return call_static_method<SCAPIX_META_STRING("getLogManager"), ref<java::util::logging::LogManager>>(); }
inline void LogManager::addPropertyChangeListener(ref<java::beans::PropertyChangeListener> l) { return call_method<SCAPIX_META_STRING("addPropertyChangeListener"), void>(l); }
inline void LogManager::removePropertyChangeListener(ref<java::beans::PropertyChangeListener> l) { return call_method<SCAPIX_META_STRING("removePropertyChangeListener"), void>(l); }
inline jboolean LogManager::addLogger(ref<java::util::logging::Logger> logger) { return call_method<SCAPIX_META_STRING("addLogger"), jboolean>(logger); }
inline ref<java::util::logging::Logger> LogManager::getLogger(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getLogger"), ref<java::util::logging::Logger>>(name); }
inline ref<java::util::Enumeration> LogManager::getLoggerNames() { return call_method<SCAPIX_META_STRING("getLoggerNames"), ref<java::util::Enumeration>>(); }
inline void LogManager::readConfiguration() { return call_method<SCAPIX_META_STRING("readConfiguration"), void>(); }
inline void LogManager::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline void LogManager::readConfiguration(ref<java::io::InputStream> ins) { return call_method<SCAPIX_META_STRING("readConfiguration"), void>(ins); }
inline ref<java::lang::String> LogManager::getProperty(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getProperty"), ref<java::lang::String>>(name); }
inline void LogManager::checkAccess() { return call_method<SCAPIX_META_STRING("checkAccess"), void>(); }
inline ref<java::util::logging::LoggingMXBean> LogManager::getLoggingMXBean() { return call_static_method<SCAPIX_META_STRING("getLoggingMXBean"), ref<java::util::logging::LoggingMXBean>>(); }

} // namespace java::util::logging
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_LOGGING_LOGMANAGER_H
