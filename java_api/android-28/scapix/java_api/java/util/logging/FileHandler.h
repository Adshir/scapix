// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/logging/StreamHandler.h>

#ifndef SCAPIX_JAVA_UTIL_LOGGING_FILEHANDLER_H
#define SCAPIX_JAVA_UTIL_LOGGING_FILEHANDLER_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util::logging { class LogRecord; }

namespace java::util::logging {

class FileHandler : public object_base<SCAPIX_META_STRING("java/util/logging/FileHandler"),
	java::util::logging::StreamHandler>
{
public:

	static ref<FileHandler> new_object();
	static ref<FileHandler> new_object(ref<java::lang::String> pattern);
	static ref<FileHandler> new_object(ref<java::lang::String> pattern, jboolean append);
	static ref<FileHandler> new_object(ref<java::lang::String> pattern, jint limit, jint count);
	static ref<FileHandler> new_object(ref<java::lang::String> pattern, jint limit, jint count, jboolean append);
	void publish(ref<java::util::logging::LogRecord> record);
	void close();

protected:

	FileHandler(handle_type h) : base_(h) {}

};

} // namespace java::util::logging
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/logging/LogRecord.h>

namespace scapix::java_api {
namespace java::util::logging {

inline ref<FileHandler> FileHandler::new_object() { return base_::new_object(); }
inline ref<FileHandler> FileHandler::new_object(ref<java::lang::String> pattern) { return base_::new_object(pattern); }
inline ref<FileHandler> FileHandler::new_object(ref<java::lang::String> pattern, jboolean append) { return base_::new_object(pattern, append); }
inline ref<FileHandler> FileHandler::new_object(ref<java::lang::String> pattern, jint limit, jint count) { return base_::new_object(pattern, limit, count); }
inline ref<FileHandler> FileHandler::new_object(ref<java::lang::String> pattern, jint limit, jint count, jboolean append) { return base_::new_object(pattern, limit, count, append); }
inline void FileHandler::publish(ref<java::util::logging::LogRecord> record) { return call_method<SCAPIX_META_STRING("publish"), void>(record); }
inline void FileHandler::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::util::logging
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_LOGGING_FILEHANDLER_H
