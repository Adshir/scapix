// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_UTIL_LOGGING_HANDLER_H
#define SCAPIX_JAVA_UTIL_LOGGING_HANDLER_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util::logging { class ErrorManager; }
namespace java::util::logging { class Filter; }
namespace java::util::logging { class Formatter; }
namespace java::util::logging { class Level; }
namespace java::util::logging { class LogRecord; }

namespace java::util::logging {

class Handler : public object_base<SCAPIX_META_STRING("java/util/logging/Handler"),
	java::lang::Object>
{
public:

	void publish(ref<java::util::logging::LogRecord> p1);
	void flush();
	void close();
	void setFormatter(ref<java::util::logging::Formatter> newFormatter);
	ref<java::util::logging::Formatter> getFormatter();
	void setEncoding(ref<java::lang::String> encoding);
	ref<java::lang::String> getEncoding();
	void setFilter(ref<java::util::logging::Filter> newFilter);
	ref<java::util::logging::Filter> getFilter();
	void setErrorManager(ref<java::util::logging::ErrorManager> em);
	ref<java::util::logging::ErrorManager> getErrorManager();
	void setLevel(ref<java::util::logging::Level> newLevel);
	ref<java::util::logging::Level> getLevel();
	jboolean isLoggable(ref<java::util::logging::LogRecord> record);

protected:

	Handler(handle_type h) : base_(h) {}

};

} // namespace java::util::logging
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/logging/ErrorManager.h>
#include <scapix/java_api/java/util/logging/Filter.h>
#include <scapix/java_api/java/util/logging/Formatter.h>
#include <scapix/java_api/java/util/logging/Level.h>
#include <scapix/java_api/java/util/logging/LogRecord.h>

namespace scapix::java_api {
namespace java::util::logging {

inline void Handler::publish(ref<java::util::logging::LogRecord> p1) { return call_method<SCAPIX_META_STRING("publish"), void>(p1); }
inline void Handler::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline void Handler::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void Handler::setFormatter(ref<java::util::logging::Formatter> newFormatter) { return call_method<SCAPIX_META_STRING("setFormatter"), void>(newFormatter); }
inline ref<java::util::logging::Formatter> Handler::getFormatter() { return call_method<SCAPIX_META_STRING("getFormatter"), ref<java::util::logging::Formatter>>(); }
inline void Handler::setEncoding(ref<java::lang::String> encoding) { return call_method<SCAPIX_META_STRING("setEncoding"), void>(encoding); }
inline ref<java::lang::String> Handler::getEncoding() { return call_method<SCAPIX_META_STRING("getEncoding"), ref<java::lang::String>>(); }
inline void Handler::setFilter(ref<java::util::logging::Filter> newFilter) { return call_method<SCAPIX_META_STRING("setFilter"), void>(newFilter); }
inline ref<java::util::logging::Filter> Handler::getFilter() { return call_method<SCAPIX_META_STRING("getFilter"), ref<java::util::logging::Filter>>(); }
inline void Handler::setErrorManager(ref<java::util::logging::ErrorManager> em) { return call_method<SCAPIX_META_STRING("setErrorManager"), void>(em); }
inline ref<java::util::logging::ErrorManager> Handler::getErrorManager() { return call_method<SCAPIX_META_STRING("getErrorManager"), ref<java::util::logging::ErrorManager>>(); }
inline void Handler::setLevel(ref<java::util::logging::Level> newLevel) { return call_method<SCAPIX_META_STRING("setLevel"), void>(newLevel); }
inline ref<java::util::logging::Level> Handler::getLevel() { return call_method<SCAPIX_META_STRING("getLevel"), ref<java::util::logging::Level>>(); }
inline jboolean Handler::isLoggable(ref<java::util::logging::LogRecord> record) { return call_method<SCAPIX_META_STRING("isLoggable"), jboolean>(record); }

} // namespace java::util::logging
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_LOGGING_HANDLER_H
