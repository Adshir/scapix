// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/TimeZone.h>

#ifndef SCAPIX_JAVA_UTIL_SIMPLETIMEZONE_H
#define SCAPIX_JAVA_UTIL_SIMPLETIMEZONE_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::util { class Date; }

namespace java::util {

class SimpleTimeZone : public object_base<SCAPIX_META_STRING("java/util/SimpleTimeZone"),
	java::util::TimeZone>
{
public:

	static jint STANDARD_TIME_();
	static jint UTC_TIME_();
	static jint WALL_TIME_();

	static ref<SimpleTimeZone> new_object(jint rawOffset, ref<java::lang::String> ID_);
	static ref<SimpleTimeZone> new_object(jint rawOffset, ref<java::lang::String> ID_, jint startMonth, jint startDay, jint startDayOfWeek, jint startTime, jint endMonth, jint endDay, jint endDayOfWeek, jint endTime);
	static ref<SimpleTimeZone> new_object(jint rawOffset, ref<java::lang::String> ID_, jint startMonth, jint startDay, jint startDayOfWeek, jint startTime, jint endMonth, jint endDay, jint endDayOfWeek, jint endTime, jint dstSavings);
	static ref<SimpleTimeZone> new_object(jint rawOffset, ref<java::lang::String> ID_, jint startMonth, jint startDay, jint startDayOfWeek, jint startTime, jint startTimeMode, jint endMonth, jint endDay, jint endDayOfWeek, jint endTime, jint endTimeMode, jint dstSavings);
	void setStartYear(jint year);
	void setStartRule(jint startMonth, jint startDay, jint startDayOfWeek, jint startTime);
	void setStartRule(jint startMonth, jint startDay, jint startTime);
	void setStartRule(jint startMonth, jint startDay, jint startDayOfWeek, jint startTime, jboolean after);
	void setEndRule(jint endMonth, jint endDay, jint endDayOfWeek, jint endTime);
	void setEndRule(jint endMonth, jint endDay, jint endTime);
	void setEndRule(jint endMonth, jint endDay, jint endDayOfWeek, jint endTime, jboolean after);
	jint getOffset(jlong date);
	jint getOffset(jint era, jint year, jint month, jint day, jint dayOfWeek, jint millis);
	jint getRawOffset();
	void setRawOffset(jint offsetMillis);
	void setDSTSavings(jint millisSavedDuringDST);
	jint getDSTSavings();
	jboolean useDaylightTime();
	jboolean observesDaylightTime();
	jboolean inDaylightTime(ref<java::util::Date> date);
	ref<java::lang::Object> clone();
	jint hashCode();
	jboolean equals(ref<java::lang::Object> obj);
	jboolean hasSameRules(ref<java::util::TimeZone> other);
	ref<java::lang::String> toString();

protected:

	SimpleTimeZone(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Date.h>

namespace scapix::java_api {
namespace java::util {

inline jint SimpleTimeZone::STANDARD_TIME_() { return get_static_field<SCAPIX_META_STRING("STANDARD_TIME"), jint>(); }
inline jint SimpleTimeZone::UTC_TIME_() { return get_static_field<SCAPIX_META_STRING("UTC_TIME"), jint>(); }
inline jint SimpleTimeZone::WALL_TIME_() { return get_static_field<SCAPIX_META_STRING("WALL_TIME"), jint>(); }
inline ref<SimpleTimeZone> SimpleTimeZone::new_object(jint rawOffset, ref<java::lang::String> ID_) { return base_::new_object(rawOffset, ID_); }
inline ref<SimpleTimeZone> SimpleTimeZone::new_object(jint rawOffset, ref<java::lang::String> ID_, jint startMonth, jint startDay, jint startDayOfWeek, jint startTime, jint endMonth, jint endDay, jint endDayOfWeek, jint endTime) { return base_::new_object(rawOffset, ID_, startMonth, startDay, startDayOfWeek, startTime, endMonth, endDay, endDayOfWeek, endTime); }
inline ref<SimpleTimeZone> SimpleTimeZone::new_object(jint rawOffset, ref<java::lang::String> ID_, jint startMonth, jint startDay, jint startDayOfWeek, jint startTime, jint endMonth, jint endDay, jint endDayOfWeek, jint endTime, jint dstSavings) { return base_::new_object(rawOffset, ID_, startMonth, startDay, startDayOfWeek, startTime, endMonth, endDay, endDayOfWeek, endTime, dstSavings); }
inline ref<SimpleTimeZone> SimpleTimeZone::new_object(jint rawOffset, ref<java::lang::String> ID_, jint startMonth, jint startDay, jint startDayOfWeek, jint startTime, jint startTimeMode, jint endMonth, jint endDay, jint endDayOfWeek, jint endTime, jint endTimeMode, jint dstSavings) { return base_::new_object(rawOffset, ID_, startMonth, startDay, startDayOfWeek, startTime, startTimeMode, endMonth, endDay, endDayOfWeek, endTime, endTimeMode, dstSavings); }
inline void SimpleTimeZone::setStartYear(jint year) { return call_method<SCAPIX_META_STRING("setStartYear"), void>(year); }
inline void SimpleTimeZone::setStartRule(jint startMonth, jint startDay, jint startDayOfWeek, jint startTime) { return call_method<SCAPIX_META_STRING("setStartRule"), void>(startMonth, startDay, startDayOfWeek, startTime); }
inline void SimpleTimeZone::setStartRule(jint startMonth, jint startDay, jint startTime) { return call_method<SCAPIX_META_STRING("setStartRule"), void>(startMonth, startDay, startTime); }
inline void SimpleTimeZone::setStartRule(jint startMonth, jint startDay, jint startDayOfWeek, jint startTime, jboolean after) { return call_method<SCAPIX_META_STRING("setStartRule"), void>(startMonth, startDay, startDayOfWeek, startTime, after); }
inline void SimpleTimeZone::setEndRule(jint endMonth, jint endDay, jint endDayOfWeek, jint endTime) { return call_method<SCAPIX_META_STRING("setEndRule"), void>(endMonth, endDay, endDayOfWeek, endTime); }
inline void SimpleTimeZone::setEndRule(jint endMonth, jint endDay, jint endTime) { return call_method<SCAPIX_META_STRING("setEndRule"), void>(endMonth, endDay, endTime); }
inline void SimpleTimeZone::setEndRule(jint endMonth, jint endDay, jint endDayOfWeek, jint endTime, jboolean after) { return call_method<SCAPIX_META_STRING("setEndRule"), void>(endMonth, endDay, endDayOfWeek, endTime, after); }
inline jint SimpleTimeZone::getOffset(jlong date) { return call_method<SCAPIX_META_STRING("getOffset"), jint>(date); }
inline jint SimpleTimeZone::getOffset(jint era, jint year, jint month, jint day, jint dayOfWeek, jint millis) { return call_method<SCAPIX_META_STRING("getOffset"), jint>(era, year, month, day, dayOfWeek, millis); }
inline jint SimpleTimeZone::getRawOffset() { return call_method<SCAPIX_META_STRING("getRawOffset"), jint>(); }
inline void SimpleTimeZone::setRawOffset(jint offsetMillis) { return call_method<SCAPIX_META_STRING("setRawOffset"), void>(offsetMillis); }
inline void SimpleTimeZone::setDSTSavings(jint millisSavedDuringDST) { return call_method<SCAPIX_META_STRING("setDSTSavings"), void>(millisSavedDuringDST); }
inline jint SimpleTimeZone::getDSTSavings() { return call_method<SCAPIX_META_STRING("getDSTSavings"), jint>(); }
inline jboolean SimpleTimeZone::useDaylightTime() { return call_method<SCAPIX_META_STRING("useDaylightTime"), jboolean>(); }
inline jboolean SimpleTimeZone::observesDaylightTime() { return call_method<SCAPIX_META_STRING("observesDaylightTime"), jboolean>(); }
inline jboolean SimpleTimeZone::inDaylightTime(ref<java::util::Date> date) { return call_method<SCAPIX_META_STRING("inDaylightTime"), jboolean>(date); }
inline ref<java::lang::Object> SimpleTimeZone::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline jint SimpleTimeZone::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean SimpleTimeZone::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jboolean SimpleTimeZone::hasSameRules(ref<java::util::TimeZone> other) { return call_method<SCAPIX_META_STRING("hasSameRules"), jboolean>(other); }
inline ref<java::lang::String> SimpleTimeZone::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_SIMPLETIMEZONE_H
