// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Iterable.h>

#ifndef SCAPIX_JAVA_UTIL_SERVICELOADER_H
#define SCAPIX_JAVA_UTIL_SERVICELOADER_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class ClassLoader; }
namespace java::lang { class String; }
namespace java::util { class Iterator; }

namespace java::util {

class ServiceLoader : public object_base<SCAPIX_META_STRING("java/util/ServiceLoader"),
	java::lang::Object,
	java::lang::Iterable>
{
public:

	void reload();
	ref<java::util::Iterator> iterator();
	static ref<java::util::ServiceLoader> load(ref<java::lang::Class> service, ref<java::lang::ClassLoader> loader);
	static ref<java::util::ServiceLoader> load(ref<java::lang::Class> service);
	static ref<java::util::ServiceLoader> loadInstalled(ref<java::lang::Class> service);
	ref<java::lang::String> toString();

protected:

	ServiceLoader(handle_type h) : base_(h) {}

};

} // namespace java::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>

namespace scapix::java_api {
namespace java::util {

inline void ServiceLoader::reload() { return call_method<SCAPIX_META_STRING("reload"), void>(); }
inline ref<java::util::Iterator> ServiceLoader::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::Iterator>>(); }
inline ref<java::util::ServiceLoader> ServiceLoader::load(ref<java::lang::Class> service, ref<java::lang::ClassLoader> loader) { return call_static_method<SCAPIX_META_STRING("load"), ref<java::util::ServiceLoader>>(service, loader); }
inline ref<java::util::ServiceLoader> ServiceLoader::load(ref<java::lang::Class> service) { return call_static_method<SCAPIX_META_STRING("load"), ref<java::util::ServiceLoader>>(service); }
inline ref<java::util::ServiceLoader> ServiceLoader::loadInstalled(ref<java::lang::Class> service) { return call_static_method<SCAPIX_META_STRING("loadInstalled"), ref<java::util::ServiceLoader>>(service); }
inline ref<java::lang::String> ServiceLoader::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::util
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_SERVICELOADER_H
