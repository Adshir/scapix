// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/regex/MatchResult.h>

#ifndef SCAPIX_JAVA_UTIL_REGEX_MATCHER_H
#define SCAPIX_JAVA_UTIL_REGEX_MATCHER_H

namespace scapix::java_api {

namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::lang { class StringBuffer; }
namespace java::util::regex { class Pattern; }

namespace java::util::regex {

class Matcher : public object_base<SCAPIX_META_STRING("java/util/regex/Matcher"),
	java::lang::Object,
	java::util::regex::MatchResult>
{
public:

	ref<java::util::regex::Pattern> pattern();
	ref<java::util::regex::MatchResult> toMatchResult();
	ref<java::util::regex::Matcher> usePattern(ref<java::util::regex::Pattern> newPattern);
	jint end();
	jint end(jint group);
	jint end(ref<java::lang::String> name);
	ref<java::lang::String> group();
	ref<java::lang::String> group(jint group);
	ref<java::lang::String> group(ref<java::lang::String> name);
	jint groupCount();
	jboolean matches();
	jboolean find();
	jboolean find(jint start);
	jboolean lookingAt();
	static ref<java::lang::String> quoteReplacement(ref<java::lang::String> s);
	ref<java::util::regex::Matcher> appendReplacement(ref<java::lang::StringBuffer> sb, ref<java::lang::String> replacement);
	ref<java::lang::StringBuffer> appendTail(ref<java::lang::StringBuffer> sb);
	ref<java::lang::String> replaceAll(ref<java::lang::String> replacement);
	ref<java::lang::String> replaceFirst(ref<java::lang::String> replacement);
	ref<java::util::regex::Matcher> region(jint start, jint end);
	jint regionStart();
	jint regionEnd();
	jboolean hasTransparentBounds();
	ref<java::util::regex::Matcher> useTransparentBounds(jboolean value);
	jboolean hasAnchoringBounds();
	ref<java::util::regex::Matcher> useAnchoringBounds(jboolean value);
	ref<java::lang::String> toString();
	jboolean hitEnd();
	jboolean requireEnd();
	ref<java::util::regex::Matcher> reset();
	ref<java::util::regex::Matcher> reset(ref<java::lang::CharSequence> input);
	jint start();
	jint start(jint group);
	jint start(ref<java::lang::String> name);

protected:

	Matcher(handle_type h) : base_(h) {}

};

} // namespace java::util::regex
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/util/regex/Pattern.h>

namespace scapix::java_api {
namespace java::util::regex {

inline ref<java::util::regex::Pattern> Matcher::pattern() { return call_method<SCAPIX_META_STRING("pattern"), ref<java::util::regex::Pattern>>(); }
inline ref<java::util::regex::MatchResult> Matcher::toMatchResult() { return call_method<SCAPIX_META_STRING("toMatchResult"), ref<java::util::regex::MatchResult>>(); }
inline ref<java::util::regex::Matcher> Matcher::usePattern(ref<java::util::regex::Pattern> newPattern) { return call_method<SCAPIX_META_STRING("usePattern"), ref<java::util::regex::Matcher>>(newPattern); }
inline jint Matcher::end() { return call_method<SCAPIX_META_STRING("end"), jint>(); }
inline jint Matcher::end(jint group) { return call_method<SCAPIX_META_STRING("end"), jint>(group); }
inline jint Matcher::end(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("end"), jint>(name); }
inline ref<java::lang::String> Matcher::group() { return call_method<SCAPIX_META_STRING("group"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Matcher::group(jint group) { return call_method<SCAPIX_META_STRING("group"), ref<java::lang::String>>(group); }
inline ref<java::lang::String> Matcher::group(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("group"), ref<java::lang::String>>(name); }
inline jint Matcher::groupCount() { return call_method<SCAPIX_META_STRING("groupCount"), jint>(); }
inline jboolean Matcher::matches() { return call_method<SCAPIX_META_STRING("matches"), jboolean>(); }
inline jboolean Matcher::find() { return call_method<SCAPIX_META_STRING("find"), jboolean>(); }
inline jboolean Matcher::find(jint start) { return call_method<SCAPIX_META_STRING("find"), jboolean>(start); }
inline jboolean Matcher::lookingAt() { return call_method<SCAPIX_META_STRING("lookingAt"), jboolean>(); }
inline ref<java::lang::String> Matcher::quoteReplacement(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("quoteReplacement"), ref<java::lang::String>>(s); }
inline ref<java::util::regex::Matcher> Matcher::appendReplacement(ref<java::lang::StringBuffer> sb, ref<java::lang::String> replacement) { return call_method<SCAPIX_META_STRING("appendReplacement"), ref<java::util::regex::Matcher>>(sb, replacement); }
inline ref<java::lang::StringBuffer> Matcher::appendTail(ref<java::lang::StringBuffer> sb) { return call_method<SCAPIX_META_STRING("appendTail"), ref<java::lang::StringBuffer>>(sb); }
inline ref<java::lang::String> Matcher::replaceAll(ref<java::lang::String> replacement) { return call_method<SCAPIX_META_STRING("replaceAll"), ref<java::lang::String>>(replacement); }
inline ref<java::lang::String> Matcher::replaceFirst(ref<java::lang::String> replacement) { return call_method<SCAPIX_META_STRING("replaceFirst"), ref<java::lang::String>>(replacement); }
inline ref<java::util::regex::Matcher> Matcher::region(jint start, jint end) { return call_method<SCAPIX_META_STRING("region"), ref<java::util::regex::Matcher>>(start, end); }
inline jint Matcher::regionStart() { return call_method<SCAPIX_META_STRING("regionStart"), jint>(); }
inline jint Matcher::regionEnd() { return call_method<SCAPIX_META_STRING("regionEnd"), jint>(); }
inline jboolean Matcher::hasTransparentBounds() { return call_method<SCAPIX_META_STRING("hasTransparentBounds"), jboolean>(); }
inline ref<java::util::regex::Matcher> Matcher::useTransparentBounds(jboolean value) { return call_method<SCAPIX_META_STRING("useTransparentBounds"), ref<java::util::regex::Matcher>>(value); }
inline jboolean Matcher::hasAnchoringBounds() { return call_method<SCAPIX_META_STRING("hasAnchoringBounds"), jboolean>(); }
inline ref<java::util::regex::Matcher> Matcher::useAnchoringBounds(jboolean value) { return call_method<SCAPIX_META_STRING("useAnchoringBounds"), ref<java::util::regex::Matcher>>(value); }
inline ref<java::lang::String> Matcher::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean Matcher::hitEnd() { return call_method<SCAPIX_META_STRING("hitEnd"), jboolean>(); }
inline jboolean Matcher::requireEnd() { return call_method<SCAPIX_META_STRING("requireEnd"), jboolean>(); }
inline ref<java::util::regex::Matcher> Matcher::reset() { return call_method<SCAPIX_META_STRING("reset"), ref<java::util::regex::Matcher>>(); }
inline ref<java::util::regex::Matcher> Matcher::reset(ref<java::lang::CharSequence> input) { return call_method<SCAPIX_META_STRING("reset"), ref<java::util::regex::Matcher>>(input); }
inline jint Matcher::start() { return call_method<SCAPIX_META_STRING("start"), jint>(); }
inline jint Matcher::start(jint group) { return call_method<SCAPIX_META_STRING("start"), jint>(group); }
inline jint Matcher::start(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("start"), jint>(name); }

} // namespace java::util::regex
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_UTIL_REGEX_MATCHER_H
