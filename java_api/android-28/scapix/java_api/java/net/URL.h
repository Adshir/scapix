// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_NET_URL_H
#define SCAPIX_JAVA_NET_URL_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::lang { class Class; }
namespace java::lang { class String; }
namespace java::net { class Proxy; }
namespace java::net { class URI; }
namespace java::net { class URLConnection; }
namespace java::net { class URLStreamHandler; }
namespace java::net { class URLStreamHandlerFactory; }

namespace java::net {

class URL : public object_base<SCAPIX_META_STRING("java/net/URL"),
	java::lang::Object,
	java::io::Serializable>
{
public:

	static ref<URL> new_object(ref<java::lang::String> protocol, ref<java::lang::String> host, jint port, ref<java::lang::String> file);
	static ref<URL> new_object(ref<java::lang::String> protocol, ref<java::lang::String> host, ref<java::lang::String> file);
	static ref<URL> new_object(ref<java::lang::String> protocol, ref<java::lang::String> host, jint port, ref<java::lang::String> file, ref<java::net::URLStreamHandler> handler);
	static ref<URL> new_object(ref<java::lang::String> spec);
	static ref<URL> new_object(ref<java::net::URL> context, ref<java::lang::String> spec);
	static ref<URL> new_object(ref<java::net::URL> context, ref<java::lang::String> spec, ref<java::net::URLStreamHandler> handler);
	ref<java::lang::String> getQuery();
	ref<java::lang::String> getPath();
	ref<java::lang::String> getUserInfo();
	ref<java::lang::String> getAuthority();
	jint getPort();
	jint getDefaultPort();
	ref<java::lang::String> getProtocol();
	ref<java::lang::String> getHost();
	ref<java::lang::String> getFile();
	ref<java::lang::String> getRef();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	jboolean sameFile(ref<java::net::URL> other);
	ref<java::lang::String> toString();
	ref<java::lang::String> toExternalForm();
	ref<java::net::URI> toURI();
	ref<java::net::URLConnection> openConnection();
	ref<java::net::URLConnection> openConnection(ref<java::net::Proxy> proxy);
	ref<java::io::InputStream> openStream();
	ref<java::lang::Object> getContent();
	ref<java::lang::Object> getContent(ref<link::java::array<java::lang::Class>> classes);
	static void setURLStreamHandlerFactory(ref<java::net::URLStreamHandlerFactory> fac);

protected:

	URL(handle_type h) : base_(h) {}

};

} // namespace java::net
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/Proxy.h>
#include <scapix/java_api/java/net/URI.h>
#include <scapix/java_api/java/net/URLConnection.h>
#include <scapix/java_api/java/net/URLStreamHandler.h>
#include <scapix/java_api/java/net/URLStreamHandlerFactory.h>

namespace scapix::java_api {
namespace java::net {

inline ref<URL> URL::new_object(ref<java::lang::String> protocol, ref<java::lang::String> host, jint port, ref<java::lang::String> file) { return base_::new_object(protocol, host, port, file); }
inline ref<URL> URL::new_object(ref<java::lang::String> protocol, ref<java::lang::String> host, ref<java::lang::String> file) { return base_::new_object(protocol, host, file); }
inline ref<URL> URL::new_object(ref<java::lang::String> protocol, ref<java::lang::String> host, jint port, ref<java::lang::String> file, ref<java::net::URLStreamHandler> handler) { return base_::new_object(protocol, host, port, file, handler); }
inline ref<URL> URL::new_object(ref<java::lang::String> spec) { return base_::new_object(spec); }
inline ref<URL> URL::new_object(ref<java::net::URL> context, ref<java::lang::String> spec) { return base_::new_object(context, spec); }
inline ref<URL> URL::new_object(ref<java::net::URL> context, ref<java::lang::String> spec, ref<java::net::URLStreamHandler> handler) { return base_::new_object(context, spec, handler); }
inline ref<java::lang::String> URL::getQuery() { return call_method<SCAPIX_META_STRING("getQuery"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URL::getPath() { return call_method<SCAPIX_META_STRING("getPath"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URL::getUserInfo() { return call_method<SCAPIX_META_STRING("getUserInfo"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URL::getAuthority() { return call_method<SCAPIX_META_STRING("getAuthority"), ref<java::lang::String>>(); }
inline jint URL::getPort() { return call_method<SCAPIX_META_STRING("getPort"), jint>(); }
inline jint URL::getDefaultPort() { return call_method<SCAPIX_META_STRING("getDefaultPort"), jint>(); }
inline ref<java::lang::String> URL::getProtocol() { return call_method<SCAPIX_META_STRING("getProtocol"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URL::getHost() { return call_method<SCAPIX_META_STRING("getHost"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URL::getFile() { return call_method<SCAPIX_META_STRING("getFile"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URL::getRef() { return call_method<SCAPIX_META_STRING("getRef"), ref<java::lang::String>>(); }
inline jboolean URL::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint URL::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean URL::sameFile(ref<java::net::URL> other) { return call_method<SCAPIX_META_STRING("sameFile"), jboolean>(other); }
inline ref<java::lang::String> URL::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> URL::toExternalForm() { return call_method<SCAPIX_META_STRING("toExternalForm"), ref<java::lang::String>>(); }
inline ref<java::net::URI> URL::toURI() { return call_method<SCAPIX_META_STRING("toURI"), ref<java::net::URI>>(); }
inline ref<java::net::URLConnection> URL::openConnection() { return call_method<SCAPIX_META_STRING("openConnection"), ref<java::net::URLConnection>>(); }
inline ref<java::net::URLConnection> URL::openConnection(ref<java::net::Proxy> proxy) { return call_method<SCAPIX_META_STRING("openConnection"), ref<java::net::URLConnection>>(proxy); }
inline ref<java::io::InputStream> URL::openStream() { return call_method<SCAPIX_META_STRING("openStream"), ref<java::io::InputStream>>(); }
inline ref<java::lang::Object> URL::getContent() { return call_method<SCAPIX_META_STRING("getContent"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> URL::getContent(ref<link::java::array<java::lang::Class>> classes) { return call_method<SCAPIX_META_STRING("getContent"), ref<java::lang::Object>>(classes); }
inline void URL::setURLStreamHandlerFactory(ref<java::net::URLStreamHandlerFactory> fac) { return call_static_method<SCAPIX_META_STRING("setURLStreamHandlerFactory"), void>(fac); }

} // namespace java::net
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NET_URL_H
