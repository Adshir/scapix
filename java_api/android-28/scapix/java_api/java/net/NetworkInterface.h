// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_NET_NETWORKINTERFACE_H
#define SCAPIX_JAVA_NET_NETWORKINTERFACE_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::net { class InetAddress; }
namespace java::util { class Enumeration; }
namespace java::util { class List; }

namespace java::net {

class NetworkInterface : public object_base<SCAPIX_META_STRING("java/net/NetworkInterface"),
	java::lang::Object>
{
public:

	ref<java::lang::String> getName();
	ref<java::util::Enumeration> getInetAddresses();
	ref<java::util::List> getInterfaceAddresses();
	ref<java::util::Enumeration> getSubInterfaces();
	ref<java::net::NetworkInterface> getParent();
	jint getIndex();
	ref<java::lang::String> getDisplayName();
	static ref<java::net::NetworkInterface> getByName(ref<java::lang::String> name);
	static ref<java::net::NetworkInterface> getByIndex(jint index);
	static ref<java::net::NetworkInterface> getByInetAddress(ref<java::net::InetAddress> addr);
	static ref<java::util::Enumeration> getNetworkInterfaces();
	jboolean isUp();
	jboolean isLoopback();
	jboolean isPointToPoint();
	jboolean supportsMulticast();
	ref<link::java::array<jbyte>> getHardwareAddress();
	jint getMTU();
	jboolean isVirtual();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	NetworkInterface(handle_type h) : base_(h) {}

};

} // namespace java::net
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace java::net {

inline ref<java::lang::String> NetworkInterface::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<java::util::Enumeration> NetworkInterface::getInetAddresses() { return call_method<SCAPIX_META_STRING("getInetAddresses"), ref<java::util::Enumeration>>(); }
inline ref<java::util::List> NetworkInterface::getInterfaceAddresses() { return call_method<SCAPIX_META_STRING("getInterfaceAddresses"), ref<java::util::List>>(); }
inline ref<java::util::Enumeration> NetworkInterface::getSubInterfaces() { return call_method<SCAPIX_META_STRING("getSubInterfaces"), ref<java::util::Enumeration>>(); }
inline ref<java::net::NetworkInterface> NetworkInterface::getParent() { return call_method<SCAPIX_META_STRING("getParent"), ref<java::net::NetworkInterface>>(); }
inline jint NetworkInterface::getIndex() { return call_method<SCAPIX_META_STRING("getIndex"), jint>(); }
inline ref<java::lang::String> NetworkInterface::getDisplayName() { return call_method<SCAPIX_META_STRING("getDisplayName"), ref<java::lang::String>>(); }
inline ref<java::net::NetworkInterface> NetworkInterface::getByName(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("getByName"), ref<java::net::NetworkInterface>>(name); }
inline ref<java::net::NetworkInterface> NetworkInterface::getByIndex(jint index) { return call_static_method<SCAPIX_META_STRING("getByIndex"), ref<java::net::NetworkInterface>>(index); }
inline ref<java::net::NetworkInterface> NetworkInterface::getByInetAddress(ref<java::net::InetAddress> addr) { return call_static_method<SCAPIX_META_STRING("getByInetAddress"), ref<java::net::NetworkInterface>>(addr); }
inline ref<java::util::Enumeration> NetworkInterface::getNetworkInterfaces() { return call_static_method<SCAPIX_META_STRING("getNetworkInterfaces"), ref<java::util::Enumeration>>(); }
inline jboolean NetworkInterface::isUp() { return call_method<SCAPIX_META_STRING("isUp"), jboolean>(); }
inline jboolean NetworkInterface::isLoopback() { return call_method<SCAPIX_META_STRING("isLoopback"), jboolean>(); }
inline jboolean NetworkInterface::isPointToPoint() { return call_method<SCAPIX_META_STRING("isPointToPoint"), jboolean>(); }
inline jboolean NetworkInterface::supportsMulticast() { return call_method<SCAPIX_META_STRING("supportsMulticast"), jboolean>(); }
inline ref<link::java::array<jbyte>> NetworkInterface::getHardwareAddress() { return call_method<SCAPIX_META_STRING("getHardwareAddress"), ref<link::java::array<jbyte>>>(); }
inline jint NetworkInterface::getMTU() { return call_method<SCAPIX_META_STRING("getMTU"), jint>(); }
inline jboolean NetworkInterface::isVirtual() { return call_method<SCAPIX_META_STRING("isVirtual"), jboolean>(); }
inline jboolean NetworkInterface::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint NetworkInterface::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> NetworkInterface::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::net
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NET_NETWORKINTERFACE_H
