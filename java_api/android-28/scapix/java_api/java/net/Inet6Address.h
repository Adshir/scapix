// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/net/InetAddress.h>

#ifndef SCAPIX_JAVA_NET_INET6ADDRESS_H
#define SCAPIX_JAVA_NET_INET6ADDRESS_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::net { class NetworkInterface; }

namespace java::net {

class Inet6Address : public object_base<SCAPIX_META_STRING("java/net/Inet6Address"),
	java::net::InetAddress>
{
public:

	static ref<java::net::Inet6Address> getByAddress(ref<java::lang::String> host, ref<link::java::array<jbyte>> addr, ref<java::net::NetworkInterface> nif);
	static ref<java::net::Inet6Address> getByAddress(ref<java::lang::String> host, ref<link::java::array<jbyte>> addr, jint scope_id);
	jboolean isMulticastAddress();
	jboolean isAnyLocalAddress();
	jboolean isLoopbackAddress();
	jboolean isLinkLocalAddress();
	jboolean isSiteLocalAddress();
	jboolean isMCGlobal();
	jboolean isMCNodeLocal();
	jboolean isMCLinkLocal();
	jboolean isMCSiteLocal();
	jboolean isMCOrgLocal();
	ref<link::java::array<jbyte>> getAddress();
	jint getScopeId();
	ref<java::net::NetworkInterface> getScopedInterface();
	ref<java::lang::String> getHostAddress();
	jint hashCode();
	jboolean equals(ref<java::lang::Object> obj);
	jboolean isIPv4CompatibleAddress();

protected:

	Inet6Address(handle_type h) : base_(h) {}

};

} // namespace java::net
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/NetworkInterface.h>

namespace scapix::java_api {
namespace java::net {

inline ref<java::net::Inet6Address> Inet6Address::getByAddress(ref<java::lang::String> host, ref<link::java::array<jbyte>> addr, ref<java::net::NetworkInterface> nif) { return call_static_method<SCAPIX_META_STRING("getByAddress"), ref<java::net::Inet6Address>>(host, addr, nif); }
inline ref<java::net::Inet6Address> Inet6Address::getByAddress(ref<java::lang::String> host, ref<link::java::array<jbyte>> addr, jint scope_id) { return call_static_method<SCAPIX_META_STRING("getByAddress"), ref<java::net::Inet6Address>>(host, addr, scope_id); }
inline jboolean Inet6Address::isMulticastAddress() { return call_method<SCAPIX_META_STRING("isMulticastAddress"), jboolean>(); }
inline jboolean Inet6Address::isAnyLocalAddress() { return call_method<SCAPIX_META_STRING("isAnyLocalAddress"), jboolean>(); }
inline jboolean Inet6Address::isLoopbackAddress() { return call_method<SCAPIX_META_STRING("isLoopbackAddress"), jboolean>(); }
inline jboolean Inet6Address::isLinkLocalAddress() { return call_method<SCAPIX_META_STRING("isLinkLocalAddress"), jboolean>(); }
inline jboolean Inet6Address::isSiteLocalAddress() { return call_method<SCAPIX_META_STRING("isSiteLocalAddress"), jboolean>(); }
inline jboolean Inet6Address::isMCGlobal() { return call_method<SCAPIX_META_STRING("isMCGlobal"), jboolean>(); }
inline jboolean Inet6Address::isMCNodeLocal() { return call_method<SCAPIX_META_STRING("isMCNodeLocal"), jboolean>(); }
inline jboolean Inet6Address::isMCLinkLocal() { return call_method<SCAPIX_META_STRING("isMCLinkLocal"), jboolean>(); }
inline jboolean Inet6Address::isMCSiteLocal() { return call_method<SCAPIX_META_STRING("isMCSiteLocal"), jboolean>(); }
inline jboolean Inet6Address::isMCOrgLocal() { return call_method<SCAPIX_META_STRING("isMCOrgLocal"), jboolean>(); }
inline ref<link::java::array<jbyte>> Inet6Address::getAddress() { return call_method<SCAPIX_META_STRING("getAddress"), ref<link::java::array<jbyte>>>(); }
inline jint Inet6Address::getScopeId() { return call_method<SCAPIX_META_STRING("getScopeId"), jint>(); }
inline ref<java::net::NetworkInterface> Inet6Address::getScopedInterface() { return call_method<SCAPIX_META_STRING("getScopedInterface"), ref<java::net::NetworkInterface>>(); }
inline ref<java::lang::String> Inet6Address::getHostAddress() { return call_method<SCAPIX_META_STRING("getHostAddress"), ref<java::lang::String>>(); }
inline jint Inet6Address::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean Inet6Address::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jboolean Inet6Address::isIPv4CompatibleAddress() { return call_method<SCAPIX_META_STRING("isIPv4CompatibleAddress"), jboolean>(); }

} // namespace java::net
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NET_INET6ADDRESS_H
