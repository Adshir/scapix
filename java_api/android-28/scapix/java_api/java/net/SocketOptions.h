// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_NET_SOCKETOPTIONS_H
#define SCAPIX_JAVA_NET_SOCKETOPTIONS_H

namespace scapix::java_api {
namespace java::net {

class SocketOptions : public object_base<SCAPIX_META_STRING("java/net/SocketOptions"),
	java::lang::Object>
{
public:

	static jint IP_MULTICAST_IF_();
	static jint IP_MULTICAST_IF2_();
	static jint IP_MULTICAST_LOOP_();
	static jint IP_TOS_();
	static jint SO_BINDADDR_();
	static jint SO_BROADCAST_();
	static jint SO_KEEPALIVE_();
	static jint SO_LINGER_();
	static jint SO_OOBINLINE_();
	static jint SO_RCVBUF_();
	static jint SO_REUSEADDR_();
	static jint SO_SNDBUF_();
	static jint SO_TIMEOUT_();
	static jint TCP_NODELAY_();

	void setOption(jint p1, ref<java::lang::Object> p2);
	ref<java::lang::Object> getOption(jint p1);

protected:

	SocketOptions(handle_type h) : base_(h) {}

};

} // namespace java::net
} // namespace scapix::java_api


namespace scapix::java_api {
namespace java::net {

inline jint SocketOptions::IP_MULTICAST_IF_() { return get_static_field<SCAPIX_META_STRING("IP_MULTICAST_IF"), jint>(); }
inline jint SocketOptions::IP_MULTICAST_IF2_() { return get_static_field<SCAPIX_META_STRING("IP_MULTICAST_IF2"), jint>(); }
inline jint SocketOptions::IP_MULTICAST_LOOP_() { return get_static_field<SCAPIX_META_STRING("IP_MULTICAST_LOOP"), jint>(); }
inline jint SocketOptions::IP_TOS_() { return get_static_field<SCAPIX_META_STRING("IP_TOS"), jint>(); }
inline jint SocketOptions::SO_BINDADDR_() { return get_static_field<SCAPIX_META_STRING("SO_BINDADDR"), jint>(); }
inline jint SocketOptions::SO_BROADCAST_() { return get_static_field<SCAPIX_META_STRING("SO_BROADCAST"), jint>(); }
inline jint SocketOptions::SO_KEEPALIVE_() { return get_static_field<SCAPIX_META_STRING("SO_KEEPALIVE"), jint>(); }
inline jint SocketOptions::SO_LINGER_() { return get_static_field<SCAPIX_META_STRING("SO_LINGER"), jint>(); }
inline jint SocketOptions::SO_OOBINLINE_() { return get_static_field<SCAPIX_META_STRING("SO_OOBINLINE"), jint>(); }
inline jint SocketOptions::SO_RCVBUF_() { return get_static_field<SCAPIX_META_STRING("SO_RCVBUF"), jint>(); }
inline jint SocketOptions::SO_REUSEADDR_() { return get_static_field<SCAPIX_META_STRING("SO_REUSEADDR"), jint>(); }
inline jint SocketOptions::SO_SNDBUF_() { return get_static_field<SCAPIX_META_STRING("SO_SNDBUF"), jint>(); }
inline jint SocketOptions::SO_TIMEOUT_() { return get_static_field<SCAPIX_META_STRING("SO_TIMEOUT"), jint>(); }
inline jint SocketOptions::TCP_NODELAY_() { return get_static_field<SCAPIX_META_STRING("TCP_NODELAY"), jint>(); }
inline void SocketOptions::setOption(jint p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("setOption"), void>(p1, p2); }
inline ref<java::lang::Object> SocketOptions::getOption(jint p1) { return call_method<SCAPIX_META_STRING("getOption"), ref<java::lang::Object>>(p1); }

} // namespace java::net
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NET_SOCKETOPTIONS_H
