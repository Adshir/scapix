// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/security/SignatureSpi.h>

#ifndef SCAPIX_JAVA_SECURITY_SIGNATURE_H
#define SCAPIX_JAVA_SECURITY_SIGNATURE_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::nio { class ByteBuffer; }
namespace java::security { class AlgorithmParameters; }
namespace java::security { class PrivateKey; }
namespace java::security { class Provider; }
namespace java::security { class PublicKey; }
namespace java::security { class SecureRandom; }
namespace java::security::cert { class Certificate; }
namespace java::security::spec { class AlgorithmParameterSpec; }

namespace java::security {

class Signature : public object_base<SCAPIX_META_STRING("java/security/Signature"),
	java::security::SignatureSpi>
{
public:

	static ref<java::security::Signature> getInstance(ref<java::lang::String> algorithm);
	static ref<java::security::Signature> getInstance(ref<java::lang::String> algorithm, ref<java::lang::String> provider);
	static ref<java::security::Signature> getInstance(ref<java::lang::String> algorithm, ref<java::security::Provider> provider);
	ref<java::security::Provider> getProvider();
	void initVerify(ref<java::security::PublicKey> publicKey);
	void initVerify(ref<java::security::cert::Certificate> certificate);
	void initSign(ref<java::security::PrivateKey> privateKey);
	void initSign(ref<java::security::PrivateKey> privateKey, ref<java::security::SecureRandom> random);
	ref<link::java::array<jbyte>> sign();
	jint sign(ref<link::java::array<jbyte>> outbuf, jint offset, jint len);
	jboolean verify(ref<link::java::array<jbyte>> signature);
	jboolean verify(ref<link::java::array<jbyte>> signature, jint offset, jint length);
	void update(jbyte b);
	void update(ref<link::java::array<jbyte>> data);
	void update(ref<link::java::array<jbyte>> data, jint off, jint len);
	void update(ref<java::nio::ByteBuffer> data);
	ref<java::lang::String> getAlgorithm();
	ref<java::lang::String> toString();
	void setParameter(ref<java::lang::String> param, ref<java::lang::Object> value);
	void setParameter(ref<java::security::spec::AlgorithmParameterSpec> params);
	ref<java::security::AlgorithmParameters> getParameters();
	ref<java::lang::Object> getParameter(ref<java::lang::String> param);
	ref<java::lang::Object> clone();

protected:

	Signature(handle_type h) : base_(h) {}

};

} // namespace java::security
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/security/AlgorithmParameters.h>
#include <scapix/java_api/java/security/PrivateKey.h>
#include <scapix/java_api/java/security/Provider.h>
#include <scapix/java_api/java/security/PublicKey.h>
#include <scapix/java_api/java/security/SecureRandom.h>
#include <scapix/java_api/java/security/cert/Certificate.h>
#include <scapix/java_api/java/security/spec/AlgorithmParameterSpec.h>

namespace scapix::java_api {
namespace java::security {

inline ref<java::security::Signature> Signature::getInstance(ref<java::lang::String> algorithm) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<java::security::Signature>>(algorithm); }
inline ref<java::security::Signature> Signature::getInstance(ref<java::lang::String> algorithm, ref<java::lang::String> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<java::security::Signature>>(algorithm, provider); }
inline ref<java::security::Signature> Signature::getInstance(ref<java::lang::String> algorithm, ref<java::security::Provider> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<java::security::Signature>>(algorithm, provider); }
inline ref<java::security::Provider> Signature::getProvider() { return call_method<SCAPIX_META_STRING("getProvider"), ref<java::security::Provider>>(); }
inline void Signature::initVerify(ref<java::security::PublicKey> publicKey) { return call_method<SCAPIX_META_STRING("initVerify"), void>(publicKey); }
inline void Signature::initVerify(ref<java::security::cert::Certificate> certificate) { return call_method<SCAPIX_META_STRING("initVerify"), void>(certificate); }
inline void Signature::initSign(ref<java::security::PrivateKey> privateKey) { return call_method<SCAPIX_META_STRING("initSign"), void>(privateKey); }
inline void Signature::initSign(ref<java::security::PrivateKey> privateKey, ref<java::security::SecureRandom> random) { return call_method<SCAPIX_META_STRING("initSign"), void>(privateKey, random); }
inline ref<link::java::array<jbyte>> Signature::sign() { return call_method<SCAPIX_META_STRING("sign"), ref<link::java::array<jbyte>>>(); }
inline jint Signature::sign(ref<link::java::array<jbyte>> outbuf, jint offset, jint len) { return call_method<SCAPIX_META_STRING("sign"), jint>(outbuf, offset, len); }
inline jboolean Signature::verify(ref<link::java::array<jbyte>> signature) { return call_method<SCAPIX_META_STRING("verify"), jboolean>(signature); }
inline jboolean Signature::verify(ref<link::java::array<jbyte>> signature, jint offset, jint length) { return call_method<SCAPIX_META_STRING("verify"), jboolean>(signature, offset, length); }
inline void Signature::update(jbyte b) { return call_method<SCAPIX_META_STRING("update"), void>(b); }
inline void Signature::update(ref<link::java::array<jbyte>> data) { return call_method<SCAPIX_META_STRING("update"), void>(data); }
inline void Signature::update(ref<link::java::array<jbyte>> data, jint off, jint len) { return call_method<SCAPIX_META_STRING("update"), void>(data, off, len); }
inline void Signature::update(ref<java::nio::ByteBuffer> data) { return call_method<SCAPIX_META_STRING("update"), void>(data); }
inline ref<java::lang::String> Signature::getAlgorithm() { return call_method<SCAPIX_META_STRING("getAlgorithm"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Signature::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline void Signature::setParameter(ref<java::lang::String> param, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("setParameter"), void>(param, value); }
inline void Signature::setParameter(ref<java::security::spec::AlgorithmParameterSpec> params) { return call_method<SCAPIX_META_STRING("setParameter"), void>(params); }
inline ref<java::security::AlgorithmParameters> Signature::getParameters() { return call_method<SCAPIX_META_STRING("getParameters"), ref<java::security::AlgorithmParameters>>(); }
inline ref<java::lang::Object> Signature::getParameter(ref<java::lang::String> param) { return call_method<SCAPIX_META_STRING("getParameter"), ref<java::lang::Object>>(param); }
inline ref<java::lang::Object> Signature::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }

} // namespace java::security
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_SECURITY_SIGNATURE_H
