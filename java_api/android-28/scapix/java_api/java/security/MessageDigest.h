// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/security/MessageDigestSpi.h>

#ifndef SCAPIX_JAVA_SECURITY_MESSAGEDIGEST_H
#define SCAPIX_JAVA_SECURITY_MESSAGEDIGEST_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::nio { class ByteBuffer; }
namespace java::security { class Provider; }

namespace java::security {

class MessageDigest : public object_base<SCAPIX_META_STRING("java/security/MessageDigest"),
	java::security::MessageDigestSpi>
{
public:

	static ref<java::security::MessageDigest> getInstance(ref<java::lang::String> algorithm);
	static ref<java::security::MessageDigest> getInstance(ref<java::lang::String> algorithm, ref<java::lang::String> provider);
	static ref<java::security::MessageDigest> getInstance(ref<java::lang::String> algorithm, ref<java::security::Provider> provider);
	ref<java::security::Provider> getProvider();
	void update(jbyte input);
	void update(ref<link::java::array<jbyte>> input, jint offset, jint len);
	void update(ref<link::java::array<jbyte>> input);
	void update(ref<java::nio::ByteBuffer> input);
	ref<link::java::array<jbyte>> digest();
	jint digest(ref<link::java::array<jbyte>> buf, jint offset, jint len);
	ref<link::java::array<jbyte>> digest(ref<link::java::array<jbyte>> input);
	ref<java::lang::String> toString();
	static jboolean isEqual(ref<link::java::array<jbyte>> digesta, ref<link::java::array<jbyte>> digestb);
	void reset();
	ref<java::lang::String> getAlgorithm();
	jint getDigestLength();
	ref<java::lang::Object> clone();

protected:

	MessageDigest(handle_type h) : base_(h) {}

};

} // namespace java::security
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/security/Provider.h>

namespace scapix::java_api {
namespace java::security {

inline ref<java::security::MessageDigest> MessageDigest::getInstance(ref<java::lang::String> algorithm) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<java::security::MessageDigest>>(algorithm); }
inline ref<java::security::MessageDigest> MessageDigest::getInstance(ref<java::lang::String> algorithm, ref<java::lang::String> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<java::security::MessageDigest>>(algorithm, provider); }
inline ref<java::security::MessageDigest> MessageDigest::getInstance(ref<java::lang::String> algorithm, ref<java::security::Provider> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<java::security::MessageDigest>>(algorithm, provider); }
inline ref<java::security::Provider> MessageDigest::getProvider() { return call_method<SCAPIX_META_STRING("getProvider"), ref<java::security::Provider>>(); }
inline void MessageDigest::update(jbyte input) { return call_method<SCAPIX_META_STRING("update"), void>(input); }
inline void MessageDigest::update(ref<link::java::array<jbyte>> input, jint offset, jint len) { return call_method<SCAPIX_META_STRING("update"), void>(input, offset, len); }
inline void MessageDigest::update(ref<link::java::array<jbyte>> input) { return call_method<SCAPIX_META_STRING("update"), void>(input); }
inline void MessageDigest::update(ref<java::nio::ByteBuffer> input) { return call_method<SCAPIX_META_STRING("update"), void>(input); }
inline ref<link::java::array<jbyte>> MessageDigest::digest() { return call_method<SCAPIX_META_STRING("digest"), ref<link::java::array<jbyte>>>(); }
inline jint MessageDigest::digest(ref<link::java::array<jbyte>> buf, jint offset, jint len) { return call_method<SCAPIX_META_STRING("digest"), jint>(buf, offset, len); }
inline ref<link::java::array<jbyte>> MessageDigest::digest(ref<link::java::array<jbyte>> input) { return call_method<SCAPIX_META_STRING("digest"), ref<link::java::array<jbyte>>>(input); }
inline ref<java::lang::String> MessageDigest::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean MessageDigest::isEqual(ref<link::java::array<jbyte>> digesta, ref<link::java::array<jbyte>> digestb) { return call_static_method<SCAPIX_META_STRING("isEqual"), jboolean>(digesta, digestb); }
inline void MessageDigest::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline ref<java::lang::String> MessageDigest::getAlgorithm() { return call_method<SCAPIX_META_STRING("getAlgorithm"), ref<java::lang::String>>(); }
inline jint MessageDigest::getDigestLength() { return call_method<SCAPIX_META_STRING("getDigestLength"), jint>(); }
inline ref<java::lang::Object> MessageDigest::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }

} // namespace java::security
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_SECURITY_MESSAGEDIGEST_H
