// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/security/cert/Certificate.h>
#include <scapix/java_api/java/security/cert/X509Extension.h>

#ifndef SCAPIX_JAVA_SECURITY_CERT_X509CERTIFICATE_H
#define SCAPIX_JAVA_SECURITY_CERT_X509CERTIFICATE_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::math { class BigInteger; }
namespace java::security { class Principal; }
namespace java::security { class Provider; }
namespace java::security { class PublicKey; }
namespace java::util { class Collection; }
namespace java::util { class Date; }
namespace java::util { class List; }
namespace javax::security::auth::x500 { class X500Principal; }

namespace java::security::cert {

class X509Certificate : public object_base<SCAPIX_META_STRING("java/security/cert/X509Certificate"),
	java::security::cert::Certificate,
	java::security::cert::X509Extension>
{
public:

	void checkValidity();
	void checkValidity(ref<java::util::Date> p1);
	jint getVersion();
	ref<java::math::BigInteger> getSerialNumber();
	ref<java::security::Principal> getIssuerDN();
	ref<javax::security::auth::x500::X500Principal> getIssuerX500Principal();
	ref<java::security::Principal> getSubjectDN();
	ref<javax::security::auth::x500::X500Principal> getSubjectX500Principal();
	ref<java::util::Date> getNotBefore();
	ref<java::util::Date> getNotAfter();
	ref<link::java::array<jbyte>> getTBSCertificate();
	ref<link::java::array<jbyte>> getSignature();
	ref<java::lang::String> getSigAlgName();
	ref<java::lang::String> getSigAlgOID();
	ref<link::java::array<jbyte>> getSigAlgParams();
	ref<link::java::array<jboolean>> getIssuerUniqueID();
	ref<link::java::array<jboolean>> getSubjectUniqueID();
	ref<link::java::array<jboolean>> getKeyUsage();
	ref<java::util::List> getExtendedKeyUsage();
	jint getBasicConstraints();
	ref<java::util::Collection> getSubjectAlternativeNames();
	ref<java::util::Collection> getIssuerAlternativeNames();
	void verify(ref<java::security::PublicKey> key, ref<java::security::Provider> sigProvider);

protected:

	X509Certificate(handle_type h) : base_(h) {}

};

} // namespace java::security::cert
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigInteger.h>
#include <scapix/java_api/java/security/Principal.h>
#include <scapix/java_api/java/security/Provider.h>
#include <scapix/java_api/java/security/PublicKey.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/javax/security/auth/x500/X500Principal.h>

namespace scapix::java_api {
namespace java::security::cert {

inline void X509Certificate::checkValidity() { return call_method<SCAPIX_META_STRING("checkValidity"), void>(); }
inline void X509Certificate::checkValidity(ref<java::util::Date> p1) { return call_method<SCAPIX_META_STRING("checkValidity"), void>(p1); }
inline jint X509Certificate::getVersion() { return call_method<SCAPIX_META_STRING("getVersion"), jint>(); }
inline ref<java::math::BigInteger> X509Certificate::getSerialNumber() { return call_method<SCAPIX_META_STRING("getSerialNumber"), ref<java::math::BigInteger>>(); }
inline ref<java::security::Principal> X509Certificate::getIssuerDN() { return call_method<SCAPIX_META_STRING("getIssuerDN"), ref<java::security::Principal>>(); }
inline ref<javax::security::auth::x500::X500Principal> X509Certificate::getIssuerX500Principal() { return call_method<SCAPIX_META_STRING("getIssuerX500Principal"), ref<javax::security::auth::x500::X500Principal>>(); }
inline ref<java::security::Principal> X509Certificate::getSubjectDN() { return call_method<SCAPIX_META_STRING("getSubjectDN"), ref<java::security::Principal>>(); }
inline ref<javax::security::auth::x500::X500Principal> X509Certificate::getSubjectX500Principal() { return call_method<SCAPIX_META_STRING("getSubjectX500Principal"), ref<javax::security::auth::x500::X500Principal>>(); }
inline ref<java::util::Date> X509Certificate::getNotBefore() { return call_method<SCAPIX_META_STRING("getNotBefore"), ref<java::util::Date>>(); }
inline ref<java::util::Date> X509Certificate::getNotAfter() { return call_method<SCAPIX_META_STRING("getNotAfter"), ref<java::util::Date>>(); }
inline ref<link::java::array<jbyte>> X509Certificate::getTBSCertificate() { return call_method<SCAPIX_META_STRING("getTBSCertificate"), ref<link::java::array<jbyte>>>(); }
inline ref<link::java::array<jbyte>> X509Certificate::getSignature() { return call_method<SCAPIX_META_STRING("getSignature"), ref<link::java::array<jbyte>>>(); }
inline ref<java::lang::String> X509Certificate::getSigAlgName() { return call_method<SCAPIX_META_STRING("getSigAlgName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> X509Certificate::getSigAlgOID() { return call_method<SCAPIX_META_STRING("getSigAlgOID"), ref<java::lang::String>>(); }
inline ref<link::java::array<jbyte>> X509Certificate::getSigAlgParams() { return call_method<SCAPIX_META_STRING("getSigAlgParams"), ref<link::java::array<jbyte>>>(); }
inline ref<link::java::array<jboolean>> X509Certificate::getIssuerUniqueID() { return call_method<SCAPIX_META_STRING("getIssuerUniqueID"), ref<link::java::array<jboolean>>>(); }
inline ref<link::java::array<jboolean>> X509Certificate::getSubjectUniqueID() { return call_method<SCAPIX_META_STRING("getSubjectUniqueID"), ref<link::java::array<jboolean>>>(); }
inline ref<link::java::array<jboolean>> X509Certificate::getKeyUsage() { return call_method<SCAPIX_META_STRING("getKeyUsage"), ref<link::java::array<jboolean>>>(); }
inline ref<java::util::List> X509Certificate::getExtendedKeyUsage() { return call_method<SCAPIX_META_STRING("getExtendedKeyUsage"), ref<java::util::List>>(); }
inline jint X509Certificate::getBasicConstraints() { return call_method<SCAPIX_META_STRING("getBasicConstraints"), jint>(); }
inline ref<java::util::Collection> X509Certificate::getSubjectAlternativeNames() { return call_method<SCAPIX_META_STRING("getSubjectAlternativeNames"), ref<java::util::Collection>>(); }
inline ref<java::util::Collection> X509Certificate::getIssuerAlternativeNames() { return call_method<SCAPIX_META_STRING("getIssuerAlternativeNames"), ref<java::util::Collection>>(); }
inline void X509Certificate::verify(ref<java::security::PublicKey> key, ref<java::security::Provider> sigProvider) { return call_method<SCAPIX_META_STRING("verify"), void>(key, sigProvider); }

} // namespace java::security::cert
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_SECURITY_CERT_X509CERTIFICATE_H
