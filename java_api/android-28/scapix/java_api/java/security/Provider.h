// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/Properties.h>

#ifndef SCAPIX_JAVA_SECURITY_PROVIDER_H
#define SCAPIX_JAVA_SECURITY_PROVIDER_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::security { class Provider_Service; }
namespace java::util { class Collection; }
namespace java::util { class Enumeration; }
namespace java::util { class Map; }
namespace java::util { class Set; }
namespace java::util::function { class BiConsumer; }
namespace java::util::function { class BiFunction; }
namespace java::util::function { class Function; }

namespace java::security {

class Provider : public object_base<SCAPIX_META_STRING("java/security/Provider"),
	java::util::Properties>
{
public:

	using Service = Provider_Service;

	ref<java::lang::String> getName();
	jdouble getVersion();
	ref<java::lang::String> getInfo();
	ref<java::lang::String> toString();
	void clear();
	void load(ref<java::io::InputStream> inStream);
	void putAll(ref<java::util::Map> t);
	ref<java::util::Set> entrySet();
	ref<java::util::Set> keySet();
	ref<java::util::Collection> values();
	ref<java::lang::Object> put(ref<java::lang::Object> key, ref<java::lang::Object> value);
	ref<java::lang::Object> putIfAbsent(ref<java::lang::Object> key, ref<java::lang::Object> value);
	ref<java::lang::Object> remove(ref<java::lang::Object> key);
	jboolean remove(ref<java::lang::Object> key, ref<java::lang::Object> value);
	jboolean replace(ref<java::lang::Object> key, ref<java::lang::Object> oldValue, ref<java::lang::Object> newValue);
	ref<java::lang::Object> replace(ref<java::lang::Object> key, ref<java::lang::Object> value);
	void replaceAll(ref<java::util::function::BiFunction> function);
	ref<java::lang::Object> compute(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction);
	ref<java::lang::Object> computeIfAbsent(ref<java::lang::Object> key, ref<java::util::function::Function> mappingFunction);
	ref<java::lang::Object> computeIfPresent(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction);
	ref<java::lang::Object> merge(ref<java::lang::Object> key, ref<java::lang::Object> value, ref<java::util::function::BiFunction> remappingFunction);
	ref<java::lang::Object> get(ref<java::lang::Object> key);
	ref<java::lang::Object> getOrDefault(ref<java::lang::Object> key, ref<java::lang::Object> defaultValue);
	void forEach(ref<java::util::function::BiConsumer> action);
	ref<java::util::Enumeration> keys();
	ref<java::util::Enumeration> elements();
	ref<java::lang::String> getProperty(ref<java::lang::String> key);
	ref<java::security::Provider_Service> getService(ref<java::lang::String> type, ref<java::lang::String> algorithm);
	ref<java::util::Set> getServices();

protected:

	Provider(handle_type h) : base_(h) {}

};

} // namespace java::security
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/Provider_Service.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BiFunction.h>
#include <scapix/java_api/java/util/function/Function.h>

namespace scapix::java_api {
namespace java::security {

inline ref<java::lang::String> Provider::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline jdouble Provider::getVersion() { return call_method<SCAPIX_META_STRING("getVersion"), jdouble>(); }
inline ref<java::lang::String> Provider::getInfo() { return call_method<SCAPIX_META_STRING("getInfo"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Provider::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline void Provider::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline void Provider::load(ref<java::io::InputStream> inStream) { return call_method<SCAPIX_META_STRING("load"), void>(inStream); }
inline void Provider::putAll(ref<java::util::Map> t) { return call_method<SCAPIX_META_STRING("putAll"), void>(t); }
inline ref<java::util::Set> Provider::entrySet() { return call_method<SCAPIX_META_STRING("entrySet"), ref<java::util::Set>>(); }
inline ref<java::util::Set> Provider::keySet() { return call_method<SCAPIX_META_STRING("keySet"), ref<java::util::Set>>(); }
inline ref<java::util::Collection> Provider::values() { return call_method<SCAPIX_META_STRING("values"), ref<java::util::Collection>>(); }
inline ref<java::lang::Object> Provider::put(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("put"), ref<java::lang::Object>>(key, value); }
inline ref<java::lang::Object> Provider::putIfAbsent(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("putIfAbsent"), ref<java::lang::Object>>(key, value); }
inline ref<java::lang::Object> Provider::remove(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("remove"), ref<java::lang::Object>>(key); }
inline jboolean Provider::remove(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("remove"), jboolean>(key, value); }
inline jboolean Provider::replace(ref<java::lang::Object> key, ref<java::lang::Object> oldValue, ref<java::lang::Object> newValue) { return call_method<SCAPIX_META_STRING("replace"), jboolean>(key, oldValue, newValue); }
inline ref<java::lang::Object> Provider::replace(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("replace"), ref<java::lang::Object>>(key, value); }
inline void Provider::replaceAll(ref<java::util::function::BiFunction> function) { return call_method<SCAPIX_META_STRING("replaceAll"), void>(function); }
inline ref<java::lang::Object> Provider::compute(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("compute"), ref<java::lang::Object>>(key, remappingFunction); }
inline ref<java::lang::Object> Provider::computeIfAbsent(ref<java::lang::Object> key, ref<java::util::function::Function> mappingFunction) { return call_method<SCAPIX_META_STRING("computeIfAbsent"), ref<java::lang::Object>>(key, mappingFunction); }
inline ref<java::lang::Object> Provider::computeIfPresent(ref<java::lang::Object> key, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("computeIfPresent"), ref<java::lang::Object>>(key, remappingFunction); }
inline ref<java::lang::Object> Provider::merge(ref<java::lang::Object> key, ref<java::lang::Object> value, ref<java::util::function::BiFunction> remappingFunction) { return call_method<SCAPIX_META_STRING("merge"), ref<java::lang::Object>>(key, value, remappingFunction); }
inline ref<java::lang::Object> Provider::get(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(key); }
inline ref<java::lang::Object> Provider::getOrDefault(ref<java::lang::Object> key, ref<java::lang::Object> defaultValue) { return call_method<SCAPIX_META_STRING("getOrDefault"), ref<java::lang::Object>>(key, defaultValue); }
inline void Provider::forEach(ref<java::util::function::BiConsumer> action) { return call_method<SCAPIX_META_STRING("forEach"), void>(action); }
inline ref<java::util::Enumeration> Provider::keys() { return call_method<SCAPIX_META_STRING("keys"), ref<java::util::Enumeration>>(); }
inline ref<java::util::Enumeration> Provider::elements() { return call_method<SCAPIX_META_STRING("elements"), ref<java::util::Enumeration>>(); }
inline ref<java::lang::String> Provider::getProperty(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getProperty"), ref<java::lang::String>>(key); }
inline ref<java::security::Provider_Service> Provider::getService(ref<java::lang::String> type, ref<java::lang::String> algorithm) { return call_method<SCAPIX_META_STRING("getService"), ref<java::security::Provider_Service>>(type, algorithm); }
inline ref<java::util::Set> Provider::getServices() { return call_method<SCAPIX_META_STRING("getServices"), ref<java::util::Set>>(); }

} // namespace java::security
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_SECURITY_PROVIDER_H
