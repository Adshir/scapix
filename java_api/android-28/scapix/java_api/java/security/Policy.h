// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_SECURITY_POLICY_H
#define SCAPIX_JAVA_SECURITY_POLICY_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::security { class CodeSource; }
namespace java::security { class Permission; }
namespace java::security { class PermissionCollection; }
namespace java::security { class Policy_Parameters; }
namespace java::security { class ProtectionDomain; }
namespace java::security { class Provider; }

namespace java::security {

class Policy : public object_base<SCAPIX_META_STRING("java/security/Policy"),
	java::lang::Object>
{
public:

	using Parameters = Policy_Parameters;

	static ref<java::security::PermissionCollection> UNSUPPORTED_EMPTY_COLLECTION_();

	static ref<Policy> new_object();
	static ref<java::security::Policy> getPolicy();
	static void setPolicy(ref<java::security::Policy> p);
	static ref<java::security::Policy> getInstance(ref<java::lang::String> type, ref<java::security::Policy_Parameters> params);
	static ref<java::security::Policy> getInstance(ref<java::lang::String> type, ref<java::security::Policy_Parameters> params, ref<java::lang::String> provider);
	static ref<java::security::Policy> getInstance(ref<java::lang::String> type, ref<java::security::Policy_Parameters> params, ref<java::security::Provider> provider);
	ref<java::security::Provider> getProvider();
	ref<java::lang::String> getType();
	ref<java::security::Policy_Parameters> getParameters();
	ref<java::security::PermissionCollection> getPermissions(ref<java::security::CodeSource> codesource);
	ref<java::security::PermissionCollection> getPermissions(ref<java::security::ProtectionDomain> domain);
	jboolean implies(ref<java::security::ProtectionDomain> domain, ref<java::security::Permission> permission);
	void refresh();

protected:

	Policy(handle_type h) : base_(h) {}

};

} // namespace java::security
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/CodeSource.h>
#include <scapix/java_api/java/security/Permission.h>
#include <scapix/java_api/java/security/PermissionCollection.h>
#include <scapix/java_api/java/security/Policy_Parameters.h>
#include <scapix/java_api/java/security/ProtectionDomain.h>
#include <scapix/java_api/java/security/Provider.h>

namespace scapix::java_api {
namespace java::security {

inline ref<java::security::PermissionCollection> Policy::UNSUPPORTED_EMPTY_COLLECTION_() { return get_static_field<SCAPIX_META_STRING("UNSUPPORTED_EMPTY_COLLECTION"), ref<java::security::PermissionCollection>>(); }
inline ref<Policy> Policy::new_object() { return base_::new_object(); }
inline ref<java::security::Policy> Policy::getPolicy() { return call_static_method<SCAPIX_META_STRING("getPolicy"), ref<java::security::Policy>>(); }
inline void Policy::setPolicy(ref<java::security::Policy> p) { return call_static_method<SCAPIX_META_STRING("setPolicy"), void>(p); }
inline ref<java::security::Policy> Policy::getInstance(ref<java::lang::String> type, ref<java::security::Policy_Parameters> params) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<java::security::Policy>>(type, params); }
inline ref<java::security::Policy> Policy::getInstance(ref<java::lang::String> type, ref<java::security::Policy_Parameters> params, ref<java::lang::String> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<java::security::Policy>>(type, params, provider); }
inline ref<java::security::Policy> Policy::getInstance(ref<java::lang::String> type, ref<java::security::Policy_Parameters> params, ref<java::security::Provider> provider) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<java::security::Policy>>(type, params, provider); }
inline ref<java::security::Provider> Policy::getProvider() { return call_method<SCAPIX_META_STRING("getProvider"), ref<java::security::Provider>>(); }
inline ref<java::lang::String> Policy::getType() { return call_method<SCAPIX_META_STRING("getType"), ref<java::lang::String>>(); }
inline ref<java::security::Policy_Parameters> Policy::getParameters() { return call_method<SCAPIX_META_STRING("getParameters"), ref<java::security::Policy_Parameters>>(); }
inline ref<java::security::PermissionCollection> Policy::getPermissions(ref<java::security::CodeSource> codesource) { return call_method<SCAPIX_META_STRING("getPermissions"), ref<java::security::PermissionCollection>>(codesource); }
inline ref<java::security::PermissionCollection> Policy::getPermissions(ref<java::security::ProtectionDomain> domain) { return call_method<SCAPIX_META_STRING("getPermissions"), ref<java::security::PermissionCollection>>(domain); }
inline jboolean Policy::implies(ref<java::security::ProtectionDomain> domain, ref<java::security::Permission> permission) { return call_method<SCAPIX_META_STRING("implies"), jboolean>(domain, permission); }
inline void Policy::refresh() { return call_method<SCAPIX_META_STRING("refresh"), void>(); }

} // namespace java::security
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_SECURITY_POLICY_H
