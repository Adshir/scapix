// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_MATH_BIGDECIMAL_H
#define SCAPIX_JAVA_MATH_BIGDECIMAL_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::math { class BigInteger; }
namespace java::math { class MathContext; }
namespace java::math { class RoundingMode; }

namespace java::math {

class BigDecimal : public object_base<SCAPIX_META_STRING("java/math/BigDecimal"),
	java::lang::Number,
	java::lang::Comparable,
	java::io::Serializable>
{
public:

	static ref<java::math::BigDecimal> ONE_();
	static jint ROUND_CEILING_();
	static jint ROUND_DOWN_();
	static jint ROUND_FLOOR_();
	static jint ROUND_HALF_DOWN_();
	static jint ROUND_HALF_EVEN_();
	static jint ROUND_HALF_UP_();
	static jint ROUND_UNNECESSARY_();
	static jint ROUND_UP_();
	static ref<java::math::BigDecimal> TEN_();
	static ref<java::math::BigDecimal> ZERO_();

	static ref<BigDecimal> new_object(ref<link::java::array<jchar>> in, jint offset, jint len);
	static ref<BigDecimal> new_object(ref<link::java::array<jchar>> in, jint offset, jint len, ref<java::math::MathContext> mc);
	static ref<BigDecimal> new_object(ref<link::java::array<jchar>> in);
	static ref<BigDecimal> new_object(ref<link::java::array<jchar>> in, ref<java::math::MathContext> mc);
	static ref<BigDecimal> new_object(ref<java::lang::String> val);
	static ref<BigDecimal> new_object(ref<java::lang::String> val, ref<java::math::MathContext> mc);
	static ref<BigDecimal> new_object(jdouble val);
	static ref<BigDecimal> new_object(jdouble val, ref<java::math::MathContext> p2);
	static ref<BigDecimal> new_object(ref<java::math::BigInteger> val);
	static ref<BigDecimal> new_object(ref<java::math::BigInteger> val, ref<java::math::MathContext> mc);
	static ref<BigDecimal> new_object(ref<java::math::BigInteger> unscaledVal, jint scale);
	static ref<BigDecimal> new_object(ref<java::math::BigInteger> unscaledVal, jint scale, ref<java::math::MathContext> mc);
	static ref<BigDecimal> new_object(jint val);
	static ref<BigDecimal> new_object(jint val, ref<java::math::MathContext> mc);
	static ref<BigDecimal> new_object(jlong val);
	static ref<BigDecimal> new_object(jlong val, ref<java::math::MathContext> p2);
	static ref<java::math::BigDecimal> valueOf(jlong unscaledVal, jint p2);
	static ref<java::math::BigDecimal> valueOf(jlong unscaledVal);
	static ref<java::math::BigDecimal> valueOf(jdouble val);
	ref<java::math::BigDecimal> add(ref<java::math::BigDecimal> augend);
	ref<java::math::BigDecimal> add(ref<java::math::BigDecimal> augend, ref<java::math::MathContext> mc);
	ref<java::math::BigDecimal> subtract(ref<java::math::BigDecimal> subtrahend);
	ref<java::math::BigDecimal> subtract(ref<java::math::BigDecimal> subtrahend, ref<java::math::MathContext> mc);
	ref<java::math::BigDecimal> multiply(ref<java::math::BigDecimal> multiplicand);
	ref<java::math::BigDecimal> multiply(ref<java::math::BigDecimal> multiplicand, ref<java::math::MathContext> mc);
	ref<java::math::BigDecimal> divide(ref<java::math::BigDecimal> divisor, jint scale, jint roundingMode);
	ref<java::math::BigDecimal> divide(ref<java::math::BigDecimal> divisor, jint scale, ref<java::math::RoundingMode> roundingMode);
	ref<java::math::BigDecimal> divide(ref<java::math::BigDecimal> divisor, jint roundingMode);
	ref<java::math::BigDecimal> divide(ref<java::math::BigDecimal> divisor, ref<java::math::RoundingMode> roundingMode);
	ref<java::math::BigDecimal> divide(ref<java::math::BigDecimal> divisor);
	ref<java::math::BigDecimal> divide(ref<java::math::BigDecimal> divisor, ref<java::math::MathContext> mc);
	ref<java::math::BigDecimal> divideToIntegralValue(ref<java::math::BigDecimal> divisor);
	ref<java::math::BigDecimal> divideToIntegralValue(ref<java::math::BigDecimal> divisor, ref<java::math::MathContext> mc);
	ref<java::math::BigDecimal> remainder(ref<java::math::BigDecimal> divisor);
	ref<java::math::BigDecimal> remainder(ref<java::math::BigDecimal> divisor, ref<java::math::MathContext> mc);
	ref<link::java::array<java::math::BigDecimal>> divideAndRemainder(ref<java::math::BigDecimal> divisor);
	ref<link::java::array<java::math::BigDecimal>> divideAndRemainder(ref<java::math::BigDecimal> divisor, ref<java::math::MathContext> mc);
	ref<java::math::BigDecimal> pow(jint n);
	ref<java::math::BigDecimal> pow(jint n, ref<java::math::MathContext> mc);
	ref<java::math::BigDecimal> abs();
	ref<java::math::BigDecimal> abs(ref<java::math::MathContext> mc);
	ref<java::math::BigDecimal> negate();
	ref<java::math::BigDecimal> negate(ref<java::math::MathContext> mc);
	ref<java::math::BigDecimal> plus();
	ref<java::math::BigDecimal> plus(ref<java::math::MathContext> mc);
	jint signum();
	jint scale();
	jint precision();
	ref<java::math::BigInteger> unscaledValue();
	ref<java::math::BigDecimal> round(ref<java::math::MathContext> mc);
	ref<java::math::BigDecimal> setScale(jint newScale, ref<java::math::RoundingMode> roundingMode);
	ref<java::math::BigDecimal> setScale(jint newScale, jint roundingMode);
	ref<java::math::BigDecimal> setScale(jint newScale);
	ref<java::math::BigDecimal> movePointLeft(jint n);
	ref<java::math::BigDecimal> movePointRight(jint n);
	ref<java::math::BigDecimal> scaleByPowerOfTen(jint n);
	ref<java::math::BigDecimal> stripTrailingZeros();
	jint compareTo(ref<java::math::BigDecimal> val);
	jboolean equals(ref<java::lang::Object> x);
	ref<java::math::BigDecimal> min(ref<java::math::BigDecimal> val);
	ref<java::math::BigDecimal> max(ref<java::math::BigDecimal> val);
	jint hashCode();
	ref<java::lang::String> toString();
	ref<java::lang::String> toEngineeringString();
	ref<java::lang::String> toPlainString();
	ref<java::math::BigInteger> toBigInteger();
	ref<java::math::BigInteger> toBigIntegerExact();
	jlong longValue();
	jlong longValueExact();
	jint intValue();
	jint intValueExact();
	jshort shortValueExact();
	jbyte byteValueExact();
	jfloat floatValue();
	jdouble doubleValue();
	ref<java::math::BigDecimal> ulp();

protected:

	BigDecimal(handle_type h) : base_(h) {}

};

} // namespace java::math
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigInteger.h>
#include <scapix/java_api/java/math/MathContext.h>
#include <scapix/java_api/java/math/RoundingMode.h>

namespace scapix::java_api {
namespace java::math {

inline ref<java::math::BigDecimal> BigDecimal::ONE_() { return get_static_field<SCAPIX_META_STRING("ONE"), ref<java::math::BigDecimal>>(); }
inline jint BigDecimal::ROUND_CEILING_() { return get_static_field<SCAPIX_META_STRING("ROUND_CEILING"), jint>(); }
inline jint BigDecimal::ROUND_DOWN_() { return get_static_field<SCAPIX_META_STRING("ROUND_DOWN"), jint>(); }
inline jint BigDecimal::ROUND_FLOOR_() { return get_static_field<SCAPIX_META_STRING("ROUND_FLOOR"), jint>(); }
inline jint BigDecimal::ROUND_HALF_DOWN_() { return get_static_field<SCAPIX_META_STRING("ROUND_HALF_DOWN"), jint>(); }
inline jint BigDecimal::ROUND_HALF_EVEN_() { return get_static_field<SCAPIX_META_STRING("ROUND_HALF_EVEN"), jint>(); }
inline jint BigDecimal::ROUND_HALF_UP_() { return get_static_field<SCAPIX_META_STRING("ROUND_HALF_UP"), jint>(); }
inline jint BigDecimal::ROUND_UNNECESSARY_() { return get_static_field<SCAPIX_META_STRING("ROUND_UNNECESSARY"), jint>(); }
inline jint BigDecimal::ROUND_UP_() { return get_static_field<SCAPIX_META_STRING("ROUND_UP"), jint>(); }
inline ref<java::math::BigDecimal> BigDecimal::TEN_() { return get_static_field<SCAPIX_META_STRING("TEN"), ref<java::math::BigDecimal>>(); }
inline ref<java::math::BigDecimal> BigDecimal::ZERO_() { return get_static_field<SCAPIX_META_STRING("ZERO"), ref<java::math::BigDecimal>>(); }
inline ref<BigDecimal> BigDecimal::new_object(ref<link::java::array<jchar>> in, jint offset, jint len) { return base_::new_object(in, offset, len); }
inline ref<BigDecimal> BigDecimal::new_object(ref<link::java::array<jchar>> in, jint offset, jint len, ref<java::math::MathContext> mc) { return base_::new_object(in, offset, len, mc); }
inline ref<BigDecimal> BigDecimal::new_object(ref<link::java::array<jchar>> in) { return base_::new_object(in); }
inline ref<BigDecimal> BigDecimal::new_object(ref<link::java::array<jchar>> in, ref<java::math::MathContext> mc) { return base_::new_object(in, mc); }
inline ref<BigDecimal> BigDecimal::new_object(ref<java::lang::String> val) { return base_::new_object(val); }
inline ref<BigDecimal> BigDecimal::new_object(ref<java::lang::String> val, ref<java::math::MathContext> mc) { return base_::new_object(val, mc); }
inline ref<BigDecimal> BigDecimal::new_object(jdouble val) { return base_::new_object(val); }
inline ref<BigDecimal> BigDecimal::new_object(jdouble val, ref<java::math::MathContext> p2) { return base_::new_object(val, p2); }
inline ref<BigDecimal> BigDecimal::new_object(ref<java::math::BigInteger> val) { return base_::new_object(val); }
inline ref<BigDecimal> BigDecimal::new_object(ref<java::math::BigInteger> val, ref<java::math::MathContext> mc) { return base_::new_object(val, mc); }
inline ref<BigDecimal> BigDecimal::new_object(ref<java::math::BigInteger> unscaledVal, jint scale) { return base_::new_object(unscaledVal, scale); }
inline ref<BigDecimal> BigDecimal::new_object(ref<java::math::BigInteger> unscaledVal, jint scale, ref<java::math::MathContext> mc) { return base_::new_object(unscaledVal, scale, mc); }
inline ref<BigDecimal> BigDecimal::new_object(jint val) { return base_::new_object(val); }
inline ref<BigDecimal> BigDecimal::new_object(jint val, ref<java::math::MathContext> mc) { return base_::new_object(val, mc); }
inline ref<BigDecimal> BigDecimal::new_object(jlong val) { return base_::new_object(val); }
inline ref<BigDecimal> BigDecimal::new_object(jlong val, ref<java::math::MathContext> p2) { return base_::new_object(val, p2); }
inline ref<java::math::BigDecimal> BigDecimal::valueOf(jlong unscaledVal, jint p2) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::math::BigDecimal>>(unscaledVal, p2); }
inline ref<java::math::BigDecimal> BigDecimal::valueOf(jlong unscaledVal) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::math::BigDecimal>>(unscaledVal); }
inline ref<java::math::BigDecimal> BigDecimal::valueOf(jdouble val) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::math::BigDecimal>>(val); }
inline ref<java::math::BigDecimal> BigDecimal::add(ref<java::math::BigDecimal> augend) { return call_method<SCAPIX_META_STRING("add"), ref<java::math::BigDecimal>>(augend); }
inline ref<java::math::BigDecimal> BigDecimal::add(ref<java::math::BigDecimal> augend, ref<java::math::MathContext> mc) { return call_method<SCAPIX_META_STRING("add"), ref<java::math::BigDecimal>>(augend, mc); }
inline ref<java::math::BigDecimal> BigDecimal::subtract(ref<java::math::BigDecimal> subtrahend) { return call_method<SCAPIX_META_STRING("subtract"), ref<java::math::BigDecimal>>(subtrahend); }
inline ref<java::math::BigDecimal> BigDecimal::subtract(ref<java::math::BigDecimal> subtrahend, ref<java::math::MathContext> mc) { return call_method<SCAPIX_META_STRING("subtract"), ref<java::math::BigDecimal>>(subtrahend, mc); }
inline ref<java::math::BigDecimal> BigDecimal::multiply(ref<java::math::BigDecimal> multiplicand) { return call_method<SCAPIX_META_STRING("multiply"), ref<java::math::BigDecimal>>(multiplicand); }
inline ref<java::math::BigDecimal> BigDecimal::multiply(ref<java::math::BigDecimal> multiplicand, ref<java::math::MathContext> mc) { return call_method<SCAPIX_META_STRING("multiply"), ref<java::math::BigDecimal>>(multiplicand, mc); }
inline ref<java::math::BigDecimal> BigDecimal::divide(ref<java::math::BigDecimal> divisor, jint scale, jint roundingMode) { return call_method<SCAPIX_META_STRING("divide"), ref<java::math::BigDecimal>>(divisor, scale, roundingMode); }
inline ref<java::math::BigDecimal> BigDecimal::divide(ref<java::math::BigDecimal> divisor, jint scale, ref<java::math::RoundingMode> roundingMode) { return call_method<SCAPIX_META_STRING("divide"), ref<java::math::BigDecimal>>(divisor, scale, roundingMode); }
inline ref<java::math::BigDecimal> BigDecimal::divide(ref<java::math::BigDecimal> divisor, jint roundingMode) { return call_method<SCAPIX_META_STRING("divide"), ref<java::math::BigDecimal>>(divisor, roundingMode); }
inline ref<java::math::BigDecimal> BigDecimal::divide(ref<java::math::BigDecimal> divisor, ref<java::math::RoundingMode> roundingMode) { return call_method<SCAPIX_META_STRING("divide"), ref<java::math::BigDecimal>>(divisor, roundingMode); }
inline ref<java::math::BigDecimal> BigDecimal::divide(ref<java::math::BigDecimal> divisor) { return call_method<SCAPIX_META_STRING("divide"), ref<java::math::BigDecimal>>(divisor); }
inline ref<java::math::BigDecimal> BigDecimal::divide(ref<java::math::BigDecimal> divisor, ref<java::math::MathContext> mc) { return call_method<SCAPIX_META_STRING("divide"), ref<java::math::BigDecimal>>(divisor, mc); }
inline ref<java::math::BigDecimal> BigDecimal::divideToIntegralValue(ref<java::math::BigDecimal> divisor) { return call_method<SCAPIX_META_STRING("divideToIntegralValue"), ref<java::math::BigDecimal>>(divisor); }
inline ref<java::math::BigDecimal> BigDecimal::divideToIntegralValue(ref<java::math::BigDecimal> divisor, ref<java::math::MathContext> mc) { return call_method<SCAPIX_META_STRING("divideToIntegralValue"), ref<java::math::BigDecimal>>(divisor, mc); }
inline ref<java::math::BigDecimal> BigDecimal::remainder(ref<java::math::BigDecimal> divisor) { return call_method<SCAPIX_META_STRING("remainder"), ref<java::math::BigDecimal>>(divisor); }
inline ref<java::math::BigDecimal> BigDecimal::remainder(ref<java::math::BigDecimal> divisor, ref<java::math::MathContext> mc) { return call_method<SCAPIX_META_STRING("remainder"), ref<java::math::BigDecimal>>(divisor, mc); }
inline ref<link::java::array<java::math::BigDecimal>> BigDecimal::divideAndRemainder(ref<java::math::BigDecimal> divisor) { return call_method<SCAPIX_META_STRING("divideAndRemainder"), ref<link::java::array<java::math::BigDecimal>>>(divisor); }
inline ref<link::java::array<java::math::BigDecimal>> BigDecimal::divideAndRemainder(ref<java::math::BigDecimal> divisor, ref<java::math::MathContext> mc) { return call_method<SCAPIX_META_STRING("divideAndRemainder"), ref<link::java::array<java::math::BigDecimal>>>(divisor, mc); }
inline ref<java::math::BigDecimal> BigDecimal::pow(jint n) { return call_method<SCAPIX_META_STRING("pow"), ref<java::math::BigDecimal>>(n); }
inline ref<java::math::BigDecimal> BigDecimal::pow(jint n, ref<java::math::MathContext> mc) { return call_method<SCAPIX_META_STRING("pow"), ref<java::math::BigDecimal>>(n, mc); }
inline ref<java::math::BigDecimal> BigDecimal::abs() { return call_method<SCAPIX_META_STRING("abs"), ref<java::math::BigDecimal>>(); }
inline ref<java::math::BigDecimal> BigDecimal::abs(ref<java::math::MathContext> mc) { return call_method<SCAPIX_META_STRING("abs"), ref<java::math::BigDecimal>>(mc); }
inline ref<java::math::BigDecimal> BigDecimal::negate() { return call_method<SCAPIX_META_STRING("negate"), ref<java::math::BigDecimal>>(); }
inline ref<java::math::BigDecimal> BigDecimal::negate(ref<java::math::MathContext> mc) { return call_method<SCAPIX_META_STRING("negate"), ref<java::math::BigDecimal>>(mc); }
inline ref<java::math::BigDecimal> BigDecimal::plus() { return call_method<SCAPIX_META_STRING("plus"), ref<java::math::BigDecimal>>(); }
inline ref<java::math::BigDecimal> BigDecimal::plus(ref<java::math::MathContext> mc) { return call_method<SCAPIX_META_STRING("plus"), ref<java::math::BigDecimal>>(mc); }
inline jint BigDecimal::signum() { return call_method<SCAPIX_META_STRING("signum"), jint>(); }
inline jint BigDecimal::scale() { return call_method<SCAPIX_META_STRING("scale"), jint>(); }
inline jint BigDecimal::precision() { return call_method<SCAPIX_META_STRING("precision"), jint>(); }
inline ref<java::math::BigInteger> BigDecimal::unscaledValue() { return call_method<SCAPIX_META_STRING("unscaledValue"), ref<java::math::BigInteger>>(); }
inline ref<java::math::BigDecimal> BigDecimal::round(ref<java::math::MathContext> mc) { return call_method<SCAPIX_META_STRING("round"), ref<java::math::BigDecimal>>(mc); }
inline ref<java::math::BigDecimal> BigDecimal::setScale(jint newScale, ref<java::math::RoundingMode> roundingMode) { return call_method<SCAPIX_META_STRING("setScale"), ref<java::math::BigDecimal>>(newScale, roundingMode); }
inline ref<java::math::BigDecimal> BigDecimal::setScale(jint newScale, jint roundingMode) { return call_method<SCAPIX_META_STRING("setScale"), ref<java::math::BigDecimal>>(newScale, roundingMode); }
inline ref<java::math::BigDecimal> BigDecimal::setScale(jint newScale) { return call_method<SCAPIX_META_STRING("setScale"), ref<java::math::BigDecimal>>(newScale); }
inline ref<java::math::BigDecimal> BigDecimal::movePointLeft(jint n) { return call_method<SCAPIX_META_STRING("movePointLeft"), ref<java::math::BigDecimal>>(n); }
inline ref<java::math::BigDecimal> BigDecimal::movePointRight(jint n) { return call_method<SCAPIX_META_STRING("movePointRight"), ref<java::math::BigDecimal>>(n); }
inline ref<java::math::BigDecimal> BigDecimal::scaleByPowerOfTen(jint n) { return call_method<SCAPIX_META_STRING("scaleByPowerOfTen"), ref<java::math::BigDecimal>>(n); }
inline ref<java::math::BigDecimal> BigDecimal::stripTrailingZeros() { return call_method<SCAPIX_META_STRING("stripTrailingZeros"), ref<java::math::BigDecimal>>(); }
inline jint BigDecimal::compareTo(ref<java::math::BigDecimal> val) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(val); }
inline jboolean BigDecimal::equals(ref<java::lang::Object> x) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(x); }
inline ref<java::math::BigDecimal> BigDecimal::min(ref<java::math::BigDecimal> val) { return call_method<SCAPIX_META_STRING("min"), ref<java::math::BigDecimal>>(val); }
inline ref<java::math::BigDecimal> BigDecimal::max(ref<java::math::BigDecimal> val) { return call_method<SCAPIX_META_STRING("max"), ref<java::math::BigDecimal>>(val); }
inline jint BigDecimal::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> BigDecimal::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BigDecimal::toEngineeringString() { return call_method<SCAPIX_META_STRING("toEngineeringString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BigDecimal::toPlainString() { return call_method<SCAPIX_META_STRING("toPlainString"), ref<java::lang::String>>(); }
inline ref<java::math::BigInteger> BigDecimal::toBigInteger() { return call_method<SCAPIX_META_STRING("toBigInteger"), ref<java::math::BigInteger>>(); }
inline ref<java::math::BigInteger> BigDecimal::toBigIntegerExact() { return call_method<SCAPIX_META_STRING("toBigIntegerExact"), ref<java::math::BigInteger>>(); }
inline jlong BigDecimal::longValue() { return call_method<SCAPIX_META_STRING("longValue"), jlong>(); }
inline jlong BigDecimal::longValueExact() { return call_method<SCAPIX_META_STRING("longValueExact"), jlong>(); }
inline jint BigDecimal::intValue() { return call_method<SCAPIX_META_STRING("intValue"), jint>(); }
inline jint BigDecimal::intValueExact() { return call_method<SCAPIX_META_STRING("intValueExact"), jint>(); }
inline jshort BigDecimal::shortValueExact() { return call_method<SCAPIX_META_STRING("shortValueExact"), jshort>(); }
inline jbyte BigDecimal::byteValueExact() { return call_method<SCAPIX_META_STRING("byteValueExact"), jbyte>(); }
inline jfloat BigDecimal::floatValue() { return call_method<SCAPIX_META_STRING("floatValue"), jfloat>(); }
inline jdouble BigDecimal::doubleValue() { return call_method<SCAPIX_META_STRING("doubleValue"), jdouble>(); }
inline ref<java::math::BigDecimal> BigDecimal::ulp() { return call_method<SCAPIX_META_STRING("ulp"), ref<java::math::BigDecimal>>(); }

} // namespace java::math
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_MATH_BIGDECIMAL_H
