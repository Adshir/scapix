// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_MATH_MATHCONTEXT_H
#define SCAPIX_JAVA_MATH_MATHCONTEXT_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::math { class RoundingMode; }

namespace java::math {

class MathContext : public object_base<SCAPIX_META_STRING("java/math/MathContext"),
	java::lang::Object,
	java::io::Serializable>
{
public:

	static ref<java::math::MathContext> DECIMAL128_();
	static ref<java::math::MathContext> DECIMAL32_();
	static ref<java::math::MathContext> DECIMAL64_();
	static ref<java::math::MathContext> UNLIMITED_();

	static ref<MathContext> new_object(jint precision);
	static ref<MathContext> new_object(jint precision, ref<java::math::RoundingMode> roundingMode);
	static ref<MathContext> new_object(ref<java::lang::String> s);
	jint getPrecision();
	ref<java::math::RoundingMode> getRoundingMode();
	jboolean equals(ref<java::lang::Object> x);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	MathContext(handle_type h) : base_(h) {}

};

} // namespace java::math
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/RoundingMode.h>

namespace scapix::java_api {
namespace java::math {

inline ref<java::math::MathContext> MathContext::DECIMAL128_() { return get_static_field<SCAPIX_META_STRING("DECIMAL128"), ref<java::math::MathContext>>(); }
inline ref<java::math::MathContext> MathContext::DECIMAL32_() { return get_static_field<SCAPIX_META_STRING("DECIMAL32"), ref<java::math::MathContext>>(); }
inline ref<java::math::MathContext> MathContext::DECIMAL64_() { return get_static_field<SCAPIX_META_STRING("DECIMAL64"), ref<java::math::MathContext>>(); }
inline ref<java::math::MathContext> MathContext::UNLIMITED_() { return get_static_field<SCAPIX_META_STRING("UNLIMITED"), ref<java::math::MathContext>>(); }
inline ref<MathContext> MathContext::new_object(jint precision) { return base_::new_object(precision); }
inline ref<MathContext> MathContext::new_object(jint precision, ref<java::math::RoundingMode> roundingMode) { return base_::new_object(precision, roundingMode); }
inline ref<MathContext> MathContext::new_object(ref<java::lang::String> s) { return base_::new_object(s); }
inline jint MathContext::getPrecision() { return call_method<SCAPIX_META_STRING("getPrecision"), jint>(); }
inline ref<java::math::RoundingMode> MathContext::getRoundingMode() { return call_method<SCAPIX_META_STRING("getRoundingMode"), ref<java::math::RoundingMode>>(); }
inline jboolean MathContext::equals(ref<java::lang::Object> x) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(x); }
inline jint MathContext::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> MathContext::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::math
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_MATH_MATHCONTEXT_H
