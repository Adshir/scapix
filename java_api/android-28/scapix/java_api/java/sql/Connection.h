// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/sql/Wrapper.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_SQL_CONNECTION_H
#define SCAPIX_JAVA_SQL_CONNECTION_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::sql { class Array; }
namespace java::sql { class Blob; }
namespace java::sql { class CallableStatement; }
namespace java::sql { class Clob; }
namespace java::sql { class DatabaseMetaData; }
namespace java::sql { class NClob; }
namespace java::sql { class PreparedStatement; }
namespace java::sql { class SQLWarning; }
namespace java::sql { class SQLXML; }
namespace java::sql { class Savepoint; }
namespace java::sql { class Statement; }
namespace java::sql { class Struct; }
namespace java::util { class Map; }
namespace java::util { class Properties; }

namespace java::sql {

class Connection : public object_base<SCAPIX_META_STRING("java/sql/Connection"),
	java::lang::Object,
	java::sql::Wrapper,
	java::lang::AutoCloseable>
{
public:

	static jint TRANSACTION_NONE_();
	static jint TRANSACTION_READ_COMMITTED_();
	static jint TRANSACTION_READ_UNCOMMITTED_();
	static jint TRANSACTION_REPEATABLE_READ_();
	static jint TRANSACTION_SERIALIZABLE_();

	ref<java::sql::Statement> createStatement();
	ref<java::sql::PreparedStatement> prepareStatement(ref<java::lang::String> p1);
	ref<java::sql::CallableStatement> prepareCall(ref<java::lang::String> p1);
	ref<java::lang::String> nativeSQL(ref<java::lang::String> p1);
	void setAutoCommit(jboolean p1);
	jboolean getAutoCommit();
	void commit();
	void rollback();
	void close();
	jboolean isClosed();
	ref<java::sql::DatabaseMetaData> getMetaData();
	void setReadOnly(jboolean p1);
	jboolean isReadOnly();
	void setCatalog(ref<java::lang::String> p1);
	ref<java::lang::String> getCatalog();
	void setTransactionIsolation(jint p1);
	jint getTransactionIsolation();
	ref<java::sql::SQLWarning> getWarnings();
	void clearWarnings();
	ref<java::sql::Statement> createStatement(jint p1, jint p2);
	ref<java::sql::PreparedStatement> prepareStatement(ref<java::lang::String> p1, jint p2, jint p3);
	ref<java::sql::CallableStatement> prepareCall(ref<java::lang::String> p1, jint p2, jint p3);
	ref<java::util::Map> getTypeMap();
	void setTypeMap(ref<java::util::Map> p1);
	void setHoldability(jint p1);
	jint getHoldability();
	ref<java::sql::Savepoint> setSavepoint();
	ref<java::sql::Savepoint> setSavepoint(ref<java::lang::String> p1);
	void rollback(ref<java::sql::Savepoint> p1);
	void releaseSavepoint(ref<java::sql::Savepoint> p1);
	ref<java::sql::Statement> createStatement(jint p1, jint p2, jint p3);
	ref<java::sql::PreparedStatement> prepareStatement(ref<java::lang::String> p1, jint p2, jint p3, jint p4);
	ref<java::sql::CallableStatement> prepareCall(ref<java::lang::String> p1, jint p2, jint p3, jint p4);
	ref<java::sql::PreparedStatement> prepareStatement(ref<java::lang::String> p1, jint p2);
	ref<java::sql::PreparedStatement> prepareStatement(ref<java::lang::String> p1, ref<link::java::array<jint>> p2);
	ref<java::sql::PreparedStatement> prepareStatement(ref<java::lang::String> p1, ref<link::java::array<java::lang::String>> p2);
	ref<java::sql::Clob> createClob();
	ref<java::sql::Blob> createBlob();
	ref<java::sql::NClob> createNClob();
	ref<java::sql::SQLXML> createSQLXML();
	jboolean isValid(jint p1);
	void setClientInfo(ref<java::lang::String> p1, ref<java::lang::String> p2);
	void setClientInfo(ref<java::util::Properties> p1);
	ref<java::lang::String> getClientInfo(ref<java::lang::String> p1);
	ref<java::util::Properties> getClientInfo();
	ref<java::sql::Array> createArrayOf(ref<java::lang::String> p1, ref<link::java::array<java::lang::Object>> p2);
	ref<java::sql::Struct> createStruct(ref<java::lang::String> p1, ref<link::java::array<java::lang::Object>> p2);

protected:

	Connection(handle_type h) : base_(h) {}

};

} // namespace java::sql
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/sql/Array.h>
#include <scapix/java_api/java/sql/Blob.h>
#include <scapix/java_api/java/sql/CallableStatement.h>
#include <scapix/java_api/java/sql/Clob.h>
#include <scapix/java_api/java/sql/DatabaseMetaData.h>
#include <scapix/java_api/java/sql/NClob.h>
#include <scapix/java_api/java/sql/PreparedStatement.h>
#include <scapix/java_api/java/sql/SQLWarning.h>
#include <scapix/java_api/java/sql/SQLXML.h>
#include <scapix/java_api/java/sql/Savepoint.h>
#include <scapix/java_api/java/sql/Statement.h>
#include <scapix/java_api/java/sql/Struct.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Properties.h>

namespace scapix::java_api {
namespace java::sql {

inline jint Connection::TRANSACTION_NONE_() { return get_static_field<SCAPIX_META_STRING("TRANSACTION_NONE"), jint>(); }
inline jint Connection::TRANSACTION_READ_COMMITTED_() { return get_static_field<SCAPIX_META_STRING("TRANSACTION_READ_COMMITTED"), jint>(); }
inline jint Connection::TRANSACTION_READ_UNCOMMITTED_() { return get_static_field<SCAPIX_META_STRING("TRANSACTION_READ_UNCOMMITTED"), jint>(); }
inline jint Connection::TRANSACTION_REPEATABLE_READ_() { return get_static_field<SCAPIX_META_STRING("TRANSACTION_REPEATABLE_READ"), jint>(); }
inline jint Connection::TRANSACTION_SERIALIZABLE_() { return get_static_field<SCAPIX_META_STRING("TRANSACTION_SERIALIZABLE"), jint>(); }
inline ref<java::sql::Statement> Connection::createStatement() { return call_method<SCAPIX_META_STRING("createStatement"), ref<java::sql::Statement>>(); }
inline ref<java::sql::PreparedStatement> Connection::prepareStatement(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("prepareStatement"), ref<java::sql::PreparedStatement>>(p1); }
inline ref<java::sql::CallableStatement> Connection::prepareCall(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("prepareCall"), ref<java::sql::CallableStatement>>(p1); }
inline ref<java::lang::String> Connection::nativeSQL(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("nativeSQL"), ref<java::lang::String>>(p1); }
inline void Connection::setAutoCommit(jboolean p1) { return call_method<SCAPIX_META_STRING("setAutoCommit"), void>(p1); }
inline jboolean Connection::getAutoCommit() { return call_method<SCAPIX_META_STRING("getAutoCommit"), jboolean>(); }
inline void Connection::commit() { return call_method<SCAPIX_META_STRING("commit"), void>(); }
inline void Connection::rollback() { return call_method<SCAPIX_META_STRING("rollback"), void>(); }
inline void Connection::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jboolean Connection::isClosed() { return call_method<SCAPIX_META_STRING("isClosed"), jboolean>(); }
inline ref<java::sql::DatabaseMetaData> Connection::getMetaData() { return call_method<SCAPIX_META_STRING("getMetaData"), ref<java::sql::DatabaseMetaData>>(); }
inline void Connection::setReadOnly(jboolean p1) { return call_method<SCAPIX_META_STRING("setReadOnly"), void>(p1); }
inline jboolean Connection::isReadOnly() { return call_method<SCAPIX_META_STRING("isReadOnly"), jboolean>(); }
inline void Connection::setCatalog(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setCatalog"), void>(p1); }
inline ref<java::lang::String> Connection::getCatalog() { return call_method<SCAPIX_META_STRING("getCatalog"), ref<java::lang::String>>(); }
inline void Connection::setTransactionIsolation(jint p1) { return call_method<SCAPIX_META_STRING("setTransactionIsolation"), void>(p1); }
inline jint Connection::getTransactionIsolation() { return call_method<SCAPIX_META_STRING("getTransactionIsolation"), jint>(); }
inline ref<java::sql::SQLWarning> Connection::getWarnings() { return call_method<SCAPIX_META_STRING("getWarnings"), ref<java::sql::SQLWarning>>(); }
inline void Connection::clearWarnings() { return call_method<SCAPIX_META_STRING("clearWarnings"), void>(); }
inline ref<java::sql::Statement> Connection::createStatement(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("createStatement"), ref<java::sql::Statement>>(p1, p2); }
inline ref<java::sql::PreparedStatement> Connection::prepareStatement(ref<java::lang::String> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("prepareStatement"), ref<java::sql::PreparedStatement>>(p1, p2, p3); }
inline ref<java::sql::CallableStatement> Connection::prepareCall(ref<java::lang::String> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("prepareCall"), ref<java::sql::CallableStatement>>(p1, p2, p3); }
inline ref<java::util::Map> Connection::getTypeMap() { return call_method<SCAPIX_META_STRING("getTypeMap"), ref<java::util::Map>>(); }
inline void Connection::setTypeMap(ref<java::util::Map> p1) { return call_method<SCAPIX_META_STRING("setTypeMap"), void>(p1); }
inline void Connection::setHoldability(jint p1) { return call_method<SCAPIX_META_STRING("setHoldability"), void>(p1); }
inline jint Connection::getHoldability() { return call_method<SCAPIX_META_STRING("getHoldability"), jint>(); }
inline ref<java::sql::Savepoint> Connection::setSavepoint() { return call_method<SCAPIX_META_STRING("setSavepoint"), ref<java::sql::Savepoint>>(); }
inline ref<java::sql::Savepoint> Connection::setSavepoint(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setSavepoint"), ref<java::sql::Savepoint>>(p1); }
inline void Connection::rollback(ref<java::sql::Savepoint> p1) { return call_method<SCAPIX_META_STRING("rollback"), void>(p1); }
inline void Connection::releaseSavepoint(ref<java::sql::Savepoint> p1) { return call_method<SCAPIX_META_STRING("releaseSavepoint"), void>(p1); }
inline ref<java::sql::Statement> Connection::createStatement(jint p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("createStatement"), ref<java::sql::Statement>>(p1, p2, p3); }
inline ref<java::sql::PreparedStatement> Connection::prepareStatement(ref<java::lang::String> p1, jint p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("prepareStatement"), ref<java::sql::PreparedStatement>>(p1, p2, p3, p4); }
inline ref<java::sql::CallableStatement> Connection::prepareCall(ref<java::lang::String> p1, jint p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("prepareCall"), ref<java::sql::CallableStatement>>(p1, p2, p3, p4); }
inline ref<java::sql::PreparedStatement> Connection::prepareStatement(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("prepareStatement"), ref<java::sql::PreparedStatement>>(p1, p2); }
inline ref<java::sql::PreparedStatement> Connection::prepareStatement(ref<java::lang::String> p1, ref<link::java::array<jint>> p2) { return call_method<SCAPIX_META_STRING("prepareStatement"), ref<java::sql::PreparedStatement>>(p1, p2); }
inline ref<java::sql::PreparedStatement> Connection::prepareStatement(ref<java::lang::String> p1, ref<link::java::array<java::lang::String>> p2) { return call_method<SCAPIX_META_STRING("prepareStatement"), ref<java::sql::PreparedStatement>>(p1, p2); }
inline ref<java::sql::Clob> Connection::createClob() { return call_method<SCAPIX_META_STRING("createClob"), ref<java::sql::Clob>>(); }
inline ref<java::sql::Blob> Connection::createBlob() { return call_method<SCAPIX_META_STRING("createBlob"), ref<java::sql::Blob>>(); }
inline ref<java::sql::NClob> Connection::createNClob() { return call_method<SCAPIX_META_STRING("createNClob"), ref<java::sql::NClob>>(); }
inline ref<java::sql::SQLXML> Connection::createSQLXML() { return call_method<SCAPIX_META_STRING("createSQLXML"), ref<java::sql::SQLXML>>(); }
inline jboolean Connection::isValid(jint p1) { return call_method<SCAPIX_META_STRING("isValid"), jboolean>(p1); }
inline void Connection::setClientInfo(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("setClientInfo"), void>(p1, p2); }
inline void Connection::setClientInfo(ref<java::util::Properties> p1) { return call_method<SCAPIX_META_STRING("setClientInfo"), void>(p1); }
inline ref<java::lang::String> Connection::getClientInfo(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getClientInfo"), ref<java::lang::String>>(p1); }
inline ref<java::util::Properties> Connection::getClientInfo() { return call_method<SCAPIX_META_STRING("getClientInfo"), ref<java::util::Properties>>(); }
inline ref<java::sql::Array> Connection::createArrayOf(ref<java::lang::String> p1, ref<link::java::array<java::lang::Object>> p2) { return call_method<SCAPIX_META_STRING("createArrayOf"), ref<java::sql::Array>>(p1, p2); }
inline ref<java::sql::Struct> Connection::createStruct(ref<java::lang::String> p1, ref<link::java::array<java::lang::Object>> p2) { return call_method<SCAPIX_META_STRING("createStruct"), ref<java::sql::Struct>>(p1, p2); }

} // namespace java::sql
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_SQL_CONNECTION_H
