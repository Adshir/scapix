// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/sql/PreparedStatement.h>

#ifndef SCAPIX_JAVA_SQL_CALLABLESTATEMENT_H
#define SCAPIX_JAVA_SQL_CALLABLESTATEMENT_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::io { class Reader; }
namespace java::lang { class String; }
namespace java::math { class BigDecimal; }
namespace java::net { class URL; }
namespace java::sql { class Array; }
namespace java::sql { class Blob; }
namespace java::sql { class Clob; }
namespace java::sql { class Date; }
namespace java::sql { class NClob; }
namespace java::sql { class Ref; }
namespace java::sql { class RowId; }
namespace java::sql { class SQLXML; }
namespace java::sql { class Time; }
namespace java::sql { class Timestamp; }
namespace java::util { class Calendar; }
namespace java::util { class Map; }

namespace java::sql {

class CallableStatement : public object_base<SCAPIX_META_STRING("java/sql/CallableStatement"),
	java::lang::Object,
	java::sql::PreparedStatement>
{
public:

	void registerOutParameter(jint p1, jint p2);
	void registerOutParameter(jint p1, jint p2, jint p3);
	jboolean wasNull();
	ref<java::lang::String> getString(jint p1);
	jboolean getBoolean(jint p1);
	jbyte getByte(jint p1);
	jshort getShort(jint p1);
	jint getInt(jint p1);
	jlong getLong(jint p1);
	jfloat getFloat(jint p1);
	jdouble getDouble(jint p1);
	ref<java::math::BigDecimal> getBigDecimal(jint p1, jint p2);
	ref<link::java::array<jbyte>> getBytes(jint p1);
	ref<java::sql::Date> getDate(jint p1);
	ref<java::sql::Time> getTime(jint p1);
	ref<java::sql::Timestamp> getTimestamp(jint p1);
	ref<java::lang::Object> getObject(jint p1);
	ref<java::math::BigDecimal> getBigDecimal(jint p1);
	ref<java::lang::Object> getObject(jint p1, ref<java::util::Map> p2);
	ref<java::sql::Ref> getRef(jint p1);
	ref<java::sql::Blob> getBlob(jint p1);
	ref<java::sql::Clob> getClob(jint p1);
	ref<java::sql::Array> getArray(jint p1);
	ref<java::sql::Date> getDate(jint p1, ref<java::util::Calendar> p2);
	ref<java::sql::Time> getTime(jint p1, ref<java::util::Calendar> p2);
	ref<java::sql::Timestamp> getTimestamp(jint p1, ref<java::util::Calendar> p2);
	void registerOutParameter(jint p1, jint p2, ref<java::lang::String> p3);
	void registerOutParameter(ref<java::lang::String> p1, jint p2);
	void registerOutParameter(ref<java::lang::String> p1, jint p2, jint p3);
	void registerOutParameter(ref<java::lang::String> p1, jint p2, ref<java::lang::String> p3);
	ref<java::net::URL> getURL(jint p1);
	void setURL(ref<java::lang::String> p1, ref<java::net::URL> p2);
	void setNull(ref<java::lang::String> p1, jint p2);
	void setBoolean(ref<java::lang::String> p1, jboolean p2);
	void setByte(ref<java::lang::String> p1, jbyte p2);
	void setShort(ref<java::lang::String> p1, jshort p2);
	void setInt(ref<java::lang::String> p1, jint p2);
	void setLong(ref<java::lang::String> p1, jlong p2);
	void setFloat(ref<java::lang::String> p1, jfloat p2);
	void setDouble(ref<java::lang::String> p1, jdouble p2);
	void setBigDecimal(ref<java::lang::String> p1, ref<java::math::BigDecimal> p2);
	void setString(ref<java::lang::String> p1, ref<java::lang::String> p2);
	void setBytes(ref<java::lang::String> p1, ref<link::java::array<jbyte>> p2);
	void setDate(ref<java::lang::String> p1, ref<java::sql::Date> p2);
	void setTime(ref<java::lang::String> p1, ref<java::sql::Time> p2);
	void setTimestamp(ref<java::lang::String> p1, ref<java::sql::Timestamp> p2);
	void setAsciiStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jint p3);
	void setBinaryStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jint p3);
	void setObject(ref<java::lang::String> p1, ref<java::lang::Object> p2, jint p3, jint p4);
	void setObject(ref<java::lang::String> p1, ref<java::lang::Object> p2, jint p3);
	void setObject(ref<java::lang::String> p1, ref<java::lang::Object> p2);
	void setCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2, jint p3);
	void setDate(ref<java::lang::String> p1, ref<java::sql::Date> p2, ref<java::util::Calendar> p3);
	void setTime(ref<java::lang::String> p1, ref<java::sql::Time> p2, ref<java::util::Calendar> p3);
	void setTimestamp(ref<java::lang::String> p1, ref<java::sql::Timestamp> p2, ref<java::util::Calendar> p3);
	void setNull(ref<java::lang::String> p1, jint p2, ref<java::lang::String> p3);
	ref<java::lang::String> getString(ref<java::lang::String> p1);
	jboolean getBoolean(ref<java::lang::String> p1);
	jbyte getByte(ref<java::lang::String> p1);
	jshort getShort(ref<java::lang::String> p1);
	jint getInt(ref<java::lang::String> p1);
	jlong getLong(ref<java::lang::String> p1);
	jfloat getFloat(ref<java::lang::String> p1);
	jdouble getDouble(ref<java::lang::String> p1);
	ref<link::java::array<jbyte>> getBytes(ref<java::lang::String> p1);
	ref<java::sql::Date> getDate(ref<java::lang::String> p1);
	ref<java::sql::Time> getTime(ref<java::lang::String> p1);
	ref<java::sql::Timestamp> getTimestamp(ref<java::lang::String> p1);
	ref<java::lang::Object> getObject(ref<java::lang::String> p1);
	ref<java::math::BigDecimal> getBigDecimal(ref<java::lang::String> p1);
	ref<java::lang::Object> getObject(ref<java::lang::String> p1, ref<java::util::Map> p2);
	ref<java::sql::Ref> getRef(ref<java::lang::String> p1);
	ref<java::sql::Blob> getBlob(ref<java::lang::String> p1);
	ref<java::sql::Clob> getClob(ref<java::lang::String> p1);
	ref<java::sql::Array> getArray(ref<java::lang::String> p1);
	ref<java::sql::Date> getDate(ref<java::lang::String> p1, ref<java::util::Calendar> p2);
	ref<java::sql::Time> getTime(ref<java::lang::String> p1, ref<java::util::Calendar> p2);
	ref<java::sql::Timestamp> getTimestamp(ref<java::lang::String> p1, ref<java::util::Calendar> p2);
	ref<java::net::URL> getURL(ref<java::lang::String> p1);
	ref<java::sql::RowId> getRowId(jint p1);
	ref<java::sql::RowId> getRowId(ref<java::lang::String> p1);
	void setRowId(ref<java::lang::String> p1, ref<java::sql::RowId> p2);
	void setNString(ref<java::lang::String> p1, ref<java::lang::String> p2);
	void setNCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3);
	void setNClob(ref<java::lang::String> p1, ref<java::sql::NClob> p2);
	void setClob(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3);
	void setBlob(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jlong p3);
	void setNClob(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3);
	ref<java::sql::NClob> getNClob(jint p1);
	ref<java::sql::NClob> getNClob(ref<java::lang::String> p1);
	void setSQLXML(ref<java::lang::String> p1, ref<java::sql::SQLXML> p2);
	ref<java::sql::SQLXML> getSQLXML(jint p1);
	ref<java::sql::SQLXML> getSQLXML(ref<java::lang::String> p1);
	ref<java::lang::String> getNString(jint p1);
	ref<java::lang::String> getNString(ref<java::lang::String> p1);
	ref<java::io::Reader> getNCharacterStream(jint p1);
	ref<java::io::Reader> getNCharacterStream(ref<java::lang::String> p1);
	ref<java::io::Reader> getCharacterStream(jint p1);
	ref<java::io::Reader> getCharacterStream(ref<java::lang::String> p1);
	void setBlob(ref<java::lang::String> p1, ref<java::sql::Blob> p2);
	void setClob(ref<java::lang::String> p1, ref<java::sql::Clob> p2);
	void setAsciiStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jlong p3);
	void setBinaryStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jlong p3);
	void setCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3);
	void setAsciiStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2);
	void setBinaryStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2);
	void setCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2);
	void setNCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2);
	void setClob(ref<java::lang::String> p1, ref<java::io::Reader> p2);
	void setBlob(ref<java::lang::String> p1, ref<java::io::InputStream> p2);
	void setNClob(ref<java::lang::String> p1, ref<java::io::Reader> p2);

protected:

	CallableStatement(handle_type h) : base_(h) {}

};

} // namespace java::sql
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigDecimal.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/sql/Array.h>
#include <scapix/java_api/java/sql/Blob.h>
#include <scapix/java_api/java/sql/Clob.h>
#include <scapix/java_api/java/sql/Date.h>
#include <scapix/java_api/java/sql/NClob.h>
#include <scapix/java_api/java/sql/Ref.h>
#include <scapix/java_api/java/sql/RowId.h>
#include <scapix/java_api/java/sql/SQLXML.h>
#include <scapix/java_api/java/sql/Time.h>
#include <scapix/java_api/java/sql/Timestamp.h>
#include <scapix/java_api/java/util/Calendar.h>
#include <scapix/java_api/java/util/Map.h>

namespace scapix::java_api {
namespace java::sql {

inline void CallableStatement::registerOutParameter(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("registerOutParameter"), void>(p1, p2); }
inline void CallableStatement::registerOutParameter(jint p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("registerOutParameter"), void>(p1, p2, p3); }
inline jboolean CallableStatement::wasNull() { return call_method<SCAPIX_META_STRING("wasNull"), jboolean>(); }
inline ref<java::lang::String> CallableStatement::getString(jint p1) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(p1); }
inline jboolean CallableStatement::getBoolean(jint p1) { return call_method<SCAPIX_META_STRING("getBoolean"), jboolean>(p1); }
inline jbyte CallableStatement::getByte(jint p1) { return call_method<SCAPIX_META_STRING("getByte"), jbyte>(p1); }
inline jshort CallableStatement::getShort(jint p1) { return call_method<SCAPIX_META_STRING("getShort"), jshort>(p1); }
inline jint CallableStatement::getInt(jint p1) { return call_method<SCAPIX_META_STRING("getInt"), jint>(p1); }
inline jlong CallableStatement::getLong(jint p1) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(p1); }
inline jfloat CallableStatement::getFloat(jint p1) { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(p1); }
inline jdouble CallableStatement::getDouble(jint p1) { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(p1); }
inline ref<java::math::BigDecimal> CallableStatement::getBigDecimal(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("getBigDecimal"), ref<java::math::BigDecimal>>(p1, p2); }
inline ref<link::java::array<jbyte>> CallableStatement::getBytes(jint p1) { return call_method<SCAPIX_META_STRING("getBytes"), ref<link::java::array<jbyte>>>(p1); }
inline ref<java::sql::Date> CallableStatement::getDate(jint p1) { return call_method<SCAPIX_META_STRING("getDate"), ref<java::sql::Date>>(p1); }
inline ref<java::sql::Time> CallableStatement::getTime(jint p1) { return call_method<SCAPIX_META_STRING("getTime"), ref<java::sql::Time>>(p1); }
inline ref<java::sql::Timestamp> CallableStatement::getTimestamp(jint p1) { return call_method<SCAPIX_META_STRING("getTimestamp"), ref<java::sql::Timestamp>>(p1); }
inline ref<java::lang::Object> CallableStatement::getObject(jint p1) { return call_method<SCAPIX_META_STRING("getObject"), ref<java::lang::Object>>(p1); }
inline ref<java::math::BigDecimal> CallableStatement::getBigDecimal(jint p1) { return call_method<SCAPIX_META_STRING("getBigDecimal"), ref<java::math::BigDecimal>>(p1); }
inline ref<java::lang::Object> CallableStatement::getObject(jint p1, ref<java::util::Map> p2) { return call_method<SCAPIX_META_STRING("getObject"), ref<java::lang::Object>>(p1, p2); }
inline ref<java::sql::Ref> CallableStatement::getRef(jint p1) { return call_method<SCAPIX_META_STRING("getRef"), ref<java::sql::Ref>>(p1); }
inline ref<java::sql::Blob> CallableStatement::getBlob(jint p1) { return call_method<SCAPIX_META_STRING("getBlob"), ref<java::sql::Blob>>(p1); }
inline ref<java::sql::Clob> CallableStatement::getClob(jint p1) { return call_method<SCAPIX_META_STRING("getClob"), ref<java::sql::Clob>>(p1); }
inline ref<java::sql::Array> CallableStatement::getArray(jint p1) { return call_method<SCAPIX_META_STRING("getArray"), ref<java::sql::Array>>(p1); }
inline ref<java::sql::Date> CallableStatement::getDate(jint p1, ref<java::util::Calendar> p2) { return call_method<SCAPIX_META_STRING("getDate"), ref<java::sql::Date>>(p1, p2); }
inline ref<java::sql::Time> CallableStatement::getTime(jint p1, ref<java::util::Calendar> p2) { return call_method<SCAPIX_META_STRING("getTime"), ref<java::sql::Time>>(p1, p2); }
inline ref<java::sql::Timestamp> CallableStatement::getTimestamp(jint p1, ref<java::util::Calendar> p2) { return call_method<SCAPIX_META_STRING("getTimestamp"), ref<java::sql::Timestamp>>(p1, p2); }
inline void CallableStatement::registerOutParameter(jint p1, jint p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("registerOutParameter"), void>(p1, p2, p3); }
inline void CallableStatement::registerOutParameter(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("registerOutParameter"), void>(p1, p2); }
inline void CallableStatement::registerOutParameter(ref<java::lang::String> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("registerOutParameter"), void>(p1, p2, p3); }
inline void CallableStatement::registerOutParameter(ref<java::lang::String> p1, jint p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("registerOutParameter"), void>(p1, p2, p3); }
inline ref<java::net::URL> CallableStatement::getURL(jint p1) { return call_method<SCAPIX_META_STRING("getURL"), ref<java::net::URL>>(p1); }
inline void CallableStatement::setURL(ref<java::lang::String> p1, ref<java::net::URL> p2) { return call_method<SCAPIX_META_STRING("setURL"), void>(p1, p2); }
inline void CallableStatement::setNull(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("setNull"), void>(p1, p2); }
inline void CallableStatement::setBoolean(ref<java::lang::String> p1, jboolean p2) { return call_method<SCAPIX_META_STRING("setBoolean"), void>(p1, p2); }
inline void CallableStatement::setByte(ref<java::lang::String> p1, jbyte p2) { return call_method<SCAPIX_META_STRING("setByte"), void>(p1, p2); }
inline void CallableStatement::setShort(ref<java::lang::String> p1, jshort p2) { return call_method<SCAPIX_META_STRING("setShort"), void>(p1, p2); }
inline void CallableStatement::setInt(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("setInt"), void>(p1, p2); }
inline void CallableStatement::setLong(ref<java::lang::String> p1, jlong p2) { return call_method<SCAPIX_META_STRING("setLong"), void>(p1, p2); }
inline void CallableStatement::setFloat(ref<java::lang::String> p1, jfloat p2) { return call_method<SCAPIX_META_STRING("setFloat"), void>(p1, p2); }
inline void CallableStatement::setDouble(ref<java::lang::String> p1, jdouble p2) { return call_method<SCAPIX_META_STRING("setDouble"), void>(p1, p2); }
inline void CallableStatement::setBigDecimal(ref<java::lang::String> p1, ref<java::math::BigDecimal> p2) { return call_method<SCAPIX_META_STRING("setBigDecimal"), void>(p1, p2); }
inline void CallableStatement::setString(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("setString"), void>(p1, p2); }
inline void CallableStatement::setBytes(ref<java::lang::String> p1, ref<link::java::array<jbyte>> p2) { return call_method<SCAPIX_META_STRING("setBytes"), void>(p1, p2); }
inline void CallableStatement::setDate(ref<java::lang::String> p1, ref<java::sql::Date> p2) { return call_method<SCAPIX_META_STRING("setDate"), void>(p1, p2); }
inline void CallableStatement::setTime(ref<java::lang::String> p1, ref<java::sql::Time> p2) { return call_method<SCAPIX_META_STRING("setTime"), void>(p1, p2); }
inline void CallableStatement::setTimestamp(ref<java::lang::String> p1, ref<java::sql::Timestamp> p2) { return call_method<SCAPIX_META_STRING("setTimestamp"), void>(p1, p2); }
inline void CallableStatement::setAsciiStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jint p3) { return call_method<SCAPIX_META_STRING("setAsciiStream"), void>(p1, p2, p3); }
inline void CallableStatement::setBinaryStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jint p3) { return call_method<SCAPIX_META_STRING("setBinaryStream"), void>(p1, p2, p3); }
inline void CallableStatement::setObject(ref<java::lang::String> p1, ref<java::lang::Object> p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("setObject"), void>(p1, p2, p3, p4); }
inline void CallableStatement::setObject(ref<java::lang::String> p1, ref<java::lang::Object> p2, jint p3) { return call_method<SCAPIX_META_STRING("setObject"), void>(p1, p2, p3); }
inline void CallableStatement::setObject(ref<java::lang::String> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("setObject"), void>(p1, p2); }
inline void CallableStatement::setCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2, jint p3) { return call_method<SCAPIX_META_STRING("setCharacterStream"), void>(p1, p2, p3); }
inline void CallableStatement::setDate(ref<java::lang::String> p1, ref<java::sql::Date> p2, ref<java::util::Calendar> p3) { return call_method<SCAPIX_META_STRING("setDate"), void>(p1, p2, p3); }
inline void CallableStatement::setTime(ref<java::lang::String> p1, ref<java::sql::Time> p2, ref<java::util::Calendar> p3) { return call_method<SCAPIX_META_STRING("setTime"), void>(p1, p2, p3); }
inline void CallableStatement::setTimestamp(ref<java::lang::String> p1, ref<java::sql::Timestamp> p2, ref<java::util::Calendar> p3) { return call_method<SCAPIX_META_STRING("setTimestamp"), void>(p1, p2, p3); }
inline void CallableStatement::setNull(ref<java::lang::String> p1, jint p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("setNull"), void>(p1, p2, p3); }
inline ref<java::lang::String> CallableStatement::getString(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(p1); }
inline jboolean CallableStatement::getBoolean(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getBoolean"), jboolean>(p1); }
inline jbyte CallableStatement::getByte(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getByte"), jbyte>(p1); }
inline jshort CallableStatement::getShort(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getShort"), jshort>(p1); }
inline jint CallableStatement::getInt(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getInt"), jint>(p1); }
inline jlong CallableStatement::getLong(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(p1); }
inline jfloat CallableStatement::getFloat(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(p1); }
inline jdouble CallableStatement::getDouble(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(p1); }
inline ref<link::java::array<jbyte>> CallableStatement::getBytes(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getBytes"), ref<link::java::array<jbyte>>>(p1); }
inline ref<java::sql::Date> CallableStatement::getDate(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getDate"), ref<java::sql::Date>>(p1); }
inline ref<java::sql::Time> CallableStatement::getTime(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getTime"), ref<java::sql::Time>>(p1); }
inline ref<java::sql::Timestamp> CallableStatement::getTimestamp(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getTimestamp"), ref<java::sql::Timestamp>>(p1); }
inline ref<java::lang::Object> CallableStatement::getObject(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getObject"), ref<java::lang::Object>>(p1); }
inline ref<java::math::BigDecimal> CallableStatement::getBigDecimal(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getBigDecimal"), ref<java::math::BigDecimal>>(p1); }
inline ref<java::lang::Object> CallableStatement::getObject(ref<java::lang::String> p1, ref<java::util::Map> p2) { return call_method<SCAPIX_META_STRING("getObject"), ref<java::lang::Object>>(p1, p2); }
inline ref<java::sql::Ref> CallableStatement::getRef(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getRef"), ref<java::sql::Ref>>(p1); }
inline ref<java::sql::Blob> CallableStatement::getBlob(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getBlob"), ref<java::sql::Blob>>(p1); }
inline ref<java::sql::Clob> CallableStatement::getClob(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getClob"), ref<java::sql::Clob>>(p1); }
inline ref<java::sql::Array> CallableStatement::getArray(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getArray"), ref<java::sql::Array>>(p1); }
inline ref<java::sql::Date> CallableStatement::getDate(ref<java::lang::String> p1, ref<java::util::Calendar> p2) { return call_method<SCAPIX_META_STRING("getDate"), ref<java::sql::Date>>(p1, p2); }
inline ref<java::sql::Time> CallableStatement::getTime(ref<java::lang::String> p1, ref<java::util::Calendar> p2) { return call_method<SCAPIX_META_STRING("getTime"), ref<java::sql::Time>>(p1, p2); }
inline ref<java::sql::Timestamp> CallableStatement::getTimestamp(ref<java::lang::String> p1, ref<java::util::Calendar> p2) { return call_method<SCAPIX_META_STRING("getTimestamp"), ref<java::sql::Timestamp>>(p1, p2); }
inline ref<java::net::URL> CallableStatement::getURL(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getURL"), ref<java::net::URL>>(p1); }
inline ref<java::sql::RowId> CallableStatement::getRowId(jint p1) { return call_method<SCAPIX_META_STRING("getRowId"), ref<java::sql::RowId>>(p1); }
inline ref<java::sql::RowId> CallableStatement::getRowId(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getRowId"), ref<java::sql::RowId>>(p1); }
inline void CallableStatement::setRowId(ref<java::lang::String> p1, ref<java::sql::RowId> p2) { return call_method<SCAPIX_META_STRING("setRowId"), void>(p1, p2); }
inline void CallableStatement::setNString(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("setNString"), void>(p1, p2); }
inline void CallableStatement::setNCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setNCharacterStream"), void>(p1, p2, p3); }
inline void CallableStatement::setNClob(ref<java::lang::String> p1, ref<java::sql::NClob> p2) { return call_method<SCAPIX_META_STRING("setNClob"), void>(p1, p2); }
inline void CallableStatement::setClob(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setClob"), void>(p1, p2, p3); }
inline void CallableStatement::setBlob(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setBlob"), void>(p1, p2, p3); }
inline void CallableStatement::setNClob(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setNClob"), void>(p1, p2, p3); }
inline ref<java::sql::NClob> CallableStatement::getNClob(jint p1) { return call_method<SCAPIX_META_STRING("getNClob"), ref<java::sql::NClob>>(p1); }
inline ref<java::sql::NClob> CallableStatement::getNClob(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getNClob"), ref<java::sql::NClob>>(p1); }
inline void CallableStatement::setSQLXML(ref<java::lang::String> p1, ref<java::sql::SQLXML> p2) { return call_method<SCAPIX_META_STRING("setSQLXML"), void>(p1, p2); }
inline ref<java::sql::SQLXML> CallableStatement::getSQLXML(jint p1) { return call_method<SCAPIX_META_STRING("getSQLXML"), ref<java::sql::SQLXML>>(p1); }
inline ref<java::sql::SQLXML> CallableStatement::getSQLXML(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getSQLXML"), ref<java::sql::SQLXML>>(p1); }
inline ref<java::lang::String> CallableStatement::getNString(jint p1) { return call_method<SCAPIX_META_STRING("getNString"), ref<java::lang::String>>(p1); }
inline ref<java::lang::String> CallableStatement::getNString(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getNString"), ref<java::lang::String>>(p1); }
inline ref<java::io::Reader> CallableStatement::getNCharacterStream(jint p1) { return call_method<SCAPIX_META_STRING("getNCharacterStream"), ref<java::io::Reader>>(p1); }
inline ref<java::io::Reader> CallableStatement::getNCharacterStream(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getNCharacterStream"), ref<java::io::Reader>>(p1); }
inline ref<java::io::Reader> CallableStatement::getCharacterStream(jint p1) { return call_method<SCAPIX_META_STRING("getCharacterStream"), ref<java::io::Reader>>(p1); }
inline ref<java::io::Reader> CallableStatement::getCharacterStream(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getCharacterStream"), ref<java::io::Reader>>(p1); }
inline void CallableStatement::setBlob(ref<java::lang::String> p1, ref<java::sql::Blob> p2) { return call_method<SCAPIX_META_STRING("setBlob"), void>(p1, p2); }
inline void CallableStatement::setClob(ref<java::lang::String> p1, ref<java::sql::Clob> p2) { return call_method<SCAPIX_META_STRING("setClob"), void>(p1, p2); }
inline void CallableStatement::setAsciiStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setAsciiStream"), void>(p1, p2, p3); }
inline void CallableStatement::setBinaryStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setBinaryStream"), void>(p1, p2, p3); }
inline void CallableStatement::setCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setCharacterStream"), void>(p1, p2, p3); }
inline void CallableStatement::setAsciiStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("setAsciiStream"), void>(p1, p2); }
inline void CallableStatement::setBinaryStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("setBinaryStream"), void>(p1, p2); }
inline void CallableStatement::setCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("setCharacterStream"), void>(p1, p2); }
inline void CallableStatement::setNCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("setNCharacterStream"), void>(p1, p2); }
inline void CallableStatement::setClob(ref<java::lang::String> p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("setClob"), void>(p1, p2); }
inline void CallableStatement::setBlob(ref<java::lang::String> p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("setBlob"), void>(p1, p2); }
inline void CallableStatement::setNClob(ref<java::lang::String> p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("setNClob"), void>(p1, p2); }

} // namespace java::sql
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_SQL_CALLABLESTATEMENT_H
