// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/sql/Wrapper.h>

#ifndef SCAPIX_JAVA_SQL_DATABASEMETADATA_H
#define SCAPIX_JAVA_SQL_DATABASEMETADATA_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::sql { class Connection; }
namespace java::sql { class ResultSet; }
namespace java::sql { class RowIdLifetime; }

namespace java::sql {

class DatabaseMetaData : public object_base<SCAPIX_META_STRING("java/sql/DatabaseMetaData"),
	java::lang::Object,
	java::sql::Wrapper>
{
public:

	static jshort attributeNoNulls();
	static jshort attributeNullable();
	static jshort attributeNullableUnknown();
	static jint bestRowNotPseudo();
	static jint bestRowPseudo();
	static jint bestRowSession();
	static jint bestRowTemporary();
	static jint bestRowTransaction();
	static jint bestRowUnknown();
	static jint columnNoNulls();
	static jint columnNullable();
	static jint columnNullableUnknown();
	static jint functionColumnIn();
	static jint functionColumnInOut();
	static jint functionColumnOut();
	static jint functionColumnResult();
	static jint functionColumnUnknown();
	static jint functionNoNulls();
	static jint functionNoTable();
	static jint functionNullable();
	static jint functionNullableUnknown();
	static jint functionResultUnknown();
	static jint functionReturn();
	static jint functionReturnsTable();
	static jint importedKeyCascade();
	static jint importedKeyInitiallyDeferred();
	static jint importedKeyInitiallyImmediate();
	static jint importedKeyNoAction();
	static jint importedKeyNotDeferrable();
	static jint importedKeyRestrict();
	static jint importedKeySetDefault();
	static jint importedKeySetNull();
	static jint procedureColumnIn();
	static jint procedureColumnInOut();
	static jint procedureColumnOut();
	static jint procedureColumnResult();
	static jint procedureColumnReturn();
	static jint procedureColumnUnknown();
	static jint procedureNoNulls();
	static jint procedureNoResult();
	static jint procedureNullable();
	static jint procedureNullableUnknown();
	static jint procedureResultUnknown();
	static jint procedureReturnsResult();
	static jint sqlStateSQL();
	static jint sqlStateSQL99();
	static jint sqlStateXOpen();
	static jshort tableIndexClustered();
	static jshort tableIndexHashed();
	static jshort tableIndexOther();
	static jshort tableIndexStatistic();
	static jint typeNoNulls();
	static jint typeNullable();
	static jint typeNullableUnknown();
	static jint typePredBasic();
	static jint typePredChar();
	static jint typePredNone();
	static jint typeSearchable();
	static jint versionColumnNotPseudo();
	static jint versionColumnPseudo();
	static jint versionColumnUnknown();

	jboolean allProceduresAreCallable();
	jboolean allTablesAreSelectable();
	ref<java::lang::String> getURL();
	ref<java::lang::String> getUserName();
	jboolean isReadOnly();
	jboolean nullsAreSortedHigh();
	jboolean nullsAreSortedLow();
	jboolean nullsAreSortedAtStart();
	jboolean nullsAreSortedAtEnd();
	ref<java::lang::String> getDatabaseProductName();
	ref<java::lang::String> getDatabaseProductVersion();
	ref<java::lang::String> getDriverName();
	ref<java::lang::String> getDriverVersion();
	jint getDriverMajorVersion();
	jint getDriverMinorVersion();
	jboolean usesLocalFiles();
	jboolean usesLocalFilePerTable();
	jboolean supportsMixedCaseIdentifiers();
	jboolean storesUpperCaseIdentifiers();
	jboolean storesLowerCaseIdentifiers();
	jboolean storesMixedCaseIdentifiers();
	jboolean supportsMixedCaseQuotedIdentifiers();
	jboolean storesUpperCaseQuotedIdentifiers();
	jboolean storesLowerCaseQuotedIdentifiers();
	jboolean storesMixedCaseQuotedIdentifiers();
	ref<java::lang::String> getIdentifierQuoteString();
	ref<java::lang::String> getSQLKeywords();
	ref<java::lang::String> getNumericFunctions();
	ref<java::lang::String> getStringFunctions();
	ref<java::lang::String> getSystemFunctions();
	ref<java::lang::String> getTimeDateFunctions();
	ref<java::lang::String> getSearchStringEscape();
	ref<java::lang::String> getExtraNameCharacters();
	jboolean supportsAlterTableWithAddColumn();
	jboolean supportsAlterTableWithDropColumn();
	jboolean supportsColumnAliasing();
	jboolean nullPlusNonNullIsNull();
	jboolean supportsConvert();
	jboolean supportsConvert(jint p1, jint p2);
	jboolean supportsTableCorrelationNames();
	jboolean supportsDifferentTableCorrelationNames();
	jboolean supportsExpressionsInOrderBy();
	jboolean supportsOrderByUnrelated();
	jboolean supportsGroupBy();
	jboolean supportsGroupByUnrelated();
	jboolean supportsGroupByBeyondSelect();
	jboolean supportsLikeEscapeClause();
	jboolean supportsMultipleResultSets();
	jboolean supportsMultipleTransactions();
	jboolean supportsNonNullableColumns();
	jboolean supportsMinimumSQLGrammar();
	jboolean supportsCoreSQLGrammar();
	jboolean supportsExtendedSQLGrammar();
	jboolean supportsANSI92EntryLevelSQL();
	jboolean supportsANSI92IntermediateSQL();
	jboolean supportsANSI92FullSQL();
	jboolean supportsIntegrityEnhancementFacility();
	jboolean supportsOuterJoins();
	jboolean supportsFullOuterJoins();
	jboolean supportsLimitedOuterJoins();
	ref<java::lang::String> getSchemaTerm();
	ref<java::lang::String> getProcedureTerm();
	ref<java::lang::String> getCatalogTerm();
	jboolean isCatalogAtStart();
	ref<java::lang::String> getCatalogSeparator();
	jboolean supportsSchemasInDataManipulation();
	jboolean supportsSchemasInProcedureCalls();
	jboolean supportsSchemasInTableDefinitions();
	jboolean supportsSchemasInIndexDefinitions();
	jboolean supportsSchemasInPrivilegeDefinitions();
	jboolean supportsCatalogsInDataManipulation();
	jboolean supportsCatalogsInProcedureCalls();
	jboolean supportsCatalogsInTableDefinitions();
	jboolean supportsCatalogsInIndexDefinitions();
	jboolean supportsCatalogsInPrivilegeDefinitions();
	jboolean supportsPositionedDelete();
	jboolean supportsPositionedUpdate();
	jboolean supportsSelectForUpdate();
	jboolean supportsStoredProcedures();
	jboolean supportsSubqueriesInComparisons();
	jboolean supportsSubqueriesInExists();
	jboolean supportsSubqueriesInIns();
	jboolean supportsSubqueriesInQuantifieds();
	jboolean supportsCorrelatedSubqueries();
	jboolean supportsUnion();
	jboolean supportsUnionAll();
	jboolean supportsOpenCursorsAcrossCommit();
	jboolean supportsOpenCursorsAcrossRollback();
	jboolean supportsOpenStatementsAcrossCommit();
	jboolean supportsOpenStatementsAcrossRollback();
	jint getMaxBinaryLiteralLength();
	jint getMaxCharLiteralLength();
	jint getMaxColumnNameLength();
	jint getMaxColumnsInGroupBy();
	jint getMaxColumnsInIndex();
	jint getMaxColumnsInOrderBy();
	jint getMaxColumnsInSelect();
	jint getMaxColumnsInTable();
	jint getMaxConnections();
	jint getMaxCursorNameLength();
	jint getMaxIndexLength();
	jint getMaxSchemaNameLength();
	jint getMaxProcedureNameLength();
	jint getMaxCatalogNameLength();
	jint getMaxRowSize();
	jboolean doesMaxRowSizeIncludeBlobs();
	jint getMaxStatementLength();
	jint getMaxStatements();
	jint getMaxTableNameLength();
	jint getMaxTablesInSelect();
	jint getMaxUserNameLength();
	jint getDefaultTransactionIsolation();
	jboolean supportsTransactions();
	jboolean supportsTransactionIsolationLevel(jint p1);
	jboolean supportsDataDefinitionAndDataManipulationTransactions();
	jboolean supportsDataManipulationTransactionsOnly();
	jboolean dataDefinitionCausesTransactionCommit();
	jboolean dataDefinitionIgnoredInTransactions();
	ref<java::sql::ResultSet> getProcedures(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3);
	ref<java::sql::ResultSet> getProcedureColumns(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<java::lang::String> p4);
	ref<java::sql::ResultSet> getTables(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<link::java::array<java::lang::String>> p4);
	ref<java::sql::ResultSet> getSchemas();
	ref<java::sql::ResultSet> getCatalogs();
	ref<java::sql::ResultSet> getTableTypes();
	ref<java::sql::ResultSet> getColumns(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<java::lang::String> p4);
	ref<java::sql::ResultSet> getColumnPrivileges(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<java::lang::String> p4);
	ref<java::sql::ResultSet> getTablePrivileges(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3);
	ref<java::sql::ResultSet> getBestRowIdentifier(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, jint p4, jboolean p5);
	ref<java::sql::ResultSet> getVersionColumns(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3);
	ref<java::sql::ResultSet> getPrimaryKeys(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3);
	ref<java::sql::ResultSet> getImportedKeys(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3);
	ref<java::sql::ResultSet> getExportedKeys(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3);
	ref<java::sql::ResultSet> getCrossReference(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<java::lang::String> p4, ref<java::lang::String> p5, ref<java::lang::String> p6);
	ref<java::sql::ResultSet> getTypeInfo();
	ref<java::sql::ResultSet> getIndexInfo(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, jboolean p4, jboolean p5);
	jboolean supportsResultSetType(jint p1);
	jboolean supportsResultSetConcurrency(jint p1, jint p2);
	jboolean ownUpdatesAreVisible(jint p1);
	jboolean ownDeletesAreVisible(jint p1);
	jboolean ownInsertsAreVisible(jint p1);
	jboolean othersUpdatesAreVisible(jint p1);
	jboolean othersDeletesAreVisible(jint p1);
	jboolean othersInsertsAreVisible(jint p1);
	jboolean updatesAreDetected(jint p1);
	jboolean deletesAreDetected(jint p1);
	jboolean insertsAreDetected(jint p1);
	jboolean supportsBatchUpdates();
	ref<java::sql::ResultSet> getUDTs(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<link::java::array<jint>> p4);
	ref<java::sql::Connection> getConnection();
	jboolean supportsSavepoints();
	jboolean supportsNamedParameters();
	jboolean supportsMultipleOpenResults();
	jboolean supportsGetGeneratedKeys();
	ref<java::sql::ResultSet> getSuperTypes(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3);
	ref<java::sql::ResultSet> getSuperTables(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3);
	ref<java::sql::ResultSet> getAttributes(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<java::lang::String> p4);
	jboolean supportsResultSetHoldability(jint p1);
	jint getResultSetHoldability();
	jint getDatabaseMajorVersion();
	jint getDatabaseMinorVersion();
	jint getJDBCMajorVersion();
	jint getJDBCMinorVersion();
	jint getSQLStateType();
	jboolean locatorsUpdateCopy();
	jboolean supportsStatementPooling();
	ref<java::sql::RowIdLifetime> getRowIdLifetime();
	ref<java::sql::ResultSet> getSchemas(ref<java::lang::String> p1, ref<java::lang::String> p2);
	jboolean supportsStoredFunctionsUsingCallSyntax();
	jboolean autoCommitFailureClosesAllResultSets();
	ref<java::sql::ResultSet> getClientInfoProperties();
	ref<java::sql::ResultSet> getFunctions(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3);
	ref<java::sql::ResultSet> getFunctionColumns(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<java::lang::String> p4);

protected:

	DatabaseMetaData(handle_type h) : base_(h) {}

};

} // namespace java::sql
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/sql/Connection.h>
#include <scapix/java_api/java/sql/ResultSet.h>
#include <scapix/java_api/java/sql/RowIdLifetime.h>

namespace scapix::java_api {
namespace java::sql {

inline jshort DatabaseMetaData::attributeNoNulls() { return get_static_field<SCAPIX_META_STRING("attributeNoNulls"), jshort>(); }
inline jshort DatabaseMetaData::attributeNullable() { return get_static_field<SCAPIX_META_STRING("attributeNullable"), jshort>(); }
inline jshort DatabaseMetaData::attributeNullableUnknown() { return get_static_field<SCAPIX_META_STRING("attributeNullableUnknown"), jshort>(); }
inline jint DatabaseMetaData::bestRowNotPseudo() { return get_static_field<SCAPIX_META_STRING("bestRowNotPseudo"), jint>(); }
inline jint DatabaseMetaData::bestRowPseudo() { return get_static_field<SCAPIX_META_STRING("bestRowPseudo"), jint>(); }
inline jint DatabaseMetaData::bestRowSession() { return get_static_field<SCAPIX_META_STRING("bestRowSession"), jint>(); }
inline jint DatabaseMetaData::bestRowTemporary() { return get_static_field<SCAPIX_META_STRING("bestRowTemporary"), jint>(); }
inline jint DatabaseMetaData::bestRowTransaction() { return get_static_field<SCAPIX_META_STRING("bestRowTransaction"), jint>(); }
inline jint DatabaseMetaData::bestRowUnknown() { return get_static_field<SCAPIX_META_STRING("bestRowUnknown"), jint>(); }
inline jint DatabaseMetaData::columnNoNulls() { return get_static_field<SCAPIX_META_STRING("columnNoNulls"), jint>(); }
inline jint DatabaseMetaData::columnNullable() { return get_static_field<SCAPIX_META_STRING("columnNullable"), jint>(); }
inline jint DatabaseMetaData::columnNullableUnknown() { return get_static_field<SCAPIX_META_STRING("columnNullableUnknown"), jint>(); }
inline jint DatabaseMetaData::functionColumnIn() { return get_static_field<SCAPIX_META_STRING("functionColumnIn"), jint>(); }
inline jint DatabaseMetaData::functionColumnInOut() { return get_static_field<SCAPIX_META_STRING("functionColumnInOut"), jint>(); }
inline jint DatabaseMetaData::functionColumnOut() { return get_static_field<SCAPIX_META_STRING("functionColumnOut"), jint>(); }
inline jint DatabaseMetaData::functionColumnResult() { return get_static_field<SCAPIX_META_STRING("functionColumnResult"), jint>(); }
inline jint DatabaseMetaData::functionColumnUnknown() { return get_static_field<SCAPIX_META_STRING("functionColumnUnknown"), jint>(); }
inline jint DatabaseMetaData::functionNoNulls() { return get_static_field<SCAPIX_META_STRING("functionNoNulls"), jint>(); }
inline jint DatabaseMetaData::functionNoTable() { return get_static_field<SCAPIX_META_STRING("functionNoTable"), jint>(); }
inline jint DatabaseMetaData::functionNullable() { return get_static_field<SCAPIX_META_STRING("functionNullable"), jint>(); }
inline jint DatabaseMetaData::functionNullableUnknown() { return get_static_field<SCAPIX_META_STRING("functionNullableUnknown"), jint>(); }
inline jint DatabaseMetaData::functionResultUnknown() { return get_static_field<SCAPIX_META_STRING("functionResultUnknown"), jint>(); }
inline jint DatabaseMetaData::functionReturn() { return get_static_field<SCAPIX_META_STRING("functionReturn"), jint>(); }
inline jint DatabaseMetaData::functionReturnsTable() { return get_static_field<SCAPIX_META_STRING("functionReturnsTable"), jint>(); }
inline jint DatabaseMetaData::importedKeyCascade() { return get_static_field<SCAPIX_META_STRING("importedKeyCascade"), jint>(); }
inline jint DatabaseMetaData::importedKeyInitiallyDeferred() { return get_static_field<SCAPIX_META_STRING("importedKeyInitiallyDeferred"), jint>(); }
inline jint DatabaseMetaData::importedKeyInitiallyImmediate() { return get_static_field<SCAPIX_META_STRING("importedKeyInitiallyImmediate"), jint>(); }
inline jint DatabaseMetaData::importedKeyNoAction() { return get_static_field<SCAPIX_META_STRING("importedKeyNoAction"), jint>(); }
inline jint DatabaseMetaData::importedKeyNotDeferrable() { return get_static_field<SCAPIX_META_STRING("importedKeyNotDeferrable"), jint>(); }
inline jint DatabaseMetaData::importedKeyRestrict() { return get_static_field<SCAPIX_META_STRING("importedKeyRestrict"), jint>(); }
inline jint DatabaseMetaData::importedKeySetDefault() { return get_static_field<SCAPIX_META_STRING("importedKeySetDefault"), jint>(); }
inline jint DatabaseMetaData::importedKeySetNull() { return get_static_field<SCAPIX_META_STRING("importedKeySetNull"), jint>(); }
inline jint DatabaseMetaData::procedureColumnIn() { return get_static_field<SCAPIX_META_STRING("procedureColumnIn"), jint>(); }
inline jint DatabaseMetaData::procedureColumnInOut() { return get_static_field<SCAPIX_META_STRING("procedureColumnInOut"), jint>(); }
inline jint DatabaseMetaData::procedureColumnOut() { return get_static_field<SCAPIX_META_STRING("procedureColumnOut"), jint>(); }
inline jint DatabaseMetaData::procedureColumnResult() { return get_static_field<SCAPIX_META_STRING("procedureColumnResult"), jint>(); }
inline jint DatabaseMetaData::procedureColumnReturn() { return get_static_field<SCAPIX_META_STRING("procedureColumnReturn"), jint>(); }
inline jint DatabaseMetaData::procedureColumnUnknown() { return get_static_field<SCAPIX_META_STRING("procedureColumnUnknown"), jint>(); }
inline jint DatabaseMetaData::procedureNoNulls() { return get_static_field<SCAPIX_META_STRING("procedureNoNulls"), jint>(); }
inline jint DatabaseMetaData::procedureNoResult() { return get_static_field<SCAPIX_META_STRING("procedureNoResult"), jint>(); }
inline jint DatabaseMetaData::procedureNullable() { return get_static_field<SCAPIX_META_STRING("procedureNullable"), jint>(); }
inline jint DatabaseMetaData::procedureNullableUnknown() { return get_static_field<SCAPIX_META_STRING("procedureNullableUnknown"), jint>(); }
inline jint DatabaseMetaData::procedureResultUnknown() { return get_static_field<SCAPIX_META_STRING("procedureResultUnknown"), jint>(); }
inline jint DatabaseMetaData::procedureReturnsResult() { return get_static_field<SCAPIX_META_STRING("procedureReturnsResult"), jint>(); }
inline jint DatabaseMetaData::sqlStateSQL() { return get_static_field<SCAPIX_META_STRING("sqlStateSQL"), jint>(); }
inline jint DatabaseMetaData::sqlStateSQL99() { return get_static_field<SCAPIX_META_STRING("sqlStateSQL99"), jint>(); }
inline jint DatabaseMetaData::sqlStateXOpen() { return get_static_field<SCAPIX_META_STRING("sqlStateXOpen"), jint>(); }
inline jshort DatabaseMetaData::tableIndexClustered() { return get_static_field<SCAPIX_META_STRING("tableIndexClustered"), jshort>(); }
inline jshort DatabaseMetaData::tableIndexHashed() { return get_static_field<SCAPIX_META_STRING("tableIndexHashed"), jshort>(); }
inline jshort DatabaseMetaData::tableIndexOther() { return get_static_field<SCAPIX_META_STRING("tableIndexOther"), jshort>(); }
inline jshort DatabaseMetaData::tableIndexStatistic() { return get_static_field<SCAPIX_META_STRING("tableIndexStatistic"), jshort>(); }
inline jint DatabaseMetaData::typeNoNulls() { return get_static_field<SCAPIX_META_STRING("typeNoNulls"), jint>(); }
inline jint DatabaseMetaData::typeNullable() { return get_static_field<SCAPIX_META_STRING("typeNullable"), jint>(); }
inline jint DatabaseMetaData::typeNullableUnknown() { return get_static_field<SCAPIX_META_STRING("typeNullableUnknown"), jint>(); }
inline jint DatabaseMetaData::typePredBasic() { return get_static_field<SCAPIX_META_STRING("typePredBasic"), jint>(); }
inline jint DatabaseMetaData::typePredChar() { return get_static_field<SCAPIX_META_STRING("typePredChar"), jint>(); }
inline jint DatabaseMetaData::typePredNone() { return get_static_field<SCAPIX_META_STRING("typePredNone"), jint>(); }
inline jint DatabaseMetaData::typeSearchable() { return get_static_field<SCAPIX_META_STRING("typeSearchable"), jint>(); }
inline jint DatabaseMetaData::versionColumnNotPseudo() { return get_static_field<SCAPIX_META_STRING("versionColumnNotPseudo"), jint>(); }
inline jint DatabaseMetaData::versionColumnPseudo() { return get_static_field<SCAPIX_META_STRING("versionColumnPseudo"), jint>(); }
inline jint DatabaseMetaData::versionColumnUnknown() { return get_static_field<SCAPIX_META_STRING("versionColumnUnknown"), jint>(); }
inline jboolean DatabaseMetaData::allProceduresAreCallable() { return call_method<SCAPIX_META_STRING("allProceduresAreCallable"), jboolean>(); }
inline jboolean DatabaseMetaData::allTablesAreSelectable() { return call_method<SCAPIX_META_STRING("allTablesAreSelectable"), jboolean>(); }
inline ref<java::lang::String> DatabaseMetaData::getURL() { return call_method<SCAPIX_META_STRING("getURL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DatabaseMetaData::getUserName() { return call_method<SCAPIX_META_STRING("getUserName"), ref<java::lang::String>>(); }
inline jboolean DatabaseMetaData::isReadOnly() { return call_method<SCAPIX_META_STRING("isReadOnly"), jboolean>(); }
inline jboolean DatabaseMetaData::nullsAreSortedHigh() { return call_method<SCAPIX_META_STRING("nullsAreSortedHigh"), jboolean>(); }
inline jboolean DatabaseMetaData::nullsAreSortedLow() { return call_method<SCAPIX_META_STRING("nullsAreSortedLow"), jboolean>(); }
inline jboolean DatabaseMetaData::nullsAreSortedAtStart() { return call_method<SCAPIX_META_STRING("nullsAreSortedAtStart"), jboolean>(); }
inline jboolean DatabaseMetaData::nullsAreSortedAtEnd() { return call_method<SCAPIX_META_STRING("nullsAreSortedAtEnd"), jboolean>(); }
inline ref<java::lang::String> DatabaseMetaData::getDatabaseProductName() { return call_method<SCAPIX_META_STRING("getDatabaseProductName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DatabaseMetaData::getDatabaseProductVersion() { return call_method<SCAPIX_META_STRING("getDatabaseProductVersion"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DatabaseMetaData::getDriverName() { return call_method<SCAPIX_META_STRING("getDriverName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DatabaseMetaData::getDriverVersion() { return call_method<SCAPIX_META_STRING("getDriverVersion"), ref<java::lang::String>>(); }
inline jint DatabaseMetaData::getDriverMajorVersion() { return call_method<SCAPIX_META_STRING("getDriverMajorVersion"), jint>(); }
inline jint DatabaseMetaData::getDriverMinorVersion() { return call_method<SCAPIX_META_STRING("getDriverMinorVersion"), jint>(); }
inline jboolean DatabaseMetaData::usesLocalFiles() { return call_method<SCAPIX_META_STRING("usesLocalFiles"), jboolean>(); }
inline jboolean DatabaseMetaData::usesLocalFilePerTable() { return call_method<SCAPIX_META_STRING("usesLocalFilePerTable"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsMixedCaseIdentifiers() { return call_method<SCAPIX_META_STRING("supportsMixedCaseIdentifiers"), jboolean>(); }
inline jboolean DatabaseMetaData::storesUpperCaseIdentifiers() { return call_method<SCAPIX_META_STRING("storesUpperCaseIdentifiers"), jboolean>(); }
inline jboolean DatabaseMetaData::storesLowerCaseIdentifiers() { return call_method<SCAPIX_META_STRING("storesLowerCaseIdentifiers"), jboolean>(); }
inline jboolean DatabaseMetaData::storesMixedCaseIdentifiers() { return call_method<SCAPIX_META_STRING("storesMixedCaseIdentifiers"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsMixedCaseQuotedIdentifiers() { return call_method<SCAPIX_META_STRING("supportsMixedCaseQuotedIdentifiers"), jboolean>(); }
inline jboolean DatabaseMetaData::storesUpperCaseQuotedIdentifiers() { return call_method<SCAPIX_META_STRING("storesUpperCaseQuotedIdentifiers"), jboolean>(); }
inline jboolean DatabaseMetaData::storesLowerCaseQuotedIdentifiers() { return call_method<SCAPIX_META_STRING("storesLowerCaseQuotedIdentifiers"), jboolean>(); }
inline jboolean DatabaseMetaData::storesMixedCaseQuotedIdentifiers() { return call_method<SCAPIX_META_STRING("storesMixedCaseQuotedIdentifiers"), jboolean>(); }
inline ref<java::lang::String> DatabaseMetaData::getIdentifierQuoteString() { return call_method<SCAPIX_META_STRING("getIdentifierQuoteString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DatabaseMetaData::getSQLKeywords() { return call_method<SCAPIX_META_STRING("getSQLKeywords"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DatabaseMetaData::getNumericFunctions() { return call_method<SCAPIX_META_STRING("getNumericFunctions"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DatabaseMetaData::getStringFunctions() { return call_method<SCAPIX_META_STRING("getStringFunctions"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DatabaseMetaData::getSystemFunctions() { return call_method<SCAPIX_META_STRING("getSystemFunctions"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DatabaseMetaData::getTimeDateFunctions() { return call_method<SCAPIX_META_STRING("getTimeDateFunctions"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DatabaseMetaData::getSearchStringEscape() { return call_method<SCAPIX_META_STRING("getSearchStringEscape"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DatabaseMetaData::getExtraNameCharacters() { return call_method<SCAPIX_META_STRING("getExtraNameCharacters"), ref<java::lang::String>>(); }
inline jboolean DatabaseMetaData::supportsAlterTableWithAddColumn() { return call_method<SCAPIX_META_STRING("supportsAlterTableWithAddColumn"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsAlterTableWithDropColumn() { return call_method<SCAPIX_META_STRING("supportsAlterTableWithDropColumn"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsColumnAliasing() { return call_method<SCAPIX_META_STRING("supportsColumnAliasing"), jboolean>(); }
inline jboolean DatabaseMetaData::nullPlusNonNullIsNull() { return call_method<SCAPIX_META_STRING("nullPlusNonNullIsNull"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsConvert() { return call_method<SCAPIX_META_STRING("supportsConvert"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsConvert(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("supportsConvert"), jboolean>(p1, p2); }
inline jboolean DatabaseMetaData::supportsTableCorrelationNames() { return call_method<SCAPIX_META_STRING("supportsTableCorrelationNames"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsDifferentTableCorrelationNames() { return call_method<SCAPIX_META_STRING("supportsDifferentTableCorrelationNames"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsExpressionsInOrderBy() { return call_method<SCAPIX_META_STRING("supportsExpressionsInOrderBy"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsOrderByUnrelated() { return call_method<SCAPIX_META_STRING("supportsOrderByUnrelated"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsGroupBy() { return call_method<SCAPIX_META_STRING("supportsGroupBy"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsGroupByUnrelated() { return call_method<SCAPIX_META_STRING("supportsGroupByUnrelated"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsGroupByBeyondSelect() { return call_method<SCAPIX_META_STRING("supportsGroupByBeyondSelect"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsLikeEscapeClause() { return call_method<SCAPIX_META_STRING("supportsLikeEscapeClause"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsMultipleResultSets() { return call_method<SCAPIX_META_STRING("supportsMultipleResultSets"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsMultipleTransactions() { return call_method<SCAPIX_META_STRING("supportsMultipleTransactions"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsNonNullableColumns() { return call_method<SCAPIX_META_STRING("supportsNonNullableColumns"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsMinimumSQLGrammar() { return call_method<SCAPIX_META_STRING("supportsMinimumSQLGrammar"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsCoreSQLGrammar() { return call_method<SCAPIX_META_STRING("supportsCoreSQLGrammar"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsExtendedSQLGrammar() { return call_method<SCAPIX_META_STRING("supportsExtendedSQLGrammar"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsANSI92EntryLevelSQL() { return call_method<SCAPIX_META_STRING("supportsANSI92EntryLevelSQL"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsANSI92IntermediateSQL() { return call_method<SCAPIX_META_STRING("supportsANSI92IntermediateSQL"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsANSI92FullSQL() { return call_method<SCAPIX_META_STRING("supportsANSI92FullSQL"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsIntegrityEnhancementFacility() { return call_method<SCAPIX_META_STRING("supportsIntegrityEnhancementFacility"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsOuterJoins() { return call_method<SCAPIX_META_STRING("supportsOuterJoins"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsFullOuterJoins() { return call_method<SCAPIX_META_STRING("supportsFullOuterJoins"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsLimitedOuterJoins() { return call_method<SCAPIX_META_STRING("supportsLimitedOuterJoins"), jboolean>(); }
inline ref<java::lang::String> DatabaseMetaData::getSchemaTerm() { return call_method<SCAPIX_META_STRING("getSchemaTerm"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DatabaseMetaData::getProcedureTerm() { return call_method<SCAPIX_META_STRING("getProcedureTerm"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DatabaseMetaData::getCatalogTerm() { return call_method<SCAPIX_META_STRING("getCatalogTerm"), ref<java::lang::String>>(); }
inline jboolean DatabaseMetaData::isCatalogAtStart() { return call_method<SCAPIX_META_STRING("isCatalogAtStart"), jboolean>(); }
inline ref<java::lang::String> DatabaseMetaData::getCatalogSeparator() { return call_method<SCAPIX_META_STRING("getCatalogSeparator"), ref<java::lang::String>>(); }
inline jboolean DatabaseMetaData::supportsSchemasInDataManipulation() { return call_method<SCAPIX_META_STRING("supportsSchemasInDataManipulation"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsSchemasInProcedureCalls() { return call_method<SCAPIX_META_STRING("supportsSchemasInProcedureCalls"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsSchemasInTableDefinitions() { return call_method<SCAPIX_META_STRING("supportsSchemasInTableDefinitions"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsSchemasInIndexDefinitions() { return call_method<SCAPIX_META_STRING("supportsSchemasInIndexDefinitions"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsSchemasInPrivilegeDefinitions() { return call_method<SCAPIX_META_STRING("supportsSchemasInPrivilegeDefinitions"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsCatalogsInDataManipulation() { return call_method<SCAPIX_META_STRING("supportsCatalogsInDataManipulation"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsCatalogsInProcedureCalls() { return call_method<SCAPIX_META_STRING("supportsCatalogsInProcedureCalls"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsCatalogsInTableDefinitions() { return call_method<SCAPIX_META_STRING("supportsCatalogsInTableDefinitions"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsCatalogsInIndexDefinitions() { return call_method<SCAPIX_META_STRING("supportsCatalogsInIndexDefinitions"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsCatalogsInPrivilegeDefinitions() { return call_method<SCAPIX_META_STRING("supportsCatalogsInPrivilegeDefinitions"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsPositionedDelete() { return call_method<SCAPIX_META_STRING("supportsPositionedDelete"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsPositionedUpdate() { return call_method<SCAPIX_META_STRING("supportsPositionedUpdate"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsSelectForUpdate() { return call_method<SCAPIX_META_STRING("supportsSelectForUpdate"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsStoredProcedures() { return call_method<SCAPIX_META_STRING("supportsStoredProcedures"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsSubqueriesInComparisons() { return call_method<SCAPIX_META_STRING("supportsSubqueriesInComparisons"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsSubqueriesInExists() { return call_method<SCAPIX_META_STRING("supportsSubqueriesInExists"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsSubqueriesInIns() { return call_method<SCAPIX_META_STRING("supportsSubqueriesInIns"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsSubqueriesInQuantifieds() { return call_method<SCAPIX_META_STRING("supportsSubqueriesInQuantifieds"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsCorrelatedSubqueries() { return call_method<SCAPIX_META_STRING("supportsCorrelatedSubqueries"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsUnion() { return call_method<SCAPIX_META_STRING("supportsUnion"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsUnionAll() { return call_method<SCAPIX_META_STRING("supportsUnionAll"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsOpenCursorsAcrossCommit() { return call_method<SCAPIX_META_STRING("supportsOpenCursorsAcrossCommit"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsOpenCursorsAcrossRollback() { return call_method<SCAPIX_META_STRING("supportsOpenCursorsAcrossRollback"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsOpenStatementsAcrossCommit() { return call_method<SCAPIX_META_STRING("supportsOpenStatementsAcrossCommit"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsOpenStatementsAcrossRollback() { return call_method<SCAPIX_META_STRING("supportsOpenStatementsAcrossRollback"), jboolean>(); }
inline jint DatabaseMetaData::getMaxBinaryLiteralLength() { return call_method<SCAPIX_META_STRING("getMaxBinaryLiteralLength"), jint>(); }
inline jint DatabaseMetaData::getMaxCharLiteralLength() { return call_method<SCAPIX_META_STRING("getMaxCharLiteralLength"), jint>(); }
inline jint DatabaseMetaData::getMaxColumnNameLength() { return call_method<SCAPIX_META_STRING("getMaxColumnNameLength"), jint>(); }
inline jint DatabaseMetaData::getMaxColumnsInGroupBy() { return call_method<SCAPIX_META_STRING("getMaxColumnsInGroupBy"), jint>(); }
inline jint DatabaseMetaData::getMaxColumnsInIndex() { return call_method<SCAPIX_META_STRING("getMaxColumnsInIndex"), jint>(); }
inline jint DatabaseMetaData::getMaxColumnsInOrderBy() { return call_method<SCAPIX_META_STRING("getMaxColumnsInOrderBy"), jint>(); }
inline jint DatabaseMetaData::getMaxColumnsInSelect() { return call_method<SCAPIX_META_STRING("getMaxColumnsInSelect"), jint>(); }
inline jint DatabaseMetaData::getMaxColumnsInTable() { return call_method<SCAPIX_META_STRING("getMaxColumnsInTable"), jint>(); }
inline jint DatabaseMetaData::getMaxConnections() { return call_method<SCAPIX_META_STRING("getMaxConnections"), jint>(); }
inline jint DatabaseMetaData::getMaxCursorNameLength() { return call_method<SCAPIX_META_STRING("getMaxCursorNameLength"), jint>(); }
inline jint DatabaseMetaData::getMaxIndexLength() { return call_method<SCAPIX_META_STRING("getMaxIndexLength"), jint>(); }
inline jint DatabaseMetaData::getMaxSchemaNameLength() { return call_method<SCAPIX_META_STRING("getMaxSchemaNameLength"), jint>(); }
inline jint DatabaseMetaData::getMaxProcedureNameLength() { return call_method<SCAPIX_META_STRING("getMaxProcedureNameLength"), jint>(); }
inline jint DatabaseMetaData::getMaxCatalogNameLength() { return call_method<SCAPIX_META_STRING("getMaxCatalogNameLength"), jint>(); }
inline jint DatabaseMetaData::getMaxRowSize() { return call_method<SCAPIX_META_STRING("getMaxRowSize"), jint>(); }
inline jboolean DatabaseMetaData::doesMaxRowSizeIncludeBlobs() { return call_method<SCAPIX_META_STRING("doesMaxRowSizeIncludeBlobs"), jboolean>(); }
inline jint DatabaseMetaData::getMaxStatementLength() { return call_method<SCAPIX_META_STRING("getMaxStatementLength"), jint>(); }
inline jint DatabaseMetaData::getMaxStatements() { return call_method<SCAPIX_META_STRING("getMaxStatements"), jint>(); }
inline jint DatabaseMetaData::getMaxTableNameLength() { return call_method<SCAPIX_META_STRING("getMaxTableNameLength"), jint>(); }
inline jint DatabaseMetaData::getMaxTablesInSelect() { return call_method<SCAPIX_META_STRING("getMaxTablesInSelect"), jint>(); }
inline jint DatabaseMetaData::getMaxUserNameLength() { return call_method<SCAPIX_META_STRING("getMaxUserNameLength"), jint>(); }
inline jint DatabaseMetaData::getDefaultTransactionIsolation() { return call_method<SCAPIX_META_STRING("getDefaultTransactionIsolation"), jint>(); }
inline jboolean DatabaseMetaData::supportsTransactions() { return call_method<SCAPIX_META_STRING("supportsTransactions"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsTransactionIsolationLevel(jint p1) { return call_method<SCAPIX_META_STRING("supportsTransactionIsolationLevel"), jboolean>(p1); }
inline jboolean DatabaseMetaData::supportsDataDefinitionAndDataManipulationTransactions() { return call_method<SCAPIX_META_STRING("supportsDataDefinitionAndDataManipulationTransactions"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsDataManipulationTransactionsOnly() { return call_method<SCAPIX_META_STRING("supportsDataManipulationTransactionsOnly"), jboolean>(); }
inline jboolean DatabaseMetaData::dataDefinitionCausesTransactionCommit() { return call_method<SCAPIX_META_STRING("dataDefinitionCausesTransactionCommit"), jboolean>(); }
inline jboolean DatabaseMetaData::dataDefinitionIgnoredInTransactions() { return call_method<SCAPIX_META_STRING("dataDefinitionIgnoredInTransactions"), jboolean>(); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getProcedures(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("getProcedures"), ref<java::sql::ResultSet>>(p1, p2, p3); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getProcedureColumns(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<java::lang::String> p4) { return call_method<SCAPIX_META_STRING("getProcedureColumns"), ref<java::sql::ResultSet>>(p1, p2, p3, p4); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getTables(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<link::java::array<java::lang::String>> p4) { return call_method<SCAPIX_META_STRING("getTables"), ref<java::sql::ResultSet>>(p1, p2, p3, p4); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getSchemas() { return call_method<SCAPIX_META_STRING("getSchemas"), ref<java::sql::ResultSet>>(); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getCatalogs() { return call_method<SCAPIX_META_STRING("getCatalogs"), ref<java::sql::ResultSet>>(); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getTableTypes() { return call_method<SCAPIX_META_STRING("getTableTypes"), ref<java::sql::ResultSet>>(); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getColumns(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<java::lang::String> p4) { return call_method<SCAPIX_META_STRING("getColumns"), ref<java::sql::ResultSet>>(p1, p2, p3, p4); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getColumnPrivileges(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<java::lang::String> p4) { return call_method<SCAPIX_META_STRING("getColumnPrivileges"), ref<java::sql::ResultSet>>(p1, p2, p3, p4); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getTablePrivileges(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("getTablePrivileges"), ref<java::sql::ResultSet>>(p1, p2, p3); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getBestRowIdentifier(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, jint p4, jboolean p5) { return call_method<SCAPIX_META_STRING("getBestRowIdentifier"), ref<java::sql::ResultSet>>(p1, p2, p3, p4, p5); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getVersionColumns(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("getVersionColumns"), ref<java::sql::ResultSet>>(p1, p2, p3); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getPrimaryKeys(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("getPrimaryKeys"), ref<java::sql::ResultSet>>(p1, p2, p3); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getImportedKeys(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("getImportedKeys"), ref<java::sql::ResultSet>>(p1, p2, p3); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getExportedKeys(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("getExportedKeys"), ref<java::sql::ResultSet>>(p1, p2, p3); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getCrossReference(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<java::lang::String> p4, ref<java::lang::String> p5, ref<java::lang::String> p6) { return call_method<SCAPIX_META_STRING("getCrossReference"), ref<java::sql::ResultSet>>(p1, p2, p3, p4, p5, p6); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getTypeInfo() { return call_method<SCAPIX_META_STRING("getTypeInfo"), ref<java::sql::ResultSet>>(); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getIndexInfo(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, jboolean p4, jboolean p5) { return call_method<SCAPIX_META_STRING("getIndexInfo"), ref<java::sql::ResultSet>>(p1, p2, p3, p4, p5); }
inline jboolean DatabaseMetaData::supportsResultSetType(jint p1) { return call_method<SCAPIX_META_STRING("supportsResultSetType"), jboolean>(p1); }
inline jboolean DatabaseMetaData::supportsResultSetConcurrency(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("supportsResultSetConcurrency"), jboolean>(p1, p2); }
inline jboolean DatabaseMetaData::ownUpdatesAreVisible(jint p1) { return call_method<SCAPIX_META_STRING("ownUpdatesAreVisible"), jboolean>(p1); }
inline jboolean DatabaseMetaData::ownDeletesAreVisible(jint p1) { return call_method<SCAPIX_META_STRING("ownDeletesAreVisible"), jboolean>(p1); }
inline jboolean DatabaseMetaData::ownInsertsAreVisible(jint p1) { return call_method<SCAPIX_META_STRING("ownInsertsAreVisible"), jboolean>(p1); }
inline jboolean DatabaseMetaData::othersUpdatesAreVisible(jint p1) { return call_method<SCAPIX_META_STRING("othersUpdatesAreVisible"), jboolean>(p1); }
inline jboolean DatabaseMetaData::othersDeletesAreVisible(jint p1) { return call_method<SCAPIX_META_STRING("othersDeletesAreVisible"), jboolean>(p1); }
inline jboolean DatabaseMetaData::othersInsertsAreVisible(jint p1) { return call_method<SCAPIX_META_STRING("othersInsertsAreVisible"), jboolean>(p1); }
inline jboolean DatabaseMetaData::updatesAreDetected(jint p1) { return call_method<SCAPIX_META_STRING("updatesAreDetected"), jboolean>(p1); }
inline jboolean DatabaseMetaData::deletesAreDetected(jint p1) { return call_method<SCAPIX_META_STRING("deletesAreDetected"), jboolean>(p1); }
inline jboolean DatabaseMetaData::insertsAreDetected(jint p1) { return call_method<SCAPIX_META_STRING("insertsAreDetected"), jboolean>(p1); }
inline jboolean DatabaseMetaData::supportsBatchUpdates() { return call_method<SCAPIX_META_STRING("supportsBatchUpdates"), jboolean>(); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getUDTs(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<link::java::array<jint>> p4) { return call_method<SCAPIX_META_STRING("getUDTs"), ref<java::sql::ResultSet>>(p1, p2, p3, p4); }
inline ref<java::sql::Connection> DatabaseMetaData::getConnection() { return call_method<SCAPIX_META_STRING("getConnection"), ref<java::sql::Connection>>(); }
inline jboolean DatabaseMetaData::supportsSavepoints() { return call_method<SCAPIX_META_STRING("supportsSavepoints"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsNamedParameters() { return call_method<SCAPIX_META_STRING("supportsNamedParameters"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsMultipleOpenResults() { return call_method<SCAPIX_META_STRING("supportsMultipleOpenResults"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsGetGeneratedKeys() { return call_method<SCAPIX_META_STRING("supportsGetGeneratedKeys"), jboolean>(); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getSuperTypes(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("getSuperTypes"), ref<java::sql::ResultSet>>(p1, p2, p3); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getSuperTables(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("getSuperTables"), ref<java::sql::ResultSet>>(p1, p2, p3); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getAttributes(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<java::lang::String> p4) { return call_method<SCAPIX_META_STRING("getAttributes"), ref<java::sql::ResultSet>>(p1, p2, p3, p4); }
inline jboolean DatabaseMetaData::supportsResultSetHoldability(jint p1) { return call_method<SCAPIX_META_STRING("supportsResultSetHoldability"), jboolean>(p1); }
inline jint DatabaseMetaData::getResultSetHoldability() { return call_method<SCAPIX_META_STRING("getResultSetHoldability"), jint>(); }
inline jint DatabaseMetaData::getDatabaseMajorVersion() { return call_method<SCAPIX_META_STRING("getDatabaseMajorVersion"), jint>(); }
inline jint DatabaseMetaData::getDatabaseMinorVersion() { return call_method<SCAPIX_META_STRING("getDatabaseMinorVersion"), jint>(); }
inline jint DatabaseMetaData::getJDBCMajorVersion() { return call_method<SCAPIX_META_STRING("getJDBCMajorVersion"), jint>(); }
inline jint DatabaseMetaData::getJDBCMinorVersion() { return call_method<SCAPIX_META_STRING("getJDBCMinorVersion"), jint>(); }
inline jint DatabaseMetaData::getSQLStateType() { return call_method<SCAPIX_META_STRING("getSQLStateType"), jint>(); }
inline jboolean DatabaseMetaData::locatorsUpdateCopy() { return call_method<SCAPIX_META_STRING("locatorsUpdateCopy"), jboolean>(); }
inline jboolean DatabaseMetaData::supportsStatementPooling() { return call_method<SCAPIX_META_STRING("supportsStatementPooling"), jboolean>(); }
inline ref<java::sql::RowIdLifetime> DatabaseMetaData::getRowIdLifetime() { return call_method<SCAPIX_META_STRING("getRowIdLifetime"), ref<java::sql::RowIdLifetime>>(); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getSchemas(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("getSchemas"), ref<java::sql::ResultSet>>(p1, p2); }
inline jboolean DatabaseMetaData::supportsStoredFunctionsUsingCallSyntax() { return call_method<SCAPIX_META_STRING("supportsStoredFunctionsUsingCallSyntax"), jboolean>(); }
inline jboolean DatabaseMetaData::autoCommitFailureClosesAllResultSets() { return call_method<SCAPIX_META_STRING("autoCommitFailureClosesAllResultSets"), jboolean>(); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getClientInfoProperties() { return call_method<SCAPIX_META_STRING("getClientInfoProperties"), ref<java::sql::ResultSet>>(); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getFunctions(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("getFunctions"), ref<java::sql::ResultSet>>(p1, p2, p3); }
inline ref<java::sql::ResultSet> DatabaseMetaData::getFunctionColumns(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<java::lang::String> p4) { return call_method<SCAPIX_META_STRING("getFunctionColumns"), ref<java::sql::ResultSet>>(p1, p2, p3, p4); }

} // namespace java::sql
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_SQL_DATABASEMETADATA_H
