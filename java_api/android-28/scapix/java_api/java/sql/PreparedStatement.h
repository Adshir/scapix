// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/sql/Statement.h>

#ifndef SCAPIX_JAVA_SQL_PREPAREDSTATEMENT_H
#define SCAPIX_JAVA_SQL_PREPAREDSTATEMENT_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::io { class Reader; }
namespace java::lang { class String; }
namespace java::math { class BigDecimal; }
namespace java::net { class URL; }
namespace java::sql { class Array; }
namespace java::sql { class Blob; }
namespace java::sql { class Clob; }
namespace java::sql { class Date; }
namespace java::sql { class NClob; }
namespace java::sql { class ParameterMetaData; }
namespace java::sql { class Ref; }
namespace java::sql { class ResultSet; }
namespace java::sql { class ResultSetMetaData; }
namespace java::sql { class RowId; }
namespace java::sql { class SQLXML; }
namespace java::sql { class Time; }
namespace java::sql { class Timestamp; }
namespace java::util { class Calendar; }

namespace java::sql {

class PreparedStatement : public object_base<SCAPIX_META_STRING("java/sql/PreparedStatement"),
	java::lang::Object,
	java::sql::Statement>
{
public:

	ref<java::sql::ResultSet> executeQuery();
	jint executeUpdate();
	void setNull(jint p1, jint p2);
	void setBoolean(jint p1, jboolean p2);
	void setByte(jint p1, jbyte p2);
	void setShort(jint p1, jshort p2);
	void setInt(jint p1, jint p2);
	void setLong(jint p1, jlong p2);
	void setFloat(jint p1, jfloat p2);
	void setDouble(jint p1, jdouble p2);
	void setBigDecimal(jint p1, ref<java::math::BigDecimal> p2);
	void setString(jint p1, ref<java::lang::String> p2);
	void setBytes(jint p1, ref<link::java::array<jbyte>> p2);
	void setDate(jint p1, ref<java::sql::Date> p2);
	void setTime(jint p1, ref<java::sql::Time> p2);
	void setTimestamp(jint p1, ref<java::sql::Timestamp> p2);
	void setAsciiStream(jint p1, ref<java::io::InputStream> p2, jint p3);
	void setUnicodeStream(jint p1, ref<java::io::InputStream> p2, jint p3);
	void setBinaryStream(jint p1, ref<java::io::InputStream> p2, jint p3);
	void clearParameters();
	void setObject(jint p1, ref<java::lang::Object> p2, jint p3);
	void setObject(jint p1, ref<java::lang::Object> p2);
	jboolean execute();
	void addBatch();
	void setCharacterStream(jint p1, ref<java::io::Reader> p2, jint p3);
	void setRef(jint p1, ref<java::sql::Ref> p2);
	void setBlob(jint p1, ref<java::sql::Blob> p2);
	void setClob(jint p1, ref<java::sql::Clob> p2);
	void setArray(jint p1, ref<java::sql::Array> p2);
	ref<java::sql::ResultSetMetaData> getMetaData();
	void setDate(jint p1, ref<java::sql::Date> p2, ref<java::util::Calendar> p3);
	void setTime(jint p1, ref<java::sql::Time> p2, ref<java::util::Calendar> p3);
	void setTimestamp(jint p1, ref<java::sql::Timestamp> p2, ref<java::util::Calendar> p3);
	void setNull(jint p1, jint p2, ref<java::lang::String> p3);
	void setURL(jint p1, ref<java::net::URL> p2);
	ref<java::sql::ParameterMetaData> getParameterMetaData();
	void setRowId(jint p1, ref<java::sql::RowId> p2);
	void setNString(jint p1, ref<java::lang::String> p2);
	void setNCharacterStream(jint p1, ref<java::io::Reader> p2, jlong p3);
	void setNClob(jint p1, ref<java::sql::NClob> p2);
	void setClob(jint p1, ref<java::io::Reader> p2, jlong p3);
	void setBlob(jint p1, ref<java::io::InputStream> p2, jlong p3);
	void setNClob(jint p1, ref<java::io::Reader> p2, jlong p3);
	void setSQLXML(jint p1, ref<java::sql::SQLXML> p2);
	void setObject(jint p1, ref<java::lang::Object> p2, jint p3, jint p4);
	void setAsciiStream(jint p1, ref<java::io::InputStream> p2, jlong p3);
	void setBinaryStream(jint p1, ref<java::io::InputStream> p2, jlong p3);
	void setCharacterStream(jint p1, ref<java::io::Reader> p2, jlong p3);
	void setAsciiStream(jint p1, ref<java::io::InputStream> p2);
	void setBinaryStream(jint p1, ref<java::io::InputStream> p2);
	void setCharacterStream(jint p1, ref<java::io::Reader> p2);
	void setNCharacterStream(jint p1, ref<java::io::Reader> p2);
	void setClob(jint p1, ref<java::io::Reader> p2);
	void setBlob(jint p1, ref<java::io::InputStream> p2);
	void setNClob(jint p1, ref<java::io::Reader> p2);

protected:

	PreparedStatement(handle_type h) : base_(h) {}

};

} // namespace java::sql
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigDecimal.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/sql/Array.h>
#include <scapix/java_api/java/sql/Blob.h>
#include <scapix/java_api/java/sql/Clob.h>
#include <scapix/java_api/java/sql/Date.h>
#include <scapix/java_api/java/sql/NClob.h>
#include <scapix/java_api/java/sql/ParameterMetaData.h>
#include <scapix/java_api/java/sql/Ref.h>
#include <scapix/java_api/java/sql/ResultSet.h>
#include <scapix/java_api/java/sql/ResultSetMetaData.h>
#include <scapix/java_api/java/sql/RowId.h>
#include <scapix/java_api/java/sql/SQLXML.h>
#include <scapix/java_api/java/sql/Time.h>
#include <scapix/java_api/java/sql/Timestamp.h>
#include <scapix/java_api/java/util/Calendar.h>

namespace scapix::java_api {
namespace java::sql {

inline ref<java::sql::ResultSet> PreparedStatement::executeQuery() { return call_method<SCAPIX_META_STRING("executeQuery"), ref<java::sql::ResultSet>>(); }
inline jint PreparedStatement::executeUpdate() { return call_method<SCAPIX_META_STRING("executeUpdate"), jint>(); }
inline void PreparedStatement::setNull(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("setNull"), void>(p1, p2); }
inline void PreparedStatement::setBoolean(jint p1, jboolean p2) { return call_method<SCAPIX_META_STRING("setBoolean"), void>(p1, p2); }
inline void PreparedStatement::setByte(jint p1, jbyte p2) { return call_method<SCAPIX_META_STRING("setByte"), void>(p1, p2); }
inline void PreparedStatement::setShort(jint p1, jshort p2) { return call_method<SCAPIX_META_STRING("setShort"), void>(p1, p2); }
inline void PreparedStatement::setInt(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("setInt"), void>(p1, p2); }
inline void PreparedStatement::setLong(jint p1, jlong p2) { return call_method<SCAPIX_META_STRING("setLong"), void>(p1, p2); }
inline void PreparedStatement::setFloat(jint p1, jfloat p2) { return call_method<SCAPIX_META_STRING("setFloat"), void>(p1, p2); }
inline void PreparedStatement::setDouble(jint p1, jdouble p2) { return call_method<SCAPIX_META_STRING("setDouble"), void>(p1, p2); }
inline void PreparedStatement::setBigDecimal(jint p1, ref<java::math::BigDecimal> p2) { return call_method<SCAPIX_META_STRING("setBigDecimal"), void>(p1, p2); }
inline void PreparedStatement::setString(jint p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("setString"), void>(p1, p2); }
inline void PreparedStatement::setBytes(jint p1, ref<link::java::array<jbyte>> p2) { return call_method<SCAPIX_META_STRING("setBytes"), void>(p1, p2); }
inline void PreparedStatement::setDate(jint p1, ref<java::sql::Date> p2) { return call_method<SCAPIX_META_STRING("setDate"), void>(p1, p2); }
inline void PreparedStatement::setTime(jint p1, ref<java::sql::Time> p2) { return call_method<SCAPIX_META_STRING("setTime"), void>(p1, p2); }
inline void PreparedStatement::setTimestamp(jint p1, ref<java::sql::Timestamp> p2) { return call_method<SCAPIX_META_STRING("setTimestamp"), void>(p1, p2); }
inline void PreparedStatement::setAsciiStream(jint p1, ref<java::io::InputStream> p2, jint p3) { return call_method<SCAPIX_META_STRING("setAsciiStream"), void>(p1, p2, p3); }
inline void PreparedStatement::setUnicodeStream(jint p1, ref<java::io::InputStream> p2, jint p3) { return call_method<SCAPIX_META_STRING("setUnicodeStream"), void>(p1, p2, p3); }
inline void PreparedStatement::setBinaryStream(jint p1, ref<java::io::InputStream> p2, jint p3) { return call_method<SCAPIX_META_STRING("setBinaryStream"), void>(p1, p2, p3); }
inline void PreparedStatement::clearParameters() { return call_method<SCAPIX_META_STRING("clearParameters"), void>(); }
inline void PreparedStatement::setObject(jint p1, ref<java::lang::Object> p2, jint p3) { return call_method<SCAPIX_META_STRING("setObject"), void>(p1, p2, p3); }
inline void PreparedStatement::setObject(jint p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("setObject"), void>(p1, p2); }
inline jboolean PreparedStatement::execute() { return call_method<SCAPIX_META_STRING("execute"), jboolean>(); }
inline void PreparedStatement::addBatch() { return call_method<SCAPIX_META_STRING("addBatch"), void>(); }
inline void PreparedStatement::setCharacterStream(jint p1, ref<java::io::Reader> p2, jint p3) { return call_method<SCAPIX_META_STRING("setCharacterStream"), void>(p1, p2, p3); }
inline void PreparedStatement::setRef(jint p1, ref<java::sql::Ref> p2) { return call_method<SCAPIX_META_STRING("setRef"), void>(p1, p2); }
inline void PreparedStatement::setBlob(jint p1, ref<java::sql::Blob> p2) { return call_method<SCAPIX_META_STRING("setBlob"), void>(p1, p2); }
inline void PreparedStatement::setClob(jint p1, ref<java::sql::Clob> p2) { return call_method<SCAPIX_META_STRING("setClob"), void>(p1, p2); }
inline void PreparedStatement::setArray(jint p1, ref<java::sql::Array> p2) { return call_method<SCAPIX_META_STRING("setArray"), void>(p1, p2); }
inline ref<java::sql::ResultSetMetaData> PreparedStatement::getMetaData() { return call_method<SCAPIX_META_STRING("getMetaData"), ref<java::sql::ResultSetMetaData>>(); }
inline void PreparedStatement::setDate(jint p1, ref<java::sql::Date> p2, ref<java::util::Calendar> p3) { return call_method<SCAPIX_META_STRING("setDate"), void>(p1, p2, p3); }
inline void PreparedStatement::setTime(jint p1, ref<java::sql::Time> p2, ref<java::util::Calendar> p3) { return call_method<SCAPIX_META_STRING("setTime"), void>(p1, p2, p3); }
inline void PreparedStatement::setTimestamp(jint p1, ref<java::sql::Timestamp> p2, ref<java::util::Calendar> p3) { return call_method<SCAPIX_META_STRING("setTimestamp"), void>(p1, p2, p3); }
inline void PreparedStatement::setNull(jint p1, jint p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("setNull"), void>(p1, p2, p3); }
inline void PreparedStatement::setURL(jint p1, ref<java::net::URL> p2) { return call_method<SCAPIX_META_STRING("setURL"), void>(p1, p2); }
inline ref<java::sql::ParameterMetaData> PreparedStatement::getParameterMetaData() { return call_method<SCAPIX_META_STRING("getParameterMetaData"), ref<java::sql::ParameterMetaData>>(); }
inline void PreparedStatement::setRowId(jint p1, ref<java::sql::RowId> p2) { return call_method<SCAPIX_META_STRING("setRowId"), void>(p1, p2); }
inline void PreparedStatement::setNString(jint p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("setNString"), void>(p1, p2); }
inline void PreparedStatement::setNCharacterStream(jint p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setNCharacterStream"), void>(p1, p2, p3); }
inline void PreparedStatement::setNClob(jint p1, ref<java::sql::NClob> p2) { return call_method<SCAPIX_META_STRING("setNClob"), void>(p1, p2); }
inline void PreparedStatement::setClob(jint p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setClob"), void>(p1, p2, p3); }
inline void PreparedStatement::setBlob(jint p1, ref<java::io::InputStream> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setBlob"), void>(p1, p2, p3); }
inline void PreparedStatement::setNClob(jint p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setNClob"), void>(p1, p2, p3); }
inline void PreparedStatement::setSQLXML(jint p1, ref<java::sql::SQLXML> p2) { return call_method<SCAPIX_META_STRING("setSQLXML"), void>(p1, p2); }
inline void PreparedStatement::setObject(jint p1, ref<java::lang::Object> p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("setObject"), void>(p1, p2, p3, p4); }
inline void PreparedStatement::setAsciiStream(jint p1, ref<java::io::InputStream> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setAsciiStream"), void>(p1, p2, p3); }
inline void PreparedStatement::setBinaryStream(jint p1, ref<java::io::InputStream> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setBinaryStream"), void>(p1, p2, p3); }
inline void PreparedStatement::setCharacterStream(jint p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("setCharacterStream"), void>(p1, p2, p3); }
inline void PreparedStatement::setAsciiStream(jint p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("setAsciiStream"), void>(p1, p2); }
inline void PreparedStatement::setBinaryStream(jint p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("setBinaryStream"), void>(p1, p2); }
inline void PreparedStatement::setCharacterStream(jint p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("setCharacterStream"), void>(p1, p2); }
inline void PreparedStatement::setNCharacterStream(jint p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("setNCharacterStream"), void>(p1, p2); }
inline void PreparedStatement::setClob(jint p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("setClob"), void>(p1, p2); }
inline void PreparedStatement::setBlob(jint p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("setBlob"), void>(p1, p2); }
inline void PreparedStatement::setNClob(jint p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("setNClob"), void>(p1, p2); }

} // namespace java::sql
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_SQL_PREPAREDSTATEMENT_H
