// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/util/Date.h>

#ifndef SCAPIX_JAVA_SQL_TIMESTAMP_H
#define SCAPIX_JAVA_SQL_TIMESTAMP_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }

namespace java::sql {

class Timestamp : public object_base<SCAPIX_META_STRING("java/sql/Timestamp"),
	java::util::Date>
{
public:

	static ref<Timestamp> new_object(jint year, jint month, jint date, jint hour, jint minute, jint second, jint nano);
	static ref<Timestamp> new_object(jlong time);
	void setTime(jlong time);
	jlong getTime();
	static ref<java::sql::Timestamp> valueOf(ref<java::lang::String> s);
	ref<java::lang::String> toString();
	jint getNanos();
	void setNanos(jint n);
	jboolean equals(ref<java::sql::Timestamp> ts);
	jboolean equals(ref<java::lang::Object> ts);
	jboolean before(ref<java::sql::Timestamp> ts);
	jboolean after(ref<java::sql::Timestamp> ts);
	jint compareTo(ref<java::sql::Timestamp> ts);
	jint compareTo(ref<java::util::Date> o);
	jint hashCode();

protected:

	Timestamp(handle_type h) : base_(h) {}

};

} // namespace java::sql
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::sql {

inline ref<Timestamp> Timestamp::new_object(jint year, jint month, jint date, jint hour, jint minute, jint second, jint nano) { return base_::new_object(year, month, date, hour, minute, second, nano); }
inline ref<Timestamp> Timestamp::new_object(jlong time) { return base_::new_object(time); }
inline void Timestamp::setTime(jlong time) { return call_method<SCAPIX_META_STRING("setTime"), void>(time); }
inline jlong Timestamp::getTime() { return call_method<SCAPIX_META_STRING("getTime"), jlong>(); }
inline ref<java::sql::Timestamp> Timestamp::valueOf(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::sql::Timestamp>>(s); }
inline ref<java::lang::String> Timestamp::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint Timestamp::getNanos() { return call_method<SCAPIX_META_STRING("getNanos"), jint>(); }
inline void Timestamp::setNanos(jint n) { return call_method<SCAPIX_META_STRING("setNanos"), void>(n); }
inline jboolean Timestamp::equals(ref<java::sql::Timestamp> ts) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(ts); }
inline jboolean Timestamp::equals(ref<java::lang::Object> ts) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(ts); }
inline jboolean Timestamp::before(ref<java::sql::Timestamp> ts) { return call_method<SCAPIX_META_STRING("before"), jboolean>(ts); }
inline jboolean Timestamp::after(ref<java::sql::Timestamp> ts) { return call_method<SCAPIX_META_STRING("after"), jboolean>(ts); }
inline jint Timestamp::compareTo(ref<java::sql::Timestamp> ts) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(ts); }
inline jint Timestamp::compareTo(ref<java::util::Date> o) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(o); }
inline jint Timestamp::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }

} // namespace java::sql
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_SQL_TIMESTAMP_H
