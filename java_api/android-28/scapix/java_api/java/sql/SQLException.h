// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Exception.h>
#include <scapix/java_api/java/lang/Iterable.h>

#ifndef SCAPIX_JAVA_SQL_SQLEXCEPTION_H
#define SCAPIX_JAVA_SQL_SQLEXCEPTION_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::lang { class Throwable; }
namespace java::util { class Iterator; }

namespace java::sql {

class SQLException : public object_base<SCAPIX_META_STRING("java/sql/SQLException"),
	java::lang::Exception,
	java::lang::Iterable>
{
public:

	static ref<SQLException> new_object(ref<java::lang::String> reason, ref<java::lang::String> SQLState, jint vendorCode);
	static ref<SQLException> new_object(ref<java::lang::String> reason, ref<java::lang::String> SQLState);
	static ref<SQLException> new_object(ref<java::lang::String> reason);
	static ref<SQLException> new_object();
	static ref<SQLException> new_object(ref<java::lang::Throwable> cause);
	static ref<SQLException> new_object(ref<java::lang::String> reason, ref<java::lang::Throwable> cause);
	static ref<SQLException> new_object(ref<java::lang::String> reason, ref<java::lang::String> sqlState, ref<java::lang::Throwable> cause);
	static ref<SQLException> new_object(ref<java::lang::String> reason, ref<java::lang::String> sqlState, jint vendorCode, ref<java::lang::Throwable> cause);
	ref<java::lang::String> getSQLState();
	jint getErrorCode();
	ref<java::sql::SQLException> getNextException();
	void setNextException(ref<java::sql::SQLException> ex);
	ref<java::util::Iterator> iterator();

protected:

	SQLException(handle_type h) : base_(h) {}

};

} // namespace java::sql
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/util/Iterator.h>

namespace scapix::java_api {
namespace java::sql {

inline ref<SQLException> SQLException::new_object(ref<java::lang::String> reason, ref<java::lang::String> SQLState, jint vendorCode) { return base_::new_object(reason, SQLState, vendorCode); }
inline ref<SQLException> SQLException::new_object(ref<java::lang::String> reason, ref<java::lang::String> SQLState) { return base_::new_object(reason, SQLState); }
inline ref<SQLException> SQLException::new_object(ref<java::lang::String> reason) { return base_::new_object(reason); }
inline ref<SQLException> SQLException::new_object() { return base_::new_object(); }
inline ref<SQLException> SQLException::new_object(ref<java::lang::Throwable> cause) { return base_::new_object(cause); }
inline ref<SQLException> SQLException::new_object(ref<java::lang::String> reason, ref<java::lang::Throwable> cause) { return base_::new_object(reason, cause); }
inline ref<SQLException> SQLException::new_object(ref<java::lang::String> reason, ref<java::lang::String> sqlState, ref<java::lang::Throwable> cause) { return base_::new_object(reason, sqlState, cause); }
inline ref<SQLException> SQLException::new_object(ref<java::lang::String> reason, ref<java::lang::String> sqlState, jint vendorCode, ref<java::lang::Throwable> cause) { return base_::new_object(reason, sqlState, vendorCode, cause); }
inline ref<java::lang::String> SQLException::getSQLState() { return call_method<SCAPIX_META_STRING("getSQLState"), ref<java::lang::String>>(); }
inline jint SQLException::getErrorCode() { return call_method<SCAPIX_META_STRING("getErrorCode"), jint>(); }
inline ref<java::sql::SQLException> SQLException::getNextException() { return call_method<SCAPIX_META_STRING("getNextException"), ref<java::sql::SQLException>>(); }
inline void SQLException::setNextException(ref<java::sql::SQLException> ex) { return call_method<SCAPIX_META_STRING("setNextException"), void>(ex); }
inline ref<java::util::Iterator> SQLException::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::Iterator>>(); }

} // namespace java::sql
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_SQL_SQLEXCEPTION_H
