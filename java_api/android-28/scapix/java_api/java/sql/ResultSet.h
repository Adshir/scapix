// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/sql/Wrapper.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_SQL_RESULTSET_H
#define SCAPIX_JAVA_SQL_RESULTSET_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::io { class Reader; }
namespace java::lang { class String; }
namespace java::math { class BigDecimal; }
namespace java::net { class URL; }
namespace java::sql { class Array; }
namespace java::sql { class Blob; }
namespace java::sql { class Clob; }
namespace java::sql { class Date; }
namespace java::sql { class NClob; }
namespace java::sql { class Ref; }
namespace java::sql { class ResultSetMetaData; }
namespace java::sql { class RowId; }
namespace java::sql { class SQLWarning; }
namespace java::sql { class SQLXML; }
namespace java::sql { class Statement; }
namespace java::sql { class Time; }
namespace java::sql { class Timestamp; }
namespace java::util { class Calendar; }
namespace java::util { class Map; }

namespace java::sql {

class ResultSet : public object_base<SCAPIX_META_STRING("java/sql/ResultSet"),
	java::lang::Object,
	java::sql::Wrapper,
	java::lang::AutoCloseable>
{
public:

	static jint CLOSE_CURSORS_AT_COMMIT_();
	static jint CONCUR_READ_ONLY_();
	static jint CONCUR_UPDATABLE_();
	static jint FETCH_FORWARD_();
	static jint FETCH_REVERSE_();
	static jint FETCH_UNKNOWN_();
	static jint HOLD_CURSORS_OVER_COMMIT_();
	static jint TYPE_FORWARD_ONLY_();
	static jint TYPE_SCROLL_INSENSITIVE_();
	static jint TYPE_SCROLL_SENSITIVE_();

	jboolean next();
	void close();
	jboolean wasNull();
	ref<java::lang::String> getString(jint p1);
	jboolean getBoolean(jint p1);
	jbyte getByte(jint p1);
	jshort getShort(jint p1);
	jint getInt(jint p1);
	jlong getLong(jint p1);
	jfloat getFloat(jint p1);
	jdouble getDouble(jint p1);
	ref<java::math::BigDecimal> getBigDecimal(jint p1, jint p2);
	ref<link::java::array<jbyte>> getBytes(jint p1);
	ref<java::sql::Date> getDate(jint p1);
	ref<java::sql::Time> getTime(jint p1);
	ref<java::sql::Timestamp> getTimestamp(jint p1);
	ref<java::io::InputStream> getAsciiStream(jint p1);
	ref<java::io::InputStream> getUnicodeStream(jint p1);
	ref<java::io::InputStream> getBinaryStream(jint p1);
	ref<java::lang::String> getString(ref<java::lang::String> p1);
	jboolean getBoolean(ref<java::lang::String> p1);
	jbyte getByte(ref<java::lang::String> p1);
	jshort getShort(ref<java::lang::String> p1);
	jint getInt(ref<java::lang::String> p1);
	jlong getLong(ref<java::lang::String> p1);
	jfloat getFloat(ref<java::lang::String> p1);
	jdouble getDouble(ref<java::lang::String> p1);
	ref<java::math::BigDecimal> getBigDecimal(ref<java::lang::String> p1, jint p2);
	ref<link::java::array<jbyte>> getBytes(ref<java::lang::String> p1);
	ref<java::sql::Date> getDate(ref<java::lang::String> p1);
	ref<java::sql::Time> getTime(ref<java::lang::String> p1);
	ref<java::sql::Timestamp> getTimestamp(ref<java::lang::String> p1);
	ref<java::io::InputStream> getAsciiStream(ref<java::lang::String> p1);
	ref<java::io::InputStream> getUnicodeStream(ref<java::lang::String> p1);
	ref<java::io::InputStream> getBinaryStream(ref<java::lang::String> p1);
	ref<java::sql::SQLWarning> getWarnings();
	void clearWarnings();
	ref<java::lang::String> getCursorName();
	ref<java::sql::ResultSetMetaData> getMetaData();
	ref<java::lang::Object> getObject(jint p1);
	ref<java::lang::Object> getObject(ref<java::lang::String> p1);
	jint findColumn(ref<java::lang::String> p1);
	ref<java::io::Reader> getCharacterStream(jint p1);
	ref<java::io::Reader> getCharacterStream(ref<java::lang::String> p1);
	ref<java::math::BigDecimal> getBigDecimal(jint p1);
	ref<java::math::BigDecimal> getBigDecimal(ref<java::lang::String> p1);
	jboolean isBeforeFirst();
	jboolean isAfterLast();
	jboolean isFirst();
	jboolean isLast();
	void beforeFirst();
	void afterLast();
	jboolean first();
	jboolean last();
	jint getRow();
	jboolean absolute(jint p1);
	jboolean relative(jint p1);
	jboolean previous();
	void setFetchDirection(jint p1);
	jint getFetchDirection();
	void setFetchSize(jint p1);
	jint getFetchSize();
	jint getType();
	jint getConcurrency();
	jboolean rowUpdated();
	jboolean rowInserted();
	jboolean rowDeleted();
	void updateNull(jint p1);
	void updateBoolean(jint p1, jboolean p2);
	void updateByte(jint p1, jbyte p2);
	void updateShort(jint p1, jshort p2);
	void updateInt(jint p1, jint p2);
	void updateLong(jint p1, jlong p2);
	void updateFloat(jint p1, jfloat p2);
	void updateDouble(jint p1, jdouble p2);
	void updateBigDecimal(jint p1, ref<java::math::BigDecimal> p2);
	void updateString(jint p1, ref<java::lang::String> p2);
	void updateBytes(jint p1, ref<link::java::array<jbyte>> p2);
	void updateDate(jint p1, ref<java::sql::Date> p2);
	void updateTime(jint p1, ref<java::sql::Time> p2);
	void updateTimestamp(jint p1, ref<java::sql::Timestamp> p2);
	void updateAsciiStream(jint p1, ref<java::io::InputStream> p2, jint p3);
	void updateBinaryStream(jint p1, ref<java::io::InputStream> p2, jint p3);
	void updateCharacterStream(jint p1, ref<java::io::Reader> p2, jint p3);
	void updateObject(jint p1, ref<java::lang::Object> p2, jint p3);
	void updateObject(jint p1, ref<java::lang::Object> p2);
	void updateNull(ref<java::lang::String> p1);
	void updateBoolean(ref<java::lang::String> p1, jboolean p2);
	void updateByte(ref<java::lang::String> p1, jbyte p2);
	void updateShort(ref<java::lang::String> p1, jshort p2);
	void updateInt(ref<java::lang::String> p1, jint p2);
	void updateLong(ref<java::lang::String> p1, jlong p2);
	void updateFloat(ref<java::lang::String> p1, jfloat p2);
	void updateDouble(ref<java::lang::String> p1, jdouble p2);
	void updateBigDecimal(ref<java::lang::String> p1, ref<java::math::BigDecimal> p2);
	void updateString(ref<java::lang::String> p1, ref<java::lang::String> p2);
	void updateBytes(ref<java::lang::String> p1, ref<link::java::array<jbyte>> p2);
	void updateDate(ref<java::lang::String> p1, ref<java::sql::Date> p2);
	void updateTime(ref<java::lang::String> p1, ref<java::sql::Time> p2);
	void updateTimestamp(ref<java::lang::String> p1, ref<java::sql::Timestamp> p2);
	void updateAsciiStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jint p3);
	void updateBinaryStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jint p3);
	void updateCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2, jint p3);
	void updateObject(ref<java::lang::String> p1, ref<java::lang::Object> p2, jint p3);
	void updateObject(ref<java::lang::String> p1, ref<java::lang::Object> p2);
	void insertRow();
	void updateRow();
	void deleteRow();
	void refreshRow();
	void cancelRowUpdates();
	void moveToInsertRow();
	void moveToCurrentRow();
	ref<java::sql::Statement> getStatement();
	ref<java::lang::Object> getObject(jint p1, ref<java::util::Map> p2);
	ref<java::sql::Ref> getRef(jint p1);
	ref<java::sql::Blob> getBlob(jint p1);
	ref<java::sql::Clob> getClob(jint p1);
	ref<java::sql::Array> getArray(jint p1);
	ref<java::lang::Object> getObject(ref<java::lang::String> p1, ref<java::util::Map> p2);
	ref<java::sql::Ref> getRef(ref<java::lang::String> p1);
	ref<java::sql::Blob> getBlob(ref<java::lang::String> p1);
	ref<java::sql::Clob> getClob(ref<java::lang::String> p1);
	ref<java::sql::Array> getArray(ref<java::lang::String> p1);
	ref<java::sql::Date> getDate(jint p1, ref<java::util::Calendar> p2);
	ref<java::sql::Date> getDate(ref<java::lang::String> p1, ref<java::util::Calendar> p2);
	ref<java::sql::Time> getTime(jint p1, ref<java::util::Calendar> p2);
	ref<java::sql::Time> getTime(ref<java::lang::String> p1, ref<java::util::Calendar> p2);
	ref<java::sql::Timestamp> getTimestamp(jint p1, ref<java::util::Calendar> p2);
	ref<java::sql::Timestamp> getTimestamp(ref<java::lang::String> p1, ref<java::util::Calendar> p2);
	ref<java::net::URL> getURL(jint p1);
	ref<java::net::URL> getURL(ref<java::lang::String> p1);
	void updateRef(jint p1, ref<java::sql::Ref> p2);
	void updateRef(ref<java::lang::String> p1, ref<java::sql::Ref> p2);
	void updateBlob(jint p1, ref<java::sql::Blob> p2);
	void updateBlob(ref<java::lang::String> p1, ref<java::sql::Blob> p2);
	void updateClob(jint p1, ref<java::sql::Clob> p2);
	void updateClob(ref<java::lang::String> p1, ref<java::sql::Clob> p2);
	void updateArray(jint p1, ref<java::sql::Array> p2);
	void updateArray(ref<java::lang::String> p1, ref<java::sql::Array> p2);
	ref<java::sql::RowId> getRowId(jint p1);
	ref<java::sql::RowId> getRowId(ref<java::lang::String> p1);
	void updateRowId(jint p1, ref<java::sql::RowId> p2);
	void updateRowId(ref<java::lang::String> p1, ref<java::sql::RowId> p2);
	jint getHoldability();
	jboolean isClosed();
	void updateNString(jint p1, ref<java::lang::String> p2);
	void updateNString(ref<java::lang::String> p1, ref<java::lang::String> p2);
	void updateNClob(jint p1, ref<java::sql::NClob> p2);
	void updateNClob(ref<java::lang::String> p1, ref<java::sql::NClob> p2);
	ref<java::sql::NClob> getNClob(jint p1);
	ref<java::sql::NClob> getNClob(ref<java::lang::String> p1);
	ref<java::sql::SQLXML> getSQLXML(jint p1);
	ref<java::sql::SQLXML> getSQLXML(ref<java::lang::String> p1);
	void updateSQLXML(jint p1, ref<java::sql::SQLXML> p2);
	void updateSQLXML(ref<java::lang::String> p1, ref<java::sql::SQLXML> p2);
	ref<java::lang::String> getNString(jint p1);
	ref<java::lang::String> getNString(ref<java::lang::String> p1);
	ref<java::io::Reader> getNCharacterStream(jint p1);
	ref<java::io::Reader> getNCharacterStream(ref<java::lang::String> p1);
	void updateNCharacterStream(jint p1, ref<java::io::Reader> p2, jlong p3);
	void updateNCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3);
	void updateAsciiStream(jint p1, ref<java::io::InputStream> p2, jlong p3);
	void updateBinaryStream(jint p1, ref<java::io::InputStream> p2, jlong p3);
	void updateCharacterStream(jint p1, ref<java::io::Reader> p2, jlong p3);
	void updateAsciiStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jlong p3);
	void updateBinaryStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jlong p3);
	void updateCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3);
	void updateBlob(jint p1, ref<java::io::InputStream> p2, jlong p3);
	void updateBlob(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jlong p3);
	void updateClob(jint p1, ref<java::io::Reader> p2, jlong p3);
	void updateClob(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3);
	void updateNClob(jint p1, ref<java::io::Reader> p2, jlong p3);
	void updateNClob(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3);
	void updateNCharacterStream(jint p1, ref<java::io::Reader> p2);
	void updateNCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2);
	void updateAsciiStream(jint p1, ref<java::io::InputStream> p2);
	void updateBinaryStream(jint p1, ref<java::io::InputStream> p2);
	void updateCharacterStream(jint p1, ref<java::io::Reader> p2);
	void updateAsciiStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2);
	void updateBinaryStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2);
	void updateCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2);
	void updateBlob(jint p1, ref<java::io::InputStream> p2);
	void updateBlob(ref<java::lang::String> p1, ref<java::io::InputStream> p2);
	void updateClob(jint p1, ref<java::io::Reader> p2);
	void updateClob(ref<java::lang::String> p1, ref<java::io::Reader> p2);
	void updateNClob(jint p1, ref<java::io::Reader> p2);
	void updateNClob(ref<java::lang::String> p1, ref<java::io::Reader> p2);

protected:

	ResultSet(handle_type h) : base_(h) {}

};

} // namespace java::sql
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigDecimal.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/sql/Array.h>
#include <scapix/java_api/java/sql/Blob.h>
#include <scapix/java_api/java/sql/Clob.h>
#include <scapix/java_api/java/sql/Date.h>
#include <scapix/java_api/java/sql/NClob.h>
#include <scapix/java_api/java/sql/Ref.h>
#include <scapix/java_api/java/sql/ResultSetMetaData.h>
#include <scapix/java_api/java/sql/RowId.h>
#include <scapix/java_api/java/sql/SQLWarning.h>
#include <scapix/java_api/java/sql/SQLXML.h>
#include <scapix/java_api/java/sql/Statement.h>
#include <scapix/java_api/java/sql/Time.h>
#include <scapix/java_api/java/sql/Timestamp.h>
#include <scapix/java_api/java/util/Calendar.h>
#include <scapix/java_api/java/util/Map.h>

namespace scapix::java_api {
namespace java::sql {

inline jint ResultSet::CLOSE_CURSORS_AT_COMMIT_() { return get_static_field<SCAPIX_META_STRING("CLOSE_CURSORS_AT_COMMIT"), jint>(); }
inline jint ResultSet::CONCUR_READ_ONLY_() { return get_static_field<SCAPIX_META_STRING("CONCUR_READ_ONLY"), jint>(); }
inline jint ResultSet::CONCUR_UPDATABLE_() { return get_static_field<SCAPIX_META_STRING("CONCUR_UPDATABLE"), jint>(); }
inline jint ResultSet::FETCH_FORWARD_() { return get_static_field<SCAPIX_META_STRING("FETCH_FORWARD"), jint>(); }
inline jint ResultSet::FETCH_REVERSE_() { return get_static_field<SCAPIX_META_STRING("FETCH_REVERSE"), jint>(); }
inline jint ResultSet::FETCH_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("FETCH_UNKNOWN"), jint>(); }
inline jint ResultSet::HOLD_CURSORS_OVER_COMMIT_() { return get_static_field<SCAPIX_META_STRING("HOLD_CURSORS_OVER_COMMIT"), jint>(); }
inline jint ResultSet::TYPE_FORWARD_ONLY_() { return get_static_field<SCAPIX_META_STRING("TYPE_FORWARD_ONLY"), jint>(); }
inline jint ResultSet::TYPE_SCROLL_INSENSITIVE_() { return get_static_field<SCAPIX_META_STRING("TYPE_SCROLL_INSENSITIVE"), jint>(); }
inline jint ResultSet::TYPE_SCROLL_SENSITIVE_() { return get_static_field<SCAPIX_META_STRING("TYPE_SCROLL_SENSITIVE"), jint>(); }
inline jboolean ResultSet::next() { return call_method<SCAPIX_META_STRING("next"), jboolean>(); }
inline void ResultSet::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jboolean ResultSet::wasNull() { return call_method<SCAPIX_META_STRING("wasNull"), jboolean>(); }
inline ref<java::lang::String> ResultSet::getString(jint p1) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(p1); }
inline jboolean ResultSet::getBoolean(jint p1) { return call_method<SCAPIX_META_STRING("getBoolean"), jboolean>(p1); }
inline jbyte ResultSet::getByte(jint p1) { return call_method<SCAPIX_META_STRING("getByte"), jbyte>(p1); }
inline jshort ResultSet::getShort(jint p1) { return call_method<SCAPIX_META_STRING("getShort"), jshort>(p1); }
inline jint ResultSet::getInt(jint p1) { return call_method<SCAPIX_META_STRING("getInt"), jint>(p1); }
inline jlong ResultSet::getLong(jint p1) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(p1); }
inline jfloat ResultSet::getFloat(jint p1) { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(p1); }
inline jdouble ResultSet::getDouble(jint p1) { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(p1); }
inline ref<java::math::BigDecimal> ResultSet::getBigDecimal(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("getBigDecimal"), ref<java::math::BigDecimal>>(p1, p2); }
inline ref<link::java::array<jbyte>> ResultSet::getBytes(jint p1) { return call_method<SCAPIX_META_STRING("getBytes"), ref<link::java::array<jbyte>>>(p1); }
inline ref<java::sql::Date> ResultSet::getDate(jint p1) { return call_method<SCAPIX_META_STRING("getDate"), ref<java::sql::Date>>(p1); }
inline ref<java::sql::Time> ResultSet::getTime(jint p1) { return call_method<SCAPIX_META_STRING("getTime"), ref<java::sql::Time>>(p1); }
inline ref<java::sql::Timestamp> ResultSet::getTimestamp(jint p1) { return call_method<SCAPIX_META_STRING("getTimestamp"), ref<java::sql::Timestamp>>(p1); }
inline ref<java::io::InputStream> ResultSet::getAsciiStream(jint p1) { return call_method<SCAPIX_META_STRING("getAsciiStream"), ref<java::io::InputStream>>(p1); }
inline ref<java::io::InputStream> ResultSet::getUnicodeStream(jint p1) { return call_method<SCAPIX_META_STRING("getUnicodeStream"), ref<java::io::InputStream>>(p1); }
inline ref<java::io::InputStream> ResultSet::getBinaryStream(jint p1) { return call_method<SCAPIX_META_STRING("getBinaryStream"), ref<java::io::InputStream>>(p1); }
inline ref<java::lang::String> ResultSet::getString(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(p1); }
inline jboolean ResultSet::getBoolean(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getBoolean"), jboolean>(p1); }
inline jbyte ResultSet::getByte(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getByte"), jbyte>(p1); }
inline jshort ResultSet::getShort(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getShort"), jshort>(p1); }
inline jint ResultSet::getInt(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getInt"), jint>(p1); }
inline jlong ResultSet::getLong(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(p1); }
inline jfloat ResultSet::getFloat(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(p1); }
inline jdouble ResultSet::getDouble(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(p1); }
inline ref<java::math::BigDecimal> ResultSet::getBigDecimal(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("getBigDecimal"), ref<java::math::BigDecimal>>(p1, p2); }
inline ref<link::java::array<jbyte>> ResultSet::getBytes(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getBytes"), ref<link::java::array<jbyte>>>(p1); }
inline ref<java::sql::Date> ResultSet::getDate(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getDate"), ref<java::sql::Date>>(p1); }
inline ref<java::sql::Time> ResultSet::getTime(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getTime"), ref<java::sql::Time>>(p1); }
inline ref<java::sql::Timestamp> ResultSet::getTimestamp(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getTimestamp"), ref<java::sql::Timestamp>>(p1); }
inline ref<java::io::InputStream> ResultSet::getAsciiStream(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getAsciiStream"), ref<java::io::InputStream>>(p1); }
inline ref<java::io::InputStream> ResultSet::getUnicodeStream(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getUnicodeStream"), ref<java::io::InputStream>>(p1); }
inline ref<java::io::InputStream> ResultSet::getBinaryStream(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getBinaryStream"), ref<java::io::InputStream>>(p1); }
inline ref<java::sql::SQLWarning> ResultSet::getWarnings() { return call_method<SCAPIX_META_STRING("getWarnings"), ref<java::sql::SQLWarning>>(); }
inline void ResultSet::clearWarnings() { return call_method<SCAPIX_META_STRING("clearWarnings"), void>(); }
inline ref<java::lang::String> ResultSet::getCursorName() { return call_method<SCAPIX_META_STRING("getCursorName"), ref<java::lang::String>>(); }
inline ref<java::sql::ResultSetMetaData> ResultSet::getMetaData() { return call_method<SCAPIX_META_STRING("getMetaData"), ref<java::sql::ResultSetMetaData>>(); }
inline ref<java::lang::Object> ResultSet::getObject(jint p1) { return call_method<SCAPIX_META_STRING("getObject"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> ResultSet::getObject(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getObject"), ref<java::lang::Object>>(p1); }
inline jint ResultSet::findColumn(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("findColumn"), jint>(p1); }
inline ref<java::io::Reader> ResultSet::getCharacterStream(jint p1) { return call_method<SCAPIX_META_STRING("getCharacterStream"), ref<java::io::Reader>>(p1); }
inline ref<java::io::Reader> ResultSet::getCharacterStream(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getCharacterStream"), ref<java::io::Reader>>(p1); }
inline ref<java::math::BigDecimal> ResultSet::getBigDecimal(jint p1) { return call_method<SCAPIX_META_STRING("getBigDecimal"), ref<java::math::BigDecimal>>(p1); }
inline ref<java::math::BigDecimal> ResultSet::getBigDecimal(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getBigDecimal"), ref<java::math::BigDecimal>>(p1); }
inline jboolean ResultSet::isBeforeFirst() { return call_method<SCAPIX_META_STRING("isBeforeFirst"), jboolean>(); }
inline jboolean ResultSet::isAfterLast() { return call_method<SCAPIX_META_STRING("isAfterLast"), jboolean>(); }
inline jboolean ResultSet::isFirst() { return call_method<SCAPIX_META_STRING("isFirst"), jboolean>(); }
inline jboolean ResultSet::isLast() { return call_method<SCAPIX_META_STRING("isLast"), jboolean>(); }
inline void ResultSet::beforeFirst() { return call_method<SCAPIX_META_STRING("beforeFirst"), void>(); }
inline void ResultSet::afterLast() { return call_method<SCAPIX_META_STRING("afterLast"), void>(); }
inline jboolean ResultSet::first() { return call_method<SCAPIX_META_STRING("first"), jboolean>(); }
inline jboolean ResultSet::last() { return call_method<SCAPIX_META_STRING("last"), jboolean>(); }
inline jint ResultSet::getRow() { return call_method<SCAPIX_META_STRING("getRow"), jint>(); }
inline jboolean ResultSet::absolute(jint p1) { return call_method<SCAPIX_META_STRING("absolute"), jboolean>(p1); }
inline jboolean ResultSet::relative(jint p1) { return call_method<SCAPIX_META_STRING("relative"), jboolean>(p1); }
inline jboolean ResultSet::previous() { return call_method<SCAPIX_META_STRING("previous"), jboolean>(); }
inline void ResultSet::setFetchDirection(jint p1) { return call_method<SCAPIX_META_STRING("setFetchDirection"), void>(p1); }
inline jint ResultSet::getFetchDirection() { return call_method<SCAPIX_META_STRING("getFetchDirection"), jint>(); }
inline void ResultSet::setFetchSize(jint p1) { return call_method<SCAPIX_META_STRING("setFetchSize"), void>(p1); }
inline jint ResultSet::getFetchSize() { return call_method<SCAPIX_META_STRING("getFetchSize"), jint>(); }
inline jint ResultSet::getType() { return call_method<SCAPIX_META_STRING("getType"), jint>(); }
inline jint ResultSet::getConcurrency() { return call_method<SCAPIX_META_STRING("getConcurrency"), jint>(); }
inline jboolean ResultSet::rowUpdated() { return call_method<SCAPIX_META_STRING("rowUpdated"), jboolean>(); }
inline jboolean ResultSet::rowInserted() { return call_method<SCAPIX_META_STRING("rowInserted"), jboolean>(); }
inline jboolean ResultSet::rowDeleted() { return call_method<SCAPIX_META_STRING("rowDeleted"), jboolean>(); }
inline void ResultSet::updateNull(jint p1) { return call_method<SCAPIX_META_STRING("updateNull"), void>(p1); }
inline void ResultSet::updateBoolean(jint p1, jboolean p2) { return call_method<SCAPIX_META_STRING("updateBoolean"), void>(p1, p2); }
inline void ResultSet::updateByte(jint p1, jbyte p2) { return call_method<SCAPIX_META_STRING("updateByte"), void>(p1, p2); }
inline void ResultSet::updateShort(jint p1, jshort p2) { return call_method<SCAPIX_META_STRING("updateShort"), void>(p1, p2); }
inline void ResultSet::updateInt(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("updateInt"), void>(p1, p2); }
inline void ResultSet::updateLong(jint p1, jlong p2) { return call_method<SCAPIX_META_STRING("updateLong"), void>(p1, p2); }
inline void ResultSet::updateFloat(jint p1, jfloat p2) { return call_method<SCAPIX_META_STRING("updateFloat"), void>(p1, p2); }
inline void ResultSet::updateDouble(jint p1, jdouble p2) { return call_method<SCAPIX_META_STRING("updateDouble"), void>(p1, p2); }
inline void ResultSet::updateBigDecimal(jint p1, ref<java::math::BigDecimal> p2) { return call_method<SCAPIX_META_STRING("updateBigDecimal"), void>(p1, p2); }
inline void ResultSet::updateString(jint p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("updateString"), void>(p1, p2); }
inline void ResultSet::updateBytes(jint p1, ref<link::java::array<jbyte>> p2) { return call_method<SCAPIX_META_STRING("updateBytes"), void>(p1, p2); }
inline void ResultSet::updateDate(jint p1, ref<java::sql::Date> p2) { return call_method<SCAPIX_META_STRING("updateDate"), void>(p1, p2); }
inline void ResultSet::updateTime(jint p1, ref<java::sql::Time> p2) { return call_method<SCAPIX_META_STRING("updateTime"), void>(p1, p2); }
inline void ResultSet::updateTimestamp(jint p1, ref<java::sql::Timestamp> p2) { return call_method<SCAPIX_META_STRING("updateTimestamp"), void>(p1, p2); }
inline void ResultSet::updateAsciiStream(jint p1, ref<java::io::InputStream> p2, jint p3) { return call_method<SCAPIX_META_STRING("updateAsciiStream"), void>(p1, p2, p3); }
inline void ResultSet::updateBinaryStream(jint p1, ref<java::io::InputStream> p2, jint p3) { return call_method<SCAPIX_META_STRING("updateBinaryStream"), void>(p1, p2, p3); }
inline void ResultSet::updateCharacterStream(jint p1, ref<java::io::Reader> p2, jint p3) { return call_method<SCAPIX_META_STRING("updateCharacterStream"), void>(p1, p2, p3); }
inline void ResultSet::updateObject(jint p1, ref<java::lang::Object> p2, jint p3) { return call_method<SCAPIX_META_STRING("updateObject"), void>(p1, p2, p3); }
inline void ResultSet::updateObject(jint p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("updateObject"), void>(p1, p2); }
inline void ResultSet::updateNull(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("updateNull"), void>(p1); }
inline void ResultSet::updateBoolean(ref<java::lang::String> p1, jboolean p2) { return call_method<SCAPIX_META_STRING("updateBoolean"), void>(p1, p2); }
inline void ResultSet::updateByte(ref<java::lang::String> p1, jbyte p2) { return call_method<SCAPIX_META_STRING("updateByte"), void>(p1, p2); }
inline void ResultSet::updateShort(ref<java::lang::String> p1, jshort p2) { return call_method<SCAPIX_META_STRING("updateShort"), void>(p1, p2); }
inline void ResultSet::updateInt(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("updateInt"), void>(p1, p2); }
inline void ResultSet::updateLong(ref<java::lang::String> p1, jlong p2) { return call_method<SCAPIX_META_STRING("updateLong"), void>(p1, p2); }
inline void ResultSet::updateFloat(ref<java::lang::String> p1, jfloat p2) { return call_method<SCAPIX_META_STRING("updateFloat"), void>(p1, p2); }
inline void ResultSet::updateDouble(ref<java::lang::String> p1, jdouble p2) { return call_method<SCAPIX_META_STRING("updateDouble"), void>(p1, p2); }
inline void ResultSet::updateBigDecimal(ref<java::lang::String> p1, ref<java::math::BigDecimal> p2) { return call_method<SCAPIX_META_STRING("updateBigDecimal"), void>(p1, p2); }
inline void ResultSet::updateString(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("updateString"), void>(p1, p2); }
inline void ResultSet::updateBytes(ref<java::lang::String> p1, ref<link::java::array<jbyte>> p2) { return call_method<SCAPIX_META_STRING("updateBytes"), void>(p1, p2); }
inline void ResultSet::updateDate(ref<java::lang::String> p1, ref<java::sql::Date> p2) { return call_method<SCAPIX_META_STRING("updateDate"), void>(p1, p2); }
inline void ResultSet::updateTime(ref<java::lang::String> p1, ref<java::sql::Time> p2) { return call_method<SCAPIX_META_STRING("updateTime"), void>(p1, p2); }
inline void ResultSet::updateTimestamp(ref<java::lang::String> p1, ref<java::sql::Timestamp> p2) { return call_method<SCAPIX_META_STRING("updateTimestamp"), void>(p1, p2); }
inline void ResultSet::updateAsciiStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jint p3) { return call_method<SCAPIX_META_STRING("updateAsciiStream"), void>(p1, p2, p3); }
inline void ResultSet::updateBinaryStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jint p3) { return call_method<SCAPIX_META_STRING("updateBinaryStream"), void>(p1, p2, p3); }
inline void ResultSet::updateCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2, jint p3) { return call_method<SCAPIX_META_STRING("updateCharacterStream"), void>(p1, p2, p3); }
inline void ResultSet::updateObject(ref<java::lang::String> p1, ref<java::lang::Object> p2, jint p3) { return call_method<SCAPIX_META_STRING("updateObject"), void>(p1, p2, p3); }
inline void ResultSet::updateObject(ref<java::lang::String> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("updateObject"), void>(p1, p2); }
inline void ResultSet::insertRow() { return call_method<SCAPIX_META_STRING("insertRow"), void>(); }
inline void ResultSet::updateRow() { return call_method<SCAPIX_META_STRING("updateRow"), void>(); }
inline void ResultSet::deleteRow() { return call_method<SCAPIX_META_STRING("deleteRow"), void>(); }
inline void ResultSet::refreshRow() { return call_method<SCAPIX_META_STRING("refreshRow"), void>(); }
inline void ResultSet::cancelRowUpdates() { return call_method<SCAPIX_META_STRING("cancelRowUpdates"), void>(); }
inline void ResultSet::moveToInsertRow() { return call_method<SCAPIX_META_STRING("moveToInsertRow"), void>(); }
inline void ResultSet::moveToCurrentRow() { return call_method<SCAPIX_META_STRING("moveToCurrentRow"), void>(); }
inline ref<java::sql::Statement> ResultSet::getStatement() { return call_method<SCAPIX_META_STRING("getStatement"), ref<java::sql::Statement>>(); }
inline ref<java::lang::Object> ResultSet::getObject(jint p1, ref<java::util::Map> p2) { return call_method<SCAPIX_META_STRING("getObject"), ref<java::lang::Object>>(p1, p2); }
inline ref<java::sql::Ref> ResultSet::getRef(jint p1) { return call_method<SCAPIX_META_STRING("getRef"), ref<java::sql::Ref>>(p1); }
inline ref<java::sql::Blob> ResultSet::getBlob(jint p1) { return call_method<SCAPIX_META_STRING("getBlob"), ref<java::sql::Blob>>(p1); }
inline ref<java::sql::Clob> ResultSet::getClob(jint p1) { return call_method<SCAPIX_META_STRING("getClob"), ref<java::sql::Clob>>(p1); }
inline ref<java::sql::Array> ResultSet::getArray(jint p1) { return call_method<SCAPIX_META_STRING("getArray"), ref<java::sql::Array>>(p1); }
inline ref<java::lang::Object> ResultSet::getObject(ref<java::lang::String> p1, ref<java::util::Map> p2) { return call_method<SCAPIX_META_STRING("getObject"), ref<java::lang::Object>>(p1, p2); }
inline ref<java::sql::Ref> ResultSet::getRef(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getRef"), ref<java::sql::Ref>>(p1); }
inline ref<java::sql::Blob> ResultSet::getBlob(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getBlob"), ref<java::sql::Blob>>(p1); }
inline ref<java::sql::Clob> ResultSet::getClob(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getClob"), ref<java::sql::Clob>>(p1); }
inline ref<java::sql::Array> ResultSet::getArray(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getArray"), ref<java::sql::Array>>(p1); }
inline ref<java::sql::Date> ResultSet::getDate(jint p1, ref<java::util::Calendar> p2) { return call_method<SCAPIX_META_STRING("getDate"), ref<java::sql::Date>>(p1, p2); }
inline ref<java::sql::Date> ResultSet::getDate(ref<java::lang::String> p1, ref<java::util::Calendar> p2) { return call_method<SCAPIX_META_STRING("getDate"), ref<java::sql::Date>>(p1, p2); }
inline ref<java::sql::Time> ResultSet::getTime(jint p1, ref<java::util::Calendar> p2) { return call_method<SCAPIX_META_STRING("getTime"), ref<java::sql::Time>>(p1, p2); }
inline ref<java::sql::Time> ResultSet::getTime(ref<java::lang::String> p1, ref<java::util::Calendar> p2) { return call_method<SCAPIX_META_STRING("getTime"), ref<java::sql::Time>>(p1, p2); }
inline ref<java::sql::Timestamp> ResultSet::getTimestamp(jint p1, ref<java::util::Calendar> p2) { return call_method<SCAPIX_META_STRING("getTimestamp"), ref<java::sql::Timestamp>>(p1, p2); }
inline ref<java::sql::Timestamp> ResultSet::getTimestamp(ref<java::lang::String> p1, ref<java::util::Calendar> p2) { return call_method<SCAPIX_META_STRING("getTimestamp"), ref<java::sql::Timestamp>>(p1, p2); }
inline ref<java::net::URL> ResultSet::getURL(jint p1) { return call_method<SCAPIX_META_STRING("getURL"), ref<java::net::URL>>(p1); }
inline ref<java::net::URL> ResultSet::getURL(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getURL"), ref<java::net::URL>>(p1); }
inline void ResultSet::updateRef(jint p1, ref<java::sql::Ref> p2) { return call_method<SCAPIX_META_STRING("updateRef"), void>(p1, p2); }
inline void ResultSet::updateRef(ref<java::lang::String> p1, ref<java::sql::Ref> p2) { return call_method<SCAPIX_META_STRING("updateRef"), void>(p1, p2); }
inline void ResultSet::updateBlob(jint p1, ref<java::sql::Blob> p2) { return call_method<SCAPIX_META_STRING("updateBlob"), void>(p1, p2); }
inline void ResultSet::updateBlob(ref<java::lang::String> p1, ref<java::sql::Blob> p2) { return call_method<SCAPIX_META_STRING("updateBlob"), void>(p1, p2); }
inline void ResultSet::updateClob(jint p1, ref<java::sql::Clob> p2) { return call_method<SCAPIX_META_STRING("updateClob"), void>(p1, p2); }
inline void ResultSet::updateClob(ref<java::lang::String> p1, ref<java::sql::Clob> p2) { return call_method<SCAPIX_META_STRING("updateClob"), void>(p1, p2); }
inline void ResultSet::updateArray(jint p1, ref<java::sql::Array> p2) { return call_method<SCAPIX_META_STRING("updateArray"), void>(p1, p2); }
inline void ResultSet::updateArray(ref<java::lang::String> p1, ref<java::sql::Array> p2) { return call_method<SCAPIX_META_STRING("updateArray"), void>(p1, p2); }
inline ref<java::sql::RowId> ResultSet::getRowId(jint p1) { return call_method<SCAPIX_META_STRING("getRowId"), ref<java::sql::RowId>>(p1); }
inline ref<java::sql::RowId> ResultSet::getRowId(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getRowId"), ref<java::sql::RowId>>(p1); }
inline void ResultSet::updateRowId(jint p1, ref<java::sql::RowId> p2) { return call_method<SCAPIX_META_STRING("updateRowId"), void>(p1, p2); }
inline void ResultSet::updateRowId(ref<java::lang::String> p1, ref<java::sql::RowId> p2) { return call_method<SCAPIX_META_STRING("updateRowId"), void>(p1, p2); }
inline jint ResultSet::getHoldability() { return call_method<SCAPIX_META_STRING("getHoldability"), jint>(); }
inline jboolean ResultSet::isClosed() { return call_method<SCAPIX_META_STRING("isClosed"), jboolean>(); }
inline void ResultSet::updateNString(jint p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("updateNString"), void>(p1, p2); }
inline void ResultSet::updateNString(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("updateNString"), void>(p1, p2); }
inline void ResultSet::updateNClob(jint p1, ref<java::sql::NClob> p2) { return call_method<SCAPIX_META_STRING("updateNClob"), void>(p1, p2); }
inline void ResultSet::updateNClob(ref<java::lang::String> p1, ref<java::sql::NClob> p2) { return call_method<SCAPIX_META_STRING("updateNClob"), void>(p1, p2); }
inline ref<java::sql::NClob> ResultSet::getNClob(jint p1) { return call_method<SCAPIX_META_STRING("getNClob"), ref<java::sql::NClob>>(p1); }
inline ref<java::sql::NClob> ResultSet::getNClob(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getNClob"), ref<java::sql::NClob>>(p1); }
inline ref<java::sql::SQLXML> ResultSet::getSQLXML(jint p1) { return call_method<SCAPIX_META_STRING("getSQLXML"), ref<java::sql::SQLXML>>(p1); }
inline ref<java::sql::SQLXML> ResultSet::getSQLXML(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getSQLXML"), ref<java::sql::SQLXML>>(p1); }
inline void ResultSet::updateSQLXML(jint p1, ref<java::sql::SQLXML> p2) { return call_method<SCAPIX_META_STRING("updateSQLXML"), void>(p1, p2); }
inline void ResultSet::updateSQLXML(ref<java::lang::String> p1, ref<java::sql::SQLXML> p2) { return call_method<SCAPIX_META_STRING("updateSQLXML"), void>(p1, p2); }
inline ref<java::lang::String> ResultSet::getNString(jint p1) { return call_method<SCAPIX_META_STRING("getNString"), ref<java::lang::String>>(p1); }
inline ref<java::lang::String> ResultSet::getNString(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getNString"), ref<java::lang::String>>(p1); }
inline ref<java::io::Reader> ResultSet::getNCharacterStream(jint p1) { return call_method<SCAPIX_META_STRING("getNCharacterStream"), ref<java::io::Reader>>(p1); }
inline ref<java::io::Reader> ResultSet::getNCharacterStream(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getNCharacterStream"), ref<java::io::Reader>>(p1); }
inline void ResultSet::updateNCharacterStream(jint p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("updateNCharacterStream"), void>(p1, p2, p3); }
inline void ResultSet::updateNCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("updateNCharacterStream"), void>(p1, p2, p3); }
inline void ResultSet::updateAsciiStream(jint p1, ref<java::io::InputStream> p2, jlong p3) { return call_method<SCAPIX_META_STRING("updateAsciiStream"), void>(p1, p2, p3); }
inline void ResultSet::updateBinaryStream(jint p1, ref<java::io::InputStream> p2, jlong p3) { return call_method<SCAPIX_META_STRING("updateBinaryStream"), void>(p1, p2, p3); }
inline void ResultSet::updateCharacterStream(jint p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("updateCharacterStream"), void>(p1, p2, p3); }
inline void ResultSet::updateAsciiStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jlong p3) { return call_method<SCAPIX_META_STRING("updateAsciiStream"), void>(p1, p2, p3); }
inline void ResultSet::updateBinaryStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jlong p3) { return call_method<SCAPIX_META_STRING("updateBinaryStream"), void>(p1, p2, p3); }
inline void ResultSet::updateCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("updateCharacterStream"), void>(p1, p2, p3); }
inline void ResultSet::updateBlob(jint p1, ref<java::io::InputStream> p2, jlong p3) { return call_method<SCAPIX_META_STRING("updateBlob"), void>(p1, p2, p3); }
inline void ResultSet::updateBlob(ref<java::lang::String> p1, ref<java::io::InputStream> p2, jlong p3) { return call_method<SCAPIX_META_STRING("updateBlob"), void>(p1, p2, p3); }
inline void ResultSet::updateClob(jint p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("updateClob"), void>(p1, p2, p3); }
inline void ResultSet::updateClob(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("updateClob"), void>(p1, p2, p3); }
inline void ResultSet::updateNClob(jint p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("updateNClob"), void>(p1, p2, p3); }
inline void ResultSet::updateNClob(ref<java::lang::String> p1, ref<java::io::Reader> p2, jlong p3) { return call_method<SCAPIX_META_STRING("updateNClob"), void>(p1, p2, p3); }
inline void ResultSet::updateNCharacterStream(jint p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("updateNCharacterStream"), void>(p1, p2); }
inline void ResultSet::updateNCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("updateNCharacterStream"), void>(p1, p2); }
inline void ResultSet::updateAsciiStream(jint p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("updateAsciiStream"), void>(p1, p2); }
inline void ResultSet::updateBinaryStream(jint p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("updateBinaryStream"), void>(p1, p2); }
inline void ResultSet::updateCharacterStream(jint p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("updateCharacterStream"), void>(p1, p2); }
inline void ResultSet::updateAsciiStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("updateAsciiStream"), void>(p1, p2); }
inline void ResultSet::updateBinaryStream(ref<java::lang::String> p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("updateBinaryStream"), void>(p1, p2); }
inline void ResultSet::updateCharacterStream(ref<java::lang::String> p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("updateCharacterStream"), void>(p1, p2); }
inline void ResultSet::updateBlob(jint p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("updateBlob"), void>(p1, p2); }
inline void ResultSet::updateBlob(ref<java::lang::String> p1, ref<java::io::InputStream> p2) { return call_method<SCAPIX_META_STRING("updateBlob"), void>(p1, p2); }
inline void ResultSet::updateClob(jint p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("updateClob"), void>(p1, p2); }
inline void ResultSet::updateClob(ref<java::lang::String> p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("updateClob"), void>(p1, p2); }
inline void ResultSet::updateNClob(jint p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("updateNClob"), void>(p1, p2); }
inline void ResultSet::updateNClob(ref<java::lang::String> p1, ref<java::io::Reader> p2) { return call_method<SCAPIX_META_STRING("updateNClob"), void>(p1, p2); }

} // namespace java::sql
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_SQL_RESULTSET_H
