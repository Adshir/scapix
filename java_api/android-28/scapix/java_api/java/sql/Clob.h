// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_SQL_CLOB_H
#define SCAPIX_JAVA_SQL_CLOB_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::io { class OutputStream; }
namespace java::io { class Reader; }
namespace java::io { class Writer; }
namespace java::lang { class String; }

namespace java::sql {

class Clob : public object_base<SCAPIX_META_STRING("java/sql/Clob"),
	java::lang::Object>
{
public:

	jlong length();
	ref<java::lang::String> getSubString(jlong p1, jint p2);
	ref<java::io::Reader> getCharacterStream();
	ref<java::io::InputStream> getAsciiStream();
	jlong position(ref<java::lang::String> p1, jlong p2);
	jlong position(ref<java::sql::Clob> p1, jlong p2);
	jint setString(jlong p1, ref<java::lang::String> p2);
	jint setString(jlong p1, ref<java::lang::String> p2, jint p3, jint p4);
	ref<java::io::OutputStream> setAsciiStream(jlong p1);
	ref<java::io::Writer> setCharacterStream(jlong p1);
	void truncate(jlong p1);
	void free();
	ref<java::io::Reader> getCharacterStream(jlong p1, jlong p2);

protected:

	Clob(handle_type h) : base_(h) {}

};

} // namespace java::sql
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::sql {

inline jlong Clob::length() { return call_method<SCAPIX_META_STRING("length"), jlong>(); }
inline ref<java::lang::String> Clob::getSubString(jlong p1, jint p2) { return call_method<SCAPIX_META_STRING("getSubString"), ref<java::lang::String>>(p1, p2); }
inline ref<java::io::Reader> Clob::getCharacterStream() { return call_method<SCAPIX_META_STRING("getCharacterStream"), ref<java::io::Reader>>(); }
inline ref<java::io::InputStream> Clob::getAsciiStream() { return call_method<SCAPIX_META_STRING("getAsciiStream"), ref<java::io::InputStream>>(); }
inline jlong Clob::position(ref<java::lang::String> p1, jlong p2) { return call_method<SCAPIX_META_STRING("position"), jlong>(p1, p2); }
inline jlong Clob::position(ref<java::sql::Clob> p1, jlong p2) { return call_method<SCAPIX_META_STRING("position"), jlong>(p1, p2); }
inline jint Clob::setString(jlong p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("setString"), jint>(p1, p2); }
inline jint Clob::setString(jlong p1, ref<java::lang::String> p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("setString"), jint>(p1, p2, p3, p4); }
inline ref<java::io::OutputStream> Clob::setAsciiStream(jlong p1) { return call_method<SCAPIX_META_STRING("setAsciiStream"), ref<java::io::OutputStream>>(p1); }
inline ref<java::io::Writer> Clob::setCharacterStream(jlong p1) { return call_method<SCAPIX_META_STRING("setCharacterStream"), ref<java::io::Writer>>(p1); }
inline void Clob::truncate(jlong p1) { return call_method<SCAPIX_META_STRING("truncate"), void>(p1); }
inline void Clob::free() { return call_method<SCAPIX_META_STRING("free"), void>(); }
inline ref<java::io::Reader> Clob::getCharacterStream(jlong p1, jlong p2) { return call_method<SCAPIX_META_STRING("getCharacterStream"), ref<java::io::Reader>>(p1, p2); }

} // namespace java::sql
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_SQL_CLOB_H
