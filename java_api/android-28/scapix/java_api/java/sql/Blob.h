// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_SQL_BLOB_H
#define SCAPIX_JAVA_SQL_BLOB_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::io { class OutputStream; }

namespace java::sql {

class Blob : public object_base<SCAPIX_META_STRING("java/sql/Blob"),
	java::lang::Object>
{
public:

	jlong length();
	ref<link::java::array<jbyte>> getBytes(jlong p1, jint p2);
	ref<java::io::InputStream> getBinaryStream();
	jlong position(ref<link::java::array<jbyte>> p1, jlong p2);
	jlong position(ref<java::sql::Blob> p1, jlong p2);
	jint setBytes(jlong p1, ref<link::java::array<jbyte>> p2);
	jint setBytes(jlong p1, ref<link::java::array<jbyte>> p2, jint p3, jint p4);
	ref<java::io::OutputStream> setBinaryStream(jlong p1);
	void truncate(jlong p1);
	void free();
	ref<java::io::InputStream> getBinaryStream(jlong p1, jlong p2);

protected:

	Blob(handle_type h) : base_(h) {}

};

} // namespace java::sql
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>

namespace scapix::java_api {
namespace java::sql {

inline jlong Blob::length() { return call_method<SCAPIX_META_STRING("length"), jlong>(); }
inline ref<link::java::array<jbyte>> Blob::getBytes(jlong p1, jint p2) { return call_method<SCAPIX_META_STRING("getBytes"), ref<link::java::array<jbyte>>>(p1, p2); }
inline ref<java::io::InputStream> Blob::getBinaryStream() { return call_method<SCAPIX_META_STRING("getBinaryStream"), ref<java::io::InputStream>>(); }
inline jlong Blob::position(ref<link::java::array<jbyte>> p1, jlong p2) { return call_method<SCAPIX_META_STRING("position"), jlong>(p1, p2); }
inline jlong Blob::position(ref<java::sql::Blob> p1, jlong p2) { return call_method<SCAPIX_META_STRING("position"), jlong>(p1, p2); }
inline jint Blob::setBytes(jlong p1, ref<link::java::array<jbyte>> p2) { return call_method<SCAPIX_META_STRING("setBytes"), jint>(p1, p2); }
inline jint Blob::setBytes(jlong p1, ref<link::java::array<jbyte>> p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("setBytes"), jint>(p1, p2, p3, p4); }
inline ref<java::io::OutputStream> Blob::setBinaryStream(jlong p1) { return call_method<SCAPIX_META_STRING("setBinaryStream"), ref<java::io::OutputStream>>(p1); }
inline void Blob::truncate(jlong p1) { return call_method<SCAPIX_META_STRING("truncate"), void>(p1); }
inline void Blob::free() { return call_method<SCAPIX_META_STRING("free"), void>(); }
inline ref<java::io::InputStream> Blob::getBinaryStream(jlong p1, jlong p2) { return call_method<SCAPIX_META_STRING("getBinaryStream"), ref<java::io::InputStream>>(p1, p2); }

} // namespace java::sql
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_SQL_BLOB_H
