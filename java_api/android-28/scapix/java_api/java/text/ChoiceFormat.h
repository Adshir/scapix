// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/text/NumberFormat.h>

#ifndef SCAPIX_JAVA_TEXT_CHOICEFORMAT_H
#define SCAPIX_JAVA_TEXT_CHOICEFORMAT_H

namespace scapix::java_api {

namespace java::lang { class Number; }
namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::lang { class StringBuffer; }
namespace java::text { class FieldPosition; }
namespace java::text { class ParsePosition; }

namespace java::text {

class ChoiceFormat : public object_base<SCAPIX_META_STRING("java/text/ChoiceFormat"),
	java::text::NumberFormat>
{
public:

	static ref<ChoiceFormat> new_object(ref<java::lang::String> newPattern);
	static ref<ChoiceFormat> new_object(ref<link::java::array<jdouble>> limits, ref<link::java::array<java::lang::String>> formats);
	void applyPattern(ref<java::lang::String> newPattern);
	ref<java::lang::String> toPattern();
	void setChoices(ref<link::java::array<jdouble>> limits, ref<link::java::array<java::lang::String>> formats);
	ref<link::java::array<jdouble>> getLimits();
	ref<link::java::array<java::lang::Object>> getFormats();
	ref<java::lang::StringBuffer> format(jlong number, ref<java::lang::StringBuffer> p2, ref<java::text::FieldPosition> toAppendTo);
	ref<java::lang::StringBuffer> format(jdouble number, ref<java::lang::StringBuffer> p2, ref<java::text::FieldPosition> toAppendTo);
	ref<java::lang::Number> parse(ref<java::lang::String> text, ref<java::text::ParsePosition> status);
	static jdouble nextDouble(jdouble d);
	static jdouble previousDouble(jdouble d);
	ref<java::lang::Object> clone();
	jint hashCode();
	jboolean equals(ref<java::lang::Object> obj);
	static jdouble nextDouble(jdouble d, jboolean p2);

protected:

	ChoiceFormat(handle_type h) : base_(h) {}

};

} // namespace java::text
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/text/FieldPosition.h>
#include <scapix/java_api/java/text/ParsePosition.h>

namespace scapix::java_api {
namespace java::text {

inline ref<ChoiceFormat> ChoiceFormat::new_object(ref<java::lang::String> newPattern) { return base_::new_object(newPattern); }
inline ref<ChoiceFormat> ChoiceFormat::new_object(ref<link::java::array<jdouble>> limits, ref<link::java::array<java::lang::String>> formats) { return base_::new_object(limits, formats); }
inline void ChoiceFormat::applyPattern(ref<java::lang::String> newPattern) { return call_method<SCAPIX_META_STRING("applyPattern"), void>(newPattern); }
inline ref<java::lang::String> ChoiceFormat::toPattern() { return call_method<SCAPIX_META_STRING("toPattern"), ref<java::lang::String>>(); }
inline void ChoiceFormat::setChoices(ref<link::java::array<jdouble>> limits, ref<link::java::array<java::lang::String>> formats) { return call_method<SCAPIX_META_STRING("setChoices"), void>(limits, formats); }
inline ref<link::java::array<jdouble>> ChoiceFormat::getLimits() { return call_method<SCAPIX_META_STRING("getLimits"), ref<link::java::array<jdouble>>>(); }
inline ref<link::java::array<java::lang::Object>> ChoiceFormat::getFormats() { return call_method<SCAPIX_META_STRING("getFormats"), ref<link::java::array<java::lang::Object>>>(); }
inline ref<java::lang::StringBuffer> ChoiceFormat::format(jlong number, ref<java::lang::StringBuffer> p2, ref<java::text::FieldPosition> toAppendTo) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::StringBuffer>>(number, p2, toAppendTo); }
inline ref<java::lang::StringBuffer> ChoiceFormat::format(jdouble number, ref<java::lang::StringBuffer> p2, ref<java::text::FieldPosition> toAppendTo) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::StringBuffer>>(number, p2, toAppendTo); }
inline ref<java::lang::Number> ChoiceFormat::parse(ref<java::lang::String> text, ref<java::text::ParsePosition> status) { return call_method<SCAPIX_META_STRING("parse"), ref<java::lang::Number>>(text, status); }
inline jdouble ChoiceFormat::nextDouble(jdouble d) { return call_static_method<SCAPIX_META_STRING("nextDouble"), jdouble>(d); }
inline jdouble ChoiceFormat::previousDouble(jdouble d) { return call_static_method<SCAPIX_META_STRING("previousDouble"), jdouble>(d); }
inline ref<java::lang::Object> ChoiceFormat::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline jint ChoiceFormat::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean ChoiceFormat::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jdouble ChoiceFormat::nextDouble(jdouble d, jboolean p2) { return call_static_method<SCAPIX_META_STRING("nextDouble"), jdouble>(d, p2); }

} // namespace java::text
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TEXT_CHOICEFORMAT_H
