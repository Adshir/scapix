// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Comparator.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_TEXT_COLLATOR_H
#define SCAPIX_JAVA_TEXT_COLLATOR_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::text { class CollationKey; }
namespace java::util { class Locale; }

namespace java::text {

class Collator : public object_base<SCAPIX_META_STRING("java/text/Collator"),
	java::lang::Object,
	java::util::Comparator,
	java::lang::Cloneable>
{
public:

	static jint CANONICAL_DECOMPOSITION_();
	static jint FULL_DECOMPOSITION_();
	static jint IDENTICAL_();
	static jint NO_DECOMPOSITION_();
	static jint PRIMARY_();
	static jint SECONDARY_();
	static jint TERTIARY_();

	static ref<java::text::Collator> getInstance();
	static ref<java::text::Collator> getInstance(ref<java::util::Locale> desiredLocale);
	jint compare(ref<java::lang::String> p1, ref<java::lang::String> p2);
	jint compare(ref<java::lang::Object> o1, ref<java::lang::Object> o2);
	ref<java::text::CollationKey> getCollationKey(ref<java::lang::String> p1);
	jboolean equals(ref<java::lang::String> source, ref<java::lang::String> target);
	jint getStrength();
	void setStrength(jint newStrength);
	jint getDecomposition();
	void setDecomposition(jint decompositionMode);
	static ref<link::java::array<java::util::Locale>> getAvailableLocales();
	ref<java::lang::Object> clone();
	jboolean equals(ref<java::lang::Object> that);
	jint hashCode();

protected:

	Collator(handle_type h) : base_(h) {}

};

} // namespace java::text
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/CollationKey.h>
#include <scapix/java_api/java/util/Locale.h>

namespace scapix::java_api {
namespace java::text {

inline jint Collator::CANONICAL_DECOMPOSITION_() { return get_static_field<SCAPIX_META_STRING("CANONICAL_DECOMPOSITION"), jint>(); }
inline jint Collator::FULL_DECOMPOSITION_() { return get_static_field<SCAPIX_META_STRING("FULL_DECOMPOSITION"), jint>(); }
inline jint Collator::IDENTICAL_() { return get_static_field<SCAPIX_META_STRING("IDENTICAL"), jint>(); }
inline jint Collator::NO_DECOMPOSITION_() { return get_static_field<SCAPIX_META_STRING("NO_DECOMPOSITION"), jint>(); }
inline jint Collator::PRIMARY_() { return get_static_field<SCAPIX_META_STRING("PRIMARY"), jint>(); }
inline jint Collator::SECONDARY_() { return get_static_field<SCAPIX_META_STRING("SECONDARY"), jint>(); }
inline jint Collator::TERTIARY_() { return get_static_field<SCAPIX_META_STRING("TERTIARY"), jint>(); }
inline ref<java::text::Collator> Collator::getInstance() { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<java::text::Collator>>(); }
inline ref<java::text::Collator> Collator::getInstance(ref<java::util::Locale> desiredLocale) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<java::text::Collator>>(desiredLocale); }
inline jint Collator::compare(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("compare"), jint>(p1, p2); }
inline jint Collator::compare(ref<java::lang::Object> o1, ref<java::lang::Object> o2) { return call_method<SCAPIX_META_STRING("compare"), jint>(o1, o2); }
inline ref<java::text::CollationKey> Collator::getCollationKey(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getCollationKey"), ref<java::text::CollationKey>>(p1); }
inline jboolean Collator::equals(ref<java::lang::String> source, ref<java::lang::String> target) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(source, target); }
inline jint Collator::getStrength() { return call_method<SCAPIX_META_STRING("getStrength"), jint>(); }
inline void Collator::setStrength(jint newStrength) { return call_method<SCAPIX_META_STRING("setStrength"), void>(newStrength); }
inline jint Collator::getDecomposition() { return call_method<SCAPIX_META_STRING("getDecomposition"), jint>(); }
inline void Collator::setDecomposition(jint decompositionMode) { return call_method<SCAPIX_META_STRING("setDecomposition"), void>(decompositionMode); }
inline ref<link::java::array<java::util::Locale>> Collator::getAvailableLocales() { return call_static_method<SCAPIX_META_STRING("getAvailableLocales"), ref<link::java::array<java::util::Locale>>>(); }
inline ref<java::lang::Object> Collator::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline jboolean Collator::equals(ref<java::lang::Object> that) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(that); }
inline jint Collator::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }

} // namespace java::text
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TEXT_COLLATOR_H
