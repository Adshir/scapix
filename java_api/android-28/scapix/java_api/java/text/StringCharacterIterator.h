// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/text/CharacterIterator.h>

#ifndef SCAPIX_JAVA_TEXT_STRINGCHARACTERITERATOR_H
#define SCAPIX_JAVA_TEXT_STRINGCHARACTERITERATOR_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace java::text {

class StringCharacterIterator : public object_base<SCAPIX_META_STRING("java/text/StringCharacterIterator"),
	java::lang::Object,
	java::text::CharacterIterator>
{
public:

	static ref<StringCharacterIterator> new_object(ref<java::lang::String> text);
	static ref<StringCharacterIterator> new_object(ref<java::lang::String> text, jint pos);
	static ref<StringCharacterIterator> new_object(ref<java::lang::String> text, jint begin, jint end, jint pos);
	void setText(ref<java::lang::String> text);
	jchar first();
	jchar last();
	jchar setIndex(jint p);
	jchar current();
	jchar next();
	jchar previous();
	jint getBeginIndex();
	jint getEndIndex();
	jint getIndex();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::Object> clone();

protected:

	StringCharacterIterator(handle_type h) : base_(h) {}

};

} // namespace java::text
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::text {

inline ref<StringCharacterIterator> StringCharacterIterator::new_object(ref<java::lang::String> text) { return base_::new_object(text); }
inline ref<StringCharacterIterator> StringCharacterIterator::new_object(ref<java::lang::String> text, jint pos) { return base_::new_object(text, pos); }
inline ref<StringCharacterIterator> StringCharacterIterator::new_object(ref<java::lang::String> text, jint begin, jint end, jint pos) { return base_::new_object(text, begin, end, pos); }
inline void StringCharacterIterator::setText(ref<java::lang::String> text) { return call_method<SCAPIX_META_STRING("setText"), void>(text); }
inline jchar StringCharacterIterator::first() { return call_method<SCAPIX_META_STRING("first"), jchar>(); }
inline jchar StringCharacterIterator::last() { return call_method<SCAPIX_META_STRING("last"), jchar>(); }
inline jchar StringCharacterIterator::setIndex(jint p) { return call_method<SCAPIX_META_STRING("setIndex"), jchar>(p); }
inline jchar StringCharacterIterator::current() { return call_method<SCAPIX_META_STRING("current"), jchar>(); }
inline jchar StringCharacterIterator::next() { return call_method<SCAPIX_META_STRING("next"), jchar>(); }
inline jchar StringCharacterIterator::previous() { return call_method<SCAPIX_META_STRING("previous"), jchar>(); }
inline jint StringCharacterIterator::getBeginIndex() { return call_method<SCAPIX_META_STRING("getBeginIndex"), jint>(); }
inline jint StringCharacterIterator::getEndIndex() { return call_method<SCAPIX_META_STRING("getEndIndex"), jint>(); }
inline jint StringCharacterIterator::getIndex() { return call_method<SCAPIX_META_STRING("getIndex"), jint>(); }
inline jboolean StringCharacterIterator::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint StringCharacterIterator::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::Object> StringCharacterIterator::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }

} // namespace java::text
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TEXT_STRINGCHARACTERITERATOR_H
