// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_TEXT_BREAKITERATOR_H
#define SCAPIX_JAVA_TEXT_BREAKITERATOR_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::text { class CharacterIterator; }
namespace java::util { class Locale; }

namespace java::text {

class BreakIterator : public object_base<SCAPIX_META_STRING("java/text/BreakIterator"),
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jint DONE_();

	ref<java::lang::Object> clone();
	jint first();
	jint last();
	jint next(jint p1);
	jint next();
	jint previous();
	jint following(jint p1);
	jint preceding(jint offset);
	jboolean isBoundary(jint offset);
	jint current();
	ref<java::text::CharacterIterator> getText();
	void setText(ref<java::lang::String> newText);
	void setText(ref<java::text::CharacterIterator> p1);
	static ref<java::text::BreakIterator> getWordInstance();
	static ref<java::text::BreakIterator> getWordInstance(ref<java::util::Locale> locale);
	static ref<java::text::BreakIterator> getLineInstance();
	static ref<java::text::BreakIterator> getLineInstance(ref<java::util::Locale> locale);
	static ref<java::text::BreakIterator> getCharacterInstance();
	static ref<java::text::BreakIterator> getCharacterInstance(ref<java::util::Locale> locale);
	static ref<java::text::BreakIterator> getSentenceInstance();
	static ref<java::text::BreakIterator> getSentenceInstance(ref<java::util::Locale> locale);
	static ref<link::java::array<java::util::Locale>> getAvailableLocales();

protected:

	BreakIterator(handle_type h) : base_(h) {}

};

} // namespace java::text
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/CharacterIterator.h>
#include <scapix/java_api/java/util/Locale.h>

namespace scapix::java_api {
namespace java::text {

inline jint BreakIterator::DONE_() { return get_static_field<SCAPIX_META_STRING("DONE"), jint>(); }
inline ref<java::lang::Object> BreakIterator::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline jint BreakIterator::first() { return call_method<SCAPIX_META_STRING("first"), jint>(); }
inline jint BreakIterator::last() { return call_method<SCAPIX_META_STRING("last"), jint>(); }
inline jint BreakIterator::next(jint p1) { return call_method<SCAPIX_META_STRING("next"), jint>(p1); }
inline jint BreakIterator::next() { return call_method<SCAPIX_META_STRING("next"), jint>(); }
inline jint BreakIterator::previous() { return call_method<SCAPIX_META_STRING("previous"), jint>(); }
inline jint BreakIterator::following(jint p1) { return call_method<SCAPIX_META_STRING("following"), jint>(p1); }
inline jint BreakIterator::preceding(jint offset) { return call_method<SCAPIX_META_STRING("preceding"), jint>(offset); }
inline jboolean BreakIterator::isBoundary(jint offset) { return call_method<SCAPIX_META_STRING("isBoundary"), jboolean>(offset); }
inline jint BreakIterator::current() { return call_method<SCAPIX_META_STRING("current"), jint>(); }
inline ref<java::text::CharacterIterator> BreakIterator::getText() { return call_method<SCAPIX_META_STRING("getText"), ref<java::text::CharacterIterator>>(); }
inline void BreakIterator::setText(ref<java::lang::String> newText) { return call_method<SCAPIX_META_STRING("setText"), void>(newText); }
inline void BreakIterator::setText(ref<java::text::CharacterIterator> p1) { return call_method<SCAPIX_META_STRING("setText"), void>(p1); }
inline ref<java::text::BreakIterator> BreakIterator::getWordInstance() { return call_static_method<SCAPIX_META_STRING("getWordInstance"), ref<java::text::BreakIterator>>(); }
inline ref<java::text::BreakIterator> BreakIterator::getWordInstance(ref<java::util::Locale> locale) { return call_static_method<SCAPIX_META_STRING("getWordInstance"), ref<java::text::BreakIterator>>(locale); }
inline ref<java::text::BreakIterator> BreakIterator::getLineInstance() { return call_static_method<SCAPIX_META_STRING("getLineInstance"), ref<java::text::BreakIterator>>(); }
inline ref<java::text::BreakIterator> BreakIterator::getLineInstance(ref<java::util::Locale> locale) { return call_static_method<SCAPIX_META_STRING("getLineInstance"), ref<java::text::BreakIterator>>(locale); }
inline ref<java::text::BreakIterator> BreakIterator::getCharacterInstance() { return call_static_method<SCAPIX_META_STRING("getCharacterInstance"), ref<java::text::BreakIterator>>(); }
inline ref<java::text::BreakIterator> BreakIterator::getCharacterInstance(ref<java::util::Locale> locale) { return call_static_method<SCAPIX_META_STRING("getCharacterInstance"), ref<java::text::BreakIterator>>(locale); }
inline ref<java::text::BreakIterator> BreakIterator::getSentenceInstance() { return call_static_method<SCAPIX_META_STRING("getSentenceInstance"), ref<java::text::BreakIterator>>(); }
inline ref<java::text::BreakIterator> BreakIterator::getSentenceInstance(ref<java::util::Locale> locale) { return call_static_method<SCAPIX_META_STRING("getSentenceInstance"), ref<java::text::BreakIterator>>(locale); }
inline ref<link::java::array<java::util::Locale>> BreakIterator::getAvailableLocales() { return call_static_method<SCAPIX_META_STRING("getAvailableLocales"), ref<link::java::array<java::util::Locale>>>(); }

} // namespace java::text
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TEXT_BREAKITERATOR_H
