// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/InputStream.h>

#ifndef SCAPIX_JAVA_IO_FILEINPUTSTREAM_H
#define SCAPIX_JAVA_IO_FILEINPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class File; }
namespace java::io { class FileDescriptor; }
namespace java::lang { class String; }
namespace java::nio::channels { class FileChannel; }

namespace java::io {

class FileInputStream : public object_base<SCAPIX_META_STRING("java/io/FileInputStream"),
	java::io::InputStream>
{
public:

	static ref<FileInputStream> new_object(ref<java::lang::String> name);
	static ref<FileInputStream> new_object(ref<java::io::File> file);
	static ref<FileInputStream> new_object(ref<java::io::FileDescriptor> fdObj);
	jint read();
	jint read(ref<link::java::array<jbyte>> b);
	jint read(ref<link::java::array<jbyte>> b, jint off, jint len);
	jlong skip(jlong n);
	jint available();
	void close();
	ref<java::io::FileDescriptor> getFD();
	ref<java::nio::channels::FileChannel> getChannel();

protected:

	FileInputStream(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/channels/FileChannel.h>

namespace scapix::java_api {
namespace java::io {

inline ref<FileInputStream> FileInputStream::new_object(ref<java::lang::String> name) { return base_::new_object(name); }
inline ref<FileInputStream> FileInputStream::new_object(ref<java::io::File> file) { return base_::new_object(file); }
inline ref<FileInputStream> FileInputStream::new_object(ref<java::io::FileDescriptor> fdObj) { return base_::new_object(fdObj); }
inline jint FileInputStream::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint FileInputStream::read(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("read"), jint>(b); }
inline jint FileInputStream::read(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(b, off, len); }
inline jlong FileInputStream::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), jlong>(n); }
inline jint FileInputStream::available() { return call_method<SCAPIX_META_STRING("available"), jint>(); }
inline void FileInputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline ref<java::io::FileDescriptor> FileInputStream::getFD() { return call_method<SCAPIX_META_STRING("getFD"), ref<java::io::FileDescriptor>>(); }
inline ref<java::nio::channels::FileChannel> FileInputStream::getChannel() { return call_method<SCAPIX_META_STRING("getChannel"), ref<java::nio::channels::FileChannel>>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_FILEINPUTSTREAM_H
