// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/InputStream.h>

#ifndef SCAPIX_JAVA_IO_PIPEDINPUTSTREAM_H
#define SCAPIX_JAVA_IO_PIPEDINPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class PipedOutputStream; }

namespace java::io {

class PipedInputStream : public object_base<SCAPIX_META_STRING("java/io/PipedInputStream"),
	java::io::InputStream>
{
public:

	static ref<PipedInputStream> new_object(ref<java::io::PipedOutputStream> src);
	static ref<PipedInputStream> new_object(ref<java::io::PipedOutputStream> src, jint pipeSize);
	static ref<PipedInputStream> new_object();
	static ref<PipedInputStream> new_object(jint pipeSize);
	void connect(ref<java::io::PipedOutputStream> src);
	jint read();
	jint read(ref<link::java::array<jbyte>> b, jint off, jint len);
	jint available();
	void close();

protected:

	PipedInputStream(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/PipedOutputStream.h>

namespace scapix::java_api {
namespace java::io {

inline ref<PipedInputStream> PipedInputStream::new_object(ref<java::io::PipedOutputStream> src) { return base_::new_object(src); }
inline ref<PipedInputStream> PipedInputStream::new_object(ref<java::io::PipedOutputStream> src, jint pipeSize) { return base_::new_object(src, pipeSize); }
inline ref<PipedInputStream> PipedInputStream::new_object() { return base_::new_object(); }
inline ref<PipedInputStream> PipedInputStream::new_object(jint pipeSize) { return base_::new_object(pipeSize); }
inline void PipedInputStream::connect(ref<java::io::PipedOutputStream> src) { return call_method<SCAPIX_META_STRING("connect"), void>(src); }
inline jint PipedInputStream::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint PipedInputStream::read(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(b, off, len); }
inline jint PipedInputStream::available() { return call_method<SCAPIX_META_STRING("available"), jint>(); }
inline void PipedInputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_PIPEDINPUTSTREAM_H
