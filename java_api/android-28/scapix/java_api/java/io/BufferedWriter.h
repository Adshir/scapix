// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/Writer.h>

#ifndef SCAPIX_JAVA_IO_BUFFEREDWRITER_H
#define SCAPIX_JAVA_IO_BUFFEREDWRITER_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace java::io {

class BufferedWriter : public object_base<SCAPIX_META_STRING("java/io/BufferedWriter"),
	java::io::Writer>
{
public:

	static ref<BufferedWriter> new_object(ref<java::io::Writer> out);
	static ref<BufferedWriter> new_object(ref<java::io::Writer> out, jint sz);
	void write(jint c);
	void write(ref<link::java::array<jchar>> cbuf, jint off, jint len);
	void write(ref<java::lang::String> s, jint off, jint len);
	void newLine();
	void flush();
	void close();

protected:

	BufferedWriter(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::io {

inline ref<BufferedWriter> BufferedWriter::new_object(ref<java::io::Writer> out) { return base_::new_object(out); }
inline ref<BufferedWriter> BufferedWriter::new_object(ref<java::io::Writer> out, jint sz) { return base_::new_object(out, sz); }
inline void BufferedWriter::write(jint c) { return call_method<SCAPIX_META_STRING("write"), void>(c); }
inline void BufferedWriter::write(ref<link::java::array<jchar>> cbuf, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(cbuf, off, len); }
inline void BufferedWriter::write(ref<java::lang::String> s, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(s, off, len); }
inline void BufferedWriter::newLine() { return call_method<SCAPIX_META_STRING("newLine"), void>(); }
inline void BufferedWriter::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline void BufferedWriter::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_BUFFEREDWRITER_H
