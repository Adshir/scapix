// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_IO_INPUTSTREAM_H
#define SCAPIX_JAVA_IO_INPUTSTREAM_H

namespace scapix::java_api {
namespace java::io {

class InputStream : public object_base<SCAPIX_META_STRING("java/io/InputStream"),
	java::lang::Object,
	java::io::Closeable>
{
public:

	static ref<InputStream> new_object();
	jint read();
	jint read(ref<link::java::array<jbyte>> b);
	jint read(ref<link::java::array<jbyte>> b, jint off, jint len);
	jlong skip(jlong n);
	jint available();
	void close();
	void mark(jint readlimit);
	void reset();
	jboolean markSupported();

protected:

	InputStream(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api


namespace scapix::java_api {
namespace java::io {

inline ref<InputStream> InputStream::new_object() { return base_::new_object(); }
inline jint InputStream::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint InputStream::read(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("read"), jint>(b); }
inline jint InputStream::read(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(b, off, len); }
inline jlong InputStream::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), jlong>(n); }
inline jint InputStream::available() { return call_method<SCAPIX_META_STRING("available"), jint>(); }
inline void InputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void InputStream::mark(jint readlimit) { return call_method<SCAPIX_META_STRING("mark"), void>(readlimit); }
inline void InputStream::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline jboolean InputStream::markSupported() { return call_method<SCAPIX_META_STRING("markSupported"), jboolean>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_INPUTSTREAM_H
