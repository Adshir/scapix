// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/FilterInputStream.h>

#ifndef SCAPIX_JAVA_IO_PUSHBACKINPUTSTREAM_H
#define SCAPIX_JAVA_IO_PUSHBACKINPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class InputStream; }

namespace java::io {

class PushbackInputStream : public object_base<SCAPIX_META_STRING("java/io/PushbackInputStream"),
	java::io::FilterInputStream>
{
public:

	static ref<PushbackInputStream> new_object(ref<java::io::InputStream> in, jint size);
	static ref<PushbackInputStream> new_object(ref<java::io::InputStream> in);
	jint read();
	jint read(ref<link::java::array<jbyte>> b, jint off, jint len);
	void unread(jint b);
	void unread(ref<link::java::array<jbyte>> b, jint off, jint len);
	void unread(ref<link::java::array<jbyte>> b);
	jint available();
	jlong skip(jlong n);
	jboolean markSupported();
	void mark(jint readlimit);
	void reset();
	void close();

protected:

	PushbackInputStream(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>

namespace scapix::java_api {
namespace java::io {

inline ref<PushbackInputStream> PushbackInputStream::new_object(ref<java::io::InputStream> in, jint size) { return base_::new_object(in, size); }
inline ref<PushbackInputStream> PushbackInputStream::new_object(ref<java::io::InputStream> in) { return base_::new_object(in); }
inline jint PushbackInputStream::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint PushbackInputStream::read(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(b, off, len); }
inline void PushbackInputStream::unread(jint b) { return call_method<SCAPIX_META_STRING("unread"), void>(b); }
inline void PushbackInputStream::unread(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("unread"), void>(b, off, len); }
inline void PushbackInputStream::unread(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("unread"), void>(b); }
inline jint PushbackInputStream::available() { return call_method<SCAPIX_META_STRING("available"), jint>(); }
inline jlong PushbackInputStream::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), jlong>(n); }
inline jboolean PushbackInputStream::markSupported() { return call_method<SCAPIX_META_STRING("markSupported"), jboolean>(); }
inline void PushbackInputStream::mark(jint readlimit) { return call_method<SCAPIX_META_STRING("mark"), void>(readlimit); }
inline void PushbackInputStream::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline void PushbackInputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_PUSHBACKINPUTSTREAM_H
