// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/Reader.h>

#ifndef SCAPIX_JAVA_IO_BUFFEREDREADER_H
#define SCAPIX_JAVA_IO_BUFFEREDREADER_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util::stream { class Stream; }

namespace java::io {

class BufferedReader : public object_base<SCAPIX_META_STRING("java/io/BufferedReader"),
	java::io::Reader>
{
public:

	static ref<BufferedReader> new_object(ref<java::io::Reader> in, jint sz);
	static ref<BufferedReader> new_object(ref<java::io::Reader> in);
	jint read();
	jint read(ref<link::java::array<jchar>> cbuf, jint off, jint len);
	ref<java::lang::String> readLine();
	jlong skip(jlong n);
	jboolean ready();
	jboolean markSupported();
	void mark(jint readAheadLimit);
	void reset();
	void close();
	ref<java::util::stream::Stream> lines();

protected:

	BufferedReader(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/stream/Stream.h>

namespace scapix::java_api {
namespace java::io {

inline ref<BufferedReader> BufferedReader::new_object(ref<java::io::Reader> in, jint sz) { return base_::new_object(in, sz); }
inline ref<BufferedReader> BufferedReader::new_object(ref<java::io::Reader> in) { return base_::new_object(in); }
inline jint BufferedReader::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint BufferedReader::read(ref<link::java::array<jchar>> cbuf, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(cbuf, off, len); }
inline ref<java::lang::String> BufferedReader::readLine() { return call_method<SCAPIX_META_STRING("readLine"), ref<java::lang::String>>(); }
inline jlong BufferedReader::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), jlong>(n); }
inline jboolean BufferedReader::ready() { return call_method<SCAPIX_META_STRING("ready"), jboolean>(); }
inline jboolean BufferedReader::markSupported() { return call_method<SCAPIX_META_STRING("markSupported"), jboolean>(); }
inline void BufferedReader::mark(jint readAheadLimit) { return call_method<SCAPIX_META_STRING("mark"), void>(readAheadLimit); }
inline void BufferedReader::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline void BufferedReader::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline ref<java::util::stream::Stream> BufferedReader::lines() { return call_method<SCAPIX_META_STRING("lines"), ref<java::util::stream::Stream>>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_BUFFEREDREADER_H
