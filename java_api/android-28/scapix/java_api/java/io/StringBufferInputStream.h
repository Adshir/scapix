// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/InputStream.h>

#ifndef SCAPIX_JAVA_IO_STRINGBUFFERINPUTSTREAM_H
#define SCAPIX_JAVA_IO_STRINGBUFFERINPUTSTREAM_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace java::io {

class StringBufferInputStream : public object_base<SCAPIX_META_STRING("java/io/StringBufferInputStream"),
	java::io::InputStream>
{
public:

	static ref<StringBufferInputStream> new_object(ref<java::lang::String> s);
	jint read();
	jint read(ref<link::java::array<jbyte>> b, jint off, jint len);
	jlong skip(jlong n);
	jint available();
	void reset();

protected:

	StringBufferInputStream(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::io {

inline ref<StringBufferInputStream> StringBufferInputStream::new_object(ref<java::lang::String> s) { return base_::new_object(s); }
inline jint StringBufferInputStream::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint StringBufferInputStream::read(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(b, off, len); }
inline jlong StringBufferInputStream::skip(jlong n) { return call_method<SCAPIX_META_STRING("skip"), jlong>(n); }
inline jint StringBufferInputStream::available() { return call_method<SCAPIX_META_STRING("available"), jint>(); }
inline void StringBufferInputStream::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_STRINGBUFFERINPUTSTREAM_H
