// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/Reader.h>

#ifndef SCAPIX_JAVA_IO_STRINGREADER_H
#define SCAPIX_JAVA_IO_STRINGREADER_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace java::io {

class StringReader : public object_base<SCAPIX_META_STRING("java/io/StringReader"),
	java::io::Reader>
{
public:

	static ref<StringReader> new_object(ref<java::lang::String> s);
	jint read();
	jint read(ref<link::java::array<jchar>> cbuf, jint off, jint len);
	jlong skip(jlong ns);
	jboolean ready();
	jboolean markSupported();
	void mark(jint readAheadLimit);
	void reset();
	void close();

protected:

	StringReader(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::io {

inline ref<StringReader> StringReader::new_object(ref<java::lang::String> s) { return base_::new_object(s); }
inline jint StringReader::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint StringReader::read(ref<link::java::array<jchar>> cbuf, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(cbuf, off, len); }
inline jlong StringReader::skip(jlong ns) { return call_method<SCAPIX_META_STRING("skip"), jlong>(ns); }
inline jboolean StringReader::ready() { return call_method<SCAPIX_META_STRING("ready"), jboolean>(); }
inline jboolean StringReader::markSupported() { return call_method<SCAPIX_META_STRING("markSupported"), jboolean>(); }
inline void StringReader::mark(jint readAheadLimit) { return call_method<SCAPIX_META_STRING("mark"), void>(readAheadLimit); }
inline void StringReader::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline void StringReader::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_STRINGREADER_H
