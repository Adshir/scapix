// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/OutputStream.h>

#ifndef SCAPIX_JAVA_IO_BYTEARRAYOUTPUTSTREAM_H
#define SCAPIX_JAVA_IO_BYTEARRAYOUTPUTSTREAM_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace java::io {

class ByteArrayOutputStream : public object_base<SCAPIX_META_STRING("java/io/ByteArrayOutputStream"),
	java::io::OutputStream>
{
public:

	static ref<ByteArrayOutputStream> new_object();
	static ref<ByteArrayOutputStream> new_object(jint size);
	void write(jint b);
	void write(ref<link::java::array<jbyte>> b, jint off, jint len);
	void writeTo(ref<java::io::OutputStream> out);
	void reset();
	ref<link::java::array<jbyte>> toByteArray();
	jint size();
	ref<java::lang::String> toString();
	ref<java::lang::String> toString(ref<java::lang::String> charsetName);
	ref<java::lang::String> toString(jint hibyte);
	void close();

protected:

	ByteArrayOutputStream(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::io {

inline ref<ByteArrayOutputStream> ByteArrayOutputStream::new_object() { return base_::new_object(); }
inline ref<ByteArrayOutputStream> ByteArrayOutputStream::new_object(jint size) { return base_::new_object(size); }
inline void ByteArrayOutputStream::write(jint b) { return call_method<SCAPIX_META_STRING("write"), void>(b); }
inline void ByteArrayOutputStream::write(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(b, off, len); }
inline void ByteArrayOutputStream::writeTo(ref<java::io::OutputStream> out) { return call_method<SCAPIX_META_STRING("writeTo"), void>(out); }
inline void ByteArrayOutputStream::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline ref<link::java::array<jbyte>> ByteArrayOutputStream::toByteArray() { return call_method<SCAPIX_META_STRING("toByteArray"), ref<link::java::array<jbyte>>>(); }
inline jint ByteArrayOutputStream::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline ref<java::lang::String> ByteArrayOutputStream::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ByteArrayOutputStream::toString(ref<java::lang::String> charsetName) { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(charsetName); }
inline ref<java::lang::String> ByteArrayOutputStream::toString(jint hibyte) { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(hibyte); }
inline void ByteArrayOutputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_BYTEARRAYOUTPUTSTREAM_H
