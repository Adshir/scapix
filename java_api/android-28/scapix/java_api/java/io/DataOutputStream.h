// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/FilterOutputStream.h>
#include <scapix/java_api/java/io/DataOutput.h>

#ifndef SCAPIX_JAVA_IO_DATAOUTPUTSTREAM_H
#define SCAPIX_JAVA_IO_DATAOUTPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class OutputStream; }
namespace java::lang { class String; }

namespace java::io {

class DataOutputStream : public object_base<SCAPIX_META_STRING("java/io/DataOutputStream"),
	java::io::FilterOutputStream,
	java::io::DataOutput>
{
public:

	static ref<DataOutputStream> new_object(ref<java::io::OutputStream> out);
	void write(jint b);
	void write(ref<link::java::array<jbyte>> b, jint off, jint len);
	void flush();
	void writeBoolean(jboolean v);
	void writeByte(jint v);
	void writeShort(jint v);
	void writeChar(jint v);
	void writeInt(jint v);
	void writeLong(jlong v);
	void writeFloat(jfloat v);
	void writeDouble(jdouble v);
	void writeBytes(ref<java::lang::String> s);
	void writeChars(ref<java::lang::String> s);
	void writeUTF(ref<java::lang::String> str);
	jint size();

protected:

	DataOutputStream(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::io {

inline ref<DataOutputStream> DataOutputStream::new_object(ref<java::io::OutputStream> out) { return base_::new_object(out); }
inline void DataOutputStream::write(jint b) { return call_method<SCAPIX_META_STRING("write"), void>(b); }
inline void DataOutputStream::write(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(b, off, len); }
inline void DataOutputStream::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline void DataOutputStream::writeBoolean(jboolean v) { return call_method<SCAPIX_META_STRING("writeBoolean"), void>(v); }
inline void DataOutputStream::writeByte(jint v) { return call_method<SCAPIX_META_STRING("writeByte"), void>(v); }
inline void DataOutputStream::writeShort(jint v) { return call_method<SCAPIX_META_STRING("writeShort"), void>(v); }
inline void DataOutputStream::writeChar(jint v) { return call_method<SCAPIX_META_STRING("writeChar"), void>(v); }
inline void DataOutputStream::writeInt(jint v) { return call_method<SCAPIX_META_STRING("writeInt"), void>(v); }
inline void DataOutputStream::writeLong(jlong v) { return call_method<SCAPIX_META_STRING("writeLong"), void>(v); }
inline void DataOutputStream::writeFloat(jfloat v) { return call_method<SCAPIX_META_STRING("writeFloat"), void>(v); }
inline void DataOutputStream::writeDouble(jdouble v) { return call_method<SCAPIX_META_STRING("writeDouble"), void>(v); }
inline void DataOutputStream::writeBytes(ref<java::lang::String> s) { return call_method<SCAPIX_META_STRING("writeBytes"), void>(s); }
inline void DataOutputStream::writeChars(ref<java::lang::String> s) { return call_method<SCAPIX_META_STRING("writeChars"), void>(s); }
inline void DataOutputStream::writeUTF(ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("writeUTF"), void>(str); }
inline jint DataOutputStream::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_DATAOUTPUTSTREAM_H
