// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/ObjectOutput.h>
#include <scapix/java_api/java/io/ObjectStreamConstants.h>

#ifndef SCAPIX_JAVA_IO_OBJECTOUTPUTSTREAM_H
#define SCAPIX_JAVA_IO_OBJECTOUTPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class ObjectOutputStream_PutField; }
namespace java::lang { class Object; }
namespace java::lang { class String; }

namespace java::io {

class ObjectOutputStream : public object_base<SCAPIX_META_STRING("java/io/ObjectOutputStream"),
	java::io::OutputStream,
	java::io::ObjectOutput,
	java::io::ObjectStreamConstants>
{
public:

	using PutField = ObjectOutputStream_PutField;

	static ref<ObjectOutputStream> new_object(ref<java::io::OutputStream> out);
	void useProtocolVersion(jint version);
	void writeObject(ref<java::lang::Object> obj);
	void writeUnshared(ref<java::lang::Object> obj);
	void defaultWriteObject();
	ref<java::io::ObjectOutputStream_PutField> putFields();
	void writeFields();
	void reset();
	void write(jint val);
	void write(ref<link::java::array<jbyte>> buf);
	void write(ref<link::java::array<jbyte>> buf, jint off, jint len);
	void flush();
	void close();
	void writeBoolean(jboolean val);
	void writeByte(jint val);
	void writeShort(jint val);
	void writeChar(jint val);
	void writeInt(jint val);
	void writeLong(jlong val);
	void writeFloat(jfloat val);
	void writeDouble(jdouble val);
	void writeBytes(ref<java::lang::String> str);
	void writeChars(ref<java::lang::String> str);
	void writeUTF(ref<java::lang::String> str);

protected:

	ObjectOutputStream(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/ObjectOutputStream_PutField.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::io {

inline ref<ObjectOutputStream> ObjectOutputStream::new_object(ref<java::io::OutputStream> out) { return base_::new_object(out); }
inline void ObjectOutputStream::useProtocolVersion(jint version) { return call_method<SCAPIX_META_STRING("useProtocolVersion"), void>(version); }
inline void ObjectOutputStream::writeObject(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("writeObject"), void>(obj); }
inline void ObjectOutputStream::writeUnshared(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("writeUnshared"), void>(obj); }
inline void ObjectOutputStream::defaultWriteObject() { return call_method<SCAPIX_META_STRING("defaultWriteObject"), void>(); }
inline ref<java::io::ObjectOutputStream_PutField> ObjectOutputStream::putFields() { return call_method<SCAPIX_META_STRING("putFields"), ref<java::io::ObjectOutputStream_PutField>>(); }
inline void ObjectOutputStream::writeFields() { return call_method<SCAPIX_META_STRING("writeFields"), void>(); }
inline void ObjectOutputStream::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline void ObjectOutputStream::write(jint val) { return call_method<SCAPIX_META_STRING("write"), void>(val); }
inline void ObjectOutputStream::write(ref<link::java::array<jbyte>> buf) { return call_method<SCAPIX_META_STRING("write"), void>(buf); }
inline void ObjectOutputStream::write(ref<link::java::array<jbyte>> buf, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(buf, off, len); }
inline void ObjectOutputStream::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline void ObjectOutputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void ObjectOutputStream::writeBoolean(jboolean val) { return call_method<SCAPIX_META_STRING("writeBoolean"), void>(val); }
inline void ObjectOutputStream::writeByte(jint val) { return call_method<SCAPIX_META_STRING("writeByte"), void>(val); }
inline void ObjectOutputStream::writeShort(jint val) { return call_method<SCAPIX_META_STRING("writeShort"), void>(val); }
inline void ObjectOutputStream::writeChar(jint val) { return call_method<SCAPIX_META_STRING("writeChar"), void>(val); }
inline void ObjectOutputStream::writeInt(jint val) { return call_method<SCAPIX_META_STRING("writeInt"), void>(val); }
inline void ObjectOutputStream::writeLong(jlong val) { return call_method<SCAPIX_META_STRING("writeLong"), void>(val); }
inline void ObjectOutputStream::writeFloat(jfloat val) { return call_method<SCAPIX_META_STRING("writeFloat"), void>(val); }
inline void ObjectOutputStream::writeDouble(jdouble val) { return call_method<SCAPIX_META_STRING("writeDouble"), void>(val); }
inline void ObjectOutputStream::writeBytes(ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("writeBytes"), void>(str); }
inline void ObjectOutputStream::writeChars(ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("writeChars"), void>(str); }
inline void ObjectOutputStream::writeUTF(ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("writeUTF"), void>(str); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_OBJECTOUTPUTSTREAM_H
