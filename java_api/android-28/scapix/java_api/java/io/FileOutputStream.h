// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/OutputStream.h>

#ifndef SCAPIX_JAVA_IO_FILEOUTPUTSTREAM_H
#define SCAPIX_JAVA_IO_FILEOUTPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class File; }
namespace java::io { class FileDescriptor; }
namespace java::lang { class String; }
namespace java::nio::channels { class FileChannel; }

namespace java::io {

class FileOutputStream : public object_base<SCAPIX_META_STRING("java/io/FileOutputStream"),
	java::io::OutputStream>
{
public:

	static ref<FileOutputStream> new_object(ref<java::lang::String> name);
	static ref<FileOutputStream> new_object(ref<java::lang::String> name, jboolean append);
	static ref<FileOutputStream> new_object(ref<java::io::File> file);
	static ref<FileOutputStream> new_object(ref<java::io::File> file, jboolean append);
	static ref<FileOutputStream> new_object(ref<java::io::FileDescriptor> fdObj);
	void write(jint b);
	void write(ref<link::java::array<jbyte>> b);
	void write(ref<link::java::array<jbyte>> b, jint off, jint len);
	void close();
	ref<java::io::FileDescriptor> getFD();
	ref<java::nio::channels::FileChannel> getChannel();

protected:

	FileOutputStream(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/channels/FileChannel.h>

namespace scapix::java_api {
namespace java::io {

inline ref<FileOutputStream> FileOutputStream::new_object(ref<java::lang::String> name) { return base_::new_object(name); }
inline ref<FileOutputStream> FileOutputStream::new_object(ref<java::lang::String> name, jboolean append) { return base_::new_object(name, append); }
inline ref<FileOutputStream> FileOutputStream::new_object(ref<java::io::File> file) { return base_::new_object(file); }
inline ref<FileOutputStream> FileOutputStream::new_object(ref<java::io::File> file, jboolean append) { return base_::new_object(file, append); }
inline ref<FileOutputStream> FileOutputStream::new_object(ref<java::io::FileDescriptor> fdObj) { return base_::new_object(fdObj); }
inline void FileOutputStream::write(jint b) { return call_method<SCAPIX_META_STRING("write"), void>(b); }
inline void FileOutputStream::write(ref<link::java::array<jbyte>> b) { return call_method<SCAPIX_META_STRING("write"), void>(b); }
inline void FileOutputStream::write(ref<link::java::array<jbyte>> b, jint off, jint len) { return call_method<SCAPIX_META_STRING("write"), void>(b, off, len); }
inline void FileOutputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline ref<java::io::FileDescriptor> FileOutputStream::getFD() { return call_method<SCAPIX_META_STRING("getFD"), ref<java::io::FileDescriptor>>(); }
inline ref<java::nio::channels::FileChannel> FileOutputStream::getChannel() { return call_method<SCAPIX_META_STRING("getChannel"), ref<java::nio::channels::FileChannel>>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_FILEOUTPUTSTREAM_H
