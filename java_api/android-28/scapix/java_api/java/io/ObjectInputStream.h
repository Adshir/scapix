// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/ObjectInput.h>
#include <scapix/java_api/java/io/ObjectStreamConstants.h>

#ifndef SCAPIX_JAVA_IO_OBJECTINPUTSTREAM_H
#define SCAPIX_JAVA_IO_OBJECTINPUTSTREAM_H

namespace scapix::java_api {

namespace java::io { class ObjectInputStream_GetField; }
namespace java::io { class ObjectInputValidation; }
namespace java::lang { class Object; }
namespace java::lang { class String; }

namespace java::io {

class ObjectInputStream : public object_base<SCAPIX_META_STRING("java/io/ObjectInputStream"),
	java::io::InputStream,
	java::io::ObjectInput,
	java::io::ObjectStreamConstants>
{
public:

	using GetField = ObjectInputStream_GetField;

	static ref<ObjectInputStream> new_object(ref<java::io::InputStream> in);
	ref<java::lang::Object> readObject();
	ref<java::lang::Object> readUnshared();
	void defaultReadObject();
	ref<java::io::ObjectInputStream_GetField> readFields();
	void registerValidation(ref<java::io::ObjectInputValidation> obj, jint prio);
	jint read();
	jint read(ref<link::java::array<jbyte>> buf, jint off, jint len);
	jint available();
	void close();
	jboolean readBoolean();
	jbyte readByte();
	jint readUnsignedByte();
	jchar readChar();
	jshort readShort();
	jint readUnsignedShort();
	jint readInt();
	jlong readLong();
	jfloat readFloat();
	jdouble readDouble();
	void readFully(ref<link::java::array<jbyte>> buf);
	void readFully(ref<link::java::array<jbyte>> buf, jint off, jint len);
	jint skipBytes(jint len);
	ref<java::lang::String> readLine();
	ref<java::lang::String> readUTF();

protected:

	ObjectInputStream(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/ObjectInputStream_GetField.h>
#include <scapix/java_api/java/io/ObjectInputValidation.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::io {

inline ref<ObjectInputStream> ObjectInputStream::new_object(ref<java::io::InputStream> in) { return base_::new_object(in); }
inline ref<java::lang::Object> ObjectInputStream::readObject() { return call_method<SCAPIX_META_STRING("readObject"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> ObjectInputStream::readUnshared() { return call_method<SCAPIX_META_STRING("readUnshared"), ref<java::lang::Object>>(); }
inline void ObjectInputStream::defaultReadObject() { return call_method<SCAPIX_META_STRING("defaultReadObject"), void>(); }
inline ref<java::io::ObjectInputStream_GetField> ObjectInputStream::readFields() { return call_method<SCAPIX_META_STRING("readFields"), ref<java::io::ObjectInputStream_GetField>>(); }
inline void ObjectInputStream::registerValidation(ref<java::io::ObjectInputValidation> obj, jint prio) { return call_method<SCAPIX_META_STRING("registerValidation"), void>(obj, prio); }
inline jint ObjectInputStream::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint ObjectInputStream::read(ref<link::java::array<jbyte>> buf, jint off, jint len) { return call_method<SCAPIX_META_STRING("read"), jint>(buf, off, len); }
inline jint ObjectInputStream::available() { return call_method<SCAPIX_META_STRING("available"), jint>(); }
inline void ObjectInputStream::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jboolean ObjectInputStream::readBoolean() { return call_method<SCAPIX_META_STRING("readBoolean"), jboolean>(); }
inline jbyte ObjectInputStream::readByte() { return call_method<SCAPIX_META_STRING("readByte"), jbyte>(); }
inline jint ObjectInputStream::readUnsignedByte() { return call_method<SCAPIX_META_STRING("readUnsignedByte"), jint>(); }
inline jchar ObjectInputStream::readChar() { return call_method<SCAPIX_META_STRING("readChar"), jchar>(); }
inline jshort ObjectInputStream::readShort() { return call_method<SCAPIX_META_STRING("readShort"), jshort>(); }
inline jint ObjectInputStream::readUnsignedShort() { return call_method<SCAPIX_META_STRING("readUnsignedShort"), jint>(); }
inline jint ObjectInputStream::readInt() { return call_method<SCAPIX_META_STRING("readInt"), jint>(); }
inline jlong ObjectInputStream::readLong() { return call_method<SCAPIX_META_STRING("readLong"), jlong>(); }
inline jfloat ObjectInputStream::readFloat() { return call_method<SCAPIX_META_STRING("readFloat"), jfloat>(); }
inline jdouble ObjectInputStream::readDouble() { return call_method<SCAPIX_META_STRING("readDouble"), jdouble>(); }
inline void ObjectInputStream::readFully(ref<link::java::array<jbyte>> buf) { return call_method<SCAPIX_META_STRING("readFully"), void>(buf); }
inline void ObjectInputStream::readFully(ref<link::java::array<jbyte>> buf, jint off, jint len) { return call_method<SCAPIX_META_STRING("readFully"), void>(buf, off, len); }
inline jint ObjectInputStream::skipBytes(jint len) { return call_method<SCAPIX_META_STRING("skipBytes"), jint>(len); }
inline ref<java::lang::String> ObjectInputStream::readLine() { return call_method<SCAPIX_META_STRING("readLine"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ObjectInputStream::readUTF() { return call_method<SCAPIX_META_STRING("readUTF"), ref<java::lang::String>>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_OBJECTINPUTSTREAM_H
