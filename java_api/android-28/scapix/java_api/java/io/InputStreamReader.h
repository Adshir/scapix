// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/io/Reader.h>

#ifndef SCAPIX_JAVA_IO_INPUTSTREAMREADER_H
#define SCAPIX_JAVA_IO_INPUTSTREAMREADER_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::lang { class String; }
namespace java::nio::charset { class Charset; }
namespace java::nio::charset { class CharsetDecoder; }

namespace java::io {

class InputStreamReader : public object_base<SCAPIX_META_STRING("java/io/InputStreamReader"),
	java::io::Reader>
{
public:

	static ref<InputStreamReader> new_object(ref<java::io::InputStream> in);
	static ref<InputStreamReader> new_object(ref<java::io::InputStream> in, ref<java::lang::String> charsetName);
	static ref<InputStreamReader> new_object(ref<java::io::InputStream> in, ref<java::nio::charset::Charset> cs);
	static ref<InputStreamReader> new_object(ref<java::io::InputStream> in, ref<java::nio::charset::CharsetDecoder> dec);
	ref<java::lang::String> getEncoding();
	jint read();
	jint read(ref<link::java::array<jchar>> cbuf, jint offset, jint length);
	jboolean ready();
	void close();

protected:

	InputStreamReader(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#include <scapix/java_api/java/nio/charset/CharsetDecoder.h>

namespace scapix::java_api {
namespace java::io {

inline ref<InputStreamReader> InputStreamReader::new_object(ref<java::io::InputStream> in) { return base_::new_object(in); }
inline ref<InputStreamReader> InputStreamReader::new_object(ref<java::io::InputStream> in, ref<java::lang::String> charsetName) { return base_::new_object(in, charsetName); }
inline ref<InputStreamReader> InputStreamReader::new_object(ref<java::io::InputStream> in, ref<java::nio::charset::Charset> cs) { return base_::new_object(in, cs); }
inline ref<InputStreamReader> InputStreamReader::new_object(ref<java::io::InputStream> in, ref<java::nio::charset::CharsetDecoder> dec) { return base_::new_object(in, dec); }
inline ref<java::lang::String> InputStreamReader::getEncoding() { return call_method<SCAPIX_META_STRING("getEncoding"), ref<java::lang::String>>(); }
inline jint InputStreamReader::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint InputStreamReader::read(ref<link::java::array<jchar>> cbuf, jint offset, jint length) { return call_method<SCAPIX_META_STRING("read"), jint>(cbuf, offset, length); }
inline jboolean InputStreamReader::ready() { return call_method<SCAPIX_META_STRING("ready"), jboolean>(); }
inline void InputStreamReader::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_INPUTSTREAMREADER_H
