// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_IO_OBJECTSTREAMFIELD_H
#define SCAPIX_JAVA_IO_OBJECTSTREAMFIELD_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class String; }

namespace java::io {

class ObjectStreamField : public object_base<SCAPIX_META_STRING("java/io/ObjectStreamField"),
	java::lang::Object,
	java::lang::Comparable>
{
public:

	static ref<ObjectStreamField> new_object(ref<java::lang::String> name, ref<java::lang::Class> type);
	static ref<ObjectStreamField> new_object(ref<java::lang::String> name, ref<java::lang::Class> type, jboolean unshared);
	ref<java::lang::String> getName();
	ref<java::lang::Class> getType();
	jchar getTypeCode();
	ref<java::lang::String> getTypeString();
	jint getOffset();
	jboolean isPrimitive();
	jboolean isUnshared();
	jint compareTo(ref<java::lang::Object> obj);
	ref<java::lang::String> toString();

protected:

	ObjectStreamField(handle_type h) : base_(h) {}

};

} // namespace java::io
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::io {

inline ref<ObjectStreamField> ObjectStreamField::new_object(ref<java::lang::String> name, ref<java::lang::Class> type) { return base_::new_object(name, type); }
inline ref<ObjectStreamField> ObjectStreamField::new_object(ref<java::lang::String> name, ref<java::lang::Class> type, jboolean unshared) { return base_::new_object(name, type, unshared); }
inline ref<java::lang::String> ObjectStreamField::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<java::lang::Class> ObjectStreamField::getType() { return call_method<SCAPIX_META_STRING("getType"), ref<java::lang::Class>>(); }
inline jchar ObjectStreamField::getTypeCode() { return call_method<SCAPIX_META_STRING("getTypeCode"), jchar>(); }
inline ref<java::lang::String> ObjectStreamField::getTypeString() { return call_method<SCAPIX_META_STRING("getTypeString"), ref<java::lang::String>>(); }
inline jint ObjectStreamField::getOffset() { return call_method<SCAPIX_META_STRING("getOffset"), jint>(); }
inline jboolean ObjectStreamField::isPrimitive() { return call_method<SCAPIX_META_STRING("isPrimitive"), jboolean>(); }
inline jboolean ObjectStreamField::isUnshared() { return call_method<SCAPIX_META_STRING("isUnshared"), jboolean>(); }
inline jint ObjectStreamField::compareTo(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(obj); }
inline ref<java::lang::String> ObjectStreamField::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::io
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_IO_OBJECTSTREAMFIELD_H
