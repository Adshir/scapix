// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_TIME_ZONE_ZONERULES_H
#define SCAPIX_JAVA_TIME_ZONE_ZONERULES_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time { class Duration; }
namespace java::time { class Instant; }
namespace java::time { class LocalDateTime; }
namespace java::time { class ZoneOffset; }
namespace java::time::zone { class ZoneOffsetTransition; }
namespace java::util { class List; }

namespace java::time::zone {

class ZoneRules : public object_base<SCAPIX_META_STRING("java/time/zone/ZoneRules"),
	java::lang::Object,
	java::io::Serializable>
{
public:

	static ref<java::time::zone::ZoneRules> of(ref<java::time::ZoneOffset> baseStandardOffset, ref<java::time::ZoneOffset> baseWallOffset, ref<java::util::List> standardOffsetTransitionList, ref<java::util::List> transitionList, ref<java::util::List> lastRules);
	static ref<java::time::zone::ZoneRules> of(ref<java::time::ZoneOffset> offset);
	jboolean isFixedOffset();
	ref<java::time::ZoneOffset> getOffset(ref<java::time::Instant> instant);
	ref<java::time::ZoneOffset> getOffset(ref<java::time::LocalDateTime> localDateTime);
	ref<java::util::List> getValidOffsets(ref<java::time::LocalDateTime> localDateTime);
	ref<java::time::zone::ZoneOffsetTransition> getTransition(ref<java::time::LocalDateTime> localDateTime);
	ref<java::time::ZoneOffset> getStandardOffset(ref<java::time::Instant> instant);
	ref<java::time::Duration> getDaylightSavings(ref<java::time::Instant> instant);
	jboolean isDaylightSavings(ref<java::time::Instant> instant);
	jboolean isValidOffset(ref<java::time::LocalDateTime> localDateTime, ref<java::time::ZoneOffset> offset);
	ref<java::time::zone::ZoneOffsetTransition> nextTransition(ref<java::time::Instant> instant);
	ref<java::time::zone::ZoneOffsetTransition> previousTransition(ref<java::time::Instant> instant);
	ref<java::util::List> getTransitions();
	ref<java::util::List> getTransitionRules();
	jboolean equals(ref<java::lang::Object> otherRules);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	ZoneRules(handle_type h) : base_(h) {}

};

} // namespace java::time::zone
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Duration.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/time/LocalDateTime.h>
#include <scapix/java_api/java/time/ZoneOffset.h>
#include <scapix/java_api/java/time/zone/ZoneOffsetTransition.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace java::time::zone {

inline ref<java::time::zone::ZoneRules> ZoneRules::of(ref<java::time::ZoneOffset> baseStandardOffset, ref<java::time::ZoneOffset> baseWallOffset, ref<java::util::List> standardOffsetTransitionList, ref<java::util::List> transitionList, ref<java::util::List> lastRules) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::zone::ZoneRules>>(baseStandardOffset, baseWallOffset, standardOffsetTransitionList, transitionList, lastRules); }
inline ref<java::time::zone::ZoneRules> ZoneRules::of(ref<java::time::ZoneOffset> offset) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::zone::ZoneRules>>(offset); }
inline jboolean ZoneRules::isFixedOffset() { return call_method<SCAPIX_META_STRING("isFixedOffset"), jboolean>(); }
inline ref<java::time::ZoneOffset> ZoneRules::getOffset(ref<java::time::Instant> instant) { return call_method<SCAPIX_META_STRING("getOffset"), ref<java::time::ZoneOffset>>(instant); }
inline ref<java::time::ZoneOffset> ZoneRules::getOffset(ref<java::time::LocalDateTime> localDateTime) { return call_method<SCAPIX_META_STRING("getOffset"), ref<java::time::ZoneOffset>>(localDateTime); }
inline ref<java::util::List> ZoneRules::getValidOffsets(ref<java::time::LocalDateTime> localDateTime) { return call_method<SCAPIX_META_STRING("getValidOffsets"), ref<java::util::List>>(localDateTime); }
inline ref<java::time::zone::ZoneOffsetTransition> ZoneRules::getTransition(ref<java::time::LocalDateTime> localDateTime) { return call_method<SCAPIX_META_STRING("getTransition"), ref<java::time::zone::ZoneOffsetTransition>>(localDateTime); }
inline ref<java::time::ZoneOffset> ZoneRules::getStandardOffset(ref<java::time::Instant> instant) { return call_method<SCAPIX_META_STRING("getStandardOffset"), ref<java::time::ZoneOffset>>(instant); }
inline ref<java::time::Duration> ZoneRules::getDaylightSavings(ref<java::time::Instant> instant) { return call_method<SCAPIX_META_STRING("getDaylightSavings"), ref<java::time::Duration>>(instant); }
inline jboolean ZoneRules::isDaylightSavings(ref<java::time::Instant> instant) { return call_method<SCAPIX_META_STRING("isDaylightSavings"), jboolean>(instant); }
inline jboolean ZoneRules::isValidOffset(ref<java::time::LocalDateTime> localDateTime, ref<java::time::ZoneOffset> offset) { return call_method<SCAPIX_META_STRING("isValidOffset"), jboolean>(localDateTime, offset); }
inline ref<java::time::zone::ZoneOffsetTransition> ZoneRules::nextTransition(ref<java::time::Instant> instant) { return call_method<SCAPIX_META_STRING("nextTransition"), ref<java::time::zone::ZoneOffsetTransition>>(instant); }
inline ref<java::time::zone::ZoneOffsetTransition> ZoneRules::previousTransition(ref<java::time::Instant> instant) { return call_method<SCAPIX_META_STRING("previousTransition"), ref<java::time::zone::ZoneOffsetTransition>>(instant); }
inline ref<java::util::List> ZoneRules::getTransitions() { return call_method<SCAPIX_META_STRING("getTransitions"), ref<java::util::List>>(); }
inline ref<java::util::List> ZoneRules::getTransitionRules() { return call_method<SCAPIX_META_STRING("getTransitionRules"), ref<java::util::List>>(); }
inline jboolean ZoneRules::equals(ref<java::lang::Object> otherRules) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(otherRules); }
inline jint ZoneRules::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> ZoneRules::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time::zone
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_ZONE_ZONERULES_H
