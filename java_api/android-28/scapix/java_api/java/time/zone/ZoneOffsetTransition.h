// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_TIME_ZONE_ZONEOFFSETTRANSITION_H
#define SCAPIX_JAVA_TIME_ZONE_ZONEOFFSETTRANSITION_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time { class Duration; }
namespace java::time { class Instant; }
namespace java::time { class LocalDateTime; }
namespace java::time { class ZoneOffset; }

namespace java::time::zone {

class ZoneOffsetTransition : public object_base<SCAPIX_META_STRING("java/time/zone/ZoneOffsetTransition"),
	java::lang::Object,
	java::lang::Comparable,
	java::io::Serializable>
{
public:

	static ref<java::time::zone::ZoneOffsetTransition> of(ref<java::time::LocalDateTime> transition, ref<java::time::ZoneOffset> offsetBefore, ref<java::time::ZoneOffset> offsetAfter);
	ref<java::time::Instant> getInstant();
	jlong toEpochSecond();
	ref<java::time::LocalDateTime> getDateTimeBefore();
	ref<java::time::LocalDateTime> getDateTimeAfter();
	ref<java::time::ZoneOffset> getOffsetBefore();
	ref<java::time::ZoneOffset> getOffsetAfter();
	ref<java::time::Duration> getDuration();
	jboolean isGap();
	jboolean isOverlap();
	jboolean isValidOffset(ref<java::time::ZoneOffset> offset);
	jint compareTo(ref<java::time::zone::ZoneOffsetTransition> transition);
	jboolean equals(ref<java::lang::Object> other);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	ZoneOffsetTransition(handle_type h) : base_(h) {}

};

} // namespace java::time::zone
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Duration.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/time/LocalDateTime.h>
#include <scapix/java_api/java/time/ZoneOffset.h>

namespace scapix::java_api {
namespace java::time::zone {

inline ref<java::time::zone::ZoneOffsetTransition> ZoneOffsetTransition::of(ref<java::time::LocalDateTime> transition, ref<java::time::ZoneOffset> offsetBefore, ref<java::time::ZoneOffset> offsetAfter) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::zone::ZoneOffsetTransition>>(transition, offsetBefore, offsetAfter); }
inline ref<java::time::Instant> ZoneOffsetTransition::getInstant() { return call_method<SCAPIX_META_STRING("getInstant"), ref<java::time::Instant>>(); }
inline jlong ZoneOffsetTransition::toEpochSecond() { return call_method<SCAPIX_META_STRING("toEpochSecond"), jlong>(); }
inline ref<java::time::LocalDateTime> ZoneOffsetTransition::getDateTimeBefore() { return call_method<SCAPIX_META_STRING("getDateTimeBefore"), ref<java::time::LocalDateTime>>(); }
inline ref<java::time::LocalDateTime> ZoneOffsetTransition::getDateTimeAfter() { return call_method<SCAPIX_META_STRING("getDateTimeAfter"), ref<java::time::LocalDateTime>>(); }
inline ref<java::time::ZoneOffset> ZoneOffsetTransition::getOffsetBefore() { return call_method<SCAPIX_META_STRING("getOffsetBefore"), ref<java::time::ZoneOffset>>(); }
inline ref<java::time::ZoneOffset> ZoneOffsetTransition::getOffsetAfter() { return call_method<SCAPIX_META_STRING("getOffsetAfter"), ref<java::time::ZoneOffset>>(); }
inline ref<java::time::Duration> ZoneOffsetTransition::getDuration() { return call_method<SCAPIX_META_STRING("getDuration"), ref<java::time::Duration>>(); }
inline jboolean ZoneOffsetTransition::isGap() { return call_method<SCAPIX_META_STRING("isGap"), jboolean>(); }
inline jboolean ZoneOffsetTransition::isOverlap() { return call_method<SCAPIX_META_STRING("isOverlap"), jboolean>(); }
inline jboolean ZoneOffsetTransition::isValidOffset(ref<java::time::ZoneOffset> offset) { return call_method<SCAPIX_META_STRING("isValidOffset"), jboolean>(offset); }
inline jint ZoneOffsetTransition::compareTo(ref<java::time::zone::ZoneOffsetTransition> transition) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(transition); }
inline jboolean ZoneOffsetTransition::equals(ref<java::lang::Object> other) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(other); }
inline jint ZoneOffsetTransition::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> ZoneOffsetTransition::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time::zone
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_ZONE_ZONEOFFSETTRANSITION_H
