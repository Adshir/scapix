// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>

#ifndef SCAPIX_JAVA_TIME_ZONE_ZONEOFFSETTRANSITIONRULE_TIMEDEFINITION_H
#define SCAPIX_JAVA_TIME_ZONE_ZONEOFFSETTRANSITIONRULE_TIMEDEFINITION_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time { class LocalDateTime; }
namespace java::time { class ZoneOffset; }

namespace java::time::zone {

class ZoneOffsetTransitionRule_TimeDefinition : public object_base<SCAPIX_META_STRING("java/time/zone/ZoneOffsetTransitionRule$TimeDefinition"),
	java::lang::Enum>
{
public:

	static ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition> UTC_();
	static ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition> WALL_();
	static ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition> STANDARD_();

	static ref<link::java::array<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition>> values();
	static ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition> valueOf(ref<java::lang::String> name);
	ref<java::time::LocalDateTime> createDateTime(ref<java::time::LocalDateTime> dateTime, ref<java::time::ZoneOffset> standardOffset, ref<java::time::ZoneOffset> wallOffset);

protected:

	ZoneOffsetTransitionRule_TimeDefinition(handle_type h) : base_(h) {}

};

} // namespace java::time::zone
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/LocalDateTime.h>
#include <scapix/java_api/java/time/ZoneOffset.h>

namespace scapix::java_api {
namespace java::time::zone {

inline ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition> ZoneOffsetTransitionRule_TimeDefinition::UTC_() { return get_static_field<SCAPIX_META_STRING("UTC"), ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition>>(); }
inline ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition> ZoneOffsetTransitionRule_TimeDefinition::WALL_() { return get_static_field<SCAPIX_META_STRING("WALL"), ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition>>(); }
inline ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition> ZoneOffsetTransitionRule_TimeDefinition::STANDARD_() { return get_static_field<SCAPIX_META_STRING("STANDARD"), ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition>>(); }
inline ref<link::java::array<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition>> ZoneOffsetTransitionRule_TimeDefinition::values() { return call_static_method<SCAPIX_META_STRING("values"), ref<link::java::array<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition>>>(); }
inline ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition> ZoneOffsetTransitionRule_TimeDefinition::valueOf(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::time::zone::ZoneOffsetTransitionRule_TimeDefinition>>(name); }
inline ref<java::time::LocalDateTime> ZoneOffsetTransitionRule_TimeDefinition::createDateTime(ref<java::time::LocalDateTime> dateTime, ref<java::time::ZoneOffset> standardOffset, ref<java::time::ZoneOffset> wallOffset) { return call_method<SCAPIX_META_STRING("createDateTime"), ref<java::time::LocalDateTime>>(dateTime, standardOffset, wallOffset); }

} // namespace java::time::zone
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_ZONE_ZONEOFFSETTRANSITIONRULE_TIMEDEFINITION_H
