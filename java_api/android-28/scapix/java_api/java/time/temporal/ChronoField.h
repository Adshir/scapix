// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>

#ifndef SCAPIX_JAVA_TIME_TEMPORAL_CHRONOFIELD_H
#define SCAPIX_JAVA_TIME_TEMPORAL_CHRONOFIELD_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time::temporal { class Temporal; }
namespace java::time::temporal { class TemporalAccessor; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::time::temporal { class ValueRange; }
namespace java::util { class Locale; }

namespace java::time::temporal {

class ChronoField : public object_base<SCAPIX_META_STRING("java/time/temporal/ChronoField"),
	java::lang::Enum,
	java::time::temporal::TemporalField>
{
public:

	static ref<java::time::temporal::ChronoField> NANO_OF_SECOND_();
	static ref<java::time::temporal::ChronoField> NANO_OF_DAY_();
	static ref<java::time::temporal::ChronoField> MICRO_OF_SECOND_();
	static ref<java::time::temporal::ChronoField> MICRO_OF_DAY_();
	static ref<java::time::temporal::ChronoField> MILLI_OF_SECOND_();
	static ref<java::time::temporal::ChronoField> MILLI_OF_DAY_();
	static ref<java::time::temporal::ChronoField> SECOND_OF_MINUTE_();
	static ref<java::time::temporal::ChronoField> SECOND_OF_DAY_();
	static ref<java::time::temporal::ChronoField> MINUTE_OF_HOUR_();
	static ref<java::time::temporal::ChronoField> MINUTE_OF_DAY_();
	static ref<java::time::temporal::ChronoField> HOUR_OF_AMPM_();
	static ref<java::time::temporal::ChronoField> CLOCK_HOUR_OF_AMPM_();
	static ref<java::time::temporal::ChronoField> HOUR_OF_DAY_();
	static ref<java::time::temporal::ChronoField> CLOCK_HOUR_OF_DAY_();
	static ref<java::time::temporal::ChronoField> AMPM_OF_DAY_();
	static ref<java::time::temporal::ChronoField> DAY_OF_WEEK_();
	static ref<java::time::temporal::ChronoField> ALIGNED_DAY_OF_WEEK_IN_MONTH_();
	static ref<java::time::temporal::ChronoField> ALIGNED_DAY_OF_WEEK_IN_YEAR_();
	static ref<java::time::temporal::ChronoField> DAY_OF_MONTH_();
	static ref<java::time::temporal::ChronoField> DAY_OF_YEAR_();
	static ref<java::time::temporal::ChronoField> EPOCH_DAY_();
	static ref<java::time::temporal::ChronoField> ALIGNED_WEEK_OF_MONTH_();
	static ref<java::time::temporal::ChronoField> ALIGNED_WEEK_OF_YEAR_();
	static ref<java::time::temporal::ChronoField> MONTH_OF_YEAR_();
	static ref<java::time::temporal::ChronoField> PROLEPTIC_MONTH_();
	static ref<java::time::temporal::ChronoField> YEAR_OF_ERA_();
	static ref<java::time::temporal::ChronoField> YEAR_();
	static ref<java::time::temporal::ChronoField> ERA_();
	static ref<java::time::temporal::ChronoField> INSTANT_SECONDS_();
	static ref<java::time::temporal::ChronoField> OFFSET_SECONDS_();

	static ref<link::java::array<java::time::temporal::ChronoField>> values();
	static ref<java::time::temporal::ChronoField> valueOf(ref<java::lang::String> name);
	ref<java::lang::String> getDisplayName(ref<java::util::Locale> locale);
	ref<java::time::temporal::TemporalUnit> getBaseUnit();
	ref<java::time::temporal::TemporalUnit> getRangeUnit();
	ref<java::time::temporal::ValueRange> range();
	jboolean isDateBased();
	jboolean isTimeBased();
	jlong checkValidValue(jlong value);
	jint checkValidIntValue(jlong value);
	jboolean isSupportedBy(ref<java::time::temporal::TemporalAccessor> temporal);
	ref<java::time::temporal::ValueRange> rangeRefinedBy(ref<java::time::temporal::TemporalAccessor> temporal);
	jlong getFrom(ref<java::time::temporal::TemporalAccessor> temporal);
	ref<java::time::temporal::Temporal> adjustInto(ref<java::time::temporal::Temporal> temporal, jlong newValue);
	ref<java::lang::String> toString();

protected:

	ChronoField(handle_type h) : base_(h) {}

};

} // namespace java::time::temporal
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>
#include <scapix/java_api/java/util/Locale.h>

namespace scapix::java_api {
namespace java::time::temporal {

inline ref<java::time::temporal::ChronoField> ChronoField::NANO_OF_SECOND_() { return get_static_field<SCAPIX_META_STRING("NANO_OF_SECOND"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::NANO_OF_DAY_() { return get_static_field<SCAPIX_META_STRING("NANO_OF_DAY"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::MICRO_OF_SECOND_() { return get_static_field<SCAPIX_META_STRING("MICRO_OF_SECOND"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::MICRO_OF_DAY_() { return get_static_field<SCAPIX_META_STRING("MICRO_OF_DAY"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::MILLI_OF_SECOND_() { return get_static_field<SCAPIX_META_STRING("MILLI_OF_SECOND"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::MILLI_OF_DAY_() { return get_static_field<SCAPIX_META_STRING("MILLI_OF_DAY"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::SECOND_OF_MINUTE_() { return get_static_field<SCAPIX_META_STRING("SECOND_OF_MINUTE"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::SECOND_OF_DAY_() { return get_static_field<SCAPIX_META_STRING("SECOND_OF_DAY"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::MINUTE_OF_HOUR_() { return get_static_field<SCAPIX_META_STRING("MINUTE_OF_HOUR"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::MINUTE_OF_DAY_() { return get_static_field<SCAPIX_META_STRING("MINUTE_OF_DAY"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::HOUR_OF_AMPM_() { return get_static_field<SCAPIX_META_STRING("HOUR_OF_AMPM"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::CLOCK_HOUR_OF_AMPM_() { return get_static_field<SCAPIX_META_STRING("CLOCK_HOUR_OF_AMPM"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::HOUR_OF_DAY_() { return get_static_field<SCAPIX_META_STRING("HOUR_OF_DAY"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::CLOCK_HOUR_OF_DAY_() { return get_static_field<SCAPIX_META_STRING("CLOCK_HOUR_OF_DAY"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::AMPM_OF_DAY_() { return get_static_field<SCAPIX_META_STRING("AMPM_OF_DAY"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::DAY_OF_WEEK_() { return get_static_field<SCAPIX_META_STRING("DAY_OF_WEEK"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::ALIGNED_DAY_OF_WEEK_IN_MONTH_() { return get_static_field<SCAPIX_META_STRING("ALIGNED_DAY_OF_WEEK_IN_MONTH"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::ALIGNED_DAY_OF_WEEK_IN_YEAR_() { return get_static_field<SCAPIX_META_STRING("ALIGNED_DAY_OF_WEEK_IN_YEAR"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::DAY_OF_MONTH_() { return get_static_field<SCAPIX_META_STRING("DAY_OF_MONTH"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::DAY_OF_YEAR_() { return get_static_field<SCAPIX_META_STRING("DAY_OF_YEAR"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::EPOCH_DAY_() { return get_static_field<SCAPIX_META_STRING("EPOCH_DAY"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::ALIGNED_WEEK_OF_MONTH_() { return get_static_field<SCAPIX_META_STRING("ALIGNED_WEEK_OF_MONTH"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::ALIGNED_WEEK_OF_YEAR_() { return get_static_field<SCAPIX_META_STRING("ALIGNED_WEEK_OF_YEAR"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::MONTH_OF_YEAR_() { return get_static_field<SCAPIX_META_STRING("MONTH_OF_YEAR"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::PROLEPTIC_MONTH_() { return get_static_field<SCAPIX_META_STRING("PROLEPTIC_MONTH"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::YEAR_OF_ERA_() { return get_static_field<SCAPIX_META_STRING("YEAR_OF_ERA"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::YEAR_() { return get_static_field<SCAPIX_META_STRING("YEAR"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::ERA_() { return get_static_field<SCAPIX_META_STRING("ERA"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::INSTANT_SECONDS_() { return get_static_field<SCAPIX_META_STRING("INSTANT_SECONDS"), ref<java::time::temporal::ChronoField>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::OFFSET_SECONDS_() { return get_static_field<SCAPIX_META_STRING("OFFSET_SECONDS"), ref<java::time::temporal::ChronoField>>(); }
inline ref<link::java::array<java::time::temporal::ChronoField>> ChronoField::values() { return call_static_method<SCAPIX_META_STRING("values"), ref<link::java::array<java::time::temporal::ChronoField>>>(); }
inline ref<java::time::temporal::ChronoField> ChronoField::valueOf(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::time::temporal::ChronoField>>(name); }
inline ref<java::lang::String> ChronoField::getDisplayName(ref<java::util::Locale> locale) { return call_method<SCAPIX_META_STRING("getDisplayName"), ref<java::lang::String>>(locale); }
inline ref<java::time::temporal::TemporalUnit> ChronoField::getBaseUnit() { return call_method<SCAPIX_META_STRING("getBaseUnit"), ref<java::time::temporal::TemporalUnit>>(); }
inline ref<java::time::temporal::TemporalUnit> ChronoField::getRangeUnit() { return call_method<SCAPIX_META_STRING("getRangeUnit"), ref<java::time::temporal::TemporalUnit>>(); }
inline ref<java::time::temporal::ValueRange> ChronoField::range() { return call_method<SCAPIX_META_STRING("range"), ref<java::time::temporal::ValueRange>>(); }
inline jboolean ChronoField::isDateBased() { return call_method<SCAPIX_META_STRING("isDateBased"), jboolean>(); }
inline jboolean ChronoField::isTimeBased() { return call_method<SCAPIX_META_STRING("isTimeBased"), jboolean>(); }
inline jlong ChronoField::checkValidValue(jlong value) { return call_method<SCAPIX_META_STRING("checkValidValue"), jlong>(value); }
inline jint ChronoField::checkValidIntValue(jlong value) { return call_method<SCAPIX_META_STRING("checkValidIntValue"), jint>(value); }
inline jboolean ChronoField::isSupportedBy(ref<java::time::temporal::TemporalAccessor> temporal) { return call_method<SCAPIX_META_STRING("isSupportedBy"), jboolean>(temporal); }
inline ref<java::time::temporal::ValueRange> ChronoField::rangeRefinedBy(ref<java::time::temporal::TemporalAccessor> temporal) { return call_method<SCAPIX_META_STRING("rangeRefinedBy"), ref<java::time::temporal::ValueRange>>(temporal); }
inline jlong ChronoField::getFrom(ref<java::time::temporal::TemporalAccessor> temporal) { return call_method<SCAPIX_META_STRING("getFrom"), jlong>(temporal); }
inline ref<java::time::temporal::Temporal> ChronoField::adjustInto(ref<java::time::temporal::Temporal> temporal, jlong newValue) { return call_method<SCAPIX_META_STRING("adjustInto"), ref<java::time::temporal::Temporal>>(temporal, newValue); }
inline ref<java::lang::String> ChronoField::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time::temporal
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_TEMPORAL_CHRONOFIELD_H
