// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_TIME_TEMPORAL_TEMPORALFIELD_H
#define SCAPIX_JAVA_TIME_TEMPORAL_TEMPORALFIELD_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time::format { class ResolverStyle; }
namespace java::time::temporal { class Temporal; }
namespace java::time::temporal { class TemporalAccessor; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::time::temporal { class ValueRange; }
namespace java::util { class Locale; }
namespace java::util { class Map; }

namespace java::time::temporal {

class TemporalField : public object_base<SCAPIX_META_STRING("java/time/temporal/TemporalField"),
	java::lang::Object>
{
public:

	ref<java::lang::String> getDisplayName(ref<java::util::Locale> locale);
	ref<java::time::temporal::TemporalUnit> getBaseUnit();
	ref<java::time::temporal::TemporalUnit> getRangeUnit();
	ref<java::time::temporal::ValueRange> range();
	jboolean isDateBased();
	jboolean isTimeBased();
	jboolean isSupportedBy(ref<java::time::temporal::TemporalAccessor> p1);
	ref<java::time::temporal::ValueRange> rangeRefinedBy(ref<java::time::temporal::TemporalAccessor> p1);
	jlong getFrom(ref<java::time::temporal::TemporalAccessor> p1);
	ref<java::time::temporal::Temporal> adjustInto(ref<java::time::temporal::Temporal> p1, jlong p2);
	ref<java::time::temporal::TemporalAccessor> resolve(ref<java::util::Map> fieldValues, ref<java::time::temporal::TemporalAccessor> partialTemporal, ref<java::time::format::ResolverStyle> resolverStyle);
	ref<java::lang::String> toString();

protected:

	TemporalField(handle_type h) : base_(h) {}

};

} // namespace java::time::temporal
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/format/ResolverStyle.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Map.h>

namespace scapix::java_api {
namespace java::time::temporal {

inline ref<java::lang::String> TemporalField::getDisplayName(ref<java::util::Locale> locale) { return call_method<SCAPIX_META_STRING("getDisplayName"), ref<java::lang::String>>(locale); }
inline ref<java::time::temporal::TemporalUnit> TemporalField::getBaseUnit() { return call_method<SCAPIX_META_STRING("getBaseUnit"), ref<java::time::temporal::TemporalUnit>>(); }
inline ref<java::time::temporal::TemporalUnit> TemporalField::getRangeUnit() { return call_method<SCAPIX_META_STRING("getRangeUnit"), ref<java::time::temporal::TemporalUnit>>(); }
inline ref<java::time::temporal::ValueRange> TemporalField::range() { return call_method<SCAPIX_META_STRING("range"), ref<java::time::temporal::ValueRange>>(); }
inline jboolean TemporalField::isDateBased() { return call_method<SCAPIX_META_STRING("isDateBased"), jboolean>(); }
inline jboolean TemporalField::isTimeBased() { return call_method<SCAPIX_META_STRING("isTimeBased"), jboolean>(); }
inline jboolean TemporalField::isSupportedBy(ref<java::time::temporal::TemporalAccessor> p1) { return call_method<SCAPIX_META_STRING("isSupportedBy"), jboolean>(p1); }
inline ref<java::time::temporal::ValueRange> TemporalField::rangeRefinedBy(ref<java::time::temporal::TemporalAccessor> p1) { return call_method<SCAPIX_META_STRING("rangeRefinedBy"), ref<java::time::temporal::ValueRange>>(p1); }
inline jlong TemporalField::getFrom(ref<java::time::temporal::TemporalAccessor> p1) { return call_method<SCAPIX_META_STRING("getFrom"), jlong>(p1); }
inline ref<java::time::temporal::Temporal> TemporalField::adjustInto(ref<java::time::temporal::Temporal> p1, jlong p2) { return call_method<SCAPIX_META_STRING("adjustInto"), ref<java::time::temporal::Temporal>>(p1, p2); }
inline ref<java::time::temporal::TemporalAccessor> TemporalField::resolve(ref<java::util::Map> fieldValues, ref<java::time::temporal::TemporalAccessor> partialTemporal, ref<java::time::format::ResolverStyle> resolverStyle) { return call_method<SCAPIX_META_STRING("resolve"), ref<java::time::temporal::TemporalAccessor>>(fieldValues, partialTemporal, resolverStyle); }
inline ref<java::lang::String> TemporalField::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time::temporal
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_TEMPORAL_TEMPORALFIELD_H
