// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_TIME_LOCALTIME_H
#define SCAPIX_JAVA_TIME_LOCALTIME_H

namespace scapix::java_api {

namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::time { class Clock; }
namespace java::time { class LocalDate; }
namespace java::time { class LocalDateTime; }
namespace java::time { class OffsetTime; }
namespace java::time { class ZoneId; }
namespace java::time { class ZoneOffset; }
namespace java::time::format { class DateTimeFormatter; }
namespace java::time::temporal { class TemporalAccessor; }
namespace java::time::temporal { class TemporalAmount; }
namespace java::time::temporal { class TemporalField; }
namespace java::time::temporal { class TemporalQuery; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::time::temporal { class ValueRange; }

namespace java::time {

class LocalTime : public object_base<SCAPIX_META_STRING("java/time/LocalTime"),
	java::lang::Object,
	java::time::temporal::Temporal,
	java::time::temporal::TemporalAdjuster,
	java::lang::Comparable,
	java::io::Serializable>
{
public:

	static ref<java::time::LocalTime> MAX_();
	static ref<java::time::LocalTime> MIDNIGHT_();
	static ref<java::time::LocalTime> MIN_();
	static ref<java::time::LocalTime> NOON_();

	static ref<java::time::LocalTime> now();
	static ref<java::time::LocalTime> now(ref<java::time::ZoneId> zone);
	static ref<java::time::LocalTime> now(ref<java::time::Clock> clock);
	static ref<java::time::LocalTime> of(jint hour, jint minute);
	static ref<java::time::LocalTime> of(jint hour, jint minute, jint second);
	static ref<java::time::LocalTime> of(jint hour, jint minute, jint second, jint nanoOfSecond);
	static ref<java::time::LocalTime> ofSecondOfDay(jlong secondOfDay);
	static ref<java::time::LocalTime> ofNanoOfDay(jlong nanoOfDay);
	static ref<java::time::LocalTime> from(ref<java::time::temporal::TemporalAccessor> temporal);
	static ref<java::time::LocalTime> parse(ref<java::lang::CharSequence> text);
	static ref<java::time::LocalTime> parse(ref<java::lang::CharSequence> text, ref<java::time::format::DateTimeFormatter> formatter);
	jboolean isSupported(ref<java::time::temporal::TemporalField> field);
	jboolean isSupported(ref<java::time::temporal::TemporalUnit> unit);
	ref<java::time::temporal::ValueRange> range(ref<java::time::temporal::TemporalField> field);
	jint get(ref<java::time::temporal::TemporalField> field);
	jlong getLong(ref<java::time::temporal::TemporalField> field);
	jint getHour();
	jint getMinute();
	jint getSecond();
	jint getNano();
	ref<java::time::LocalTime> with(ref<java::time::temporal::TemporalAdjuster> adjuster);
	ref<java::time::LocalTime> with(ref<java::time::temporal::TemporalField> field, jlong newValue);
	ref<java::time::LocalTime> withHour(jint hour);
	ref<java::time::LocalTime> withMinute(jint minute);
	ref<java::time::LocalTime> withSecond(jint second);
	ref<java::time::LocalTime> withNano(jint nanoOfSecond);
	ref<java::time::LocalTime> truncatedTo(ref<java::time::temporal::TemporalUnit> unit);
	ref<java::time::LocalTime> plus(ref<java::time::temporal::TemporalAmount> amountToAdd);
	ref<java::time::LocalTime> plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::LocalTime> plusHours(jlong hoursToAdd);
	ref<java::time::LocalTime> plusMinutes(jlong minutesToAdd);
	ref<java::time::LocalTime> plusSeconds(jlong secondstoAdd);
	ref<java::time::LocalTime> plusNanos(jlong nanosToAdd);
	ref<java::time::LocalTime> minus(ref<java::time::temporal::TemporalAmount> amountToSubtract);
	ref<java::time::LocalTime> minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::LocalTime> minusHours(jlong hoursToSubtract);
	ref<java::time::LocalTime> minusMinutes(jlong minutesToSubtract);
	ref<java::time::LocalTime> minusSeconds(jlong secondsToSubtract);
	ref<java::time::LocalTime> minusNanos(jlong nanosToSubtract);
	ref<java::lang::Object> query(ref<java::time::temporal::TemporalQuery> query);
	ref<java::time::temporal::Temporal> adjustInto(ref<java::time::temporal::Temporal> temporal);
	jlong until(ref<java::time::temporal::Temporal> endExclusive, ref<java::time::temporal::TemporalUnit> unit);
	ref<java::lang::String> format(ref<java::time::format::DateTimeFormatter> formatter);
	ref<java::time::LocalDateTime> atDate(ref<java::time::LocalDate> date);
	ref<java::time::OffsetTime> atOffset(ref<java::time::ZoneOffset> offset);
	jint toSecondOfDay();
	jlong toNanoOfDay();
	jint compareTo(ref<java::time::LocalTime> other);
	jboolean isAfter(ref<java::time::LocalTime> other);
	jboolean isBefore(ref<java::time::LocalTime> other);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	LocalTime(handle_type h) : base_(h) {}

};

} // namespace java::time
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Clock.h>
#include <scapix/java_api/java/time/LocalDate.h>
#include <scapix/java_api/java/time/LocalDateTime.h>
#include <scapix/java_api/java/time/OffsetTime.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/ZoneOffset.h>
#include <scapix/java_api/java/time/format/DateTimeFormatter.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>

namespace scapix::java_api {
namespace java::time {

inline ref<java::time::LocalTime> LocalTime::MAX_() { return get_static_field<SCAPIX_META_STRING("MAX"), ref<java::time::LocalTime>>(); }
inline ref<java::time::LocalTime> LocalTime::MIDNIGHT_() { return get_static_field<SCAPIX_META_STRING("MIDNIGHT"), ref<java::time::LocalTime>>(); }
inline ref<java::time::LocalTime> LocalTime::MIN_() { return get_static_field<SCAPIX_META_STRING("MIN"), ref<java::time::LocalTime>>(); }
inline ref<java::time::LocalTime> LocalTime::NOON_() { return get_static_field<SCAPIX_META_STRING("NOON"), ref<java::time::LocalTime>>(); }
inline ref<java::time::LocalTime> LocalTime::now() { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::LocalTime>>(); }
inline ref<java::time::LocalTime> LocalTime::now(ref<java::time::ZoneId> zone) { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::LocalTime>>(zone); }
inline ref<java::time::LocalTime> LocalTime::now(ref<java::time::Clock> clock) { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::LocalTime>>(clock); }
inline ref<java::time::LocalTime> LocalTime::of(jint hour, jint minute) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::LocalTime>>(hour, minute); }
inline ref<java::time::LocalTime> LocalTime::of(jint hour, jint minute, jint second) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::LocalTime>>(hour, minute, second); }
inline ref<java::time::LocalTime> LocalTime::of(jint hour, jint minute, jint second, jint nanoOfSecond) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::LocalTime>>(hour, minute, second, nanoOfSecond); }
inline ref<java::time::LocalTime> LocalTime::ofSecondOfDay(jlong secondOfDay) { return call_static_method<SCAPIX_META_STRING("ofSecondOfDay"), ref<java::time::LocalTime>>(secondOfDay); }
inline ref<java::time::LocalTime> LocalTime::ofNanoOfDay(jlong nanoOfDay) { return call_static_method<SCAPIX_META_STRING("ofNanoOfDay"), ref<java::time::LocalTime>>(nanoOfDay); }
inline ref<java::time::LocalTime> LocalTime::from(ref<java::time::temporal::TemporalAccessor> temporal) { return call_static_method<SCAPIX_META_STRING("from"), ref<java::time::LocalTime>>(temporal); }
inline ref<java::time::LocalTime> LocalTime::parse(ref<java::lang::CharSequence> text) { return call_static_method<SCAPIX_META_STRING("parse"), ref<java::time::LocalTime>>(text); }
inline ref<java::time::LocalTime> LocalTime::parse(ref<java::lang::CharSequence> text, ref<java::time::format::DateTimeFormatter> formatter) { return call_static_method<SCAPIX_META_STRING("parse"), ref<java::time::LocalTime>>(text, formatter); }
inline jboolean LocalTime::isSupported(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(field); }
inline jboolean LocalTime::isSupported(ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("isSupported"), jboolean>(unit); }
inline ref<java::time::temporal::ValueRange> LocalTime::range(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("range"), ref<java::time::temporal::ValueRange>>(field); }
inline jint LocalTime::get(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("get"), jint>(field); }
inline jlong LocalTime::getLong(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(field); }
inline jint LocalTime::getHour() { return call_method<SCAPIX_META_STRING("getHour"), jint>(); }
inline jint LocalTime::getMinute() { return call_method<SCAPIX_META_STRING("getMinute"), jint>(); }
inline jint LocalTime::getSecond() { return call_method<SCAPIX_META_STRING("getSecond"), jint>(); }
inline jint LocalTime::getNano() { return call_method<SCAPIX_META_STRING("getNano"), jint>(); }
inline ref<java::time::LocalTime> LocalTime::with(ref<java::time::temporal::TemporalAdjuster> adjuster) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::LocalTime>>(adjuster); }
inline ref<java::time::LocalTime> LocalTime::with(ref<java::time::temporal::TemporalField> field, jlong newValue) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::LocalTime>>(field, newValue); }
inline ref<java::time::LocalTime> LocalTime::withHour(jint hour) { return call_method<SCAPIX_META_STRING("withHour"), ref<java::time::LocalTime>>(hour); }
inline ref<java::time::LocalTime> LocalTime::withMinute(jint minute) { return call_method<SCAPIX_META_STRING("withMinute"), ref<java::time::LocalTime>>(minute); }
inline ref<java::time::LocalTime> LocalTime::withSecond(jint second) { return call_method<SCAPIX_META_STRING("withSecond"), ref<java::time::LocalTime>>(second); }
inline ref<java::time::LocalTime> LocalTime::withNano(jint nanoOfSecond) { return call_method<SCAPIX_META_STRING("withNano"), ref<java::time::LocalTime>>(nanoOfSecond); }
inline ref<java::time::LocalTime> LocalTime::truncatedTo(ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("truncatedTo"), ref<java::time::LocalTime>>(unit); }
inline ref<java::time::LocalTime> LocalTime::plus(ref<java::time::temporal::TemporalAmount> amountToAdd) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::LocalTime>>(amountToAdd); }
inline ref<java::time::LocalTime> LocalTime::plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::LocalTime>>(amountToAdd, p2); }
inline ref<java::time::LocalTime> LocalTime::plusHours(jlong hoursToAdd) { return call_method<SCAPIX_META_STRING("plusHours"), ref<java::time::LocalTime>>(hoursToAdd); }
inline ref<java::time::LocalTime> LocalTime::plusMinutes(jlong minutesToAdd) { return call_method<SCAPIX_META_STRING("plusMinutes"), ref<java::time::LocalTime>>(minutesToAdd); }
inline ref<java::time::LocalTime> LocalTime::plusSeconds(jlong secondstoAdd) { return call_method<SCAPIX_META_STRING("plusSeconds"), ref<java::time::LocalTime>>(secondstoAdd); }
inline ref<java::time::LocalTime> LocalTime::plusNanos(jlong nanosToAdd) { return call_method<SCAPIX_META_STRING("plusNanos"), ref<java::time::LocalTime>>(nanosToAdd); }
inline ref<java::time::LocalTime> LocalTime::minus(ref<java::time::temporal::TemporalAmount> amountToSubtract) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::LocalTime>>(amountToSubtract); }
inline ref<java::time::LocalTime> LocalTime::minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::LocalTime>>(amountToSubtract, p2); }
inline ref<java::time::LocalTime> LocalTime::minusHours(jlong hoursToSubtract) { return call_method<SCAPIX_META_STRING("minusHours"), ref<java::time::LocalTime>>(hoursToSubtract); }
inline ref<java::time::LocalTime> LocalTime::minusMinutes(jlong minutesToSubtract) { return call_method<SCAPIX_META_STRING("minusMinutes"), ref<java::time::LocalTime>>(minutesToSubtract); }
inline ref<java::time::LocalTime> LocalTime::minusSeconds(jlong secondsToSubtract) { return call_method<SCAPIX_META_STRING("minusSeconds"), ref<java::time::LocalTime>>(secondsToSubtract); }
inline ref<java::time::LocalTime> LocalTime::minusNanos(jlong nanosToSubtract) { return call_method<SCAPIX_META_STRING("minusNanos"), ref<java::time::LocalTime>>(nanosToSubtract); }
inline ref<java::lang::Object> LocalTime::query(ref<java::time::temporal::TemporalQuery> query) { return call_method<SCAPIX_META_STRING("query"), ref<java::lang::Object>>(query); }
inline ref<java::time::temporal::Temporal> LocalTime::adjustInto(ref<java::time::temporal::Temporal> temporal) { return call_method<SCAPIX_META_STRING("adjustInto"), ref<java::time::temporal::Temporal>>(temporal); }
inline jlong LocalTime::until(ref<java::time::temporal::Temporal> endExclusive, ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("until"), jlong>(endExclusive, unit); }
inline ref<java::lang::String> LocalTime::format(ref<java::time::format::DateTimeFormatter> formatter) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::String>>(formatter); }
inline ref<java::time::LocalDateTime> LocalTime::atDate(ref<java::time::LocalDate> date) { return call_method<SCAPIX_META_STRING("atDate"), ref<java::time::LocalDateTime>>(date); }
inline ref<java::time::OffsetTime> LocalTime::atOffset(ref<java::time::ZoneOffset> offset) { return call_method<SCAPIX_META_STRING("atOffset"), ref<java::time::OffsetTime>>(offset); }
inline jint LocalTime::toSecondOfDay() { return call_method<SCAPIX_META_STRING("toSecondOfDay"), jint>(); }
inline jlong LocalTime::toNanoOfDay() { return call_method<SCAPIX_META_STRING("toNanoOfDay"), jlong>(); }
inline jint LocalTime::compareTo(ref<java::time::LocalTime> other) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(other); }
inline jboolean LocalTime::isAfter(ref<java::time::LocalTime> other) { return call_method<SCAPIX_META_STRING("isAfter"), jboolean>(other); }
inline jboolean LocalTime::isBefore(ref<java::time::LocalTime> other) { return call_method<SCAPIX_META_STRING("isBefore"), jboolean>(other); }
inline jboolean LocalTime::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint LocalTime::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> LocalTime::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_LOCALTIME_H
