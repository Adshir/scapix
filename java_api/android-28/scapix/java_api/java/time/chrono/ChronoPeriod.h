// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>

#ifndef SCAPIX_JAVA_TIME_CHRONO_CHRONOPERIOD_H
#define SCAPIX_JAVA_TIME_CHRONO_CHRONOPERIOD_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time::chrono { class ChronoLocalDate; }
namespace java::time::chrono { class Chronology; }
namespace java::time::temporal { class Temporal; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::util { class List; }

namespace java::time::chrono {

class ChronoPeriod : public object_base<SCAPIX_META_STRING("java/time/chrono/ChronoPeriod"),
	java::lang::Object,
	java::time::temporal::TemporalAmount>
{
public:

	static ref<java::time::chrono::ChronoPeriod> between(ref<java::time::chrono::ChronoLocalDate> startDateInclusive, ref<java::time::chrono::ChronoLocalDate> endDateExclusive);
	jlong get(ref<java::time::temporal::TemporalUnit> p1);
	ref<java::util::List> getUnits();
	ref<java::time::chrono::Chronology> getChronology();
	jboolean isZero();
	jboolean isNegative();
	ref<java::time::chrono::ChronoPeriod> plus(ref<java::time::temporal::TemporalAmount> p1);
	ref<java::time::chrono::ChronoPeriod> minus(ref<java::time::temporal::TemporalAmount> p1);
	ref<java::time::chrono::ChronoPeriod> multipliedBy(jint p1);
	ref<java::time::chrono::ChronoPeriod> negated();
	ref<java::time::chrono::ChronoPeriod> normalized();
	ref<java::time::temporal::Temporal> addTo(ref<java::time::temporal::Temporal> p1);
	ref<java::time::temporal::Temporal> subtractFrom(ref<java::time::temporal::Temporal> p1);
	jboolean equals(ref<java::lang::Object> p1);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	ChronoPeriod(handle_type h) : base_(h) {}

};

} // namespace java::time::chrono
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDate.h>
#include <scapix/java_api/java/time/chrono/Chronology.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace java::time::chrono {

inline ref<java::time::chrono::ChronoPeriod> ChronoPeriod::between(ref<java::time::chrono::ChronoLocalDate> startDateInclusive, ref<java::time::chrono::ChronoLocalDate> endDateExclusive) { return call_static_method<SCAPIX_META_STRING("between"), ref<java::time::chrono::ChronoPeriod>>(startDateInclusive, endDateExclusive); }
inline jlong ChronoPeriod::get(ref<java::time::temporal::TemporalUnit> p1) { return call_method<SCAPIX_META_STRING("get"), jlong>(p1); }
inline ref<java::util::List> ChronoPeriod::getUnits() { return call_method<SCAPIX_META_STRING("getUnits"), ref<java::util::List>>(); }
inline ref<java::time::chrono::Chronology> ChronoPeriod::getChronology() { return call_method<SCAPIX_META_STRING("getChronology"), ref<java::time::chrono::Chronology>>(); }
inline jboolean ChronoPeriod::isZero() { return call_method<SCAPIX_META_STRING("isZero"), jboolean>(); }
inline jboolean ChronoPeriod::isNegative() { return call_method<SCAPIX_META_STRING("isNegative"), jboolean>(); }
inline ref<java::time::chrono::ChronoPeriod> ChronoPeriod::plus(ref<java::time::temporal::TemporalAmount> p1) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::chrono::ChronoPeriod>>(p1); }
inline ref<java::time::chrono::ChronoPeriod> ChronoPeriod::minus(ref<java::time::temporal::TemporalAmount> p1) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::chrono::ChronoPeriod>>(p1); }
inline ref<java::time::chrono::ChronoPeriod> ChronoPeriod::multipliedBy(jint p1) { return call_method<SCAPIX_META_STRING("multipliedBy"), ref<java::time::chrono::ChronoPeriod>>(p1); }
inline ref<java::time::chrono::ChronoPeriod> ChronoPeriod::negated() { return call_method<SCAPIX_META_STRING("negated"), ref<java::time::chrono::ChronoPeriod>>(); }
inline ref<java::time::chrono::ChronoPeriod> ChronoPeriod::normalized() { return call_method<SCAPIX_META_STRING("normalized"), ref<java::time::chrono::ChronoPeriod>>(); }
inline ref<java::time::temporal::Temporal> ChronoPeriod::addTo(ref<java::time::temporal::Temporal> p1) { return call_method<SCAPIX_META_STRING("addTo"), ref<java::time::temporal::Temporal>>(p1); }
inline ref<java::time::temporal::Temporal> ChronoPeriod::subtractFrom(ref<java::time::temporal::Temporal> p1) { return call_method<SCAPIX_META_STRING("subtractFrom"), ref<java::time::temporal::Temporal>>(p1); }
inline jboolean ChronoPeriod::equals(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(p1); }
inline jint ChronoPeriod::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> ChronoPeriod::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time::chrono
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_CHRONO_CHRONOPERIOD_H
