// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDate.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_TIME_CHRONO_HIJRAHDATE_H
#define SCAPIX_JAVA_TIME_CHRONO_HIJRAHDATE_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::time { class Clock; }
namespace java::time { class LocalTime; }
namespace java::time { class ZoneId; }
namespace java::time::chrono { class ChronoLocalDateTime; }
namespace java::time::chrono { class ChronoPeriod; }
namespace java::time::chrono { class HijrahChronology; }
namespace java::time::chrono { class HijrahEra; }
namespace java::time::temporal { class TemporalAccessor; }
namespace java::time::temporal { class TemporalAmount; }
namespace java::time::temporal { class TemporalField; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::time::temporal { class ValueRange; }

namespace java::time::chrono {

class HijrahDate : public object_base<SCAPIX_META_STRING("java/time/chrono/HijrahDate"),
	java::lang::Object,
	java::time::chrono::ChronoLocalDate,
	java::time::temporal::Temporal,
	java::time::temporal::TemporalAdjuster,
	java::io::Serializable>
{
public:

	static ref<java::time::chrono::HijrahDate> now();
	static ref<java::time::chrono::HijrahDate> now(ref<java::time::ZoneId> zone);
	static ref<java::time::chrono::HijrahDate> now(ref<java::time::Clock> clock);
	static ref<java::time::chrono::HijrahDate> of(jint prolepticYear, jint month, jint dayOfMonth);
	static ref<java::time::chrono::HijrahDate> from(ref<java::time::temporal::TemporalAccessor> temporal);
	ref<java::time::chrono::HijrahChronology> getChronology();
	ref<java::time::chrono::HijrahEra> getEra();
	jint lengthOfMonth();
	jint lengthOfYear();
	ref<java::time::temporal::ValueRange> range(ref<java::time::temporal::TemporalField> field);
	jlong getLong(ref<java::time::temporal::TemporalField> field);
	ref<java::time::chrono::HijrahDate> with(ref<java::time::temporal::TemporalField> field, jlong newValue);
	ref<java::time::chrono::HijrahDate> with(ref<java::time::temporal::TemporalAdjuster> adjuster);
	ref<java::time::chrono::HijrahDate> withVariant(ref<java::time::chrono::HijrahChronology> chronology);
	ref<java::time::chrono::HijrahDate> plus(ref<java::time::temporal::TemporalAmount> amount);
	ref<java::time::chrono::HijrahDate> minus(ref<java::time::temporal::TemporalAmount> amount);
	jlong toEpochDay();
	jboolean isLeapYear();
	ref<java::time::chrono::HijrahDate> plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::chrono::HijrahDate> minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::chrono::ChronoLocalDateTime> atTime(ref<java::time::LocalTime> localTime);
	ref<java::time::chrono::ChronoPeriod> until(ref<java::time::chrono::ChronoLocalDate> endDate);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	jlong until(ref<java::time::temporal::Temporal> endExclusive, ref<java::time::temporal::TemporalUnit> unit);
	ref<java::lang::String> toString();

protected:

	HijrahDate(handle_type h) : base_(h) {}

};

} // namespace java::time::chrono
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Clock.h>
#include <scapix/java_api/java/time/LocalTime.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDateTime.h>
#include <scapix/java_api/java/time/chrono/ChronoPeriod.h>
#include <scapix/java_api/java/time/chrono/HijrahChronology.h>
#include <scapix/java_api/java/time/chrono/HijrahEra.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>

namespace scapix::java_api {
namespace java::time::chrono {

inline ref<java::time::chrono::HijrahDate> HijrahDate::now() { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::chrono::HijrahDate>>(); }
inline ref<java::time::chrono::HijrahDate> HijrahDate::now(ref<java::time::ZoneId> zone) { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::chrono::HijrahDate>>(zone); }
inline ref<java::time::chrono::HijrahDate> HijrahDate::now(ref<java::time::Clock> clock) { return call_static_method<SCAPIX_META_STRING("now"), ref<java::time::chrono::HijrahDate>>(clock); }
inline ref<java::time::chrono::HijrahDate> HijrahDate::of(jint prolepticYear, jint month, jint dayOfMonth) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::chrono::HijrahDate>>(prolepticYear, month, dayOfMonth); }
inline ref<java::time::chrono::HijrahDate> HijrahDate::from(ref<java::time::temporal::TemporalAccessor> temporal) { return call_static_method<SCAPIX_META_STRING("from"), ref<java::time::chrono::HijrahDate>>(temporal); }
inline ref<java::time::chrono::HijrahChronology> HijrahDate::getChronology() { return call_method<SCAPIX_META_STRING("getChronology"), ref<java::time::chrono::HijrahChronology>>(); }
inline ref<java::time::chrono::HijrahEra> HijrahDate::getEra() { return call_method<SCAPIX_META_STRING("getEra"), ref<java::time::chrono::HijrahEra>>(); }
inline jint HijrahDate::lengthOfMonth() { return call_method<SCAPIX_META_STRING("lengthOfMonth"), jint>(); }
inline jint HijrahDate::lengthOfYear() { return call_method<SCAPIX_META_STRING("lengthOfYear"), jint>(); }
inline ref<java::time::temporal::ValueRange> HijrahDate::range(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("range"), ref<java::time::temporal::ValueRange>>(field); }
inline jlong HijrahDate::getLong(ref<java::time::temporal::TemporalField> field) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(field); }
inline ref<java::time::chrono::HijrahDate> HijrahDate::with(ref<java::time::temporal::TemporalField> field, jlong newValue) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::chrono::HijrahDate>>(field, newValue); }
inline ref<java::time::chrono::HijrahDate> HijrahDate::with(ref<java::time::temporal::TemporalAdjuster> adjuster) { return call_method<SCAPIX_META_STRING("with"), ref<java::time::chrono::HijrahDate>>(adjuster); }
inline ref<java::time::chrono::HijrahDate> HijrahDate::withVariant(ref<java::time::chrono::HijrahChronology> chronology) { return call_method<SCAPIX_META_STRING("withVariant"), ref<java::time::chrono::HijrahDate>>(chronology); }
inline ref<java::time::chrono::HijrahDate> HijrahDate::plus(ref<java::time::temporal::TemporalAmount> amount) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::chrono::HijrahDate>>(amount); }
inline ref<java::time::chrono::HijrahDate> HijrahDate::minus(ref<java::time::temporal::TemporalAmount> amount) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::chrono::HijrahDate>>(amount); }
inline jlong HijrahDate::toEpochDay() { return call_method<SCAPIX_META_STRING("toEpochDay"), jlong>(); }
inline jboolean HijrahDate::isLeapYear() { return call_method<SCAPIX_META_STRING("isLeapYear"), jboolean>(); }
inline ref<java::time::chrono::HijrahDate> HijrahDate::plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::chrono::HijrahDate>>(amountToAdd, p2); }
inline ref<java::time::chrono::HijrahDate> HijrahDate::minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::chrono::HijrahDate>>(amountToSubtract, p2); }
inline ref<java::time::chrono::ChronoLocalDateTime> HijrahDate::atTime(ref<java::time::LocalTime> localTime) { return call_method<SCAPIX_META_STRING("atTime"), ref<java::time::chrono::ChronoLocalDateTime>>(localTime); }
inline ref<java::time::chrono::ChronoPeriod> HijrahDate::until(ref<java::time::chrono::ChronoLocalDate> endDate) { return call_method<SCAPIX_META_STRING("until"), ref<java::time::chrono::ChronoPeriod>>(endDate); }
inline jboolean HijrahDate::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint HijrahDate::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jlong HijrahDate::until(ref<java::time::temporal::Temporal> endExclusive, ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("until"), jlong>(endExclusive, unit); }
inline ref<java::lang::String> HijrahDate::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time::chrono
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_CHRONO_HIJRAHDATE_H
