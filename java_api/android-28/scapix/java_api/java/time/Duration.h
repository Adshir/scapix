// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_TIME_DURATION_H
#define SCAPIX_JAVA_TIME_DURATION_H

namespace scapix::java_api {

namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::time::temporal { class Temporal; }
namespace java::time::temporal { class TemporalUnit; }
namespace java::util { class List; }

namespace java::time {

class Duration : public object_base<SCAPIX_META_STRING("java/time/Duration"),
	java::lang::Object,
	java::time::temporal::TemporalAmount,
	java::lang::Comparable,
	java::io::Serializable>
{
public:

	static ref<java::time::Duration> ZERO_();

	static ref<java::time::Duration> ofDays(jlong days);
	static ref<java::time::Duration> ofHours(jlong hours);
	static ref<java::time::Duration> ofMinutes(jlong minutes);
	static ref<java::time::Duration> ofSeconds(jlong seconds);
	static ref<java::time::Duration> ofSeconds(jlong seconds, jlong p2);
	static ref<java::time::Duration> ofMillis(jlong millis);
	static ref<java::time::Duration> ofNanos(jlong nanos);
	static ref<java::time::Duration> of(jlong amount, ref<java::time::temporal::TemporalUnit> p2);
	static ref<java::time::Duration> from(ref<java::time::temporal::TemporalAmount> amount);
	static ref<java::time::Duration> parse(ref<java::lang::CharSequence> text);
	static ref<java::time::Duration> between(ref<java::time::temporal::Temporal> startInclusive, ref<java::time::temporal::Temporal> endExclusive);
	jlong get(ref<java::time::temporal::TemporalUnit> unit);
	ref<java::util::List> getUnits();
	jboolean isZero();
	jboolean isNegative();
	jlong getSeconds();
	jint getNano();
	ref<java::time::Duration> withSeconds(jlong seconds);
	ref<java::time::Duration> withNanos(jint nanoOfSecond);
	ref<java::time::Duration> plus(ref<java::time::Duration> duration);
	ref<java::time::Duration> plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::Duration> plusDays(jlong daysToAdd);
	ref<java::time::Duration> plusHours(jlong hoursToAdd);
	ref<java::time::Duration> plusMinutes(jlong minutesToAdd);
	ref<java::time::Duration> plusSeconds(jlong secondsToAdd);
	ref<java::time::Duration> plusMillis(jlong millisToAdd);
	ref<java::time::Duration> plusNanos(jlong nanosToAdd);
	ref<java::time::Duration> minus(ref<java::time::Duration> duration);
	ref<java::time::Duration> minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2);
	ref<java::time::Duration> minusDays(jlong daysToSubtract);
	ref<java::time::Duration> minusHours(jlong hoursToSubtract);
	ref<java::time::Duration> minusMinutes(jlong minutesToSubtract);
	ref<java::time::Duration> minusSeconds(jlong secondsToSubtract);
	ref<java::time::Duration> minusMillis(jlong millisToSubtract);
	ref<java::time::Duration> minusNanos(jlong nanosToSubtract);
	ref<java::time::Duration> multipliedBy(jlong multiplicand);
	ref<java::time::Duration> dividedBy(jlong divisor);
	ref<java::time::Duration> negated();
	ref<java::time::Duration> abs();
	ref<java::time::temporal::Temporal> addTo(ref<java::time::temporal::Temporal> temporal);
	ref<java::time::temporal::Temporal> subtractFrom(ref<java::time::temporal::Temporal> temporal);
	jlong toDays();
	jlong toHours();
	jlong toMinutes();
	jlong toMillis();
	jlong toNanos();
	jint compareTo(ref<java::time::Duration> otherDuration);
	jboolean equals(ref<java::lang::Object> otherDuration);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	Duration(handle_type h) : base_(h) {}

};

} // namespace java::time
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace java::time {

inline ref<java::time::Duration> Duration::ZERO_() { return get_static_field<SCAPIX_META_STRING("ZERO"), ref<java::time::Duration>>(); }
inline ref<java::time::Duration> Duration::ofDays(jlong days) { return call_static_method<SCAPIX_META_STRING("ofDays"), ref<java::time::Duration>>(days); }
inline ref<java::time::Duration> Duration::ofHours(jlong hours) { return call_static_method<SCAPIX_META_STRING("ofHours"), ref<java::time::Duration>>(hours); }
inline ref<java::time::Duration> Duration::ofMinutes(jlong minutes) { return call_static_method<SCAPIX_META_STRING("ofMinutes"), ref<java::time::Duration>>(minutes); }
inline ref<java::time::Duration> Duration::ofSeconds(jlong seconds) { return call_static_method<SCAPIX_META_STRING("ofSeconds"), ref<java::time::Duration>>(seconds); }
inline ref<java::time::Duration> Duration::ofSeconds(jlong seconds, jlong p2) { return call_static_method<SCAPIX_META_STRING("ofSeconds"), ref<java::time::Duration>>(seconds, p2); }
inline ref<java::time::Duration> Duration::ofMillis(jlong millis) { return call_static_method<SCAPIX_META_STRING("ofMillis"), ref<java::time::Duration>>(millis); }
inline ref<java::time::Duration> Duration::ofNanos(jlong nanos) { return call_static_method<SCAPIX_META_STRING("ofNanos"), ref<java::time::Duration>>(nanos); }
inline ref<java::time::Duration> Duration::of(jlong amount, ref<java::time::temporal::TemporalUnit> p2) { return call_static_method<SCAPIX_META_STRING("of"), ref<java::time::Duration>>(amount, p2); }
inline ref<java::time::Duration> Duration::from(ref<java::time::temporal::TemporalAmount> amount) { return call_static_method<SCAPIX_META_STRING("from"), ref<java::time::Duration>>(amount); }
inline ref<java::time::Duration> Duration::parse(ref<java::lang::CharSequence> text) { return call_static_method<SCAPIX_META_STRING("parse"), ref<java::time::Duration>>(text); }
inline ref<java::time::Duration> Duration::between(ref<java::time::temporal::Temporal> startInclusive, ref<java::time::temporal::Temporal> endExclusive) { return call_static_method<SCAPIX_META_STRING("between"), ref<java::time::Duration>>(startInclusive, endExclusive); }
inline jlong Duration::get(ref<java::time::temporal::TemporalUnit> unit) { return call_method<SCAPIX_META_STRING("get"), jlong>(unit); }
inline ref<java::util::List> Duration::getUnits() { return call_method<SCAPIX_META_STRING("getUnits"), ref<java::util::List>>(); }
inline jboolean Duration::isZero() { return call_method<SCAPIX_META_STRING("isZero"), jboolean>(); }
inline jboolean Duration::isNegative() { return call_method<SCAPIX_META_STRING("isNegative"), jboolean>(); }
inline jlong Duration::getSeconds() { return call_method<SCAPIX_META_STRING("getSeconds"), jlong>(); }
inline jint Duration::getNano() { return call_method<SCAPIX_META_STRING("getNano"), jint>(); }
inline ref<java::time::Duration> Duration::withSeconds(jlong seconds) { return call_method<SCAPIX_META_STRING("withSeconds"), ref<java::time::Duration>>(seconds); }
inline ref<java::time::Duration> Duration::withNanos(jint nanoOfSecond) { return call_method<SCAPIX_META_STRING("withNanos"), ref<java::time::Duration>>(nanoOfSecond); }
inline ref<java::time::Duration> Duration::plus(ref<java::time::Duration> duration) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::Duration>>(duration); }
inline ref<java::time::Duration> Duration::plus(jlong amountToAdd, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("plus"), ref<java::time::Duration>>(amountToAdd, p2); }
inline ref<java::time::Duration> Duration::plusDays(jlong daysToAdd) { return call_method<SCAPIX_META_STRING("plusDays"), ref<java::time::Duration>>(daysToAdd); }
inline ref<java::time::Duration> Duration::plusHours(jlong hoursToAdd) { return call_method<SCAPIX_META_STRING("plusHours"), ref<java::time::Duration>>(hoursToAdd); }
inline ref<java::time::Duration> Duration::plusMinutes(jlong minutesToAdd) { return call_method<SCAPIX_META_STRING("plusMinutes"), ref<java::time::Duration>>(minutesToAdd); }
inline ref<java::time::Duration> Duration::plusSeconds(jlong secondsToAdd) { return call_method<SCAPIX_META_STRING("plusSeconds"), ref<java::time::Duration>>(secondsToAdd); }
inline ref<java::time::Duration> Duration::plusMillis(jlong millisToAdd) { return call_method<SCAPIX_META_STRING("plusMillis"), ref<java::time::Duration>>(millisToAdd); }
inline ref<java::time::Duration> Duration::plusNanos(jlong nanosToAdd) { return call_method<SCAPIX_META_STRING("plusNanos"), ref<java::time::Duration>>(nanosToAdd); }
inline ref<java::time::Duration> Duration::minus(ref<java::time::Duration> duration) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::Duration>>(duration); }
inline ref<java::time::Duration> Duration::minus(jlong amountToSubtract, ref<java::time::temporal::TemporalUnit> p2) { return call_method<SCAPIX_META_STRING("minus"), ref<java::time::Duration>>(amountToSubtract, p2); }
inline ref<java::time::Duration> Duration::minusDays(jlong daysToSubtract) { return call_method<SCAPIX_META_STRING("minusDays"), ref<java::time::Duration>>(daysToSubtract); }
inline ref<java::time::Duration> Duration::minusHours(jlong hoursToSubtract) { return call_method<SCAPIX_META_STRING("minusHours"), ref<java::time::Duration>>(hoursToSubtract); }
inline ref<java::time::Duration> Duration::minusMinutes(jlong minutesToSubtract) { return call_method<SCAPIX_META_STRING("minusMinutes"), ref<java::time::Duration>>(minutesToSubtract); }
inline ref<java::time::Duration> Duration::minusSeconds(jlong secondsToSubtract) { return call_method<SCAPIX_META_STRING("minusSeconds"), ref<java::time::Duration>>(secondsToSubtract); }
inline ref<java::time::Duration> Duration::minusMillis(jlong millisToSubtract) { return call_method<SCAPIX_META_STRING("minusMillis"), ref<java::time::Duration>>(millisToSubtract); }
inline ref<java::time::Duration> Duration::minusNanos(jlong nanosToSubtract) { return call_method<SCAPIX_META_STRING("minusNanos"), ref<java::time::Duration>>(nanosToSubtract); }
inline ref<java::time::Duration> Duration::multipliedBy(jlong multiplicand) { return call_method<SCAPIX_META_STRING("multipliedBy"), ref<java::time::Duration>>(multiplicand); }
inline ref<java::time::Duration> Duration::dividedBy(jlong divisor) { return call_method<SCAPIX_META_STRING("dividedBy"), ref<java::time::Duration>>(divisor); }
inline ref<java::time::Duration> Duration::negated() { return call_method<SCAPIX_META_STRING("negated"), ref<java::time::Duration>>(); }
inline ref<java::time::Duration> Duration::abs() { return call_method<SCAPIX_META_STRING("abs"), ref<java::time::Duration>>(); }
inline ref<java::time::temporal::Temporal> Duration::addTo(ref<java::time::temporal::Temporal> temporal) { return call_method<SCAPIX_META_STRING("addTo"), ref<java::time::temporal::Temporal>>(temporal); }
inline ref<java::time::temporal::Temporal> Duration::subtractFrom(ref<java::time::temporal::Temporal> temporal) { return call_method<SCAPIX_META_STRING("subtractFrom"), ref<java::time::temporal::Temporal>>(temporal); }
inline jlong Duration::toDays() { return call_method<SCAPIX_META_STRING("toDays"), jlong>(); }
inline jlong Duration::toHours() { return call_method<SCAPIX_META_STRING("toHours"), jlong>(); }
inline jlong Duration::toMinutes() { return call_method<SCAPIX_META_STRING("toMinutes"), jlong>(); }
inline jlong Duration::toMillis() { return call_method<SCAPIX_META_STRING("toMillis"), jlong>(); }
inline jlong Duration::toNanos() { return call_method<SCAPIX_META_STRING("toNanos"), jlong>(); }
inline jint Duration::compareTo(ref<java::time::Duration> otherDuration) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(otherDuration); }
inline jboolean Duration::equals(ref<java::lang::Object> otherDuration) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(otherDuration); }
inline jint Duration::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> Duration::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::time
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_TIME_DURATION_H
