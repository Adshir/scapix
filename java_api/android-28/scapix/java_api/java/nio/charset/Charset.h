// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_NIO_CHARSET_CHARSET_H
#define SCAPIX_JAVA_NIO_CHARSET_CHARSET_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::nio { class ByteBuffer; }
namespace java::nio { class CharBuffer; }
namespace java::nio::charset { class CharsetDecoder; }
namespace java::nio::charset { class CharsetEncoder; }
namespace java::util { class Locale; }
namespace java::util { class Set; }
namespace java::util { class SortedMap; }

namespace java::nio::charset {

class Charset : public object_base<SCAPIX_META_STRING("java/nio/charset/Charset"),
	java::lang::Object,
	java::lang::Comparable>
{
public:

	static jboolean isSupported(ref<java::lang::String> charsetName);
	static ref<java::nio::charset::Charset> forName(ref<java::lang::String> charsetName);
	static ref<java::util::SortedMap> availableCharsets();
	static ref<java::nio::charset::Charset> defaultCharset();
	ref<java::lang::String> name();
	ref<java::util::Set> aliases();
	ref<java::lang::String> displayName();
	jboolean isRegistered();
	ref<java::lang::String> displayName(ref<java::util::Locale> locale);
	jboolean contains(ref<java::nio::charset::Charset> p1);
	ref<java::nio::charset::CharsetDecoder> newDecoder();
	ref<java::nio::charset::CharsetEncoder> newEncoder();
	jboolean canEncode();
	ref<java::nio::CharBuffer> decode(ref<java::nio::ByteBuffer> bb);
	ref<java::nio::ByteBuffer> encode(ref<java::nio::CharBuffer> cb);
	ref<java::nio::ByteBuffer> encode(ref<java::lang::String> str);
	jint compareTo(ref<java::nio::charset::Charset> that);
	jint hashCode();
	jboolean equals(ref<java::lang::Object> ob);
	ref<java::lang::String> toString();

protected:

	Charset(handle_type h) : base_(h) {}

};

} // namespace java::nio::charset
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/CharBuffer.h>
#include <scapix/java_api/java/nio/charset/CharsetDecoder.h>
#include <scapix/java_api/java/nio/charset/CharsetEncoder.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/SortedMap.h>

namespace scapix::java_api {
namespace java::nio::charset {

inline jboolean Charset::isSupported(ref<java::lang::String> charsetName) { return call_static_method<SCAPIX_META_STRING("isSupported"), jboolean>(charsetName); }
inline ref<java::nio::charset::Charset> Charset::forName(ref<java::lang::String> charsetName) { return call_static_method<SCAPIX_META_STRING("forName"), ref<java::nio::charset::Charset>>(charsetName); }
inline ref<java::util::SortedMap> Charset::availableCharsets() { return call_static_method<SCAPIX_META_STRING("availableCharsets"), ref<java::util::SortedMap>>(); }
inline ref<java::nio::charset::Charset> Charset::defaultCharset() { return call_static_method<SCAPIX_META_STRING("defaultCharset"), ref<java::nio::charset::Charset>>(); }
inline ref<java::lang::String> Charset::name() { return call_method<SCAPIX_META_STRING("name"), ref<java::lang::String>>(); }
inline ref<java::util::Set> Charset::aliases() { return call_method<SCAPIX_META_STRING("aliases"), ref<java::util::Set>>(); }
inline ref<java::lang::String> Charset::displayName() { return call_method<SCAPIX_META_STRING("displayName"), ref<java::lang::String>>(); }
inline jboolean Charset::isRegistered() { return call_method<SCAPIX_META_STRING("isRegistered"), jboolean>(); }
inline ref<java::lang::String> Charset::displayName(ref<java::util::Locale> locale) { return call_method<SCAPIX_META_STRING("displayName"), ref<java::lang::String>>(locale); }
inline jboolean Charset::contains(ref<java::nio::charset::Charset> p1) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(p1); }
inline ref<java::nio::charset::CharsetDecoder> Charset::newDecoder() { return call_method<SCAPIX_META_STRING("newDecoder"), ref<java::nio::charset::CharsetDecoder>>(); }
inline ref<java::nio::charset::CharsetEncoder> Charset::newEncoder() { return call_method<SCAPIX_META_STRING("newEncoder"), ref<java::nio::charset::CharsetEncoder>>(); }
inline jboolean Charset::canEncode() { return call_method<SCAPIX_META_STRING("canEncode"), jboolean>(); }
inline ref<java::nio::CharBuffer> Charset::decode(ref<java::nio::ByteBuffer> bb) { return call_method<SCAPIX_META_STRING("decode"), ref<java::nio::CharBuffer>>(bb); }
inline ref<java::nio::ByteBuffer> Charset::encode(ref<java::nio::CharBuffer> cb) { return call_method<SCAPIX_META_STRING("encode"), ref<java::nio::ByteBuffer>>(cb); }
inline ref<java::nio::ByteBuffer> Charset::encode(ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("encode"), ref<java::nio::ByteBuffer>>(str); }
inline jint Charset::compareTo(ref<java::nio::charset::Charset> that) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(that); }
inline jint Charset::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean Charset::equals(ref<java::lang::Object> ob) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(ob); }
inline ref<java::lang::String> Charset::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::nio::charset
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHARSET_CHARSET_H
