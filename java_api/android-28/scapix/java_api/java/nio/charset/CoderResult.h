// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_NIO_CHARSET_CODERRESULT_H
#define SCAPIX_JAVA_NIO_CHARSET_CODERRESULT_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace java::nio::charset {

class CoderResult : public object_base<SCAPIX_META_STRING("java/nio/charset/CoderResult"),
	java::lang::Object>
{
public:

	static ref<java::nio::charset::CoderResult> OVERFLOW_();
	static ref<java::nio::charset::CoderResult> UNDERFLOW_();

	ref<java::lang::String> toString();
	jboolean isUnderflow();
	jboolean isOverflow();
	jboolean isError();
	jboolean isMalformed();
	jboolean isUnmappable();
	jint length();
	static ref<java::nio::charset::CoderResult> malformedForLength(jint length);
	static ref<java::nio::charset::CoderResult> unmappableForLength(jint length);
	void throwException();

protected:

	CoderResult(handle_type h) : base_(h) {}

};

} // namespace java::nio::charset
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::nio::charset {

inline ref<java::nio::charset::CoderResult> CoderResult::OVERFLOW_() { return get_static_field<SCAPIX_META_STRING("OVERFLOW"), ref<java::nio::charset::CoderResult>>(); }
inline ref<java::nio::charset::CoderResult> CoderResult::UNDERFLOW_() { return get_static_field<SCAPIX_META_STRING("UNDERFLOW"), ref<java::nio::charset::CoderResult>>(); }
inline ref<java::lang::String> CoderResult::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean CoderResult::isUnderflow() { return call_method<SCAPIX_META_STRING("isUnderflow"), jboolean>(); }
inline jboolean CoderResult::isOverflow() { return call_method<SCAPIX_META_STRING("isOverflow"), jboolean>(); }
inline jboolean CoderResult::isError() { return call_method<SCAPIX_META_STRING("isError"), jboolean>(); }
inline jboolean CoderResult::isMalformed() { return call_method<SCAPIX_META_STRING("isMalformed"), jboolean>(); }
inline jboolean CoderResult::isUnmappable() { return call_method<SCAPIX_META_STRING("isUnmappable"), jboolean>(); }
inline jint CoderResult::length() { return call_method<SCAPIX_META_STRING("length"), jint>(); }
inline ref<java::nio::charset::CoderResult> CoderResult::malformedForLength(jint length) { return call_static_method<SCAPIX_META_STRING("malformedForLength"), ref<java::nio::charset::CoderResult>>(length); }
inline ref<java::nio::charset::CoderResult> CoderResult::unmappableForLength(jint length) { return call_static_method<SCAPIX_META_STRING("unmappableForLength"), ref<java::nio::charset::CoderResult>>(length); }
inline void CoderResult::throwException() { return call_method<SCAPIX_META_STRING("throwException"), void>(); }

} // namespace java::nio::charset
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHARSET_CODERRESULT_H
