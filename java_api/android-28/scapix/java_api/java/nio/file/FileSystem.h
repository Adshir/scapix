// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_NIO_FILE_FILESYSTEM_H
#define SCAPIX_JAVA_NIO_FILE_FILESYSTEM_H

namespace scapix::java_api {

namespace java::lang { class Iterable; }
namespace java::lang { class String; }
namespace java::nio::file { class Path; }
namespace java::nio::file { class PathMatcher; }
namespace java::nio::file { class WatchService; }
namespace java::nio::file::attribute { class UserPrincipalLookupService; }
namespace java::nio::file::spi { class FileSystemProvider; }
namespace java::util { class Set; }

namespace java::nio::file {

class FileSystem : public object_base<SCAPIX_META_STRING("java/nio/file/FileSystem"),
	java::lang::Object,
	java::io::Closeable>
{
public:

	ref<java::nio::file::spi::FileSystemProvider> provider();
	void close();
	jboolean isOpen();
	jboolean isReadOnly();
	ref<java::lang::String> getSeparator();
	ref<java::lang::Iterable> getRootDirectories();
	ref<java::lang::Iterable> getFileStores();
	ref<java::util::Set> supportedFileAttributeViews();
	ref<java::nio::file::Path> getPath(ref<java::lang::String> p1, ref<link::java::array<java::lang::String>> p2);
	ref<java::nio::file::PathMatcher> getPathMatcher(ref<java::lang::String> p1);
	ref<java::nio::file::attribute::UserPrincipalLookupService> getUserPrincipalLookupService();
	ref<java::nio::file::WatchService> newWatchService();

protected:

	FileSystem(handle_type h) : base_(h) {}

};

} // namespace java::nio::file
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Iterable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/file/Path.h>
#include <scapix/java_api/java/nio/file/PathMatcher.h>
#include <scapix/java_api/java/nio/file/WatchService.h>
#include <scapix/java_api/java/nio/file/attribute/UserPrincipalLookupService.h>
#include <scapix/java_api/java/nio/file/spi/FileSystemProvider.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace java::nio::file {

inline ref<java::nio::file::spi::FileSystemProvider> FileSystem::provider() { return call_method<SCAPIX_META_STRING("provider"), ref<java::nio::file::spi::FileSystemProvider>>(); }
inline void FileSystem::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jboolean FileSystem::isOpen() { return call_method<SCAPIX_META_STRING("isOpen"), jboolean>(); }
inline jboolean FileSystem::isReadOnly() { return call_method<SCAPIX_META_STRING("isReadOnly"), jboolean>(); }
inline ref<java::lang::String> FileSystem::getSeparator() { return call_method<SCAPIX_META_STRING("getSeparator"), ref<java::lang::String>>(); }
inline ref<java::lang::Iterable> FileSystem::getRootDirectories() { return call_method<SCAPIX_META_STRING("getRootDirectories"), ref<java::lang::Iterable>>(); }
inline ref<java::lang::Iterable> FileSystem::getFileStores() { return call_method<SCAPIX_META_STRING("getFileStores"), ref<java::lang::Iterable>>(); }
inline ref<java::util::Set> FileSystem::supportedFileAttributeViews() { return call_method<SCAPIX_META_STRING("supportedFileAttributeViews"), ref<java::util::Set>>(); }
inline ref<java::nio::file::Path> FileSystem::getPath(ref<java::lang::String> p1, ref<link::java::array<java::lang::String>> p2) { return call_method<SCAPIX_META_STRING("getPath"), ref<java::nio::file::Path>>(p1, p2); }
inline ref<java::nio::file::PathMatcher> FileSystem::getPathMatcher(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getPathMatcher"), ref<java::nio::file::PathMatcher>>(p1); }
inline ref<java::nio::file::attribute::UserPrincipalLookupService> FileSystem::getUserPrincipalLookupService() { return call_method<SCAPIX_META_STRING("getUserPrincipalLookupService"), ref<java::nio::file::attribute::UserPrincipalLookupService>>(); }
inline ref<java::nio::file::WatchService> FileSystem::newWatchService() { return call_method<SCAPIX_META_STRING("newWatchService"), ref<java::nio::file::WatchService>>(); }

} // namespace java::nio::file
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_FILE_FILESYSTEM_H
