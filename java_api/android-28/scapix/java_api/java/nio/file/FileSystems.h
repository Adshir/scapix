// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_NIO_FILE_FILESYSTEMS_H
#define SCAPIX_JAVA_NIO_FILE_FILESYSTEMS_H

namespace scapix::java_api {

namespace java::lang { class ClassLoader; }
namespace java::net { class URI; }
namespace java::nio::file { class FileSystem; }
namespace java::nio::file { class Path; }
namespace java::util { class Map; }

namespace java::nio::file {

class FileSystems : public object_base<SCAPIX_META_STRING("java/nio/file/FileSystems"),
	java::lang::Object>
{
public:

	static ref<java::nio::file::FileSystem> getDefault();
	static ref<java::nio::file::FileSystem> getFileSystem(ref<java::net::URI> uri);
	static ref<java::nio::file::FileSystem> newFileSystem(ref<java::net::URI> uri, ref<java::util::Map> env);
	static ref<java::nio::file::FileSystem> newFileSystem(ref<java::net::URI> uri, ref<java::util::Map> env, ref<java::lang::ClassLoader> loader);
	static ref<java::nio::file::FileSystem> newFileSystem(ref<java::nio::file::Path> path, ref<java::lang::ClassLoader> loader);

protected:

	FileSystems(handle_type h) : base_(h) {}

};

} // namespace java::nio::file
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/net/URI.h>
#include <scapix/java_api/java/nio/file/FileSystem.h>
#include <scapix/java_api/java/nio/file/Path.h>
#include <scapix/java_api/java/util/Map.h>

namespace scapix::java_api {
namespace java::nio::file {

inline ref<java::nio::file::FileSystem> FileSystems::getDefault() { return call_static_method<SCAPIX_META_STRING("getDefault"), ref<java::nio::file::FileSystem>>(); }
inline ref<java::nio::file::FileSystem> FileSystems::getFileSystem(ref<java::net::URI> uri) { return call_static_method<SCAPIX_META_STRING("getFileSystem"), ref<java::nio::file::FileSystem>>(uri); }
inline ref<java::nio::file::FileSystem> FileSystems::newFileSystem(ref<java::net::URI> uri, ref<java::util::Map> env) { return call_static_method<SCAPIX_META_STRING("newFileSystem"), ref<java::nio::file::FileSystem>>(uri, env); }
inline ref<java::nio::file::FileSystem> FileSystems::newFileSystem(ref<java::net::URI> uri, ref<java::util::Map> env, ref<java::lang::ClassLoader> loader) { return call_static_method<SCAPIX_META_STRING("newFileSystem"), ref<java::nio::file::FileSystem>>(uri, env, loader); }
inline ref<java::nio::file::FileSystem> FileSystems::newFileSystem(ref<java::nio::file::Path> path, ref<java::lang::ClassLoader> loader) { return call_static_method<SCAPIX_META_STRING("newFileSystem"), ref<java::nio::file::FileSystem>>(path, loader); }

} // namespace java::nio::file
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_FILE_FILESYSTEMS_H
