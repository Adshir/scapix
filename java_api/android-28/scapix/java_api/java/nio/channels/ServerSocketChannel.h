// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/channels/spi/AbstractSelectableChannel.h>
#include <scapix/java_api/java/nio/channels/NetworkChannel.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_SERVERSOCKETCHANNEL_H
#define SCAPIX_JAVA_NIO_CHANNELS_SERVERSOCKETCHANNEL_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::net { class ServerSocket; }
namespace java::net { class SocketAddress; }
namespace java::net { class SocketOption; }
namespace java::nio::channels { class SocketChannel; }

namespace java::nio::channels {

class ServerSocketChannel : public object_base<SCAPIX_META_STRING("java/nio/channels/ServerSocketChannel"),
	java::nio::channels::spi::AbstractSelectableChannel,
	java::nio::channels::NetworkChannel>
{
public:

	static ref<java::nio::channels::ServerSocketChannel> open();
	jint validOps();
	ref<java::nio::channels::ServerSocketChannel> bind(ref<java::net::SocketAddress> local);
	ref<java::nio::channels::ServerSocketChannel> bind(ref<java::net::SocketAddress> p1, jint p2);
	ref<java::nio::channels::ServerSocketChannel> setOption(ref<java::net::SocketOption> p1, ref<java::lang::Object> p2);
	ref<java::net::ServerSocket> socket();
	ref<java::nio::channels::SocketChannel> accept();
	ref<java::net::SocketAddress> getLocalAddress();

protected:

	ServerSocketChannel(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/net/ServerSocket.h>
#include <scapix/java_api/java/net/SocketAddress.h>
#include <scapix/java_api/java/net/SocketOption.h>
#include <scapix/java_api/java/nio/channels/SocketChannel.h>

namespace scapix::java_api {
namespace java::nio::channels {

inline ref<java::nio::channels::ServerSocketChannel> ServerSocketChannel::open() { return call_static_method<SCAPIX_META_STRING("open"), ref<java::nio::channels::ServerSocketChannel>>(); }
inline jint ServerSocketChannel::validOps() { return call_method<SCAPIX_META_STRING("validOps"), jint>(); }
inline ref<java::nio::channels::ServerSocketChannel> ServerSocketChannel::bind(ref<java::net::SocketAddress> local) { return call_method<SCAPIX_META_STRING("bind"), ref<java::nio::channels::ServerSocketChannel>>(local); }
inline ref<java::nio::channels::ServerSocketChannel> ServerSocketChannel::bind(ref<java::net::SocketAddress> p1, jint p2) { return call_method<SCAPIX_META_STRING("bind"), ref<java::nio::channels::ServerSocketChannel>>(p1, p2); }
inline ref<java::nio::channels::ServerSocketChannel> ServerSocketChannel::setOption(ref<java::net::SocketOption> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("setOption"), ref<java::nio::channels::ServerSocketChannel>>(p1, p2); }
inline ref<java::net::ServerSocket> ServerSocketChannel::socket() { return call_method<SCAPIX_META_STRING("socket"), ref<java::net::ServerSocket>>(); }
inline ref<java::nio::channels::SocketChannel> ServerSocketChannel::accept() { return call_method<SCAPIX_META_STRING("accept"), ref<java::nio::channels::SocketChannel>>(); }
inline ref<java::net::SocketAddress> ServerSocketChannel::getLocalAddress() { return call_method<SCAPIX_META_STRING("getLocalAddress"), ref<java::net::SocketAddress>>(); }

} // namespace java::nio::channels
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_SERVERSOCKETCHANNEL_H
