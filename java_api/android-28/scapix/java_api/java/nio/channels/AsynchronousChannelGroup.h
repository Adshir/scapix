// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_ASYNCHRONOUSCHANNELGROUP_H
#define SCAPIX_JAVA_NIO_CHANNELS_ASYNCHRONOUSCHANNELGROUP_H

namespace scapix::java_api {

namespace java::nio::channels::spi { class AsynchronousChannelProvider; }
namespace java::util::concurrent { class ExecutorService; }
namespace java::util::concurrent { class ThreadFactory; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::nio::channels {

class AsynchronousChannelGroup : public object_base<SCAPIX_META_STRING("java/nio/channels/AsynchronousChannelGroup"),
	java::lang::Object>
{
public:

	ref<java::nio::channels::spi::AsynchronousChannelProvider> provider();
	static ref<java::nio::channels::AsynchronousChannelGroup> withFixedThreadPool(jint nThreads, ref<java::util::concurrent::ThreadFactory> threadFactory);
	static ref<java::nio::channels::AsynchronousChannelGroup> withCachedThreadPool(ref<java::util::concurrent::ExecutorService> executor, jint initialSize);
	static ref<java::nio::channels::AsynchronousChannelGroup> withThreadPool(ref<java::util::concurrent::ExecutorService> executor);
	jboolean isShutdown();
	jboolean isTerminated();
	void shutdown();
	void shutdownNow();
	jboolean awaitTermination(jlong p1, ref<java::util::concurrent::TimeUnit> p2);

protected:

	AsynchronousChannelGroup(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/channels/spi/AsynchronousChannelProvider.h>
#include <scapix/java_api/java/util/concurrent/ExecutorService.h>
#include <scapix/java_api/java/util/concurrent/ThreadFactory.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::nio::channels {

inline ref<java::nio::channels::spi::AsynchronousChannelProvider> AsynchronousChannelGroup::provider() { return call_method<SCAPIX_META_STRING("provider"), ref<java::nio::channels::spi::AsynchronousChannelProvider>>(); }
inline ref<java::nio::channels::AsynchronousChannelGroup> AsynchronousChannelGroup::withFixedThreadPool(jint nThreads, ref<java::util::concurrent::ThreadFactory> threadFactory) { return call_static_method<SCAPIX_META_STRING("withFixedThreadPool"), ref<java::nio::channels::AsynchronousChannelGroup>>(nThreads, threadFactory); }
inline ref<java::nio::channels::AsynchronousChannelGroup> AsynchronousChannelGroup::withCachedThreadPool(ref<java::util::concurrent::ExecutorService> executor, jint initialSize) { return call_static_method<SCAPIX_META_STRING("withCachedThreadPool"), ref<java::nio::channels::AsynchronousChannelGroup>>(executor, initialSize); }
inline ref<java::nio::channels::AsynchronousChannelGroup> AsynchronousChannelGroup::withThreadPool(ref<java::util::concurrent::ExecutorService> executor) { return call_static_method<SCAPIX_META_STRING("withThreadPool"), ref<java::nio::channels::AsynchronousChannelGroup>>(executor); }
inline jboolean AsynchronousChannelGroup::isShutdown() { return call_method<SCAPIX_META_STRING("isShutdown"), jboolean>(); }
inline jboolean AsynchronousChannelGroup::isTerminated() { return call_method<SCAPIX_META_STRING("isTerminated"), jboolean>(); }
inline void AsynchronousChannelGroup::shutdown() { return call_method<SCAPIX_META_STRING("shutdown"), void>(); }
inline void AsynchronousChannelGroup::shutdownNow() { return call_method<SCAPIX_META_STRING("shutdownNow"), void>(); }
inline jboolean AsynchronousChannelGroup::awaitTermination(jlong p1, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("awaitTermination"), jboolean>(p1, p2); }

} // namespace java::nio::channels
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_ASYNCHRONOUSCHANNELGROUP_H
