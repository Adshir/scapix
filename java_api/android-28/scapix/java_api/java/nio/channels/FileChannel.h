// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/channels/spi/AbstractInterruptibleChannel.h>
#include <scapix/java_api/java/nio/channels/SeekableByteChannel.h>
#include <scapix/java_api/java/nio/channels/GatheringByteChannel.h>
#include <scapix/java_api/java/nio/channels/ScatteringByteChannel.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_FILECHANNEL_H
#define SCAPIX_JAVA_NIO_CHANNELS_FILECHANNEL_H

namespace scapix::java_api {

namespace java::nio { class ByteBuffer; }
namespace java::nio { class MappedByteBuffer; }
namespace java::nio::channels { class FileChannel_MapMode; }
namespace java::nio::channels { class FileLock; }
namespace java::nio::channels { class ReadableByteChannel; }
namespace java::nio::channels { class WritableByteChannel; }
namespace java::nio::file { class OpenOption; }
namespace java::nio::file { class Path; }
namespace java::nio::file::attribute { class FileAttribute; }
namespace java::util { class Set; }

namespace java::nio::channels {

class FileChannel : public object_base<SCAPIX_META_STRING("java/nio/channels/FileChannel"),
	java::nio::channels::spi::AbstractInterruptibleChannel,
	java::nio::channels::SeekableByteChannel,
	java::nio::channels::GatheringByteChannel,
	java::nio::channels::ScatteringByteChannel>
{
public:

	using MapMode = FileChannel_MapMode;

	static ref<java::nio::channels::FileChannel> open(ref<java::nio::file::Path> path, ref<java::util::Set> options, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs);
	static ref<java::nio::channels::FileChannel> open(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::OpenOption>> options);
	jint read(ref<java::nio::ByteBuffer> p1);
	jlong read(ref<link::java::array<java::nio::ByteBuffer>> p1, jint p2, jint p3);
	jlong read(ref<link::java::array<java::nio::ByteBuffer>> dsts);
	jint write(ref<java::nio::ByteBuffer> p1);
	jlong write(ref<link::java::array<java::nio::ByteBuffer>> p1, jint p2, jint p3);
	jlong write(ref<link::java::array<java::nio::ByteBuffer>> srcs);
	jlong position();
	ref<java::nio::channels::FileChannel> position(jlong p1);
	jlong size();
	ref<java::nio::channels::FileChannel> truncate(jlong p1);
	void force(jboolean p1);
	jlong transferTo(jlong p1, jlong p2, ref<java::nio::channels::WritableByteChannel> p3);
	jlong transferFrom(ref<java::nio::channels::ReadableByteChannel> p1, jlong p2, jlong p3);
	jint read(ref<java::nio::ByteBuffer> p1, jlong p2);
	jint write(ref<java::nio::ByteBuffer> p1, jlong p2);
	ref<java::nio::MappedByteBuffer> map(ref<java::nio::channels::FileChannel_MapMode> p1, jlong p2, jlong p3);
	ref<java::nio::channels::FileLock> lock(jlong p1, jlong p2, jboolean p3);
	ref<java::nio::channels::FileLock> lock();
	ref<java::nio::channels::FileLock> tryLock(jlong p1, jlong p2, jboolean p3);
	ref<java::nio::channels::FileLock> tryLock();

protected:

	FileChannel(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/MappedByteBuffer.h>
#include <scapix/java_api/java/nio/channels/FileChannel_MapMode.h>
#include <scapix/java_api/java/nio/channels/FileLock.h>
#include <scapix/java_api/java/nio/channels/ReadableByteChannel.h>
#include <scapix/java_api/java/nio/channels/WritableByteChannel.h>
#include <scapix/java_api/java/nio/file/OpenOption.h>
#include <scapix/java_api/java/nio/file/Path.h>
#include <scapix/java_api/java/nio/file/attribute/FileAttribute.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace java::nio::channels {

inline ref<java::nio::channels::FileChannel> FileChannel::open(ref<java::nio::file::Path> path, ref<java::util::Set> options, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_static_method<SCAPIX_META_STRING("open"), ref<java::nio::channels::FileChannel>>(path, options, attrs); }
inline ref<java::nio::channels::FileChannel> FileChannel::open(ref<java::nio::file::Path> path, ref<link::java::array<java::nio::file::OpenOption>> options) { return call_static_method<SCAPIX_META_STRING("open"), ref<java::nio::channels::FileChannel>>(path, options); }
inline jint FileChannel::read(ref<java::nio::ByteBuffer> p1) { return call_method<SCAPIX_META_STRING("read"), jint>(p1); }
inline jlong FileChannel::read(ref<link::java::array<java::nio::ByteBuffer>> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("read"), jlong>(p1, p2, p3); }
inline jlong FileChannel::read(ref<link::java::array<java::nio::ByteBuffer>> dsts) { return call_method<SCAPIX_META_STRING("read"), jlong>(dsts); }
inline jint FileChannel::write(ref<java::nio::ByteBuffer> p1) { return call_method<SCAPIX_META_STRING("write"), jint>(p1); }
inline jlong FileChannel::write(ref<link::java::array<java::nio::ByteBuffer>> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("write"), jlong>(p1, p2, p3); }
inline jlong FileChannel::write(ref<link::java::array<java::nio::ByteBuffer>> srcs) { return call_method<SCAPIX_META_STRING("write"), jlong>(srcs); }
inline jlong FileChannel::position() { return call_method<SCAPIX_META_STRING("position"), jlong>(); }
inline ref<java::nio::channels::FileChannel> FileChannel::position(jlong p1) { return call_method<SCAPIX_META_STRING("position"), ref<java::nio::channels::FileChannel>>(p1); }
inline jlong FileChannel::size() { return call_method<SCAPIX_META_STRING("size"), jlong>(); }
inline ref<java::nio::channels::FileChannel> FileChannel::truncate(jlong p1) { return call_method<SCAPIX_META_STRING("truncate"), ref<java::nio::channels::FileChannel>>(p1); }
inline void FileChannel::force(jboolean p1) { return call_method<SCAPIX_META_STRING("force"), void>(p1); }
inline jlong FileChannel::transferTo(jlong p1, jlong p2, ref<java::nio::channels::WritableByteChannel> p3) { return call_method<SCAPIX_META_STRING("transferTo"), jlong>(p1, p2, p3); }
inline jlong FileChannel::transferFrom(ref<java::nio::channels::ReadableByteChannel> p1, jlong p2, jlong p3) { return call_method<SCAPIX_META_STRING("transferFrom"), jlong>(p1, p2, p3); }
inline jint FileChannel::read(ref<java::nio::ByteBuffer> p1, jlong p2) { return call_method<SCAPIX_META_STRING("read"), jint>(p1, p2); }
inline jint FileChannel::write(ref<java::nio::ByteBuffer> p1, jlong p2) { return call_method<SCAPIX_META_STRING("write"), jint>(p1, p2); }
inline ref<java::nio::MappedByteBuffer> FileChannel::map(ref<java::nio::channels::FileChannel_MapMode> p1, jlong p2, jlong p3) { return call_method<SCAPIX_META_STRING("map"), ref<java::nio::MappedByteBuffer>>(p1, p2, p3); }
inline ref<java::nio::channels::FileLock> FileChannel::lock(jlong p1, jlong p2, jboolean p3) { return call_method<SCAPIX_META_STRING("lock"), ref<java::nio::channels::FileLock>>(p1, p2, p3); }
inline ref<java::nio::channels::FileLock> FileChannel::lock() { return call_method<SCAPIX_META_STRING("lock"), ref<java::nio::channels::FileLock>>(); }
inline ref<java::nio::channels::FileLock> FileChannel::tryLock(jlong p1, jlong p2, jboolean p3) { return call_method<SCAPIX_META_STRING("tryLock"), ref<java::nio::channels::FileLock>>(p1, p2, p3); }
inline ref<java::nio::channels::FileLock> FileChannel::tryLock() { return call_method<SCAPIX_META_STRING("tryLock"), ref<java::nio::channels::FileLock>>(); }

} // namespace java::nio::channels
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_FILECHANNEL_H
