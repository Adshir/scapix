// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_SELECTOR_H
#define SCAPIX_JAVA_NIO_CHANNELS_SELECTOR_H

namespace scapix::java_api {

namespace java::nio::channels::spi { class SelectorProvider; }
namespace java::util { class Set; }

namespace java::nio::channels {

class Selector : public object_base<SCAPIX_META_STRING("java/nio/channels/Selector"),
	java::lang::Object,
	java::io::Closeable>
{
public:

	static ref<java::nio::channels::Selector> open();
	jboolean isOpen();
	ref<java::nio::channels::spi::SelectorProvider> provider();
	ref<java::util::Set> keys();
	ref<java::util::Set> selectedKeys();
	jint selectNow();
	jint select(jlong p1);
	jint select();
	ref<java::nio::channels::Selector> wakeup();
	void close();

protected:

	Selector(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/channels/spi/SelectorProvider.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace java::nio::channels {

inline ref<java::nio::channels::Selector> Selector::open() { return call_static_method<SCAPIX_META_STRING("open"), ref<java::nio::channels::Selector>>(); }
inline jboolean Selector::isOpen() { return call_method<SCAPIX_META_STRING("isOpen"), jboolean>(); }
inline ref<java::nio::channels::spi::SelectorProvider> Selector::provider() { return call_method<SCAPIX_META_STRING("provider"), ref<java::nio::channels::spi::SelectorProvider>>(); }
inline ref<java::util::Set> Selector::keys() { return call_method<SCAPIX_META_STRING("keys"), ref<java::util::Set>>(); }
inline ref<java::util::Set> Selector::selectedKeys() { return call_method<SCAPIX_META_STRING("selectedKeys"), ref<java::util::Set>>(); }
inline jint Selector::selectNow() { return call_method<SCAPIX_META_STRING("selectNow"), jint>(); }
inline jint Selector::select(jlong p1) { return call_method<SCAPIX_META_STRING("select"), jint>(p1); }
inline jint Selector::select() { return call_method<SCAPIX_META_STRING("select"), jint>(); }
inline ref<java::nio::channels::Selector> Selector::wakeup() { return call_method<SCAPIX_META_STRING("wakeup"), ref<java::nio::channels::Selector>>(); }
inline void Selector::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace java::nio::channels
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_SELECTOR_H
