// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/channels/spi/AbstractInterruptibleChannel.h>
#include <scapix/java_api/java/nio/channels/Channel.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_SELECTABLECHANNEL_H
#define SCAPIX_JAVA_NIO_CHANNELS_SELECTABLECHANNEL_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::nio::channels { class SelectionKey; }
namespace java::nio::channels { class Selector; }
namespace java::nio::channels::spi { class SelectorProvider; }

namespace java::nio::channels {

class SelectableChannel : public object_base<SCAPIX_META_STRING("java/nio/channels/SelectableChannel"),
	java::nio::channels::spi::AbstractInterruptibleChannel,
	java::nio::channels::Channel>
{
public:

	ref<java::nio::channels::spi::SelectorProvider> provider();
	jint validOps();
	jboolean isRegistered();
	ref<java::nio::channels::SelectionKey> keyFor(ref<java::nio::channels::Selector> p1);
	ref<java::nio::channels::SelectionKey> register_(ref<java::nio::channels::Selector> p1, jint p2, ref<java::lang::Object> p3);
	ref<java::nio::channels::SelectionKey> register_(ref<java::nio::channels::Selector> sel, jint ops);
	ref<java::nio::channels::SelectableChannel> configureBlocking(jboolean p1);
	jboolean isBlocking();
	ref<java::lang::Object> blockingLock();

protected:

	SelectableChannel(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/channels/SelectionKey.h>
#include <scapix/java_api/java/nio/channels/Selector.h>
#include <scapix/java_api/java/nio/channels/spi/SelectorProvider.h>

namespace scapix::java_api {
namespace java::nio::channels {

inline ref<java::nio::channels::spi::SelectorProvider> SelectableChannel::provider() { return call_method<SCAPIX_META_STRING("provider"), ref<java::nio::channels::spi::SelectorProvider>>(); }
inline jint SelectableChannel::validOps() { return call_method<SCAPIX_META_STRING("validOps"), jint>(); }
inline jboolean SelectableChannel::isRegistered() { return call_method<SCAPIX_META_STRING("isRegistered"), jboolean>(); }
inline ref<java::nio::channels::SelectionKey> SelectableChannel::keyFor(ref<java::nio::channels::Selector> p1) { return call_method<SCAPIX_META_STRING("keyFor"), ref<java::nio::channels::SelectionKey>>(p1); }
inline ref<java::nio::channels::SelectionKey> SelectableChannel::register_(ref<java::nio::channels::Selector> p1, jint p2, ref<java::lang::Object> p3) { return call_method<SCAPIX_META_STRING("register"), ref<java::nio::channels::SelectionKey>>(p1, p2, p3); }
inline ref<java::nio::channels::SelectionKey> SelectableChannel::register_(ref<java::nio::channels::Selector> sel, jint ops) { return call_method<SCAPIX_META_STRING("register"), ref<java::nio::channels::SelectionKey>>(sel, ops); }
inline ref<java::nio::channels::SelectableChannel> SelectableChannel::configureBlocking(jboolean p1) { return call_method<SCAPIX_META_STRING("configureBlocking"), ref<java::nio::channels::SelectableChannel>>(p1); }
inline jboolean SelectableChannel::isBlocking() { return call_method<SCAPIX_META_STRING("isBlocking"), jboolean>(); }
inline ref<java::lang::Object> SelectableChannel::blockingLock() { return call_method<SCAPIX_META_STRING("blockingLock"), ref<java::lang::Object>>(); }

} // namespace java::nio::channels
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_SELECTABLECHANNEL_H
