// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/channels/SelectableChannel.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTABLECHANNEL_H
#define SCAPIX_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTABLECHANNEL_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::nio::channels { class SelectionKey; }
namespace java::nio::channels { class Selector; }
namespace java::nio::channels::spi { class SelectorProvider; }

namespace java::nio::channels::spi {

class AbstractSelectableChannel : public object_base<SCAPIX_META_STRING("java/nio/channels/spi/AbstractSelectableChannel"),
	java::nio::channels::SelectableChannel>
{
public:

	ref<java::nio::channels::spi::SelectorProvider> provider();
	jboolean isRegistered();
	ref<java::nio::channels::SelectionKey> keyFor(ref<java::nio::channels::Selector> sel);
	ref<java::nio::channels::SelectionKey> register_(ref<java::nio::channels::Selector> sel, jint ops, ref<java::lang::Object> att);
	jboolean isBlocking();
	ref<java::lang::Object> blockingLock();
	ref<java::nio::channels::SelectableChannel> configureBlocking(jboolean block);

protected:

	AbstractSelectableChannel(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels::spi
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/channels/SelectionKey.h>
#include <scapix/java_api/java/nio/channels/Selector.h>
#include <scapix/java_api/java/nio/channels/spi/SelectorProvider.h>

namespace scapix::java_api {
namespace java::nio::channels::spi {

inline ref<java::nio::channels::spi::SelectorProvider> AbstractSelectableChannel::provider() { return call_method<SCAPIX_META_STRING("provider"), ref<java::nio::channels::spi::SelectorProvider>>(); }
inline jboolean AbstractSelectableChannel::isRegistered() { return call_method<SCAPIX_META_STRING("isRegistered"), jboolean>(); }
inline ref<java::nio::channels::SelectionKey> AbstractSelectableChannel::keyFor(ref<java::nio::channels::Selector> sel) { return call_method<SCAPIX_META_STRING("keyFor"), ref<java::nio::channels::SelectionKey>>(sel); }
inline ref<java::nio::channels::SelectionKey> AbstractSelectableChannel::register_(ref<java::nio::channels::Selector> sel, jint ops, ref<java::lang::Object> att) { return call_method<SCAPIX_META_STRING("register"), ref<java::nio::channels::SelectionKey>>(sel, ops, att); }
inline jboolean AbstractSelectableChannel::isBlocking() { return call_method<SCAPIX_META_STRING("isBlocking"), jboolean>(); }
inline ref<java::lang::Object> AbstractSelectableChannel::blockingLock() { return call_method<SCAPIX_META_STRING("blockingLock"), ref<java::lang::Object>>(); }
inline ref<java::nio::channels::SelectableChannel> AbstractSelectableChannel::configureBlocking(jboolean block) { return call_method<SCAPIX_META_STRING("configureBlocking"), ref<java::nio::channels::SelectableChannel>>(block); }

} // namespace java::nio::channels::spi
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTABLECHANNEL_H
