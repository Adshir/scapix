// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_FILELOCK_H
#define SCAPIX_JAVA_NIO_CHANNELS_FILELOCK_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::nio::channels { class Channel; }
namespace java::nio::channels { class FileChannel; }

namespace java::nio::channels {

class FileLock : public object_base<SCAPIX_META_STRING("java/nio/channels/FileLock"),
	java::lang::Object,
	java::lang::AutoCloseable>
{
public:

	ref<java::nio::channels::FileChannel> channel();
	ref<java::nio::channels::Channel> acquiredBy();
	jlong position();
	jlong size();
	jboolean isShared();
	jboolean overlaps(jlong position, jlong p2);
	jboolean isValid();
	void release();
	void close();
	ref<java::lang::String> toString();

protected:

	FileLock(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/channels/Channel.h>
#include <scapix/java_api/java/nio/channels/FileChannel.h>

namespace scapix::java_api {
namespace java::nio::channels {

inline ref<java::nio::channels::FileChannel> FileLock::channel() { return call_method<SCAPIX_META_STRING("channel"), ref<java::nio::channels::FileChannel>>(); }
inline ref<java::nio::channels::Channel> FileLock::acquiredBy() { return call_method<SCAPIX_META_STRING("acquiredBy"), ref<java::nio::channels::Channel>>(); }
inline jlong FileLock::position() { return call_method<SCAPIX_META_STRING("position"), jlong>(); }
inline jlong FileLock::size() { return call_method<SCAPIX_META_STRING("size"), jlong>(); }
inline jboolean FileLock::isShared() { return call_method<SCAPIX_META_STRING("isShared"), jboolean>(); }
inline jboolean FileLock::overlaps(jlong position, jlong p2) { return call_method<SCAPIX_META_STRING("overlaps"), jboolean>(position, p2); }
inline jboolean FileLock::isValid() { return call_method<SCAPIX_META_STRING("isValid"), jboolean>(); }
inline void FileLock::release() { return call_method<SCAPIX_META_STRING("release"), void>(); }
inline void FileLock::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline ref<java::lang::String> FileLock::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::nio::channels
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_FILELOCK_H
