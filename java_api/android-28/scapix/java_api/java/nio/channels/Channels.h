// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_CHANNELS_H
#define SCAPIX_JAVA_NIO_CHANNELS_CHANNELS_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::io { class OutputStream; }
namespace java::io { class Reader; }
namespace java::io { class Writer; }
namespace java::lang { class String; }
namespace java::nio::channels { class AsynchronousByteChannel; }
namespace java::nio::channels { class ReadableByteChannel; }
namespace java::nio::channels { class WritableByteChannel; }
namespace java::nio::charset { class CharsetDecoder; }
namespace java::nio::charset { class CharsetEncoder; }

namespace java::nio::channels {

class Channels : public object_base<SCAPIX_META_STRING("java/nio/channels/Channels"),
	java::lang::Object>
{
public:

	static ref<java::io::InputStream> newInputStream(ref<java::nio::channels::ReadableByteChannel> ch);
	static ref<java::io::OutputStream> newOutputStream(ref<java::nio::channels::WritableByteChannel> ch);
	static ref<java::io::InputStream> newInputStream(ref<java::nio::channels::AsynchronousByteChannel> ch);
	static ref<java::io::OutputStream> newOutputStream(ref<java::nio::channels::AsynchronousByteChannel> ch);
	static ref<java::nio::channels::ReadableByteChannel> newChannel(ref<java::io::InputStream> in);
	static ref<java::nio::channels::WritableByteChannel> newChannel(ref<java::io::OutputStream> out);
	static ref<java::io::Reader> newReader(ref<java::nio::channels::ReadableByteChannel> ch, ref<java::nio::charset::CharsetDecoder> dec, jint minBufferCap);
	static ref<java::io::Reader> newReader(ref<java::nio::channels::ReadableByteChannel> ch, ref<java::lang::String> csName);
	static ref<java::io::Writer> newWriter(ref<java::nio::channels::WritableByteChannel> ch, ref<java::nio::charset::CharsetEncoder> enc, jint minBufferCap);
	static ref<java::io::Writer> newWriter(ref<java::nio::channels::WritableByteChannel> ch, ref<java::lang::String> csName);

protected:

	Channels(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/channels/AsynchronousByteChannel.h>
#include <scapix/java_api/java/nio/channels/ReadableByteChannel.h>
#include <scapix/java_api/java/nio/channels/WritableByteChannel.h>
#include <scapix/java_api/java/nio/charset/CharsetDecoder.h>
#include <scapix/java_api/java/nio/charset/CharsetEncoder.h>

namespace scapix::java_api {
namespace java::nio::channels {

inline ref<java::io::InputStream> Channels::newInputStream(ref<java::nio::channels::ReadableByteChannel> ch) { return call_static_method<SCAPIX_META_STRING("newInputStream"), ref<java::io::InputStream>>(ch); }
inline ref<java::io::OutputStream> Channels::newOutputStream(ref<java::nio::channels::WritableByteChannel> ch) { return call_static_method<SCAPIX_META_STRING("newOutputStream"), ref<java::io::OutputStream>>(ch); }
inline ref<java::io::InputStream> Channels::newInputStream(ref<java::nio::channels::AsynchronousByteChannel> ch) { return call_static_method<SCAPIX_META_STRING("newInputStream"), ref<java::io::InputStream>>(ch); }
inline ref<java::io::OutputStream> Channels::newOutputStream(ref<java::nio::channels::AsynchronousByteChannel> ch) { return call_static_method<SCAPIX_META_STRING("newOutputStream"), ref<java::io::OutputStream>>(ch); }
inline ref<java::nio::channels::ReadableByteChannel> Channels::newChannel(ref<java::io::InputStream> in) { return call_static_method<SCAPIX_META_STRING("newChannel"), ref<java::nio::channels::ReadableByteChannel>>(in); }
inline ref<java::nio::channels::WritableByteChannel> Channels::newChannel(ref<java::io::OutputStream> out) { return call_static_method<SCAPIX_META_STRING("newChannel"), ref<java::nio::channels::WritableByteChannel>>(out); }
inline ref<java::io::Reader> Channels::newReader(ref<java::nio::channels::ReadableByteChannel> ch, ref<java::nio::charset::CharsetDecoder> dec, jint minBufferCap) { return call_static_method<SCAPIX_META_STRING("newReader"), ref<java::io::Reader>>(ch, dec, minBufferCap); }
inline ref<java::io::Reader> Channels::newReader(ref<java::nio::channels::ReadableByteChannel> ch, ref<java::lang::String> csName) { return call_static_method<SCAPIX_META_STRING("newReader"), ref<java::io::Reader>>(ch, csName); }
inline ref<java::io::Writer> Channels::newWriter(ref<java::nio::channels::WritableByteChannel> ch, ref<java::nio::charset::CharsetEncoder> enc, jint minBufferCap) { return call_static_method<SCAPIX_META_STRING("newWriter"), ref<java::io::Writer>>(ch, enc, minBufferCap); }
inline ref<java::io::Writer> Channels::newWriter(ref<java::nio::channels::WritableByteChannel> ch, ref<java::lang::String> csName) { return call_static_method<SCAPIX_META_STRING("newWriter"), ref<java::io::Writer>>(ch, csName); }

} // namespace java::nio::channels
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_CHANNELS_H
