// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/channels/AsynchronousChannel.h>
#include <scapix/java_api/java/nio/channels/NetworkChannel.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_ASYNCHRONOUSSERVERSOCKETCHANNEL_H
#define SCAPIX_JAVA_NIO_CHANNELS_ASYNCHRONOUSSERVERSOCKETCHANNEL_H

namespace scapix::java_api {

namespace java::net { class SocketAddress; }
namespace java::net { class SocketOption; }
namespace java::nio::channels { class AsynchronousChannelGroup; }
namespace java::nio::channels { class CompletionHandler; }
namespace java::nio::channels::spi { class AsynchronousChannelProvider; }
namespace java::util::concurrent { class Future; }

namespace java::nio::channels {

class AsynchronousServerSocketChannel : public object_base<SCAPIX_META_STRING("java/nio/channels/AsynchronousServerSocketChannel"),
	java::lang::Object,
	java::nio::channels::AsynchronousChannel,
	java::nio::channels::NetworkChannel>
{
public:

	ref<java::nio::channels::spi::AsynchronousChannelProvider> provider();
	static ref<java::nio::channels::AsynchronousServerSocketChannel> open(ref<java::nio::channels::AsynchronousChannelGroup> group);
	static ref<java::nio::channels::AsynchronousServerSocketChannel> open();
	ref<java::nio::channels::AsynchronousServerSocketChannel> bind(ref<java::net::SocketAddress> local);
	ref<java::nio::channels::AsynchronousServerSocketChannel> bind(ref<java::net::SocketAddress> p1, jint p2);
	ref<java::nio::channels::AsynchronousServerSocketChannel> setOption(ref<java::net::SocketOption> p1, ref<java::lang::Object> p2);
	void accept(ref<java::lang::Object> p1, ref<java::nio::channels::CompletionHandler> p2);
	ref<java::util::concurrent::Future> accept();
	ref<java::net::SocketAddress> getLocalAddress();

protected:

	AsynchronousServerSocketChannel(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels
} // namespace scapix::java_api

#include <scapix/java_api/java/net/SocketAddress.h>
#include <scapix/java_api/java/net/SocketOption.h>
#include <scapix/java_api/java/nio/channels/AsynchronousChannelGroup.h>
#include <scapix/java_api/java/nio/channels/CompletionHandler.h>
#include <scapix/java_api/java/nio/channels/spi/AsynchronousChannelProvider.h>
#include <scapix/java_api/java/util/concurrent/Future.h>

namespace scapix::java_api {
namespace java::nio::channels {

inline ref<java::nio::channels::spi::AsynchronousChannelProvider> AsynchronousServerSocketChannel::provider() { return call_method<SCAPIX_META_STRING("provider"), ref<java::nio::channels::spi::AsynchronousChannelProvider>>(); }
inline ref<java::nio::channels::AsynchronousServerSocketChannel> AsynchronousServerSocketChannel::open(ref<java::nio::channels::AsynchronousChannelGroup> group) { return call_static_method<SCAPIX_META_STRING("open"), ref<java::nio::channels::AsynchronousServerSocketChannel>>(group); }
inline ref<java::nio::channels::AsynchronousServerSocketChannel> AsynchronousServerSocketChannel::open() { return call_static_method<SCAPIX_META_STRING("open"), ref<java::nio::channels::AsynchronousServerSocketChannel>>(); }
inline ref<java::nio::channels::AsynchronousServerSocketChannel> AsynchronousServerSocketChannel::bind(ref<java::net::SocketAddress> local) { return call_method<SCAPIX_META_STRING("bind"), ref<java::nio::channels::AsynchronousServerSocketChannel>>(local); }
inline ref<java::nio::channels::AsynchronousServerSocketChannel> AsynchronousServerSocketChannel::bind(ref<java::net::SocketAddress> p1, jint p2) { return call_method<SCAPIX_META_STRING("bind"), ref<java::nio::channels::AsynchronousServerSocketChannel>>(p1, p2); }
inline ref<java::nio::channels::AsynchronousServerSocketChannel> AsynchronousServerSocketChannel::setOption(ref<java::net::SocketOption> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("setOption"), ref<java::nio::channels::AsynchronousServerSocketChannel>>(p1, p2); }
inline void AsynchronousServerSocketChannel::accept(ref<java::lang::Object> p1, ref<java::nio::channels::CompletionHandler> p2) { return call_method<SCAPIX_META_STRING("accept"), void>(p1, p2); }
inline ref<java::util::concurrent::Future> AsynchronousServerSocketChannel::accept() { return call_method<SCAPIX_META_STRING("accept"), ref<java::util::concurrent::Future>>(); }
inline ref<java::net::SocketAddress> AsynchronousServerSocketChannel::getLocalAddress() { return call_method<SCAPIX_META_STRING("getLocalAddress"), ref<java::net::SocketAddress>>(); }

} // namespace java::nio::channels
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_ASYNCHRONOUSSERVERSOCKETCHANNEL_H
