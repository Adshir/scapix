// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/channels/AsynchronousByteChannel.h>
#include <scapix/java_api/java/nio/channels/NetworkChannel.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_ASYNCHRONOUSSOCKETCHANNEL_H
#define SCAPIX_JAVA_NIO_CHANNELS_ASYNCHRONOUSSOCKETCHANNEL_H

namespace scapix::java_api {

namespace java::net { class SocketAddress; }
namespace java::net { class SocketOption; }
namespace java::nio { class ByteBuffer; }
namespace java::nio::channels { class AsynchronousChannelGroup; }
namespace java::nio::channels { class CompletionHandler; }
namespace java::nio::channels::spi { class AsynchronousChannelProvider; }
namespace java::util::concurrent { class Future; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::nio::channels {

class AsynchronousSocketChannel : public object_base<SCAPIX_META_STRING("java/nio/channels/AsynchronousSocketChannel"),
	java::lang::Object,
	java::nio::channels::AsynchronousByteChannel,
	java::nio::channels::NetworkChannel>
{
public:

	ref<java::nio::channels::spi::AsynchronousChannelProvider> provider();
	static ref<java::nio::channels::AsynchronousSocketChannel> open(ref<java::nio::channels::AsynchronousChannelGroup> group);
	static ref<java::nio::channels::AsynchronousSocketChannel> open();
	ref<java::nio::channels::AsynchronousSocketChannel> bind(ref<java::net::SocketAddress> p1);
	ref<java::nio::channels::AsynchronousSocketChannel> setOption(ref<java::net::SocketOption> p1, ref<java::lang::Object> p2);
	ref<java::nio::channels::AsynchronousSocketChannel> shutdownInput();
	ref<java::nio::channels::AsynchronousSocketChannel> shutdownOutput();
	ref<java::net::SocketAddress> getRemoteAddress();
	void connect(ref<java::net::SocketAddress> p1, ref<java::lang::Object> p2, ref<java::nio::channels::CompletionHandler> p3);
	ref<java::util::concurrent::Future> connect(ref<java::net::SocketAddress> p1);
	void read(ref<java::nio::ByteBuffer> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3, ref<java::lang::Object> p4, ref<java::nio::channels::CompletionHandler> p5);
	void read(ref<java::nio::ByteBuffer> dst, ref<java::lang::Object> attachment, ref<java::nio::channels::CompletionHandler> handler);
	ref<java::util::concurrent::Future> read(ref<java::nio::ByteBuffer> p1);
	void read(ref<link::java::array<java::nio::ByteBuffer>> p1, jint p2, jint p3, jlong p4, ref<java::util::concurrent::TimeUnit> p5, ref<java::lang::Object> p6, ref<java::nio::channels::CompletionHandler> p7);
	void write(ref<java::nio::ByteBuffer> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3, ref<java::lang::Object> p4, ref<java::nio::channels::CompletionHandler> p5);
	void write(ref<java::nio::ByteBuffer> src, ref<java::lang::Object> attachment, ref<java::nio::channels::CompletionHandler> handler);
	ref<java::util::concurrent::Future> write(ref<java::nio::ByteBuffer> p1);
	void write(ref<link::java::array<java::nio::ByteBuffer>> p1, jint p2, jint p3, jlong p4, ref<java::util::concurrent::TimeUnit> p5, ref<java::lang::Object> p6, ref<java::nio::channels::CompletionHandler> p7);
	ref<java::net::SocketAddress> getLocalAddress();

protected:

	AsynchronousSocketChannel(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels
} // namespace scapix::java_api

#include <scapix/java_api/java/net/SocketAddress.h>
#include <scapix/java_api/java/net/SocketOption.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/channels/AsynchronousChannelGroup.h>
#include <scapix/java_api/java/nio/channels/CompletionHandler.h>
#include <scapix/java_api/java/nio/channels/spi/AsynchronousChannelProvider.h>
#include <scapix/java_api/java/util/concurrent/Future.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::nio::channels {

inline ref<java::nio::channels::spi::AsynchronousChannelProvider> AsynchronousSocketChannel::provider() { return call_method<SCAPIX_META_STRING("provider"), ref<java::nio::channels::spi::AsynchronousChannelProvider>>(); }
inline ref<java::nio::channels::AsynchronousSocketChannel> AsynchronousSocketChannel::open(ref<java::nio::channels::AsynchronousChannelGroup> group) { return call_static_method<SCAPIX_META_STRING("open"), ref<java::nio::channels::AsynchronousSocketChannel>>(group); }
inline ref<java::nio::channels::AsynchronousSocketChannel> AsynchronousSocketChannel::open() { return call_static_method<SCAPIX_META_STRING("open"), ref<java::nio::channels::AsynchronousSocketChannel>>(); }
inline ref<java::nio::channels::AsynchronousSocketChannel> AsynchronousSocketChannel::bind(ref<java::net::SocketAddress> p1) { return call_method<SCAPIX_META_STRING("bind"), ref<java::nio::channels::AsynchronousSocketChannel>>(p1); }
inline ref<java::nio::channels::AsynchronousSocketChannel> AsynchronousSocketChannel::setOption(ref<java::net::SocketOption> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("setOption"), ref<java::nio::channels::AsynchronousSocketChannel>>(p1, p2); }
inline ref<java::nio::channels::AsynchronousSocketChannel> AsynchronousSocketChannel::shutdownInput() { return call_method<SCAPIX_META_STRING("shutdownInput"), ref<java::nio::channels::AsynchronousSocketChannel>>(); }
inline ref<java::nio::channels::AsynchronousSocketChannel> AsynchronousSocketChannel::shutdownOutput() { return call_method<SCAPIX_META_STRING("shutdownOutput"), ref<java::nio::channels::AsynchronousSocketChannel>>(); }
inline ref<java::net::SocketAddress> AsynchronousSocketChannel::getRemoteAddress() { return call_method<SCAPIX_META_STRING("getRemoteAddress"), ref<java::net::SocketAddress>>(); }
inline void AsynchronousSocketChannel::connect(ref<java::net::SocketAddress> p1, ref<java::lang::Object> p2, ref<java::nio::channels::CompletionHandler> p3) { return call_method<SCAPIX_META_STRING("connect"), void>(p1, p2, p3); }
inline ref<java::util::concurrent::Future> AsynchronousSocketChannel::connect(ref<java::net::SocketAddress> p1) { return call_method<SCAPIX_META_STRING("connect"), ref<java::util::concurrent::Future>>(p1); }
inline void AsynchronousSocketChannel::read(ref<java::nio::ByteBuffer> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3, ref<java::lang::Object> p4, ref<java::nio::channels::CompletionHandler> p5) { return call_method<SCAPIX_META_STRING("read"), void>(p1, p2, p3, p4, p5); }
inline void AsynchronousSocketChannel::read(ref<java::nio::ByteBuffer> dst, ref<java::lang::Object> attachment, ref<java::nio::channels::CompletionHandler> handler) { return call_method<SCAPIX_META_STRING("read"), void>(dst, attachment, handler); }
inline ref<java::util::concurrent::Future> AsynchronousSocketChannel::read(ref<java::nio::ByteBuffer> p1) { return call_method<SCAPIX_META_STRING("read"), ref<java::util::concurrent::Future>>(p1); }
inline void AsynchronousSocketChannel::read(ref<link::java::array<java::nio::ByteBuffer>> p1, jint p2, jint p3, jlong p4, ref<java::util::concurrent::TimeUnit> p5, ref<java::lang::Object> p6, ref<java::nio::channels::CompletionHandler> p7) { return call_method<SCAPIX_META_STRING("read"), void>(p1, p2, p3, p4, p5, p6, p7); }
inline void AsynchronousSocketChannel::write(ref<java::nio::ByteBuffer> p1, jlong p2, ref<java::util::concurrent::TimeUnit> p3, ref<java::lang::Object> p4, ref<java::nio::channels::CompletionHandler> p5) { return call_method<SCAPIX_META_STRING("write"), void>(p1, p2, p3, p4, p5); }
inline void AsynchronousSocketChannel::write(ref<java::nio::ByteBuffer> src, ref<java::lang::Object> attachment, ref<java::nio::channels::CompletionHandler> handler) { return call_method<SCAPIX_META_STRING("write"), void>(src, attachment, handler); }
inline ref<java::util::concurrent::Future> AsynchronousSocketChannel::write(ref<java::nio::ByteBuffer> p1) { return call_method<SCAPIX_META_STRING("write"), ref<java::util::concurrent::Future>>(p1); }
inline void AsynchronousSocketChannel::write(ref<link::java::array<java::nio::ByteBuffer>> p1, jint p2, jint p3, jlong p4, ref<java::util::concurrent::TimeUnit> p5, ref<java::lang::Object> p6, ref<java::nio::channels::CompletionHandler> p7) { return call_method<SCAPIX_META_STRING("write"), void>(p1, p2, p3, p4, p5, p6, p7); }
inline ref<java::net::SocketAddress> AsynchronousSocketChannel::getLocalAddress() { return call_method<SCAPIX_META_STRING("getLocalAddress"), ref<java::net::SocketAddress>>(); }

} // namespace java::nio::channels
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_ASYNCHRONOUSSOCKETCHANNEL_H
