// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/channels/AsynchronousChannel.h>

#ifndef SCAPIX_JAVA_NIO_CHANNELS_ASYNCHRONOUSFILECHANNEL_H
#define SCAPIX_JAVA_NIO_CHANNELS_ASYNCHRONOUSFILECHANNEL_H

namespace scapix::java_api {

namespace java::nio { class ByteBuffer; }
namespace java::nio::channels { class CompletionHandler; }
namespace java::nio::channels { class FileLock; }
namespace java::nio::file { class OpenOption; }
namespace java::nio::file { class Path; }
namespace java::nio::file::attribute { class FileAttribute; }
namespace java::util { class Set; }
namespace java::util::concurrent { class ExecutorService; }
namespace java::util::concurrent { class Future; }

namespace java::nio::channels {

class AsynchronousFileChannel : public object_base<SCAPIX_META_STRING("java/nio/channels/AsynchronousFileChannel"),
	java::lang::Object,
	java::nio::channels::AsynchronousChannel>
{
public:

	static ref<java::nio::channels::AsynchronousFileChannel> open(ref<java::nio::file::Path> file, ref<java::util::Set> options, ref<java::util::concurrent::ExecutorService> executor, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs);
	static ref<java::nio::channels::AsynchronousFileChannel> open(ref<java::nio::file::Path> file, ref<link::java::array<java::nio::file::OpenOption>> options);
	jlong size();
	ref<java::nio::channels::AsynchronousFileChannel> truncate(jlong p1);
	void force(jboolean p1);
	void lock(jlong p1, jlong p2, jboolean p3, ref<java::lang::Object> p4, ref<java::nio::channels::CompletionHandler> p5);
	void lock(ref<java::lang::Object> attachment, ref<java::nio::channels::CompletionHandler> handler);
	ref<java::util::concurrent::Future> lock(jlong p1, jlong p2, jboolean p3);
	ref<java::util::concurrent::Future> lock();
	ref<java::nio::channels::FileLock> tryLock(jlong p1, jlong p2, jboolean p3);
	ref<java::nio::channels::FileLock> tryLock();
	void read(ref<java::nio::ByteBuffer> p1, jlong p2, ref<java::lang::Object> p3, ref<java::nio::channels::CompletionHandler> p4);
	ref<java::util::concurrent::Future> read(ref<java::nio::ByteBuffer> p1, jlong p2);
	void write(ref<java::nio::ByteBuffer> p1, jlong p2, ref<java::lang::Object> p3, ref<java::nio::channels::CompletionHandler> p4);
	ref<java::util::concurrent::Future> write(ref<java::nio::ByteBuffer> p1, jlong p2);

protected:

	AsynchronousFileChannel(handle_type h) : base_(h) {}

};

} // namespace java::nio::channels
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/channels/CompletionHandler.h>
#include <scapix/java_api/java/nio/channels/FileLock.h>
#include <scapix/java_api/java/nio/file/OpenOption.h>
#include <scapix/java_api/java/nio/file/Path.h>
#include <scapix/java_api/java/nio/file/attribute/FileAttribute.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/concurrent/ExecutorService.h>
#include <scapix/java_api/java/util/concurrent/Future.h>

namespace scapix::java_api {
namespace java::nio::channels {

inline ref<java::nio::channels::AsynchronousFileChannel> AsynchronousFileChannel::open(ref<java::nio::file::Path> file, ref<java::util::Set> options, ref<java::util::concurrent::ExecutorService> executor, ref<link::java::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_static_method<SCAPIX_META_STRING("open"), ref<java::nio::channels::AsynchronousFileChannel>>(file, options, executor, attrs); }
inline ref<java::nio::channels::AsynchronousFileChannel> AsynchronousFileChannel::open(ref<java::nio::file::Path> file, ref<link::java::array<java::nio::file::OpenOption>> options) { return call_static_method<SCAPIX_META_STRING("open"), ref<java::nio::channels::AsynchronousFileChannel>>(file, options); }
inline jlong AsynchronousFileChannel::size() { return call_method<SCAPIX_META_STRING("size"), jlong>(); }
inline ref<java::nio::channels::AsynchronousFileChannel> AsynchronousFileChannel::truncate(jlong p1) { return call_method<SCAPIX_META_STRING("truncate"), ref<java::nio::channels::AsynchronousFileChannel>>(p1); }
inline void AsynchronousFileChannel::force(jboolean p1) { return call_method<SCAPIX_META_STRING("force"), void>(p1); }
inline void AsynchronousFileChannel::lock(jlong p1, jlong p2, jboolean p3, ref<java::lang::Object> p4, ref<java::nio::channels::CompletionHandler> p5) { return call_method<SCAPIX_META_STRING("lock"), void>(p1, p2, p3, p4, p5); }
inline void AsynchronousFileChannel::lock(ref<java::lang::Object> attachment, ref<java::nio::channels::CompletionHandler> handler) { return call_method<SCAPIX_META_STRING("lock"), void>(attachment, handler); }
inline ref<java::util::concurrent::Future> AsynchronousFileChannel::lock(jlong p1, jlong p2, jboolean p3) { return call_method<SCAPIX_META_STRING("lock"), ref<java::util::concurrent::Future>>(p1, p2, p3); }
inline ref<java::util::concurrent::Future> AsynchronousFileChannel::lock() { return call_method<SCAPIX_META_STRING("lock"), ref<java::util::concurrent::Future>>(); }
inline ref<java::nio::channels::FileLock> AsynchronousFileChannel::tryLock(jlong p1, jlong p2, jboolean p3) { return call_method<SCAPIX_META_STRING("tryLock"), ref<java::nio::channels::FileLock>>(p1, p2, p3); }
inline ref<java::nio::channels::FileLock> AsynchronousFileChannel::tryLock() { return call_method<SCAPIX_META_STRING("tryLock"), ref<java::nio::channels::FileLock>>(); }
inline void AsynchronousFileChannel::read(ref<java::nio::ByteBuffer> p1, jlong p2, ref<java::lang::Object> p3, ref<java::nio::channels::CompletionHandler> p4) { return call_method<SCAPIX_META_STRING("read"), void>(p1, p2, p3, p4); }
inline ref<java::util::concurrent::Future> AsynchronousFileChannel::read(ref<java::nio::ByteBuffer> p1, jlong p2) { return call_method<SCAPIX_META_STRING("read"), ref<java::util::concurrent::Future>>(p1, p2); }
inline void AsynchronousFileChannel::write(ref<java::nio::ByteBuffer> p1, jlong p2, ref<java::lang::Object> p3, ref<java::nio::channels::CompletionHandler> p4) { return call_method<SCAPIX_META_STRING("write"), void>(p1, p2, p3, p4); }
inline ref<java::util::concurrent::Future> AsynchronousFileChannel::write(ref<java::nio::ByteBuffer> p1, jlong p2) { return call_method<SCAPIX_META_STRING("write"), ref<java::util::concurrent::Future>>(p1, p2); }

} // namespace java::nio::channels
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_CHANNELS_ASYNCHRONOUSFILECHANNEL_H
