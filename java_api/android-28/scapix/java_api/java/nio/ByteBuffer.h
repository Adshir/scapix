// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_NIO_BYTEBUFFER_H
#define SCAPIX_JAVA_NIO_BYTEBUFFER_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::nio { class ByteOrder; }
namespace java::nio { class CharBuffer; }
namespace java::nio { class DoubleBuffer; }
namespace java::nio { class FloatBuffer; }
namespace java::nio { class IntBuffer; }
namespace java::nio { class LongBuffer; }
namespace java::nio { class ShortBuffer; }

namespace java::nio {

class ByteBuffer : public object_base<SCAPIX_META_STRING("java/nio/ByteBuffer"),
	java::nio::Buffer,
	java::lang::Comparable>
{
public:

	static ref<java::nio::ByteBuffer> allocateDirect(jint capacity);
	static ref<java::nio::ByteBuffer> allocate(jint capacity);
	static ref<java::nio::ByteBuffer> wrap(ref<link::java::array<jbyte>> array, jint offset, jint length);
	static ref<java::nio::ByteBuffer> wrap(ref<link::java::array<jbyte>> array);
	ref<java::nio::ByteBuffer> slice();
	ref<java::nio::ByteBuffer> duplicate();
	ref<java::nio::ByteBuffer> asReadOnlyBuffer();
	jbyte get();
	ref<java::nio::ByteBuffer> put(jbyte p1);
	jbyte get(jint p1);
	ref<java::nio::ByteBuffer> put(jint p1, jbyte p2);
	ref<java::nio::ByteBuffer> get(ref<link::java::array<jbyte>> dst, jint offset, jint length);
	ref<java::nio::ByteBuffer> get(ref<link::java::array<jbyte>> dst);
	ref<java::nio::ByteBuffer> put(ref<java::nio::ByteBuffer> src);
	ref<java::nio::ByteBuffer> put(ref<link::java::array<jbyte>> src, jint offset, jint length);
	ref<java::nio::ByteBuffer> put(ref<link::java::array<jbyte>> src);
	jboolean hasArray();
	ref<link::java::array<jbyte>> array();
	jint arrayOffset();
	ref<java::nio::ByteBuffer> compact();
	jboolean isDirect();
	ref<java::lang::String> toString();
	jint hashCode();
	jboolean equals(ref<java::lang::Object> ob);
	jint compareTo(ref<java::nio::ByteBuffer> that);
	ref<java::nio::ByteOrder> order();
	ref<java::nio::ByteBuffer> order(ref<java::nio::ByteOrder> bo);
	jchar getChar();
	ref<java::nio::ByteBuffer> putChar(jchar p1);
	jchar getChar(jint p1);
	ref<java::nio::ByteBuffer> putChar(jint p1, jchar p2);
	ref<java::nio::CharBuffer> asCharBuffer();
	jshort getShort();
	ref<java::nio::ByteBuffer> putShort(jshort p1);
	jshort getShort(jint p1);
	ref<java::nio::ByteBuffer> putShort(jint p1, jshort p2);
	ref<java::nio::ShortBuffer> asShortBuffer();
	jint getInt();
	ref<java::nio::ByteBuffer> putInt(jint p1);
	jint getInt(jint p1);
	ref<java::nio::ByteBuffer> putInt(jint p1, jint p2);
	ref<java::nio::IntBuffer> asIntBuffer();
	jlong getLong();
	ref<java::nio::ByteBuffer> putLong(jlong p1);
	jlong getLong(jint p1);
	ref<java::nio::ByteBuffer> putLong(jint p1, jlong p2);
	ref<java::nio::LongBuffer> asLongBuffer();
	jfloat getFloat();
	ref<java::nio::ByteBuffer> putFloat(jfloat p1);
	jfloat getFloat(jint p1);
	ref<java::nio::ByteBuffer> putFloat(jint p1, jfloat p2);
	ref<java::nio::FloatBuffer> asFloatBuffer();
	jdouble getDouble();
	ref<java::nio::ByteBuffer> putDouble(jdouble p1);
	jdouble getDouble(jint p1);
	ref<java::nio::ByteBuffer> putDouble(jint p1, jdouble p2);
	ref<java::nio::DoubleBuffer> asDoubleBuffer();

protected:

	ByteBuffer(handle_type h) : base_(h) {}

};

} // namespace java::nio
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteOrder.h>
#include <scapix/java_api/java/nio/CharBuffer.h>
#include <scapix/java_api/java/nio/DoubleBuffer.h>
#include <scapix/java_api/java/nio/FloatBuffer.h>
#include <scapix/java_api/java/nio/IntBuffer.h>
#include <scapix/java_api/java/nio/LongBuffer.h>
#include <scapix/java_api/java/nio/ShortBuffer.h>

namespace scapix::java_api {
namespace java::nio {

inline ref<java::nio::ByteBuffer> ByteBuffer::allocateDirect(jint capacity) { return call_static_method<SCAPIX_META_STRING("allocateDirect"), ref<java::nio::ByteBuffer>>(capacity); }
inline ref<java::nio::ByteBuffer> ByteBuffer::allocate(jint capacity) { return call_static_method<SCAPIX_META_STRING("allocate"), ref<java::nio::ByteBuffer>>(capacity); }
inline ref<java::nio::ByteBuffer> ByteBuffer::wrap(ref<link::java::array<jbyte>> array, jint offset, jint length) { return call_static_method<SCAPIX_META_STRING("wrap"), ref<java::nio::ByteBuffer>>(array, offset, length); }
inline ref<java::nio::ByteBuffer> ByteBuffer::wrap(ref<link::java::array<jbyte>> array) { return call_static_method<SCAPIX_META_STRING("wrap"), ref<java::nio::ByteBuffer>>(array); }
inline ref<java::nio::ByteBuffer> ByteBuffer::slice() { return call_method<SCAPIX_META_STRING("slice"), ref<java::nio::ByteBuffer>>(); }
inline ref<java::nio::ByteBuffer> ByteBuffer::duplicate() { return call_method<SCAPIX_META_STRING("duplicate"), ref<java::nio::ByteBuffer>>(); }
inline ref<java::nio::ByteBuffer> ByteBuffer::asReadOnlyBuffer() { return call_method<SCAPIX_META_STRING("asReadOnlyBuffer"), ref<java::nio::ByteBuffer>>(); }
inline jbyte ByteBuffer::get() { return call_method<SCAPIX_META_STRING("get"), jbyte>(); }
inline ref<java::nio::ByteBuffer> ByteBuffer::put(jbyte p1) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ByteBuffer>>(p1); }
inline jbyte ByteBuffer::get(jint p1) { return call_method<SCAPIX_META_STRING("get"), jbyte>(p1); }
inline ref<java::nio::ByteBuffer> ByteBuffer::put(jint p1, jbyte p2) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ByteBuffer>>(p1, p2); }
inline ref<java::nio::ByteBuffer> ByteBuffer::get(ref<link::java::array<jbyte>> dst, jint offset, jint length) { return call_method<SCAPIX_META_STRING("get"), ref<java::nio::ByteBuffer>>(dst, offset, length); }
inline ref<java::nio::ByteBuffer> ByteBuffer::get(ref<link::java::array<jbyte>> dst) { return call_method<SCAPIX_META_STRING("get"), ref<java::nio::ByteBuffer>>(dst); }
inline ref<java::nio::ByteBuffer> ByteBuffer::put(ref<java::nio::ByteBuffer> src) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ByteBuffer>>(src); }
inline ref<java::nio::ByteBuffer> ByteBuffer::put(ref<link::java::array<jbyte>> src, jint offset, jint length) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ByteBuffer>>(src, offset, length); }
inline ref<java::nio::ByteBuffer> ByteBuffer::put(ref<link::java::array<jbyte>> src) { return call_method<SCAPIX_META_STRING("put"), ref<java::nio::ByteBuffer>>(src); }
inline jboolean ByteBuffer::hasArray() { return call_method<SCAPIX_META_STRING("hasArray"), jboolean>(); }
inline ref<link::java::array<jbyte>> ByteBuffer::array() { return call_method<SCAPIX_META_STRING("array"), ref<link::java::array<jbyte>>>(); }
inline jint ByteBuffer::arrayOffset() { return call_method<SCAPIX_META_STRING("arrayOffset"), jint>(); }
inline ref<java::nio::ByteBuffer> ByteBuffer::compact() { return call_method<SCAPIX_META_STRING("compact"), ref<java::nio::ByteBuffer>>(); }
inline jboolean ByteBuffer::isDirect() { return call_method<SCAPIX_META_STRING("isDirect"), jboolean>(); }
inline ref<java::lang::String> ByteBuffer::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint ByteBuffer::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean ByteBuffer::equals(ref<java::lang::Object> ob) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(ob); }
inline jint ByteBuffer::compareTo(ref<java::nio::ByteBuffer> that) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(that); }
inline ref<java::nio::ByteOrder> ByteBuffer::order() { return call_method<SCAPIX_META_STRING("order"), ref<java::nio::ByteOrder>>(); }
inline ref<java::nio::ByteBuffer> ByteBuffer::order(ref<java::nio::ByteOrder> bo) { return call_method<SCAPIX_META_STRING("order"), ref<java::nio::ByteBuffer>>(bo); }
inline jchar ByteBuffer::getChar() { return call_method<SCAPIX_META_STRING("getChar"), jchar>(); }
inline ref<java::nio::ByteBuffer> ByteBuffer::putChar(jchar p1) { return call_method<SCAPIX_META_STRING("putChar"), ref<java::nio::ByteBuffer>>(p1); }
inline jchar ByteBuffer::getChar(jint p1) { return call_method<SCAPIX_META_STRING("getChar"), jchar>(p1); }
inline ref<java::nio::ByteBuffer> ByteBuffer::putChar(jint p1, jchar p2) { return call_method<SCAPIX_META_STRING("putChar"), ref<java::nio::ByteBuffer>>(p1, p2); }
inline ref<java::nio::CharBuffer> ByteBuffer::asCharBuffer() { return call_method<SCAPIX_META_STRING("asCharBuffer"), ref<java::nio::CharBuffer>>(); }
inline jshort ByteBuffer::getShort() { return call_method<SCAPIX_META_STRING("getShort"), jshort>(); }
inline ref<java::nio::ByteBuffer> ByteBuffer::putShort(jshort p1) { return call_method<SCAPIX_META_STRING("putShort"), ref<java::nio::ByteBuffer>>(p1); }
inline jshort ByteBuffer::getShort(jint p1) { return call_method<SCAPIX_META_STRING("getShort"), jshort>(p1); }
inline ref<java::nio::ByteBuffer> ByteBuffer::putShort(jint p1, jshort p2) { return call_method<SCAPIX_META_STRING("putShort"), ref<java::nio::ByteBuffer>>(p1, p2); }
inline ref<java::nio::ShortBuffer> ByteBuffer::asShortBuffer() { return call_method<SCAPIX_META_STRING("asShortBuffer"), ref<java::nio::ShortBuffer>>(); }
inline jint ByteBuffer::getInt() { return call_method<SCAPIX_META_STRING("getInt"), jint>(); }
inline ref<java::nio::ByteBuffer> ByteBuffer::putInt(jint p1) { return call_method<SCAPIX_META_STRING("putInt"), ref<java::nio::ByteBuffer>>(p1); }
inline jint ByteBuffer::getInt(jint p1) { return call_method<SCAPIX_META_STRING("getInt"), jint>(p1); }
inline ref<java::nio::ByteBuffer> ByteBuffer::putInt(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("putInt"), ref<java::nio::ByteBuffer>>(p1, p2); }
inline ref<java::nio::IntBuffer> ByteBuffer::asIntBuffer() { return call_method<SCAPIX_META_STRING("asIntBuffer"), ref<java::nio::IntBuffer>>(); }
inline jlong ByteBuffer::getLong() { return call_method<SCAPIX_META_STRING("getLong"), jlong>(); }
inline ref<java::nio::ByteBuffer> ByteBuffer::putLong(jlong p1) { return call_method<SCAPIX_META_STRING("putLong"), ref<java::nio::ByteBuffer>>(p1); }
inline jlong ByteBuffer::getLong(jint p1) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(p1); }
inline ref<java::nio::ByteBuffer> ByteBuffer::putLong(jint p1, jlong p2) { return call_method<SCAPIX_META_STRING("putLong"), ref<java::nio::ByteBuffer>>(p1, p2); }
inline ref<java::nio::LongBuffer> ByteBuffer::asLongBuffer() { return call_method<SCAPIX_META_STRING("asLongBuffer"), ref<java::nio::LongBuffer>>(); }
inline jfloat ByteBuffer::getFloat() { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(); }
inline ref<java::nio::ByteBuffer> ByteBuffer::putFloat(jfloat p1) { return call_method<SCAPIX_META_STRING("putFloat"), ref<java::nio::ByteBuffer>>(p1); }
inline jfloat ByteBuffer::getFloat(jint p1) { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(p1); }
inline ref<java::nio::ByteBuffer> ByteBuffer::putFloat(jint p1, jfloat p2) { return call_method<SCAPIX_META_STRING("putFloat"), ref<java::nio::ByteBuffer>>(p1, p2); }
inline ref<java::nio::FloatBuffer> ByteBuffer::asFloatBuffer() { return call_method<SCAPIX_META_STRING("asFloatBuffer"), ref<java::nio::FloatBuffer>>(); }
inline jdouble ByteBuffer::getDouble() { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(); }
inline ref<java::nio::ByteBuffer> ByteBuffer::putDouble(jdouble p1) { return call_method<SCAPIX_META_STRING("putDouble"), ref<java::nio::ByteBuffer>>(p1); }
inline jdouble ByteBuffer::getDouble(jint p1) { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(p1); }
inline ref<java::nio::ByteBuffer> ByteBuffer::putDouble(jint p1, jdouble p2) { return call_method<SCAPIX_META_STRING("putDouble"), ref<java::nio::ByteBuffer>>(p1, p2); }
inline ref<java::nio::DoubleBuffer> ByteBuffer::asDoubleBuffer() { return call_method<SCAPIX_META_STRING("asDoubleBuffer"), ref<java::nio::DoubleBuffer>>(); }

} // namespace java::nio
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_NIO_BYTEBUFFER_H
