// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_LANG_BOOLEAN_H
#define SCAPIX_JAVA_LANG_BOOLEAN_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class String; }

namespace java::lang {

class Boolean : public object_base<SCAPIX_META_STRING("java/lang/Boolean"),
	java::lang::Object,
	java::io::Serializable,
	java::lang::Comparable>
{
public:

	static ref<java::lang::Boolean> FALSE_();
	static ref<java::lang::Boolean> TRUE_();
	static ref<java::lang::Class> TYPE_();

	static ref<Boolean> new_object(jboolean value);
	static ref<Boolean> new_object(ref<java::lang::String> s);
	static jboolean parseBoolean(ref<java::lang::String> s);
	jboolean booleanValue();
	static ref<java::lang::Boolean> valueOf(jboolean b);
	static ref<java::lang::Boolean> valueOf(ref<java::lang::String> s);
	static ref<java::lang::String> toString(jboolean b);
	ref<java::lang::String> toString();
	jint hashCode();
	static jint hashCode(jboolean value);
	jboolean equals(ref<java::lang::Object> obj);
	static jboolean getBoolean(ref<java::lang::String> name);
	jint compareTo(ref<java::lang::Boolean> b);
	static jint compare(jboolean x, jboolean y);
	static jboolean logicalAnd(jboolean a, jboolean b);
	static jboolean logicalOr(jboolean a, jboolean b);
	static jboolean logicalXor(jboolean a, jboolean b);

protected:

	Boolean(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::lang {

inline ref<java::lang::Boolean> Boolean::FALSE_() { return get_static_field<SCAPIX_META_STRING("FALSE"), ref<java::lang::Boolean>>(); }
inline ref<java::lang::Boolean> Boolean::TRUE_() { return get_static_field<SCAPIX_META_STRING("TRUE"), ref<java::lang::Boolean>>(); }
inline ref<java::lang::Class> Boolean::TYPE_() { return get_static_field<SCAPIX_META_STRING("TYPE"), ref<java::lang::Class>>(); }
inline ref<Boolean> Boolean::new_object(jboolean value) { return base_::new_object(value); }
inline ref<Boolean> Boolean::new_object(ref<java::lang::String> s) { return base_::new_object(s); }
inline jboolean Boolean::parseBoolean(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("parseBoolean"), jboolean>(s); }
inline jboolean Boolean::booleanValue() { return call_method<SCAPIX_META_STRING("booleanValue"), jboolean>(); }
inline ref<java::lang::Boolean> Boolean::valueOf(jboolean b) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::lang::Boolean>>(b); }
inline ref<java::lang::Boolean> Boolean::valueOf(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::lang::Boolean>>(s); }
inline ref<java::lang::String> Boolean::toString(jboolean b) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(b); }
inline ref<java::lang::String> Boolean::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint Boolean::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint Boolean::hashCode(jboolean value) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(value); }
inline jboolean Boolean::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jboolean Boolean::getBoolean(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("getBoolean"), jboolean>(name); }
inline jint Boolean::compareTo(ref<java::lang::Boolean> b) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(b); }
inline jint Boolean::compare(jboolean x, jboolean y) { return call_static_method<SCAPIX_META_STRING("compare"), jint>(x, y); }
inline jboolean Boolean::logicalAnd(jboolean a, jboolean b) { return call_static_method<SCAPIX_META_STRING("logicalAnd"), jboolean>(a, b); }
inline jboolean Boolean::logicalOr(jboolean a, jboolean b) { return call_static_method<SCAPIX_META_STRING("logicalOr"), jboolean>(a, b); }
inline jboolean Boolean::logicalXor(jboolean a, jboolean b) { return call_static_method<SCAPIX_META_STRING("logicalXor"), jboolean>(a, b); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_BOOLEAN_H
