// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_LANG_LONG_H
#define SCAPIX_JAVA_LANG_LONG_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class Object; }
namespace java::lang { class String; }

namespace java::lang {

class Long : public object_base<SCAPIX_META_STRING("java/lang/Long"),
	java::lang::Number,
	java::lang::Comparable>
{
public:

	static jint BYTES_();
	static jlong MAX_VALUE_();
	static jlong MIN_VALUE_();
	static jint SIZE_();
	static ref<java::lang::Class> TYPE_();

	static ref<Long> new_object(jlong value);
	static ref<Long> new_object(ref<java::lang::String> s);
	static ref<java::lang::String> toString(jlong i, jint p2);
	static ref<java::lang::String> toUnsignedString(jlong i, jint p2);
	static ref<java::lang::String> toHexString(jlong i);
	static ref<java::lang::String> toOctalString(jlong i);
	static ref<java::lang::String> toBinaryString(jlong i);
	static ref<java::lang::String> toString(jlong i);
	static ref<java::lang::String> toUnsignedString(jlong i);
	static jlong parseLong(ref<java::lang::String> s, jint radix);
	static jlong parseLong(ref<java::lang::String> s);
	static jlong parseUnsignedLong(ref<java::lang::String> s, jint radix);
	static jlong parseUnsignedLong(ref<java::lang::String> s);
	static ref<java::lang::Long> valueOf(ref<java::lang::String> s, jint radix);
	static ref<java::lang::Long> valueOf(ref<java::lang::String> s);
	static ref<java::lang::Long> valueOf(jlong l);
	static ref<java::lang::Long> decode(ref<java::lang::String> nm);
	jbyte byteValue();
	jshort shortValue();
	jint intValue();
	jlong longValue();
	jfloat floatValue();
	jdouble doubleValue();
	ref<java::lang::String> toString();
	jint hashCode();
	static jint hashCode(jlong value);
	jboolean equals(ref<java::lang::Object> obj);
	static ref<java::lang::Long> getLong(ref<java::lang::String> nm);
	static ref<java::lang::Long> getLong(ref<java::lang::String> nm, jlong val);
	static ref<java::lang::Long> getLong(ref<java::lang::String> nm, ref<java::lang::Long> val);
	jint compareTo(ref<java::lang::Long> anotherLong);
	static jint compare(jlong x, jlong p2);
	static jint compareUnsigned(jlong x, jlong p2);
	static jlong divideUnsigned(jlong dividend, jlong p2);
	static jlong remainderUnsigned(jlong dividend, jlong p2);
	static jlong highestOneBit(jlong i);
	static jlong lowestOneBit(jlong i);
	static jint numberOfLeadingZeros(jlong i);
	static jint numberOfTrailingZeros(jlong i);
	static jint bitCount(jlong i);
	static jlong rotateLeft(jlong i, jint p2);
	static jlong rotateRight(jlong i, jint p2);
	static jlong reverse(jlong i);
	static jint signum(jlong i);
	static jlong reverseBytes(jlong i);
	static jlong sum(jlong a, jlong p2);
	static jlong max(jlong a, jlong p2);
	static jlong min(jlong a, jlong p2);

protected:

	Long(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::lang {

inline jint Long::BYTES_() { return get_static_field<SCAPIX_META_STRING("BYTES"), jint>(); }
inline jlong Long::MAX_VALUE_() { return get_static_field<SCAPIX_META_STRING("MAX_VALUE"), jlong>(); }
inline jlong Long::MIN_VALUE_() { return get_static_field<SCAPIX_META_STRING("MIN_VALUE"), jlong>(); }
inline jint Long::SIZE_() { return get_static_field<SCAPIX_META_STRING("SIZE"), jint>(); }
inline ref<java::lang::Class> Long::TYPE_() { return get_static_field<SCAPIX_META_STRING("TYPE"), ref<java::lang::Class>>(); }
inline ref<Long> Long::new_object(jlong value) { return base_::new_object(value); }
inline ref<Long> Long::new_object(ref<java::lang::String> s) { return base_::new_object(s); }
inline ref<java::lang::String> Long::toString(jlong i, jint p2) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(i, p2); }
inline ref<java::lang::String> Long::toUnsignedString(jlong i, jint p2) { return call_static_method<SCAPIX_META_STRING("toUnsignedString"), ref<java::lang::String>>(i, p2); }
inline ref<java::lang::String> Long::toHexString(jlong i) { return call_static_method<SCAPIX_META_STRING("toHexString"), ref<java::lang::String>>(i); }
inline ref<java::lang::String> Long::toOctalString(jlong i) { return call_static_method<SCAPIX_META_STRING("toOctalString"), ref<java::lang::String>>(i); }
inline ref<java::lang::String> Long::toBinaryString(jlong i) { return call_static_method<SCAPIX_META_STRING("toBinaryString"), ref<java::lang::String>>(i); }
inline ref<java::lang::String> Long::toString(jlong i) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(i); }
inline ref<java::lang::String> Long::toUnsignedString(jlong i) { return call_static_method<SCAPIX_META_STRING("toUnsignedString"), ref<java::lang::String>>(i); }
inline jlong Long::parseLong(ref<java::lang::String> s, jint radix) { return call_static_method<SCAPIX_META_STRING("parseLong"), jlong>(s, radix); }
inline jlong Long::parseLong(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("parseLong"), jlong>(s); }
inline jlong Long::parseUnsignedLong(ref<java::lang::String> s, jint radix) { return call_static_method<SCAPIX_META_STRING("parseUnsignedLong"), jlong>(s, radix); }
inline jlong Long::parseUnsignedLong(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("parseUnsignedLong"), jlong>(s); }
inline ref<java::lang::Long> Long::valueOf(ref<java::lang::String> s, jint radix) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::lang::Long>>(s, radix); }
inline ref<java::lang::Long> Long::valueOf(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::lang::Long>>(s); }
inline ref<java::lang::Long> Long::valueOf(jlong l) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::lang::Long>>(l); }
inline ref<java::lang::Long> Long::decode(ref<java::lang::String> nm) { return call_static_method<SCAPIX_META_STRING("decode"), ref<java::lang::Long>>(nm); }
inline jbyte Long::byteValue() { return call_method<SCAPIX_META_STRING("byteValue"), jbyte>(); }
inline jshort Long::shortValue() { return call_method<SCAPIX_META_STRING("shortValue"), jshort>(); }
inline jint Long::intValue() { return call_method<SCAPIX_META_STRING("intValue"), jint>(); }
inline jlong Long::longValue() { return call_method<SCAPIX_META_STRING("longValue"), jlong>(); }
inline jfloat Long::floatValue() { return call_method<SCAPIX_META_STRING("floatValue"), jfloat>(); }
inline jdouble Long::doubleValue() { return call_method<SCAPIX_META_STRING("doubleValue"), jdouble>(); }
inline ref<java::lang::String> Long::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint Long::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint Long::hashCode(jlong value) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(value); }
inline jboolean Long::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline ref<java::lang::Long> Long::getLong(ref<java::lang::String> nm) { return call_static_method<SCAPIX_META_STRING("getLong"), ref<java::lang::Long>>(nm); }
inline ref<java::lang::Long> Long::getLong(ref<java::lang::String> nm, jlong val) { return call_static_method<SCAPIX_META_STRING("getLong"), ref<java::lang::Long>>(nm, val); }
inline ref<java::lang::Long> Long::getLong(ref<java::lang::String> nm, ref<java::lang::Long> val) { return call_static_method<SCAPIX_META_STRING("getLong"), ref<java::lang::Long>>(nm, val); }
inline jint Long::compareTo(ref<java::lang::Long> anotherLong) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(anotherLong); }
inline jint Long::compare(jlong x, jlong p2) { return call_static_method<SCAPIX_META_STRING("compare"), jint>(x, p2); }
inline jint Long::compareUnsigned(jlong x, jlong p2) { return call_static_method<SCAPIX_META_STRING("compareUnsigned"), jint>(x, p2); }
inline jlong Long::divideUnsigned(jlong dividend, jlong p2) { return call_static_method<SCAPIX_META_STRING("divideUnsigned"), jlong>(dividend, p2); }
inline jlong Long::remainderUnsigned(jlong dividend, jlong p2) { return call_static_method<SCAPIX_META_STRING("remainderUnsigned"), jlong>(dividend, p2); }
inline jlong Long::highestOneBit(jlong i) { return call_static_method<SCAPIX_META_STRING("highestOneBit"), jlong>(i); }
inline jlong Long::lowestOneBit(jlong i) { return call_static_method<SCAPIX_META_STRING("lowestOneBit"), jlong>(i); }
inline jint Long::numberOfLeadingZeros(jlong i) { return call_static_method<SCAPIX_META_STRING("numberOfLeadingZeros"), jint>(i); }
inline jint Long::numberOfTrailingZeros(jlong i) { return call_static_method<SCAPIX_META_STRING("numberOfTrailingZeros"), jint>(i); }
inline jint Long::bitCount(jlong i) { return call_static_method<SCAPIX_META_STRING("bitCount"), jint>(i); }
inline jlong Long::rotateLeft(jlong i, jint p2) { return call_static_method<SCAPIX_META_STRING("rotateLeft"), jlong>(i, p2); }
inline jlong Long::rotateRight(jlong i, jint p2) { return call_static_method<SCAPIX_META_STRING("rotateRight"), jlong>(i, p2); }
inline jlong Long::reverse(jlong i) { return call_static_method<SCAPIX_META_STRING("reverse"), jlong>(i); }
inline jint Long::signum(jlong i) { return call_static_method<SCAPIX_META_STRING("signum"), jint>(i); }
inline jlong Long::reverseBytes(jlong i) { return call_static_method<SCAPIX_META_STRING("reverseBytes"), jlong>(i); }
inline jlong Long::sum(jlong a, jlong p2) { return call_static_method<SCAPIX_META_STRING("sum"), jlong>(a, p2); }
inline jlong Long::max(jlong a, jlong p2) { return call_static_method<SCAPIX_META_STRING("max"), jlong>(a, p2); }
inline jlong Long::min(jlong a, jlong p2) { return call_static_method<SCAPIX_META_STRING("min"), jlong>(a, p2); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_LONG_H
