// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_LANG_THROWABLE_H
#define SCAPIX_JAVA_LANG_THROWABLE_H

namespace scapix::java_api {

namespace java::io { class PrintStream; }
namespace java::io { class PrintWriter; }
namespace java::lang { class StackTraceElement; }
namespace java::lang { class String; }

namespace java::lang {

class Throwable : public object_base<SCAPIX_META_STRING("java/lang/Throwable"),
	java::lang::Object,
	java::io::Serializable>
{
public:

	static ref<Throwable> new_object();
	static ref<Throwable> new_object(ref<java::lang::String> message);
	static ref<Throwable> new_object(ref<java::lang::String> message, ref<java::lang::Throwable> cause);
	static ref<Throwable> new_object(ref<java::lang::Throwable> cause);
	ref<java::lang::String> getMessage();
	ref<java::lang::String> getLocalizedMessage();
	ref<java::lang::Throwable> getCause();
	ref<java::lang::Throwable> initCause(ref<java::lang::Throwable> cause);
	ref<java::lang::String> toString();
	void printStackTrace();
	void printStackTrace(ref<java::io::PrintStream> s);
	void printStackTrace(ref<java::io::PrintWriter> s);
	ref<java::lang::Throwable> fillInStackTrace();
	ref<link::java::array<java::lang::StackTraceElement>> getStackTrace();
	void setStackTrace(ref<link::java::array<java::lang::StackTraceElement>> stackTrace);
	void addSuppressed(ref<java::lang::Throwable> exception);
	ref<link::java::array<java::lang::Throwable>> getSuppressed();

protected:

	Throwable(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/StackTraceElement.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::lang {

inline ref<Throwable> Throwable::new_object() { return base_::new_object(); }
inline ref<Throwable> Throwable::new_object(ref<java::lang::String> message) { return base_::new_object(message); }
inline ref<Throwable> Throwable::new_object(ref<java::lang::String> message, ref<java::lang::Throwable> cause) { return base_::new_object(message, cause); }
inline ref<Throwable> Throwable::new_object(ref<java::lang::Throwable> cause) { return base_::new_object(cause); }
inline ref<java::lang::String> Throwable::getMessage() { return call_method<SCAPIX_META_STRING("getMessage"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Throwable::getLocalizedMessage() { return call_method<SCAPIX_META_STRING("getLocalizedMessage"), ref<java::lang::String>>(); }
inline ref<java::lang::Throwable> Throwable::getCause() { return call_method<SCAPIX_META_STRING("getCause"), ref<java::lang::Throwable>>(); }
inline ref<java::lang::Throwable> Throwable::initCause(ref<java::lang::Throwable> cause) { return call_method<SCAPIX_META_STRING("initCause"), ref<java::lang::Throwable>>(cause); }
inline ref<java::lang::String> Throwable::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline void Throwable::printStackTrace() { return call_method<SCAPIX_META_STRING("printStackTrace"), void>(); }
inline void Throwable::printStackTrace(ref<java::io::PrintStream> s) { return call_method<SCAPIX_META_STRING("printStackTrace"), void>(s); }
inline void Throwable::printStackTrace(ref<java::io::PrintWriter> s) { return call_method<SCAPIX_META_STRING("printStackTrace"), void>(s); }
inline ref<java::lang::Throwable> Throwable::fillInStackTrace() { return call_method<SCAPIX_META_STRING("fillInStackTrace"), ref<java::lang::Throwable>>(); }
inline ref<link::java::array<java::lang::StackTraceElement>> Throwable::getStackTrace() { return call_method<SCAPIX_META_STRING("getStackTrace"), ref<link::java::array<java::lang::StackTraceElement>>>(); }
inline void Throwable::setStackTrace(ref<link::java::array<java::lang::StackTraceElement>> stackTrace) { return call_method<SCAPIX_META_STRING("setStackTrace"), void>(stackTrace); }
inline void Throwable::addSuppressed(ref<java::lang::Throwable> exception) { return call_method<SCAPIX_META_STRING("addSuppressed"), void>(exception); }
inline ref<link::java::array<java::lang::Throwable>> Throwable::getSuppressed() { return call_method<SCAPIX_META_STRING("getSuppressed"), ref<link::java::array<java::lang::Throwable>>>(); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_THROWABLE_H
