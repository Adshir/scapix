// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_REFLECT_MODIFIER_H
#define SCAPIX_JAVA_LANG_REFLECT_MODIFIER_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace java::lang::reflect {

class Modifier : public object_base<SCAPIX_META_STRING("java/lang/reflect/Modifier"),
	java::lang::Object>
{
public:

	static jint ABSTRACT_();
	static jint FINAL_();
	static jint INTERFACE_();
	static jint NATIVE_();
	static jint PRIVATE_();
	static jint PROTECTED_();
	static jint PUBLIC_();
	static jint STATIC_();
	static jint STRICT_();
	static jint SYNCHRONIZED_();
	static jint TRANSIENT_();
	static jint VOLATILE_();

	static ref<Modifier> new_object();
	static jboolean isPublic(jint mod);
	static jboolean isPrivate(jint mod);
	static jboolean isProtected(jint mod);
	static jboolean isStatic(jint mod);
	static jboolean isFinal(jint mod);
	static jboolean isSynchronized(jint mod);
	static jboolean isVolatile(jint mod);
	static jboolean isTransient(jint mod);
	static jboolean isNative(jint mod);
	static jboolean isInterface(jint mod);
	static jboolean isAbstract(jint mod);
	static jboolean isStrict(jint mod);
	static ref<java::lang::String> toString(jint mod);
	static jint classModifiers();
	static jint interfaceModifiers();
	static jint constructorModifiers();
	static jint methodModifiers();
	static jint fieldModifiers();
	static jint parameterModifiers();

protected:

	Modifier(handle_type h) : base_(h) {}

};

} // namespace java::lang::reflect
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::lang::reflect {

inline jint Modifier::ABSTRACT_() { return get_static_field<SCAPIX_META_STRING("ABSTRACT"), jint>(); }
inline jint Modifier::FINAL_() { return get_static_field<SCAPIX_META_STRING("FINAL"), jint>(); }
inline jint Modifier::INTERFACE_() { return get_static_field<SCAPIX_META_STRING("INTERFACE"), jint>(); }
inline jint Modifier::NATIVE_() { return get_static_field<SCAPIX_META_STRING("NATIVE"), jint>(); }
inline jint Modifier::PRIVATE_() { return get_static_field<SCAPIX_META_STRING("PRIVATE"), jint>(); }
inline jint Modifier::PROTECTED_() { return get_static_field<SCAPIX_META_STRING("PROTECTED"), jint>(); }
inline jint Modifier::PUBLIC_() { return get_static_field<SCAPIX_META_STRING("PUBLIC"), jint>(); }
inline jint Modifier::STATIC_() { return get_static_field<SCAPIX_META_STRING("STATIC"), jint>(); }
inline jint Modifier::STRICT_() { return get_static_field<SCAPIX_META_STRING("STRICT"), jint>(); }
inline jint Modifier::SYNCHRONIZED_() { return get_static_field<SCAPIX_META_STRING("SYNCHRONIZED"), jint>(); }
inline jint Modifier::TRANSIENT_() { return get_static_field<SCAPIX_META_STRING("TRANSIENT"), jint>(); }
inline jint Modifier::VOLATILE_() { return get_static_field<SCAPIX_META_STRING("VOLATILE"), jint>(); }
inline ref<Modifier> Modifier::new_object() { return base_::new_object(); }
inline jboolean Modifier::isPublic(jint mod) { return call_static_method<SCAPIX_META_STRING("isPublic"), jboolean>(mod); }
inline jboolean Modifier::isPrivate(jint mod) { return call_static_method<SCAPIX_META_STRING("isPrivate"), jboolean>(mod); }
inline jboolean Modifier::isProtected(jint mod) { return call_static_method<SCAPIX_META_STRING("isProtected"), jboolean>(mod); }
inline jboolean Modifier::isStatic(jint mod) { return call_static_method<SCAPIX_META_STRING("isStatic"), jboolean>(mod); }
inline jboolean Modifier::isFinal(jint mod) { return call_static_method<SCAPIX_META_STRING("isFinal"), jboolean>(mod); }
inline jboolean Modifier::isSynchronized(jint mod) { return call_static_method<SCAPIX_META_STRING("isSynchronized"), jboolean>(mod); }
inline jboolean Modifier::isVolatile(jint mod) { return call_static_method<SCAPIX_META_STRING("isVolatile"), jboolean>(mod); }
inline jboolean Modifier::isTransient(jint mod) { return call_static_method<SCAPIX_META_STRING("isTransient"), jboolean>(mod); }
inline jboolean Modifier::isNative(jint mod) { return call_static_method<SCAPIX_META_STRING("isNative"), jboolean>(mod); }
inline jboolean Modifier::isInterface(jint mod) { return call_static_method<SCAPIX_META_STRING("isInterface"), jboolean>(mod); }
inline jboolean Modifier::isAbstract(jint mod) { return call_static_method<SCAPIX_META_STRING("isAbstract"), jboolean>(mod); }
inline jboolean Modifier::isStrict(jint mod) { return call_static_method<SCAPIX_META_STRING("isStrict"), jboolean>(mod); }
inline ref<java::lang::String> Modifier::toString(jint mod) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(mod); }
inline jint Modifier::classModifiers() { return call_static_method<SCAPIX_META_STRING("classModifiers"), jint>(); }
inline jint Modifier::interfaceModifiers() { return call_static_method<SCAPIX_META_STRING("interfaceModifiers"), jint>(); }
inline jint Modifier::constructorModifiers() { return call_static_method<SCAPIX_META_STRING("constructorModifiers"), jint>(); }
inline jint Modifier::methodModifiers() { return call_static_method<SCAPIX_META_STRING("methodModifiers"), jint>(); }
inline jint Modifier::fieldModifiers() { return call_static_method<SCAPIX_META_STRING("fieldModifiers"), jint>(); }
inline jint Modifier::parameterModifiers() { return call_static_method<SCAPIX_META_STRING("parameterModifiers"), jint>(); }

} // namespace java::lang::reflect
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_REFLECT_MODIFIER_H
