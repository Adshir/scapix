// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_INVOKE_METHODHANDLES_H
#define SCAPIX_JAVA_LANG_INVOKE_METHODHANDLES_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang::invoke { class MethodHandle; }
namespace java::lang::invoke { class MethodHandles_Lookup; }
namespace java::lang::invoke { class MethodType; }
namespace java::lang::reflect { class Member; }
namespace java::util { class List; }

namespace java::lang::invoke {

class MethodHandles : public object_base<SCAPIX_META_STRING("java/lang/invoke/MethodHandles"),
	java::lang::Object>
{
public:

	using Lookup = MethodHandles_Lookup;

	static ref<java::lang::invoke::MethodHandles_Lookup> lookup();
	static ref<java::lang::invoke::MethodHandles_Lookup> publicLookup();
	static ref<java::lang::reflect::Member> reflectAs(ref<java::lang::Class> expected, ref<java::lang::invoke::MethodHandle> target);
	static ref<java::lang::invoke::MethodHandle> arrayElementGetter(ref<java::lang::Class> arrayClass);
	static ref<java::lang::invoke::MethodHandle> arrayElementSetter(ref<java::lang::Class> arrayClass);
	static ref<java::lang::invoke::MethodHandle> spreadInvoker(ref<java::lang::invoke::MethodType> type, jint leadingArgCount);
	static ref<java::lang::invoke::MethodHandle> exactInvoker(ref<java::lang::invoke::MethodType> type);
	static ref<java::lang::invoke::MethodHandle> invoker(ref<java::lang::invoke::MethodType> type);
	static ref<java::lang::invoke::MethodHandle> explicitCastArguments(ref<java::lang::invoke::MethodHandle> target, ref<java::lang::invoke::MethodType> newType);
	static ref<java::lang::invoke::MethodHandle> permuteArguments(ref<java::lang::invoke::MethodHandle> target, ref<java::lang::invoke::MethodType> newType, ref<link::java::array<jint>> reorder);
	static ref<java::lang::invoke::MethodHandle> constant(ref<java::lang::Class> type, ref<java::lang::Object> value);
	static ref<java::lang::invoke::MethodHandle> identity(ref<java::lang::Class> type);
	static ref<java::lang::invoke::MethodHandle> insertArguments(ref<java::lang::invoke::MethodHandle> target, jint pos, ref<link::java::array<java::lang::Object>> values);
	static ref<java::lang::invoke::MethodHandle> dropArguments(ref<java::lang::invoke::MethodHandle> target, jint pos, ref<java::util::List> valueTypes);
	static ref<java::lang::invoke::MethodHandle> dropArguments(ref<java::lang::invoke::MethodHandle> target, jint pos, ref<link::java::array<java::lang::Class>> valueTypes);
	static ref<java::lang::invoke::MethodHandle> filterArguments(ref<java::lang::invoke::MethodHandle> target, jint pos, ref<link::java::array<java::lang::invoke::MethodHandle>> filters);
	static ref<java::lang::invoke::MethodHandle> collectArguments(ref<java::lang::invoke::MethodHandle> target, jint pos, ref<java::lang::invoke::MethodHandle> filter);
	static ref<java::lang::invoke::MethodHandle> filterReturnValue(ref<java::lang::invoke::MethodHandle> target, ref<java::lang::invoke::MethodHandle> filter);
	static ref<java::lang::invoke::MethodHandle> foldArguments(ref<java::lang::invoke::MethodHandle> target, ref<java::lang::invoke::MethodHandle> combiner);
	static ref<java::lang::invoke::MethodHandle> guardWithTest(ref<java::lang::invoke::MethodHandle> test, ref<java::lang::invoke::MethodHandle> target, ref<java::lang::invoke::MethodHandle> fallback);
	static ref<java::lang::invoke::MethodHandle> catchException(ref<java::lang::invoke::MethodHandle> target, ref<java::lang::Class> exType, ref<java::lang::invoke::MethodHandle> handler);
	static ref<java::lang::invoke::MethodHandle> throwException(ref<java::lang::Class> returnType, ref<java::lang::Class> exType);

protected:

	MethodHandles(handle_type h) : base_(h) {}

};

} // namespace java::lang::invoke
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/invoke/MethodHandle.h>
#include <scapix/java_api/java/lang/invoke/MethodHandles_Lookup.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>
#include <scapix/java_api/java/lang/reflect/Member.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace java::lang::invoke {

inline ref<java::lang::invoke::MethodHandles_Lookup> MethodHandles::lookup() { return call_static_method<SCAPIX_META_STRING("lookup"), ref<java::lang::invoke::MethodHandles_Lookup>>(); }
inline ref<java::lang::invoke::MethodHandles_Lookup> MethodHandles::publicLookup() { return call_static_method<SCAPIX_META_STRING("publicLookup"), ref<java::lang::invoke::MethodHandles_Lookup>>(); }
inline ref<java::lang::reflect::Member> MethodHandles::reflectAs(ref<java::lang::Class> expected, ref<java::lang::invoke::MethodHandle> target) { return call_static_method<SCAPIX_META_STRING("reflectAs"), ref<java::lang::reflect::Member>>(expected, target); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::arrayElementGetter(ref<java::lang::Class> arrayClass) { return call_static_method<SCAPIX_META_STRING("arrayElementGetter"), ref<java::lang::invoke::MethodHandle>>(arrayClass); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::arrayElementSetter(ref<java::lang::Class> arrayClass) { return call_static_method<SCAPIX_META_STRING("arrayElementSetter"), ref<java::lang::invoke::MethodHandle>>(arrayClass); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::spreadInvoker(ref<java::lang::invoke::MethodType> type, jint leadingArgCount) { return call_static_method<SCAPIX_META_STRING("spreadInvoker"), ref<java::lang::invoke::MethodHandle>>(type, leadingArgCount); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::exactInvoker(ref<java::lang::invoke::MethodType> type) { return call_static_method<SCAPIX_META_STRING("exactInvoker"), ref<java::lang::invoke::MethodHandle>>(type); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::invoker(ref<java::lang::invoke::MethodType> type) { return call_static_method<SCAPIX_META_STRING("invoker"), ref<java::lang::invoke::MethodHandle>>(type); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::explicitCastArguments(ref<java::lang::invoke::MethodHandle> target, ref<java::lang::invoke::MethodType> newType) { return call_static_method<SCAPIX_META_STRING("explicitCastArguments"), ref<java::lang::invoke::MethodHandle>>(target, newType); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::permuteArguments(ref<java::lang::invoke::MethodHandle> target, ref<java::lang::invoke::MethodType> newType, ref<link::java::array<jint>> reorder) { return call_static_method<SCAPIX_META_STRING("permuteArguments"), ref<java::lang::invoke::MethodHandle>>(target, newType, reorder); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::constant(ref<java::lang::Class> type, ref<java::lang::Object> value) { return call_static_method<SCAPIX_META_STRING("constant"), ref<java::lang::invoke::MethodHandle>>(type, value); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::identity(ref<java::lang::Class> type) { return call_static_method<SCAPIX_META_STRING("identity"), ref<java::lang::invoke::MethodHandle>>(type); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::insertArguments(ref<java::lang::invoke::MethodHandle> target, jint pos, ref<link::java::array<java::lang::Object>> values) { return call_static_method<SCAPIX_META_STRING("insertArguments"), ref<java::lang::invoke::MethodHandle>>(target, pos, values); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::dropArguments(ref<java::lang::invoke::MethodHandle> target, jint pos, ref<java::util::List> valueTypes) { return call_static_method<SCAPIX_META_STRING("dropArguments"), ref<java::lang::invoke::MethodHandle>>(target, pos, valueTypes); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::dropArguments(ref<java::lang::invoke::MethodHandle> target, jint pos, ref<link::java::array<java::lang::Class>> valueTypes) { return call_static_method<SCAPIX_META_STRING("dropArguments"), ref<java::lang::invoke::MethodHandle>>(target, pos, valueTypes); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::filterArguments(ref<java::lang::invoke::MethodHandle> target, jint pos, ref<link::java::array<java::lang::invoke::MethodHandle>> filters) { return call_static_method<SCAPIX_META_STRING("filterArguments"), ref<java::lang::invoke::MethodHandle>>(target, pos, filters); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::collectArguments(ref<java::lang::invoke::MethodHandle> target, jint pos, ref<java::lang::invoke::MethodHandle> filter) { return call_static_method<SCAPIX_META_STRING("collectArguments"), ref<java::lang::invoke::MethodHandle>>(target, pos, filter); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::filterReturnValue(ref<java::lang::invoke::MethodHandle> target, ref<java::lang::invoke::MethodHandle> filter) { return call_static_method<SCAPIX_META_STRING("filterReturnValue"), ref<java::lang::invoke::MethodHandle>>(target, filter); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::foldArguments(ref<java::lang::invoke::MethodHandle> target, ref<java::lang::invoke::MethodHandle> combiner) { return call_static_method<SCAPIX_META_STRING("foldArguments"), ref<java::lang::invoke::MethodHandle>>(target, combiner); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::guardWithTest(ref<java::lang::invoke::MethodHandle> test, ref<java::lang::invoke::MethodHandle> target, ref<java::lang::invoke::MethodHandle> fallback) { return call_static_method<SCAPIX_META_STRING("guardWithTest"), ref<java::lang::invoke::MethodHandle>>(test, target, fallback); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::catchException(ref<java::lang::invoke::MethodHandle> target, ref<java::lang::Class> exType, ref<java::lang::invoke::MethodHandle> handler) { return call_static_method<SCAPIX_META_STRING("catchException"), ref<java::lang::invoke::MethodHandle>>(target, exType, handler); }
inline ref<java::lang::invoke::MethodHandle> MethodHandles::throwException(ref<java::lang::Class> returnType, ref<java::lang::Class> exType) { return call_static_method<SCAPIX_META_STRING("throwException"), ref<java::lang::invoke::MethodHandle>>(returnType, exType); }

} // namespace java::lang::invoke
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_INVOKE_METHODHANDLES_H
