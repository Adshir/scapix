// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Runnable.h>

#ifndef SCAPIX_JAVA_LANG_THREAD_H
#define SCAPIX_JAVA_LANG_THREAD_H

namespace scapix::java_api {

namespace java::lang { class ClassLoader; }
namespace java::lang { class StackTraceElement; }
namespace java::lang { class String; }
namespace java::lang { class Thread_State; }
namespace java::lang { class Thread_UncaughtExceptionHandler; }
namespace java::lang { class ThreadGroup; }
namespace java::lang { class Throwable; }
namespace java::util { class Map; }

namespace java::lang {

class Thread : public object_base<SCAPIX_META_STRING("java/lang/Thread"),
	java::lang::Object,
	java::lang::Runnable>
{
public:

	using UncaughtExceptionHandler = Thread_UncaughtExceptionHandler;
	using State = Thread_State;

	static jint MAX_PRIORITY_();
	static jint MIN_PRIORITY_();
	static jint NORM_PRIORITY_();

	static ref<Thread> new_object();
	static ref<Thread> new_object(ref<java::lang::Runnable> target);
	static ref<Thread> new_object(ref<java::lang::ThreadGroup> group, ref<java::lang::Runnable> target);
	static ref<Thread> new_object(ref<java::lang::String> name);
	static ref<Thread> new_object(ref<java::lang::ThreadGroup> group, ref<java::lang::String> name);
	static ref<Thread> new_object(ref<java::lang::Runnable> target, ref<java::lang::String> name);
	static ref<Thread> new_object(ref<java::lang::ThreadGroup> group, ref<java::lang::Runnable> target, ref<java::lang::String> name);
	static ref<Thread> new_object(ref<java::lang::ThreadGroup> group, ref<java::lang::Runnable> target, ref<java::lang::String> name, jlong stackSize);
	static ref<java::lang::Thread> currentThread();
	static void yield();
	static void sleep(jlong millis);
	static void sleep(jlong millis, jint p2);
	void start();
	void run();
	void stop();
	void stop(ref<java::lang::Throwable> obj);
	void interrupt();
	static jboolean interrupted();
	jboolean isInterrupted();
	void destroy();
	jboolean isAlive();
	void suspend();
	void resume();
	void setPriority(jint newPriority);
	jint getPriority();
	void setName(ref<java::lang::String> name);
	ref<java::lang::String> getName();
	ref<java::lang::ThreadGroup> getThreadGroup();
	static jint activeCount();
	static jint enumerate(ref<link::java::array<java::lang::Thread>> tarray);
	jint countStackFrames();
	void join(jlong millis);
	void join(jlong millis, jint p2);
	void join();
	static void dumpStack();
	void setDaemon(jboolean on);
	jboolean isDaemon();
	void checkAccess();
	ref<java::lang::String> toString();
	ref<java::lang::ClassLoader> getContextClassLoader();
	void setContextClassLoader(ref<java::lang::ClassLoader> cl);
	static jboolean holdsLock(ref<java::lang::Object> obj);
	ref<link::java::array<java::lang::StackTraceElement>> getStackTrace();
	static ref<java::util::Map> getAllStackTraces();
	jlong getId();
	ref<java::lang::Thread_State> getState();
	static void setDefaultUncaughtExceptionHandler(ref<java::lang::Thread_UncaughtExceptionHandler> eh);
	static ref<java::lang::Thread_UncaughtExceptionHandler> getDefaultUncaughtExceptionHandler();
	ref<java::lang::Thread_UncaughtExceptionHandler> getUncaughtExceptionHandler();
	void setUncaughtExceptionHandler(ref<java::lang::Thread_UncaughtExceptionHandler> eh);

protected:

	Thread(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/StackTraceElement.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread_State.h>
#include <scapix/java_api/java/lang/Thread_UncaughtExceptionHandler.h>
#include <scapix/java_api/java/lang/ThreadGroup.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/util/Map.h>

namespace scapix::java_api {
namespace java::lang {

inline jint Thread::MAX_PRIORITY_() { return get_static_field<SCAPIX_META_STRING("MAX_PRIORITY"), jint>(); }
inline jint Thread::MIN_PRIORITY_() { return get_static_field<SCAPIX_META_STRING("MIN_PRIORITY"), jint>(); }
inline jint Thread::NORM_PRIORITY_() { return get_static_field<SCAPIX_META_STRING("NORM_PRIORITY"), jint>(); }
inline ref<Thread> Thread::new_object() { return base_::new_object(); }
inline ref<Thread> Thread::new_object(ref<java::lang::Runnable> target) { return base_::new_object(target); }
inline ref<Thread> Thread::new_object(ref<java::lang::ThreadGroup> group, ref<java::lang::Runnable> target) { return base_::new_object(group, target); }
inline ref<Thread> Thread::new_object(ref<java::lang::String> name) { return base_::new_object(name); }
inline ref<Thread> Thread::new_object(ref<java::lang::ThreadGroup> group, ref<java::lang::String> name) { return base_::new_object(group, name); }
inline ref<Thread> Thread::new_object(ref<java::lang::Runnable> target, ref<java::lang::String> name) { return base_::new_object(target, name); }
inline ref<Thread> Thread::new_object(ref<java::lang::ThreadGroup> group, ref<java::lang::Runnable> target, ref<java::lang::String> name) { return base_::new_object(group, target, name); }
inline ref<Thread> Thread::new_object(ref<java::lang::ThreadGroup> group, ref<java::lang::Runnable> target, ref<java::lang::String> name, jlong stackSize) { return base_::new_object(group, target, name, stackSize); }
inline ref<java::lang::Thread> Thread::currentThread() { return call_static_method<SCAPIX_META_STRING("currentThread"), ref<java::lang::Thread>>(); }
inline void Thread::yield() { return call_static_method<SCAPIX_META_STRING("yield"), void>(); }
inline void Thread::sleep(jlong millis) { return call_static_method<SCAPIX_META_STRING("sleep"), void>(millis); }
inline void Thread::sleep(jlong millis, jint p2) { return call_static_method<SCAPIX_META_STRING("sleep"), void>(millis, p2); }
inline void Thread::start() { return call_method<SCAPIX_META_STRING("start"), void>(); }
inline void Thread::run() { return call_method<SCAPIX_META_STRING("run"), void>(); }
inline void Thread::stop() { return call_method<SCAPIX_META_STRING("stop"), void>(); }
inline void Thread::stop(ref<java::lang::Throwable> obj) { return call_method<SCAPIX_META_STRING("stop"), void>(obj); }
inline void Thread::interrupt() { return call_method<SCAPIX_META_STRING("interrupt"), void>(); }
inline jboolean Thread::interrupted() { return call_static_method<SCAPIX_META_STRING("interrupted"), jboolean>(); }
inline jboolean Thread::isInterrupted() { return call_method<SCAPIX_META_STRING("isInterrupted"), jboolean>(); }
inline void Thread::destroy() { return call_method<SCAPIX_META_STRING("destroy"), void>(); }
inline jboolean Thread::isAlive() { return call_method<SCAPIX_META_STRING("isAlive"), jboolean>(); }
inline void Thread::suspend() { return call_method<SCAPIX_META_STRING("suspend"), void>(); }
inline void Thread::resume() { return call_method<SCAPIX_META_STRING("resume"), void>(); }
inline void Thread::setPriority(jint newPriority) { return call_method<SCAPIX_META_STRING("setPriority"), void>(newPriority); }
inline jint Thread::getPriority() { return call_method<SCAPIX_META_STRING("getPriority"), jint>(); }
inline void Thread::setName(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("setName"), void>(name); }
inline ref<java::lang::String> Thread::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<java::lang::ThreadGroup> Thread::getThreadGroup() { return call_method<SCAPIX_META_STRING("getThreadGroup"), ref<java::lang::ThreadGroup>>(); }
inline jint Thread::activeCount() { return call_static_method<SCAPIX_META_STRING("activeCount"), jint>(); }
inline jint Thread::enumerate(ref<link::java::array<java::lang::Thread>> tarray) { return call_static_method<SCAPIX_META_STRING("enumerate"), jint>(tarray); }
inline jint Thread::countStackFrames() { return call_method<SCAPIX_META_STRING("countStackFrames"), jint>(); }
inline void Thread::join(jlong millis) { return call_method<SCAPIX_META_STRING("join"), void>(millis); }
inline void Thread::join(jlong millis, jint p2) { return call_method<SCAPIX_META_STRING("join"), void>(millis, p2); }
inline void Thread::join() { return call_method<SCAPIX_META_STRING("join"), void>(); }
inline void Thread::dumpStack() { return call_static_method<SCAPIX_META_STRING("dumpStack"), void>(); }
inline void Thread::setDaemon(jboolean on) { return call_method<SCAPIX_META_STRING("setDaemon"), void>(on); }
inline jboolean Thread::isDaemon() { return call_method<SCAPIX_META_STRING("isDaemon"), jboolean>(); }
inline void Thread::checkAccess() { return call_method<SCAPIX_META_STRING("checkAccess"), void>(); }
inline ref<java::lang::String> Thread::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::ClassLoader> Thread::getContextClassLoader() { return call_method<SCAPIX_META_STRING("getContextClassLoader"), ref<java::lang::ClassLoader>>(); }
inline void Thread::setContextClassLoader(ref<java::lang::ClassLoader> cl) { return call_method<SCAPIX_META_STRING("setContextClassLoader"), void>(cl); }
inline jboolean Thread::holdsLock(ref<java::lang::Object> obj) { return call_static_method<SCAPIX_META_STRING("holdsLock"), jboolean>(obj); }
inline ref<link::java::array<java::lang::StackTraceElement>> Thread::getStackTrace() { return call_method<SCAPIX_META_STRING("getStackTrace"), ref<link::java::array<java::lang::StackTraceElement>>>(); }
inline ref<java::util::Map> Thread::getAllStackTraces() { return call_static_method<SCAPIX_META_STRING("getAllStackTraces"), ref<java::util::Map>>(); }
inline jlong Thread::getId() { return call_method<SCAPIX_META_STRING("getId"), jlong>(); }
inline ref<java::lang::Thread_State> Thread::getState() { return call_method<SCAPIX_META_STRING("getState"), ref<java::lang::Thread_State>>(); }
inline void Thread::setDefaultUncaughtExceptionHandler(ref<java::lang::Thread_UncaughtExceptionHandler> eh) { return call_static_method<SCAPIX_META_STRING("setDefaultUncaughtExceptionHandler"), void>(eh); }
inline ref<java::lang::Thread_UncaughtExceptionHandler> Thread::getDefaultUncaughtExceptionHandler() { return call_static_method<SCAPIX_META_STRING("getDefaultUncaughtExceptionHandler"), ref<java::lang::Thread_UncaughtExceptionHandler>>(); }
inline ref<java::lang::Thread_UncaughtExceptionHandler> Thread::getUncaughtExceptionHandler() { return call_method<SCAPIX_META_STRING("getUncaughtExceptionHandler"), ref<java::lang::Thread_UncaughtExceptionHandler>>(); }
inline void Thread::setUncaughtExceptionHandler(ref<java::lang::Thread_UncaughtExceptionHandler> eh) { return call_method<SCAPIX_META_STRING("setUncaughtExceptionHandler"), void>(eh); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_THREAD_H
