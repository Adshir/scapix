// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Appendable.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_LANG_STRINGBUFFER_H
#define SCAPIX_JAVA_LANG_STRINGBUFFER_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace java::lang {

class StringBuffer : public object_base<SCAPIX_META_STRING("java/lang/StringBuffer"),
	java::lang::Object,
	java::lang::Appendable,
	java::lang::CharSequence,
	java::io::Serializable>
{
public:

	static ref<StringBuffer> new_object();
	static ref<StringBuffer> new_object(jint capacity);
	static ref<StringBuffer> new_object(ref<java::lang::String> str);
	static ref<StringBuffer> new_object(ref<java::lang::CharSequence> seq);
	jint length();
	jint capacity();
	void ensureCapacity(jint minimumCapacity);
	void trimToSize();
	void setLength(jint newLength);
	jchar charAt(jint index);
	jint codePointAt(jint index);
	jint codePointBefore(jint index);
	jint codePointCount(jint beginIndex, jint endIndex);
	jint offsetByCodePoints(jint index, jint codePointOffset);
	void getChars(jint srcBegin, jint srcEnd, ref<link::java::array<jchar>> dst, jint dstBegin);
	void setCharAt(jint index, jchar ch);
	ref<java::lang::StringBuffer> append(ref<java::lang::Object> obj);
	ref<java::lang::StringBuffer> append(ref<java::lang::String> str);
	ref<java::lang::StringBuffer> append(ref<java::lang::StringBuffer> sb);
	ref<java::lang::StringBuffer> append(ref<java::lang::CharSequence> s);
	ref<java::lang::StringBuffer> append(ref<java::lang::CharSequence> s, jint start, jint end);
	ref<java::lang::StringBuffer> append(ref<link::java::array<jchar>> str);
	ref<java::lang::StringBuffer> append(ref<link::java::array<jchar>> str, jint offset, jint len);
	ref<java::lang::StringBuffer> append(jboolean b);
	ref<java::lang::StringBuffer> append(jchar c);
	ref<java::lang::StringBuffer> append(jint i);
	ref<java::lang::StringBuffer> appendCodePoint(jint codePoint);
	ref<java::lang::StringBuffer> append(jlong lng);
	ref<java::lang::StringBuffer> append(jfloat f);
	ref<java::lang::StringBuffer> append(jdouble d);
	ref<java::lang::StringBuffer> delete_(jint start, jint end);
	ref<java::lang::StringBuffer> deleteCharAt(jint index);
	ref<java::lang::StringBuffer> replace(jint start, jint end, ref<java::lang::String> str);
	ref<java::lang::String> substring(jint start);
	ref<java::lang::CharSequence> subSequence(jint start, jint end);
	ref<java::lang::String> substring(jint start, jint end);
	ref<java::lang::StringBuffer> insert(jint index, ref<link::java::array<jchar>> str, jint offset, jint len);
	ref<java::lang::StringBuffer> insert(jint offset, ref<java::lang::Object> obj);
	ref<java::lang::StringBuffer> insert(jint offset, ref<java::lang::String> str);
	ref<java::lang::StringBuffer> insert(jint offset, ref<link::java::array<jchar>> str);
	ref<java::lang::StringBuffer> insert(jint dstOffset, ref<java::lang::CharSequence> s);
	ref<java::lang::StringBuffer> insert(jint dstOffset, ref<java::lang::CharSequence> s, jint start, jint end);
	ref<java::lang::StringBuffer> insert(jint offset, jboolean b);
	ref<java::lang::StringBuffer> insert(jint offset, jchar c);
	ref<java::lang::StringBuffer> insert(jint offset, jint i);
	ref<java::lang::StringBuffer> insert(jint offset, jlong l);
	ref<java::lang::StringBuffer> insert(jint offset, jfloat f);
	ref<java::lang::StringBuffer> insert(jint offset, jdouble d);
	jint indexOf(ref<java::lang::String> str);
	jint indexOf(ref<java::lang::String> str, jint fromIndex);
	jint lastIndexOf(ref<java::lang::String> str);
	jint lastIndexOf(ref<java::lang::String> str, jint fromIndex);
	ref<java::lang::StringBuffer> reverse();
	ref<java::lang::String> toString();

protected:

	StringBuffer(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::lang {

inline ref<StringBuffer> StringBuffer::new_object() { return base_::new_object(); }
inline ref<StringBuffer> StringBuffer::new_object(jint capacity) { return base_::new_object(capacity); }
inline ref<StringBuffer> StringBuffer::new_object(ref<java::lang::String> str) { return base_::new_object(str); }
inline ref<StringBuffer> StringBuffer::new_object(ref<java::lang::CharSequence> seq) { return base_::new_object(seq); }
inline jint StringBuffer::length() { return call_method<SCAPIX_META_STRING("length"), jint>(); }
inline jint StringBuffer::capacity() { return call_method<SCAPIX_META_STRING("capacity"), jint>(); }
inline void StringBuffer::ensureCapacity(jint minimumCapacity) { return call_method<SCAPIX_META_STRING("ensureCapacity"), void>(minimumCapacity); }
inline void StringBuffer::trimToSize() { return call_method<SCAPIX_META_STRING("trimToSize"), void>(); }
inline void StringBuffer::setLength(jint newLength) { return call_method<SCAPIX_META_STRING("setLength"), void>(newLength); }
inline jchar StringBuffer::charAt(jint index) { return call_method<SCAPIX_META_STRING("charAt"), jchar>(index); }
inline jint StringBuffer::codePointAt(jint index) { return call_method<SCAPIX_META_STRING("codePointAt"), jint>(index); }
inline jint StringBuffer::codePointBefore(jint index) { return call_method<SCAPIX_META_STRING("codePointBefore"), jint>(index); }
inline jint StringBuffer::codePointCount(jint beginIndex, jint endIndex) { return call_method<SCAPIX_META_STRING("codePointCount"), jint>(beginIndex, endIndex); }
inline jint StringBuffer::offsetByCodePoints(jint index, jint codePointOffset) { return call_method<SCAPIX_META_STRING("offsetByCodePoints"), jint>(index, codePointOffset); }
inline void StringBuffer::getChars(jint srcBegin, jint srcEnd, ref<link::java::array<jchar>> dst, jint dstBegin) { return call_method<SCAPIX_META_STRING("getChars"), void>(srcBegin, srcEnd, dst, dstBegin); }
inline void StringBuffer::setCharAt(jint index, jchar ch) { return call_method<SCAPIX_META_STRING("setCharAt"), void>(index, ch); }
inline ref<java::lang::StringBuffer> StringBuffer::append(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuffer>>(obj); }
inline ref<java::lang::StringBuffer> StringBuffer::append(ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuffer>>(str); }
inline ref<java::lang::StringBuffer> StringBuffer::append(ref<java::lang::StringBuffer> sb) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuffer>>(sb); }
inline ref<java::lang::StringBuffer> StringBuffer::append(ref<java::lang::CharSequence> s) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuffer>>(s); }
inline ref<java::lang::StringBuffer> StringBuffer::append(ref<java::lang::CharSequence> s, jint start, jint end) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuffer>>(s, start, end); }
inline ref<java::lang::StringBuffer> StringBuffer::append(ref<link::java::array<jchar>> str) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuffer>>(str); }
inline ref<java::lang::StringBuffer> StringBuffer::append(ref<link::java::array<jchar>> str, jint offset, jint len) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuffer>>(str, offset, len); }
inline ref<java::lang::StringBuffer> StringBuffer::append(jboolean b) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuffer>>(b); }
inline ref<java::lang::StringBuffer> StringBuffer::append(jchar c) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuffer>>(c); }
inline ref<java::lang::StringBuffer> StringBuffer::append(jint i) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuffer>>(i); }
inline ref<java::lang::StringBuffer> StringBuffer::appendCodePoint(jint codePoint) { return call_method<SCAPIX_META_STRING("appendCodePoint"), ref<java::lang::StringBuffer>>(codePoint); }
inline ref<java::lang::StringBuffer> StringBuffer::append(jlong lng) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuffer>>(lng); }
inline ref<java::lang::StringBuffer> StringBuffer::append(jfloat f) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuffer>>(f); }
inline ref<java::lang::StringBuffer> StringBuffer::append(jdouble d) { return call_method<SCAPIX_META_STRING("append"), ref<java::lang::StringBuffer>>(d); }
inline ref<java::lang::StringBuffer> StringBuffer::delete_(jint start, jint end) { return call_method<SCAPIX_META_STRING("delete"), ref<java::lang::StringBuffer>>(start, end); }
inline ref<java::lang::StringBuffer> StringBuffer::deleteCharAt(jint index) { return call_method<SCAPIX_META_STRING("deleteCharAt"), ref<java::lang::StringBuffer>>(index); }
inline ref<java::lang::StringBuffer> StringBuffer::replace(jint start, jint end, ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("replace"), ref<java::lang::StringBuffer>>(start, end, str); }
inline ref<java::lang::String> StringBuffer::substring(jint start) { return call_method<SCAPIX_META_STRING("substring"), ref<java::lang::String>>(start); }
inline ref<java::lang::CharSequence> StringBuffer::subSequence(jint start, jint end) { return call_method<SCAPIX_META_STRING("subSequence"), ref<java::lang::CharSequence>>(start, end); }
inline ref<java::lang::String> StringBuffer::substring(jint start, jint end) { return call_method<SCAPIX_META_STRING("substring"), ref<java::lang::String>>(start, end); }
inline ref<java::lang::StringBuffer> StringBuffer::insert(jint index, ref<link::java::array<jchar>> str, jint offset, jint len) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuffer>>(index, str, offset, len); }
inline ref<java::lang::StringBuffer> StringBuffer::insert(jint offset, ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuffer>>(offset, obj); }
inline ref<java::lang::StringBuffer> StringBuffer::insert(jint offset, ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuffer>>(offset, str); }
inline ref<java::lang::StringBuffer> StringBuffer::insert(jint offset, ref<link::java::array<jchar>> str) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuffer>>(offset, str); }
inline ref<java::lang::StringBuffer> StringBuffer::insert(jint dstOffset, ref<java::lang::CharSequence> s) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuffer>>(dstOffset, s); }
inline ref<java::lang::StringBuffer> StringBuffer::insert(jint dstOffset, ref<java::lang::CharSequence> s, jint start, jint end) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuffer>>(dstOffset, s, start, end); }
inline ref<java::lang::StringBuffer> StringBuffer::insert(jint offset, jboolean b) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuffer>>(offset, b); }
inline ref<java::lang::StringBuffer> StringBuffer::insert(jint offset, jchar c) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuffer>>(offset, c); }
inline ref<java::lang::StringBuffer> StringBuffer::insert(jint offset, jint i) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuffer>>(offset, i); }
inline ref<java::lang::StringBuffer> StringBuffer::insert(jint offset, jlong l) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuffer>>(offset, l); }
inline ref<java::lang::StringBuffer> StringBuffer::insert(jint offset, jfloat f) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuffer>>(offset, f); }
inline ref<java::lang::StringBuffer> StringBuffer::insert(jint offset, jdouble d) { return call_method<SCAPIX_META_STRING("insert"), ref<java::lang::StringBuffer>>(offset, d); }
inline jint StringBuffer::indexOf(ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("indexOf"), jint>(str); }
inline jint StringBuffer::indexOf(ref<java::lang::String> str, jint fromIndex) { return call_method<SCAPIX_META_STRING("indexOf"), jint>(str, fromIndex); }
inline jint StringBuffer::lastIndexOf(ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("lastIndexOf"), jint>(str); }
inline jint StringBuffer::lastIndexOf(ref<java::lang::String> str, jint fromIndex) { return call_method<SCAPIX_META_STRING("lastIndexOf"), jint>(str, fromIndex); }
inline ref<java::lang::StringBuffer> StringBuffer::reverse() { return call_method<SCAPIX_META_STRING("reverse"), ref<java::lang::StringBuffer>>(); }
inline ref<java::lang::String> StringBuffer::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_STRINGBUFFER_H
