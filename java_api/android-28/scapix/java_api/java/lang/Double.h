// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_LANG_DOUBLE_H
#define SCAPIX_JAVA_LANG_DOUBLE_H

namespace scapix::java_api {

namespace java::lang { class Class; }
namespace java::lang { class Object; }
namespace java::lang { class String; }

namespace java::lang {

class Double : public object_base<SCAPIX_META_STRING("java/lang/Double"),
	java::lang::Number,
	java::lang::Comparable>
{
public:

	static jint BYTES_();
	static jint MAX_EXPONENT_();
	static jdouble MAX_VALUE_();
	static jint MIN_EXPONENT_();
	static jdouble MIN_NORMAL_();
	static jdouble MIN_VALUE_();
	static jdouble NEGATIVE_INFINITY_();
	static jdouble NaN();
	static jdouble POSITIVE_INFINITY_();
	static jint SIZE_();
	static ref<java::lang::Class> TYPE_();

	static ref<Double> new_object(jdouble value);
	static ref<Double> new_object(ref<java::lang::String> s);
	static ref<java::lang::String> toString(jdouble d);
	static ref<java::lang::String> toHexString(jdouble d);
	static ref<java::lang::Double> valueOf(ref<java::lang::String> s);
	static ref<java::lang::Double> valueOf(jdouble d);
	static jdouble parseDouble(ref<java::lang::String> s);
	static jboolean isNaN(jdouble v);
	static jboolean isInfinite(jdouble v);
	static jboolean isFinite(jdouble d);
	jboolean isNaN();
	jboolean isInfinite();
	ref<java::lang::String> toString();
	jbyte byteValue();
	jshort shortValue();
	jint intValue();
	jlong longValue();
	jfloat floatValue();
	jdouble doubleValue();
	jint hashCode();
	static jint hashCode(jdouble value);
	jboolean equals(ref<java::lang::Object> obj);
	static jlong doubleToLongBits(jdouble value);
	static jlong doubleToRawLongBits(jdouble p1);
	static jdouble longBitsToDouble(jlong p1);
	jint compareTo(ref<java::lang::Double> anotherDouble);
	static jint compare(jdouble d1, jdouble p2);
	static jdouble sum(jdouble a, jdouble p2);
	static jdouble max(jdouble a, jdouble p2);
	static jdouble min(jdouble a, jdouble p2);

protected:

	Double(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace java::lang {

inline jint Double::BYTES_() { return get_static_field<SCAPIX_META_STRING("BYTES"), jint>(); }
inline jint Double::MAX_EXPONENT_() { return get_static_field<SCAPIX_META_STRING("MAX_EXPONENT"), jint>(); }
inline jdouble Double::MAX_VALUE_() { return get_static_field<SCAPIX_META_STRING("MAX_VALUE"), jdouble>(); }
inline jint Double::MIN_EXPONENT_() { return get_static_field<SCAPIX_META_STRING("MIN_EXPONENT"), jint>(); }
inline jdouble Double::MIN_NORMAL_() { return get_static_field<SCAPIX_META_STRING("MIN_NORMAL"), jdouble>(); }
inline jdouble Double::MIN_VALUE_() { return get_static_field<SCAPIX_META_STRING("MIN_VALUE"), jdouble>(); }
inline jdouble Double::NEGATIVE_INFINITY_() { return get_static_field<SCAPIX_META_STRING("NEGATIVE_INFINITY"), jdouble>(); }
inline jdouble Double::NaN() { return get_static_field<SCAPIX_META_STRING("NaN"), jdouble>(); }
inline jdouble Double::POSITIVE_INFINITY_() { return get_static_field<SCAPIX_META_STRING("POSITIVE_INFINITY"), jdouble>(); }
inline jint Double::SIZE_() { return get_static_field<SCAPIX_META_STRING("SIZE"), jint>(); }
inline ref<java::lang::Class> Double::TYPE_() { return get_static_field<SCAPIX_META_STRING("TYPE"), ref<java::lang::Class>>(); }
inline ref<Double> Double::new_object(jdouble value) { return base_::new_object(value); }
inline ref<Double> Double::new_object(ref<java::lang::String> s) { return base_::new_object(s); }
inline ref<java::lang::String> Double::toString(jdouble d) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(d); }
inline ref<java::lang::String> Double::toHexString(jdouble d) { return call_static_method<SCAPIX_META_STRING("toHexString"), ref<java::lang::String>>(d); }
inline ref<java::lang::Double> Double::valueOf(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::lang::Double>>(s); }
inline ref<java::lang::Double> Double::valueOf(jdouble d) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<java::lang::Double>>(d); }
inline jdouble Double::parseDouble(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("parseDouble"), jdouble>(s); }
inline jboolean Double::isNaN(jdouble v) { return call_static_method<SCAPIX_META_STRING("isNaN"), jboolean>(v); }
inline jboolean Double::isInfinite(jdouble v) { return call_static_method<SCAPIX_META_STRING("isInfinite"), jboolean>(v); }
inline jboolean Double::isFinite(jdouble d) { return call_static_method<SCAPIX_META_STRING("isFinite"), jboolean>(d); }
inline jboolean Double::isNaN() { return call_method<SCAPIX_META_STRING("isNaN"), jboolean>(); }
inline jboolean Double::isInfinite() { return call_method<SCAPIX_META_STRING("isInfinite"), jboolean>(); }
inline ref<java::lang::String> Double::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jbyte Double::byteValue() { return call_method<SCAPIX_META_STRING("byteValue"), jbyte>(); }
inline jshort Double::shortValue() { return call_method<SCAPIX_META_STRING("shortValue"), jshort>(); }
inline jint Double::intValue() { return call_method<SCAPIX_META_STRING("intValue"), jint>(); }
inline jlong Double::longValue() { return call_method<SCAPIX_META_STRING("longValue"), jlong>(); }
inline jfloat Double::floatValue() { return call_method<SCAPIX_META_STRING("floatValue"), jfloat>(); }
inline jdouble Double::doubleValue() { return call_method<SCAPIX_META_STRING("doubleValue"), jdouble>(); }
inline jint Double::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint Double::hashCode(jdouble value) { return call_static_method<SCAPIX_META_STRING("hashCode"), jint>(value); }
inline jboolean Double::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jlong Double::doubleToLongBits(jdouble value) { return call_static_method<SCAPIX_META_STRING("doubleToLongBits"), jlong>(value); }
inline jlong Double::doubleToRawLongBits(jdouble p1) { return call_static_method<SCAPIX_META_STRING("doubleToRawLongBits"), jlong>(p1); }
inline jdouble Double::longBitsToDouble(jlong p1) { return call_static_method<SCAPIX_META_STRING("longBitsToDouble"), jdouble>(p1); }
inline jint Double::compareTo(ref<java::lang::Double> anotherDouble) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(anotherDouble); }
inline jint Double::compare(jdouble d1, jdouble p2) { return call_static_method<SCAPIX_META_STRING("compare"), jint>(d1, p2); }
inline jdouble Double::sum(jdouble a, jdouble p2) { return call_static_method<SCAPIX_META_STRING("sum"), jdouble>(a, p2); }
inline jdouble Double::max(jdouble a, jdouble p2) { return call_static_method<SCAPIX_META_STRING("max"), jdouble>(a, p2); }
inline jdouble Double::min(jdouble a, jdouble p2) { return call_static_method<SCAPIX_META_STRING("min"), jdouble>(a, p2); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_DOUBLE_H
