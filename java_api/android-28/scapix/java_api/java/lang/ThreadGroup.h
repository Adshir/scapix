// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Thread_UncaughtExceptionHandler.h>

#ifndef SCAPIX_JAVA_LANG_THREADGROUP_H
#define SCAPIX_JAVA_LANG_THREADGROUP_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::lang { class Thread; }
namespace java::lang { class Throwable; }

namespace java::lang {

class ThreadGroup : public object_base<SCAPIX_META_STRING("java/lang/ThreadGroup"),
	java::lang::Object,
	java::lang::Thread_UncaughtExceptionHandler>
{
public:

	static ref<ThreadGroup> new_object(ref<java::lang::String> name);
	static ref<ThreadGroup> new_object(ref<java::lang::ThreadGroup> parent, ref<java::lang::String> name);
	ref<java::lang::String> getName();
	ref<java::lang::ThreadGroup> getParent();
	jint getMaxPriority();
	jboolean isDaemon();
	jboolean isDestroyed();
	void setDaemon(jboolean daemon);
	void setMaxPriority(jint pri);
	jboolean parentOf(ref<java::lang::ThreadGroup> g);
	void checkAccess();
	jint activeCount();
	jint enumerate(ref<link::java::array<java::lang::Thread>> list);
	jint enumerate(ref<link::java::array<java::lang::Thread>> list, jboolean recurse);
	jint activeGroupCount();
	jint enumerate(ref<link::java::array<java::lang::ThreadGroup>> list);
	jint enumerate(ref<link::java::array<java::lang::ThreadGroup>> list, jboolean recurse);
	void stop();
	void interrupt();
	void suspend();
	void resume();
	void destroy();
	void list();
	void uncaughtException(ref<java::lang::Thread> t, ref<java::lang::Throwable> e);
	jboolean allowThreadSuspension(jboolean b);
	ref<java::lang::String> toString();

protected:

	ThreadGroup(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>
#include <scapix/java_api/java/lang/Throwable.h>

namespace scapix::java_api {
namespace java::lang {

inline ref<ThreadGroup> ThreadGroup::new_object(ref<java::lang::String> name) { return base_::new_object(name); }
inline ref<ThreadGroup> ThreadGroup::new_object(ref<java::lang::ThreadGroup> parent, ref<java::lang::String> name) { return base_::new_object(parent, name); }
inline ref<java::lang::String> ThreadGroup::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<java::lang::ThreadGroup> ThreadGroup::getParent() { return call_method<SCAPIX_META_STRING("getParent"), ref<java::lang::ThreadGroup>>(); }
inline jint ThreadGroup::getMaxPriority() { return call_method<SCAPIX_META_STRING("getMaxPriority"), jint>(); }
inline jboolean ThreadGroup::isDaemon() { return call_method<SCAPIX_META_STRING("isDaemon"), jboolean>(); }
inline jboolean ThreadGroup::isDestroyed() { return call_method<SCAPIX_META_STRING("isDestroyed"), jboolean>(); }
inline void ThreadGroup::setDaemon(jboolean daemon) { return call_method<SCAPIX_META_STRING("setDaemon"), void>(daemon); }
inline void ThreadGroup::setMaxPriority(jint pri) { return call_method<SCAPIX_META_STRING("setMaxPriority"), void>(pri); }
inline jboolean ThreadGroup::parentOf(ref<java::lang::ThreadGroup> g) { return call_method<SCAPIX_META_STRING("parentOf"), jboolean>(g); }
inline void ThreadGroup::checkAccess() { return call_method<SCAPIX_META_STRING("checkAccess"), void>(); }
inline jint ThreadGroup::activeCount() { return call_method<SCAPIX_META_STRING("activeCount"), jint>(); }
inline jint ThreadGroup::enumerate(ref<link::java::array<java::lang::Thread>> list) { return call_method<SCAPIX_META_STRING("enumerate"), jint>(list); }
inline jint ThreadGroup::enumerate(ref<link::java::array<java::lang::Thread>> list, jboolean recurse) { return call_method<SCAPIX_META_STRING("enumerate"), jint>(list, recurse); }
inline jint ThreadGroup::activeGroupCount() { return call_method<SCAPIX_META_STRING("activeGroupCount"), jint>(); }
inline jint ThreadGroup::enumerate(ref<link::java::array<java::lang::ThreadGroup>> list) { return call_method<SCAPIX_META_STRING("enumerate"), jint>(list); }
inline jint ThreadGroup::enumerate(ref<link::java::array<java::lang::ThreadGroup>> list, jboolean recurse) { return call_method<SCAPIX_META_STRING("enumerate"), jint>(list, recurse); }
inline void ThreadGroup::stop() { return call_method<SCAPIX_META_STRING("stop"), void>(); }
inline void ThreadGroup::interrupt() { return call_method<SCAPIX_META_STRING("interrupt"), void>(); }
inline void ThreadGroup::suspend() { return call_method<SCAPIX_META_STRING("suspend"), void>(); }
inline void ThreadGroup::resume() { return call_method<SCAPIX_META_STRING("resume"), void>(); }
inline void ThreadGroup::destroy() { return call_method<SCAPIX_META_STRING("destroy"), void>(); }
inline void ThreadGroup::list() { return call_method<SCAPIX_META_STRING("list"), void>(); }
inline void ThreadGroup::uncaughtException(ref<java::lang::Thread> t, ref<java::lang::Throwable> e) { return call_method<SCAPIX_META_STRING("uncaughtException"), void>(t, e); }
inline jboolean ThreadGroup::allowThreadSuspension(jboolean b) { return call_method<SCAPIX_META_STRING("allowThreadSuspension"), jboolean>(b); }
inline ref<java::lang::String> ThreadGroup::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_THREADGROUP_H
