// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_PROCESS_H
#define SCAPIX_JAVA_LANG_PROCESS_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::io { class OutputStream; }
namespace java::util::concurrent { class TimeUnit; }

namespace java::lang {

class Process : public object_base<SCAPIX_META_STRING("java/lang/Process"),
	java::lang::Object>
{
public:

	static ref<Process> new_object();
	ref<java::io::OutputStream> getOutputStream();
	ref<java::io::InputStream> getInputStream();
	ref<java::io::InputStream> getErrorStream();
	jint waitFor();
	jboolean waitFor(jlong timeout, ref<java::util::concurrent::TimeUnit> p2);
	jint exitValue();
	void destroy();
	ref<java::lang::Process> destroyForcibly();
	jboolean isAlive();

protected:

	Process(handle_type h) : base_(h) {}

};

} // namespace java::lang
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace java::lang {

inline ref<Process> Process::new_object() { return base_::new_object(); }
inline ref<java::io::OutputStream> Process::getOutputStream() { return call_method<SCAPIX_META_STRING("getOutputStream"), ref<java::io::OutputStream>>(); }
inline ref<java::io::InputStream> Process::getInputStream() { return call_method<SCAPIX_META_STRING("getInputStream"), ref<java::io::InputStream>>(); }
inline ref<java::io::InputStream> Process::getErrorStream() { return call_method<SCAPIX_META_STRING("getErrorStream"), ref<java::io::InputStream>>(); }
inline jint Process::waitFor() { return call_method<SCAPIX_META_STRING("waitFor"), jint>(); }
inline jboolean Process::waitFor(jlong timeout, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("waitFor"), jboolean>(timeout, p2); }
inline jint Process::exitValue() { return call_method<SCAPIX_META_STRING("exitValue"), jint>(); }
inline void Process::destroy() { return call_method<SCAPIX_META_STRING("destroy"), void>(); }
inline ref<java::lang::Process> Process::destroyForcibly() { return call_method<SCAPIX_META_STRING("destroyForcibly"), ref<java::lang::Process>>(); }
inline jboolean Process::isAlive() { return call_method<SCAPIX_META_STRING("isAlive"), jboolean>(); }

} // namespace java::lang
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_PROCESS_H
