// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_NET_NETWORKINFO_H
#define SCAPIX_ANDROID_NET_NETWORKINFO_H

namespace scapix::java_api {

namespace android::net { class NetworkInfo_DetailedState; }
namespace android::net { class NetworkInfo_State; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::net {

class NetworkInfo : public object_base<SCAPIX_META_STRING("android/net/NetworkInfo"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using State = NetworkInfo_State;
	using DetailedState = NetworkInfo_DetailedState;

	static ref<android::os::Parcelable_Creator> CREATOR_();

	jint getType();
	jint getSubtype();
	ref<java::lang::String> getTypeName();
	ref<java::lang::String> getSubtypeName();
	jboolean isConnectedOrConnecting();
	jboolean isConnected();
	jboolean isAvailable();
	jboolean isFailover();
	jboolean isRoaming();
	ref<android::net::NetworkInfo_State> getState();
	ref<android::net::NetworkInfo_DetailedState> getDetailedState();
	ref<java::lang::String> getReason();
	ref<java::lang::String> getExtraInfo();
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);

protected:

	NetworkInfo(handle_type h) : base_(h) {}

};

} // namespace android::net
} // namespace scapix::java_api

#include <scapix/java_api/android/net/NetworkInfo_DetailedState.h>
#include <scapix/java_api/android/net/NetworkInfo_State.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::net {

inline ref<android::os::Parcelable_Creator> NetworkInfo::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint NetworkInfo::getType() { return call_method<SCAPIX_META_STRING("getType"), jint>(); }
inline jint NetworkInfo::getSubtype() { return call_method<SCAPIX_META_STRING("getSubtype"), jint>(); }
inline ref<java::lang::String> NetworkInfo::getTypeName() { return call_method<SCAPIX_META_STRING("getTypeName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> NetworkInfo::getSubtypeName() { return call_method<SCAPIX_META_STRING("getSubtypeName"), ref<java::lang::String>>(); }
inline jboolean NetworkInfo::isConnectedOrConnecting() { return call_method<SCAPIX_META_STRING("isConnectedOrConnecting"), jboolean>(); }
inline jboolean NetworkInfo::isConnected() { return call_method<SCAPIX_META_STRING("isConnected"), jboolean>(); }
inline jboolean NetworkInfo::isAvailable() { return call_method<SCAPIX_META_STRING("isAvailable"), jboolean>(); }
inline jboolean NetworkInfo::isFailover() { return call_method<SCAPIX_META_STRING("isFailover"), jboolean>(); }
inline jboolean NetworkInfo::isRoaming() { return call_method<SCAPIX_META_STRING("isRoaming"), jboolean>(); }
inline ref<android::net::NetworkInfo_State> NetworkInfo::getState() { return call_method<SCAPIX_META_STRING("getState"), ref<android::net::NetworkInfo_State>>(); }
inline ref<android::net::NetworkInfo_DetailedState> NetworkInfo::getDetailedState() { return call_method<SCAPIX_META_STRING("getDetailedState"), ref<android::net::NetworkInfo_DetailedState>>(); }
inline ref<java::lang::String> NetworkInfo::getReason() { return call_method<SCAPIX_META_STRING("getReason"), ref<java::lang::String>>(); }
inline ref<java::lang::String> NetworkInfo::getExtraInfo() { return call_method<SCAPIX_META_STRING("getExtraInfo"), ref<java::lang::String>>(); }
inline ref<java::lang::String> NetworkInfo::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint NetworkInfo::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void NetworkInfo::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }

} // namespace android::net
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_NETWORKINFO_H
