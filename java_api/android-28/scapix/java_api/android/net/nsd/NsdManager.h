// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_NET_NSD_NSDMANAGER_H
#define SCAPIX_ANDROID_NET_NSD_NSDMANAGER_H

namespace scapix::java_api {

namespace android::net::nsd { class NsdManager_DiscoveryListener; }
namespace android::net::nsd { class NsdManager_RegistrationListener; }
namespace android::net::nsd { class NsdManager_ResolveListener; }
namespace android::net::nsd { class NsdServiceInfo; }
namespace java::lang { class String; }

namespace android::net::nsd {

class NsdManager : public object_base<SCAPIX_META_STRING("android/net/nsd/NsdManager"),
	java::lang::Object>
{
public:

	using ResolveListener = NsdManager_ResolveListener;
	using RegistrationListener = NsdManager_RegistrationListener;
	using DiscoveryListener = NsdManager_DiscoveryListener;

	static ref<java::lang::String> ACTION_NSD_STATE_CHANGED_();
	static ref<java::lang::String> EXTRA_NSD_STATE_();
	static jint FAILURE_ALREADY_ACTIVE_();
	static jint FAILURE_INTERNAL_ERROR_();
	static jint FAILURE_MAX_LIMIT_();
	static jint NSD_STATE_DISABLED_();
	static jint NSD_STATE_ENABLED_();
	static jint PROTOCOL_DNS_SD_();

	void registerService(ref<android::net::nsd::NsdServiceInfo> serviceInfo, jint protocolType, ref<android::net::nsd::NsdManager_RegistrationListener> listener);
	void unregisterService(ref<android::net::nsd::NsdManager_RegistrationListener> listener);
	void discoverServices(ref<java::lang::String> serviceType, jint protocolType, ref<android::net::nsd::NsdManager_DiscoveryListener> listener);
	void stopServiceDiscovery(ref<android::net::nsd::NsdManager_DiscoveryListener> listener);
	void resolveService(ref<android::net::nsd::NsdServiceInfo> serviceInfo, ref<android::net::nsd::NsdManager_ResolveListener> listener);

protected:

	NsdManager(handle_type h) : base_(h) {}

};

} // namespace android::net::nsd
} // namespace scapix::java_api

#include <scapix/java_api/android/net/nsd/NsdManager_DiscoveryListener.h>
#include <scapix/java_api/android/net/nsd/NsdManager_RegistrationListener.h>
#include <scapix/java_api/android/net/nsd/NsdManager_ResolveListener.h>
#include <scapix/java_api/android/net/nsd/NsdServiceInfo.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::net::nsd {

inline ref<java::lang::String> NsdManager::ACTION_NSD_STATE_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_NSD_STATE_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> NsdManager::EXTRA_NSD_STATE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_NSD_STATE"), ref<java::lang::String>>(); }
inline jint NsdManager::FAILURE_ALREADY_ACTIVE_() { return get_static_field<SCAPIX_META_STRING("FAILURE_ALREADY_ACTIVE"), jint>(); }
inline jint NsdManager::FAILURE_INTERNAL_ERROR_() { return get_static_field<SCAPIX_META_STRING("FAILURE_INTERNAL_ERROR"), jint>(); }
inline jint NsdManager::FAILURE_MAX_LIMIT_() { return get_static_field<SCAPIX_META_STRING("FAILURE_MAX_LIMIT"), jint>(); }
inline jint NsdManager::NSD_STATE_DISABLED_() { return get_static_field<SCAPIX_META_STRING("NSD_STATE_DISABLED"), jint>(); }
inline jint NsdManager::NSD_STATE_ENABLED_() { return get_static_field<SCAPIX_META_STRING("NSD_STATE_ENABLED"), jint>(); }
inline jint NsdManager::PROTOCOL_DNS_SD_() { return get_static_field<SCAPIX_META_STRING("PROTOCOL_DNS_SD"), jint>(); }
inline void NsdManager::registerService(ref<android::net::nsd::NsdServiceInfo> serviceInfo, jint protocolType, ref<android::net::nsd::NsdManager_RegistrationListener> listener) { return call_method<SCAPIX_META_STRING("registerService"), void>(serviceInfo, protocolType, listener); }
inline void NsdManager::unregisterService(ref<android::net::nsd::NsdManager_RegistrationListener> listener) { return call_method<SCAPIX_META_STRING("unregisterService"), void>(listener); }
inline void NsdManager::discoverServices(ref<java::lang::String> serviceType, jint protocolType, ref<android::net::nsd::NsdManager_DiscoveryListener> listener) { return call_method<SCAPIX_META_STRING("discoverServices"), void>(serviceType, protocolType, listener); }
inline void NsdManager::stopServiceDiscovery(ref<android::net::nsd::NsdManager_DiscoveryListener> listener) { return call_method<SCAPIX_META_STRING("stopServiceDiscovery"), void>(listener); }
inline void NsdManager::resolveService(ref<android::net::nsd::NsdServiceInfo> serviceInfo, ref<android::net::nsd::NsdManager_ResolveListener> listener) { return call_method<SCAPIX_META_STRING("resolveService"), void>(serviceInfo, listener); }

} // namespace android::net::nsd
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_NSD_NSDMANAGER_H
