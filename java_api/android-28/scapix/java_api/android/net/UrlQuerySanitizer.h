// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_NET_URLQUERYSANITIZER_H
#define SCAPIX_ANDROID_NET_URLQUERYSANITIZER_H

namespace scapix::java_api {

namespace android::net { class UrlQuerySanitizer_ValueSanitizer; }
namespace java::lang { class String; }
namespace java::util { class List; }
namespace java::util { class Set; }
namespace android::net { class UrlQuerySanitizer_ParameterValuePair; }
namespace android::net { class UrlQuerySanitizer_IllegalCharacterValueSanitizer; }

namespace android::net {

class UrlQuerySanitizer : public object_base<SCAPIX_META_STRING("android/net/UrlQuerySanitizer"),
	java::lang::Object>
{
public:

	using ValueSanitizer = UrlQuerySanitizer_ValueSanitizer;
	using ParameterValuePair = UrlQuerySanitizer_ParameterValuePair;
	using IllegalCharacterValueSanitizer = UrlQuerySanitizer_IllegalCharacterValueSanitizer;

	static ref<UrlQuerySanitizer> new_object();
	static ref<UrlQuerySanitizer> new_object(ref<java::lang::String> url);
	ref<android::net::UrlQuerySanitizer_ValueSanitizer> getUnregisteredParameterValueSanitizer();
	void setUnregisteredParameterValueSanitizer(ref<android::net::UrlQuerySanitizer_ValueSanitizer> sanitizer);
	static ref<android::net::UrlQuerySanitizer_ValueSanitizer> getAllIllegal();
	static ref<android::net::UrlQuerySanitizer_ValueSanitizer> getAllButNulLegal();
	static ref<android::net::UrlQuerySanitizer_ValueSanitizer> getAllButWhitespaceLegal();
	static ref<android::net::UrlQuerySanitizer_ValueSanitizer> getUrlLegal();
	static ref<android::net::UrlQuerySanitizer_ValueSanitizer> getUrlAndSpaceLegal();
	static ref<android::net::UrlQuerySanitizer_ValueSanitizer> getAmpLegal();
	static ref<android::net::UrlQuerySanitizer_ValueSanitizer> getAmpAndSpaceLegal();
	static ref<android::net::UrlQuerySanitizer_ValueSanitizer> getSpaceLegal();
	static ref<android::net::UrlQuerySanitizer_ValueSanitizer> getAllButNulAndAngleBracketsLegal();
	void parseUrl(ref<java::lang::String> url);
	void parseQuery(ref<java::lang::String> query);
	ref<java::util::Set> getParameterSet();
	ref<java::util::List> getParameterList();
	jboolean hasParameter(ref<java::lang::String> parameter);
	ref<java::lang::String> getValue(ref<java::lang::String> parameter);
	void registerParameter(ref<java::lang::String> parameter, ref<android::net::UrlQuerySanitizer_ValueSanitizer> valueSanitizer);
	void registerParameters(ref<link::java::array<java::lang::String>> parameters, ref<android::net::UrlQuerySanitizer_ValueSanitizer> valueSanitizer);
	void setAllowUnregisteredParamaters(jboolean allowUnregisteredParamaters);
	jboolean getAllowUnregisteredParamaters();
	void setPreferFirstRepeatedParameter(jboolean preferFirstRepeatedParameter);
	jboolean getPreferFirstRepeatedParameter();
	ref<android::net::UrlQuerySanitizer_ValueSanitizer> getValueSanitizer(ref<java::lang::String> parameter);
	ref<android::net::UrlQuerySanitizer_ValueSanitizer> getEffectiveValueSanitizer(ref<java::lang::String> parameter);
	ref<java::lang::String> unescape(ref<java::lang::String> string);

protected:

	UrlQuerySanitizer(handle_type h) : base_(h) {}

};

} // namespace android::net
} // namespace scapix::java_api

#include <scapix/java_api/android/net/UrlQuerySanitizer_ValueSanitizer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace android::net {

inline ref<UrlQuerySanitizer> UrlQuerySanitizer::new_object() { return base_::new_object(); }
inline ref<UrlQuerySanitizer> UrlQuerySanitizer::new_object(ref<java::lang::String> url) { return base_::new_object(url); }
inline ref<android::net::UrlQuerySanitizer_ValueSanitizer> UrlQuerySanitizer::getUnregisteredParameterValueSanitizer() { return call_method<SCAPIX_META_STRING("getUnregisteredParameterValueSanitizer"), ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
inline void UrlQuerySanitizer::setUnregisteredParameterValueSanitizer(ref<android::net::UrlQuerySanitizer_ValueSanitizer> sanitizer) { return call_method<SCAPIX_META_STRING("setUnregisteredParameterValueSanitizer"), void>(sanitizer); }
inline ref<android::net::UrlQuerySanitizer_ValueSanitizer> UrlQuerySanitizer::getAllIllegal() { return call_static_method<SCAPIX_META_STRING("getAllIllegal"), ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
inline ref<android::net::UrlQuerySanitizer_ValueSanitizer> UrlQuerySanitizer::getAllButNulLegal() { return call_static_method<SCAPIX_META_STRING("getAllButNulLegal"), ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
inline ref<android::net::UrlQuerySanitizer_ValueSanitizer> UrlQuerySanitizer::getAllButWhitespaceLegal() { return call_static_method<SCAPIX_META_STRING("getAllButWhitespaceLegal"), ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
inline ref<android::net::UrlQuerySanitizer_ValueSanitizer> UrlQuerySanitizer::getUrlLegal() { return call_static_method<SCAPIX_META_STRING("getUrlLegal"), ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
inline ref<android::net::UrlQuerySanitizer_ValueSanitizer> UrlQuerySanitizer::getUrlAndSpaceLegal() { return call_static_method<SCAPIX_META_STRING("getUrlAndSpaceLegal"), ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
inline ref<android::net::UrlQuerySanitizer_ValueSanitizer> UrlQuerySanitizer::getAmpLegal() { return call_static_method<SCAPIX_META_STRING("getAmpLegal"), ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
inline ref<android::net::UrlQuerySanitizer_ValueSanitizer> UrlQuerySanitizer::getAmpAndSpaceLegal() { return call_static_method<SCAPIX_META_STRING("getAmpAndSpaceLegal"), ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
inline ref<android::net::UrlQuerySanitizer_ValueSanitizer> UrlQuerySanitizer::getSpaceLegal() { return call_static_method<SCAPIX_META_STRING("getSpaceLegal"), ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
inline ref<android::net::UrlQuerySanitizer_ValueSanitizer> UrlQuerySanitizer::getAllButNulAndAngleBracketsLegal() { return call_static_method<SCAPIX_META_STRING("getAllButNulAndAngleBracketsLegal"), ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
inline void UrlQuerySanitizer::parseUrl(ref<java::lang::String> url) { return call_method<SCAPIX_META_STRING("parseUrl"), void>(url); }
inline void UrlQuerySanitizer::parseQuery(ref<java::lang::String> query) { return call_method<SCAPIX_META_STRING("parseQuery"), void>(query); }
inline ref<java::util::Set> UrlQuerySanitizer::getParameterSet() { return call_method<SCAPIX_META_STRING("getParameterSet"), ref<java::util::Set>>(); }
inline ref<java::util::List> UrlQuerySanitizer::getParameterList() { return call_method<SCAPIX_META_STRING("getParameterList"), ref<java::util::List>>(); }
inline jboolean UrlQuerySanitizer::hasParameter(ref<java::lang::String> parameter) { return call_method<SCAPIX_META_STRING("hasParameter"), jboolean>(parameter); }
inline ref<java::lang::String> UrlQuerySanitizer::getValue(ref<java::lang::String> parameter) { return call_method<SCAPIX_META_STRING("getValue"), ref<java::lang::String>>(parameter); }
inline void UrlQuerySanitizer::registerParameter(ref<java::lang::String> parameter, ref<android::net::UrlQuerySanitizer_ValueSanitizer> valueSanitizer) { return call_method<SCAPIX_META_STRING("registerParameter"), void>(parameter, valueSanitizer); }
inline void UrlQuerySanitizer::registerParameters(ref<link::java::array<java::lang::String>> parameters, ref<android::net::UrlQuerySanitizer_ValueSanitizer> valueSanitizer) { return call_method<SCAPIX_META_STRING("registerParameters"), void>(parameters, valueSanitizer); }
inline void UrlQuerySanitizer::setAllowUnregisteredParamaters(jboolean allowUnregisteredParamaters) { return call_method<SCAPIX_META_STRING("setAllowUnregisteredParamaters"), void>(allowUnregisteredParamaters); }
inline jboolean UrlQuerySanitizer::getAllowUnregisteredParamaters() { return call_method<SCAPIX_META_STRING("getAllowUnregisteredParamaters"), jboolean>(); }
inline void UrlQuerySanitizer::setPreferFirstRepeatedParameter(jboolean preferFirstRepeatedParameter) { return call_method<SCAPIX_META_STRING("setPreferFirstRepeatedParameter"), void>(preferFirstRepeatedParameter); }
inline jboolean UrlQuerySanitizer::getPreferFirstRepeatedParameter() { return call_method<SCAPIX_META_STRING("getPreferFirstRepeatedParameter"), jboolean>(); }
inline ref<android::net::UrlQuerySanitizer_ValueSanitizer> UrlQuerySanitizer::getValueSanitizer(ref<java::lang::String> parameter) { return call_method<SCAPIX_META_STRING("getValueSanitizer"), ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(parameter); }
inline ref<android::net::UrlQuerySanitizer_ValueSanitizer> UrlQuerySanitizer::getEffectiveValueSanitizer(ref<java::lang::String> parameter) { return call_method<SCAPIX_META_STRING("getEffectiveValueSanitizer"), ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(parameter); }
inline ref<java::lang::String> UrlQuerySanitizer::unescape(ref<java::lang::String> string) { return call_method<SCAPIX_META_STRING("unescape"), ref<java::lang::String>>(string); }

} // namespace android::net
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_URLQUERYSANITIZER_H
