// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_NET_NETWORKCAPABILITIES_H
#define SCAPIX_ANDROID_NET_NETWORKCAPABILITIES_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::net {

class NetworkCapabilities : public object_base<SCAPIX_META_STRING("android/net/NetworkCapabilities"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint NET_CAPABILITY_CAPTIVE_PORTAL_();
	static jint NET_CAPABILITY_CBS_();
	static jint NET_CAPABILITY_DUN_();
	static jint NET_CAPABILITY_EIMS_();
	static jint NET_CAPABILITY_FOREGROUND_();
	static jint NET_CAPABILITY_FOTA_();
	static jint NET_CAPABILITY_IA_();
	static jint NET_CAPABILITY_IMS_();
	static jint NET_CAPABILITY_INTERNET_();
	static jint NET_CAPABILITY_MMS_();
	static jint NET_CAPABILITY_NOT_CONGESTED_();
	static jint NET_CAPABILITY_NOT_METERED_();
	static jint NET_CAPABILITY_NOT_RESTRICTED_();
	static jint NET_CAPABILITY_NOT_ROAMING_();
	static jint NET_CAPABILITY_NOT_SUSPENDED_();
	static jint NET_CAPABILITY_NOT_VPN_();
	static jint NET_CAPABILITY_RCS_();
	static jint NET_CAPABILITY_SUPL_();
	static jint NET_CAPABILITY_TRUSTED_();
	static jint NET_CAPABILITY_VALIDATED_();
	static jint NET_CAPABILITY_WIFI_P2P_();
	static jint NET_CAPABILITY_XCAP_();
	static jint TRANSPORT_BLUETOOTH_();
	static jint TRANSPORT_CELLULAR_();
	static jint TRANSPORT_ETHERNET_();
	static jint TRANSPORT_LOWPAN_();
	static jint TRANSPORT_VPN_();
	static jint TRANSPORT_WIFI_();
	static jint TRANSPORT_WIFI_AWARE_();

	static ref<NetworkCapabilities> new_object(ref<android::net::NetworkCapabilities> nc);
	jboolean hasCapability(jint capability);
	jboolean hasTransport(jint transportType);
	jint getLinkUpstreamBandwidthKbps();
	jint getLinkDownstreamBandwidthKbps();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	ref<java::lang::String> toString();

protected:

	NetworkCapabilities(handle_type h) : base_(h) {}

};

} // namespace android::net
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::net {

inline ref<android::os::Parcelable_Creator> NetworkCapabilities::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_CAPTIVE_PORTAL_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_CAPTIVE_PORTAL"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_CBS_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_CBS"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_DUN_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_DUN"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_EIMS_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_EIMS"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_FOREGROUND_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_FOREGROUND"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_FOTA_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_FOTA"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_IA_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_IA"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_IMS_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_IMS"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_INTERNET_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_INTERNET"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_MMS_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_MMS"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_NOT_CONGESTED_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_NOT_CONGESTED"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_NOT_METERED_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_NOT_METERED"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_NOT_RESTRICTED_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_NOT_RESTRICTED"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_NOT_ROAMING_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_NOT_ROAMING"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_NOT_SUSPENDED_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_NOT_SUSPENDED"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_NOT_VPN_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_NOT_VPN"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_RCS_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_RCS"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_SUPL_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_SUPL"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_TRUSTED_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_TRUSTED"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_VALIDATED_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_VALIDATED"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_WIFI_P2P_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_WIFI_P2P"), jint>(); }
inline jint NetworkCapabilities::NET_CAPABILITY_XCAP_() { return get_static_field<SCAPIX_META_STRING("NET_CAPABILITY_XCAP"), jint>(); }
inline jint NetworkCapabilities::TRANSPORT_BLUETOOTH_() { return get_static_field<SCAPIX_META_STRING("TRANSPORT_BLUETOOTH"), jint>(); }
inline jint NetworkCapabilities::TRANSPORT_CELLULAR_() { return get_static_field<SCAPIX_META_STRING("TRANSPORT_CELLULAR"), jint>(); }
inline jint NetworkCapabilities::TRANSPORT_ETHERNET_() { return get_static_field<SCAPIX_META_STRING("TRANSPORT_ETHERNET"), jint>(); }
inline jint NetworkCapabilities::TRANSPORT_LOWPAN_() { return get_static_field<SCAPIX_META_STRING("TRANSPORT_LOWPAN"), jint>(); }
inline jint NetworkCapabilities::TRANSPORT_VPN_() { return get_static_field<SCAPIX_META_STRING("TRANSPORT_VPN"), jint>(); }
inline jint NetworkCapabilities::TRANSPORT_WIFI_() { return get_static_field<SCAPIX_META_STRING("TRANSPORT_WIFI"), jint>(); }
inline jint NetworkCapabilities::TRANSPORT_WIFI_AWARE_() { return get_static_field<SCAPIX_META_STRING("TRANSPORT_WIFI_AWARE"), jint>(); }
inline ref<NetworkCapabilities> NetworkCapabilities::new_object(ref<android::net::NetworkCapabilities> nc) { return base_::new_object(nc); }
inline jboolean NetworkCapabilities::hasCapability(jint capability) { return call_method<SCAPIX_META_STRING("hasCapability"), jboolean>(capability); }
inline jboolean NetworkCapabilities::hasTransport(jint transportType) { return call_method<SCAPIX_META_STRING("hasTransport"), jboolean>(transportType); }
inline jint NetworkCapabilities::getLinkUpstreamBandwidthKbps() { return call_method<SCAPIX_META_STRING("getLinkUpstreamBandwidthKbps"), jint>(); }
inline jint NetworkCapabilities::getLinkDownstreamBandwidthKbps() { return call_method<SCAPIX_META_STRING("getLinkDownstreamBandwidthKbps"), jint>(); }
inline jboolean NetworkCapabilities::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint NetworkCapabilities::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint NetworkCapabilities::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void NetworkCapabilities::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline ref<java::lang::String> NetworkCapabilities::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::net
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_NETWORKCAPABILITIES_H
