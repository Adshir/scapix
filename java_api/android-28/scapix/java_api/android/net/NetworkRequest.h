// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_NET_NETWORKREQUEST_H
#define SCAPIX_ANDROID_NET_NETWORKREQUEST_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }
namespace android::net { class NetworkRequest_Builder; }

namespace android::net {

class NetworkRequest : public object_base<SCAPIX_META_STRING("android/net/NetworkRequest"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = NetworkRequest_Builder;

	static ref<android::os::Parcelable_Creator> CREATOR_();

	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	jboolean hasCapability(jint capability);
	jboolean hasTransport(jint transportType);
	ref<java::lang::String> toString();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();

protected:

	NetworkRequest(handle_type h) : base_(h) {}

};

} // namespace android::net
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::net {

inline ref<android::os::Parcelable_Creator> NetworkRequest::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint NetworkRequest::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void NetworkRequest::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline jboolean NetworkRequest::hasCapability(jint capability) { return call_method<SCAPIX_META_STRING("hasCapability"), jboolean>(capability); }
inline jboolean NetworkRequest::hasTransport(jint transportType) { return call_method<SCAPIX_META_STRING("hasTransport"), jboolean>(transportType); }
inline ref<java::lang::String> NetworkRequest::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean NetworkRequest::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint NetworkRequest::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }

} // namespace android::net
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_NETWORKREQUEST_H
