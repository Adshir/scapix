// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_NET_CONNECTIVITYMANAGER_H
#define SCAPIX_ANDROID_NET_CONNECTIVITYMANAGER_H

namespace scapix::java_api {

namespace android::app { class PendingIntent; }
namespace android::net { class ConnectivityManager_NetworkCallback; }
namespace android::net { class ConnectivityManager_OnNetworkActiveListener; }
namespace android::net { class LinkProperties; }
namespace android::net { class Network; }
namespace android::net { class NetworkCapabilities; }
namespace android::net { class NetworkInfo; }
namespace android::net { class NetworkRequest; }
namespace android::net { class ProxyInfo; }
namespace android::os { class Handler; }
namespace java::lang { class String; }

namespace android::net {

class ConnectivityManager : public object_base<SCAPIX_META_STRING("android/net/ConnectivityManager"),
	java::lang::Object>
{
public:

	using OnNetworkActiveListener = ConnectivityManager_OnNetworkActiveListener;
	using NetworkCallback = ConnectivityManager_NetworkCallback;

	static ref<java::lang::String> ACTION_BACKGROUND_DATA_SETTING_CHANGED_();
	static ref<java::lang::String> ACTION_CAPTIVE_PORTAL_SIGN_IN_();
	static ref<java::lang::String> ACTION_RESTRICT_BACKGROUND_CHANGED_();
	static ref<java::lang::String> CONNECTIVITY_ACTION_();
	static jint DEFAULT_NETWORK_PREFERENCE_();
	static ref<java::lang::String> EXTRA_CAPTIVE_PORTAL_();
	static ref<java::lang::String> EXTRA_CAPTIVE_PORTAL_URL_();
	static ref<java::lang::String> EXTRA_EXTRA_INFO_();
	static ref<java::lang::String> EXTRA_IS_FAILOVER_();
	static ref<java::lang::String> EXTRA_NETWORK_();
	static ref<java::lang::String> EXTRA_NETWORK_INFO_();
	static ref<java::lang::String> EXTRA_NETWORK_REQUEST_();
	static ref<java::lang::String> EXTRA_NETWORK_TYPE_();
	static ref<java::lang::String> EXTRA_NO_CONNECTIVITY_();
	static ref<java::lang::String> EXTRA_OTHER_NETWORK_INFO_();
	static ref<java::lang::String> EXTRA_REASON_();
	static jint MULTIPATH_PREFERENCE_HANDOVER_();
	static jint MULTIPATH_PREFERENCE_PERFORMANCE_();
	static jint MULTIPATH_PREFERENCE_RELIABILITY_();
	static jint RESTRICT_BACKGROUND_STATUS_DISABLED_();
	static jint RESTRICT_BACKGROUND_STATUS_ENABLED_();
	static jint RESTRICT_BACKGROUND_STATUS_WHITELISTED_();
	static jint TYPE_BLUETOOTH_();
	static jint TYPE_DUMMY_();
	static jint TYPE_ETHERNET_();
	static jint TYPE_MOBILE_();
	static jint TYPE_MOBILE_DUN_();
	static jint TYPE_MOBILE_HIPRI_();
	static jint TYPE_MOBILE_MMS_();
	static jint TYPE_MOBILE_SUPL_();
	static jint TYPE_VPN_();
	static jint TYPE_WIFI_();
	static jint TYPE_WIMAX_();

	static jboolean isNetworkTypeValid(jint networkType);
	void setNetworkPreference(jint preference);
	jint getNetworkPreference();
	ref<android::net::NetworkInfo> getActiveNetworkInfo();
	ref<android::net::Network> getActiveNetwork();
	ref<android::net::NetworkInfo> getNetworkInfo(jint networkType);
	ref<android::net::NetworkInfo> getNetworkInfo(ref<android::net::Network> network);
	ref<link::java::array<android::net::NetworkInfo>> getAllNetworkInfo();
	ref<link::java::array<android::net::Network>> getAllNetworks();
	ref<android::net::LinkProperties> getLinkProperties(ref<android::net::Network> network);
	ref<android::net::NetworkCapabilities> getNetworkCapabilities(ref<android::net::Network> network);
	jboolean getBackgroundDataSetting();
	void addDefaultNetworkActiveListener(ref<android::net::ConnectivityManager_OnNetworkActiveListener> l);
	void removeDefaultNetworkActiveListener(ref<android::net::ConnectivityManager_OnNetworkActiveListener> l);
	jboolean isDefaultNetworkActive();
	void reportBadNetwork(ref<android::net::Network> network);
	void reportNetworkConnectivity(ref<android::net::Network> network, jboolean hasConnectivity);
	ref<android::net::ProxyInfo> getDefaultProxy();
	jboolean isActiveNetworkMetered();
	void requestNetwork(ref<android::net::NetworkRequest> request, ref<android::net::ConnectivityManager_NetworkCallback> networkCallback);
	void requestNetwork(ref<android::net::NetworkRequest> request, ref<android::net::ConnectivityManager_NetworkCallback> networkCallback, ref<android::os::Handler> handler);
	void requestNetwork(ref<android::net::NetworkRequest> request, ref<android::net::ConnectivityManager_NetworkCallback> networkCallback, jint timeoutMs);
	void requestNetwork(ref<android::net::NetworkRequest> request, ref<android::net::ConnectivityManager_NetworkCallback> networkCallback, ref<android::os::Handler> handler, jint timeoutMs);
	void requestNetwork(ref<android::net::NetworkRequest> request, ref<android::app::PendingIntent> operation);
	void releaseNetworkRequest(ref<android::app::PendingIntent> operation);
	void registerNetworkCallback(ref<android::net::NetworkRequest> request, ref<android::net::ConnectivityManager_NetworkCallback> networkCallback);
	void registerNetworkCallback(ref<android::net::NetworkRequest> request, ref<android::net::ConnectivityManager_NetworkCallback> networkCallback, ref<android::os::Handler> handler);
	void registerNetworkCallback(ref<android::net::NetworkRequest> request, ref<android::app::PendingIntent> operation);
	void registerDefaultNetworkCallback(ref<android::net::ConnectivityManager_NetworkCallback> networkCallback);
	void registerDefaultNetworkCallback(ref<android::net::ConnectivityManager_NetworkCallback> networkCallback, ref<android::os::Handler> handler);
	jboolean requestBandwidthUpdate(ref<android::net::Network> network);
	void unregisterNetworkCallback(ref<android::net::ConnectivityManager_NetworkCallback> networkCallback);
	void unregisterNetworkCallback(ref<android::app::PendingIntent> operation);
	jint getMultipathPreference(ref<android::net::Network> network);
	jboolean bindProcessToNetwork(ref<android::net::Network> network);
	static jboolean setProcessDefaultNetwork(ref<android::net::Network> network);
	ref<android::net::Network> getBoundNetworkForProcess();
	static ref<android::net::Network> getProcessDefaultNetwork();
	jint getRestrictBackgroundStatus();
	ref<link::java::array<jbyte>> getNetworkWatchlistConfigHash();

protected:

	ConnectivityManager(handle_type h) : base_(h) {}

};

} // namespace android::net
} // namespace scapix::java_api

#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/net/ConnectivityManager_NetworkCallback.h>
#include <scapix/java_api/android/net/ConnectivityManager_OnNetworkActiveListener.h>
#include <scapix/java_api/android/net/LinkProperties.h>
#include <scapix/java_api/android/net/Network.h>
#include <scapix/java_api/android/net/NetworkCapabilities.h>
#include <scapix/java_api/android/net/NetworkInfo.h>
#include <scapix/java_api/android/net/NetworkRequest.h>
#include <scapix/java_api/android/net/ProxyInfo.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::net {

inline ref<java::lang::String> ConnectivityManager::ACTION_BACKGROUND_DATA_SETTING_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_BACKGROUND_DATA_SETTING_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ConnectivityManager::ACTION_CAPTIVE_PORTAL_SIGN_IN_() { return get_static_field<SCAPIX_META_STRING("ACTION_CAPTIVE_PORTAL_SIGN_IN"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ConnectivityManager::ACTION_RESTRICT_BACKGROUND_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_RESTRICT_BACKGROUND_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ConnectivityManager::CONNECTIVITY_ACTION_() { return get_static_field<SCAPIX_META_STRING("CONNECTIVITY_ACTION"), ref<java::lang::String>>(); }
inline jint ConnectivityManager::DEFAULT_NETWORK_PREFERENCE_() { return get_static_field<SCAPIX_META_STRING("DEFAULT_NETWORK_PREFERENCE"), jint>(); }
inline ref<java::lang::String> ConnectivityManager::EXTRA_CAPTIVE_PORTAL_() { return get_static_field<SCAPIX_META_STRING("EXTRA_CAPTIVE_PORTAL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ConnectivityManager::EXTRA_CAPTIVE_PORTAL_URL_() { return get_static_field<SCAPIX_META_STRING("EXTRA_CAPTIVE_PORTAL_URL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ConnectivityManager::EXTRA_EXTRA_INFO_() { return get_static_field<SCAPIX_META_STRING("EXTRA_EXTRA_INFO"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ConnectivityManager::EXTRA_IS_FAILOVER_() { return get_static_field<SCAPIX_META_STRING("EXTRA_IS_FAILOVER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ConnectivityManager::EXTRA_NETWORK_() { return get_static_field<SCAPIX_META_STRING("EXTRA_NETWORK"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ConnectivityManager::EXTRA_NETWORK_INFO_() { return get_static_field<SCAPIX_META_STRING("EXTRA_NETWORK_INFO"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ConnectivityManager::EXTRA_NETWORK_REQUEST_() { return get_static_field<SCAPIX_META_STRING("EXTRA_NETWORK_REQUEST"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ConnectivityManager::EXTRA_NETWORK_TYPE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_NETWORK_TYPE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ConnectivityManager::EXTRA_NO_CONNECTIVITY_() { return get_static_field<SCAPIX_META_STRING("EXTRA_NO_CONNECTIVITY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ConnectivityManager::EXTRA_OTHER_NETWORK_INFO_() { return get_static_field<SCAPIX_META_STRING("EXTRA_OTHER_NETWORK_INFO"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ConnectivityManager::EXTRA_REASON_() { return get_static_field<SCAPIX_META_STRING("EXTRA_REASON"), ref<java::lang::String>>(); }
inline jint ConnectivityManager::MULTIPATH_PREFERENCE_HANDOVER_() { return get_static_field<SCAPIX_META_STRING("MULTIPATH_PREFERENCE_HANDOVER"), jint>(); }
inline jint ConnectivityManager::MULTIPATH_PREFERENCE_PERFORMANCE_() { return get_static_field<SCAPIX_META_STRING("MULTIPATH_PREFERENCE_PERFORMANCE"), jint>(); }
inline jint ConnectivityManager::MULTIPATH_PREFERENCE_RELIABILITY_() { return get_static_field<SCAPIX_META_STRING("MULTIPATH_PREFERENCE_RELIABILITY"), jint>(); }
inline jint ConnectivityManager::RESTRICT_BACKGROUND_STATUS_DISABLED_() { return get_static_field<SCAPIX_META_STRING("RESTRICT_BACKGROUND_STATUS_DISABLED"), jint>(); }
inline jint ConnectivityManager::RESTRICT_BACKGROUND_STATUS_ENABLED_() { return get_static_field<SCAPIX_META_STRING("RESTRICT_BACKGROUND_STATUS_ENABLED"), jint>(); }
inline jint ConnectivityManager::RESTRICT_BACKGROUND_STATUS_WHITELISTED_() { return get_static_field<SCAPIX_META_STRING("RESTRICT_BACKGROUND_STATUS_WHITELISTED"), jint>(); }
inline jint ConnectivityManager::TYPE_BLUETOOTH_() { return get_static_field<SCAPIX_META_STRING("TYPE_BLUETOOTH"), jint>(); }
inline jint ConnectivityManager::TYPE_DUMMY_() { return get_static_field<SCAPIX_META_STRING("TYPE_DUMMY"), jint>(); }
inline jint ConnectivityManager::TYPE_ETHERNET_() { return get_static_field<SCAPIX_META_STRING("TYPE_ETHERNET"), jint>(); }
inline jint ConnectivityManager::TYPE_MOBILE_() { return get_static_field<SCAPIX_META_STRING("TYPE_MOBILE"), jint>(); }
inline jint ConnectivityManager::TYPE_MOBILE_DUN_() { return get_static_field<SCAPIX_META_STRING("TYPE_MOBILE_DUN"), jint>(); }
inline jint ConnectivityManager::TYPE_MOBILE_HIPRI_() { return get_static_field<SCAPIX_META_STRING("TYPE_MOBILE_HIPRI"), jint>(); }
inline jint ConnectivityManager::TYPE_MOBILE_MMS_() { return get_static_field<SCAPIX_META_STRING("TYPE_MOBILE_MMS"), jint>(); }
inline jint ConnectivityManager::TYPE_MOBILE_SUPL_() { return get_static_field<SCAPIX_META_STRING("TYPE_MOBILE_SUPL"), jint>(); }
inline jint ConnectivityManager::TYPE_VPN_() { return get_static_field<SCAPIX_META_STRING("TYPE_VPN"), jint>(); }
inline jint ConnectivityManager::TYPE_WIFI_() { return get_static_field<SCAPIX_META_STRING("TYPE_WIFI"), jint>(); }
inline jint ConnectivityManager::TYPE_WIMAX_() { return get_static_field<SCAPIX_META_STRING("TYPE_WIMAX"), jint>(); }
inline jboolean ConnectivityManager::isNetworkTypeValid(jint networkType) { return call_static_method<SCAPIX_META_STRING("isNetworkTypeValid"), jboolean>(networkType); }
inline void ConnectivityManager::setNetworkPreference(jint preference) { return call_method<SCAPIX_META_STRING("setNetworkPreference"), void>(preference); }
inline jint ConnectivityManager::getNetworkPreference() { return call_method<SCAPIX_META_STRING("getNetworkPreference"), jint>(); }
inline ref<android::net::NetworkInfo> ConnectivityManager::getActiveNetworkInfo() { return call_method<SCAPIX_META_STRING("getActiveNetworkInfo"), ref<android::net::NetworkInfo>>(); }
inline ref<android::net::Network> ConnectivityManager::getActiveNetwork() { return call_method<SCAPIX_META_STRING("getActiveNetwork"), ref<android::net::Network>>(); }
inline ref<android::net::NetworkInfo> ConnectivityManager::getNetworkInfo(jint networkType) { return call_method<SCAPIX_META_STRING("getNetworkInfo"), ref<android::net::NetworkInfo>>(networkType); }
inline ref<android::net::NetworkInfo> ConnectivityManager::getNetworkInfo(ref<android::net::Network> network) { return call_method<SCAPIX_META_STRING("getNetworkInfo"), ref<android::net::NetworkInfo>>(network); }
inline ref<link::java::array<android::net::NetworkInfo>> ConnectivityManager::getAllNetworkInfo() { return call_method<SCAPIX_META_STRING("getAllNetworkInfo"), ref<link::java::array<android::net::NetworkInfo>>>(); }
inline ref<link::java::array<android::net::Network>> ConnectivityManager::getAllNetworks() { return call_method<SCAPIX_META_STRING("getAllNetworks"), ref<link::java::array<android::net::Network>>>(); }
inline ref<android::net::LinkProperties> ConnectivityManager::getLinkProperties(ref<android::net::Network> network) { return call_method<SCAPIX_META_STRING("getLinkProperties"), ref<android::net::LinkProperties>>(network); }
inline ref<android::net::NetworkCapabilities> ConnectivityManager::getNetworkCapabilities(ref<android::net::Network> network) { return call_method<SCAPIX_META_STRING("getNetworkCapabilities"), ref<android::net::NetworkCapabilities>>(network); }
inline jboolean ConnectivityManager::getBackgroundDataSetting() { return call_method<SCAPIX_META_STRING("getBackgroundDataSetting"), jboolean>(); }
inline void ConnectivityManager::addDefaultNetworkActiveListener(ref<android::net::ConnectivityManager_OnNetworkActiveListener> l) { return call_method<SCAPIX_META_STRING("addDefaultNetworkActiveListener"), void>(l); }
inline void ConnectivityManager::removeDefaultNetworkActiveListener(ref<android::net::ConnectivityManager_OnNetworkActiveListener> l) { return call_method<SCAPIX_META_STRING("removeDefaultNetworkActiveListener"), void>(l); }
inline jboolean ConnectivityManager::isDefaultNetworkActive() { return call_method<SCAPIX_META_STRING("isDefaultNetworkActive"), jboolean>(); }
inline void ConnectivityManager::reportBadNetwork(ref<android::net::Network> network) { return call_method<SCAPIX_META_STRING("reportBadNetwork"), void>(network); }
inline void ConnectivityManager::reportNetworkConnectivity(ref<android::net::Network> network, jboolean hasConnectivity) { return call_method<SCAPIX_META_STRING("reportNetworkConnectivity"), void>(network, hasConnectivity); }
inline ref<android::net::ProxyInfo> ConnectivityManager::getDefaultProxy() { return call_method<SCAPIX_META_STRING("getDefaultProxy"), ref<android::net::ProxyInfo>>(); }
inline jboolean ConnectivityManager::isActiveNetworkMetered() { return call_method<SCAPIX_META_STRING("isActiveNetworkMetered"), jboolean>(); }
inline void ConnectivityManager::requestNetwork(ref<android::net::NetworkRequest> request, ref<android::net::ConnectivityManager_NetworkCallback> networkCallback) { return call_method<SCAPIX_META_STRING("requestNetwork"), void>(request, networkCallback); }
inline void ConnectivityManager::requestNetwork(ref<android::net::NetworkRequest> request, ref<android::net::ConnectivityManager_NetworkCallback> networkCallback, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("requestNetwork"), void>(request, networkCallback, handler); }
inline void ConnectivityManager::requestNetwork(ref<android::net::NetworkRequest> request, ref<android::net::ConnectivityManager_NetworkCallback> networkCallback, jint timeoutMs) { return call_method<SCAPIX_META_STRING("requestNetwork"), void>(request, networkCallback, timeoutMs); }
inline void ConnectivityManager::requestNetwork(ref<android::net::NetworkRequest> request, ref<android::net::ConnectivityManager_NetworkCallback> networkCallback, ref<android::os::Handler> handler, jint timeoutMs) { return call_method<SCAPIX_META_STRING("requestNetwork"), void>(request, networkCallback, handler, timeoutMs); }
inline void ConnectivityManager::requestNetwork(ref<android::net::NetworkRequest> request, ref<android::app::PendingIntent> operation) { return call_method<SCAPIX_META_STRING("requestNetwork"), void>(request, operation); }
inline void ConnectivityManager::releaseNetworkRequest(ref<android::app::PendingIntent> operation) { return call_method<SCAPIX_META_STRING("releaseNetworkRequest"), void>(operation); }
inline void ConnectivityManager::registerNetworkCallback(ref<android::net::NetworkRequest> request, ref<android::net::ConnectivityManager_NetworkCallback> networkCallback) { return call_method<SCAPIX_META_STRING("registerNetworkCallback"), void>(request, networkCallback); }
inline void ConnectivityManager::registerNetworkCallback(ref<android::net::NetworkRequest> request, ref<android::net::ConnectivityManager_NetworkCallback> networkCallback, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("registerNetworkCallback"), void>(request, networkCallback, handler); }
inline void ConnectivityManager::registerNetworkCallback(ref<android::net::NetworkRequest> request, ref<android::app::PendingIntent> operation) { return call_method<SCAPIX_META_STRING("registerNetworkCallback"), void>(request, operation); }
inline void ConnectivityManager::registerDefaultNetworkCallback(ref<android::net::ConnectivityManager_NetworkCallback> networkCallback) { return call_method<SCAPIX_META_STRING("registerDefaultNetworkCallback"), void>(networkCallback); }
inline void ConnectivityManager::registerDefaultNetworkCallback(ref<android::net::ConnectivityManager_NetworkCallback> networkCallback, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("registerDefaultNetworkCallback"), void>(networkCallback, handler); }
inline jboolean ConnectivityManager::requestBandwidthUpdate(ref<android::net::Network> network) { return call_method<SCAPIX_META_STRING("requestBandwidthUpdate"), jboolean>(network); }
inline void ConnectivityManager::unregisterNetworkCallback(ref<android::net::ConnectivityManager_NetworkCallback> networkCallback) { return call_method<SCAPIX_META_STRING("unregisterNetworkCallback"), void>(networkCallback); }
inline void ConnectivityManager::unregisterNetworkCallback(ref<android::app::PendingIntent> operation) { return call_method<SCAPIX_META_STRING("unregisterNetworkCallback"), void>(operation); }
inline jint ConnectivityManager::getMultipathPreference(ref<android::net::Network> network) { return call_method<SCAPIX_META_STRING("getMultipathPreference"), jint>(network); }
inline jboolean ConnectivityManager::bindProcessToNetwork(ref<android::net::Network> network) { return call_method<SCAPIX_META_STRING("bindProcessToNetwork"), jboolean>(network); }
inline jboolean ConnectivityManager::setProcessDefaultNetwork(ref<android::net::Network> network) { return call_static_method<SCAPIX_META_STRING("setProcessDefaultNetwork"), jboolean>(network); }
inline ref<android::net::Network> ConnectivityManager::getBoundNetworkForProcess() { return call_method<SCAPIX_META_STRING("getBoundNetworkForProcess"), ref<android::net::Network>>(); }
inline ref<android::net::Network> ConnectivityManager::getProcessDefaultNetwork() { return call_static_method<SCAPIX_META_STRING("getProcessDefaultNetwork"), ref<android::net::Network>>(); }
inline jint ConnectivityManager::getRestrictBackgroundStatus() { return call_method<SCAPIX_META_STRING("getRestrictBackgroundStatus"), jint>(); }
inline ref<link::java::array<jbyte>> ConnectivityManager::getNetworkWatchlistConfigHash() { return call_method<SCAPIX_META_STRING("getNetworkWatchlistConfigHash"), ref<link::java::array<jbyte>>>(); }

} // namespace android::net
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_CONNECTIVITYMANAGER_H
