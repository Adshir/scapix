// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_NET_WIFI_WIFIMANAGER_H
#define SCAPIX_ANDROID_NET_WIFI_WIFIMANAGER_H

namespace scapix::java_api {

namespace android::net { class DhcpInfo; }
namespace android::net::wifi { class WifiConfiguration; }
namespace android::net::wifi { class WifiInfo; }
namespace android::net::wifi { class WifiManager_LocalOnlyHotspotCallback; }
namespace android::net::wifi { class WifiManager_MulticastLock; }
namespace android::net::wifi { class WifiManager_WifiLock; }
namespace android::net::wifi { class WifiManager_WpsCallback; }
namespace android::net::wifi { class WpsInfo; }
namespace android::net::wifi::hotspot2 { class PasspointConfiguration; }
namespace android::os { class Handler; }
namespace java::lang { class String; }
namespace java::net { class InetAddress; }
namespace java::util { class List; }
namespace android::net::wifi { class WifiManager_LocalOnlyHotspotReservation; }

namespace android::net::wifi {

class WifiManager : public object_base<SCAPIX_META_STRING("android/net/wifi/WifiManager"),
	java::lang::Object>
{
public:

	using WpsCallback = WifiManager_WpsCallback;
	using WifiLock = WifiManager_WifiLock;
	using MulticastLock = WifiManager_MulticastLock;
	using LocalOnlyHotspotReservation = WifiManager_LocalOnlyHotspotReservation;
	using LocalOnlyHotspotCallback = WifiManager_LocalOnlyHotspotCallback;

	static ref<java::lang::String> ACTION_PICK_WIFI_NETWORK_();
	static ref<java::lang::String> ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE_();
	static jint ERROR_AUTHENTICATING_();
	static ref<java::lang::String> EXTRA_BSSID_();
	static ref<java::lang::String> EXTRA_NETWORK_INFO_();
	static ref<java::lang::String> EXTRA_NEW_RSSI_();
	static ref<java::lang::String> EXTRA_NEW_STATE_();
	static ref<java::lang::String> EXTRA_PREVIOUS_WIFI_STATE_();
	static ref<java::lang::String> EXTRA_RESULTS_UPDATED_();
	static ref<java::lang::String> EXTRA_SUPPLICANT_CONNECTED_();
	static ref<java::lang::String> EXTRA_SUPPLICANT_ERROR_();
	static ref<java::lang::String> EXTRA_WIFI_INFO_();
	static ref<java::lang::String> EXTRA_WIFI_STATE_();
	static ref<java::lang::String> NETWORK_IDS_CHANGED_ACTION_();
	static ref<java::lang::String> NETWORK_STATE_CHANGED_ACTION_();
	static ref<java::lang::String> RSSI_CHANGED_ACTION_();
	static ref<java::lang::String> SCAN_RESULTS_AVAILABLE_ACTION_();
	static ref<java::lang::String> SUPPLICANT_CONNECTION_CHANGE_ACTION_();
	static ref<java::lang::String> SUPPLICANT_STATE_CHANGED_ACTION_();
	static jint WIFI_MODE_FULL_();
	static jint WIFI_MODE_FULL_HIGH_PERF_();
	static jint WIFI_MODE_SCAN_ONLY_();
	static ref<java::lang::String> WIFI_STATE_CHANGED_ACTION_();
	static jint WIFI_STATE_DISABLED_();
	static jint WIFI_STATE_DISABLING_();
	static jint WIFI_STATE_ENABLED_();
	static jint WIFI_STATE_ENABLING_();
	static jint WIFI_STATE_UNKNOWN_();
	static jint WPS_AUTH_FAILURE_();
	static jint WPS_OVERLAP_ERROR_();
	static jint WPS_TIMED_OUT_();
	static jint WPS_TKIP_ONLY_PROHIBITED_();
	static jint WPS_WEP_PROHIBITED_();

	ref<java::util::List> getConfiguredNetworks();
	jint addNetwork(ref<android::net::wifi::WifiConfiguration> config);
	jint updateNetwork(ref<android::net::wifi::WifiConfiguration> config);
	void addOrUpdatePasspointConfiguration(ref<android::net::wifi::hotspot2::PasspointConfiguration> config);
	void removePasspointConfiguration(ref<java::lang::String> fqdn);
	ref<java::util::List> getPasspointConfigurations();
	jboolean removeNetwork(jint netId);
	jboolean enableNetwork(jint netId, jboolean attemptConnect);
	jboolean disableNetwork(jint netId);
	jboolean disconnect();
	jboolean reconnect();
	jboolean reassociate();
	jboolean pingSupplicant();
	jboolean is5GHzBandSupported();
	jboolean isP2pSupported();
	jboolean isDeviceToApRttSupported();
	jboolean isPreferredNetworkOffloadSupported();
	jboolean isTdlsSupported();
	jboolean isEnhancedPowerReportingSupported();
	jboolean startScan();
	ref<android::net::wifi::WifiInfo> getConnectionInfo();
	ref<java::util::List> getScanResults();
	jboolean isScanAlwaysAvailable();
	jboolean saveConfiguration();
	ref<android::net::DhcpInfo> getDhcpInfo();
	jboolean setWifiEnabled(jboolean enabled);
	jint getWifiState();
	jboolean isWifiEnabled();
	static jint calculateSignalLevel(jint rssi, jint numLevels);
	static jint compareSignalLevel(jint rssiA, jint rssiB);
	void startLocalOnlyHotspot(ref<android::net::wifi::WifiManager_LocalOnlyHotspotCallback> callback, ref<android::os::Handler> handler);
	void setTdlsEnabled(ref<java::net::InetAddress> remoteIPAddress, jboolean enable);
	void setTdlsEnabledWithMacAddress(ref<java::lang::String> remoteMacAddress, jboolean enable);
	void startWps(ref<android::net::wifi::WpsInfo> config, ref<android::net::wifi::WifiManager_WpsCallback> listener);
	void cancelWps(ref<android::net::wifi::WifiManager_WpsCallback> listener);
	ref<android::net::wifi::WifiManager_WifiLock> createWifiLock(jint lockType, ref<java::lang::String> tag);
	ref<android::net::wifi::WifiManager_WifiLock> createWifiLock(ref<java::lang::String> tag);
	ref<android::net::wifi::WifiManager_MulticastLock> createMulticastLock(ref<java::lang::String> tag);

protected:

	WifiManager(handle_type h) : base_(h) {}

};

} // namespace android::net::wifi
} // namespace scapix::java_api

#include <scapix/java_api/android/net/DhcpInfo.h>
#include <scapix/java_api/android/net/wifi/WifiConfiguration.h>
#include <scapix/java_api/android/net/wifi/WifiInfo.h>
#include <scapix/java_api/android/net/wifi/WifiManager_LocalOnlyHotspotCallback.h>
#include <scapix/java_api/android/net/wifi/WifiManager_MulticastLock.h>
#include <scapix/java_api/android/net/wifi/WifiManager_WifiLock.h>
#include <scapix/java_api/android/net/wifi/WifiManager_WpsCallback.h>
#include <scapix/java_api/android/net/wifi/WpsInfo.h>
#include <scapix/java_api/android/net/wifi/hotspot2/PasspointConfiguration.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::net::wifi {

inline ref<java::lang::String> WifiManager::ACTION_PICK_WIFI_NETWORK_() { return get_static_field<SCAPIX_META_STRING("ACTION_PICK_WIFI_NETWORK"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WifiManager::ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE_() { return get_static_field<SCAPIX_META_STRING("ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE"), ref<java::lang::String>>(); }
inline jint WifiManager::ERROR_AUTHENTICATING_() { return get_static_field<SCAPIX_META_STRING("ERROR_AUTHENTICATING"), jint>(); }
inline ref<java::lang::String> WifiManager::EXTRA_BSSID_() { return get_static_field<SCAPIX_META_STRING("EXTRA_BSSID"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WifiManager::EXTRA_NETWORK_INFO_() { return get_static_field<SCAPIX_META_STRING("EXTRA_NETWORK_INFO"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WifiManager::EXTRA_NEW_RSSI_() { return get_static_field<SCAPIX_META_STRING("EXTRA_NEW_RSSI"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WifiManager::EXTRA_NEW_STATE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_NEW_STATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WifiManager::EXTRA_PREVIOUS_WIFI_STATE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PREVIOUS_WIFI_STATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WifiManager::EXTRA_RESULTS_UPDATED_() { return get_static_field<SCAPIX_META_STRING("EXTRA_RESULTS_UPDATED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WifiManager::EXTRA_SUPPLICANT_CONNECTED_() { return get_static_field<SCAPIX_META_STRING("EXTRA_SUPPLICANT_CONNECTED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WifiManager::EXTRA_SUPPLICANT_ERROR_() { return get_static_field<SCAPIX_META_STRING("EXTRA_SUPPLICANT_ERROR"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WifiManager::EXTRA_WIFI_INFO_() { return get_static_field<SCAPIX_META_STRING("EXTRA_WIFI_INFO"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WifiManager::EXTRA_WIFI_STATE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_WIFI_STATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WifiManager::NETWORK_IDS_CHANGED_ACTION_() { return get_static_field<SCAPIX_META_STRING("NETWORK_IDS_CHANGED_ACTION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WifiManager::NETWORK_STATE_CHANGED_ACTION_() { return get_static_field<SCAPIX_META_STRING("NETWORK_STATE_CHANGED_ACTION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WifiManager::RSSI_CHANGED_ACTION_() { return get_static_field<SCAPIX_META_STRING("RSSI_CHANGED_ACTION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WifiManager::SCAN_RESULTS_AVAILABLE_ACTION_() { return get_static_field<SCAPIX_META_STRING("SCAN_RESULTS_AVAILABLE_ACTION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WifiManager::SUPPLICANT_CONNECTION_CHANGE_ACTION_() { return get_static_field<SCAPIX_META_STRING("SUPPLICANT_CONNECTION_CHANGE_ACTION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WifiManager::SUPPLICANT_STATE_CHANGED_ACTION_() { return get_static_field<SCAPIX_META_STRING("SUPPLICANT_STATE_CHANGED_ACTION"), ref<java::lang::String>>(); }
inline jint WifiManager::WIFI_MODE_FULL_() { return get_static_field<SCAPIX_META_STRING("WIFI_MODE_FULL"), jint>(); }
inline jint WifiManager::WIFI_MODE_FULL_HIGH_PERF_() { return get_static_field<SCAPIX_META_STRING("WIFI_MODE_FULL_HIGH_PERF"), jint>(); }
inline jint WifiManager::WIFI_MODE_SCAN_ONLY_() { return get_static_field<SCAPIX_META_STRING("WIFI_MODE_SCAN_ONLY"), jint>(); }
inline ref<java::lang::String> WifiManager::WIFI_STATE_CHANGED_ACTION_() { return get_static_field<SCAPIX_META_STRING("WIFI_STATE_CHANGED_ACTION"), ref<java::lang::String>>(); }
inline jint WifiManager::WIFI_STATE_DISABLED_() { return get_static_field<SCAPIX_META_STRING("WIFI_STATE_DISABLED"), jint>(); }
inline jint WifiManager::WIFI_STATE_DISABLING_() { return get_static_field<SCAPIX_META_STRING("WIFI_STATE_DISABLING"), jint>(); }
inline jint WifiManager::WIFI_STATE_ENABLED_() { return get_static_field<SCAPIX_META_STRING("WIFI_STATE_ENABLED"), jint>(); }
inline jint WifiManager::WIFI_STATE_ENABLING_() { return get_static_field<SCAPIX_META_STRING("WIFI_STATE_ENABLING"), jint>(); }
inline jint WifiManager::WIFI_STATE_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("WIFI_STATE_UNKNOWN"), jint>(); }
inline jint WifiManager::WPS_AUTH_FAILURE_() { return get_static_field<SCAPIX_META_STRING("WPS_AUTH_FAILURE"), jint>(); }
inline jint WifiManager::WPS_OVERLAP_ERROR_() { return get_static_field<SCAPIX_META_STRING("WPS_OVERLAP_ERROR"), jint>(); }
inline jint WifiManager::WPS_TIMED_OUT_() { return get_static_field<SCAPIX_META_STRING("WPS_TIMED_OUT"), jint>(); }
inline jint WifiManager::WPS_TKIP_ONLY_PROHIBITED_() { return get_static_field<SCAPIX_META_STRING("WPS_TKIP_ONLY_PROHIBITED"), jint>(); }
inline jint WifiManager::WPS_WEP_PROHIBITED_() { return get_static_field<SCAPIX_META_STRING("WPS_WEP_PROHIBITED"), jint>(); }
inline ref<java::util::List> WifiManager::getConfiguredNetworks() { return call_method<SCAPIX_META_STRING("getConfiguredNetworks"), ref<java::util::List>>(); }
inline jint WifiManager::addNetwork(ref<android::net::wifi::WifiConfiguration> config) { return call_method<SCAPIX_META_STRING("addNetwork"), jint>(config); }
inline jint WifiManager::updateNetwork(ref<android::net::wifi::WifiConfiguration> config) { return call_method<SCAPIX_META_STRING("updateNetwork"), jint>(config); }
inline void WifiManager::addOrUpdatePasspointConfiguration(ref<android::net::wifi::hotspot2::PasspointConfiguration> config) { return call_method<SCAPIX_META_STRING("addOrUpdatePasspointConfiguration"), void>(config); }
inline void WifiManager::removePasspointConfiguration(ref<java::lang::String> fqdn) { return call_method<SCAPIX_META_STRING("removePasspointConfiguration"), void>(fqdn); }
inline ref<java::util::List> WifiManager::getPasspointConfigurations() { return call_method<SCAPIX_META_STRING("getPasspointConfigurations"), ref<java::util::List>>(); }
inline jboolean WifiManager::removeNetwork(jint netId) { return call_method<SCAPIX_META_STRING("removeNetwork"), jboolean>(netId); }
inline jboolean WifiManager::enableNetwork(jint netId, jboolean attemptConnect) { return call_method<SCAPIX_META_STRING("enableNetwork"), jboolean>(netId, attemptConnect); }
inline jboolean WifiManager::disableNetwork(jint netId) { return call_method<SCAPIX_META_STRING("disableNetwork"), jboolean>(netId); }
inline jboolean WifiManager::disconnect() { return call_method<SCAPIX_META_STRING("disconnect"), jboolean>(); }
inline jboolean WifiManager::reconnect() { return call_method<SCAPIX_META_STRING("reconnect"), jboolean>(); }
inline jboolean WifiManager::reassociate() { return call_method<SCAPIX_META_STRING("reassociate"), jboolean>(); }
inline jboolean WifiManager::pingSupplicant() { return call_method<SCAPIX_META_STRING("pingSupplicant"), jboolean>(); }
inline jboolean WifiManager::is5GHzBandSupported() { return call_method<SCAPIX_META_STRING("is5GHzBandSupported"), jboolean>(); }
inline jboolean WifiManager::isP2pSupported() { return call_method<SCAPIX_META_STRING("isP2pSupported"), jboolean>(); }
inline jboolean WifiManager::isDeviceToApRttSupported() { return call_method<SCAPIX_META_STRING("isDeviceToApRttSupported"), jboolean>(); }
inline jboolean WifiManager::isPreferredNetworkOffloadSupported() { return call_method<SCAPIX_META_STRING("isPreferredNetworkOffloadSupported"), jboolean>(); }
inline jboolean WifiManager::isTdlsSupported() { return call_method<SCAPIX_META_STRING("isTdlsSupported"), jboolean>(); }
inline jboolean WifiManager::isEnhancedPowerReportingSupported() { return call_method<SCAPIX_META_STRING("isEnhancedPowerReportingSupported"), jboolean>(); }
inline jboolean WifiManager::startScan() { return call_method<SCAPIX_META_STRING("startScan"), jboolean>(); }
inline ref<android::net::wifi::WifiInfo> WifiManager::getConnectionInfo() { return call_method<SCAPIX_META_STRING("getConnectionInfo"), ref<android::net::wifi::WifiInfo>>(); }
inline ref<java::util::List> WifiManager::getScanResults() { return call_method<SCAPIX_META_STRING("getScanResults"), ref<java::util::List>>(); }
inline jboolean WifiManager::isScanAlwaysAvailable() { return call_method<SCAPIX_META_STRING("isScanAlwaysAvailable"), jboolean>(); }
inline jboolean WifiManager::saveConfiguration() { return call_method<SCAPIX_META_STRING("saveConfiguration"), jboolean>(); }
inline ref<android::net::DhcpInfo> WifiManager::getDhcpInfo() { return call_method<SCAPIX_META_STRING("getDhcpInfo"), ref<android::net::DhcpInfo>>(); }
inline jboolean WifiManager::setWifiEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setWifiEnabled"), jboolean>(enabled); }
inline jint WifiManager::getWifiState() { return call_method<SCAPIX_META_STRING("getWifiState"), jint>(); }
inline jboolean WifiManager::isWifiEnabled() { return call_method<SCAPIX_META_STRING("isWifiEnabled"), jboolean>(); }
inline jint WifiManager::calculateSignalLevel(jint rssi, jint numLevels) { return call_static_method<SCAPIX_META_STRING("calculateSignalLevel"), jint>(rssi, numLevels); }
inline jint WifiManager::compareSignalLevel(jint rssiA, jint rssiB) { return call_static_method<SCAPIX_META_STRING("compareSignalLevel"), jint>(rssiA, rssiB); }
inline void WifiManager::startLocalOnlyHotspot(ref<android::net::wifi::WifiManager_LocalOnlyHotspotCallback> callback, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("startLocalOnlyHotspot"), void>(callback, handler); }
inline void WifiManager::setTdlsEnabled(ref<java::net::InetAddress> remoteIPAddress, jboolean enable) { return call_method<SCAPIX_META_STRING("setTdlsEnabled"), void>(remoteIPAddress, enable); }
inline void WifiManager::setTdlsEnabledWithMacAddress(ref<java::lang::String> remoteMacAddress, jboolean enable) { return call_method<SCAPIX_META_STRING("setTdlsEnabledWithMacAddress"), void>(remoteMacAddress, enable); }
inline void WifiManager::startWps(ref<android::net::wifi::WpsInfo> config, ref<android::net::wifi::WifiManager_WpsCallback> listener) { return call_method<SCAPIX_META_STRING("startWps"), void>(config, listener); }
inline void WifiManager::cancelWps(ref<android::net::wifi::WifiManager_WpsCallback> listener) { return call_method<SCAPIX_META_STRING("cancelWps"), void>(listener); }
inline ref<android::net::wifi::WifiManager_WifiLock> WifiManager::createWifiLock(jint lockType, ref<java::lang::String> tag) { return call_method<SCAPIX_META_STRING("createWifiLock"), ref<android::net::wifi::WifiManager_WifiLock>>(lockType, tag); }
inline ref<android::net::wifi::WifiManager_WifiLock> WifiManager::createWifiLock(ref<java::lang::String> tag) { return call_method<SCAPIX_META_STRING("createWifiLock"), ref<android::net::wifi::WifiManager_WifiLock>>(tag); }
inline ref<android::net::wifi::WifiManager_MulticastLock> WifiManager::createMulticastLock(ref<java::lang::String> tag) { return call_method<SCAPIX_META_STRING("createMulticastLock"), ref<android::net::wifi::WifiManager_MulticastLock>>(tag); }

} // namespace android::net::wifi
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_WIFI_WIFIMANAGER_H
