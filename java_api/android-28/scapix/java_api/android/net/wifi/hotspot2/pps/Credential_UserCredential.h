// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_NET_WIFI_HOTSPOT2_PPS_CREDENTIAL_USERCREDENTIAL_H
#define SCAPIX_ANDROID_NET_WIFI_HOTSPOT2_PPS_CREDENTIAL_USERCREDENTIAL_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::net::wifi::hotspot2::pps {

class Credential_UserCredential : public object_base<SCAPIX_META_STRING("android/net/wifi/hotspot2/pps/Credential$UserCredential"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();

	static ref<Credential_UserCredential> new_object();
	static ref<Credential_UserCredential> new_object(ref<android::net::wifi::hotspot2::pps::Credential_UserCredential> source);
	void setUsername(ref<java::lang::String> username);
	ref<java::lang::String> getUsername();
	void setPassword(ref<java::lang::String> password);
	ref<java::lang::String> getPassword();
	void setEapType(jint eapType);
	jint getEapType();
	void setNonEapInnerMethod(ref<java::lang::String> nonEapInnerMethod);
	ref<java::lang::String> getNonEapInnerMethod();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	jboolean equals(ref<java::lang::Object> thatObject);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	Credential_UserCredential(handle_type h) : base_(h) {}

};

} // namespace android::net::wifi::hotspot2::pps
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::net::wifi::hotspot2::pps {

inline ref<android::os::Parcelable_Creator> Credential_UserCredential::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<Credential_UserCredential> Credential_UserCredential::new_object() { return base_::new_object(); }
inline ref<Credential_UserCredential> Credential_UserCredential::new_object(ref<android::net::wifi::hotspot2::pps::Credential_UserCredential> source) { return base_::new_object(source); }
inline void Credential_UserCredential::setUsername(ref<java::lang::String> username) { return call_method<SCAPIX_META_STRING("setUsername"), void>(username); }
inline ref<java::lang::String> Credential_UserCredential::getUsername() { return call_method<SCAPIX_META_STRING("getUsername"), ref<java::lang::String>>(); }
inline void Credential_UserCredential::setPassword(ref<java::lang::String> password) { return call_method<SCAPIX_META_STRING("setPassword"), void>(password); }
inline ref<java::lang::String> Credential_UserCredential::getPassword() { return call_method<SCAPIX_META_STRING("getPassword"), ref<java::lang::String>>(); }
inline void Credential_UserCredential::setEapType(jint eapType) { return call_method<SCAPIX_META_STRING("setEapType"), void>(eapType); }
inline jint Credential_UserCredential::getEapType() { return call_method<SCAPIX_META_STRING("getEapType"), jint>(); }
inline void Credential_UserCredential::setNonEapInnerMethod(ref<java::lang::String> nonEapInnerMethod) { return call_method<SCAPIX_META_STRING("setNonEapInnerMethod"), void>(nonEapInnerMethod); }
inline ref<java::lang::String> Credential_UserCredential::getNonEapInnerMethod() { return call_method<SCAPIX_META_STRING("getNonEapInnerMethod"), ref<java::lang::String>>(); }
inline jint Credential_UserCredential::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void Credential_UserCredential::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline jboolean Credential_UserCredential::equals(ref<java::lang::Object> thatObject) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(thatObject); }
inline jint Credential_UserCredential::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> Credential_UserCredential::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::net::wifi::hotspot2::pps
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_WIFI_HOTSPOT2_PPS_CREDENTIAL_USERCREDENTIAL_H
