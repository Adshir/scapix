// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_NET_WIFI_HOTSPOT2_PPS_HOMESP_H
#define SCAPIX_ANDROID_NET_WIFI_HOTSPOT2_PPS_HOMESP_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::net::wifi::hotspot2::pps {

class HomeSp : public object_base<SCAPIX_META_STRING("android/net/wifi/hotspot2/pps/HomeSp"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();

	static ref<HomeSp> new_object();
	static ref<HomeSp> new_object(ref<android::net::wifi::hotspot2::pps::HomeSp> source);
	void setFqdn(ref<java::lang::String> fqdn);
	ref<java::lang::String> getFqdn();
	void setFriendlyName(ref<java::lang::String> friendlyName);
	ref<java::lang::String> getFriendlyName();
	void setRoamingConsortiumOis(ref<link::java::array<jlong>> roamingConsortiumOis);
	ref<link::java::array<jlong>> getRoamingConsortiumOis();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	jboolean equals(ref<java::lang::Object> thatObject);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	HomeSp(handle_type h) : base_(h) {}

};

} // namespace android::net::wifi::hotspot2::pps
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::net::wifi::hotspot2::pps {

inline ref<android::os::Parcelable_Creator> HomeSp::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<HomeSp> HomeSp::new_object() { return base_::new_object(); }
inline ref<HomeSp> HomeSp::new_object(ref<android::net::wifi::hotspot2::pps::HomeSp> source) { return base_::new_object(source); }
inline void HomeSp::setFqdn(ref<java::lang::String> fqdn) { return call_method<SCAPIX_META_STRING("setFqdn"), void>(fqdn); }
inline ref<java::lang::String> HomeSp::getFqdn() { return call_method<SCAPIX_META_STRING("getFqdn"), ref<java::lang::String>>(); }
inline void HomeSp::setFriendlyName(ref<java::lang::String> friendlyName) { return call_method<SCAPIX_META_STRING("setFriendlyName"), void>(friendlyName); }
inline ref<java::lang::String> HomeSp::getFriendlyName() { return call_method<SCAPIX_META_STRING("getFriendlyName"), ref<java::lang::String>>(); }
inline void HomeSp::setRoamingConsortiumOis(ref<link::java::array<jlong>> roamingConsortiumOis) { return call_method<SCAPIX_META_STRING("setRoamingConsortiumOis"), void>(roamingConsortiumOis); }
inline ref<link::java::array<jlong>> HomeSp::getRoamingConsortiumOis() { return call_method<SCAPIX_META_STRING("getRoamingConsortiumOis"), ref<link::java::array<jlong>>>(); }
inline jint HomeSp::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void HomeSp::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline jboolean HomeSp::equals(ref<java::lang::Object> thatObject) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(thatObject); }
inline jint HomeSp::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> HomeSp::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::net::wifi::hotspot2::pps
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_WIFI_HOTSPOT2_PPS_HOMESP_H
