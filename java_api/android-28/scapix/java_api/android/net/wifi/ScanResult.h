// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_NET_WIFI_SCANRESULT_H
#define SCAPIX_ANDROID_NET_WIFI_SCANRESULT_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::net::wifi {

class ScanResult : public object_base<SCAPIX_META_STRING("android/net/wifi/ScanResult"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	ref<java::lang::String> BSSID_();
	void BSSID_(ref<java::lang::String>);
	static jint CHANNEL_WIDTH_160MHZ_();
	static jint CHANNEL_WIDTH_20MHZ_();
	static jint CHANNEL_WIDTH_40MHZ_();
	static jint CHANNEL_WIDTH_80MHZ_();
	static jint CHANNEL_WIDTH_80MHZ_PLUS_MHZ_();
	ref<java::lang::String> SSID_();
	void SSID_(ref<java::lang::String>);
	ref<java::lang::String> capabilities();
	void capabilities(ref<java::lang::String>);
	jint centerFreq0();
	void centerFreq0(jint);
	jint centerFreq1();
	void centerFreq1(jint);
	jint channelWidth();
	void channelWidth(jint);
	jint frequency();
	void frequency(jint);
	jint level();
	void level(jint);
	ref<java::lang::CharSequence> operatorFriendlyName();
	void operatorFriendlyName(ref<java::lang::CharSequence>);
	jlong timestamp();
	void timestamp(jlong);
	ref<java::lang::CharSequence> venueName();
	void venueName(ref<java::lang::CharSequence>);

	jboolean is80211mcResponder();
	jboolean isPasspointNetwork();
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);

protected:

	ScanResult(handle_type h) : base_(h) {}

};

} // namespace android::net::wifi
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::net::wifi {

inline ref<java::lang::String> ScanResult::BSSID_() { return get_field<SCAPIX_META_STRING("BSSID"), ref<java::lang::String>>(); }
inline void ScanResult::BSSID_(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("BSSID"), ref<java::lang::String>>(v); }
inline jint ScanResult::CHANNEL_WIDTH_160MHZ_() { return get_static_field<SCAPIX_META_STRING("CHANNEL_WIDTH_160MHZ"), jint>(); }
inline jint ScanResult::CHANNEL_WIDTH_20MHZ_() { return get_static_field<SCAPIX_META_STRING("CHANNEL_WIDTH_20MHZ"), jint>(); }
inline jint ScanResult::CHANNEL_WIDTH_40MHZ_() { return get_static_field<SCAPIX_META_STRING("CHANNEL_WIDTH_40MHZ"), jint>(); }
inline jint ScanResult::CHANNEL_WIDTH_80MHZ_() { return get_static_field<SCAPIX_META_STRING("CHANNEL_WIDTH_80MHZ"), jint>(); }
inline jint ScanResult::CHANNEL_WIDTH_80MHZ_PLUS_MHZ_() { return get_static_field<SCAPIX_META_STRING("CHANNEL_WIDTH_80MHZ_PLUS_MHZ"), jint>(); }
inline ref<java::lang::String> ScanResult::SSID_() { return get_field<SCAPIX_META_STRING("SSID"), ref<java::lang::String>>(); }
inline void ScanResult::SSID_(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("SSID"), ref<java::lang::String>>(v); }
inline ref<java::lang::String> ScanResult::capabilities() { return get_field<SCAPIX_META_STRING("capabilities"), ref<java::lang::String>>(); }
inline void ScanResult::capabilities(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("capabilities"), ref<java::lang::String>>(v); }
inline jint ScanResult::centerFreq0() { return get_field<SCAPIX_META_STRING("centerFreq0"), jint>(); }
inline void ScanResult::centerFreq0(jint v) { set_field<SCAPIX_META_STRING("centerFreq0"), jint>(v); }
inline jint ScanResult::centerFreq1() { return get_field<SCAPIX_META_STRING("centerFreq1"), jint>(); }
inline void ScanResult::centerFreq1(jint v) { set_field<SCAPIX_META_STRING("centerFreq1"), jint>(v); }
inline jint ScanResult::channelWidth() { return get_field<SCAPIX_META_STRING("channelWidth"), jint>(); }
inline void ScanResult::channelWidth(jint v) { set_field<SCAPIX_META_STRING("channelWidth"), jint>(v); }
inline jint ScanResult::frequency() { return get_field<SCAPIX_META_STRING("frequency"), jint>(); }
inline void ScanResult::frequency(jint v) { set_field<SCAPIX_META_STRING("frequency"), jint>(v); }
inline jint ScanResult::level() { return get_field<SCAPIX_META_STRING("level"), jint>(); }
inline void ScanResult::level(jint v) { set_field<SCAPIX_META_STRING("level"), jint>(v); }
inline ref<java::lang::CharSequence> ScanResult::operatorFriendlyName() { return get_field<SCAPIX_META_STRING("operatorFriendlyName"), ref<java::lang::CharSequence>>(); }
inline void ScanResult::operatorFriendlyName(ref<java::lang::CharSequence> v) { set_field<SCAPIX_META_STRING("operatorFriendlyName"), ref<java::lang::CharSequence>>(v); }
inline jlong ScanResult::timestamp() { return get_field<SCAPIX_META_STRING("timestamp"), jlong>(); }
inline void ScanResult::timestamp(jlong v) { set_field<SCAPIX_META_STRING("timestamp"), jlong>(v); }
inline ref<java::lang::CharSequence> ScanResult::venueName() { return get_field<SCAPIX_META_STRING("venueName"), ref<java::lang::CharSequence>>(); }
inline void ScanResult::venueName(ref<java::lang::CharSequence> v) { set_field<SCAPIX_META_STRING("venueName"), ref<java::lang::CharSequence>>(v); }
inline jboolean ScanResult::is80211mcResponder() { return call_method<SCAPIX_META_STRING("is80211mcResponder"), jboolean>(); }
inline jboolean ScanResult::isPasspointNetwork() { return call_method<SCAPIX_META_STRING("isPasspointNetwork"), jboolean>(); }
inline ref<java::lang::String> ScanResult::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint ScanResult::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void ScanResult::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }

} // namespace android::net::wifi
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_WIFI_SCANRESULT_H
