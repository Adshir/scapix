// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_NET_WIFI_RTT_RANGINGRESULT_H
#define SCAPIX_ANDROID_NET_WIFI_RTT_RANGINGRESULT_H

namespace scapix::java_api {

namespace android::net { class MacAddress; }
namespace android::net::wifi::aware { class PeerHandle; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::net::wifi::rtt {

class RangingResult : public object_base<SCAPIX_META_STRING("android/net/wifi/rtt/RangingResult"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint STATUS_FAIL_();
	static jint STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MC_();
	static jint STATUS_SUCCESS_();

	jint getStatus();
	ref<android::net::MacAddress> getMacAddress();
	ref<android::net::wifi::aware::PeerHandle> getPeerHandle();
	jint getDistanceMm();
	jint getDistanceStdDevMm();
	jint getRssi();
	jint getNumAttemptedMeasurements();
	jint getNumSuccessfulMeasurements();
	jlong getRangingTimestampMillis();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	ref<java::lang::String> toString();
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();

protected:

	RangingResult(handle_type h) : base_(h) {}

};

} // namespace android::net::wifi::rtt
} // namespace scapix::java_api

#include <scapix/java_api/android/net/MacAddress.h>
#include <scapix/java_api/android/net/wifi/aware/PeerHandle.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::net::wifi::rtt {

inline ref<android::os::Parcelable_Creator> RangingResult::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint RangingResult::STATUS_FAIL_() { return get_static_field<SCAPIX_META_STRING("STATUS_FAIL"), jint>(); }
inline jint RangingResult::STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MC_() { return get_static_field<SCAPIX_META_STRING("STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MC"), jint>(); }
inline jint RangingResult::STATUS_SUCCESS_() { return get_static_field<SCAPIX_META_STRING("STATUS_SUCCESS"), jint>(); }
inline jint RangingResult::getStatus() { return call_method<SCAPIX_META_STRING("getStatus"), jint>(); }
inline ref<android::net::MacAddress> RangingResult::getMacAddress() { return call_method<SCAPIX_META_STRING("getMacAddress"), ref<android::net::MacAddress>>(); }
inline ref<android::net::wifi::aware::PeerHandle> RangingResult::getPeerHandle() { return call_method<SCAPIX_META_STRING("getPeerHandle"), ref<android::net::wifi::aware::PeerHandle>>(); }
inline jint RangingResult::getDistanceMm() { return call_method<SCAPIX_META_STRING("getDistanceMm"), jint>(); }
inline jint RangingResult::getDistanceStdDevMm() { return call_method<SCAPIX_META_STRING("getDistanceStdDevMm"), jint>(); }
inline jint RangingResult::getRssi() { return call_method<SCAPIX_META_STRING("getRssi"), jint>(); }
inline jint RangingResult::getNumAttemptedMeasurements() { return call_method<SCAPIX_META_STRING("getNumAttemptedMeasurements"), jint>(); }
inline jint RangingResult::getNumSuccessfulMeasurements() { return call_method<SCAPIX_META_STRING("getNumSuccessfulMeasurements"), jint>(); }
inline jlong RangingResult::getRangingTimestampMillis() { return call_method<SCAPIX_META_STRING("getRangingTimestampMillis"), jlong>(); }
inline jint RangingResult::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void RangingResult::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline ref<java::lang::String> RangingResult::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean RangingResult::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint RangingResult::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }

} // namespace android::net::wifi::rtt
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_WIFI_RTT_RANGINGRESULT_H
