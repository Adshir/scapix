// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_NET_WIFI_WIFIMANAGER_MULTICASTLOCK_H
#define SCAPIX_ANDROID_NET_WIFI_WIFIMANAGER_MULTICASTLOCK_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace android::net::wifi {

class WifiManager_MulticastLock : public object_base<SCAPIX_META_STRING("android/net/wifi/WifiManager$MulticastLock"),
	java::lang::Object>
{
public:

	void acquire();
	void release();
	void setReferenceCounted(jboolean refCounted);
	jboolean isHeld();
	ref<java::lang::String> toString();

protected:

	WifiManager_MulticastLock(handle_type h) : base_(h) {}

};

} // namespace android::net::wifi
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::net::wifi {

inline void WifiManager_MulticastLock::acquire() { return call_method<SCAPIX_META_STRING("acquire"), void>(); }
inline void WifiManager_MulticastLock::release() { return call_method<SCAPIX_META_STRING("release"), void>(); }
inline void WifiManager_MulticastLock::setReferenceCounted(jboolean refCounted) { return call_method<SCAPIX_META_STRING("setReferenceCounted"), void>(refCounted); }
inline jboolean WifiManager_MulticastLock::isHeld() { return call_method<SCAPIX_META_STRING("isHeld"), jboolean>(); }
inline ref<java::lang::String> WifiManager_MulticastLock::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::net::wifi
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_WIFI_WIFIMANAGER_MULTICASTLOCK_H
