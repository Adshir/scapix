// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_NET_PROXYINFO_H
#define SCAPIX_ANDROID_NET_PROXYINFO_H

namespace scapix::java_api {

namespace android::net { class Uri; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }
namespace java::util { class List; }

namespace android::net {

class ProxyInfo : public object_base<SCAPIX_META_STRING("android/net/ProxyInfo"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();

	static ref<android::net::ProxyInfo> buildDirectProxy(ref<java::lang::String> host, jint port);
	static ref<android::net::ProxyInfo> buildDirectProxy(ref<java::lang::String> host, jint port, ref<java::util::List> exclList);
	static ref<android::net::ProxyInfo> buildPacProxy(ref<android::net::Uri> pacUri);
	ref<android::net::Uri> getPacFileUrl();
	ref<java::lang::String> getHost();
	jint getPort();
	ref<link::java::array<java::lang::String>> getExclusionList();
	ref<java::lang::String> toString();
	jboolean equals(ref<java::lang::Object> o);
	jint describeContents();
	jint hashCode();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);

protected:

	ProxyInfo(handle_type h) : base_(h) {}

};

} // namespace android::net
} // namespace scapix::java_api

#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::net {

inline ref<android::os::Parcelable_Creator> ProxyInfo::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<android::net::ProxyInfo> ProxyInfo::buildDirectProxy(ref<java::lang::String> host, jint port) { return call_static_method<SCAPIX_META_STRING("buildDirectProxy"), ref<android::net::ProxyInfo>>(host, port); }
inline ref<android::net::ProxyInfo> ProxyInfo::buildDirectProxy(ref<java::lang::String> host, jint port, ref<java::util::List> exclList) { return call_static_method<SCAPIX_META_STRING("buildDirectProxy"), ref<android::net::ProxyInfo>>(host, port, exclList); }
inline ref<android::net::ProxyInfo> ProxyInfo::buildPacProxy(ref<android::net::Uri> pacUri) { return call_static_method<SCAPIX_META_STRING("buildPacProxy"), ref<android::net::ProxyInfo>>(pacUri); }
inline ref<android::net::Uri> ProxyInfo::getPacFileUrl() { return call_method<SCAPIX_META_STRING("getPacFileUrl"), ref<android::net::Uri>>(); }
inline ref<java::lang::String> ProxyInfo::getHost() { return call_method<SCAPIX_META_STRING("getHost"), ref<java::lang::String>>(); }
inline jint ProxyInfo::getPort() { return call_method<SCAPIX_META_STRING("getPort"), jint>(); }
inline ref<link::java::array<java::lang::String>> ProxyInfo::getExclusionList() { return call_method<SCAPIX_META_STRING("getExclusionList"), ref<link::java::array<java::lang::String>>>(); }
inline ref<java::lang::String> ProxyInfo::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean ProxyInfo::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint ProxyInfo::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline jint ProxyInfo::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline void ProxyInfo::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }

} // namespace android::net
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_PROXYINFO_H
