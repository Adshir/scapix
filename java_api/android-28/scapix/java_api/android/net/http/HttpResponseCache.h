// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/net/ResponseCache.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_ANDROID_NET_HTTP_HTTPRESPONSECACHE_H
#define SCAPIX_ANDROID_NET_HTTP_HTTPRESPONSECACHE_H

namespace scapix::java_api {

namespace java::io { class File; }
namespace java::lang { class String; }
namespace java::net { class CacheRequest; }
namespace java::net { class CacheResponse; }
namespace java::net { class URI; }
namespace java::net { class URLConnection; }
namespace java::util { class Map; }

namespace android::net::http {

class HttpResponseCache : public object_base<SCAPIX_META_STRING("android/net/http/HttpResponseCache"),
	java::net::ResponseCache,
	java::io::Closeable>
{
public:

	static ref<android::net::http::HttpResponseCache> getInstalled();
	static ref<android::net::http::HttpResponseCache> install(ref<java::io::File> directory, jlong maxSize);
	ref<java::net::CacheResponse> get(ref<java::net::URI> uri, ref<java::lang::String> requestMethod, ref<java::util::Map> requestHeaders);
	ref<java::net::CacheRequest> put(ref<java::net::URI> uri, ref<java::net::URLConnection> urlConnection);
	jlong size();
	jlong maxSize();
	void flush();
	jint getNetworkCount();
	jint getHitCount();
	jint getRequestCount();
	void close();
	void delete_();

protected:

	HttpResponseCache(handle_type h) : base_(h) {}

};

} // namespace android::net::http
} // namespace scapix::java_api

#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/CacheRequest.h>
#include <scapix/java_api/java/net/CacheResponse.h>
#include <scapix/java_api/java/net/URI.h>
#include <scapix/java_api/java/net/URLConnection.h>
#include <scapix/java_api/java/util/Map.h>

namespace scapix::java_api {
namespace android::net::http {

inline ref<android::net::http::HttpResponseCache> HttpResponseCache::getInstalled() { return call_static_method<SCAPIX_META_STRING("getInstalled"), ref<android::net::http::HttpResponseCache>>(); }
inline ref<android::net::http::HttpResponseCache> HttpResponseCache::install(ref<java::io::File> directory, jlong maxSize) { return call_static_method<SCAPIX_META_STRING("install"), ref<android::net::http::HttpResponseCache>>(directory, maxSize); }
inline ref<java::net::CacheResponse> HttpResponseCache::get(ref<java::net::URI> uri, ref<java::lang::String> requestMethod, ref<java::util::Map> requestHeaders) { return call_method<SCAPIX_META_STRING("get"), ref<java::net::CacheResponse>>(uri, requestMethod, requestHeaders); }
inline ref<java::net::CacheRequest> HttpResponseCache::put(ref<java::net::URI> uri, ref<java::net::URLConnection> urlConnection) { return call_method<SCAPIX_META_STRING("put"), ref<java::net::CacheRequest>>(uri, urlConnection); }
inline jlong HttpResponseCache::size() { return call_method<SCAPIX_META_STRING("size"), jlong>(); }
inline jlong HttpResponseCache::maxSize() { return call_method<SCAPIX_META_STRING("maxSize"), jlong>(); }
inline void HttpResponseCache::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline jint HttpResponseCache::getNetworkCount() { return call_method<SCAPIX_META_STRING("getNetworkCount"), jint>(); }
inline jint HttpResponseCache::getHitCount() { return call_method<SCAPIX_META_STRING("getHitCount"), jint>(); }
inline jint HttpResponseCache::getRequestCount() { return call_method<SCAPIX_META_STRING("getRequestCount"), jint>(); }
inline void HttpResponseCache::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void HttpResponseCache::delete_() { return call_method<SCAPIX_META_STRING("delete"), void>(); }

} // namespace android::net::http
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_HTTP_HTTPRESPONSECACHE_H
