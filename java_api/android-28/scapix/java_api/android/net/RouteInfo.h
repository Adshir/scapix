// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_NET_ROUTEINFO_H
#define SCAPIX_ANDROID_NET_ROUTEINFO_H

namespace scapix::java_api {

namespace android::net { class IpPrefix; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }
namespace java::net { class InetAddress; }

namespace android::net {

class RouteInfo : public object_base<SCAPIX_META_STRING("android/net/RouteInfo"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();

	ref<android::net::IpPrefix> getDestination();
	ref<java::net::InetAddress> getGateway();
	ref<java::lang::String> getInterface();
	jboolean isDefaultRoute();
	jboolean matches(ref<java::net::InetAddress> destination);
	ref<java::lang::String> toString();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);

protected:

	RouteInfo(handle_type h) : base_(h) {}

};

} // namespace android::net
} // namespace scapix::java_api

#include <scapix/java_api/android/net/IpPrefix.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>

namespace scapix::java_api {
namespace android::net {

inline ref<android::os::Parcelable_Creator> RouteInfo::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<android::net::IpPrefix> RouteInfo::getDestination() { return call_method<SCAPIX_META_STRING("getDestination"), ref<android::net::IpPrefix>>(); }
inline ref<java::net::InetAddress> RouteInfo::getGateway() { return call_method<SCAPIX_META_STRING("getGateway"), ref<java::net::InetAddress>>(); }
inline ref<java::lang::String> RouteInfo::getInterface() { return call_method<SCAPIX_META_STRING("getInterface"), ref<java::lang::String>>(); }
inline jboolean RouteInfo::isDefaultRoute() { return call_method<SCAPIX_META_STRING("isDefaultRoute"), jboolean>(); }
inline jboolean RouteInfo::matches(ref<java::net::InetAddress> destination) { return call_method<SCAPIX_META_STRING("matches"), jboolean>(destination); }
inline ref<java::lang::String> RouteInfo::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean RouteInfo::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint RouteInfo::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint RouteInfo::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void RouteInfo::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }

} // namespace android::net
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_ROUTEINFO_H
