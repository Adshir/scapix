// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_ANDROID_NET_LOCALSOCKET_H
#define SCAPIX_ANDROID_NET_LOCALSOCKET_H

namespace scapix::java_api {

namespace android::net { class Credentials; }
namespace android::net { class LocalSocketAddress; }
namespace java::io { class FileDescriptor; }
namespace java::io { class InputStream; }
namespace java::io { class OutputStream; }
namespace java::lang { class String; }

namespace android::net {

class LocalSocket : public object_base<SCAPIX_META_STRING("android/net/LocalSocket"),
	java::lang::Object,
	java::io::Closeable>
{
public:

	static jint SOCKET_DGRAM_();
	static jint SOCKET_SEQPACKET_();
	static jint SOCKET_STREAM_();

	static ref<LocalSocket> new_object();
	static ref<LocalSocket> new_object(jint sockType);
	ref<java::lang::String> toString();
	void connect(ref<android::net::LocalSocketAddress> endpoint);
	void bind(ref<android::net::LocalSocketAddress> bindpoint);
	ref<android::net::LocalSocketAddress> getLocalSocketAddress();
	ref<java::io::InputStream> getInputStream();
	ref<java::io::OutputStream> getOutputStream();
	void close();
	void shutdownInput();
	void shutdownOutput();
	void setReceiveBufferSize(jint size);
	jint getReceiveBufferSize();
	void setSoTimeout(jint n);
	jint getSoTimeout();
	void setSendBufferSize(jint n);
	jint getSendBufferSize();
	ref<android::net::LocalSocketAddress> getRemoteSocketAddress();
	jboolean isConnected();
	jboolean isClosed();
	jboolean isBound();
	jboolean isOutputShutdown();
	jboolean isInputShutdown();
	void connect(ref<android::net::LocalSocketAddress> endpoint, jint timeout);
	void setFileDescriptorsForSend(ref<link::java::array<java::io::FileDescriptor>> fds);
	ref<link::java::array<java::io::FileDescriptor>> getAncillaryFileDescriptors();
	ref<android::net::Credentials> getPeerCredentials();
	ref<java::io::FileDescriptor> getFileDescriptor();

protected:

	LocalSocket(handle_type h) : base_(h) {}

};

} // namespace android::net
} // namespace scapix::java_api

#include <scapix/java_api/android/net/Credentials.h>
#include <scapix/java_api/android/net/LocalSocketAddress.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::net {

inline jint LocalSocket::SOCKET_DGRAM_() { return get_static_field<SCAPIX_META_STRING("SOCKET_DGRAM"), jint>(); }
inline jint LocalSocket::SOCKET_SEQPACKET_() { return get_static_field<SCAPIX_META_STRING("SOCKET_SEQPACKET"), jint>(); }
inline jint LocalSocket::SOCKET_STREAM_() { return get_static_field<SCAPIX_META_STRING("SOCKET_STREAM"), jint>(); }
inline ref<LocalSocket> LocalSocket::new_object() { return base_::new_object(); }
inline ref<LocalSocket> LocalSocket::new_object(jint sockType) { return base_::new_object(sockType); }
inline ref<java::lang::String> LocalSocket::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline void LocalSocket::connect(ref<android::net::LocalSocketAddress> endpoint) { return call_method<SCAPIX_META_STRING("connect"), void>(endpoint); }
inline void LocalSocket::bind(ref<android::net::LocalSocketAddress> bindpoint) { return call_method<SCAPIX_META_STRING("bind"), void>(bindpoint); }
inline ref<android::net::LocalSocketAddress> LocalSocket::getLocalSocketAddress() { return call_method<SCAPIX_META_STRING("getLocalSocketAddress"), ref<android::net::LocalSocketAddress>>(); }
inline ref<java::io::InputStream> LocalSocket::getInputStream() { return call_method<SCAPIX_META_STRING("getInputStream"), ref<java::io::InputStream>>(); }
inline ref<java::io::OutputStream> LocalSocket::getOutputStream() { return call_method<SCAPIX_META_STRING("getOutputStream"), ref<java::io::OutputStream>>(); }
inline void LocalSocket::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void LocalSocket::shutdownInput() { return call_method<SCAPIX_META_STRING("shutdownInput"), void>(); }
inline void LocalSocket::shutdownOutput() { return call_method<SCAPIX_META_STRING("shutdownOutput"), void>(); }
inline void LocalSocket::setReceiveBufferSize(jint size) { return call_method<SCAPIX_META_STRING("setReceiveBufferSize"), void>(size); }
inline jint LocalSocket::getReceiveBufferSize() { return call_method<SCAPIX_META_STRING("getReceiveBufferSize"), jint>(); }
inline void LocalSocket::setSoTimeout(jint n) { return call_method<SCAPIX_META_STRING("setSoTimeout"), void>(n); }
inline jint LocalSocket::getSoTimeout() { return call_method<SCAPIX_META_STRING("getSoTimeout"), jint>(); }
inline void LocalSocket::setSendBufferSize(jint n) { return call_method<SCAPIX_META_STRING("setSendBufferSize"), void>(n); }
inline jint LocalSocket::getSendBufferSize() { return call_method<SCAPIX_META_STRING("getSendBufferSize"), jint>(); }
inline ref<android::net::LocalSocketAddress> LocalSocket::getRemoteSocketAddress() { return call_method<SCAPIX_META_STRING("getRemoteSocketAddress"), ref<android::net::LocalSocketAddress>>(); }
inline jboolean LocalSocket::isConnected() { return call_method<SCAPIX_META_STRING("isConnected"), jboolean>(); }
inline jboolean LocalSocket::isClosed() { return call_method<SCAPIX_META_STRING("isClosed"), jboolean>(); }
inline jboolean LocalSocket::isBound() { return call_method<SCAPIX_META_STRING("isBound"), jboolean>(); }
inline jboolean LocalSocket::isOutputShutdown() { return call_method<SCAPIX_META_STRING("isOutputShutdown"), jboolean>(); }
inline jboolean LocalSocket::isInputShutdown() { return call_method<SCAPIX_META_STRING("isInputShutdown"), jboolean>(); }
inline void LocalSocket::connect(ref<android::net::LocalSocketAddress> endpoint, jint timeout) { return call_method<SCAPIX_META_STRING("connect"), void>(endpoint, timeout); }
inline void LocalSocket::setFileDescriptorsForSend(ref<link::java::array<java::io::FileDescriptor>> fds) { return call_method<SCAPIX_META_STRING("setFileDescriptorsForSend"), void>(fds); }
inline ref<link::java::array<java::io::FileDescriptor>> LocalSocket::getAncillaryFileDescriptors() { return call_method<SCAPIX_META_STRING("getAncillaryFileDescriptors"), ref<link::java::array<java::io::FileDescriptor>>>(); }
inline ref<android::net::Credentials> LocalSocket::getPeerCredentials() { return call_method<SCAPIX_META_STRING("getPeerCredentials"), ref<android::net::Credentials>>(); }
inline ref<java::io::FileDescriptor> LocalSocket::getFileDescriptor() { return call_method<SCAPIX_META_STRING("getFileDescriptor"), ref<java::io::FileDescriptor>>(); }

} // namespace android::net
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_LOCALSOCKET_H
