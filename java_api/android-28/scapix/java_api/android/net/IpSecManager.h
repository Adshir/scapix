// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_NET_IPSECMANAGER_H
#define SCAPIX_ANDROID_NET_IPSECMANAGER_H

namespace scapix::java_api {

namespace android::net { class IpSecManager_SecurityParameterIndex; }
namespace android::net { class IpSecManager_UdpEncapsulationSocket; }
namespace android::net { class IpSecTransform; }
namespace java::io { class FileDescriptor; }
namespace java::net { class DatagramSocket; }
namespace java::net { class InetAddress; }
namespace java::net { class Socket; }
namespace android::net { class IpSecManager_SpiUnavailableException; }
namespace android::net { class IpSecManager_ResourceUnavailableException; }

namespace android::net {

class IpSecManager : public object_base<SCAPIX_META_STRING("android/net/IpSecManager"),
	java::lang::Object>
{
public:

	using UdpEncapsulationSocket = IpSecManager_UdpEncapsulationSocket;
	using SpiUnavailableException = IpSecManager_SpiUnavailableException;
	using SecurityParameterIndex = IpSecManager_SecurityParameterIndex;
	using ResourceUnavailableException = IpSecManager_ResourceUnavailableException;

	static jint DIRECTION_IN_();
	static jint DIRECTION_OUT_();

	ref<android::net::IpSecManager_SecurityParameterIndex> allocateSecurityParameterIndex(ref<java::net::InetAddress> destinationAddress);
	ref<android::net::IpSecManager_SecurityParameterIndex> allocateSecurityParameterIndex(ref<java::net::InetAddress> destinationAddress, jint requestedSpi);
	void applyTransportModeTransform(ref<java::net::Socket> socket, jint direction, ref<android::net::IpSecTransform> transform);
	void applyTransportModeTransform(ref<java::net::DatagramSocket> socket, jint direction, ref<android::net::IpSecTransform> transform);
	void applyTransportModeTransform(ref<java::io::FileDescriptor> socket, jint direction, ref<android::net::IpSecTransform> transform);
	void removeTransportModeTransforms(ref<java::net::Socket> socket);
	void removeTransportModeTransforms(ref<java::net::DatagramSocket> socket);
	void removeTransportModeTransforms(ref<java::io::FileDescriptor> socket);
	ref<android::net::IpSecManager_UdpEncapsulationSocket> openUdpEncapsulationSocket(jint port);
	ref<android::net::IpSecManager_UdpEncapsulationSocket> openUdpEncapsulationSocket();

protected:

	IpSecManager(handle_type h) : base_(h) {}

};

} // namespace android::net
} // namespace scapix::java_api

#include <scapix/java_api/android/net/IpSecManager_SecurityParameterIndex.h>
#include <scapix/java_api/android/net/IpSecManager_UdpEncapsulationSocket.h>
#include <scapix/java_api/android/net/IpSecTransform.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/net/DatagramSocket.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/net/Socket.h>

namespace scapix::java_api {
namespace android::net {

inline jint IpSecManager::DIRECTION_IN_() { return get_static_field<SCAPIX_META_STRING("DIRECTION_IN"), jint>(); }
inline jint IpSecManager::DIRECTION_OUT_() { return get_static_field<SCAPIX_META_STRING("DIRECTION_OUT"), jint>(); }
inline ref<android::net::IpSecManager_SecurityParameterIndex> IpSecManager::allocateSecurityParameterIndex(ref<java::net::InetAddress> destinationAddress) { return call_method<SCAPIX_META_STRING("allocateSecurityParameterIndex"), ref<android::net::IpSecManager_SecurityParameterIndex>>(destinationAddress); }
inline ref<android::net::IpSecManager_SecurityParameterIndex> IpSecManager::allocateSecurityParameterIndex(ref<java::net::InetAddress> destinationAddress, jint requestedSpi) { return call_method<SCAPIX_META_STRING("allocateSecurityParameterIndex"), ref<android::net::IpSecManager_SecurityParameterIndex>>(destinationAddress, requestedSpi); }
inline void IpSecManager::applyTransportModeTransform(ref<java::net::Socket> socket, jint direction, ref<android::net::IpSecTransform> transform) { return call_method<SCAPIX_META_STRING("applyTransportModeTransform"), void>(socket, direction, transform); }
inline void IpSecManager::applyTransportModeTransform(ref<java::net::DatagramSocket> socket, jint direction, ref<android::net::IpSecTransform> transform) { return call_method<SCAPIX_META_STRING("applyTransportModeTransform"), void>(socket, direction, transform); }
inline void IpSecManager::applyTransportModeTransform(ref<java::io::FileDescriptor> socket, jint direction, ref<android::net::IpSecTransform> transform) { return call_method<SCAPIX_META_STRING("applyTransportModeTransform"), void>(socket, direction, transform); }
inline void IpSecManager::removeTransportModeTransforms(ref<java::net::Socket> socket) { return call_method<SCAPIX_META_STRING("removeTransportModeTransforms"), void>(socket); }
inline void IpSecManager::removeTransportModeTransforms(ref<java::net::DatagramSocket> socket) { return call_method<SCAPIX_META_STRING("removeTransportModeTransforms"), void>(socket); }
inline void IpSecManager::removeTransportModeTransforms(ref<java::io::FileDescriptor> socket) { return call_method<SCAPIX_META_STRING("removeTransportModeTransforms"), void>(socket); }
inline ref<android::net::IpSecManager_UdpEncapsulationSocket> IpSecManager::openUdpEncapsulationSocket(jint port) { return call_method<SCAPIX_META_STRING("openUdpEncapsulationSocket"), ref<android::net::IpSecManager_UdpEncapsulationSocket>>(port); }
inline ref<android::net::IpSecManager_UdpEncapsulationSocket> IpSecManager::openUdpEncapsulationSocket() { return call_method<SCAPIX_META_STRING("openUdpEncapsulationSocket"), ref<android::net::IpSecManager_UdpEncapsulationSocket>>(); }

} // namespace android::net
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_IPSECMANAGER_H
