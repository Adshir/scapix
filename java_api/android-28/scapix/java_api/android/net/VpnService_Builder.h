// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_NET_VPNSERVICE_BUILDER_H
#define SCAPIX_ANDROID_NET_VPNSERVICE_BUILDER_H

namespace scapix::java_api {

namespace android::app { class PendingIntent; }
namespace android::net { class Network; }
namespace android::net { class VpnService; }
namespace android::os { class ParcelFileDescriptor; }
namespace java::lang { class String; }
namespace java::net { class InetAddress; }

namespace android::net {

class VpnService_Builder : public object_base<SCAPIX_META_STRING("android/net/VpnService$Builder"),
	java::lang::Object>
{
public:

	static ref<VpnService_Builder> new_object(ref<android::net::VpnService> this_0);
	ref<android::net::VpnService_Builder> setSession(ref<java::lang::String> session);
	ref<android::net::VpnService_Builder> setConfigureIntent(ref<android::app::PendingIntent> intent);
	ref<android::net::VpnService_Builder> setMtu(jint mtu);
	ref<android::net::VpnService_Builder> addAddress(ref<java::net::InetAddress> address, jint prefixLength);
	ref<android::net::VpnService_Builder> addAddress(ref<java::lang::String> address, jint prefixLength);
	ref<android::net::VpnService_Builder> addRoute(ref<java::net::InetAddress> address, jint prefixLength);
	ref<android::net::VpnService_Builder> addRoute(ref<java::lang::String> address, jint prefixLength);
	ref<android::net::VpnService_Builder> addDnsServer(ref<java::net::InetAddress> address);
	ref<android::net::VpnService_Builder> addDnsServer(ref<java::lang::String> address);
	ref<android::net::VpnService_Builder> addSearchDomain(ref<java::lang::String> domain);
	ref<android::net::VpnService_Builder> allowFamily(jint family);
	ref<android::net::VpnService_Builder> addAllowedApplication(ref<java::lang::String> packageName);
	ref<android::net::VpnService_Builder> addDisallowedApplication(ref<java::lang::String> packageName);
	ref<android::net::VpnService_Builder> allowBypass();
	ref<android::net::VpnService_Builder> setBlocking(jboolean blocking);
	ref<android::net::VpnService_Builder> setUnderlyingNetworks(ref<link::java::array<android::net::Network>> networks);
	ref<android::os::ParcelFileDescriptor> establish();

protected:

	VpnService_Builder(handle_type h) : base_(h) {}

};

} // namespace android::net
} // namespace scapix::java_api

#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/net/Network.h>
#include <scapix/java_api/android/net/VpnService.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>

namespace scapix::java_api {
namespace android::net {

inline ref<VpnService_Builder> VpnService_Builder::new_object(ref<android::net::VpnService> this_0) { return base_::new_object(this_0); }
inline ref<android::net::VpnService_Builder> VpnService_Builder::setSession(ref<java::lang::String> session) { return call_method<SCAPIX_META_STRING("setSession"), ref<android::net::VpnService_Builder>>(session); }
inline ref<android::net::VpnService_Builder> VpnService_Builder::setConfigureIntent(ref<android::app::PendingIntent> intent) { return call_method<SCAPIX_META_STRING("setConfigureIntent"), ref<android::net::VpnService_Builder>>(intent); }
inline ref<android::net::VpnService_Builder> VpnService_Builder::setMtu(jint mtu) { return call_method<SCAPIX_META_STRING("setMtu"), ref<android::net::VpnService_Builder>>(mtu); }
inline ref<android::net::VpnService_Builder> VpnService_Builder::addAddress(ref<java::net::InetAddress> address, jint prefixLength) { return call_method<SCAPIX_META_STRING("addAddress"), ref<android::net::VpnService_Builder>>(address, prefixLength); }
inline ref<android::net::VpnService_Builder> VpnService_Builder::addAddress(ref<java::lang::String> address, jint prefixLength) { return call_method<SCAPIX_META_STRING("addAddress"), ref<android::net::VpnService_Builder>>(address, prefixLength); }
inline ref<android::net::VpnService_Builder> VpnService_Builder::addRoute(ref<java::net::InetAddress> address, jint prefixLength) { return call_method<SCAPIX_META_STRING("addRoute"), ref<android::net::VpnService_Builder>>(address, prefixLength); }
inline ref<android::net::VpnService_Builder> VpnService_Builder::addRoute(ref<java::lang::String> address, jint prefixLength) { return call_method<SCAPIX_META_STRING("addRoute"), ref<android::net::VpnService_Builder>>(address, prefixLength); }
inline ref<android::net::VpnService_Builder> VpnService_Builder::addDnsServer(ref<java::net::InetAddress> address) { return call_method<SCAPIX_META_STRING("addDnsServer"), ref<android::net::VpnService_Builder>>(address); }
inline ref<android::net::VpnService_Builder> VpnService_Builder::addDnsServer(ref<java::lang::String> address) { return call_method<SCAPIX_META_STRING("addDnsServer"), ref<android::net::VpnService_Builder>>(address); }
inline ref<android::net::VpnService_Builder> VpnService_Builder::addSearchDomain(ref<java::lang::String> domain) { return call_method<SCAPIX_META_STRING("addSearchDomain"), ref<android::net::VpnService_Builder>>(domain); }
inline ref<android::net::VpnService_Builder> VpnService_Builder::allowFamily(jint family) { return call_method<SCAPIX_META_STRING("allowFamily"), ref<android::net::VpnService_Builder>>(family); }
inline ref<android::net::VpnService_Builder> VpnService_Builder::addAllowedApplication(ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("addAllowedApplication"), ref<android::net::VpnService_Builder>>(packageName); }
inline ref<android::net::VpnService_Builder> VpnService_Builder::addDisallowedApplication(ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("addDisallowedApplication"), ref<android::net::VpnService_Builder>>(packageName); }
inline ref<android::net::VpnService_Builder> VpnService_Builder::allowBypass() { return call_method<SCAPIX_META_STRING("allowBypass"), ref<android::net::VpnService_Builder>>(); }
inline ref<android::net::VpnService_Builder> VpnService_Builder::setBlocking(jboolean blocking) { return call_method<SCAPIX_META_STRING("setBlocking"), ref<android::net::VpnService_Builder>>(blocking); }
inline ref<android::net::VpnService_Builder> VpnService_Builder::setUnderlyingNetworks(ref<link::java::array<android::net::Network>> networks) { return call_method<SCAPIX_META_STRING("setUnderlyingNetworks"), ref<android::net::VpnService_Builder>>(networks); }
inline ref<android::os::ParcelFileDescriptor> VpnService_Builder::establish() { return call_method<SCAPIX_META_STRING("establish"), ref<android::os::ParcelFileDescriptor>>(); }

} // namespace android::net
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_VPNSERVICE_BUILDER_H
