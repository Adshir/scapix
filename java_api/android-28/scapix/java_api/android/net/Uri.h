// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_ANDROID_NET_URI_H
#define SCAPIX_ANDROID_NET_URI_H

namespace scapix::java_api {

namespace android::net { class Uri_Builder; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::io { class File; }
namespace java::lang { class String; }
namespace java::util { class List; }
namespace java::util { class Set; }

namespace android::net {

class Uri : public object_base<SCAPIX_META_STRING("android/net/Uri"),
	java::lang::Object,
	android::os::Parcelable,
	java::lang::Comparable>
{
public:

	using Builder = Uri_Builder;

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static ref<android::net::Uri> EMPTY_();

	jboolean isHierarchical();
	jboolean isOpaque();
	jboolean isRelative();
	jboolean isAbsolute();
	ref<java::lang::String> getScheme();
	ref<java::lang::String> getSchemeSpecificPart();
	ref<java::lang::String> getEncodedSchemeSpecificPart();
	ref<java::lang::String> getAuthority();
	ref<java::lang::String> getEncodedAuthority();
	ref<java::lang::String> getUserInfo();
	ref<java::lang::String> getEncodedUserInfo();
	ref<java::lang::String> getHost();
	jint getPort();
	ref<java::lang::String> getPath();
	ref<java::lang::String> getEncodedPath();
	ref<java::lang::String> getQuery();
	ref<java::lang::String> getEncodedQuery();
	ref<java::lang::String> getFragment();
	ref<java::lang::String> getEncodedFragment();
	ref<java::util::List> getPathSegments();
	ref<java::lang::String> getLastPathSegment();
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	jint compareTo(ref<android::net::Uri> other);
	ref<java::lang::String> toString();
	ref<android::net::Uri_Builder> buildUpon();
	static ref<android::net::Uri> parse(ref<java::lang::String> uriString);
	static ref<android::net::Uri> fromFile(ref<java::io::File> file);
	static ref<android::net::Uri> fromParts(ref<java::lang::String> scheme, ref<java::lang::String> ssp, ref<java::lang::String> fragment);
	ref<java::util::Set> getQueryParameterNames();
	ref<java::util::List> getQueryParameters(ref<java::lang::String> key);
	ref<java::lang::String> getQueryParameter(ref<java::lang::String> key);
	jboolean getBooleanQueryParameter(ref<java::lang::String> key, jboolean defaultValue);
	ref<android::net::Uri> normalizeScheme();
	static void writeToParcel(ref<android::os::Parcel> out, ref<android::net::Uri> uri);
	static ref<java::lang::String> encode(ref<java::lang::String> s);
	static ref<java::lang::String> encode(ref<java::lang::String> s, ref<java::lang::String> allow);
	static ref<java::lang::String> decode(ref<java::lang::String> s);
	static ref<android::net::Uri> withAppendedPath(ref<android::net::Uri> baseUri, ref<java::lang::String> pathSegment);

protected:

	Uri(handle_type h) : base_(h) {}

};

} // namespace android::net
} // namespace scapix::java_api

#include <scapix/java_api/android/net/Uri_Builder.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace android::net {

inline ref<android::os::Parcelable_Creator> Uri::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<android::net::Uri> Uri::EMPTY_() { return get_static_field<SCAPIX_META_STRING("EMPTY"), ref<android::net::Uri>>(); }
inline jboolean Uri::isHierarchical() { return call_method<SCAPIX_META_STRING("isHierarchical"), jboolean>(); }
inline jboolean Uri::isOpaque() { return call_method<SCAPIX_META_STRING("isOpaque"), jboolean>(); }
inline jboolean Uri::isRelative() { return call_method<SCAPIX_META_STRING("isRelative"), jboolean>(); }
inline jboolean Uri::isAbsolute() { return call_method<SCAPIX_META_STRING("isAbsolute"), jboolean>(); }
inline ref<java::lang::String> Uri::getScheme() { return call_method<SCAPIX_META_STRING("getScheme"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Uri::getSchemeSpecificPart() { return call_method<SCAPIX_META_STRING("getSchemeSpecificPart"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Uri::getEncodedSchemeSpecificPart() { return call_method<SCAPIX_META_STRING("getEncodedSchemeSpecificPart"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Uri::getAuthority() { return call_method<SCAPIX_META_STRING("getAuthority"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Uri::getEncodedAuthority() { return call_method<SCAPIX_META_STRING("getEncodedAuthority"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Uri::getUserInfo() { return call_method<SCAPIX_META_STRING("getUserInfo"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Uri::getEncodedUserInfo() { return call_method<SCAPIX_META_STRING("getEncodedUserInfo"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Uri::getHost() { return call_method<SCAPIX_META_STRING("getHost"), ref<java::lang::String>>(); }
inline jint Uri::getPort() { return call_method<SCAPIX_META_STRING("getPort"), jint>(); }
inline ref<java::lang::String> Uri::getPath() { return call_method<SCAPIX_META_STRING("getPath"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Uri::getEncodedPath() { return call_method<SCAPIX_META_STRING("getEncodedPath"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Uri::getQuery() { return call_method<SCAPIX_META_STRING("getQuery"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Uri::getEncodedQuery() { return call_method<SCAPIX_META_STRING("getEncodedQuery"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Uri::getFragment() { return call_method<SCAPIX_META_STRING("getFragment"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Uri::getEncodedFragment() { return call_method<SCAPIX_META_STRING("getEncodedFragment"), ref<java::lang::String>>(); }
inline ref<java::util::List> Uri::getPathSegments() { return call_method<SCAPIX_META_STRING("getPathSegments"), ref<java::util::List>>(); }
inline ref<java::lang::String> Uri::getLastPathSegment() { return call_method<SCAPIX_META_STRING("getLastPathSegment"), ref<java::lang::String>>(); }
inline jboolean Uri::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint Uri::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint Uri::compareTo(ref<android::net::Uri> other) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(other); }
inline ref<java::lang::String> Uri::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<android::net::Uri_Builder> Uri::buildUpon() { return call_method<SCAPIX_META_STRING("buildUpon"), ref<android::net::Uri_Builder>>(); }
inline ref<android::net::Uri> Uri::parse(ref<java::lang::String> uriString) { return call_static_method<SCAPIX_META_STRING("parse"), ref<android::net::Uri>>(uriString); }
inline ref<android::net::Uri> Uri::fromFile(ref<java::io::File> file) { return call_static_method<SCAPIX_META_STRING("fromFile"), ref<android::net::Uri>>(file); }
inline ref<android::net::Uri> Uri::fromParts(ref<java::lang::String> scheme, ref<java::lang::String> ssp, ref<java::lang::String> fragment) { return call_static_method<SCAPIX_META_STRING("fromParts"), ref<android::net::Uri>>(scheme, ssp, fragment); }
inline ref<java::util::Set> Uri::getQueryParameterNames() { return call_method<SCAPIX_META_STRING("getQueryParameterNames"), ref<java::util::Set>>(); }
inline ref<java::util::List> Uri::getQueryParameters(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getQueryParameters"), ref<java::util::List>>(key); }
inline ref<java::lang::String> Uri::getQueryParameter(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getQueryParameter"), ref<java::lang::String>>(key); }
inline jboolean Uri::getBooleanQueryParameter(ref<java::lang::String> key, jboolean defaultValue) { return call_method<SCAPIX_META_STRING("getBooleanQueryParameter"), jboolean>(key, defaultValue); }
inline ref<android::net::Uri> Uri::normalizeScheme() { return call_method<SCAPIX_META_STRING("normalizeScheme"), ref<android::net::Uri>>(); }
inline void Uri::writeToParcel(ref<android::os::Parcel> out, ref<android::net::Uri> uri) { return call_static_method<SCAPIX_META_STRING("writeToParcel"), void>(out, uri); }
inline ref<java::lang::String> Uri::encode(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("encode"), ref<java::lang::String>>(s); }
inline ref<java::lang::String> Uri::encode(ref<java::lang::String> s, ref<java::lang::String> allow) { return call_static_method<SCAPIX_META_STRING("encode"), ref<java::lang::String>>(s, allow); }
inline ref<java::lang::String> Uri::decode(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("decode"), ref<java::lang::String>>(s); }
inline ref<android::net::Uri> Uri::withAppendedPath(ref<android::net::Uri> baseUri, ref<java::lang::String> pathSegment) { return call_static_method<SCAPIX_META_STRING("withAppendedPath"), ref<android::net::Uri>>(baseUri, pathSegment); }

} // namespace android::net
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_URI_H
