// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_NET_SIP_SIPAUDIOCALL_H
#define SCAPIX_ANDROID_NET_SIP_SIPAUDIOCALL_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::net::sip { class SipAudioCall_Listener; }
namespace android::net::sip { class SipProfile; }
namespace android::net::sip { class SipSession; }
namespace android::os { class Message; }
namespace java::lang { class String; }

namespace android::net::sip {

class SipAudioCall : public object_base<SCAPIX_META_STRING("android/net/sip/SipAudioCall"),
	java::lang::Object>
{
public:

	using Listener = SipAudioCall_Listener;

	static ref<SipAudioCall> new_object(ref<android::content::Context> context, ref<android::net::sip::SipProfile> localProfile);
	void setListener(ref<android::net::sip::SipAudioCall_Listener> listener);
	void setListener(ref<android::net::sip::SipAudioCall_Listener> listener, jboolean callbackImmediately);
	jboolean isInCall();
	jboolean isOnHold();
	void close();
	ref<android::net::sip::SipProfile> getLocalProfile();
	ref<android::net::sip::SipProfile> getPeerProfile();
	jint getState();
	void attachCall(ref<android::net::sip::SipSession> session, ref<java::lang::String> sessionDescription);
	void makeCall(ref<android::net::sip::SipProfile> peerProfile, ref<android::net::sip::SipSession> sipSession, jint timeout);
	void endCall();
	void holdCall(jint timeout);
	void answerCall(jint timeout);
	void continueCall(jint timeout);
	void toggleMute();
	jboolean isMuted();
	void setSpeakerMode(jboolean speakerMode);
	void sendDtmf(jint code);
	void sendDtmf(jint code, ref<android::os::Message> result);
	void startAudio();

protected:

	SipAudioCall(handle_type h) : base_(h) {}

};

} // namespace android::net::sip
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/net/sip/SipAudioCall_Listener.h>
#include <scapix/java_api/android/net/sip/SipProfile.h>
#include <scapix/java_api/android/net/sip/SipSession.h>
#include <scapix/java_api/android/os/Message.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::net::sip {

inline ref<SipAudioCall> SipAudioCall::new_object(ref<android::content::Context> context, ref<android::net::sip::SipProfile> localProfile) { return base_::new_object(context, localProfile); }
inline void SipAudioCall::setListener(ref<android::net::sip::SipAudioCall_Listener> listener) { return call_method<SCAPIX_META_STRING("setListener"), void>(listener); }
inline void SipAudioCall::setListener(ref<android::net::sip::SipAudioCall_Listener> listener, jboolean callbackImmediately) { return call_method<SCAPIX_META_STRING("setListener"), void>(listener, callbackImmediately); }
inline jboolean SipAudioCall::isInCall() { return call_method<SCAPIX_META_STRING("isInCall"), jboolean>(); }
inline jboolean SipAudioCall::isOnHold() { return call_method<SCAPIX_META_STRING("isOnHold"), jboolean>(); }
inline void SipAudioCall::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline ref<android::net::sip::SipProfile> SipAudioCall::getLocalProfile() { return call_method<SCAPIX_META_STRING("getLocalProfile"), ref<android::net::sip::SipProfile>>(); }
inline ref<android::net::sip::SipProfile> SipAudioCall::getPeerProfile() { return call_method<SCAPIX_META_STRING("getPeerProfile"), ref<android::net::sip::SipProfile>>(); }
inline jint SipAudioCall::getState() { return call_method<SCAPIX_META_STRING("getState"), jint>(); }
inline void SipAudioCall::attachCall(ref<android::net::sip::SipSession> session, ref<java::lang::String> sessionDescription) { return call_method<SCAPIX_META_STRING("attachCall"), void>(session, sessionDescription); }
inline void SipAudioCall::makeCall(ref<android::net::sip::SipProfile> peerProfile, ref<android::net::sip::SipSession> sipSession, jint timeout) { return call_method<SCAPIX_META_STRING("makeCall"), void>(peerProfile, sipSession, timeout); }
inline void SipAudioCall::endCall() { return call_method<SCAPIX_META_STRING("endCall"), void>(); }
inline void SipAudioCall::holdCall(jint timeout) { return call_method<SCAPIX_META_STRING("holdCall"), void>(timeout); }
inline void SipAudioCall::answerCall(jint timeout) { return call_method<SCAPIX_META_STRING("answerCall"), void>(timeout); }
inline void SipAudioCall::continueCall(jint timeout) { return call_method<SCAPIX_META_STRING("continueCall"), void>(timeout); }
inline void SipAudioCall::toggleMute() { return call_method<SCAPIX_META_STRING("toggleMute"), void>(); }
inline jboolean SipAudioCall::isMuted() { return call_method<SCAPIX_META_STRING("isMuted"), jboolean>(); }
inline void SipAudioCall::setSpeakerMode(jboolean speakerMode) { return call_method<SCAPIX_META_STRING("setSpeakerMode"), void>(speakerMode); }
inline void SipAudioCall::sendDtmf(jint code) { return call_method<SCAPIX_META_STRING("sendDtmf"), void>(code); }
inline void SipAudioCall::sendDtmf(jint code, ref<android::os::Message> result) { return call_method<SCAPIX_META_STRING("sendDtmf"), void>(code, result); }
inline void SipAudioCall::startAudio() { return call_method<SCAPIX_META_STRING("startAudio"), void>(); }

} // namespace android::net::sip
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_SIP_SIPAUDIOCALL_H
