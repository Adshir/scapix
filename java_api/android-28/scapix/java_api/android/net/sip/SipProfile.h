// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_ANDROID_NET_SIP_SIPPROFILE_H
#define SCAPIX_ANDROID_NET_SIP_SIPPROFILE_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }
namespace android::net::sip { class SipProfile_Builder; }

namespace android::net::sip {

class SipProfile : public object_base<SCAPIX_META_STRING("android/net/sip/SipProfile"),
	java::lang::Object,
	android::os::Parcelable,
	java::io::Serializable,
	java::lang::Cloneable>
{
public:

	using Builder = SipProfile_Builder;

	static ref<android::os::Parcelable_Creator> CREATOR_();

	void writeToParcel(ref<android::os::Parcel> out, jint flags);
	jint describeContents();
	ref<java::lang::String> getUriString();
	ref<java::lang::String> getDisplayName();
	ref<java::lang::String> getUserName();
	ref<java::lang::String> getAuthUserName();
	ref<java::lang::String> getPassword();
	ref<java::lang::String> getSipDomain();
	jint getPort();
	ref<java::lang::String> getProtocol();
	ref<java::lang::String> getProxyAddress();
	ref<java::lang::String> getProfileName();
	jboolean getSendKeepAlive();
	jboolean getAutoRegistration();

protected:

	SipProfile(handle_type h) : base_(h) {}

};

} // namespace android::net::sip
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::net::sip {

inline ref<android::os::Parcelable_Creator> SipProfile::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline void SipProfile::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }
inline jint SipProfile::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline ref<java::lang::String> SipProfile::getUriString() { return call_method<SCAPIX_META_STRING("getUriString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> SipProfile::getDisplayName() { return call_method<SCAPIX_META_STRING("getDisplayName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> SipProfile::getUserName() { return call_method<SCAPIX_META_STRING("getUserName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> SipProfile::getAuthUserName() { return call_method<SCAPIX_META_STRING("getAuthUserName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> SipProfile::getPassword() { return call_method<SCAPIX_META_STRING("getPassword"), ref<java::lang::String>>(); }
inline ref<java::lang::String> SipProfile::getSipDomain() { return call_method<SCAPIX_META_STRING("getSipDomain"), ref<java::lang::String>>(); }
inline jint SipProfile::getPort() { return call_method<SCAPIX_META_STRING("getPort"), jint>(); }
inline ref<java::lang::String> SipProfile::getProtocol() { return call_method<SCAPIX_META_STRING("getProtocol"), ref<java::lang::String>>(); }
inline ref<java::lang::String> SipProfile::getProxyAddress() { return call_method<SCAPIX_META_STRING("getProxyAddress"), ref<java::lang::String>>(); }
inline ref<java::lang::String> SipProfile::getProfileName() { return call_method<SCAPIX_META_STRING("getProfileName"), ref<java::lang::String>>(); }
inline jboolean SipProfile::getSendKeepAlive() { return call_method<SCAPIX_META_STRING("getSendKeepAlive"), jboolean>(); }
inline jboolean SipProfile::getAutoRegistration() { return call_method<SCAPIX_META_STRING("getAutoRegistration"), jboolean>(); }

} // namespace android::net::sip
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_SIP_SIPPROFILE_H
