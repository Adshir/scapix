// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_NET_SIP_SIPMANAGER_H
#define SCAPIX_ANDROID_NET_SIP_SIPMANAGER_H

namespace scapix::java_api {

namespace android::app { class PendingIntent; }
namespace android::content { class Context; }
namespace android::content { class Intent; }
namespace android::net::sip { class SipAudioCall; }
namespace android::net::sip { class SipAudioCall_Listener; }
namespace android::net::sip { class SipProfile; }
namespace android::net::sip { class SipRegistrationListener; }
namespace android::net::sip { class SipSession; }
namespace android::net::sip { class SipSession_Listener; }
namespace java::lang { class String; }

namespace android::net::sip {

class SipManager : public object_base<SCAPIX_META_STRING("android/net/sip/SipManager"),
	java::lang::Object>
{
public:

	static ref<java::lang::String> EXTRA_CALL_ID_();
	static ref<java::lang::String> EXTRA_OFFER_SD_();
	static jint INCOMING_CALL_RESULT_CODE_();

	static ref<android::net::sip::SipManager> newInstance(ref<android::content::Context> context);
	static jboolean isApiSupported(ref<android::content::Context> context);
	static jboolean isVoipSupported(ref<android::content::Context> context);
	static jboolean isSipWifiOnly(ref<android::content::Context> context);
	void open(ref<android::net::sip::SipProfile> localProfile);
	void open(ref<android::net::sip::SipProfile> localProfile, ref<android::app::PendingIntent> incomingCallPendingIntent, ref<android::net::sip::SipRegistrationListener> listener);
	void setRegistrationListener(ref<java::lang::String> localProfileUri, ref<android::net::sip::SipRegistrationListener> listener);
	void close(ref<java::lang::String> localProfileUri);
	jboolean isOpened(ref<java::lang::String> localProfileUri);
	jboolean isRegistered(ref<java::lang::String> localProfileUri);
	ref<android::net::sip::SipAudioCall> makeAudioCall(ref<android::net::sip::SipProfile> localProfile, ref<android::net::sip::SipProfile> peerProfile, ref<android::net::sip::SipAudioCall_Listener> listener, jint timeout);
	ref<android::net::sip::SipAudioCall> makeAudioCall(ref<java::lang::String> localProfileUri, ref<java::lang::String> peerProfileUri, ref<android::net::sip::SipAudioCall_Listener> listener, jint timeout);
	ref<android::net::sip::SipAudioCall> takeAudioCall(ref<android::content::Intent> incomingCallIntent, ref<android::net::sip::SipAudioCall_Listener> listener);
	static jboolean isIncomingCallIntent(ref<android::content::Intent> intent);
	static ref<java::lang::String> getCallId(ref<android::content::Intent> incomingCallIntent);
	static ref<java::lang::String> getOfferSessionDescription(ref<android::content::Intent> incomingCallIntent);
	void register_(ref<android::net::sip::SipProfile> localProfile, jint expiryTime, ref<android::net::sip::SipRegistrationListener> listener);
	void unregister(ref<android::net::sip::SipProfile> localProfile, ref<android::net::sip::SipRegistrationListener> listener);
	ref<android::net::sip::SipSession> getSessionFor(ref<android::content::Intent> incomingCallIntent);
	ref<android::net::sip::SipSession> createSipSession(ref<android::net::sip::SipProfile> localProfile, ref<android::net::sip::SipSession_Listener> listener);

protected:

	SipManager(handle_type h) : base_(h) {}

};

} // namespace android::net::sip
} // namespace scapix::java_api

#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/net/sip/SipAudioCall.h>
#include <scapix/java_api/android/net/sip/SipAudioCall_Listener.h>
#include <scapix/java_api/android/net/sip/SipProfile.h>
#include <scapix/java_api/android/net/sip/SipRegistrationListener.h>
#include <scapix/java_api/android/net/sip/SipSession.h>
#include <scapix/java_api/android/net/sip/SipSession_Listener.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::net::sip {

inline ref<java::lang::String> SipManager::EXTRA_CALL_ID_() { return get_static_field<SCAPIX_META_STRING("EXTRA_CALL_ID"), ref<java::lang::String>>(); }
inline ref<java::lang::String> SipManager::EXTRA_OFFER_SD_() { return get_static_field<SCAPIX_META_STRING("EXTRA_OFFER_SD"), ref<java::lang::String>>(); }
inline jint SipManager::INCOMING_CALL_RESULT_CODE_() { return get_static_field<SCAPIX_META_STRING("INCOMING_CALL_RESULT_CODE"), jint>(); }
inline ref<android::net::sip::SipManager> SipManager::newInstance(ref<android::content::Context> context) { return call_static_method<SCAPIX_META_STRING("newInstance"), ref<android::net::sip::SipManager>>(context); }
inline jboolean SipManager::isApiSupported(ref<android::content::Context> context) { return call_static_method<SCAPIX_META_STRING("isApiSupported"), jboolean>(context); }
inline jboolean SipManager::isVoipSupported(ref<android::content::Context> context) { return call_static_method<SCAPIX_META_STRING("isVoipSupported"), jboolean>(context); }
inline jboolean SipManager::isSipWifiOnly(ref<android::content::Context> context) { return call_static_method<SCAPIX_META_STRING("isSipWifiOnly"), jboolean>(context); }
inline void SipManager::open(ref<android::net::sip::SipProfile> localProfile) { return call_method<SCAPIX_META_STRING("open"), void>(localProfile); }
inline void SipManager::open(ref<android::net::sip::SipProfile> localProfile, ref<android::app::PendingIntent> incomingCallPendingIntent, ref<android::net::sip::SipRegistrationListener> listener) { return call_method<SCAPIX_META_STRING("open"), void>(localProfile, incomingCallPendingIntent, listener); }
inline void SipManager::setRegistrationListener(ref<java::lang::String> localProfileUri, ref<android::net::sip::SipRegistrationListener> listener) { return call_method<SCAPIX_META_STRING("setRegistrationListener"), void>(localProfileUri, listener); }
inline void SipManager::close(ref<java::lang::String> localProfileUri) { return call_method<SCAPIX_META_STRING("close"), void>(localProfileUri); }
inline jboolean SipManager::isOpened(ref<java::lang::String> localProfileUri) { return call_method<SCAPIX_META_STRING("isOpened"), jboolean>(localProfileUri); }
inline jboolean SipManager::isRegistered(ref<java::lang::String> localProfileUri) { return call_method<SCAPIX_META_STRING("isRegistered"), jboolean>(localProfileUri); }
inline ref<android::net::sip::SipAudioCall> SipManager::makeAudioCall(ref<android::net::sip::SipProfile> localProfile, ref<android::net::sip::SipProfile> peerProfile, ref<android::net::sip::SipAudioCall_Listener> listener, jint timeout) { return call_method<SCAPIX_META_STRING("makeAudioCall"), ref<android::net::sip::SipAudioCall>>(localProfile, peerProfile, listener, timeout); }
inline ref<android::net::sip::SipAudioCall> SipManager::makeAudioCall(ref<java::lang::String> localProfileUri, ref<java::lang::String> peerProfileUri, ref<android::net::sip::SipAudioCall_Listener> listener, jint timeout) { return call_method<SCAPIX_META_STRING("makeAudioCall"), ref<android::net::sip::SipAudioCall>>(localProfileUri, peerProfileUri, listener, timeout); }
inline ref<android::net::sip::SipAudioCall> SipManager::takeAudioCall(ref<android::content::Intent> incomingCallIntent, ref<android::net::sip::SipAudioCall_Listener> listener) { return call_method<SCAPIX_META_STRING("takeAudioCall"), ref<android::net::sip::SipAudioCall>>(incomingCallIntent, listener); }
inline jboolean SipManager::isIncomingCallIntent(ref<android::content::Intent> intent) { return call_static_method<SCAPIX_META_STRING("isIncomingCallIntent"), jboolean>(intent); }
inline ref<java::lang::String> SipManager::getCallId(ref<android::content::Intent> incomingCallIntent) { return call_static_method<SCAPIX_META_STRING("getCallId"), ref<java::lang::String>>(incomingCallIntent); }
inline ref<java::lang::String> SipManager::getOfferSessionDescription(ref<android::content::Intent> incomingCallIntent) { return call_static_method<SCAPIX_META_STRING("getOfferSessionDescription"), ref<java::lang::String>>(incomingCallIntent); }
inline void SipManager::register_(ref<android::net::sip::SipProfile> localProfile, jint expiryTime, ref<android::net::sip::SipRegistrationListener> listener) { return call_method<SCAPIX_META_STRING("register"), void>(localProfile, expiryTime, listener); }
inline void SipManager::unregister(ref<android::net::sip::SipProfile> localProfile, ref<android::net::sip::SipRegistrationListener> listener) { return call_method<SCAPIX_META_STRING("unregister"), void>(localProfile, listener); }
inline ref<android::net::sip::SipSession> SipManager::getSessionFor(ref<android::content::Intent> incomingCallIntent) { return call_method<SCAPIX_META_STRING("getSessionFor"), ref<android::net::sip::SipSession>>(incomingCallIntent); }
inline ref<android::net::sip::SipSession> SipManager::createSipSession(ref<android::net::sip::SipProfile> localProfile, ref<android::net::sip::SipSession_Listener> listener) { return call_method<SCAPIX_META_STRING("createSipSession"), ref<android::net::sip::SipSession>>(localProfile, listener); }

} // namespace android::net::sip
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NET_SIP_SIPMANAGER_H
