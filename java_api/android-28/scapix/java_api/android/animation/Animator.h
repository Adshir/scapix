// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_ANDROID_ANIMATION_ANIMATOR_H
#define SCAPIX_ANDROID_ANIMATION_ANIMATOR_H

namespace scapix::java_api {

namespace android::animation { class Animator_AnimatorListener; }
namespace android::animation { class Animator_AnimatorPauseListener; }
namespace android::animation { class TimeInterpolator; }
namespace java::util { class ArrayList; }

namespace android::animation {

class Animator : public object_base<SCAPIX_META_STRING("android/animation/Animator"),
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	using AnimatorPauseListener = Animator_AnimatorPauseListener;
	using AnimatorListener = Animator_AnimatorListener;

	static jlong DURATION_INFINITE_();

	static ref<Animator> new_object();
	void start();
	void cancel();
	void end();
	void pause();
	void resume();
	jboolean isPaused();
	jlong getStartDelay();
	void setStartDelay(jlong p1);
	ref<android::animation::Animator> setDuration(jlong p1);
	jlong getDuration();
	jlong getTotalDuration();
	void setInterpolator(ref<android::animation::TimeInterpolator> p1);
	ref<android::animation::TimeInterpolator> getInterpolator();
	jboolean isRunning();
	jboolean isStarted();
	void addListener(ref<android::animation::Animator_AnimatorListener> listener);
	void removeListener(ref<android::animation::Animator_AnimatorListener> listener);
	ref<java::util::ArrayList> getListeners();
	void addPauseListener(ref<android::animation::Animator_AnimatorPauseListener> listener);
	void removePauseListener(ref<android::animation::Animator_AnimatorPauseListener> listener);
	void removeAllListeners();
	ref<android::animation::Animator> clone();
	void setupStartValues();
	void setupEndValues();
	void setTarget(ref<java::lang::Object> target);

protected:

	Animator(handle_type h) : base_(h) {}

};

} // namespace android::animation
} // namespace scapix::java_api

#include <scapix/java_api/android/animation/Animator_AnimatorListener.h>
#include <scapix/java_api/android/animation/Animator_AnimatorPauseListener.h>
#include <scapix/java_api/android/animation/TimeInterpolator.h>
#include <scapix/java_api/java/util/ArrayList.h>

namespace scapix::java_api {
namespace android::animation {

inline jlong Animator::DURATION_INFINITE_() { return get_static_field<SCAPIX_META_STRING("DURATION_INFINITE"), jlong>(); }
inline ref<Animator> Animator::new_object() { return base_::new_object(); }
inline void Animator::start() { return call_method<SCAPIX_META_STRING("start"), void>(); }
inline void Animator::cancel() { return call_method<SCAPIX_META_STRING("cancel"), void>(); }
inline void Animator::end() { return call_method<SCAPIX_META_STRING("end"), void>(); }
inline void Animator::pause() { return call_method<SCAPIX_META_STRING("pause"), void>(); }
inline void Animator::resume() { return call_method<SCAPIX_META_STRING("resume"), void>(); }
inline jboolean Animator::isPaused() { return call_method<SCAPIX_META_STRING("isPaused"), jboolean>(); }
inline jlong Animator::getStartDelay() { return call_method<SCAPIX_META_STRING("getStartDelay"), jlong>(); }
inline void Animator::setStartDelay(jlong p1) { return call_method<SCAPIX_META_STRING("setStartDelay"), void>(p1); }
inline ref<android::animation::Animator> Animator::setDuration(jlong p1) { return call_method<SCAPIX_META_STRING("setDuration"), ref<android::animation::Animator>>(p1); }
inline jlong Animator::getDuration() { return call_method<SCAPIX_META_STRING("getDuration"), jlong>(); }
inline jlong Animator::getTotalDuration() { return call_method<SCAPIX_META_STRING("getTotalDuration"), jlong>(); }
inline void Animator::setInterpolator(ref<android::animation::TimeInterpolator> p1) { return call_method<SCAPIX_META_STRING("setInterpolator"), void>(p1); }
inline ref<android::animation::TimeInterpolator> Animator::getInterpolator() { return call_method<SCAPIX_META_STRING("getInterpolator"), ref<android::animation::TimeInterpolator>>(); }
inline jboolean Animator::isRunning() { return call_method<SCAPIX_META_STRING("isRunning"), jboolean>(); }
inline jboolean Animator::isStarted() { return call_method<SCAPIX_META_STRING("isStarted"), jboolean>(); }
inline void Animator::addListener(ref<android::animation::Animator_AnimatorListener> listener) { return call_method<SCAPIX_META_STRING("addListener"), void>(listener); }
inline void Animator::removeListener(ref<android::animation::Animator_AnimatorListener> listener) { return call_method<SCAPIX_META_STRING("removeListener"), void>(listener); }
inline ref<java::util::ArrayList> Animator::getListeners() { return call_method<SCAPIX_META_STRING("getListeners"), ref<java::util::ArrayList>>(); }
inline void Animator::addPauseListener(ref<android::animation::Animator_AnimatorPauseListener> listener) { return call_method<SCAPIX_META_STRING("addPauseListener"), void>(listener); }
inline void Animator::removePauseListener(ref<android::animation::Animator_AnimatorPauseListener> listener) { return call_method<SCAPIX_META_STRING("removePauseListener"), void>(listener); }
inline void Animator::removeAllListeners() { return call_method<SCAPIX_META_STRING("removeAllListeners"), void>(); }
inline ref<android::animation::Animator> Animator::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<android::animation::Animator>>(); }
inline void Animator::setupStartValues() { return call_method<SCAPIX_META_STRING("setupStartValues"), void>(); }
inline void Animator::setupEndValues() { return call_method<SCAPIX_META_STRING("setupEndValues"), void>(); }
inline void Animator::setTarget(ref<java::lang::Object> target) { return call_method<SCAPIX_META_STRING("setTarget"), void>(target); }

} // namespace android::animation
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_ANIMATION_ANIMATOR_H
