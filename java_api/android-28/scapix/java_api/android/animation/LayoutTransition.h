// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_ANIMATION_LAYOUTTRANSITION_H
#define SCAPIX_ANDROID_ANIMATION_LAYOUTTRANSITION_H

namespace scapix::java_api {

namespace android::animation { class Animator; }
namespace android::animation { class LayoutTransition_TransitionListener; }
namespace android::animation { class TimeInterpolator; }
namespace android::view { class View; }
namespace android::view { class ViewGroup; }
namespace java::util { class List; }

namespace android::animation {

class LayoutTransition : public object_base<SCAPIX_META_STRING("android/animation/LayoutTransition"),
	java::lang::Object>
{
public:

	using TransitionListener = LayoutTransition_TransitionListener;

	static jint APPEARING_();
	static jint CHANGE_APPEARING_();
	static jint CHANGE_DISAPPEARING_();
	static jint CHANGING_();
	static jint DISAPPEARING_();

	static ref<LayoutTransition> new_object();
	void setDuration(jlong duration);
	void enableTransitionType(jint transitionType);
	void disableTransitionType(jint transitionType);
	jboolean isTransitionTypeEnabled(jint transitionType);
	void setStartDelay(jint transitionType, jlong delay);
	jlong getStartDelay(jint transitionType);
	void setDuration(jint transitionType, jlong duration);
	jlong getDuration(jint transitionType);
	void setStagger(jint transitionType, jlong duration);
	jlong getStagger(jint transitionType);
	void setInterpolator(jint transitionType, ref<android::animation::TimeInterpolator> interpolator);
	ref<android::animation::TimeInterpolator> getInterpolator(jint transitionType);
	void setAnimator(jint transitionType, ref<android::animation::Animator> animator);
	ref<android::animation::Animator> getAnimator(jint transitionType);
	void setAnimateParentHierarchy(jboolean animateParentHierarchy);
	jboolean isChangingLayout();
	jboolean isRunning();
	void addChild(ref<android::view::ViewGroup> parent, ref<android::view::View> child);
	void showChild(ref<android::view::ViewGroup> parent, ref<android::view::View> child);
	void showChild(ref<android::view::ViewGroup> parent, ref<android::view::View> child, jint oldVisibility);
	void removeChild(ref<android::view::ViewGroup> parent, ref<android::view::View> child);
	void hideChild(ref<android::view::ViewGroup> parent, ref<android::view::View> child);
	void hideChild(ref<android::view::ViewGroup> parent, ref<android::view::View> child, jint newVisibility);
	void addTransitionListener(ref<android::animation::LayoutTransition_TransitionListener> listener);
	void removeTransitionListener(ref<android::animation::LayoutTransition_TransitionListener> listener);
	ref<java::util::List> getTransitionListeners();

protected:

	LayoutTransition(handle_type h) : base_(h) {}

};

} // namespace android::animation
} // namespace scapix::java_api

#include <scapix/java_api/android/animation/Animator.h>
#include <scapix/java_api/android/animation/LayoutTransition_TransitionListener.h>
#include <scapix/java_api/android/animation/TimeInterpolator.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::animation {

inline jint LayoutTransition::APPEARING_() { return get_static_field<SCAPIX_META_STRING("APPEARING"), jint>(); }
inline jint LayoutTransition::CHANGE_APPEARING_() { return get_static_field<SCAPIX_META_STRING("CHANGE_APPEARING"), jint>(); }
inline jint LayoutTransition::CHANGE_DISAPPEARING_() { return get_static_field<SCAPIX_META_STRING("CHANGE_DISAPPEARING"), jint>(); }
inline jint LayoutTransition::CHANGING_() { return get_static_field<SCAPIX_META_STRING("CHANGING"), jint>(); }
inline jint LayoutTransition::DISAPPEARING_() { return get_static_field<SCAPIX_META_STRING("DISAPPEARING"), jint>(); }
inline ref<LayoutTransition> LayoutTransition::new_object() { return base_::new_object(); }
inline void LayoutTransition::setDuration(jlong duration) { return call_method<SCAPIX_META_STRING("setDuration"), void>(duration); }
inline void LayoutTransition::enableTransitionType(jint transitionType) { return call_method<SCAPIX_META_STRING("enableTransitionType"), void>(transitionType); }
inline void LayoutTransition::disableTransitionType(jint transitionType) { return call_method<SCAPIX_META_STRING("disableTransitionType"), void>(transitionType); }
inline jboolean LayoutTransition::isTransitionTypeEnabled(jint transitionType) { return call_method<SCAPIX_META_STRING("isTransitionTypeEnabled"), jboolean>(transitionType); }
inline void LayoutTransition::setStartDelay(jint transitionType, jlong delay) { return call_method<SCAPIX_META_STRING("setStartDelay"), void>(transitionType, delay); }
inline jlong LayoutTransition::getStartDelay(jint transitionType) { return call_method<SCAPIX_META_STRING("getStartDelay"), jlong>(transitionType); }
inline void LayoutTransition::setDuration(jint transitionType, jlong duration) { return call_method<SCAPIX_META_STRING("setDuration"), void>(transitionType, duration); }
inline jlong LayoutTransition::getDuration(jint transitionType) { return call_method<SCAPIX_META_STRING("getDuration"), jlong>(transitionType); }
inline void LayoutTransition::setStagger(jint transitionType, jlong duration) { return call_method<SCAPIX_META_STRING("setStagger"), void>(transitionType, duration); }
inline jlong LayoutTransition::getStagger(jint transitionType) { return call_method<SCAPIX_META_STRING("getStagger"), jlong>(transitionType); }
inline void LayoutTransition::setInterpolator(jint transitionType, ref<android::animation::TimeInterpolator> interpolator) { return call_method<SCAPIX_META_STRING("setInterpolator"), void>(transitionType, interpolator); }
inline ref<android::animation::TimeInterpolator> LayoutTransition::getInterpolator(jint transitionType) { return call_method<SCAPIX_META_STRING("getInterpolator"), ref<android::animation::TimeInterpolator>>(transitionType); }
inline void LayoutTransition::setAnimator(jint transitionType, ref<android::animation::Animator> animator) { return call_method<SCAPIX_META_STRING("setAnimator"), void>(transitionType, animator); }
inline ref<android::animation::Animator> LayoutTransition::getAnimator(jint transitionType) { return call_method<SCAPIX_META_STRING("getAnimator"), ref<android::animation::Animator>>(transitionType); }
inline void LayoutTransition::setAnimateParentHierarchy(jboolean animateParentHierarchy) { return call_method<SCAPIX_META_STRING("setAnimateParentHierarchy"), void>(animateParentHierarchy); }
inline jboolean LayoutTransition::isChangingLayout() { return call_method<SCAPIX_META_STRING("isChangingLayout"), jboolean>(); }
inline jboolean LayoutTransition::isRunning() { return call_method<SCAPIX_META_STRING("isRunning"), jboolean>(); }
inline void LayoutTransition::addChild(ref<android::view::ViewGroup> parent, ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("addChild"), void>(parent, child); }
inline void LayoutTransition::showChild(ref<android::view::ViewGroup> parent, ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("showChild"), void>(parent, child); }
inline void LayoutTransition::showChild(ref<android::view::ViewGroup> parent, ref<android::view::View> child, jint oldVisibility) { return call_method<SCAPIX_META_STRING("showChild"), void>(parent, child, oldVisibility); }
inline void LayoutTransition::removeChild(ref<android::view::ViewGroup> parent, ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("removeChild"), void>(parent, child); }
inline void LayoutTransition::hideChild(ref<android::view::ViewGroup> parent, ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("hideChild"), void>(parent, child); }
inline void LayoutTransition::hideChild(ref<android::view::ViewGroup> parent, ref<android::view::View> child, jint newVisibility) { return call_method<SCAPIX_META_STRING("hideChild"), void>(parent, child, newVisibility); }
inline void LayoutTransition::addTransitionListener(ref<android::animation::LayoutTransition_TransitionListener> listener) { return call_method<SCAPIX_META_STRING("addTransitionListener"), void>(listener); }
inline void LayoutTransition::removeTransitionListener(ref<android::animation::LayoutTransition_TransitionListener> listener) { return call_method<SCAPIX_META_STRING("removeTransitionListener"), void>(listener); }
inline ref<java::util::List> LayoutTransition::getTransitionListeners() { return call_method<SCAPIX_META_STRING("getTransitionListeners"), ref<java::util::List>>(); }

} // namespace android::animation
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_ANIMATION_LAYOUTTRANSITION_H
