// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_APP_WALLPAPERMANAGER_H
#define SCAPIX_ANDROID_APP_WALLPAPERMANAGER_H

namespace scapix::java_api {

namespace android::app { class WallpaperColors; }
namespace android::app { class WallpaperInfo; }
namespace android::app { class WallpaperManager_OnColorsChangedListener; }
namespace android::content { class Context; }
namespace android::content { class Intent; }
namespace android::graphics { class Bitmap; }
namespace android::graphics { class Rect; }
namespace android::graphics::drawable { class Drawable; }
namespace android::net { class Uri; }
namespace android::os { class Bundle; }
namespace android::os { class Handler; }
namespace android::os { class IBinder; }
namespace android::os { class ParcelFileDescriptor; }
namespace java::io { class InputStream; }
namespace java::lang { class String; }

namespace android::app {

class WallpaperManager : public object_base<SCAPIX_META_STRING("android/app/WallpaperManager"),
	java::lang::Object>
{
public:

	using OnColorsChangedListener = WallpaperManager_OnColorsChangedListener;

	static ref<java::lang::String> ACTION_CHANGE_LIVE_WALLPAPER_();
	static ref<java::lang::String> ACTION_CROP_AND_SET_WALLPAPER_();
	static ref<java::lang::String> ACTION_LIVE_WALLPAPER_CHOOSER_();
	static ref<java::lang::String> COMMAND_DROP_();
	static ref<java::lang::String> COMMAND_SECONDARY_TAP_();
	static ref<java::lang::String> COMMAND_TAP_();
	static ref<java::lang::String> EXTRA_LIVE_WALLPAPER_COMPONENT_();
	static jint FLAG_LOCK_();
	static jint FLAG_SYSTEM_();
	static ref<java::lang::String> WALLPAPER_PREVIEW_META_DATA_();

	static ref<android::app::WallpaperManager> getInstance(ref<android::content::Context> context);
	ref<android::graphics::drawable::Drawable> getDrawable();
	ref<android::graphics::drawable::Drawable> getBuiltInDrawable();
	ref<android::graphics::drawable::Drawable> getBuiltInDrawable(jint which);
	ref<android::graphics::drawable::Drawable> getBuiltInDrawable(jint outWidth, jint outHeight, jboolean scaleToFit, jfloat horizontalAlignment, jfloat verticalAlignment);
	ref<android::graphics::drawable::Drawable> getBuiltInDrawable(jint outWidth, jint outHeight, jboolean scaleToFit, jfloat horizontalAlignment, jfloat verticalAlignment, jint which);
	ref<android::graphics::drawable::Drawable> peekDrawable();
	ref<android::graphics::drawable::Drawable> getFastDrawable();
	ref<android::graphics::drawable::Drawable> peekFastDrawable();
	ref<android::os::ParcelFileDescriptor> getWallpaperFile(jint which);
	void addOnColorsChangedListener(ref<android::app::WallpaperManager_OnColorsChangedListener> listener, ref<android::os::Handler> handler);
	void removeOnColorsChangedListener(ref<android::app::WallpaperManager_OnColorsChangedListener> callback);
	ref<android::app::WallpaperColors> getWallpaperColors(jint which);
	void forgetLoadedWallpaper();
	ref<android::app::WallpaperInfo> getWallpaperInfo();
	jint getWallpaperId(jint which);
	ref<android::content::Intent> getCropAndSetWallpaperIntent(ref<android::net::Uri> imageUri);
	void setResource(jint resid);
	jint setResource(jint resid, jint which);
	void setBitmap(ref<android::graphics::Bitmap> bitmap);
	jint setBitmap(ref<android::graphics::Bitmap> fullImage, ref<android::graphics::Rect> visibleCropHint, jboolean allowBackup);
	jint setBitmap(ref<android::graphics::Bitmap> fullImage, ref<android::graphics::Rect> visibleCropHint, jboolean allowBackup, jint which);
	void setStream(ref<java::io::InputStream> bitmapData);
	jint setStream(ref<java::io::InputStream> bitmapData, ref<android::graphics::Rect> visibleCropHint, jboolean allowBackup);
	jint setStream(ref<java::io::InputStream> bitmapData, ref<android::graphics::Rect> visibleCropHint, jboolean allowBackup, jint which);
	jboolean hasResourceWallpaper(jint resid);
	jint getDesiredMinimumWidth();
	jint getDesiredMinimumHeight();
	void suggestDesiredDimensions(jint minimumWidth, jint minimumHeight);
	void setDisplayPadding(ref<android::graphics::Rect> padding);
	void clearWallpaper();
	void setWallpaperOffsets(ref<android::os::IBinder> windowToken, jfloat xOffset, jfloat yOffset);
	void setWallpaperOffsetSteps(jfloat xStep, jfloat yStep);
	void sendWallpaperCommand(ref<android::os::IBinder> windowToken, ref<java::lang::String> action, jint x, jint y, jint z, ref<android::os::Bundle> extras);
	jboolean isWallpaperSupported();
	jboolean isSetWallpaperAllowed();
	void clearWallpaperOffsets(ref<android::os::IBinder> windowToken);
	void clear();
	void clear(jint which);

protected:

	WallpaperManager(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/app/WallpaperColors.h>
#include <scapix/java_api/android/app/WallpaperInfo.h>
#include <scapix/java_api/android/app/WallpaperManager_OnColorsChangedListener.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::app {

inline ref<java::lang::String> WallpaperManager::ACTION_CHANGE_LIVE_WALLPAPER_() { return get_static_field<SCAPIX_META_STRING("ACTION_CHANGE_LIVE_WALLPAPER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WallpaperManager::ACTION_CROP_AND_SET_WALLPAPER_() { return get_static_field<SCAPIX_META_STRING("ACTION_CROP_AND_SET_WALLPAPER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WallpaperManager::ACTION_LIVE_WALLPAPER_CHOOSER_() { return get_static_field<SCAPIX_META_STRING("ACTION_LIVE_WALLPAPER_CHOOSER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WallpaperManager::COMMAND_DROP_() { return get_static_field<SCAPIX_META_STRING("COMMAND_DROP"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WallpaperManager::COMMAND_SECONDARY_TAP_() { return get_static_field<SCAPIX_META_STRING("COMMAND_SECONDARY_TAP"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WallpaperManager::COMMAND_TAP_() { return get_static_field<SCAPIX_META_STRING("COMMAND_TAP"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WallpaperManager::EXTRA_LIVE_WALLPAPER_COMPONENT_() { return get_static_field<SCAPIX_META_STRING("EXTRA_LIVE_WALLPAPER_COMPONENT"), ref<java::lang::String>>(); }
inline jint WallpaperManager::FLAG_LOCK_() { return get_static_field<SCAPIX_META_STRING("FLAG_LOCK"), jint>(); }
inline jint WallpaperManager::FLAG_SYSTEM_() { return get_static_field<SCAPIX_META_STRING("FLAG_SYSTEM"), jint>(); }
inline ref<java::lang::String> WallpaperManager::WALLPAPER_PREVIEW_META_DATA_() { return get_static_field<SCAPIX_META_STRING("WALLPAPER_PREVIEW_META_DATA"), ref<java::lang::String>>(); }
inline ref<android::app::WallpaperManager> WallpaperManager::getInstance(ref<android::content::Context> context) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<android::app::WallpaperManager>>(context); }
inline ref<android::graphics::drawable::Drawable> WallpaperManager::getDrawable() { return call_method<SCAPIX_META_STRING("getDrawable"), ref<android::graphics::drawable::Drawable>>(); }
inline ref<android::graphics::drawable::Drawable> WallpaperManager::getBuiltInDrawable() { return call_method<SCAPIX_META_STRING("getBuiltInDrawable"), ref<android::graphics::drawable::Drawable>>(); }
inline ref<android::graphics::drawable::Drawable> WallpaperManager::getBuiltInDrawable(jint which) { return call_method<SCAPIX_META_STRING("getBuiltInDrawable"), ref<android::graphics::drawable::Drawable>>(which); }
inline ref<android::graphics::drawable::Drawable> WallpaperManager::getBuiltInDrawable(jint outWidth, jint outHeight, jboolean scaleToFit, jfloat horizontalAlignment, jfloat verticalAlignment) { return call_method<SCAPIX_META_STRING("getBuiltInDrawable"), ref<android::graphics::drawable::Drawable>>(outWidth, outHeight, scaleToFit, horizontalAlignment, verticalAlignment); }
inline ref<android::graphics::drawable::Drawable> WallpaperManager::getBuiltInDrawable(jint outWidth, jint outHeight, jboolean scaleToFit, jfloat horizontalAlignment, jfloat verticalAlignment, jint which) { return call_method<SCAPIX_META_STRING("getBuiltInDrawable"), ref<android::graphics::drawable::Drawable>>(outWidth, outHeight, scaleToFit, horizontalAlignment, verticalAlignment, which); }
inline ref<android::graphics::drawable::Drawable> WallpaperManager::peekDrawable() { return call_method<SCAPIX_META_STRING("peekDrawable"), ref<android::graphics::drawable::Drawable>>(); }
inline ref<android::graphics::drawable::Drawable> WallpaperManager::getFastDrawable() { return call_method<SCAPIX_META_STRING("getFastDrawable"), ref<android::graphics::drawable::Drawable>>(); }
inline ref<android::graphics::drawable::Drawable> WallpaperManager::peekFastDrawable() { return call_method<SCAPIX_META_STRING("peekFastDrawable"), ref<android::graphics::drawable::Drawable>>(); }
inline ref<android::os::ParcelFileDescriptor> WallpaperManager::getWallpaperFile(jint which) { return call_method<SCAPIX_META_STRING("getWallpaperFile"), ref<android::os::ParcelFileDescriptor>>(which); }
inline void WallpaperManager::addOnColorsChangedListener(ref<android::app::WallpaperManager_OnColorsChangedListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("addOnColorsChangedListener"), void>(listener, handler); }
inline void WallpaperManager::removeOnColorsChangedListener(ref<android::app::WallpaperManager_OnColorsChangedListener> callback) { return call_method<SCAPIX_META_STRING("removeOnColorsChangedListener"), void>(callback); }
inline ref<android::app::WallpaperColors> WallpaperManager::getWallpaperColors(jint which) { return call_method<SCAPIX_META_STRING("getWallpaperColors"), ref<android::app::WallpaperColors>>(which); }
inline void WallpaperManager::forgetLoadedWallpaper() { return call_method<SCAPIX_META_STRING("forgetLoadedWallpaper"), void>(); }
inline ref<android::app::WallpaperInfo> WallpaperManager::getWallpaperInfo() { return call_method<SCAPIX_META_STRING("getWallpaperInfo"), ref<android::app::WallpaperInfo>>(); }
inline jint WallpaperManager::getWallpaperId(jint which) { return call_method<SCAPIX_META_STRING("getWallpaperId"), jint>(which); }
inline ref<android::content::Intent> WallpaperManager::getCropAndSetWallpaperIntent(ref<android::net::Uri> imageUri) { return call_method<SCAPIX_META_STRING("getCropAndSetWallpaperIntent"), ref<android::content::Intent>>(imageUri); }
inline void WallpaperManager::setResource(jint resid) { return call_method<SCAPIX_META_STRING("setResource"), void>(resid); }
inline jint WallpaperManager::setResource(jint resid, jint which) { return call_method<SCAPIX_META_STRING("setResource"), jint>(resid, which); }
inline void WallpaperManager::setBitmap(ref<android::graphics::Bitmap> bitmap) { return call_method<SCAPIX_META_STRING("setBitmap"), void>(bitmap); }
inline jint WallpaperManager::setBitmap(ref<android::graphics::Bitmap> fullImage, ref<android::graphics::Rect> visibleCropHint, jboolean allowBackup) { return call_method<SCAPIX_META_STRING("setBitmap"), jint>(fullImage, visibleCropHint, allowBackup); }
inline jint WallpaperManager::setBitmap(ref<android::graphics::Bitmap> fullImage, ref<android::graphics::Rect> visibleCropHint, jboolean allowBackup, jint which) { return call_method<SCAPIX_META_STRING("setBitmap"), jint>(fullImage, visibleCropHint, allowBackup, which); }
inline void WallpaperManager::setStream(ref<java::io::InputStream> bitmapData) { return call_method<SCAPIX_META_STRING("setStream"), void>(bitmapData); }
inline jint WallpaperManager::setStream(ref<java::io::InputStream> bitmapData, ref<android::graphics::Rect> visibleCropHint, jboolean allowBackup) { return call_method<SCAPIX_META_STRING("setStream"), jint>(bitmapData, visibleCropHint, allowBackup); }
inline jint WallpaperManager::setStream(ref<java::io::InputStream> bitmapData, ref<android::graphics::Rect> visibleCropHint, jboolean allowBackup, jint which) { return call_method<SCAPIX_META_STRING("setStream"), jint>(bitmapData, visibleCropHint, allowBackup, which); }
inline jboolean WallpaperManager::hasResourceWallpaper(jint resid) { return call_method<SCAPIX_META_STRING("hasResourceWallpaper"), jboolean>(resid); }
inline jint WallpaperManager::getDesiredMinimumWidth() { return call_method<SCAPIX_META_STRING("getDesiredMinimumWidth"), jint>(); }
inline jint WallpaperManager::getDesiredMinimumHeight() { return call_method<SCAPIX_META_STRING("getDesiredMinimumHeight"), jint>(); }
inline void WallpaperManager::suggestDesiredDimensions(jint minimumWidth, jint minimumHeight) { return call_method<SCAPIX_META_STRING("suggestDesiredDimensions"), void>(minimumWidth, minimumHeight); }
inline void WallpaperManager::setDisplayPadding(ref<android::graphics::Rect> padding) { return call_method<SCAPIX_META_STRING("setDisplayPadding"), void>(padding); }
inline void WallpaperManager::clearWallpaper() { return call_method<SCAPIX_META_STRING("clearWallpaper"), void>(); }
inline void WallpaperManager::setWallpaperOffsets(ref<android::os::IBinder> windowToken, jfloat xOffset, jfloat yOffset) { return call_method<SCAPIX_META_STRING("setWallpaperOffsets"), void>(windowToken, xOffset, yOffset); }
inline void WallpaperManager::setWallpaperOffsetSteps(jfloat xStep, jfloat yStep) { return call_method<SCAPIX_META_STRING("setWallpaperOffsetSteps"), void>(xStep, yStep); }
inline void WallpaperManager::sendWallpaperCommand(ref<android::os::IBinder> windowToken, ref<java::lang::String> action, jint x, jint y, jint z, ref<android::os::Bundle> extras) { return call_method<SCAPIX_META_STRING("sendWallpaperCommand"), void>(windowToken, action, x, y, z, extras); }
inline jboolean WallpaperManager::isWallpaperSupported() { return call_method<SCAPIX_META_STRING("isWallpaperSupported"), jboolean>(); }
inline jboolean WallpaperManager::isSetWallpaperAllowed() { return call_method<SCAPIX_META_STRING("isSetWallpaperAllowed"), jboolean>(); }
inline void WallpaperManager::clearWallpaperOffsets(ref<android::os::IBinder> windowToken) { return call_method<SCAPIX_META_STRING("clearWallpaperOffsets"), void>(windowToken); }
inline void WallpaperManager::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline void WallpaperManager::clear(jint which) { return call_method<SCAPIX_META_STRING("clear"), void>(which); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_WALLPAPERMANAGER_H
