// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_APP_JOB_JOBPARAMETERS_H
#define SCAPIX_ANDROID_APP_JOB_JOBPARAMETERS_H

namespace scapix::java_api {

namespace android::app::job { class JobWorkItem; }
namespace android::content { class ClipData; }
namespace android::net { class Network; }
namespace android::net { class Uri; }
namespace android::os { class Bundle; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::os { class PersistableBundle; }
namespace java::lang { class String; }

namespace android::app::job {

class JobParameters : public object_base<SCAPIX_META_STRING("android/app/job/JobParameters"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();

	jint getJobId();
	ref<android::os::PersistableBundle> getExtras();
	ref<android::os::Bundle> getTransientExtras();
	ref<android::content::ClipData> getClipData();
	jint getClipGrantFlags();
	jboolean isOverrideDeadlineExpired();
	ref<link::java::array<android::net::Uri>> getTriggeredContentUris();
	ref<link::java::array<java::lang::String>> getTriggeredContentAuthorities();
	ref<android::net::Network> getNetwork();
	ref<android::app::job::JobWorkItem> dequeueWork();
	void completeWork(ref<android::app::job::JobWorkItem> work);
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);

protected:

	JobParameters(handle_type h) : base_(h) {}

};

} // namespace android::app::job
} // namespace scapix::java_api

#include <scapix/java_api/android/app/job/JobWorkItem.h>
#include <scapix/java_api/android/content/ClipData.h>
#include <scapix/java_api/android/net/Network.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::app::job {

inline ref<android::os::Parcelable_Creator> JobParameters::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint JobParameters::getJobId() { return call_method<SCAPIX_META_STRING("getJobId"), jint>(); }
inline ref<android::os::PersistableBundle> JobParameters::getExtras() { return call_method<SCAPIX_META_STRING("getExtras"), ref<android::os::PersistableBundle>>(); }
inline ref<android::os::Bundle> JobParameters::getTransientExtras() { return call_method<SCAPIX_META_STRING("getTransientExtras"), ref<android::os::Bundle>>(); }
inline ref<android::content::ClipData> JobParameters::getClipData() { return call_method<SCAPIX_META_STRING("getClipData"), ref<android::content::ClipData>>(); }
inline jint JobParameters::getClipGrantFlags() { return call_method<SCAPIX_META_STRING("getClipGrantFlags"), jint>(); }
inline jboolean JobParameters::isOverrideDeadlineExpired() { return call_method<SCAPIX_META_STRING("isOverrideDeadlineExpired"), jboolean>(); }
inline ref<link::java::array<android::net::Uri>> JobParameters::getTriggeredContentUris() { return call_method<SCAPIX_META_STRING("getTriggeredContentUris"), ref<link::java::array<android::net::Uri>>>(); }
inline ref<link::java::array<java::lang::String>> JobParameters::getTriggeredContentAuthorities() { return call_method<SCAPIX_META_STRING("getTriggeredContentAuthorities"), ref<link::java::array<java::lang::String>>>(); }
inline ref<android::net::Network> JobParameters::getNetwork() { return call_method<SCAPIX_META_STRING("getNetwork"), ref<android::net::Network>>(); }
inline ref<android::app::job::JobWorkItem> JobParameters::dequeueWork() { return call_method<SCAPIX_META_STRING("dequeueWork"), ref<android::app::job::JobWorkItem>>(); }
inline void JobParameters::completeWork(ref<android::app::job::JobWorkItem> work) { return call_method<SCAPIX_META_STRING("completeWork"), void>(work); }
inline jint JobParameters::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void JobParameters::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }

} // namespace android::app::job
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_JOB_JOBPARAMETERS_H
