// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_APP_NOTIFICATIONCHANNEL_H
#define SCAPIX_ANDROID_APP_NOTIFICATIONCHANNEL_H

namespace scapix::java_api {

namespace android::media { class AudioAttributes; }
namespace android::net { class Uri; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::app {

class NotificationChannel : public object_base<SCAPIX_META_STRING("android/app/NotificationChannel"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static ref<java::lang::String> DEFAULT_CHANNEL_ID_();

	static ref<NotificationChannel> new_object(ref<java::lang::String> id, ref<java::lang::CharSequence> name, jint importance);
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	void setName(ref<java::lang::CharSequence> name);
	void setDescription(ref<java::lang::String> description);
	void setGroup(ref<java::lang::String> groupId);
	void setShowBadge(jboolean showBadge);
	void setSound(ref<android::net::Uri> sound, ref<android::media::AudioAttributes> audioAttributes);
	void enableLights(jboolean lights);
	void setLightColor(jint argb);
	void enableVibration(jboolean vibration);
	void setVibrationPattern(ref<link::java::array<jlong>> vibrationPattern);
	void setImportance(jint importance);
	void setBypassDnd(jboolean bypassDnd);
	void setLockscreenVisibility(jint lockscreenVisibility);
	ref<java::lang::String> getId();
	ref<java::lang::CharSequence> getName();
	ref<java::lang::String> getDescription();
	jint getImportance();
	jboolean canBypassDnd();
	ref<android::net::Uri> getSound();
	ref<android::media::AudioAttributes> getAudioAttributes();
	jboolean shouldShowLights();
	jint getLightColor();
	jboolean shouldVibrate();
	ref<link::java::array<jlong>> getVibrationPattern();
	jint getLockscreenVisibility();
	jboolean canShowBadge();
	ref<java::lang::String> getGroup();
	jint describeContents();
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	NotificationChannel(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/media/AudioAttributes.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::app {

inline ref<android::os::Parcelable_Creator> NotificationChannel::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<java::lang::String> NotificationChannel::DEFAULT_CHANNEL_ID_() { return get_static_field<SCAPIX_META_STRING("DEFAULT_CHANNEL_ID"), ref<java::lang::String>>(); }
inline ref<NotificationChannel> NotificationChannel::new_object(ref<java::lang::String> id, ref<java::lang::CharSequence> name, jint importance) { return base_::new_object(id, name, importance); }
inline void NotificationChannel::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline void NotificationChannel::setName(ref<java::lang::CharSequence> name) { return call_method<SCAPIX_META_STRING("setName"), void>(name); }
inline void NotificationChannel::setDescription(ref<java::lang::String> description) { return call_method<SCAPIX_META_STRING("setDescription"), void>(description); }
inline void NotificationChannel::setGroup(ref<java::lang::String> groupId) { return call_method<SCAPIX_META_STRING("setGroup"), void>(groupId); }
inline void NotificationChannel::setShowBadge(jboolean showBadge) { return call_method<SCAPIX_META_STRING("setShowBadge"), void>(showBadge); }
inline void NotificationChannel::setSound(ref<android::net::Uri> sound, ref<android::media::AudioAttributes> audioAttributes) { return call_method<SCAPIX_META_STRING("setSound"), void>(sound, audioAttributes); }
inline void NotificationChannel::enableLights(jboolean lights) { return call_method<SCAPIX_META_STRING("enableLights"), void>(lights); }
inline void NotificationChannel::setLightColor(jint argb) { return call_method<SCAPIX_META_STRING("setLightColor"), void>(argb); }
inline void NotificationChannel::enableVibration(jboolean vibration) { return call_method<SCAPIX_META_STRING("enableVibration"), void>(vibration); }
inline void NotificationChannel::setVibrationPattern(ref<link::java::array<jlong>> vibrationPattern) { return call_method<SCAPIX_META_STRING("setVibrationPattern"), void>(vibrationPattern); }
inline void NotificationChannel::setImportance(jint importance) { return call_method<SCAPIX_META_STRING("setImportance"), void>(importance); }
inline void NotificationChannel::setBypassDnd(jboolean bypassDnd) { return call_method<SCAPIX_META_STRING("setBypassDnd"), void>(bypassDnd); }
inline void NotificationChannel::setLockscreenVisibility(jint lockscreenVisibility) { return call_method<SCAPIX_META_STRING("setLockscreenVisibility"), void>(lockscreenVisibility); }
inline ref<java::lang::String> NotificationChannel::getId() { return call_method<SCAPIX_META_STRING("getId"), ref<java::lang::String>>(); }
inline ref<java::lang::CharSequence> NotificationChannel::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::CharSequence>>(); }
inline ref<java::lang::String> NotificationChannel::getDescription() { return call_method<SCAPIX_META_STRING("getDescription"), ref<java::lang::String>>(); }
inline jint NotificationChannel::getImportance() { return call_method<SCAPIX_META_STRING("getImportance"), jint>(); }
inline jboolean NotificationChannel::canBypassDnd() { return call_method<SCAPIX_META_STRING("canBypassDnd"), jboolean>(); }
inline ref<android::net::Uri> NotificationChannel::getSound() { return call_method<SCAPIX_META_STRING("getSound"), ref<android::net::Uri>>(); }
inline ref<android::media::AudioAttributes> NotificationChannel::getAudioAttributes() { return call_method<SCAPIX_META_STRING("getAudioAttributes"), ref<android::media::AudioAttributes>>(); }
inline jboolean NotificationChannel::shouldShowLights() { return call_method<SCAPIX_META_STRING("shouldShowLights"), jboolean>(); }
inline jint NotificationChannel::getLightColor() { return call_method<SCAPIX_META_STRING("getLightColor"), jint>(); }
inline jboolean NotificationChannel::shouldVibrate() { return call_method<SCAPIX_META_STRING("shouldVibrate"), jboolean>(); }
inline ref<link::java::array<jlong>> NotificationChannel::getVibrationPattern() { return call_method<SCAPIX_META_STRING("getVibrationPattern"), ref<link::java::array<jlong>>>(); }
inline jint NotificationChannel::getLockscreenVisibility() { return call_method<SCAPIX_META_STRING("getLockscreenVisibility"), jint>(); }
inline jboolean NotificationChannel::canShowBadge() { return call_method<SCAPIX_META_STRING("canShowBadge"), jboolean>(); }
inline ref<java::lang::String> NotificationChannel::getGroup() { return call_method<SCAPIX_META_STRING("getGroup"), ref<java::lang::String>>(); }
inline jint NotificationChannel::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline jboolean NotificationChannel::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint NotificationChannel::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> NotificationChannel::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_NOTIFICATIONCHANNEL_H
