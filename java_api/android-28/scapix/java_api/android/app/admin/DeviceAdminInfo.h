// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_APP_ADMIN_DEVICEADMININFO_H
#define SCAPIX_ANDROID_APP_ADMIN_DEVICEADMININFO_H

namespace scapix::java_api {

namespace android::content { class ComponentName; }
namespace android::content { class Context; }
namespace android::content::pm { class ActivityInfo; }
namespace android::content::pm { class PackageManager; }
namespace android::content::pm { class ResolveInfo; }
namespace android::graphics::drawable { class Drawable; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::util { class Printer; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::app::admin {

class DeviceAdminInfo : public object_base<SCAPIX_META_STRING("android/app/admin/DeviceAdminInfo"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint USES_ENCRYPTED_STORAGE_();
	static jint USES_POLICY_DISABLE_CAMERA_();
	static jint USES_POLICY_DISABLE_KEYGUARD_FEATURES_();
	static jint USES_POLICY_EXPIRE_PASSWORD_();
	static jint USES_POLICY_FORCE_LOCK_();
	static jint USES_POLICY_LIMIT_PASSWORD_();
	static jint USES_POLICY_RESET_PASSWORD_();
	static jint USES_POLICY_WATCH_LOGIN_();
	static jint USES_POLICY_WIPE_DATA_();

	static ref<DeviceAdminInfo> new_object(ref<android::content::Context> context, ref<android::content::pm::ResolveInfo> resolveInfo);
	ref<java::lang::String> getPackageName();
	ref<java::lang::String> getReceiverName();
	ref<android::content::pm::ActivityInfo> getActivityInfo();
	ref<android::content::ComponentName> getComponent();
	ref<java::lang::CharSequence> loadLabel(ref<android::content::pm::PackageManager> pm);
	ref<java::lang::CharSequence> loadDescription(ref<android::content::pm::PackageManager> pm);
	ref<android::graphics::drawable::Drawable> loadIcon(ref<android::content::pm::PackageManager> pm);
	jboolean isVisible();
	jboolean usesPolicy(jint policyIdent);
	ref<java::lang::String> getTagForPolicy(jint policyIdent);
	jboolean supportsTransferOwnership();
	void dump(ref<android::util::Printer> pw, ref<java::lang::String> prefix);
	ref<java::lang::String> toString();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	jint describeContents();

protected:

	DeviceAdminInfo(handle_type h) : base_(h) {}

};

} // namespace android::app::admin
} // namespace scapix::java_api

#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/pm/ActivityInfo.h>
#include <scapix/java_api/android/content/pm/PackageManager.h>
#include <scapix/java_api/android/content/pm/ResolveInfo.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/util/Printer.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::app::admin {

inline ref<android::os::Parcelable_Creator> DeviceAdminInfo::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint DeviceAdminInfo::USES_ENCRYPTED_STORAGE_() { return get_static_field<SCAPIX_META_STRING("USES_ENCRYPTED_STORAGE"), jint>(); }
inline jint DeviceAdminInfo::USES_POLICY_DISABLE_CAMERA_() { return get_static_field<SCAPIX_META_STRING("USES_POLICY_DISABLE_CAMERA"), jint>(); }
inline jint DeviceAdminInfo::USES_POLICY_DISABLE_KEYGUARD_FEATURES_() { return get_static_field<SCAPIX_META_STRING("USES_POLICY_DISABLE_KEYGUARD_FEATURES"), jint>(); }
inline jint DeviceAdminInfo::USES_POLICY_EXPIRE_PASSWORD_() { return get_static_field<SCAPIX_META_STRING("USES_POLICY_EXPIRE_PASSWORD"), jint>(); }
inline jint DeviceAdminInfo::USES_POLICY_FORCE_LOCK_() { return get_static_field<SCAPIX_META_STRING("USES_POLICY_FORCE_LOCK"), jint>(); }
inline jint DeviceAdminInfo::USES_POLICY_LIMIT_PASSWORD_() { return get_static_field<SCAPIX_META_STRING("USES_POLICY_LIMIT_PASSWORD"), jint>(); }
inline jint DeviceAdminInfo::USES_POLICY_RESET_PASSWORD_() { return get_static_field<SCAPIX_META_STRING("USES_POLICY_RESET_PASSWORD"), jint>(); }
inline jint DeviceAdminInfo::USES_POLICY_WATCH_LOGIN_() { return get_static_field<SCAPIX_META_STRING("USES_POLICY_WATCH_LOGIN"), jint>(); }
inline jint DeviceAdminInfo::USES_POLICY_WIPE_DATA_() { return get_static_field<SCAPIX_META_STRING("USES_POLICY_WIPE_DATA"), jint>(); }
inline ref<DeviceAdminInfo> DeviceAdminInfo::new_object(ref<android::content::Context> context, ref<android::content::pm::ResolveInfo> resolveInfo) { return base_::new_object(context, resolveInfo); }
inline ref<java::lang::String> DeviceAdminInfo::getPackageName() { return call_method<SCAPIX_META_STRING("getPackageName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DeviceAdminInfo::getReceiverName() { return call_method<SCAPIX_META_STRING("getReceiverName"), ref<java::lang::String>>(); }
inline ref<android::content::pm::ActivityInfo> DeviceAdminInfo::getActivityInfo() { return call_method<SCAPIX_META_STRING("getActivityInfo"), ref<android::content::pm::ActivityInfo>>(); }
inline ref<android::content::ComponentName> DeviceAdminInfo::getComponent() { return call_method<SCAPIX_META_STRING("getComponent"), ref<android::content::ComponentName>>(); }
inline ref<java::lang::CharSequence> DeviceAdminInfo::loadLabel(ref<android::content::pm::PackageManager> pm) { return call_method<SCAPIX_META_STRING("loadLabel"), ref<java::lang::CharSequence>>(pm); }
inline ref<java::lang::CharSequence> DeviceAdminInfo::loadDescription(ref<android::content::pm::PackageManager> pm) { return call_method<SCAPIX_META_STRING("loadDescription"), ref<java::lang::CharSequence>>(pm); }
inline ref<android::graphics::drawable::Drawable> DeviceAdminInfo::loadIcon(ref<android::content::pm::PackageManager> pm) { return call_method<SCAPIX_META_STRING("loadIcon"), ref<android::graphics::drawable::Drawable>>(pm); }
inline jboolean DeviceAdminInfo::isVisible() { return call_method<SCAPIX_META_STRING("isVisible"), jboolean>(); }
inline jboolean DeviceAdminInfo::usesPolicy(jint policyIdent) { return call_method<SCAPIX_META_STRING("usesPolicy"), jboolean>(policyIdent); }
inline ref<java::lang::String> DeviceAdminInfo::getTagForPolicy(jint policyIdent) { return call_method<SCAPIX_META_STRING("getTagForPolicy"), ref<java::lang::String>>(policyIdent); }
inline jboolean DeviceAdminInfo::supportsTransferOwnership() { return call_method<SCAPIX_META_STRING("supportsTransferOwnership"), jboolean>(); }
inline void DeviceAdminInfo::dump(ref<android::util::Printer> pw, ref<java::lang::String> prefix) { return call_method<SCAPIX_META_STRING("dump"), void>(pw, prefix); }
inline ref<java::lang::String> DeviceAdminInfo::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline void DeviceAdminInfo::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline jint DeviceAdminInfo::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }

} // namespace android::app::admin
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_ADMIN_DEVICEADMININFO_H
