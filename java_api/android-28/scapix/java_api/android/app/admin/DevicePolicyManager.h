// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_APP_ADMIN_DEVICEPOLICYMANAGER_H
#define SCAPIX_ANDROID_APP_ADMIN_DEVICEPOLICYMANAGER_H

namespace scapix::java_api {

namespace android::app::admin { class DevicePolicyManager_OnClearApplicationUserDataListener; }
namespace android::app::admin { class SystemUpdateInfo; }
namespace android::app::admin { class SystemUpdatePolicy; }
namespace android::content { class ComponentName; }
namespace android::content { class Intent; }
namespace android::content { class IntentFilter; }
namespace android::content { class ServiceConnection; }
namespace android::graphics { class Bitmap; }
namespace android::net { class ProxyInfo; }
namespace android::os { class Bundle; }
namespace android::os { class PersistableBundle; }
namespace android::os { class UserHandle; }
namespace android::security { class AttestedKeyPair; }
namespace android::security::keystore { class KeyGenParameterSpec; }
namespace android::telephony::data { class ApnSetting; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::security { class PrivateKey; }
namespace java::security::cert { class Certificate; }
namespace java::util { class List; }
namespace java::util { class Set; }
namespace java::util::concurrent { class Executor; }

namespace android::app::admin {

class DevicePolicyManager : public object_base<SCAPIX_META_STRING("android/app/admin/DevicePolicyManager"),
	java::lang::Object>
{
public:

	using OnClearApplicationUserDataListener = DevicePolicyManager_OnClearApplicationUserDataListener;

	static ref<java::lang::String> ACTION_ADD_DEVICE_ADMIN_();
	static ref<java::lang::String> ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED_();
	static ref<java::lang::String> ACTION_DEVICE_ADMIN_SERVICE_();
	static ref<java::lang::String> ACTION_DEVICE_OWNER_CHANGED_();
	static ref<java::lang::String> ACTION_MANAGED_PROFILE_PROVISIONED_();
	static ref<java::lang::String> ACTION_PROFILE_OWNER_CHANGED_();
	static ref<java::lang::String> ACTION_PROVISIONING_SUCCESSFUL_();
	static ref<java::lang::String> ACTION_PROVISION_MANAGED_DEVICE_();
	static ref<java::lang::String> ACTION_PROVISION_MANAGED_PROFILE_();
	static ref<java::lang::String> ACTION_SET_NEW_PARENT_PROFILE_PASSWORD_();
	static ref<java::lang::String> ACTION_SET_NEW_PASSWORD_();
	static ref<java::lang::String> ACTION_START_ENCRYPTION_();
	static ref<java::lang::String> ACTION_SYSTEM_UPDATE_POLICY_CHANGED_();
	static ref<java::lang::String> DELEGATION_APP_RESTRICTIONS_();
	static ref<java::lang::String> DELEGATION_BLOCK_UNINSTALL_();
	static ref<java::lang::String> DELEGATION_CERT_INSTALL_();
	static ref<java::lang::String> DELEGATION_ENABLE_SYSTEM_APP_();
	static ref<java::lang::String> DELEGATION_INSTALL_EXISTING_PACKAGE_();
	static ref<java::lang::String> DELEGATION_KEEP_UNINSTALLED_PACKAGES_();
	static ref<java::lang::String> DELEGATION_PACKAGE_ACCESS_();
	static ref<java::lang::String> DELEGATION_PERMISSION_GRANT_();
	static jint ENCRYPTION_STATUS_ACTIVATING_();
	static jint ENCRYPTION_STATUS_ACTIVE_();
	static jint ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY_();
	static jint ENCRYPTION_STATUS_ACTIVE_PER_USER_();
	static jint ENCRYPTION_STATUS_INACTIVE_();
	static jint ENCRYPTION_STATUS_UNSUPPORTED_();
	static ref<java::lang::String> EXTRA_ADD_EXPLANATION_();
	static ref<java::lang::String> EXTRA_DELEGATION_SCOPES_();
	static ref<java::lang::String> EXTRA_DEVICE_ADMIN_();
	static ref<java::lang::String> EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE_();
	static ref<java::lang::String> EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE_();
	static ref<java::lang::String> EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME_();
	static ref<java::lang::String> EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE_();
	static ref<java::lang::String> EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM_();
	static ref<java::lang::String> EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER_();
	static ref<java::lang::String> EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION_();
	static ref<java::lang::String> EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME_();
	static ref<java::lang::String> EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM_();
	static ref<java::lang::String> EXTRA_PROVISIONING_DISCLAIMERS_();
	static ref<java::lang::String> EXTRA_PROVISIONING_DISCLAIMER_CONTENT_();
	static ref<java::lang::String> EXTRA_PROVISIONING_DISCLAIMER_HEADER_();
	static ref<java::lang::String> EXTRA_PROVISIONING_EMAIL_ADDRESS_();
	static ref<java::lang::String> EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION_();
	static ref<java::lang::String> EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED_();
	static ref<java::lang::String> EXTRA_PROVISIONING_LOCALE_();
	static ref<java::lang::String> EXTRA_PROVISIONING_LOCAL_TIME_();
	static ref<java::lang::String> EXTRA_PROVISIONING_LOGO_URI_();
	static ref<java::lang::String> EXTRA_PROVISIONING_MAIN_COLOR_();
	static ref<java::lang::String> EXTRA_PROVISIONING_SKIP_ENCRYPTION_();
	static ref<java::lang::String> EXTRA_PROVISIONING_SKIP_USER_CONSENT_();
	static ref<java::lang::String> EXTRA_PROVISIONING_TIME_ZONE_();
	static ref<java::lang::String> EXTRA_PROVISIONING_WIFI_HIDDEN_();
	static ref<java::lang::String> EXTRA_PROVISIONING_WIFI_PAC_URL_();
	static ref<java::lang::String> EXTRA_PROVISIONING_WIFI_PASSWORD_();
	static ref<java::lang::String> EXTRA_PROVISIONING_WIFI_PROXY_BYPASS_();
	static ref<java::lang::String> EXTRA_PROVISIONING_WIFI_PROXY_HOST_();
	static ref<java::lang::String> EXTRA_PROVISIONING_WIFI_PROXY_PORT_();
	static ref<java::lang::String> EXTRA_PROVISIONING_WIFI_SECURITY_TYPE_();
	static ref<java::lang::String> EXTRA_PROVISIONING_WIFI_SSID_();
	static jint FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY_();
	static jint FLAG_MANAGED_CAN_ACCESS_PARENT_();
	static jint FLAG_PARENT_CAN_ACCESS_MANAGED_();
	static jint ID_TYPE_BASE_INFO_();
	static jint ID_TYPE_IMEI_();
	static jint ID_TYPE_MEID_();
	static jint ID_TYPE_SERIAL_();
	static jint INSTALLKEY_REQUEST_CREDENTIALS_ACCESS_();
	static jint INSTALLKEY_SET_USER_SELECTABLE_();
	static jint KEYGUARD_DISABLE_BIOMETRICS_();
	static jint KEYGUARD_DISABLE_FACE_();
	static jint KEYGUARD_DISABLE_FEATURES_ALL_();
	static jint KEYGUARD_DISABLE_FEATURES_NONE_();
	static jint KEYGUARD_DISABLE_FINGERPRINT_();
	static jint KEYGUARD_DISABLE_IRIS_();
	static jint KEYGUARD_DISABLE_REMOTE_INPUT_();
	static jint KEYGUARD_DISABLE_SECURE_CAMERA_();
	static jint KEYGUARD_DISABLE_SECURE_NOTIFICATIONS_();
	static jint KEYGUARD_DISABLE_TRUST_AGENTS_();
	static jint KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS_();
	static jint KEYGUARD_DISABLE_WIDGETS_ALL_();
	static jint LEAVE_ALL_SYSTEM_APPS_ENABLED_();
	static jint LOCK_TASK_FEATURE_GLOBAL_ACTIONS_();
	static jint LOCK_TASK_FEATURE_HOME_();
	static jint LOCK_TASK_FEATURE_KEYGUARD_();
	static jint LOCK_TASK_FEATURE_NONE_();
	static jint LOCK_TASK_FEATURE_NOTIFICATIONS_();
	static jint LOCK_TASK_FEATURE_OVERVIEW_();
	static jint LOCK_TASK_FEATURE_SYSTEM_INFO_();
	static jint MAKE_USER_EPHEMERAL_();
	static ref<java::lang::String> MIME_TYPE_PROVISIONING_NFC_();
	static jint PASSWORD_QUALITY_ALPHABETIC_();
	static jint PASSWORD_QUALITY_ALPHANUMERIC_();
	static jint PASSWORD_QUALITY_BIOMETRIC_WEAK_();
	static jint PASSWORD_QUALITY_COMPLEX_();
	static jint PASSWORD_QUALITY_NUMERIC_();
	static jint PASSWORD_QUALITY_NUMERIC_COMPLEX_();
	static jint PASSWORD_QUALITY_SOMETHING_();
	static jint PASSWORD_QUALITY_UNSPECIFIED_();
	static jint PERMISSION_GRANT_STATE_DEFAULT_();
	static jint PERMISSION_GRANT_STATE_DENIED_();
	static jint PERMISSION_GRANT_STATE_GRANTED_();
	static jint PERMISSION_POLICY_AUTO_DENY_();
	static jint PERMISSION_POLICY_AUTO_GRANT_();
	static jint PERMISSION_POLICY_PROMPT_();
	static ref<java::lang::String> POLICY_DISABLE_CAMERA_();
	static ref<java::lang::String> POLICY_DISABLE_SCREEN_CAPTURE_();
	static jint RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT_();
	static jint RESET_PASSWORD_REQUIRE_ENTRY_();
	static jint SKIP_SETUP_WIZARD_();
	static jint WIPE_EUICC_();
	static jint WIPE_EXTERNAL_STORAGE_();
	static jint WIPE_RESET_PROTECTION_DATA_();

	jboolean isAdminActive(ref<android::content::ComponentName> admin);
	ref<java::util::List> getActiveAdmins();
	void removeActiveAdmin(ref<android::content::ComponentName> admin);
	jboolean hasGrantedPolicy(ref<android::content::ComponentName> admin, jint usesPolicy);
	void setPasswordQuality(ref<android::content::ComponentName> admin, jint quality);
	jint getPasswordQuality(ref<android::content::ComponentName> admin);
	void setPasswordMinimumLength(ref<android::content::ComponentName> admin, jint length);
	jint getPasswordMinimumLength(ref<android::content::ComponentName> admin);
	void setPasswordMinimumUpperCase(ref<android::content::ComponentName> admin, jint length);
	jint getPasswordMinimumUpperCase(ref<android::content::ComponentName> admin);
	void setPasswordMinimumLowerCase(ref<android::content::ComponentName> admin, jint length);
	jint getPasswordMinimumLowerCase(ref<android::content::ComponentName> admin);
	void setPasswordMinimumLetters(ref<android::content::ComponentName> admin, jint length);
	jint getPasswordMinimumLetters(ref<android::content::ComponentName> admin);
	void setPasswordMinimumNumeric(ref<android::content::ComponentName> admin, jint length);
	jint getPasswordMinimumNumeric(ref<android::content::ComponentName> admin);
	void setPasswordMinimumSymbols(ref<android::content::ComponentName> admin, jint length);
	jint getPasswordMinimumSymbols(ref<android::content::ComponentName> admin);
	void setPasswordMinimumNonLetter(ref<android::content::ComponentName> admin, jint length);
	jint getPasswordMinimumNonLetter(ref<android::content::ComponentName> admin);
	void setPasswordHistoryLength(ref<android::content::ComponentName> admin, jint length);
	void setPasswordExpirationTimeout(ref<android::content::ComponentName> admin, jlong timeout);
	jlong getPasswordExpirationTimeout(ref<android::content::ComponentName> admin);
	jlong getPasswordExpiration(ref<android::content::ComponentName> admin);
	jint getPasswordHistoryLength(ref<android::content::ComponentName> admin);
	jint getPasswordMaximumLength(jint quality);
	jboolean isActivePasswordSufficient();
	jboolean isUsingUnifiedPassword(ref<android::content::ComponentName> admin);
	jint getCurrentFailedPasswordAttempts();
	void setMaximumFailedPasswordsForWipe(ref<android::content::ComponentName> admin, jint num);
	jint getMaximumFailedPasswordsForWipe(ref<android::content::ComponentName> admin);
	jboolean resetPassword(ref<java::lang::String> password, jint flags);
	jboolean setResetPasswordToken(ref<android::content::ComponentName> admin, ref<link::java::array<jbyte>> token);
	jboolean clearResetPasswordToken(ref<android::content::ComponentName> admin);
	jboolean isResetPasswordTokenActive(ref<android::content::ComponentName> admin);
	jboolean resetPasswordWithToken(ref<android::content::ComponentName> admin, ref<java::lang::String> password, ref<link::java::array<jbyte>> token, jint flags);
	void setMaximumTimeToLock(ref<android::content::ComponentName> admin, jlong timeMs);
	jlong getMaximumTimeToLock(ref<android::content::ComponentName> admin);
	void setRequiredStrongAuthTimeout(ref<android::content::ComponentName> admin, jlong timeoutMs);
	jlong getRequiredStrongAuthTimeout(ref<android::content::ComponentName> admin);
	void lockNow();
	void lockNow(jint flags);
	void wipeData(jint flags);
	void wipeData(jint flags, ref<java::lang::CharSequence> reason);
	void setRecommendedGlobalProxy(ref<android::content::ComponentName> admin, ref<android::net::ProxyInfo> proxyInfo);
	jint setStorageEncryption(ref<android::content::ComponentName> admin, jboolean encrypt);
	jboolean getStorageEncryption(ref<android::content::ComponentName> admin);
	jint getStorageEncryptionStatus();
	jboolean installCaCert(ref<android::content::ComponentName> admin, ref<link::java::array<jbyte>> certBuffer);
	void uninstallCaCert(ref<android::content::ComponentName> admin, ref<link::java::array<jbyte>> certBuffer);
	ref<java::util::List> getInstalledCaCerts(ref<android::content::ComponentName> admin);
	void uninstallAllUserCaCerts(ref<android::content::ComponentName> admin);
	jboolean hasCaCertInstalled(ref<android::content::ComponentName> admin, ref<link::java::array<jbyte>> certBuffer);
	jboolean installKeyPair(ref<android::content::ComponentName> admin, ref<java::security::PrivateKey> privKey, ref<java::security::cert::Certificate> cert, ref<java::lang::String> alias);
	jboolean installKeyPair(ref<android::content::ComponentName> admin, ref<java::security::PrivateKey> privKey, ref<link::java::array<java::security::cert::Certificate>> certs, ref<java::lang::String> alias, jboolean requestAccess);
	jboolean installKeyPair(ref<android::content::ComponentName> admin, ref<java::security::PrivateKey> privKey, ref<link::java::array<java::security::cert::Certificate>> certs, ref<java::lang::String> alias, jint flags);
	jboolean removeKeyPair(ref<android::content::ComponentName> admin, ref<java::lang::String> alias);
	ref<android::security::AttestedKeyPair> generateKeyPair(ref<android::content::ComponentName> admin, ref<java::lang::String> algorithm, ref<android::security::keystore::KeyGenParameterSpec> keySpec, jint idAttestationFlags);
	jboolean isDeviceIdAttestationSupported();
	jboolean setKeyPairCertificate(ref<android::content::ComponentName> admin, ref<java::lang::String> alias, ref<java::util::List> certs, jboolean isUserSelectable);
	void setCertInstallerPackage(ref<android::content::ComponentName> admin, ref<java::lang::String> installerPackage);
	ref<java::lang::String> getCertInstallerPackage(ref<android::content::ComponentName> admin);
	void setDelegatedScopes(ref<android::content::ComponentName> admin, ref<java::lang::String> delegatePackage, ref<java::util::List> scopes);
	ref<java::util::List> getDelegatedScopes(ref<android::content::ComponentName> admin, ref<java::lang::String> delegatedPackage);
	ref<java::util::List> getDelegatePackages(ref<android::content::ComponentName> admin, ref<java::lang::String> delegationScope);
	void setAlwaysOnVpnPackage(ref<android::content::ComponentName> admin, ref<java::lang::String> vpnPackage, jboolean lockdownEnabled);
	ref<java::lang::String> getAlwaysOnVpnPackage(ref<android::content::ComponentName> admin);
	void setCameraDisabled(ref<android::content::ComponentName> admin, jboolean disabled);
	jboolean getCameraDisabled(ref<android::content::ComponentName> admin);
	jboolean requestBugreport(ref<android::content::ComponentName> admin);
	void setScreenCaptureDisabled(ref<android::content::ComponentName> admin, jboolean disabled);
	jboolean getScreenCaptureDisabled(ref<android::content::ComponentName> admin);
	void setAutoTimeRequired(ref<android::content::ComponentName> admin, jboolean required);
	jboolean getAutoTimeRequired();
	void setKeyguardDisabledFeatures(ref<android::content::ComponentName> admin, jint which);
	jint getKeyguardDisabledFeatures(ref<android::content::ComponentName> admin);
	jboolean isDeviceOwnerApp(ref<java::lang::String> packageName);
	void clearDeviceOwnerApp(ref<java::lang::String> packageName);
	void clearProfileOwner(ref<android::content::ComponentName> admin);
	void setDeviceOwnerLockScreenInfo(ref<android::content::ComponentName> admin, ref<java::lang::CharSequence> info);
	ref<java::lang::CharSequence> getDeviceOwnerLockScreenInfo();
	ref<link::java::array<java::lang::String>> setPackagesSuspended(ref<android::content::ComponentName> admin, ref<link::java::array<java::lang::String>> packageNames, jboolean suspended);
	jboolean isPackageSuspended(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName);
	void setProfileEnabled(ref<android::content::ComponentName> admin);
	void setProfileName(ref<android::content::ComponentName> admin, ref<java::lang::String> profileName);
	jboolean isProfileOwnerApp(ref<java::lang::String> packageName);
	void addPersistentPreferredActivity(ref<android::content::ComponentName> admin, ref<android::content::IntentFilter> filter, ref<android::content::ComponentName> activity);
	void clearPackagePersistentPreferredActivities(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName);
	void setApplicationRestrictionsManagingPackage(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName);
	ref<java::lang::String> getApplicationRestrictionsManagingPackage(ref<android::content::ComponentName> admin);
	jboolean isCallerApplicationRestrictionsManagingPackage();
	void setApplicationRestrictions(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName, ref<android::os::Bundle> settings);
	void setTrustAgentConfiguration(ref<android::content::ComponentName> admin, ref<android::content::ComponentName> target, ref<android::os::PersistableBundle> configuration);
	ref<java::util::List> getTrustAgentConfiguration(ref<android::content::ComponentName> admin, ref<android::content::ComponentName> agent);
	void setCrossProfileCallerIdDisabled(ref<android::content::ComponentName> admin, jboolean disabled);
	jboolean getCrossProfileCallerIdDisabled(ref<android::content::ComponentName> admin);
	void setCrossProfileContactsSearchDisabled(ref<android::content::ComponentName> admin, jboolean disabled);
	jboolean getCrossProfileContactsSearchDisabled(ref<android::content::ComponentName> admin);
	void setBluetoothContactSharingDisabled(ref<android::content::ComponentName> admin, jboolean disabled);
	jboolean getBluetoothContactSharingDisabled(ref<android::content::ComponentName> admin);
	void addCrossProfileIntentFilter(ref<android::content::ComponentName> admin, ref<android::content::IntentFilter> filter, jint flags);
	void clearCrossProfileIntentFilters(ref<android::content::ComponentName> admin);
	jboolean setPermittedAccessibilityServices(ref<android::content::ComponentName> admin, ref<java::util::List> packageNames);
	ref<java::util::List> getPermittedAccessibilityServices(ref<android::content::ComponentName> admin);
	jboolean setPermittedInputMethods(ref<android::content::ComponentName> admin, ref<java::util::List> packageNames);
	ref<java::util::List> getPermittedInputMethods(ref<android::content::ComponentName> admin);
	jboolean setPermittedCrossProfileNotificationListeners(ref<android::content::ComponentName> admin, ref<java::util::List> packageList);
	ref<java::util::List> getPermittedCrossProfileNotificationListeners(ref<android::content::ComponentName> admin);
	ref<java::util::List> getKeepUninstalledPackages(ref<android::content::ComponentName> admin);
	void setKeepUninstalledPackages(ref<android::content::ComponentName> admin, ref<java::util::List> packageNames);
	ref<android::os::UserHandle> createAndManageUser(ref<android::content::ComponentName> admin, ref<java::lang::String> name, ref<android::content::ComponentName> profileOwner, ref<android::os::PersistableBundle> adminExtras, jint flags);
	jboolean removeUser(ref<android::content::ComponentName> admin, ref<android::os::UserHandle> userHandle);
	jboolean switchUser(ref<android::content::ComponentName> admin, ref<android::os::UserHandle> userHandle);
	jint startUserInBackground(ref<android::content::ComponentName> admin, ref<android::os::UserHandle> userHandle);
	jint stopUser(ref<android::content::ComponentName> admin, ref<android::os::UserHandle> userHandle);
	jint logoutUser(ref<android::content::ComponentName> admin);
	ref<java::util::List> getSecondaryUsers(ref<android::content::ComponentName> admin);
	jboolean isEphemeralUser(ref<android::content::ComponentName> admin);
	ref<android::os::Bundle> getApplicationRestrictions(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName);
	void addUserRestriction(ref<android::content::ComponentName> admin, ref<java::lang::String> key);
	void clearUserRestriction(ref<android::content::ComponentName> admin, ref<java::lang::String> key);
	ref<android::os::Bundle> getUserRestrictions(ref<android::content::ComponentName> admin);
	ref<android::content::Intent> createAdminSupportIntent(ref<java::lang::String> restriction);
	jboolean setApplicationHidden(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName, jboolean hidden);
	jboolean isApplicationHidden(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName);
	void enableSystemApp(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName);
	jint enableSystemApp(ref<android::content::ComponentName> admin, ref<android::content::Intent> intent);
	jboolean installExistingPackage(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName);
	void setAccountManagementDisabled(ref<android::content::ComponentName> admin, ref<java::lang::String> accountType, jboolean disabled);
	ref<link::java::array<java::lang::String>> getAccountTypesWithManagementDisabled();
	void setLockTaskPackages(ref<android::content::ComponentName> admin, ref<link::java::array<java::lang::String>> packages);
	ref<link::java::array<java::lang::String>> getLockTaskPackages(ref<android::content::ComponentName> admin);
	jboolean isLockTaskPermitted(ref<java::lang::String> pkg);
	void setLockTaskFeatures(ref<android::content::ComponentName> admin, jint flags);
	jint getLockTaskFeatures(ref<android::content::ComponentName> admin);
	void setGlobalSetting(ref<android::content::ComponentName> admin, ref<java::lang::String> setting, ref<java::lang::String> value);
	void setSystemSetting(ref<android::content::ComponentName> admin, ref<java::lang::String> setting, ref<java::lang::String> value);
	jboolean setTime(ref<android::content::ComponentName> admin, jlong millis);
	jboolean setTimeZone(ref<android::content::ComponentName> admin, ref<java::lang::String> timeZone);
	void setSecureSetting(ref<android::content::ComponentName> admin, ref<java::lang::String> setting, ref<java::lang::String> value);
	void setRestrictionsProvider(ref<android::content::ComponentName> admin, ref<android::content::ComponentName> provider);
	void setMasterVolumeMuted(ref<android::content::ComponentName> admin, jboolean on);
	jboolean isMasterVolumeMuted(ref<android::content::ComponentName> admin);
	void setUninstallBlocked(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName, jboolean uninstallBlocked);
	jboolean isUninstallBlocked(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName);
	jboolean addCrossProfileWidgetProvider(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName);
	jboolean removeCrossProfileWidgetProvider(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName);
	ref<java::util::List> getCrossProfileWidgetProviders(ref<android::content::ComponentName> admin);
	void setUserIcon(ref<android::content::ComponentName> admin, ref<android::graphics::Bitmap> icon);
	void setSystemUpdatePolicy(ref<android::content::ComponentName> admin, ref<android::app::admin::SystemUpdatePolicy> policy);
	ref<android::app::admin::SystemUpdatePolicy> getSystemUpdatePolicy();
	jboolean setKeyguardDisabled(ref<android::content::ComponentName> admin, jboolean disabled);
	jboolean setStatusBarDisabled(ref<android::content::ComponentName> admin, jboolean disabled);
	ref<android::app::admin::SystemUpdateInfo> getPendingSystemUpdate(ref<android::content::ComponentName> admin);
	void setPermissionPolicy(ref<android::content::ComponentName> admin, jint policy);
	jint getPermissionPolicy(ref<android::content::ComponentName> admin);
	jboolean setPermissionGrantState(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName, ref<java::lang::String> permission, jint grantState);
	jint getPermissionGrantState(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName, ref<java::lang::String> permission);
	jboolean isProvisioningAllowed(ref<java::lang::String> action);
	jboolean isManagedProfile(ref<android::content::ComponentName> admin);
	ref<java::lang::String> getWifiMacAddress(ref<android::content::ComponentName> admin);
	void reboot(ref<android::content::ComponentName> admin);
	void setShortSupportMessage(ref<android::content::ComponentName> admin, ref<java::lang::CharSequence> message);
	ref<java::lang::CharSequence> getShortSupportMessage(ref<android::content::ComponentName> admin);
	void setLongSupportMessage(ref<android::content::ComponentName> admin, ref<java::lang::CharSequence> message);
	ref<java::lang::CharSequence> getLongSupportMessage(ref<android::content::ComponentName> admin);
	ref<android::app::admin::DevicePolicyManager> getParentProfileInstance(ref<android::content::ComponentName> admin);
	void setSecurityLoggingEnabled(ref<android::content::ComponentName> admin, jboolean enabled);
	jboolean isSecurityLoggingEnabled(ref<android::content::ComponentName> admin);
	ref<java::util::List> retrieveSecurityLogs(ref<android::content::ComponentName> admin);
	ref<java::util::List> setMeteredDataDisabledPackages(ref<android::content::ComponentName> admin, ref<java::util::List> packageNames);
	ref<java::util::List> getMeteredDataDisabledPackages(ref<android::content::ComponentName> admin);
	ref<java::util::List> retrievePreRebootSecurityLogs(ref<android::content::ComponentName> admin);
	void setOrganizationColor(ref<android::content::ComponentName> admin, jint color);
	jint getOrganizationColor(ref<android::content::ComponentName> admin);
	void setOrganizationName(ref<android::content::ComponentName> admin, ref<java::lang::CharSequence> title);
	ref<java::lang::CharSequence> getOrganizationName(ref<android::content::ComponentName> admin);
	void setAffiliationIds(ref<android::content::ComponentName> admin, ref<java::util::Set> ids);
	ref<java::util::Set> getAffiliationIds(ref<android::content::ComponentName> admin);
	jboolean isAffiliatedUser();
	void setBackupServiceEnabled(ref<android::content::ComponentName> admin, jboolean enabled);
	jboolean isBackupServiceEnabled(ref<android::content::ComponentName> admin);
	void setNetworkLoggingEnabled(ref<android::content::ComponentName> admin, jboolean enabled);
	jboolean isNetworkLoggingEnabled(ref<android::content::ComponentName> admin);
	ref<java::util::List> retrieveNetworkLogs(ref<android::content::ComponentName> admin, jlong batchToken);
	jboolean bindDeviceAdminServiceAsUser(ref<android::content::ComponentName> admin, ref<android::content::Intent> serviceIntent, ref<android::content::ServiceConnection> conn, jint flags, ref<android::os::UserHandle> targetUser);
	ref<java::util::List> getBindDeviceAdminTargetUsers(ref<android::content::ComponentName> admin);
	void clearApplicationUserData(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName, ref<java::util::concurrent::Executor> executor, ref<android::app::admin::DevicePolicyManager_OnClearApplicationUserDataListener> listener);
	void setLogoutEnabled(ref<android::content::ComponentName> admin, jboolean enabled);
	jboolean isLogoutEnabled();
	void transferOwnership(ref<android::content::ComponentName> admin, ref<android::content::ComponentName> target, ref<android::os::PersistableBundle> bundle);
	void setStartUserSessionMessage(ref<android::content::ComponentName> admin, ref<java::lang::CharSequence> startUserSessionMessage);
	void setEndUserSessionMessage(ref<android::content::ComponentName> admin, ref<java::lang::CharSequence> endUserSessionMessage);
	ref<java::lang::CharSequence> getStartUserSessionMessage(ref<android::content::ComponentName> admin);
	ref<java::lang::CharSequence> getEndUserSessionMessage(ref<android::content::ComponentName> admin);
	jint addOverrideApn(ref<android::content::ComponentName> admin, ref<android::telephony::data::ApnSetting> apnSetting);
	jboolean updateOverrideApn(ref<android::content::ComponentName> admin, jint apnId, ref<android::telephony::data::ApnSetting> apnSetting);
	jboolean removeOverrideApn(ref<android::content::ComponentName> admin, jint apnId);
	ref<java::util::List> getOverrideApns(ref<android::content::ComponentName> admin);
	void setOverrideApnsEnabled(ref<android::content::ComponentName> admin, jboolean enabled);
	jboolean isOverrideApnEnabled(ref<android::content::ComponentName> admin);
	ref<android::os::PersistableBundle> getTransferOwnershipBundle();

protected:

	DevicePolicyManager(handle_type h) : base_(h) {}

};

} // namespace android::app::admin
} // namespace scapix::java_api

#include <scapix/java_api/android/app/admin/DevicePolicyManager_OnClearApplicationUserDataListener.h>
#include <scapix/java_api/android/app/admin/SystemUpdateInfo.h>
#include <scapix/java_api/android/app/admin/SystemUpdatePolicy.h>
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/IntentFilter.h>
#include <scapix/java_api/android/content/ServiceConnection.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/net/ProxyInfo.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/android/os/UserHandle.h>
#include <scapix/java_api/android/security/AttestedKeyPair.h>
#include <scapix/java_api/android/security/keystore/KeyGenParameterSpec.h>
#include <scapix/java_api/android/telephony/data/ApnSetting.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/PrivateKey.h>
#include <scapix/java_api/java/security/cert/Certificate.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>

namespace scapix::java_api {
namespace android::app::admin {

inline ref<java::lang::String> DevicePolicyManager::ACTION_ADD_DEVICE_ADMIN_() { return get_static_field<SCAPIX_META_STRING("ACTION_ADD_DEVICE_ADMIN"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::ACTION_DEVICE_ADMIN_SERVICE_() { return get_static_field<SCAPIX_META_STRING("ACTION_DEVICE_ADMIN_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::ACTION_DEVICE_OWNER_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_DEVICE_OWNER_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::ACTION_MANAGED_PROFILE_PROVISIONED_() { return get_static_field<SCAPIX_META_STRING("ACTION_MANAGED_PROFILE_PROVISIONED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::ACTION_PROFILE_OWNER_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_PROFILE_OWNER_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::ACTION_PROVISIONING_SUCCESSFUL_() { return get_static_field<SCAPIX_META_STRING("ACTION_PROVISIONING_SUCCESSFUL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::ACTION_PROVISION_MANAGED_DEVICE_() { return get_static_field<SCAPIX_META_STRING("ACTION_PROVISION_MANAGED_DEVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::ACTION_PROVISION_MANAGED_PROFILE_() { return get_static_field<SCAPIX_META_STRING("ACTION_PROVISION_MANAGED_PROFILE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::ACTION_SET_NEW_PARENT_PROFILE_PASSWORD_() { return get_static_field<SCAPIX_META_STRING("ACTION_SET_NEW_PARENT_PROFILE_PASSWORD"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::ACTION_SET_NEW_PASSWORD_() { return get_static_field<SCAPIX_META_STRING("ACTION_SET_NEW_PASSWORD"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::ACTION_START_ENCRYPTION_() { return get_static_field<SCAPIX_META_STRING("ACTION_START_ENCRYPTION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::ACTION_SYSTEM_UPDATE_POLICY_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_SYSTEM_UPDATE_POLICY_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::DELEGATION_APP_RESTRICTIONS_() { return get_static_field<SCAPIX_META_STRING("DELEGATION_APP_RESTRICTIONS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::DELEGATION_BLOCK_UNINSTALL_() { return get_static_field<SCAPIX_META_STRING("DELEGATION_BLOCK_UNINSTALL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::DELEGATION_CERT_INSTALL_() { return get_static_field<SCAPIX_META_STRING("DELEGATION_CERT_INSTALL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::DELEGATION_ENABLE_SYSTEM_APP_() { return get_static_field<SCAPIX_META_STRING("DELEGATION_ENABLE_SYSTEM_APP"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::DELEGATION_INSTALL_EXISTING_PACKAGE_() { return get_static_field<SCAPIX_META_STRING("DELEGATION_INSTALL_EXISTING_PACKAGE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::DELEGATION_KEEP_UNINSTALLED_PACKAGES_() { return get_static_field<SCAPIX_META_STRING("DELEGATION_KEEP_UNINSTALLED_PACKAGES"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::DELEGATION_PACKAGE_ACCESS_() { return get_static_field<SCAPIX_META_STRING("DELEGATION_PACKAGE_ACCESS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::DELEGATION_PERMISSION_GRANT_() { return get_static_field<SCAPIX_META_STRING("DELEGATION_PERMISSION_GRANT"), ref<java::lang::String>>(); }
inline jint DevicePolicyManager::ENCRYPTION_STATUS_ACTIVATING_() { return get_static_field<SCAPIX_META_STRING("ENCRYPTION_STATUS_ACTIVATING"), jint>(); }
inline jint DevicePolicyManager::ENCRYPTION_STATUS_ACTIVE_() { return get_static_field<SCAPIX_META_STRING("ENCRYPTION_STATUS_ACTIVE"), jint>(); }
inline jint DevicePolicyManager::ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY_() { return get_static_field<SCAPIX_META_STRING("ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY"), jint>(); }
inline jint DevicePolicyManager::ENCRYPTION_STATUS_ACTIVE_PER_USER_() { return get_static_field<SCAPIX_META_STRING("ENCRYPTION_STATUS_ACTIVE_PER_USER"), jint>(); }
inline jint DevicePolicyManager::ENCRYPTION_STATUS_INACTIVE_() { return get_static_field<SCAPIX_META_STRING("ENCRYPTION_STATUS_INACTIVE"), jint>(); }
inline jint DevicePolicyManager::ENCRYPTION_STATUS_UNSUPPORTED_() { return get_static_field<SCAPIX_META_STRING("ENCRYPTION_STATUS_UNSUPPORTED"), jint>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_ADD_EXPLANATION_() { return get_static_field<SCAPIX_META_STRING("EXTRA_ADD_EXPLANATION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_DELEGATION_SCOPES_() { return get_static_field<SCAPIX_META_STRING("EXTRA_DELEGATION_SCOPES"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_DEVICE_ADMIN_() { return get_static_field<SCAPIX_META_STRING("EXTRA_DEVICE_ADMIN"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_DISCLAIMERS_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_DISCLAIMERS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_DISCLAIMER_CONTENT_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_DISCLAIMER_CONTENT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_DISCLAIMER_HEADER_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_DISCLAIMER_HEADER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_EMAIL_ADDRESS_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_EMAIL_ADDRESS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_LOCALE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_LOCALE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_LOCAL_TIME_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_LOCAL_TIME"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_LOGO_URI_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_LOGO_URI"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_MAIN_COLOR_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_MAIN_COLOR"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_SKIP_ENCRYPTION_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_SKIP_ENCRYPTION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_SKIP_USER_CONSENT_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_SKIP_USER_CONSENT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_TIME_ZONE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_TIME_ZONE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_WIFI_HIDDEN_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_WIFI_HIDDEN"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_WIFI_PAC_URL_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_WIFI_PAC_URL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_WIFI_PASSWORD_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_WIFI_PASSWORD"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_WIFI_PROXY_BYPASS_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_WIFI_PROXY_BYPASS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_WIFI_PROXY_HOST_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_WIFI_PROXY_HOST"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_WIFI_PROXY_PORT_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_WIFI_PROXY_PORT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_WIFI_SECURITY_TYPE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_WIFI_SECURITY_TYPE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::EXTRA_PROVISIONING_WIFI_SSID_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PROVISIONING_WIFI_SSID"), ref<java::lang::String>>(); }
inline jint DevicePolicyManager::FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY_() { return get_static_field<SCAPIX_META_STRING("FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY"), jint>(); }
inline jint DevicePolicyManager::FLAG_MANAGED_CAN_ACCESS_PARENT_() { return get_static_field<SCAPIX_META_STRING("FLAG_MANAGED_CAN_ACCESS_PARENT"), jint>(); }
inline jint DevicePolicyManager::FLAG_PARENT_CAN_ACCESS_MANAGED_() { return get_static_field<SCAPIX_META_STRING("FLAG_PARENT_CAN_ACCESS_MANAGED"), jint>(); }
inline jint DevicePolicyManager::ID_TYPE_BASE_INFO_() { return get_static_field<SCAPIX_META_STRING("ID_TYPE_BASE_INFO"), jint>(); }
inline jint DevicePolicyManager::ID_TYPE_IMEI_() { return get_static_field<SCAPIX_META_STRING("ID_TYPE_IMEI"), jint>(); }
inline jint DevicePolicyManager::ID_TYPE_MEID_() { return get_static_field<SCAPIX_META_STRING("ID_TYPE_MEID"), jint>(); }
inline jint DevicePolicyManager::ID_TYPE_SERIAL_() { return get_static_field<SCAPIX_META_STRING("ID_TYPE_SERIAL"), jint>(); }
inline jint DevicePolicyManager::INSTALLKEY_REQUEST_CREDENTIALS_ACCESS_() { return get_static_field<SCAPIX_META_STRING("INSTALLKEY_REQUEST_CREDENTIALS_ACCESS"), jint>(); }
inline jint DevicePolicyManager::INSTALLKEY_SET_USER_SELECTABLE_() { return get_static_field<SCAPIX_META_STRING("INSTALLKEY_SET_USER_SELECTABLE"), jint>(); }
inline jint DevicePolicyManager::KEYGUARD_DISABLE_BIOMETRICS_() { return get_static_field<SCAPIX_META_STRING("KEYGUARD_DISABLE_BIOMETRICS"), jint>(); }
inline jint DevicePolicyManager::KEYGUARD_DISABLE_FACE_() { return get_static_field<SCAPIX_META_STRING("KEYGUARD_DISABLE_FACE"), jint>(); }
inline jint DevicePolicyManager::KEYGUARD_DISABLE_FEATURES_ALL_() { return get_static_field<SCAPIX_META_STRING("KEYGUARD_DISABLE_FEATURES_ALL"), jint>(); }
inline jint DevicePolicyManager::KEYGUARD_DISABLE_FEATURES_NONE_() { return get_static_field<SCAPIX_META_STRING("KEYGUARD_DISABLE_FEATURES_NONE"), jint>(); }
inline jint DevicePolicyManager::KEYGUARD_DISABLE_FINGERPRINT_() { return get_static_field<SCAPIX_META_STRING("KEYGUARD_DISABLE_FINGERPRINT"), jint>(); }
inline jint DevicePolicyManager::KEYGUARD_DISABLE_IRIS_() { return get_static_field<SCAPIX_META_STRING("KEYGUARD_DISABLE_IRIS"), jint>(); }
inline jint DevicePolicyManager::KEYGUARD_DISABLE_REMOTE_INPUT_() { return get_static_field<SCAPIX_META_STRING("KEYGUARD_DISABLE_REMOTE_INPUT"), jint>(); }
inline jint DevicePolicyManager::KEYGUARD_DISABLE_SECURE_CAMERA_() { return get_static_field<SCAPIX_META_STRING("KEYGUARD_DISABLE_SECURE_CAMERA"), jint>(); }
inline jint DevicePolicyManager::KEYGUARD_DISABLE_SECURE_NOTIFICATIONS_() { return get_static_field<SCAPIX_META_STRING("KEYGUARD_DISABLE_SECURE_NOTIFICATIONS"), jint>(); }
inline jint DevicePolicyManager::KEYGUARD_DISABLE_TRUST_AGENTS_() { return get_static_field<SCAPIX_META_STRING("KEYGUARD_DISABLE_TRUST_AGENTS"), jint>(); }
inline jint DevicePolicyManager::KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS_() { return get_static_field<SCAPIX_META_STRING("KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS"), jint>(); }
inline jint DevicePolicyManager::KEYGUARD_DISABLE_WIDGETS_ALL_() { return get_static_field<SCAPIX_META_STRING("KEYGUARD_DISABLE_WIDGETS_ALL"), jint>(); }
inline jint DevicePolicyManager::LEAVE_ALL_SYSTEM_APPS_ENABLED_() { return get_static_field<SCAPIX_META_STRING("LEAVE_ALL_SYSTEM_APPS_ENABLED"), jint>(); }
inline jint DevicePolicyManager::LOCK_TASK_FEATURE_GLOBAL_ACTIONS_() { return get_static_field<SCAPIX_META_STRING("LOCK_TASK_FEATURE_GLOBAL_ACTIONS"), jint>(); }
inline jint DevicePolicyManager::LOCK_TASK_FEATURE_HOME_() { return get_static_field<SCAPIX_META_STRING("LOCK_TASK_FEATURE_HOME"), jint>(); }
inline jint DevicePolicyManager::LOCK_TASK_FEATURE_KEYGUARD_() { return get_static_field<SCAPIX_META_STRING("LOCK_TASK_FEATURE_KEYGUARD"), jint>(); }
inline jint DevicePolicyManager::LOCK_TASK_FEATURE_NONE_() { return get_static_field<SCAPIX_META_STRING("LOCK_TASK_FEATURE_NONE"), jint>(); }
inline jint DevicePolicyManager::LOCK_TASK_FEATURE_NOTIFICATIONS_() { return get_static_field<SCAPIX_META_STRING("LOCK_TASK_FEATURE_NOTIFICATIONS"), jint>(); }
inline jint DevicePolicyManager::LOCK_TASK_FEATURE_OVERVIEW_() { return get_static_field<SCAPIX_META_STRING("LOCK_TASK_FEATURE_OVERVIEW"), jint>(); }
inline jint DevicePolicyManager::LOCK_TASK_FEATURE_SYSTEM_INFO_() { return get_static_field<SCAPIX_META_STRING("LOCK_TASK_FEATURE_SYSTEM_INFO"), jint>(); }
inline jint DevicePolicyManager::MAKE_USER_EPHEMERAL_() { return get_static_field<SCAPIX_META_STRING("MAKE_USER_EPHEMERAL"), jint>(); }
inline ref<java::lang::String> DevicePolicyManager::MIME_TYPE_PROVISIONING_NFC_() { return get_static_field<SCAPIX_META_STRING("MIME_TYPE_PROVISIONING_NFC"), ref<java::lang::String>>(); }
inline jint DevicePolicyManager::PASSWORD_QUALITY_ALPHABETIC_() { return get_static_field<SCAPIX_META_STRING("PASSWORD_QUALITY_ALPHABETIC"), jint>(); }
inline jint DevicePolicyManager::PASSWORD_QUALITY_ALPHANUMERIC_() { return get_static_field<SCAPIX_META_STRING("PASSWORD_QUALITY_ALPHANUMERIC"), jint>(); }
inline jint DevicePolicyManager::PASSWORD_QUALITY_BIOMETRIC_WEAK_() { return get_static_field<SCAPIX_META_STRING("PASSWORD_QUALITY_BIOMETRIC_WEAK"), jint>(); }
inline jint DevicePolicyManager::PASSWORD_QUALITY_COMPLEX_() { return get_static_field<SCAPIX_META_STRING("PASSWORD_QUALITY_COMPLEX"), jint>(); }
inline jint DevicePolicyManager::PASSWORD_QUALITY_NUMERIC_() { return get_static_field<SCAPIX_META_STRING("PASSWORD_QUALITY_NUMERIC"), jint>(); }
inline jint DevicePolicyManager::PASSWORD_QUALITY_NUMERIC_COMPLEX_() { return get_static_field<SCAPIX_META_STRING("PASSWORD_QUALITY_NUMERIC_COMPLEX"), jint>(); }
inline jint DevicePolicyManager::PASSWORD_QUALITY_SOMETHING_() { return get_static_field<SCAPIX_META_STRING("PASSWORD_QUALITY_SOMETHING"), jint>(); }
inline jint DevicePolicyManager::PASSWORD_QUALITY_UNSPECIFIED_() { return get_static_field<SCAPIX_META_STRING("PASSWORD_QUALITY_UNSPECIFIED"), jint>(); }
inline jint DevicePolicyManager::PERMISSION_GRANT_STATE_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_GRANT_STATE_DEFAULT"), jint>(); }
inline jint DevicePolicyManager::PERMISSION_GRANT_STATE_DENIED_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_GRANT_STATE_DENIED"), jint>(); }
inline jint DevicePolicyManager::PERMISSION_GRANT_STATE_GRANTED_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_GRANT_STATE_GRANTED"), jint>(); }
inline jint DevicePolicyManager::PERMISSION_POLICY_AUTO_DENY_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_POLICY_AUTO_DENY"), jint>(); }
inline jint DevicePolicyManager::PERMISSION_POLICY_AUTO_GRANT_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_POLICY_AUTO_GRANT"), jint>(); }
inline jint DevicePolicyManager::PERMISSION_POLICY_PROMPT_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_POLICY_PROMPT"), jint>(); }
inline ref<java::lang::String> DevicePolicyManager::POLICY_DISABLE_CAMERA_() { return get_static_field<SCAPIX_META_STRING("POLICY_DISABLE_CAMERA"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DevicePolicyManager::POLICY_DISABLE_SCREEN_CAPTURE_() { return get_static_field<SCAPIX_META_STRING("POLICY_DISABLE_SCREEN_CAPTURE"), ref<java::lang::String>>(); }
inline jint DevicePolicyManager::RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT_() { return get_static_field<SCAPIX_META_STRING("RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT"), jint>(); }
inline jint DevicePolicyManager::RESET_PASSWORD_REQUIRE_ENTRY_() { return get_static_field<SCAPIX_META_STRING("RESET_PASSWORD_REQUIRE_ENTRY"), jint>(); }
inline jint DevicePolicyManager::SKIP_SETUP_WIZARD_() { return get_static_field<SCAPIX_META_STRING("SKIP_SETUP_WIZARD"), jint>(); }
inline jint DevicePolicyManager::WIPE_EUICC_() { return get_static_field<SCAPIX_META_STRING("WIPE_EUICC"), jint>(); }
inline jint DevicePolicyManager::WIPE_EXTERNAL_STORAGE_() { return get_static_field<SCAPIX_META_STRING("WIPE_EXTERNAL_STORAGE"), jint>(); }
inline jint DevicePolicyManager::WIPE_RESET_PROTECTION_DATA_() { return get_static_field<SCAPIX_META_STRING("WIPE_RESET_PROTECTION_DATA"), jint>(); }
inline jboolean DevicePolicyManager::isAdminActive(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("isAdminActive"), jboolean>(admin); }
inline ref<java::util::List> DevicePolicyManager::getActiveAdmins() { return call_method<SCAPIX_META_STRING("getActiveAdmins"), ref<java::util::List>>(); }
inline void DevicePolicyManager::removeActiveAdmin(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("removeActiveAdmin"), void>(admin); }
inline jboolean DevicePolicyManager::hasGrantedPolicy(ref<android::content::ComponentName> admin, jint usesPolicy) { return call_method<SCAPIX_META_STRING("hasGrantedPolicy"), jboolean>(admin, usesPolicy); }
inline void DevicePolicyManager::setPasswordQuality(ref<android::content::ComponentName> admin, jint quality) { return call_method<SCAPIX_META_STRING("setPasswordQuality"), void>(admin, quality); }
inline jint DevicePolicyManager::getPasswordQuality(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getPasswordQuality"), jint>(admin); }
inline void DevicePolicyManager::setPasswordMinimumLength(ref<android::content::ComponentName> admin, jint length) { return call_method<SCAPIX_META_STRING("setPasswordMinimumLength"), void>(admin, length); }
inline jint DevicePolicyManager::getPasswordMinimumLength(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getPasswordMinimumLength"), jint>(admin); }
inline void DevicePolicyManager::setPasswordMinimumUpperCase(ref<android::content::ComponentName> admin, jint length) { return call_method<SCAPIX_META_STRING("setPasswordMinimumUpperCase"), void>(admin, length); }
inline jint DevicePolicyManager::getPasswordMinimumUpperCase(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getPasswordMinimumUpperCase"), jint>(admin); }
inline void DevicePolicyManager::setPasswordMinimumLowerCase(ref<android::content::ComponentName> admin, jint length) { return call_method<SCAPIX_META_STRING("setPasswordMinimumLowerCase"), void>(admin, length); }
inline jint DevicePolicyManager::getPasswordMinimumLowerCase(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getPasswordMinimumLowerCase"), jint>(admin); }
inline void DevicePolicyManager::setPasswordMinimumLetters(ref<android::content::ComponentName> admin, jint length) { return call_method<SCAPIX_META_STRING("setPasswordMinimumLetters"), void>(admin, length); }
inline jint DevicePolicyManager::getPasswordMinimumLetters(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getPasswordMinimumLetters"), jint>(admin); }
inline void DevicePolicyManager::setPasswordMinimumNumeric(ref<android::content::ComponentName> admin, jint length) { return call_method<SCAPIX_META_STRING("setPasswordMinimumNumeric"), void>(admin, length); }
inline jint DevicePolicyManager::getPasswordMinimumNumeric(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getPasswordMinimumNumeric"), jint>(admin); }
inline void DevicePolicyManager::setPasswordMinimumSymbols(ref<android::content::ComponentName> admin, jint length) { return call_method<SCAPIX_META_STRING("setPasswordMinimumSymbols"), void>(admin, length); }
inline jint DevicePolicyManager::getPasswordMinimumSymbols(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getPasswordMinimumSymbols"), jint>(admin); }
inline void DevicePolicyManager::setPasswordMinimumNonLetter(ref<android::content::ComponentName> admin, jint length) { return call_method<SCAPIX_META_STRING("setPasswordMinimumNonLetter"), void>(admin, length); }
inline jint DevicePolicyManager::getPasswordMinimumNonLetter(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getPasswordMinimumNonLetter"), jint>(admin); }
inline void DevicePolicyManager::setPasswordHistoryLength(ref<android::content::ComponentName> admin, jint length) { return call_method<SCAPIX_META_STRING("setPasswordHistoryLength"), void>(admin, length); }
inline void DevicePolicyManager::setPasswordExpirationTimeout(ref<android::content::ComponentName> admin, jlong timeout) { return call_method<SCAPIX_META_STRING("setPasswordExpirationTimeout"), void>(admin, timeout); }
inline jlong DevicePolicyManager::getPasswordExpirationTimeout(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getPasswordExpirationTimeout"), jlong>(admin); }
inline jlong DevicePolicyManager::getPasswordExpiration(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getPasswordExpiration"), jlong>(admin); }
inline jint DevicePolicyManager::getPasswordHistoryLength(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getPasswordHistoryLength"), jint>(admin); }
inline jint DevicePolicyManager::getPasswordMaximumLength(jint quality) { return call_method<SCAPIX_META_STRING("getPasswordMaximumLength"), jint>(quality); }
inline jboolean DevicePolicyManager::isActivePasswordSufficient() { return call_method<SCAPIX_META_STRING("isActivePasswordSufficient"), jboolean>(); }
inline jboolean DevicePolicyManager::isUsingUnifiedPassword(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("isUsingUnifiedPassword"), jboolean>(admin); }
inline jint DevicePolicyManager::getCurrentFailedPasswordAttempts() { return call_method<SCAPIX_META_STRING("getCurrentFailedPasswordAttempts"), jint>(); }
inline void DevicePolicyManager::setMaximumFailedPasswordsForWipe(ref<android::content::ComponentName> admin, jint num) { return call_method<SCAPIX_META_STRING("setMaximumFailedPasswordsForWipe"), void>(admin, num); }
inline jint DevicePolicyManager::getMaximumFailedPasswordsForWipe(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getMaximumFailedPasswordsForWipe"), jint>(admin); }
inline jboolean DevicePolicyManager::resetPassword(ref<java::lang::String> password, jint flags) { return call_method<SCAPIX_META_STRING("resetPassword"), jboolean>(password, flags); }
inline jboolean DevicePolicyManager::setResetPasswordToken(ref<android::content::ComponentName> admin, ref<link::java::array<jbyte>> token) { return call_method<SCAPIX_META_STRING("setResetPasswordToken"), jboolean>(admin, token); }
inline jboolean DevicePolicyManager::clearResetPasswordToken(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("clearResetPasswordToken"), jboolean>(admin); }
inline jboolean DevicePolicyManager::isResetPasswordTokenActive(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("isResetPasswordTokenActive"), jboolean>(admin); }
inline jboolean DevicePolicyManager::resetPasswordWithToken(ref<android::content::ComponentName> admin, ref<java::lang::String> password, ref<link::java::array<jbyte>> token, jint flags) { return call_method<SCAPIX_META_STRING("resetPasswordWithToken"), jboolean>(admin, password, token, flags); }
inline void DevicePolicyManager::setMaximumTimeToLock(ref<android::content::ComponentName> admin, jlong timeMs) { return call_method<SCAPIX_META_STRING("setMaximumTimeToLock"), void>(admin, timeMs); }
inline jlong DevicePolicyManager::getMaximumTimeToLock(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getMaximumTimeToLock"), jlong>(admin); }
inline void DevicePolicyManager::setRequiredStrongAuthTimeout(ref<android::content::ComponentName> admin, jlong timeoutMs) { return call_method<SCAPIX_META_STRING("setRequiredStrongAuthTimeout"), void>(admin, timeoutMs); }
inline jlong DevicePolicyManager::getRequiredStrongAuthTimeout(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getRequiredStrongAuthTimeout"), jlong>(admin); }
inline void DevicePolicyManager::lockNow() { return call_method<SCAPIX_META_STRING("lockNow"), void>(); }
inline void DevicePolicyManager::lockNow(jint flags) { return call_method<SCAPIX_META_STRING("lockNow"), void>(flags); }
inline void DevicePolicyManager::wipeData(jint flags) { return call_method<SCAPIX_META_STRING("wipeData"), void>(flags); }
inline void DevicePolicyManager::wipeData(jint flags, ref<java::lang::CharSequence> reason) { return call_method<SCAPIX_META_STRING("wipeData"), void>(flags, reason); }
inline void DevicePolicyManager::setRecommendedGlobalProxy(ref<android::content::ComponentName> admin, ref<android::net::ProxyInfo> proxyInfo) { return call_method<SCAPIX_META_STRING("setRecommendedGlobalProxy"), void>(admin, proxyInfo); }
inline jint DevicePolicyManager::setStorageEncryption(ref<android::content::ComponentName> admin, jboolean encrypt) { return call_method<SCAPIX_META_STRING("setStorageEncryption"), jint>(admin, encrypt); }
inline jboolean DevicePolicyManager::getStorageEncryption(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getStorageEncryption"), jboolean>(admin); }
inline jint DevicePolicyManager::getStorageEncryptionStatus() { return call_method<SCAPIX_META_STRING("getStorageEncryptionStatus"), jint>(); }
inline jboolean DevicePolicyManager::installCaCert(ref<android::content::ComponentName> admin, ref<link::java::array<jbyte>> certBuffer) { return call_method<SCAPIX_META_STRING("installCaCert"), jboolean>(admin, certBuffer); }
inline void DevicePolicyManager::uninstallCaCert(ref<android::content::ComponentName> admin, ref<link::java::array<jbyte>> certBuffer) { return call_method<SCAPIX_META_STRING("uninstallCaCert"), void>(admin, certBuffer); }
inline ref<java::util::List> DevicePolicyManager::getInstalledCaCerts(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getInstalledCaCerts"), ref<java::util::List>>(admin); }
inline void DevicePolicyManager::uninstallAllUserCaCerts(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("uninstallAllUserCaCerts"), void>(admin); }
inline jboolean DevicePolicyManager::hasCaCertInstalled(ref<android::content::ComponentName> admin, ref<link::java::array<jbyte>> certBuffer) { return call_method<SCAPIX_META_STRING("hasCaCertInstalled"), jboolean>(admin, certBuffer); }
inline jboolean DevicePolicyManager::installKeyPair(ref<android::content::ComponentName> admin, ref<java::security::PrivateKey> privKey, ref<java::security::cert::Certificate> cert, ref<java::lang::String> alias) { return call_method<SCAPIX_META_STRING("installKeyPair"), jboolean>(admin, privKey, cert, alias); }
inline jboolean DevicePolicyManager::installKeyPair(ref<android::content::ComponentName> admin, ref<java::security::PrivateKey> privKey, ref<link::java::array<java::security::cert::Certificate>> certs, ref<java::lang::String> alias, jboolean requestAccess) { return call_method<SCAPIX_META_STRING("installKeyPair"), jboolean>(admin, privKey, certs, alias, requestAccess); }
inline jboolean DevicePolicyManager::installKeyPair(ref<android::content::ComponentName> admin, ref<java::security::PrivateKey> privKey, ref<link::java::array<java::security::cert::Certificate>> certs, ref<java::lang::String> alias, jint flags) { return call_method<SCAPIX_META_STRING("installKeyPair"), jboolean>(admin, privKey, certs, alias, flags); }
inline jboolean DevicePolicyManager::removeKeyPair(ref<android::content::ComponentName> admin, ref<java::lang::String> alias) { return call_method<SCAPIX_META_STRING("removeKeyPair"), jboolean>(admin, alias); }
inline ref<android::security::AttestedKeyPair> DevicePolicyManager::generateKeyPair(ref<android::content::ComponentName> admin, ref<java::lang::String> algorithm, ref<android::security::keystore::KeyGenParameterSpec> keySpec, jint idAttestationFlags) { return call_method<SCAPIX_META_STRING("generateKeyPair"), ref<android::security::AttestedKeyPair>>(admin, algorithm, keySpec, idAttestationFlags); }
inline jboolean DevicePolicyManager::isDeviceIdAttestationSupported() { return call_method<SCAPIX_META_STRING("isDeviceIdAttestationSupported"), jboolean>(); }
inline jboolean DevicePolicyManager::setKeyPairCertificate(ref<android::content::ComponentName> admin, ref<java::lang::String> alias, ref<java::util::List> certs, jboolean isUserSelectable) { return call_method<SCAPIX_META_STRING("setKeyPairCertificate"), jboolean>(admin, alias, certs, isUserSelectable); }
inline void DevicePolicyManager::setCertInstallerPackage(ref<android::content::ComponentName> admin, ref<java::lang::String> installerPackage) { return call_method<SCAPIX_META_STRING("setCertInstallerPackage"), void>(admin, installerPackage); }
inline ref<java::lang::String> DevicePolicyManager::getCertInstallerPackage(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getCertInstallerPackage"), ref<java::lang::String>>(admin); }
inline void DevicePolicyManager::setDelegatedScopes(ref<android::content::ComponentName> admin, ref<java::lang::String> delegatePackage, ref<java::util::List> scopes) { return call_method<SCAPIX_META_STRING("setDelegatedScopes"), void>(admin, delegatePackage, scopes); }
inline ref<java::util::List> DevicePolicyManager::getDelegatedScopes(ref<android::content::ComponentName> admin, ref<java::lang::String> delegatedPackage) { return call_method<SCAPIX_META_STRING("getDelegatedScopes"), ref<java::util::List>>(admin, delegatedPackage); }
inline ref<java::util::List> DevicePolicyManager::getDelegatePackages(ref<android::content::ComponentName> admin, ref<java::lang::String> delegationScope) { return call_method<SCAPIX_META_STRING("getDelegatePackages"), ref<java::util::List>>(admin, delegationScope); }
inline void DevicePolicyManager::setAlwaysOnVpnPackage(ref<android::content::ComponentName> admin, ref<java::lang::String> vpnPackage, jboolean lockdownEnabled) { return call_method<SCAPIX_META_STRING("setAlwaysOnVpnPackage"), void>(admin, vpnPackage, lockdownEnabled); }
inline ref<java::lang::String> DevicePolicyManager::getAlwaysOnVpnPackage(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getAlwaysOnVpnPackage"), ref<java::lang::String>>(admin); }
inline void DevicePolicyManager::setCameraDisabled(ref<android::content::ComponentName> admin, jboolean disabled) { return call_method<SCAPIX_META_STRING("setCameraDisabled"), void>(admin, disabled); }
inline jboolean DevicePolicyManager::getCameraDisabled(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getCameraDisabled"), jboolean>(admin); }
inline jboolean DevicePolicyManager::requestBugreport(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("requestBugreport"), jboolean>(admin); }
inline void DevicePolicyManager::setScreenCaptureDisabled(ref<android::content::ComponentName> admin, jboolean disabled) { return call_method<SCAPIX_META_STRING("setScreenCaptureDisabled"), void>(admin, disabled); }
inline jboolean DevicePolicyManager::getScreenCaptureDisabled(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getScreenCaptureDisabled"), jboolean>(admin); }
inline void DevicePolicyManager::setAutoTimeRequired(ref<android::content::ComponentName> admin, jboolean required) { return call_method<SCAPIX_META_STRING("setAutoTimeRequired"), void>(admin, required); }
inline jboolean DevicePolicyManager::getAutoTimeRequired() { return call_method<SCAPIX_META_STRING("getAutoTimeRequired"), jboolean>(); }
inline void DevicePolicyManager::setKeyguardDisabledFeatures(ref<android::content::ComponentName> admin, jint which) { return call_method<SCAPIX_META_STRING("setKeyguardDisabledFeatures"), void>(admin, which); }
inline jint DevicePolicyManager::getKeyguardDisabledFeatures(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getKeyguardDisabledFeatures"), jint>(admin); }
inline jboolean DevicePolicyManager::isDeviceOwnerApp(ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("isDeviceOwnerApp"), jboolean>(packageName); }
inline void DevicePolicyManager::clearDeviceOwnerApp(ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("clearDeviceOwnerApp"), void>(packageName); }
inline void DevicePolicyManager::clearProfileOwner(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("clearProfileOwner"), void>(admin); }
inline void DevicePolicyManager::setDeviceOwnerLockScreenInfo(ref<android::content::ComponentName> admin, ref<java::lang::CharSequence> info) { return call_method<SCAPIX_META_STRING("setDeviceOwnerLockScreenInfo"), void>(admin, info); }
inline ref<java::lang::CharSequence> DevicePolicyManager::getDeviceOwnerLockScreenInfo() { return call_method<SCAPIX_META_STRING("getDeviceOwnerLockScreenInfo"), ref<java::lang::CharSequence>>(); }
inline ref<link::java::array<java::lang::String>> DevicePolicyManager::setPackagesSuspended(ref<android::content::ComponentName> admin, ref<link::java::array<java::lang::String>> packageNames, jboolean suspended) { return call_method<SCAPIX_META_STRING("setPackagesSuspended"), ref<link::java::array<java::lang::String>>>(admin, packageNames, suspended); }
inline jboolean DevicePolicyManager::isPackageSuspended(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("isPackageSuspended"), jboolean>(admin, packageName); }
inline void DevicePolicyManager::setProfileEnabled(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("setProfileEnabled"), void>(admin); }
inline void DevicePolicyManager::setProfileName(ref<android::content::ComponentName> admin, ref<java::lang::String> profileName) { return call_method<SCAPIX_META_STRING("setProfileName"), void>(admin, profileName); }
inline jboolean DevicePolicyManager::isProfileOwnerApp(ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("isProfileOwnerApp"), jboolean>(packageName); }
inline void DevicePolicyManager::addPersistentPreferredActivity(ref<android::content::ComponentName> admin, ref<android::content::IntentFilter> filter, ref<android::content::ComponentName> activity) { return call_method<SCAPIX_META_STRING("addPersistentPreferredActivity"), void>(admin, filter, activity); }
inline void DevicePolicyManager::clearPackagePersistentPreferredActivities(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("clearPackagePersistentPreferredActivities"), void>(admin, packageName); }
inline void DevicePolicyManager::setApplicationRestrictionsManagingPackage(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("setApplicationRestrictionsManagingPackage"), void>(admin, packageName); }
inline ref<java::lang::String> DevicePolicyManager::getApplicationRestrictionsManagingPackage(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getApplicationRestrictionsManagingPackage"), ref<java::lang::String>>(admin); }
inline jboolean DevicePolicyManager::isCallerApplicationRestrictionsManagingPackage() { return call_method<SCAPIX_META_STRING("isCallerApplicationRestrictionsManagingPackage"), jboolean>(); }
inline void DevicePolicyManager::setApplicationRestrictions(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName, ref<android::os::Bundle> settings) { return call_method<SCAPIX_META_STRING("setApplicationRestrictions"), void>(admin, packageName, settings); }
inline void DevicePolicyManager::setTrustAgentConfiguration(ref<android::content::ComponentName> admin, ref<android::content::ComponentName> target, ref<android::os::PersistableBundle> configuration) { return call_method<SCAPIX_META_STRING("setTrustAgentConfiguration"), void>(admin, target, configuration); }
inline ref<java::util::List> DevicePolicyManager::getTrustAgentConfiguration(ref<android::content::ComponentName> admin, ref<android::content::ComponentName> agent) { return call_method<SCAPIX_META_STRING("getTrustAgentConfiguration"), ref<java::util::List>>(admin, agent); }
inline void DevicePolicyManager::setCrossProfileCallerIdDisabled(ref<android::content::ComponentName> admin, jboolean disabled) { return call_method<SCAPIX_META_STRING("setCrossProfileCallerIdDisabled"), void>(admin, disabled); }
inline jboolean DevicePolicyManager::getCrossProfileCallerIdDisabled(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getCrossProfileCallerIdDisabled"), jboolean>(admin); }
inline void DevicePolicyManager::setCrossProfileContactsSearchDisabled(ref<android::content::ComponentName> admin, jboolean disabled) { return call_method<SCAPIX_META_STRING("setCrossProfileContactsSearchDisabled"), void>(admin, disabled); }
inline jboolean DevicePolicyManager::getCrossProfileContactsSearchDisabled(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getCrossProfileContactsSearchDisabled"), jboolean>(admin); }
inline void DevicePolicyManager::setBluetoothContactSharingDisabled(ref<android::content::ComponentName> admin, jboolean disabled) { return call_method<SCAPIX_META_STRING("setBluetoothContactSharingDisabled"), void>(admin, disabled); }
inline jboolean DevicePolicyManager::getBluetoothContactSharingDisabled(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getBluetoothContactSharingDisabled"), jboolean>(admin); }
inline void DevicePolicyManager::addCrossProfileIntentFilter(ref<android::content::ComponentName> admin, ref<android::content::IntentFilter> filter, jint flags) { return call_method<SCAPIX_META_STRING("addCrossProfileIntentFilter"), void>(admin, filter, flags); }
inline void DevicePolicyManager::clearCrossProfileIntentFilters(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("clearCrossProfileIntentFilters"), void>(admin); }
inline jboolean DevicePolicyManager::setPermittedAccessibilityServices(ref<android::content::ComponentName> admin, ref<java::util::List> packageNames) { return call_method<SCAPIX_META_STRING("setPermittedAccessibilityServices"), jboolean>(admin, packageNames); }
inline ref<java::util::List> DevicePolicyManager::getPermittedAccessibilityServices(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getPermittedAccessibilityServices"), ref<java::util::List>>(admin); }
inline jboolean DevicePolicyManager::setPermittedInputMethods(ref<android::content::ComponentName> admin, ref<java::util::List> packageNames) { return call_method<SCAPIX_META_STRING("setPermittedInputMethods"), jboolean>(admin, packageNames); }
inline ref<java::util::List> DevicePolicyManager::getPermittedInputMethods(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getPermittedInputMethods"), ref<java::util::List>>(admin); }
inline jboolean DevicePolicyManager::setPermittedCrossProfileNotificationListeners(ref<android::content::ComponentName> admin, ref<java::util::List> packageList) { return call_method<SCAPIX_META_STRING("setPermittedCrossProfileNotificationListeners"), jboolean>(admin, packageList); }
inline ref<java::util::List> DevicePolicyManager::getPermittedCrossProfileNotificationListeners(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getPermittedCrossProfileNotificationListeners"), ref<java::util::List>>(admin); }
inline ref<java::util::List> DevicePolicyManager::getKeepUninstalledPackages(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getKeepUninstalledPackages"), ref<java::util::List>>(admin); }
inline void DevicePolicyManager::setKeepUninstalledPackages(ref<android::content::ComponentName> admin, ref<java::util::List> packageNames) { return call_method<SCAPIX_META_STRING("setKeepUninstalledPackages"), void>(admin, packageNames); }
inline ref<android::os::UserHandle> DevicePolicyManager::createAndManageUser(ref<android::content::ComponentName> admin, ref<java::lang::String> name, ref<android::content::ComponentName> profileOwner, ref<android::os::PersistableBundle> adminExtras, jint flags) { return call_method<SCAPIX_META_STRING("createAndManageUser"), ref<android::os::UserHandle>>(admin, name, profileOwner, adminExtras, flags); }
inline jboolean DevicePolicyManager::removeUser(ref<android::content::ComponentName> admin, ref<android::os::UserHandle> userHandle) { return call_method<SCAPIX_META_STRING("removeUser"), jboolean>(admin, userHandle); }
inline jboolean DevicePolicyManager::switchUser(ref<android::content::ComponentName> admin, ref<android::os::UserHandle> userHandle) { return call_method<SCAPIX_META_STRING("switchUser"), jboolean>(admin, userHandle); }
inline jint DevicePolicyManager::startUserInBackground(ref<android::content::ComponentName> admin, ref<android::os::UserHandle> userHandle) { return call_method<SCAPIX_META_STRING("startUserInBackground"), jint>(admin, userHandle); }
inline jint DevicePolicyManager::stopUser(ref<android::content::ComponentName> admin, ref<android::os::UserHandle> userHandle) { return call_method<SCAPIX_META_STRING("stopUser"), jint>(admin, userHandle); }
inline jint DevicePolicyManager::logoutUser(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("logoutUser"), jint>(admin); }
inline ref<java::util::List> DevicePolicyManager::getSecondaryUsers(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getSecondaryUsers"), ref<java::util::List>>(admin); }
inline jboolean DevicePolicyManager::isEphemeralUser(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("isEphemeralUser"), jboolean>(admin); }
inline ref<android::os::Bundle> DevicePolicyManager::getApplicationRestrictions(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("getApplicationRestrictions"), ref<android::os::Bundle>>(admin, packageName); }
inline void DevicePolicyManager::addUserRestriction(ref<android::content::ComponentName> admin, ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("addUserRestriction"), void>(admin, key); }
inline void DevicePolicyManager::clearUserRestriction(ref<android::content::ComponentName> admin, ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("clearUserRestriction"), void>(admin, key); }
inline ref<android::os::Bundle> DevicePolicyManager::getUserRestrictions(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getUserRestrictions"), ref<android::os::Bundle>>(admin); }
inline ref<android::content::Intent> DevicePolicyManager::createAdminSupportIntent(ref<java::lang::String> restriction) { return call_method<SCAPIX_META_STRING("createAdminSupportIntent"), ref<android::content::Intent>>(restriction); }
inline jboolean DevicePolicyManager::setApplicationHidden(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName, jboolean hidden) { return call_method<SCAPIX_META_STRING("setApplicationHidden"), jboolean>(admin, packageName, hidden); }
inline jboolean DevicePolicyManager::isApplicationHidden(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("isApplicationHidden"), jboolean>(admin, packageName); }
inline void DevicePolicyManager::enableSystemApp(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("enableSystemApp"), void>(admin, packageName); }
inline jint DevicePolicyManager::enableSystemApp(ref<android::content::ComponentName> admin, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("enableSystemApp"), jint>(admin, intent); }
inline jboolean DevicePolicyManager::installExistingPackage(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("installExistingPackage"), jboolean>(admin, packageName); }
inline void DevicePolicyManager::setAccountManagementDisabled(ref<android::content::ComponentName> admin, ref<java::lang::String> accountType, jboolean disabled) { return call_method<SCAPIX_META_STRING("setAccountManagementDisabled"), void>(admin, accountType, disabled); }
inline ref<link::java::array<java::lang::String>> DevicePolicyManager::getAccountTypesWithManagementDisabled() { return call_method<SCAPIX_META_STRING("getAccountTypesWithManagementDisabled"), ref<link::java::array<java::lang::String>>>(); }
inline void DevicePolicyManager::setLockTaskPackages(ref<android::content::ComponentName> admin, ref<link::java::array<java::lang::String>> packages) { return call_method<SCAPIX_META_STRING("setLockTaskPackages"), void>(admin, packages); }
inline ref<link::java::array<java::lang::String>> DevicePolicyManager::getLockTaskPackages(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getLockTaskPackages"), ref<link::java::array<java::lang::String>>>(admin); }
inline jboolean DevicePolicyManager::isLockTaskPermitted(ref<java::lang::String> pkg) { return call_method<SCAPIX_META_STRING("isLockTaskPermitted"), jboolean>(pkg); }
inline void DevicePolicyManager::setLockTaskFeatures(ref<android::content::ComponentName> admin, jint flags) { return call_method<SCAPIX_META_STRING("setLockTaskFeatures"), void>(admin, flags); }
inline jint DevicePolicyManager::getLockTaskFeatures(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getLockTaskFeatures"), jint>(admin); }
inline void DevicePolicyManager::setGlobalSetting(ref<android::content::ComponentName> admin, ref<java::lang::String> setting, ref<java::lang::String> value) { return call_method<SCAPIX_META_STRING("setGlobalSetting"), void>(admin, setting, value); }
inline void DevicePolicyManager::setSystemSetting(ref<android::content::ComponentName> admin, ref<java::lang::String> setting, ref<java::lang::String> value) { return call_method<SCAPIX_META_STRING("setSystemSetting"), void>(admin, setting, value); }
inline jboolean DevicePolicyManager::setTime(ref<android::content::ComponentName> admin, jlong millis) { return call_method<SCAPIX_META_STRING("setTime"), jboolean>(admin, millis); }
inline jboolean DevicePolicyManager::setTimeZone(ref<android::content::ComponentName> admin, ref<java::lang::String> timeZone) { return call_method<SCAPIX_META_STRING("setTimeZone"), jboolean>(admin, timeZone); }
inline void DevicePolicyManager::setSecureSetting(ref<android::content::ComponentName> admin, ref<java::lang::String> setting, ref<java::lang::String> value) { return call_method<SCAPIX_META_STRING("setSecureSetting"), void>(admin, setting, value); }
inline void DevicePolicyManager::setRestrictionsProvider(ref<android::content::ComponentName> admin, ref<android::content::ComponentName> provider) { return call_method<SCAPIX_META_STRING("setRestrictionsProvider"), void>(admin, provider); }
inline void DevicePolicyManager::setMasterVolumeMuted(ref<android::content::ComponentName> admin, jboolean on) { return call_method<SCAPIX_META_STRING("setMasterVolumeMuted"), void>(admin, on); }
inline jboolean DevicePolicyManager::isMasterVolumeMuted(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("isMasterVolumeMuted"), jboolean>(admin); }
inline void DevicePolicyManager::setUninstallBlocked(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName, jboolean uninstallBlocked) { return call_method<SCAPIX_META_STRING("setUninstallBlocked"), void>(admin, packageName, uninstallBlocked); }
inline jboolean DevicePolicyManager::isUninstallBlocked(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("isUninstallBlocked"), jboolean>(admin, packageName); }
inline jboolean DevicePolicyManager::addCrossProfileWidgetProvider(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("addCrossProfileWidgetProvider"), jboolean>(admin, packageName); }
inline jboolean DevicePolicyManager::removeCrossProfileWidgetProvider(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("removeCrossProfileWidgetProvider"), jboolean>(admin, packageName); }
inline ref<java::util::List> DevicePolicyManager::getCrossProfileWidgetProviders(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getCrossProfileWidgetProviders"), ref<java::util::List>>(admin); }
inline void DevicePolicyManager::setUserIcon(ref<android::content::ComponentName> admin, ref<android::graphics::Bitmap> icon) { return call_method<SCAPIX_META_STRING("setUserIcon"), void>(admin, icon); }
inline void DevicePolicyManager::setSystemUpdatePolicy(ref<android::content::ComponentName> admin, ref<android::app::admin::SystemUpdatePolicy> policy) { return call_method<SCAPIX_META_STRING("setSystemUpdatePolicy"), void>(admin, policy); }
inline ref<android::app::admin::SystemUpdatePolicy> DevicePolicyManager::getSystemUpdatePolicy() { return call_method<SCAPIX_META_STRING("getSystemUpdatePolicy"), ref<android::app::admin::SystemUpdatePolicy>>(); }
inline jboolean DevicePolicyManager::setKeyguardDisabled(ref<android::content::ComponentName> admin, jboolean disabled) { return call_method<SCAPIX_META_STRING("setKeyguardDisabled"), jboolean>(admin, disabled); }
inline jboolean DevicePolicyManager::setStatusBarDisabled(ref<android::content::ComponentName> admin, jboolean disabled) { return call_method<SCAPIX_META_STRING("setStatusBarDisabled"), jboolean>(admin, disabled); }
inline ref<android::app::admin::SystemUpdateInfo> DevicePolicyManager::getPendingSystemUpdate(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getPendingSystemUpdate"), ref<android::app::admin::SystemUpdateInfo>>(admin); }
inline void DevicePolicyManager::setPermissionPolicy(ref<android::content::ComponentName> admin, jint policy) { return call_method<SCAPIX_META_STRING("setPermissionPolicy"), void>(admin, policy); }
inline jint DevicePolicyManager::getPermissionPolicy(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getPermissionPolicy"), jint>(admin); }
inline jboolean DevicePolicyManager::setPermissionGrantState(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName, ref<java::lang::String> permission, jint grantState) { return call_method<SCAPIX_META_STRING("setPermissionGrantState"), jboolean>(admin, packageName, permission, grantState); }
inline jint DevicePolicyManager::getPermissionGrantState(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName, ref<java::lang::String> permission) { return call_method<SCAPIX_META_STRING("getPermissionGrantState"), jint>(admin, packageName, permission); }
inline jboolean DevicePolicyManager::isProvisioningAllowed(ref<java::lang::String> action) { return call_method<SCAPIX_META_STRING("isProvisioningAllowed"), jboolean>(action); }
inline jboolean DevicePolicyManager::isManagedProfile(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("isManagedProfile"), jboolean>(admin); }
inline ref<java::lang::String> DevicePolicyManager::getWifiMacAddress(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getWifiMacAddress"), ref<java::lang::String>>(admin); }
inline void DevicePolicyManager::reboot(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("reboot"), void>(admin); }
inline void DevicePolicyManager::setShortSupportMessage(ref<android::content::ComponentName> admin, ref<java::lang::CharSequence> message) { return call_method<SCAPIX_META_STRING("setShortSupportMessage"), void>(admin, message); }
inline ref<java::lang::CharSequence> DevicePolicyManager::getShortSupportMessage(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getShortSupportMessage"), ref<java::lang::CharSequence>>(admin); }
inline void DevicePolicyManager::setLongSupportMessage(ref<android::content::ComponentName> admin, ref<java::lang::CharSequence> message) { return call_method<SCAPIX_META_STRING("setLongSupportMessage"), void>(admin, message); }
inline ref<java::lang::CharSequence> DevicePolicyManager::getLongSupportMessage(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getLongSupportMessage"), ref<java::lang::CharSequence>>(admin); }
inline ref<android::app::admin::DevicePolicyManager> DevicePolicyManager::getParentProfileInstance(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getParentProfileInstance"), ref<android::app::admin::DevicePolicyManager>>(admin); }
inline void DevicePolicyManager::setSecurityLoggingEnabled(ref<android::content::ComponentName> admin, jboolean enabled) { return call_method<SCAPIX_META_STRING("setSecurityLoggingEnabled"), void>(admin, enabled); }
inline jboolean DevicePolicyManager::isSecurityLoggingEnabled(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("isSecurityLoggingEnabled"), jboolean>(admin); }
inline ref<java::util::List> DevicePolicyManager::retrieveSecurityLogs(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("retrieveSecurityLogs"), ref<java::util::List>>(admin); }
inline ref<java::util::List> DevicePolicyManager::setMeteredDataDisabledPackages(ref<android::content::ComponentName> admin, ref<java::util::List> packageNames) { return call_method<SCAPIX_META_STRING("setMeteredDataDisabledPackages"), ref<java::util::List>>(admin, packageNames); }
inline ref<java::util::List> DevicePolicyManager::getMeteredDataDisabledPackages(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getMeteredDataDisabledPackages"), ref<java::util::List>>(admin); }
inline ref<java::util::List> DevicePolicyManager::retrievePreRebootSecurityLogs(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("retrievePreRebootSecurityLogs"), ref<java::util::List>>(admin); }
inline void DevicePolicyManager::setOrganizationColor(ref<android::content::ComponentName> admin, jint color) { return call_method<SCAPIX_META_STRING("setOrganizationColor"), void>(admin, color); }
inline jint DevicePolicyManager::getOrganizationColor(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getOrganizationColor"), jint>(admin); }
inline void DevicePolicyManager::setOrganizationName(ref<android::content::ComponentName> admin, ref<java::lang::CharSequence> title) { return call_method<SCAPIX_META_STRING("setOrganizationName"), void>(admin, title); }
inline ref<java::lang::CharSequence> DevicePolicyManager::getOrganizationName(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getOrganizationName"), ref<java::lang::CharSequence>>(admin); }
inline void DevicePolicyManager::setAffiliationIds(ref<android::content::ComponentName> admin, ref<java::util::Set> ids) { return call_method<SCAPIX_META_STRING("setAffiliationIds"), void>(admin, ids); }
inline ref<java::util::Set> DevicePolicyManager::getAffiliationIds(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getAffiliationIds"), ref<java::util::Set>>(admin); }
inline jboolean DevicePolicyManager::isAffiliatedUser() { return call_method<SCAPIX_META_STRING("isAffiliatedUser"), jboolean>(); }
inline void DevicePolicyManager::setBackupServiceEnabled(ref<android::content::ComponentName> admin, jboolean enabled) { return call_method<SCAPIX_META_STRING("setBackupServiceEnabled"), void>(admin, enabled); }
inline jboolean DevicePolicyManager::isBackupServiceEnabled(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("isBackupServiceEnabled"), jboolean>(admin); }
inline void DevicePolicyManager::setNetworkLoggingEnabled(ref<android::content::ComponentName> admin, jboolean enabled) { return call_method<SCAPIX_META_STRING("setNetworkLoggingEnabled"), void>(admin, enabled); }
inline jboolean DevicePolicyManager::isNetworkLoggingEnabled(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("isNetworkLoggingEnabled"), jboolean>(admin); }
inline ref<java::util::List> DevicePolicyManager::retrieveNetworkLogs(ref<android::content::ComponentName> admin, jlong batchToken) { return call_method<SCAPIX_META_STRING("retrieveNetworkLogs"), ref<java::util::List>>(admin, batchToken); }
inline jboolean DevicePolicyManager::bindDeviceAdminServiceAsUser(ref<android::content::ComponentName> admin, ref<android::content::Intent> serviceIntent, ref<android::content::ServiceConnection> conn, jint flags, ref<android::os::UserHandle> targetUser) { return call_method<SCAPIX_META_STRING("bindDeviceAdminServiceAsUser"), jboolean>(admin, serviceIntent, conn, flags, targetUser); }
inline ref<java::util::List> DevicePolicyManager::getBindDeviceAdminTargetUsers(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getBindDeviceAdminTargetUsers"), ref<java::util::List>>(admin); }
inline void DevicePolicyManager::clearApplicationUserData(ref<android::content::ComponentName> admin, ref<java::lang::String> packageName, ref<java::util::concurrent::Executor> executor, ref<android::app::admin::DevicePolicyManager_OnClearApplicationUserDataListener> listener) { return call_method<SCAPIX_META_STRING("clearApplicationUserData"), void>(admin, packageName, executor, listener); }
inline void DevicePolicyManager::setLogoutEnabled(ref<android::content::ComponentName> admin, jboolean enabled) { return call_method<SCAPIX_META_STRING("setLogoutEnabled"), void>(admin, enabled); }
inline jboolean DevicePolicyManager::isLogoutEnabled() { return call_method<SCAPIX_META_STRING("isLogoutEnabled"), jboolean>(); }
inline void DevicePolicyManager::transferOwnership(ref<android::content::ComponentName> admin, ref<android::content::ComponentName> target, ref<android::os::PersistableBundle> bundle) { return call_method<SCAPIX_META_STRING("transferOwnership"), void>(admin, target, bundle); }
inline void DevicePolicyManager::setStartUserSessionMessage(ref<android::content::ComponentName> admin, ref<java::lang::CharSequence> startUserSessionMessage) { return call_method<SCAPIX_META_STRING("setStartUserSessionMessage"), void>(admin, startUserSessionMessage); }
inline void DevicePolicyManager::setEndUserSessionMessage(ref<android::content::ComponentName> admin, ref<java::lang::CharSequence> endUserSessionMessage) { return call_method<SCAPIX_META_STRING("setEndUserSessionMessage"), void>(admin, endUserSessionMessage); }
inline ref<java::lang::CharSequence> DevicePolicyManager::getStartUserSessionMessage(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getStartUserSessionMessage"), ref<java::lang::CharSequence>>(admin); }
inline ref<java::lang::CharSequence> DevicePolicyManager::getEndUserSessionMessage(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getEndUserSessionMessage"), ref<java::lang::CharSequence>>(admin); }
inline jint DevicePolicyManager::addOverrideApn(ref<android::content::ComponentName> admin, ref<android::telephony::data::ApnSetting> apnSetting) { return call_method<SCAPIX_META_STRING("addOverrideApn"), jint>(admin, apnSetting); }
inline jboolean DevicePolicyManager::updateOverrideApn(ref<android::content::ComponentName> admin, jint apnId, ref<android::telephony::data::ApnSetting> apnSetting) { return call_method<SCAPIX_META_STRING("updateOverrideApn"), jboolean>(admin, apnId, apnSetting); }
inline jboolean DevicePolicyManager::removeOverrideApn(ref<android::content::ComponentName> admin, jint apnId) { return call_method<SCAPIX_META_STRING("removeOverrideApn"), jboolean>(admin, apnId); }
inline ref<java::util::List> DevicePolicyManager::getOverrideApns(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("getOverrideApns"), ref<java::util::List>>(admin); }
inline void DevicePolicyManager::setOverrideApnsEnabled(ref<android::content::ComponentName> admin, jboolean enabled) { return call_method<SCAPIX_META_STRING("setOverrideApnsEnabled"), void>(admin, enabled); }
inline jboolean DevicePolicyManager::isOverrideApnEnabled(ref<android::content::ComponentName> admin) { return call_method<SCAPIX_META_STRING("isOverrideApnEnabled"), jboolean>(admin); }
inline ref<android::os::PersistableBundle> DevicePolicyManager::getTransferOwnershipBundle() { return call_method<SCAPIX_META_STRING("getTransferOwnershipBundle"), ref<android::os::PersistableBundle>>(); }

} // namespace android::app::admin
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_ADMIN_DEVICEPOLICYMANAGER_H
