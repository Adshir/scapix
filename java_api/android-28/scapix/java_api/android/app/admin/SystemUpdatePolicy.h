// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_APP_ADMIN_SYSTEMUPDATEPOLICY_H
#define SCAPIX_ANDROID_APP_ADMIN_SYSTEMUPDATEPOLICY_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }
namespace java::util { class List; }
namespace android::app::admin { class SystemUpdatePolicy_ValidationFailedException; }

namespace android::app::admin {

class SystemUpdatePolicy : public object_base<SCAPIX_META_STRING("android/app/admin/SystemUpdatePolicy"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using ValidationFailedException = SystemUpdatePolicy_ValidationFailedException;

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint TYPE_INSTALL_AUTOMATIC_();
	static jint TYPE_INSTALL_WINDOWED_();
	static jint TYPE_POSTPONE_();

	static ref<android::app::admin::SystemUpdatePolicy> createAutomaticInstallPolicy();
	static ref<android::app::admin::SystemUpdatePolicy> createWindowedInstallPolicy(jint startTime, jint endTime);
	static ref<android::app::admin::SystemUpdatePolicy> createPostponeInstallPolicy();
	jint getPolicyType();
	jint getInstallWindowStart();
	jint getInstallWindowEnd();
	ref<android::app::admin::SystemUpdatePolicy> setFreezePeriods(ref<java::util::List> freezePeriods);
	ref<java::util::List> getFreezePeriods();
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);

protected:

	SystemUpdatePolicy(handle_type h) : base_(h) {}

};

} // namespace android::app::admin
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::app::admin {

inline ref<android::os::Parcelable_Creator> SystemUpdatePolicy::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint SystemUpdatePolicy::TYPE_INSTALL_AUTOMATIC_() { return get_static_field<SCAPIX_META_STRING("TYPE_INSTALL_AUTOMATIC"), jint>(); }
inline jint SystemUpdatePolicy::TYPE_INSTALL_WINDOWED_() { return get_static_field<SCAPIX_META_STRING("TYPE_INSTALL_WINDOWED"), jint>(); }
inline jint SystemUpdatePolicy::TYPE_POSTPONE_() { return get_static_field<SCAPIX_META_STRING("TYPE_POSTPONE"), jint>(); }
inline ref<android::app::admin::SystemUpdatePolicy> SystemUpdatePolicy::createAutomaticInstallPolicy() { return call_static_method<SCAPIX_META_STRING("createAutomaticInstallPolicy"), ref<android::app::admin::SystemUpdatePolicy>>(); }
inline ref<android::app::admin::SystemUpdatePolicy> SystemUpdatePolicy::createWindowedInstallPolicy(jint startTime, jint endTime) { return call_static_method<SCAPIX_META_STRING("createWindowedInstallPolicy"), ref<android::app::admin::SystemUpdatePolicy>>(startTime, endTime); }
inline ref<android::app::admin::SystemUpdatePolicy> SystemUpdatePolicy::createPostponeInstallPolicy() { return call_static_method<SCAPIX_META_STRING("createPostponeInstallPolicy"), ref<android::app::admin::SystemUpdatePolicy>>(); }
inline jint SystemUpdatePolicy::getPolicyType() { return call_method<SCAPIX_META_STRING("getPolicyType"), jint>(); }
inline jint SystemUpdatePolicy::getInstallWindowStart() { return call_method<SCAPIX_META_STRING("getInstallWindowStart"), jint>(); }
inline jint SystemUpdatePolicy::getInstallWindowEnd() { return call_method<SCAPIX_META_STRING("getInstallWindowEnd"), jint>(); }
inline ref<android::app::admin::SystemUpdatePolicy> SystemUpdatePolicy::setFreezePeriods(ref<java::util::List> freezePeriods) { return call_method<SCAPIX_META_STRING("setFreezePeriods"), ref<android::app::admin::SystemUpdatePolicy>>(freezePeriods); }
inline ref<java::util::List> SystemUpdatePolicy::getFreezePeriods() { return call_method<SCAPIX_META_STRING("getFreezePeriods"), ref<java::util::List>>(); }
inline ref<java::lang::String> SystemUpdatePolicy::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint SystemUpdatePolicy::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void SystemUpdatePolicy::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }

} // namespace android::app::admin
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_ADMIN_SYSTEMUPDATEPOLICY_H
