// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/content/BroadcastReceiver.h>

#ifndef SCAPIX_ANDROID_APP_ADMIN_DEVICEADMINRECEIVER_H
#define SCAPIX_ANDROID_APP_ADMIN_DEVICEADMINRECEIVER_H

namespace scapix::java_api {

namespace android::app::admin { class DevicePolicyManager; }
namespace android::content { class ComponentName; }
namespace android::content { class Context; }
namespace android::content { class Intent; }
namespace android::net { class Uri; }
namespace android::os { class PersistableBundle; }
namespace android::os { class UserHandle; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::app::admin {

class DeviceAdminReceiver : public object_base<SCAPIX_META_STRING("android/app/admin/DeviceAdminReceiver"),
	android::content::BroadcastReceiver>
{
public:

	static ref<java::lang::String> ACTION_DEVICE_ADMIN_DISABLED_();
	static ref<java::lang::String> ACTION_DEVICE_ADMIN_DISABLE_REQUESTED_();
	static ref<java::lang::String> ACTION_DEVICE_ADMIN_ENABLED_();
	static ref<java::lang::String> ACTION_LOCK_TASK_ENTERING_();
	static ref<java::lang::String> ACTION_LOCK_TASK_EXITING_();
	static ref<java::lang::String> ACTION_PASSWORD_CHANGED_();
	static ref<java::lang::String> ACTION_PASSWORD_EXPIRING_();
	static ref<java::lang::String> ACTION_PASSWORD_FAILED_();
	static ref<java::lang::String> ACTION_PASSWORD_SUCCEEDED_();
	static ref<java::lang::String> ACTION_PROFILE_PROVISIONING_COMPLETE_();
	static jint BUGREPORT_FAILURE_FAILED_COMPLETING_();
	static jint BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE_();
	static ref<java::lang::String> DEVICE_ADMIN_META_DATA_();
	static ref<java::lang::String> EXTRA_DISABLE_WARNING_();
	static ref<java::lang::String> EXTRA_LOCK_TASK_PACKAGE_();
	static ref<java::lang::String> EXTRA_TRANSFER_OWNERSHIP_ADMIN_EXTRAS_BUNDLE_();

	static ref<DeviceAdminReceiver> new_object();
	ref<android::app::admin::DevicePolicyManager> getManager(ref<android::content::Context> context);
	ref<android::content::ComponentName> getWho(ref<android::content::Context> context);
	void onEnabled(ref<android::content::Context> context, ref<android::content::Intent> intent);
	ref<java::lang::CharSequence> onDisableRequested(ref<android::content::Context> context, ref<android::content::Intent> intent);
	void onDisabled(ref<android::content::Context> context, ref<android::content::Intent> intent);
	void onPasswordChanged(ref<android::content::Context> context, ref<android::content::Intent> intent);
	void onPasswordChanged(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> user);
	void onPasswordFailed(ref<android::content::Context> context, ref<android::content::Intent> intent);
	void onPasswordFailed(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> user);
	void onPasswordSucceeded(ref<android::content::Context> context, ref<android::content::Intent> intent);
	void onPasswordSucceeded(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> user);
	void onPasswordExpiring(ref<android::content::Context> context, ref<android::content::Intent> intent);
	void onPasswordExpiring(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> user);
	void onProfileProvisioningComplete(ref<android::content::Context> context, ref<android::content::Intent> intent);
	void onReadyForUserInitialization(ref<android::content::Context> context, ref<android::content::Intent> intent);
	void onLockTaskModeEntering(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<java::lang::String> pkg);
	void onLockTaskModeExiting(ref<android::content::Context> context, ref<android::content::Intent> intent);
	ref<java::lang::String> onChoosePrivateKeyAlias(ref<android::content::Context> context, ref<android::content::Intent> intent, jint uid, ref<android::net::Uri> uri, ref<java::lang::String> alias);
	void onSystemUpdatePending(ref<android::content::Context> context, ref<android::content::Intent> intent, jlong receivedTime);
	void onBugreportSharingDeclined(ref<android::content::Context> context, ref<android::content::Intent> intent);
	void onBugreportShared(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<java::lang::String> bugreportHash);
	void onBugreportFailed(ref<android::content::Context> context, ref<android::content::Intent> intent, jint failureCode);
	void onSecurityLogsAvailable(ref<android::content::Context> context, ref<android::content::Intent> intent);
	void onNetworkLogsAvailable(ref<android::content::Context> context, ref<android::content::Intent> intent, jlong batchToken, jint p4);
	void onUserAdded(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> newUser);
	void onUserRemoved(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> removedUser);
	void onUserStarted(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> startedUser);
	void onUserStopped(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> stoppedUser);
	void onUserSwitched(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> switchedUser);
	void onTransferOwnershipComplete(ref<android::content::Context> context, ref<android::os::PersistableBundle> bundle);
	void onTransferAffiliatedProfileOwnershipComplete(ref<android::content::Context> context, ref<android::os::UserHandle> user);
	void onReceive(ref<android::content::Context> context, ref<android::content::Intent> intent);

protected:

	DeviceAdminReceiver(handle_type h) : base_(h) {}

};

} // namespace android::app::admin
} // namespace scapix::java_api

#include <scapix/java_api/android/app/admin/DevicePolicyManager.h>
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/android/os/UserHandle.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::app::admin {

inline ref<java::lang::String> DeviceAdminReceiver::ACTION_DEVICE_ADMIN_DISABLED_() { return get_static_field<SCAPIX_META_STRING("ACTION_DEVICE_ADMIN_DISABLED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DeviceAdminReceiver::ACTION_DEVICE_ADMIN_DISABLE_REQUESTED_() { return get_static_field<SCAPIX_META_STRING("ACTION_DEVICE_ADMIN_DISABLE_REQUESTED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DeviceAdminReceiver::ACTION_DEVICE_ADMIN_ENABLED_() { return get_static_field<SCAPIX_META_STRING("ACTION_DEVICE_ADMIN_ENABLED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DeviceAdminReceiver::ACTION_LOCK_TASK_ENTERING_() { return get_static_field<SCAPIX_META_STRING("ACTION_LOCK_TASK_ENTERING"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DeviceAdminReceiver::ACTION_LOCK_TASK_EXITING_() { return get_static_field<SCAPIX_META_STRING("ACTION_LOCK_TASK_EXITING"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DeviceAdminReceiver::ACTION_PASSWORD_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_PASSWORD_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DeviceAdminReceiver::ACTION_PASSWORD_EXPIRING_() { return get_static_field<SCAPIX_META_STRING("ACTION_PASSWORD_EXPIRING"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DeviceAdminReceiver::ACTION_PASSWORD_FAILED_() { return get_static_field<SCAPIX_META_STRING("ACTION_PASSWORD_FAILED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DeviceAdminReceiver::ACTION_PASSWORD_SUCCEEDED_() { return get_static_field<SCAPIX_META_STRING("ACTION_PASSWORD_SUCCEEDED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DeviceAdminReceiver::ACTION_PROFILE_PROVISIONING_COMPLETE_() { return get_static_field<SCAPIX_META_STRING("ACTION_PROFILE_PROVISIONING_COMPLETE"), ref<java::lang::String>>(); }
inline jint DeviceAdminReceiver::BUGREPORT_FAILURE_FAILED_COMPLETING_() { return get_static_field<SCAPIX_META_STRING("BUGREPORT_FAILURE_FAILED_COMPLETING"), jint>(); }
inline jint DeviceAdminReceiver::BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE_() { return get_static_field<SCAPIX_META_STRING("BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE"), jint>(); }
inline ref<java::lang::String> DeviceAdminReceiver::DEVICE_ADMIN_META_DATA_() { return get_static_field<SCAPIX_META_STRING("DEVICE_ADMIN_META_DATA"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DeviceAdminReceiver::EXTRA_DISABLE_WARNING_() { return get_static_field<SCAPIX_META_STRING("EXTRA_DISABLE_WARNING"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DeviceAdminReceiver::EXTRA_LOCK_TASK_PACKAGE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_LOCK_TASK_PACKAGE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DeviceAdminReceiver::EXTRA_TRANSFER_OWNERSHIP_ADMIN_EXTRAS_BUNDLE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_TRANSFER_OWNERSHIP_ADMIN_EXTRAS_BUNDLE"), ref<java::lang::String>>(); }
inline ref<DeviceAdminReceiver> DeviceAdminReceiver::new_object() { return base_::new_object(); }
inline ref<android::app::admin::DevicePolicyManager> DeviceAdminReceiver::getManager(ref<android::content::Context> context) { return call_method<SCAPIX_META_STRING("getManager"), ref<android::app::admin::DevicePolicyManager>>(context); }
inline ref<android::content::ComponentName> DeviceAdminReceiver::getWho(ref<android::content::Context> context) { return call_method<SCAPIX_META_STRING("getWho"), ref<android::content::ComponentName>>(context); }
inline void DeviceAdminReceiver::onEnabled(ref<android::content::Context> context, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onEnabled"), void>(context, intent); }
inline ref<java::lang::CharSequence> DeviceAdminReceiver::onDisableRequested(ref<android::content::Context> context, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onDisableRequested"), ref<java::lang::CharSequence>>(context, intent); }
inline void DeviceAdminReceiver::onDisabled(ref<android::content::Context> context, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onDisabled"), void>(context, intent); }
inline void DeviceAdminReceiver::onPasswordChanged(ref<android::content::Context> context, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onPasswordChanged"), void>(context, intent); }
inline void DeviceAdminReceiver::onPasswordChanged(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> user) { return call_method<SCAPIX_META_STRING("onPasswordChanged"), void>(context, intent, user); }
inline void DeviceAdminReceiver::onPasswordFailed(ref<android::content::Context> context, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onPasswordFailed"), void>(context, intent); }
inline void DeviceAdminReceiver::onPasswordFailed(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> user) { return call_method<SCAPIX_META_STRING("onPasswordFailed"), void>(context, intent, user); }
inline void DeviceAdminReceiver::onPasswordSucceeded(ref<android::content::Context> context, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onPasswordSucceeded"), void>(context, intent); }
inline void DeviceAdminReceiver::onPasswordSucceeded(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> user) { return call_method<SCAPIX_META_STRING("onPasswordSucceeded"), void>(context, intent, user); }
inline void DeviceAdminReceiver::onPasswordExpiring(ref<android::content::Context> context, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onPasswordExpiring"), void>(context, intent); }
inline void DeviceAdminReceiver::onPasswordExpiring(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> user) { return call_method<SCAPIX_META_STRING("onPasswordExpiring"), void>(context, intent, user); }
inline void DeviceAdminReceiver::onProfileProvisioningComplete(ref<android::content::Context> context, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onProfileProvisioningComplete"), void>(context, intent); }
inline void DeviceAdminReceiver::onReadyForUserInitialization(ref<android::content::Context> context, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onReadyForUserInitialization"), void>(context, intent); }
inline void DeviceAdminReceiver::onLockTaskModeEntering(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<java::lang::String> pkg) { return call_method<SCAPIX_META_STRING("onLockTaskModeEntering"), void>(context, intent, pkg); }
inline void DeviceAdminReceiver::onLockTaskModeExiting(ref<android::content::Context> context, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onLockTaskModeExiting"), void>(context, intent); }
inline ref<java::lang::String> DeviceAdminReceiver::onChoosePrivateKeyAlias(ref<android::content::Context> context, ref<android::content::Intent> intent, jint uid, ref<android::net::Uri> uri, ref<java::lang::String> alias) { return call_method<SCAPIX_META_STRING("onChoosePrivateKeyAlias"), ref<java::lang::String>>(context, intent, uid, uri, alias); }
inline void DeviceAdminReceiver::onSystemUpdatePending(ref<android::content::Context> context, ref<android::content::Intent> intent, jlong receivedTime) { return call_method<SCAPIX_META_STRING("onSystemUpdatePending"), void>(context, intent, receivedTime); }
inline void DeviceAdminReceiver::onBugreportSharingDeclined(ref<android::content::Context> context, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onBugreportSharingDeclined"), void>(context, intent); }
inline void DeviceAdminReceiver::onBugreportShared(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<java::lang::String> bugreportHash) { return call_method<SCAPIX_META_STRING("onBugreportShared"), void>(context, intent, bugreportHash); }
inline void DeviceAdminReceiver::onBugreportFailed(ref<android::content::Context> context, ref<android::content::Intent> intent, jint failureCode) { return call_method<SCAPIX_META_STRING("onBugreportFailed"), void>(context, intent, failureCode); }
inline void DeviceAdminReceiver::onSecurityLogsAvailable(ref<android::content::Context> context, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onSecurityLogsAvailable"), void>(context, intent); }
inline void DeviceAdminReceiver::onNetworkLogsAvailable(ref<android::content::Context> context, ref<android::content::Intent> intent, jlong batchToken, jint p4) { return call_method<SCAPIX_META_STRING("onNetworkLogsAvailable"), void>(context, intent, batchToken, p4); }
inline void DeviceAdminReceiver::onUserAdded(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> newUser) { return call_method<SCAPIX_META_STRING("onUserAdded"), void>(context, intent, newUser); }
inline void DeviceAdminReceiver::onUserRemoved(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> removedUser) { return call_method<SCAPIX_META_STRING("onUserRemoved"), void>(context, intent, removedUser); }
inline void DeviceAdminReceiver::onUserStarted(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> startedUser) { return call_method<SCAPIX_META_STRING("onUserStarted"), void>(context, intent, startedUser); }
inline void DeviceAdminReceiver::onUserStopped(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> stoppedUser) { return call_method<SCAPIX_META_STRING("onUserStopped"), void>(context, intent, stoppedUser); }
inline void DeviceAdminReceiver::onUserSwitched(ref<android::content::Context> context, ref<android::content::Intent> intent, ref<android::os::UserHandle> switchedUser) { return call_method<SCAPIX_META_STRING("onUserSwitched"), void>(context, intent, switchedUser); }
inline void DeviceAdminReceiver::onTransferOwnershipComplete(ref<android::content::Context> context, ref<android::os::PersistableBundle> bundle) { return call_method<SCAPIX_META_STRING("onTransferOwnershipComplete"), void>(context, bundle); }
inline void DeviceAdminReceiver::onTransferAffiliatedProfileOwnershipComplete(ref<android::content::Context> context, ref<android::os::UserHandle> user) { return call_method<SCAPIX_META_STRING("onTransferAffiliatedProfileOwnershipComplete"), void>(context, user); }
inline void DeviceAdminReceiver::onReceive(ref<android::content::Context> context, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onReceive"), void>(context, intent); }

} // namespace android::app::admin
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_ADMIN_DEVICEADMINRECEIVER_H
