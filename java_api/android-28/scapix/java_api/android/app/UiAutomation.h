// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_APP_UIAUTOMATION_H
#define SCAPIX_ANDROID_APP_UIAUTOMATION_H

namespace scapix::java_api {

namespace android::accessibilityservice { class AccessibilityServiceInfo; }
namespace android::app { class UiAutomation_AccessibilityEventFilter; }
namespace android::app { class UiAutomation_OnAccessibilityEventListener; }
namespace android::graphics { class Bitmap; }
namespace android::os { class ParcelFileDescriptor; }
namespace android::os { class UserHandle; }
namespace android::view { class InputEvent; }
namespace android::view { class WindowAnimationFrameStats; }
namespace android::view { class WindowContentFrameStats; }
namespace android::view::accessibility { class AccessibilityEvent; }
namespace android::view::accessibility { class AccessibilityNodeInfo; }
namespace java::lang { class Runnable; }
namespace java::lang { class String; }
namespace java::util { class List; }

namespace android::app {

class UiAutomation : public object_base<SCAPIX_META_STRING("android/app/UiAutomation"),
	java::lang::Object>
{
public:

	using OnAccessibilityEventListener = UiAutomation_OnAccessibilityEventListener;
	using AccessibilityEventFilter = UiAutomation_AccessibilityEventFilter;

	static jint FLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES_();
	static jint ROTATION_FREEZE_0_();
	static jint ROTATION_FREEZE_180_();
	static jint ROTATION_FREEZE_270_();
	static jint ROTATION_FREEZE_90_();
	static jint ROTATION_FREEZE_CURRENT_();
	static jint ROTATION_UNFREEZE_();

	void setOnAccessibilityEventListener(ref<android::app::UiAutomation_OnAccessibilityEventListener> listener);
	jboolean performGlobalAction(jint action);
	ref<android::view::accessibility::AccessibilityNodeInfo> findFocus(jint focus);
	ref<android::accessibilityservice::AccessibilityServiceInfo> getServiceInfo();
	void setServiceInfo(ref<android::accessibilityservice::AccessibilityServiceInfo> info);
	ref<java::util::List> getWindows();
	ref<android::view::accessibility::AccessibilityNodeInfo> getRootInActiveWindow();
	jboolean injectInputEvent(ref<android::view::InputEvent> event, jboolean sync);
	jboolean setRotation(jint rotation);
	ref<android::view::accessibility::AccessibilityEvent> executeAndWaitForEvent(ref<java::lang::Runnable> command, ref<android::app::UiAutomation_AccessibilityEventFilter> filter, jlong timeoutMillis);
	void waitForIdle(jlong idleTimeoutMillis, jlong p2);
	ref<android::graphics::Bitmap> takeScreenshot();
	void setRunAsMonkey(jboolean enable);
	jboolean clearWindowContentFrameStats(jint windowId);
	ref<android::view::WindowContentFrameStats> getWindowContentFrameStats(jint windowId);
	void clearWindowAnimationFrameStats();
	ref<android::view::WindowAnimationFrameStats> getWindowAnimationFrameStats();
	void grantRuntimePermission(ref<java::lang::String> packageName, ref<java::lang::String> permission);
	void grantRuntimePermissionAsUser(ref<java::lang::String> packageName, ref<java::lang::String> permission, ref<android::os::UserHandle> userHandle);
	void revokeRuntimePermission(ref<java::lang::String> packageName, ref<java::lang::String> permission);
	void revokeRuntimePermissionAsUser(ref<java::lang::String> packageName, ref<java::lang::String> permission, ref<android::os::UserHandle> userHandle);
	ref<android::os::ParcelFileDescriptor> executeShellCommand(ref<java::lang::String> command);

protected:

	UiAutomation(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/accessibilityservice/AccessibilityServiceInfo.h>
#include <scapix/java_api/android/app/UiAutomation_AccessibilityEventFilter.h>
#include <scapix/java_api/android/app/UiAutomation_OnAccessibilityEventListener.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/android/os/UserHandle.h>
#include <scapix/java_api/android/view/InputEvent.h>
#include <scapix/java_api/android/view/WindowAnimationFrameStats.h>
#include <scapix/java_api/android/view/WindowContentFrameStats.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::app {

inline jint UiAutomation::FLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES_() { return get_static_field<SCAPIX_META_STRING("FLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES"), jint>(); }
inline jint UiAutomation::ROTATION_FREEZE_0_() { return get_static_field<SCAPIX_META_STRING("ROTATION_FREEZE_0"), jint>(); }
inline jint UiAutomation::ROTATION_FREEZE_180_() { return get_static_field<SCAPIX_META_STRING("ROTATION_FREEZE_180"), jint>(); }
inline jint UiAutomation::ROTATION_FREEZE_270_() { return get_static_field<SCAPIX_META_STRING("ROTATION_FREEZE_270"), jint>(); }
inline jint UiAutomation::ROTATION_FREEZE_90_() { return get_static_field<SCAPIX_META_STRING("ROTATION_FREEZE_90"), jint>(); }
inline jint UiAutomation::ROTATION_FREEZE_CURRENT_() { return get_static_field<SCAPIX_META_STRING("ROTATION_FREEZE_CURRENT"), jint>(); }
inline jint UiAutomation::ROTATION_UNFREEZE_() { return get_static_field<SCAPIX_META_STRING("ROTATION_UNFREEZE"), jint>(); }
inline void UiAutomation::setOnAccessibilityEventListener(ref<android::app::UiAutomation_OnAccessibilityEventListener> listener) { return call_method<SCAPIX_META_STRING("setOnAccessibilityEventListener"), void>(listener); }
inline jboolean UiAutomation::performGlobalAction(jint action) { return call_method<SCAPIX_META_STRING("performGlobalAction"), jboolean>(action); }
inline ref<android::view::accessibility::AccessibilityNodeInfo> UiAutomation::findFocus(jint focus) { return call_method<SCAPIX_META_STRING("findFocus"), ref<android::view::accessibility::AccessibilityNodeInfo>>(focus); }
inline ref<android::accessibilityservice::AccessibilityServiceInfo> UiAutomation::getServiceInfo() { return call_method<SCAPIX_META_STRING("getServiceInfo"), ref<android::accessibilityservice::AccessibilityServiceInfo>>(); }
inline void UiAutomation::setServiceInfo(ref<android::accessibilityservice::AccessibilityServiceInfo> info) { return call_method<SCAPIX_META_STRING("setServiceInfo"), void>(info); }
inline ref<java::util::List> UiAutomation::getWindows() { return call_method<SCAPIX_META_STRING("getWindows"), ref<java::util::List>>(); }
inline ref<android::view::accessibility::AccessibilityNodeInfo> UiAutomation::getRootInActiveWindow() { return call_method<SCAPIX_META_STRING("getRootInActiveWindow"), ref<android::view::accessibility::AccessibilityNodeInfo>>(); }
inline jboolean UiAutomation::injectInputEvent(ref<android::view::InputEvent> event, jboolean sync) { return call_method<SCAPIX_META_STRING("injectInputEvent"), jboolean>(event, sync); }
inline jboolean UiAutomation::setRotation(jint rotation) { return call_method<SCAPIX_META_STRING("setRotation"), jboolean>(rotation); }
inline ref<android::view::accessibility::AccessibilityEvent> UiAutomation::executeAndWaitForEvent(ref<java::lang::Runnable> command, ref<android::app::UiAutomation_AccessibilityEventFilter> filter, jlong timeoutMillis) { return call_method<SCAPIX_META_STRING("executeAndWaitForEvent"), ref<android::view::accessibility::AccessibilityEvent>>(command, filter, timeoutMillis); }
inline void UiAutomation::waitForIdle(jlong idleTimeoutMillis, jlong p2) { return call_method<SCAPIX_META_STRING("waitForIdle"), void>(idleTimeoutMillis, p2); }
inline ref<android::graphics::Bitmap> UiAutomation::takeScreenshot() { return call_method<SCAPIX_META_STRING("takeScreenshot"), ref<android::graphics::Bitmap>>(); }
inline void UiAutomation::setRunAsMonkey(jboolean enable) { return call_method<SCAPIX_META_STRING("setRunAsMonkey"), void>(enable); }
inline jboolean UiAutomation::clearWindowContentFrameStats(jint windowId) { return call_method<SCAPIX_META_STRING("clearWindowContentFrameStats"), jboolean>(windowId); }
inline ref<android::view::WindowContentFrameStats> UiAutomation::getWindowContentFrameStats(jint windowId) { return call_method<SCAPIX_META_STRING("getWindowContentFrameStats"), ref<android::view::WindowContentFrameStats>>(windowId); }
inline void UiAutomation::clearWindowAnimationFrameStats() { return call_method<SCAPIX_META_STRING("clearWindowAnimationFrameStats"), void>(); }
inline ref<android::view::WindowAnimationFrameStats> UiAutomation::getWindowAnimationFrameStats() { return call_method<SCAPIX_META_STRING("getWindowAnimationFrameStats"), ref<android::view::WindowAnimationFrameStats>>(); }
inline void UiAutomation::grantRuntimePermission(ref<java::lang::String> packageName, ref<java::lang::String> permission) { return call_method<SCAPIX_META_STRING("grantRuntimePermission"), void>(packageName, permission); }
inline void UiAutomation::grantRuntimePermissionAsUser(ref<java::lang::String> packageName, ref<java::lang::String> permission, ref<android::os::UserHandle> userHandle) { return call_method<SCAPIX_META_STRING("grantRuntimePermissionAsUser"), void>(packageName, permission, userHandle); }
inline void UiAutomation::revokeRuntimePermission(ref<java::lang::String> packageName, ref<java::lang::String> permission) { return call_method<SCAPIX_META_STRING("revokeRuntimePermission"), void>(packageName, permission); }
inline void UiAutomation::revokeRuntimePermissionAsUser(ref<java::lang::String> packageName, ref<java::lang::String> permission, ref<android::os::UserHandle> userHandle) { return call_method<SCAPIX_META_STRING("revokeRuntimePermissionAsUser"), void>(packageName, permission, userHandle); }
inline ref<android::os::ParcelFileDescriptor> UiAutomation::executeShellCommand(ref<java::lang::String> command) { return call_method<SCAPIX_META_STRING("executeShellCommand"), ref<android::os::ParcelFileDescriptor>>(command); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_UIAUTOMATION_H
