// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_APP_LOADERMANAGER_H
#define SCAPIX_ANDROID_APP_LOADERMANAGER_H

namespace scapix::java_api {

namespace android::app { class LoaderManager_LoaderCallbacks; }
namespace android::content { class Loader; }
namespace android::os { class Bundle; }
namespace java::io { class FileDescriptor; }
namespace java::io { class PrintWriter; }
namespace java::lang { class String; }

namespace android::app {

class LoaderManager : public object_base<SCAPIX_META_STRING("android/app/LoaderManager"),
	java::lang::Object>
{
public:

	using LoaderCallbacks = LoaderManager_LoaderCallbacks;

	static ref<LoaderManager> new_object();
	ref<android::content::Loader> initLoader(jint p1, ref<android::os::Bundle> p2, ref<android::app::LoaderManager_LoaderCallbacks> p3);
	ref<android::content::Loader> restartLoader(jint p1, ref<android::os::Bundle> p2, ref<android::app::LoaderManager_LoaderCallbacks> p3);
	void destroyLoader(jint p1);
	ref<android::content::Loader> getLoader(jint p1);
	void dump(ref<java::lang::String> p1, ref<java::io::FileDescriptor> p2, ref<java::io::PrintWriter> p3, ref<link::java::array<java::lang::String>> p4);
	static void enableDebugLogging(jboolean enabled);

protected:

	LoaderManager(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/app/LoaderManager_LoaderCallbacks.h>
#include <scapix/java_api/android/content/Loader.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::app {

inline ref<LoaderManager> LoaderManager::new_object() { return base_::new_object(); }
inline ref<android::content::Loader> LoaderManager::initLoader(jint p1, ref<android::os::Bundle> p2, ref<android::app::LoaderManager_LoaderCallbacks> p3) { return call_method<SCAPIX_META_STRING("initLoader"), ref<android::content::Loader>>(p1, p2, p3); }
inline ref<android::content::Loader> LoaderManager::restartLoader(jint p1, ref<android::os::Bundle> p2, ref<android::app::LoaderManager_LoaderCallbacks> p3) { return call_method<SCAPIX_META_STRING("restartLoader"), ref<android::content::Loader>>(p1, p2, p3); }
inline void LoaderManager::destroyLoader(jint p1) { return call_method<SCAPIX_META_STRING("destroyLoader"), void>(p1); }
inline ref<android::content::Loader> LoaderManager::getLoader(jint p1) { return call_method<SCAPIX_META_STRING("getLoader"), ref<android::content::Loader>>(p1); }
inline void LoaderManager::dump(ref<java::lang::String> p1, ref<java::io::FileDescriptor> p2, ref<java::io::PrintWriter> p3, ref<link::java::array<java::lang::String>> p4) { return call_method<SCAPIX_META_STRING("dump"), void>(p1, p2, p3, p4); }
inline void LoaderManager::enableDebugLogging(jboolean enabled) { return call_static_method<SCAPIX_META_STRING("enableDebugLogging"), void>(enabled); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_LOADERMANAGER_H
