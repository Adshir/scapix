// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_APP_FRAGMENTTRANSACTION_H
#define SCAPIX_ANDROID_APP_FRAGMENTTRANSACTION_H

namespace scapix::java_api {

namespace android::app { class Fragment; }
namespace android::view { class View; }
namespace java::lang { class CharSequence; }
namespace java::lang { class Runnable; }
namespace java::lang { class String; }

namespace android::app {

class FragmentTransaction : public object_base<SCAPIX_META_STRING("android/app/FragmentTransaction"),
	java::lang::Object>
{
public:

	static jint TRANSIT_ENTER_MASK_();
	static jint TRANSIT_EXIT_MASK_();
	static jint TRANSIT_FRAGMENT_CLOSE_();
	static jint TRANSIT_FRAGMENT_FADE_();
	static jint TRANSIT_FRAGMENT_OPEN_();
	static jint TRANSIT_NONE_();
	static jint TRANSIT_UNSET_();

	static ref<FragmentTransaction> new_object();
	ref<android::app::FragmentTransaction> add(ref<android::app::Fragment> p1, ref<java::lang::String> p2);
	ref<android::app::FragmentTransaction> add(jint p1, ref<android::app::Fragment> p2);
	ref<android::app::FragmentTransaction> add(jint p1, ref<android::app::Fragment> p2, ref<java::lang::String> p3);
	ref<android::app::FragmentTransaction> replace(jint p1, ref<android::app::Fragment> p2);
	ref<android::app::FragmentTransaction> replace(jint p1, ref<android::app::Fragment> p2, ref<java::lang::String> p3);
	ref<android::app::FragmentTransaction> remove(ref<android::app::Fragment> p1);
	ref<android::app::FragmentTransaction> hide(ref<android::app::Fragment> p1);
	ref<android::app::FragmentTransaction> show(ref<android::app::Fragment> p1);
	ref<android::app::FragmentTransaction> detach(ref<android::app::Fragment> p1);
	ref<android::app::FragmentTransaction> attach(ref<android::app::Fragment> p1);
	ref<android::app::FragmentTransaction> setPrimaryNavigationFragment(ref<android::app::Fragment> p1);
	jboolean isEmpty();
	ref<android::app::FragmentTransaction> setCustomAnimations(jint p1, jint p2);
	ref<android::app::FragmentTransaction> setCustomAnimations(jint p1, jint p2, jint p3, jint p4);
	ref<android::app::FragmentTransaction> setTransition(jint p1);
	ref<android::app::FragmentTransaction> addSharedElement(ref<android::view::View> p1, ref<java::lang::String> p2);
	ref<android::app::FragmentTransaction> setTransitionStyle(jint p1);
	ref<android::app::FragmentTransaction> addToBackStack(ref<java::lang::String> p1);
	jboolean isAddToBackStackAllowed();
	ref<android::app::FragmentTransaction> disallowAddToBackStack();
	ref<android::app::FragmentTransaction> setBreadCrumbTitle(jint p1);
	ref<android::app::FragmentTransaction> setBreadCrumbTitle(ref<java::lang::CharSequence> p1);
	ref<android::app::FragmentTransaction> setBreadCrumbShortTitle(jint p1);
	ref<android::app::FragmentTransaction> setBreadCrumbShortTitle(ref<java::lang::CharSequence> p1);
	ref<android::app::FragmentTransaction> setReorderingAllowed(jboolean p1);
	ref<android::app::FragmentTransaction> runOnCommit(ref<java::lang::Runnable> p1);
	jint commit();
	jint commitAllowingStateLoss();
	void commitNow();
	void commitNowAllowingStateLoss();

protected:

	FragmentTransaction(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/app/Fragment.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::app {

inline jint FragmentTransaction::TRANSIT_ENTER_MASK_() { return get_static_field<SCAPIX_META_STRING("TRANSIT_ENTER_MASK"), jint>(); }
inline jint FragmentTransaction::TRANSIT_EXIT_MASK_() { return get_static_field<SCAPIX_META_STRING("TRANSIT_EXIT_MASK"), jint>(); }
inline jint FragmentTransaction::TRANSIT_FRAGMENT_CLOSE_() { return get_static_field<SCAPIX_META_STRING("TRANSIT_FRAGMENT_CLOSE"), jint>(); }
inline jint FragmentTransaction::TRANSIT_FRAGMENT_FADE_() { return get_static_field<SCAPIX_META_STRING("TRANSIT_FRAGMENT_FADE"), jint>(); }
inline jint FragmentTransaction::TRANSIT_FRAGMENT_OPEN_() { return get_static_field<SCAPIX_META_STRING("TRANSIT_FRAGMENT_OPEN"), jint>(); }
inline jint FragmentTransaction::TRANSIT_NONE_() { return get_static_field<SCAPIX_META_STRING("TRANSIT_NONE"), jint>(); }
inline jint FragmentTransaction::TRANSIT_UNSET_() { return get_static_field<SCAPIX_META_STRING("TRANSIT_UNSET"), jint>(); }
inline ref<FragmentTransaction> FragmentTransaction::new_object() { return base_::new_object(); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::add(ref<android::app::Fragment> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("add"), ref<android::app::FragmentTransaction>>(p1, p2); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::add(jint p1, ref<android::app::Fragment> p2) { return call_method<SCAPIX_META_STRING("add"), ref<android::app::FragmentTransaction>>(p1, p2); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::add(jint p1, ref<android::app::Fragment> p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("add"), ref<android::app::FragmentTransaction>>(p1, p2, p3); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::replace(jint p1, ref<android::app::Fragment> p2) { return call_method<SCAPIX_META_STRING("replace"), ref<android::app::FragmentTransaction>>(p1, p2); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::replace(jint p1, ref<android::app::Fragment> p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("replace"), ref<android::app::FragmentTransaction>>(p1, p2, p3); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::remove(ref<android::app::Fragment> p1) { return call_method<SCAPIX_META_STRING("remove"), ref<android::app::FragmentTransaction>>(p1); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::hide(ref<android::app::Fragment> p1) { return call_method<SCAPIX_META_STRING("hide"), ref<android::app::FragmentTransaction>>(p1); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::show(ref<android::app::Fragment> p1) { return call_method<SCAPIX_META_STRING("show"), ref<android::app::FragmentTransaction>>(p1); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::detach(ref<android::app::Fragment> p1) { return call_method<SCAPIX_META_STRING("detach"), ref<android::app::FragmentTransaction>>(p1); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::attach(ref<android::app::Fragment> p1) { return call_method<SCAPIX_META_STRING("attach"), ref<android::app::FragmentTransaction>>(p1); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::setPrimaryNavigationFragment(ref<android::app::Fragment> p1) { return call_method<SCAPIX_META_STRING("setPrimaryNavigationFragment"), ref<android::app::FragmentTransaction>>(p1); }
inline jboolean FragmentTransaction::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::setCustomAnimations(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("setCustomAnimations"), ref<android::app::FragmentTransaction>>(p1, p2); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::setCustomAnimations(jint p1, jint p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("setCustomAnimations"), ref<android::app::FragmentTransaction>>(p1, p2, p3, p4); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::setTransition(jint p1) { return call_method<SCAPIX_META_STRING("setTransition"), ref<android::app::FragmentTransaction>>(p1); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::addSharedElement(ref<android::view::View> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("addSharedElement"), ref<android::app::FragmentTransaction>>(p1, p2); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::setTransitionStyle(jint p1) { return call_method<SCAPIX_META_STRING("setTransitionStyle"), ref<android::app::FragmentTransaction>>(p1); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::addToBackStack(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("addToBackStack"), ref<android::app::FragmentTransaction>>(p1); }
inline jboolean FragmentTransaction::isAddToBackStackAllowed() { return call_method<SCAPIX_META_STRING("isAddToBackStackAllowed"), jboolean>(); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::disallowAddToBackStack() { return call_method<SCAPIX_META_STRING("disallowAddToBackStack"), ref<android::app::FragmentTransaction>>(); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::setBreadCrumbTitle(jint p1) { return call_method<SCAPIX_META_STRING("setBreadCrumbTitle"), ref<android::app::FragmentTransaction>>(p1); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::setBreadCrumbTitle(ref<java::lang::CharSequence> p1) { return call_method<SCAPIX_META_STRING("setBreadCrumbTitle"), ref<android::app::FragmentTransaction>>(p1); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::setBreadCrumbShortTitle(jint p1) { return call_method<SCAPIX_META_STRING("setBreadCrumbShortTitle"), ref<android::app::FragmentTransaction>>(p1); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::setBreadCrumbShortTitle(ref<java::lang::CharSequence> p1) { return call_method<SCAPIX_META_STRING("setBreadCrumbShortTitle"), ref<android::app::FragmentTransaction>>(p1); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::setReorderingAllowed(jboolean p1) { return call_method<SCAPIX_META_STRING("setReorderingAllowed"), ref<android::app::FragmentTransaction>>(p1); }
inline ref<android::app::FragmentTransaction> FragmentTransaction::runOnCommit(ref<java::lang::Runnable> p1) { return call_method<SCAPIX_META_STRING("runOnCommit"), ref<android::app::FragmentTransaction>>(p1); }
inline jint FragmentTransaction::commit() { return call_method<SCAPIX_META_STRING("commit"), jint>(); }
inline jint FragmentTransaction::commitAllowingStateLoss() { return call_method<SCAPIX_META_STRING("commitAllowingStateLoss"), jint>(); }
inline void FragmentTransaction::commitNow() { return call_method<SCAPIX_META_STRING("commitNow"), void>(); }
inline void FragmentTransaction::commitNowAllowingStateLoss() { return call_method<SCAPIX_META_STRING("commitNowAllowingStateLoss"), void>(); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_FRAGMENTTRANSACTION_H
