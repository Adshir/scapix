// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_APP_FRAGMENTCONTROLLER_H
#define SCAPIX_ANDROID_APP_FRAGMENTCONTROLLER_H

namespace scapix::java_api {

namespace android::app { class Fragment; }
namespace android::app { class FragmentHostCallback; }
namespace android::app { class FragmentManager; }
namespace android::app { class FragmentManagerNonConfig; }
namespace android::app { class LoaderManager; }
namespace android::content { class Context; }
namespace android::content::res { class Configuration; }
namespace android::os { class Parcelable; }
namespace android::util { class ArrayMap; }
namespace android::util { class AttributeSet; }
namespace android::view { class Menu; }
namespace android::view { class MenuInflater; }
namespace android::view { class MenuItem; }
namespace android::view { class View; }
namespace java::io { class FileDescriptor; }
namespace java::io { class PrintWriter; }
namespace java::lang { class String; }
namespace java::util { class List; }

namespace android::app {

class FragmentController : public object_base<SCAPIX_META_STRING("android/app/FragmentController"),
	java::lang::Object>
{
public:

	static ref<android::app::FragmentController> createController(ref<android::app::FragmentHostCallback> callbacks);
	ref<android::app::FragmentManager> getFragmentManager();
	ref<android::app::LoaderManager> getLoaderManager();
	ref<android::app::Fragment> findFragmentByWho(ref<java::lang::String> who);
	void attachHost(ref<android::app::Fragment> parent);
	ref<android::view::View> onCreateView(ref<android::view::View> parent, ref<java::lang::String> name, ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	void noteStateNotSaved();
	ref<android::os::Parcelable> saveAllState();
	void restoreAllState(ref<android::os::Parcelable> state, ref<java::util::List> nonConfigList);
	void restoreAllState(ref<android::os::Parcelable> state, ref<android::app::FragmentManagerNonConfig> nonConfig);
	ref<java::util::List> retainNonConfig();
	ref<android::app::FragmentManagerNonConfig> retainNestedNonConfig();
	void dispatchCreate();
	void dispatchActivityCreated();
	void dispatchStart();
	void dispatchResume();
	void dispatchPause();
	void dispatchStop();
	void dispatchDestroyView();
	void dispatchDestroy();
	void dispatchMultiWindowModeChanged(jboolean isInMultiWindowMode);
	void dispatchMultiWindowModeChanged(jboolean isInMultiWindowMode, ref<android::content::res::Configuration> newConfig);
	void dispatchPictureInPictureModeChanged(jboolean isInPictureInPictureMode);
	void dispatchPictureInPictureModeChanged(jboolean isInPictureInPictureMode, ref<android::content::res::Configuration> newConfig);
	void dispatchConfigurationChanged(ref<android::content::res::Configuration> newConfig);
	void dispatchLowMemory();
	void dispatchTrimMemory(jint level);
	jboolean dispatchCreateOptionsMenu(ref<android::view::Menu> menu, ref<android::view::MenuInflater> inflater);
	jboolean dispatchPrepareOptionsMenu(ref<android::view::Menu> menu);
	jboolean dispatchOptionsItemSelected(ref<android::view::MenuItem> item);
	jboolean dispatchContextItemSelected(ref<android::view::MenuItem> item);
	void dispatchOptionsMenuClosed(ref<android::view::Menu> menu);
	jboolean execPendingActions();
	void doLoaderStart();
	void doLoaderStop(jboolean retain);
	void doLoaderDestroy();
	void reportLoaderStart();
	ref<android::util::ArrayMap> retainLoaderNonConfig();
	void restoreLoaderNonConfig(ref<android::util::ArrayMap> loaderManagers);
	void dumpLoaders(ref<java::lang::String> prefix, ref<java::io::FileDescriptor> fd, ref<java::io::PrintWriter> writer, ref<link::java::array<java::lang::String>> args);

protected:

	FragmentController(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/app/Fragment.h>
#include <scapix/java_api/android/app/FragmentHostCallback.h>
#include <scapix/java_api/android/app/FragmentManager.h>
#include <scapix/java_api/android/app/FragmentManagerNonConfig.h>
#include <scapix/java_api/android/app/LoaderManager.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/Configuration.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/android/util/ArrayMap.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/Menu.h>
#include <scapix/java_api/android/view/MenuInflater.h>
#include <scapix/java_api/android/view/MenuItem.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::app {

inline ref<android::app::FragmentController> FragmentController::createController(ref<android::app::FragmentHostCallback> callbacks) { return call_static_method<SCAPIX_META_STRING("createController"), ref<android::app::FragmentController>>(callbacks); }
inline ref<android::app::FragmentManager> FragmentController::getFragmentManager() { return call_method<SCAPIX_META_STRING("getFragmentManager"), ref<android::app::FragmentManager>>(); }
inline ref<android::app::LoaderManager> FragmentController::getLoaderManager() { return call_method<SCAPIX_META_STRING("getLoaderManager"), ref<android::app::LoaderManager>>(); }
inline ref<android::app::Fragment> FragmentController::findFragmentByWho(ref<java::lang::String> who) { return call_method<SCAPIX_META_STRING("findFragmentByWho"), ref<android::app::Fragment>>(who); }
inline void FragmentController::attachHost(ref<android::app::Fragment> parent) { return call_method<SCAPIX_META_STRING("attachHost"), void>(parent); }
inline ref<android::view::View> FragmentController::onCreateView(ref<android::view::View> parent, ref<java::lang::String> name, ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return call_method<SCAPIX_META_STRING("onCreateView"), ref<android::view::View>>(parent, name, context, attrs); }
inline void FragmentController::noteStateNotSaved() { return call_method<SCAPIX_META_STRING("noteStateNotSaved"), void>(); }
inline ref<android::os::Parcelable> FragmentController::saveAllState() { return call_method<SCAPIX_META_STRING("saveAllState"), ref<android::os::Parcelable>>(); }
inline void FragmentController::restoreAllState(ref<android::os::Parcelable> state, ref<java::util::List> nonConfigList) { return call_method<SCAPIX_META_STRING("restoreAllState"), void>(state, nonConfigList); }
inline void FragmentController::restoreAllState(ref<android::os::Parcelable> state, ref<android::app::FragmentManagerNonConfig> nonConfig) { return call_method<SCAPIX_META_STRING("restoreAllState"), void>(state, nonConfig); }
inline ref<java::util::List> FragmentController::retainNonConfig() { return call_method<SCAPIX_META_STRING("retainNonConfig"), ref<java::util::List>>(); }
inline ref<android::app::FragmentManagerNonConfig> FragmentController::retainNestedNonConfig() { return call_method<SCAPIX_META_STRING("retainNestedNonConfig"), ref<android::app::FragmentManagerNonConfig>>(); }
inline void FragmentController::dispatchCreate() { return call_method<SCAPIX_META_STRING("dispatchCreate"), void>(); }
inline void FragmentController::dispatchActivityCreated() { return call_method<SCAPIX_META_STRING("dispatchActivityCreated"), void>(); }
inline void FragmentController::dispatchStart() { return call_method<SCAPIX_META_STRING("dispatchStart"), void>(); }
inline void FragmentController::dispatchResume() { return call_method<SCAPIX_META_STRING("dispatchResume"), void>(); }
inline void FragmentController::dispatchPause() { return call_method<SCAPIX_META_STRING("dispatchPause"), void>(); }
inline void FragmentController::dispatchStop() { return call_method<SCAPIX_META_STRING("dispatchStop"), void>(); }
inline void FragmentController::dispatchDestroyView() { return call_method<SCAPIX_META_STRING("dispatchDestroyView"), void>(); }
inline void FragmentController::dispatchDestroy() { return call_method<SCAPIX_META_STRING("dispatchDestroy"), void>(); }
inline void FragmentController::dispatchMultiWindowModeChanged(jboolean isInMultiWindowMode) { return call_method<SCAPIX_META_STRING("dispatchMultiWindowModeChanged"), void>(isInMultiWindowMode); }
inline void FragmentController::dispatchMultiWindowModeChanged(jboolean isInMultiWindowMode, ref<android::content::res::Configuration> newConfig) { return call_method<SCAPIX_META_STRING("dispatchMultiWindowModeChanged"), void>(isInMultiWindowMode, newConfig); }
inline void FragmentController::dispatchPictureInPictureModeChanged(jboolean isInPictureInPictureMode) { return call_method<SCAPIX_META_STRING("dispatchPictureInPictureModeChanged"), void>(isInPictureInPictureMode); }
inline void FragmentController::dispatchPictureInPictureModeChanged(jboolean isInPictureInPictureMode, ref<android::content::res::Configuration> newConfig) { return call_method<SCAPIX_META_STRING("dispatchPictureInPictureModeChanged"), void>(isInPictureInPictureMode, newConfig); }
inline void FragmentController::dispatchConfigurationChanged(ref<android::content::res::Configuration> newConfig) { return call_method<SCAPIX_META_STRING("dispatchConfigurationChanged"), void>(newConfig); }
inline void FragmentController::dispatchLowMemory() { return call_method<SCAPIX_META_STRING("dispatchLowMemory"), void>(); }
inline void FragmentController::dispatchTrimMemory(jint level) { return call_method<SCAPIX_META_STRING("dispatchTrimMemory"), void>(level); }
inline jboolean FragmentController::dispatchCreateOptionsMenu(ref<android::view::Menu> menu, ref<android::view::MenuInflater> inflater) { return call_method<SCAPIX_META_STRING("dispatchCreateOptionsMenu"), jboolean>(menu, inflater); }
inline jboolean FragmentController::dispatchPrepareOptionsMenu(ref<android::view::Menu> menu) { return call_method<SCAPIX_META_STRING("dispatchPrepareOptionsMenu"), jboolean>(menu); }
inline jboolean FragmentController::dispatchOptionsItemSelected(ref<android::view::MenuItem> item) { return call_method<SCAPIX_META_STRING("dispatchOptionsItemSelected"), jboolean>(item); }
inline jboolean FragmentController::dispatchContextItemSelected(ref<android::view::MenuItem> item) { return call_method<SCAPIX_META_STRING("dispatchContextItemSelected"), jboolean>(item); }
inline void FragmentController::dispatchOptionsMenuClosed(ref<android::view::Menu> menu) { return call_method<SCAPIX_META_STRING("dispatchOptionsMenuClosed"), void>(menu); }
inline jboolean FragmentController::execPendingActions() { return call_method<SCAPIX_META_STRING("execPendingActions"), jboolean>(); }
inline void FragmentController::doLoaderStart() { return call_method<SCAPIX_META_STRING("doLoaderStart"), void>(); }
inline void FragmentController::doLoaderStop(jboolean retain) { return call_method<SCAPIX_META_STRING("doLoaderStop"), void>(retain); }
inline void FragmentController::doLoaderDestroy() { return call_method<SCAPIX_META_STRING("doLoaderDestroy"), void>(); }
inline void FragmentController::reportLoaderStart() { return call_method<SCAPIX_META_STRING("reportLoaderStart"), void>(); }
inline ref<android::util::ArrayMap> FragmentController::retainLoaderNonConfig() { return call_method<SCAPIX_META_STRING("retainLoaderNonConfig"), ref<android::util::ArrayMap>>(); }
inline void FragmentController::restoreLoaderNonConfig(ref<android::util::ArrayMap> loaderManagers) { return call_method<SCAPIX_META_STRING("restoreLoaderNonConfig"), void>(loaderManagers); }
inline void FragmentController::dumpLoaders(ref<java::lang::String> prefix, ref<java::io::FileDescriptor> fd, ref<java::io::PrintWriter> writer, ref<link::java::array<java::lang::String>> args) { return call_method<SCAPIX_META_STRING("dumpLoaders"), void>(prefix, fd, writer, args); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_FRAGMENTCONTROLLER_H
