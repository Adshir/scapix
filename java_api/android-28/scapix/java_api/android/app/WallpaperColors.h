// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_APP_WALLPAPERCOLORS_H
#define SCAPIX_ANDROID_APP_WALLPAPERCOLORS_H

namespace scapix::java_api {

namespace android::graphics { class Bitmap; }
namespace android::graphics { class Color; }
namespace android::graphics::drawable { class Drawable; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::app {

class WallpaperColors : public object_base<SCAPIX_META_STRING("android/app/WallpaperColors"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();

	static ref<WallpaperColors> new_object(ref<android::os::Parcel> parcel);
	static ref<WallpaperColors> new_object(ref<android::graphics::Color> primaryColor, ref<android::graphics::Color> secondaryColor, ref<android::graphics::Color> tertiaryColor);
	static ref<android::app::WallpaperColors> fromDrawable(ref<android::graphics::drawable::Drawable> drawable);
	static ref<android::app::WallpaperColors> fromBitmap(ref<android::graphics::Bitmap> bitmap);
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	ref<android::graphics::Color> getPrimaryColor();
	ref<android::graphics::Color> getSecondaryColor();
	ref<android::graphics::Color> getTertiaryColor();
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	WallpaperColors(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/Color.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::app {

inline ref<android::os::Parcelable_Creator> WallpaperColors::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<WallpaperColors> WallpaperColors::new_object(ref<android::os::Parcel> parcel) { return base_::new_object(parcel); }
inline ref<WallpaperColors> WallpaperColors::new_object(ref<android::graphics::Color> primaryColor, ref<android::graphics::Color> secondaryColor, ref<android::graphics::Color> tertiaryColor) { return base_::new_object(primaryColor, secondaryColor, tertiaryColor); }
inline ref<android::app::WallpaperColors> WallpaperColors::fromDrawable(ref<android::graphics::drawable::Drawable> drawable) { return call_static_method<SCAPIX_META_STRING("fromDrawable"), ref<android::app::WallpaperColors>>(drawable); }
inline ref<android::app::WallpaperColors> WallpaperColors::fromBitmap(ref<android::graphics::Bitmap> bitmap) { return call_static_method<SCAPIX_META_STRING("fromBitmap"), ref<android::app::WallpaperColors>>(bitmap); }
inline jint WallpaperColors::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void WallpaperColors::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline ref<android::graphics::Color> WallpaperColors::getPrimaryColor() { return call_method<SCAPIX_META_STRING("getPrimaryColor"), ref<android::graphics::Color>>(); }
inline ref<android::graphics::Color> WallpaperColors::getSecondaryColor() { return call_method<SCAPIX_META_STRING("getSecondaryColor"), ref<android::graphics::Color>>(); }
inline ref<android::graphics::Color> WallpaperColors::getTertiaryColor() { return call_method<SCAPIX_META_STRING("getTertiaryColor"), ref<android::graphics::Color>>(); }
inline jboolean WallpaperColors::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint WallpaperColors::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> WallpaperColors::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_WALLPAPERCOLORS_H
