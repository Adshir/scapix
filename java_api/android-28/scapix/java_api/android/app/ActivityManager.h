// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_APP_ACTIVITYMANAGER_H
#define SCAPIX_ANDROID_APP_ACTIVITYMANAGER_H

namespace scapix::java_api {

namespace android::app { class Activity; }
namespace android::app { class ActivityManager_MemoryInfo; }
namespace android::app { class ActivityManager_RunningAppProcessInfo; }
namespace android::app { class ActivityManager_TaskDescription; }
namespace android::app { class PendingIntent; }
namespace android::content { class ComponentName; }
namespace android::content { class Intent; }
namespace android::content::pm { class ConfigurationInfo; }
namespace android::graphics { class Bitmap; }
namespace android::os { class Bundle; }
namespace android::os { class Debug_MemoryInfo; }
namespace android::util { class Size; }
namespace java::io { class FileDescriptor; }
namespace java::lang { class String; }
namespace java::util { class List; }
namespace android::app { class ActivityManager_RunningTaskInfo; }
namespace android::app { class ActivityManager_RunningServiceInfo; }
namespace android::app { class ActivityManager_RecentTaskInfo; }
namespace android::app { class ActivityManager_ProcessErrorStateInfo; }
namespace android::app { class ActivityManager_AppTask; }

namespace android::app {

class ActivityManager : public object_base<SCAPIX_META_STRING("android/app/ActivityManager"),
	java::lang::Object>
{
public:

	using TaskDescription = ActivityManager_TaskDescription;
	using RunningTaskInfo = ActivityManager_RunningTaskInfo;
	using RunningServiceInfo = ActivityManager_RunningServiceInfo;
	using RunningAppProcessInfo = ActivityManager_RunningAppProcessInfo;
	using RecentTaskInfo = ActivityManager_RecentTaskInfo;
	using ProcessErrorStateInfo = ActivityManager_ProcessErrorStateInfo;
	using MemoryInfo = ActivityManager_MemoryInfo;
	using AppTask = ActivityManager_AppTask;

	static ref<java::lang::String> ACTION_REPORT_HEAP_LIMIT_();
	static jint LOCK_TASK_MODE_LOCKED_();
	static jint LOCK_TASK_MODE_NONE_();
	static jint LOCK_TASK_MODE_PINNED_();
	static ref<java::lang::String> META_HOME_ALTERNATE_();
	static jint MOVE_TASK_NO_USER_ACTION_();
	static jint MOVE_TASK_WITH_HOME_();
	static jint RECENT_IGNORE_UNAVAILABLE_();
	static jint RECENT_WITH_EXCLUDED_();

	jint getMemoryClass();
	jint getLargeMemoryClass();
	jboolean isLowRamDevice();
	ref<java::util::List> getRecentTasks(jint maxNum, jint flags);
	ref<java::util::List> getAppTasks();
	ref<android::util::Size> getAppTaskThumbnailSize();
	jint addAppTask(ref<android::app::Activity> activity, ref<android::content::Intent> intent, ref<android::app::ActivityManager_TaskDescription> description, ref<android::graphics::Bitmap> thumbnail);
	ref<java::util::List> getRunningTasks(jint maxNum);
	void moveTaskToFront(jint taskId, jint flags);
	void moveTaskToFront(jint taskId, jint flags, ref<android::os::Bundle> options);
	ref<java::util::List> getRunningServices(jint maxNum);
	ref<android::app::PendingIntent> getRunningServiceControlPanel(ref<android::content::ComponentName> service);
	void getMemoryInfo(ref<android::app::ActivityManager_MemoryInfo> outInfo);
	jboolean clearApplicationUserData();
	ref<java::util::List> getProcessesInErrorState();
	jboolean isBackgroundRestricted();
	ref<java::util::List> getRunningAppProcesses();
	static void getMyMemoryState(ref<android::app::ActivityManager_RunningAppProcessInfo> outState);
	ref<link::java::array<android::os::Debug_MemoryInfo>> getProcessMemoryInfo(ref<link::java::array<jint>> pids);
	void restartPackage(ref<java::lang::String> packageName);
	void killBackgroundProcesses(ref<java::lang::String> packageName);
	ref<android::content::pm::ConfigurationInfo> getDeviceConfigurationInfo();
	jint getLauncherLargeIconDensity();
	jint getLauncherLargeIconSize();
	static jboolean isUserAMonkey();
	static jboolean isRunningInTestHarness();
	void dumpPackageState(ref<java::io::FileDescriptor> fd, ref<java::lang::String> packageName);
	void setWatchHeapLimit(jlong pssSize);
	void clearWatchHeapLimit();
	jboolean isInLockTaskMode();
	jint getLockTaskModeState();
	static void setVrThread(jint tid);

protected:

	ActivityManager(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/app/Activity.h>
#include <scapix/java_api/android/app/ActivityManager_MemoryInfo.h>
#include <scapix/java_api/android/app/ActivityManager_RunningAppProcessInfo.h>
#include <scapix/java_api/android/app/ActivityManager_TaskDescription.h>
#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/pm/ConfigurationInfo.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Debug_MemoryInfo.h>
#include <scapix/java_api/android/util/Size.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::app {

inline ref<java::lang::String> ActivityManager::ACTION_REPORT_HEAP_LIMIT_() { return get_static_field<SCAPIX_META_STRING("ACTION_REPORT_HEAP_LIMIT"), ref<java::lang::String>>(); }
inline jint ActivityManager::LOCK_TASK_MODE_LOCKED_() { return get_static_field<SCAPIX_META_STRING("LOCK_TASK_MODE_LOCKED"), jint>(); }
inline jint ActivityManager::LOCK_TASK_MODE_NONE_() { return get_static_field<SCAPIX_META_STRING("LOCK_TASK_MODE_NONE"), jint>(); }
inline jint ActivityManager::LOCK_TASK_MODE_PINNED_() { return get_static_field<SCAPIX_META_STRING("LOCK_TASK_MODE_PINNED"), jint>(); }
inline ref<java::lang::String> ActivityManager::META_HOME_ALTERNATE_() { return get_static_field<SCAPIX_META_STRING("META_HOME_ALTERNATE"), ref<java::lang::String>>(); }
inline jint ActivityManager::MOVE_TASK_NO_USER_ACTION_() { return get_static_field<SCAPIX_META_STRING("MOVE_TASK_NO_USER_ACTION"), jint>(); }
inline jint ActivityManager::MOVE_TASK_WITH_HOME_() { return get_static_field<SCAPIX_META_STRING("MOVE_TASK_WITH_HOME"), jint>(); }
inline jint ActivityManager::RECENT_IGNORE_UNAVAILABLE_() { return get_static_field<SCAPIX_META_STRING("RECENT_IGNORE_UNAVAILABLE"), jint>(); }
inline jint ActivityManager::RECENT_WITH_EXCLUDED_() { return get_static_field<SCAPIX_META_STRING("RECENT_WITH_EXCLUDED"), jint>(); }
inline jint ActivityManager::getMemoryClass() { return call_method<SCAPIX_META_STRING("getMemoryClass"), jint>(); }
inline jint ActivityManager::getLargeMemoryClass() { return call_method<SCAPIX_META_STRING("getLargeMemoryClass"), jint>(); }
inline jboolean ActivityManager::isLowRamDevice() { return call_method<SCAPIX_META_STRING("isLowRamDevice"), jboolean>(); }
inline ref<java::util::List> ActivityManager::getRecentTasks(jint maxNum, jint flags) { return call_method<SCAPIX_META_STRING("getRecentTasks"), ref<java::util::List>>(maxNum, flags); }
inline ref<java::util::List> ActivityManager::getAppTasks() { return call_method<SCAPIX_META_STRING("getAppTasks"), ref<java::util::List>>(); }
inline ref<android::util::Size> ActivityManager::getAppTaskThumbnailSize() { return call_method<SCAPIX_META_STRING("getAppTaskThumbnailSize"), ref<android::util::Size>>(); }
inline jint ActivityManager::addAppTask(ref<android::app::Activity> activity, ref<android::content::Intent> intent, ref<android::app::ActivityManager_TaskDescription> description, ref<android::graphics::Bitmap> thumbnail) { return call_method<SCAPIX_META_STRING("addAppTask"), jint>(activity, intent, description, thumbnail); }
inline ref<java::util::List> ActivityManager::getRunningTasks(jint maxNum) { return call_method<SCAPIX_META_STRING("getRunningTasks"), ref<java::util::List>>(maxNum); }
inline void ActivityManager::moveTaskToFront(jint taskId, jint flags) { return call_method<SCAPIX_META_STRING("moveTaskToFront"), void>(taskId, flags); }
inline void ActivityManager::moveTaskToFront(jint taskId, jint flags, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("moveTaskToFront"), void>(taskId, flags, options); }
inline ref<java::util::List> ActivityManager::getRunningServices(jint maxNum) { return call_method<SCAPIX_META_STRING("getRunningServices"), ref<java::util::List>>(maxNum); }
inline ref<android::app::PendingIntent> ActivityManager::getRunningServiceControlPanel(ref<android::content::ComponentName> service) { return call_method<SCAPIX_META_STRING("getRunningServiceControlPanel"), ref<android::app::PendingIntent>>(service); }
inline void ActivityManager::getMemoryInfo(ref<android::app::ActivityManager_MemoryInfo> outInfo) { return call_method<SCAPIX_META_STRING("getMemoryInfo"), void>(outInfo); }
inline jboolean ActivityManager::clearApplicationUserData() { return call_method<SCAPIX_META_STRING("clearApplicationUserData"), jboolean>(); }
inline ref<java::util::List> ActivityManager::getProcessesInErrorState() { return call_method<SCAPIX_META_STRING("getProcessesInErrorState"), ref<java::util::List>>(); }
inline jboolean ActivityManager::isBackgroundRestricted() { return call_method<SCAPIX_META_STRING("isBackgroundRestricted"), jboolean>(); }
inline ref<java::util::List> ActivityManager::getRunningAppProcesses() { return call_method<SCAPIX_META_STRING("getRunningAppProcesses"), ref<java::util::List>>(); }
inline void ActivityManager::getMyMemoryState(ref<android::app::ActivityManager_RunningAppProcessInfo> outState) { return call_static_method<SCAPIX_META_STRING("getMyMemoryState"), void>(outState); }
inline ref<link::java::array<android::os::Debug_MemoryInfo>> ActivityManager::getProcessMemoryInfo(ref<link::java::array<jint>> pids) { return call_method<SCAPIX_META_STRING("getProcessMemoryInfo"), ref<link::java::array<android::os::Debug_MemoryInfo>>>(pids); }
inline void ActivityManager::restartPackage(ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("restartPackage"), void>(packageName); }
inline void ActivityManager::killBackgroundProcesses(ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("killBackgroundProcesses"), void>(packageName); }
inline ref<android::content::pm::ConfigurationInfo> ActivityManager::getDeviceConfigurationInfo() { return call_method<SCAPIX_META_STRING("getDeviceConfigurationInfo"), ref<android::content::pm::ConfigurationInfo>>(); }
inline jint ActivityManager::getLauncherLargeIconDensity() { return call_method<SCAPIX_META_STRING("getLauncherLargeIconDensity"), jint>(); }
inline jint ActivityManager::getLauncherLargeIconSize() { return call_method<SCAPIX_META_STRING("getLauncherLargeIconSize"), jint>(); }
inline jboolean ActivityManager::isUserAMonkey() { return call_static_method<SCAPIX_META_STRING("isUserAMonkey"), jboolean>(); }
inline jboolean ActivityManager::isRunningInTestHarness() { return call_static_method<SCAPIX_META_STRING("isRunningInTestHarness"), jboolean>(); }
inline void ActivityManager::dumpPackageState(ref<java::io::FileDescriptor> fd, ref<java::lang::String> packageName) { return call_method<SCAPIX_META_STRING("dumpPackageState"), void>(fd, packageName); }
inline void ActivityManager::setWatchHeapLimit(jlong pssSize) { return call_method<SCAPIX_META_STRING("setWatchHeapLimit"), void>(pssSize); }
inline void ActivityManager::clearWatchHeapLimit() { return call_method<SCAPIX_META_STRING("clearWatchHeapLimit"), void>(); }
inline jboolean ActivityManager::isInLockTaskMode() { return call_method<SCAPIX_META_STRING("isInLockTaskMode"), jboolean>(); }
inline jint ActivityManager::getLockTaskModeState() { return call_method<SCAPIX_META_STRING("getLockTaskModeState"), jint>(); }
inline void ActivityManager::setVrThread(jint tid) { return call_static_method<SCAPIX_META_STRING("setVrThread"), void>(tid); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_ACTIVITYMANAGER_H
