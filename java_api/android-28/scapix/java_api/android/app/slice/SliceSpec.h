// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_APP_SLICE_SLICESPEC_H
#define SCAPIX_ANDROID_APP_SLICE_SLICESPEC_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::app::slice {

class SliceSpec : public object_base<SCAPIX_META_STRING("android/app/slice/SliceSpec"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();

	static ref<SliceSpec> new_object(ref<java::lang::String> type, jint revision);
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	ref<java::lang::String> getType();
	jint getRevision();
	jboolean canRender(ref<android::app::slice::SliceSpec> candidate);
	jboolean equals(ref<java::lang::Object> obj);
	ref<java::lang::String> toString();

protected:

	SliceSpec(handle_type h) : base_(h) {}

};

} // namespace android::app::slice
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::app::slice {

inline ref<android::os::Parcelable_Creator> SliceSpec::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<SliceSpec> SliceSpec::new_object(ref<java::lang::String> type, jint revision) { return base_::new_object(type, revision); }
inline jint SliceSpec::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void SliceSpec::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline ref<java::lang::String> SliceSpec::getType() { return call_method<SCAPIX_META_STRING("getType"), ref<java::lang::String>>(); }
inline jint SliceSpec::getRevision() { return call_method<SCAPIX_META_STRING("getRevision"), jint>(); }
inline jboolean SliceSpec::canRender(ref<android::app::slice::SliceSpec> candidate) { return call_method<SCAPIX_META_STRING("canRender"), jboolean>(candidate); }
inline jboolean SliceSpec::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline ref<java::lang::String> SliceSpec::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::app::slice
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_SLICE_SLICESPEC_H
