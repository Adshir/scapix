// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/content/ContentProvider.h>

#ifndef SCAPIX_ANDROID_APP_SLICE_SLICEPROVIDER_H
#define SCAPIX_ANDROID_APP_SLICE_SLICEPROVIDER_H

namespace scapix::java_api {

namespace android::app { class PendingIntent; }
namespace android::app::slice { class Slice; }
namespace android::content { class ContentValues; }
namespace android::content { class Context; }
namespace android::content { class Intent; }
namespace android::content::pm { class ProviderInfo; }
namespace android::database { class Cursor; }
namespace android::net { class Uri; }
namespace android::os { class Bundle; }
namespace android::os { class CancellationSignal; }
namespace java::lang { class String; }
namespace java::util { class Collection; }
namespace java::util { class Set; }

namespace android::app::slice {

class SliceProvider : public object_base<SCAPIX_META_STRING("android/app/slice/SliceProvider"),
	android::content::ContentProvider>
{
public:

	static ref<java::lang::String> SLICE_TYPE_();

	static ref<SliceProvider> new_object(ref<link::java::array<java::lang::String>> autoGrantPermissions);
	static ref<SliceProvider> new_object();
	void attachInfo(ref<android::content::Context> context, ref<android::content::pm::ProviderInfo> info);
	ref<android::app::slice::Slice> onBindSlice(ref<android::net::Uri> sliceUri, ref<java::util::Set> supportedSpecs);
	void onSlicePinned(ref<android::net::Uri> sliceUri);
	void onSliceUnpinned(ref<android::net::Uri> sliceUri);
	ref<java::util::Collection> onGetSliceDescendants(ref<android::net::Uri> uri);
	ref<android::net::Uri> onMapIntentToUri(ref<android::content::Intent> intent);
	ref<android::app::PendingIntent> onCreatePermissionRequest(ref<android::net::Uri> sliceUri);
	jint update(ref<android::net::Uri> uri, ref<android::content::ContentValues> values, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs);
	jint delete_(ref<android::net::Uri> uri, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs);
	ref<android::database::Cursor> query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder);
	ref<android::database::Cursor> query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder, ref<android::os::CancellationSignal> cancellationSignal);
	ref<android::database::Cursor> query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<android::os::Bundle> queryArgs, ref<android::os::CancellationSignal> cancellationSignal);
	ref<android::net::Uri> insert(ref<android::net::Uri> uri, ref<android::content::ContentValues> values);
	ref<java::lang::String> getType(ref<android::net::Uri> uri);
	ref<android::os::Bundle> call(ref<java::lang::String> method, ref<java::lang::String> arg, ref<android::os::Bundle> extras);

protected:

	SliceProvider(handle_type h) : base_(h) {}

};

} // namespace android::app::slice
} // namespace scapix::java_api

#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/app/slice/Slice.h>
#include <scapix/java_api/android/content/ContentValues.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/pm/ProviderInfo.h>
#include <scapix/java_api/android/database/Cursor.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/CancellationSignal.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace android::app::slice {

inline ref<java::lang::String> SliceProvider::SLICE_TYPE_() { return get_static_field<SCAPIX_META_STRING("SLICE_TYPE"), ref<java::lang::String>>(); }
inline ref<SliceProvider> SliceProvider::new_object(ref<link::java::array<java::lang::String>> autoGrantPermissions) { return base_::new_object(autoGrantPermissions); }
inline ref<SliceProvider> SliceProvider::new_object() { return base_::new_object(); }
inline void SliceProvider::attachInfo(ref<android::content::Context> context, ref<android::content::pm::ProviderInfo> info) { return call_method<SCAPIX_META_STRING("attachInfo"), void>(context, info); }
inline ref<android::app::slice::Slice> SliceProvider::onBindSlice(ref<android::net::Uri> sliceUri, ref<java::util::Set> supportedSpecs) { return call_method<SCAPIX_META_STRING("onBindSlice"), ref<android::app::slice::Slice>>(sliceUri, supportedSpecs); }
inline void SliceProvider::onSlicePinned(ref<android::net::Uri> sliceUri) { return call_method<SCAPIX_META_STRING("onSlicePinned"), void>(sliceUri); }
inline void SliceProvider::onSliceUnpinned(ref<android::net::Uri> sliceUri) { return call_method<SCAPIX_META_STRING("onSliceUnpinned"), void>(sliceUri); }
inline ref<java::util::Collection> SliceProvider::onGetSliceDescendants(ref<android::net::Uri> uri) { return call_method<SCAPIX_META_STRING("onGetSliceDescendants"), ref<java::util::Collection>>(uri); }
inline ref<android::net::Uri> SliceProvider::onMapIntentToUri(ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onMapIntentToUri"), ref<android::net::Uri>>(intent); }
inline ref<android::app::PendingIntent> SliceProvider::onCreatePermissionRequest(ref<android::net::Uri> sliceUri) { return call_method<SCAPIX_META_STRING("onCreatePermissionRequest"), ref<android::app::PendingIntent>>(sliceUri); }
inline jint SliceProvider::update(ref<android::net::Uri> uri, ref<android::content::ContentValues> values, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs) { return call_method<SCAPIX_META_STRING("update"), jint>(uri, values, selection, selectionArgs); }
inline jint SliceProvider::delete_(ref<android::net::Uri> uri, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs) { return call_method<SCAPIX_META_STRING("delete"), jint>(uri, selection, selectionArgs); }
inline ref<android::database::Cursor> SliceProvider::query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder) { return call_method<SCAPIX_META_STRING("query"), ref<android::database::Cursor>>(uri, projection, selection, selectionArgs, sortOrder); }
inline ref<android::database::Cursor> SliceProvider::query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder, ref<android::os::CancellationSignal> cancellationSignal) { return call_method<SCAPIX_META_STRING("query"), ref<android::database::Cursor>>(uri, projection, selection, selectionArgs, sortOrder, cancellationSignal); }
inline ref<android::database::Cursor> SliceProvider::query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<android::os::Bundle> queryArgs, ref<android::os::CancellationSignal> cancellationSignal) { return call_method<SCAPIX_META_STRING("query"), ref<android::database::Cursor>>(uri, projection, queryArgs, cancellationSignal); }
inline ref<android::net::Uri> SliceProvider::insert(ref<android::net::Uri> uri, ref<android::content::ContentValues> values) { return call_method<SCAPIX_META_STRING("insert"), ref<android::net::Uri>>(uri, values); }
inline ref<java::lang::String> SliceProvider::getType(ref<android::net::Uri> uri) { return call_method<SCAPIX_META_STRING("getType"), ref<java::lang::String>>(uri); }
inline ref<android::os::Bundle> SliceProvider::call(ref<java::lang::String> method, ref<java::lang::String> arg, ref<android::os::Bundle> extras) { return call_method<SCAPIX_META_STRING("call"), ref<android::os::Bundle>>(method, arg, extras); }

} // namespace android::app::slice
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_SLICE_SLICEPROVIDER_H
