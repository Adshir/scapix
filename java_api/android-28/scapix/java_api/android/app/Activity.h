// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/view/ContextThemeWrapper.h>
#include <scapix/java_api/android/view/LayoutInflater_Factory2.h>
#include <scapix/java_api/android/view/Window_Callback.h>
#include <scapix/java_api/android/view/KeyEvent_Callback.h>
#include <scapix/java_api/android/view/View_OnCreateContextMenuListener.h>
#include <scapix/java_api/android/content/ComponentCallbacks2.h>

#ifndef SCAPIX_ANDROID_APP_ACTIVITY_H
#define SCAPIX_ANDROID_APP_ACTIVITY_H

namespace scapix::java_api {

namespace android::app { class ActionBar; }
namespace android::app { class ActivityManager_TaskDescription; }
namespace android::app { class Application; }
namespace android::app { class Fragment; }
namespace android::app { class FragmentManager; }
namespace android::app { class LoaderManager; }
namespace android::app { class PendingIntent; }
namespace android::app { class PictureInPictureParams; }
namespace android::app { class SharedElementCallback; }
namespace android::app { class TaskStackBuilder; }
namespace android::app { class VoiceInteractor; }
namespace android::app::assist { class AssistContent; }
namespace android::content { class ComponentName; }
namespace android::content { class Context; }
namespace android::content { class Intent; }
namespace android::content { class IntentSender; }
namespace android::content { class SharedPreferences; }
namespace android::content::res { class Configuration; }
namespace android::database { class Cursor; }
namespace android::graphics { class Bitmap; }
namespace android::graphics { class Canvas; }
namespace android::graphics::drawable { class Drawable; }
namespace android::media::session { class MediaController; }
namespace android::net { class Uri; }
namespace android::os { class Bundle; }
namespace android::os { class PersistableBundle; }
namespace android::transition { class Scene; }
namespace android::transition { class TransitionManager; }
namespace android::util { class AttributeSet; }
namespace android::view { class ActionMode; }
namespace android::view { class ActionMode_Callback; }
namespace android::view { class ContextMenu; }
namespace android::view { class ContextMenu_ContextMenuInfo; }
namespace android::view { class DragAndDropPermissions; }
namespace android::view { class DragEvent; }
namespace android::view { class KeyEvent; }
namespace android::view { class LayoutInflater; }
namespace android::view { class Menu; }
namespace android::view { class MenuInflater; }
namespace android::view { class MenuItem; }
namespace android::view { class MotionEvent; }
namespace android::view { class SearchEvent; }
namespace android::view { class View; }
namespace android::view { class ViewGroup_LayoutParams; }
namespace android::view { class Window; }
namespace android::view { class WindowManager; }
namespace android::view { class WindowManager_LayoutParams; }
namespace android::view::accessibility { class AccessibilityEvent; }
namespace android::widget { class Toolbar; }
namespace java::io { class FileDescriptor; }
namespace java::io { class PrintWriter; }
namespace java::lang { class CharSequence; }
namespace java::lang { class Object; }
namespace java::lang { class Runnable; }
namespace java::lang { class String; }
namespace java::util { class List; }

namespace android::app {

class Activity : public object_base<SCAPIX_META_STRING("android/app/Activity"),
	android::view::ContextThemeWrapper,
	android::view::LayoutInflater_Factory2,
	android::view::Window_Callback,
	android::view::KeyEvent_Callback,
	android::view::View_OnCreateContextMenuListener,
	android::content::ComponentCallbacks2>
{
public:

	static jint DEFAULT_KEYS_DIALER_();
	static jint DEFAULT_KEYS_DISABLE_();
	static jint DEFAULT_KEYS_SEARCH_GLOBAL_();
	static jint DEFAULT_KEYS_SEARCH_LOCAL_();
	static jint DEFAULT_KEYS_SHORTCUT_();
	static jint RESULT_CANCELED_();
	static jint RESULT_FIRST_USER_();
	static jint RESULT_OK_();

	static ref<Activity> new_object();
	ref<android::content::Intent> getIntent();
	void setIntent(ref<android::content::Intent> newIntent);
	ref<android::app::Application> getApplication();
	jboolean isChild();
	ref<android::app::Activity> getParent();
	ref<android::view::WindowManager> getWindowManager();
	ref<android::view::Window> getWindow();
	ref<android::app::LoaderManager> getLoaderManager();
	ref<android::view::View> getCurrentFocus();
	void onCreate(ref<android::os::Bundle> savedInstanceState, ref<android::os::PersistableBundle> persistentState);
	void onRestoreInstanceState(ref<android::os::Bundle> savedInstanceState, ref<android::os::PersistableBundle> persistentState);
	void onPostCreate(ref<android::os::Bundle> savedInstanceState, ref<android::os::PersistableBundle> persistentState);
	void onStateNotSaved();
	jboolean isVoiceInteraction();
	jboolean isVoiceInteractionRoot();
	ref<android::app::VoiceInteractor> getVoiceInteractor();
	jboolean isLocalVoiceInteractionSupported();
	void startLocalVoiceInteraction(ref<android::os::Bundle> privateOptions);
	void onLocalVoiceInteractionStarted();
	void onLocalVoiceInteractionStopped();
	void stopLocalVoiceInteraction();
	void onSaveInstanceState(ref<android::os::Bundle> outState, ref<android::os::PersistableBundle> outPersistentState);
	jboolean onCreateThumbnail(ref<android::graphics::Bitmap> outBitmap, ref<android::graphics::Canvas> canvas);
	ref<java::lang::CharSequence> onCreateDescription();
	void onProvideAssistData(ref<android::os::Bundle> data);
	void onProvideAssistContent(ref<android::app::assist::AssistContent> outContent);
	void requestShowKeyboardShortcuts();
	void dismissKeyboardShortcutsHelper();
	void onProvideKeyboardShortcuts(ref<java::util::List> data, ref<android::view::Menu> menu, jint deviceId);
	jboolean showAssist(ref<android::os::Bundle> args);
	void reportFullyDrawn();
	void onMultiWindowModeChanged(jboolean isInMultiWindowMode, ref<android::content::res::Configuration> newConfig);
	void onMultiWindowModeChanged(jboolean isInMultiWindowMode);
	jboolean isInMultiWindowMode();
	void onPictureInPictureModeChanged(jboolean isInPictureInPictureMode, ref<android::content::res::Configuration> newConfig);
	void onPictureInPictureModeChanged(jboolean isInPictureInPictureMode);
	jboolean isInPictureInPictureMode();
	void enterPictureInPictureMode();
	jboolean enterPictureInPictureMode(ref<android::app::PictureInPictureParams> params);
	void setPictureInPictureParams(ref<android::app::PictureInPictureParams> params);
	jint getMaxNumPictureInPictureActions();
	void onConfigurationChanged(ref<android::content::res::Configuration> newConfig);
	jint getChangingConfigurations();
	ref<java::lang::Object> getLastNonConfigurationInstance();
	ref<java::lang::Object> onRetainNonConfigurationInstance();
	void onLowMemory();
	void onTrimMemory(jint level);
	ref<android::app::FragmentManager> getFragmentManager();
	void onAttachFragment(ref<android::app::Fragment> fragment);
	ref<android::database::Cursor> managedQuery(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder);
	void startManagingCursor(ref<android::database::Cursor> c);
	void stopManagingCursor(ref<android::database::Cursor> c);
	ref<android::view::View> findViewById(jint id);
	ref<android::view::View> requireViewById(jint id);
	ref<android::app::ActionBar> getActionBar();
	void setActionBar(ref<android::widget::Toolbar> toolbar);
	void setContentView(jint layoutResID);
	void setContentView(ref<android::view::View> view);
	void setContentView(ref<android::view::View> view, ref<android::view::ViewGroup_LayoutParams> params);
	void addContentView(ref<android::view::View> view, ref<android::view::ViewGroup_LayoutParams> params);
	ref<android::transition::TransitionManager> getContentTransitionManager();
	void setContentTransitionManager(ref<android::transition::TransitionManager> tm);
	ref<android::transition::Scene> getContentScene();
	void setFinishOnTouchOutside(jboolean finish);
	void setDefaultKeyMode(jint mode);
	jboolean onKeyDown(jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onKeyLongPress(jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onKeyUp(jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onKeyMultiple(jint keyCode, jint repeatCount, ref<android::view::KeyEvent> event);
	void onBackPressed();
	jboolean onKeyShortcut(jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onTouchEvent(ref<android::view::MotionEvent> event);
	jboolean onTrackballEvent(ref<android::view::MotionEvent> event);
	jboolean onGenericMotionEvent(ref<android::view::MotionEvent> event);
	void onUserInteraction();
	void onWindowAttributesChanged(ref<android::view::WindowManager_LayoutParams> params);
	void onContentChanged();
	void onWindowFocusChanged(jboolean hasFocus);
	void onAttachedToWindow();
	void onDetachedFromWindow();
	jboolean hasWindowFocus();
	jboolean dispatchKeyEvent(ref<android::view::KeyEvent> event);
	jboolean dispatchKeyShortcutEvent(ref<android::view::KeyEvent> event);
	jboolean dispatchTouchEvent(ref<android::view::MotionEvent> ev);
	jboolean dispatchTrackballEvent(ref<android::view::MotionEvent> ev);
	jboolean dispatchGenericMotionEvent(ref<android::view::MotionEvent> ev);
	jboolean dispatchPopulateAccessibilityEvent(ref<android::view::accessibility::AccessibilityEvent> event);
	ref<android::view::View> onCreatePanelView(jint featureId);
	jboolean onCreatePanelMenu(jint featureId, ref<android::view::Menu> menu);
	jboolean onPreparePanel(jint featureId, ref<android::view::View> view, ref<android::view::Menu> menu);
	jboolean onMenuOpened(jint featureId, ref<android::view::Menu> menu);
	jboolean onMenuItemSelected(jint featureId, ref<android::view::MenuItem> item);
	void onPanelClosed(jint featureId, ref<android::view::Menu> menu);
	void invalidateOptionsMenu();
	jboolean onCreateOptionsMenu(ref<android::view::Menu> menu);
	jboolean onPrepareOptionsMenu(ref<android::view::Menu> menu);
	jboolean onOptionsItemSelected(ref<android::view::MenuItem> item);
	jboolean onNavigateUp();
	jboolean onNavigateUpFromChild(ref<android::app::Activity> child);
	void onCreateNavigateUpTaskStack(ref<android::app::TaskStackBuilder> builder);
	void onPrepareNavigateUpTaskStack(ref<android::app::TaskStackBuilder> builder);
	void onOptionsMenuClosed(ref<android::view::Menu> menu);
	void openOptionsMenu();
	void closeOptionsMenu();
	void onCreateContextMenu(ref<android::view::ContextMenu> menu, ref<android::view::View> v, ref<android::view::ContextMenu_ContextMenuInfo> menuInfo);
	void registerForContextMenu(ref<android::view::View> view);
	void unregisterForContextMenu(ref<android::view::View> view);
	void openContextMenu(ref<android::view::View> view);
	void closeContextMenu();
	jboolean onContextItemSelected(ref<android::view::MenuItem> item);
	void onContextMenuClosed(ref<android::view::Menu> menu);
	void showDialog(jint id);
	jboolean showDialog(jint id, ref<android::os::Bundle> args);
	void dismissDialog(jint id);
	void removeDialog(jint id);
	jboolean onSearchRequested(ref<android::view::SearchEvent> searchEvent);
	jboolean onSearchRequested();
	ref<android::view::SearchEvent> getSearchEvent();
	void startSearch(ref<java::lang::String> initialQuery, jboolean selectInitialQuery, ref<android::os::Bundle> appSearchData, jboolean globalSearch);
	void triggerSearch(ref<java::lang::String> query, ref<android::os::Bundle> appSearchData);
	void takeKeyEvents(jboolean get);
	jboolean requestWindowFeature(jint featureId);
	void setFeatureDrawableResource(jint featureId, jint resId);
	void setFeatureDrawableUri(jint featureId, ref<android::net::Uri> uri);
	void setFeatureDrawable(jint featureId, ref<android::graphics::drawable::Drawable> drawable);
	void setFeatureDrawableAlpha(jint featureId, jint alpha);
	ref<android::view::LayoutInflater> getLayoutInflater();
	ref<android::view::MenuInflater> getMenuInflater();
	void setTheme(jint resid);
	void requestPermissions(ref<link::java::array<java::lang::String>> permissions, jint requestCode);
	void onRequestPermissionsResult(jint requestCode, ref<link::java::array<java::lang::String>> permissions, ref<link::java::array<jint>> grantResults);
	jboolean shouldShowRequestPermissionRationale(ref<java::lang::String> permission);
	void startActivityForResult(ref<android::content::Intent> intent, jint requestCode);
	void startActivityForResult(ref<android::content::Intent> intent, jint requestCode, ref<android::os::Bundle> options);
	jboolean isActivityTransitionRunning();
	void startIntentSenderForResult(ref<android::content::IntentSender> intent, jint requestCode, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags);
	void startIntentSenderForResult(ref<android::content::IntentSender> intent, jint requestCode, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags, ref<android::os::Bundle> options);
	void startActivity(ref<android::content::Intent> intent);
	void startActivity(ref<android::content::Intent> intent, ref<android::os::Bundle> options);
	void startActivities(ref<link::java::array<android::content::Intent>> intents);
	void startActivities(ref<link::java::array<android::content::Intent>> intents, ref<android::os::Bundle> options);
	void startIntentSender(ref<android::content::IntentSender> intent, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags);
	void startIntentSender(ref<android::content::IntentSender> intent, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags, ref<android::os::Bundle> options);
	jboolean startActivityIfNeeded(ref<android::content::Intent> intent, jint requestCode);
	jboolean startActivityIfNeeded(ref<android::content::Intent> intent, jint requestCode, ref<android::os::Bundle> options);
	jboolean startNextMatchingActivity(ref<android::content::Intent> intent);
	jboolean startNextMatchingActivity(ref<android::content::Intent> intent, ref<android::os::Bundle> options);
	void startActivityFromChild(ref<android::app::Activity> child, ref<android::content::Intent> intent, jint requestCode);
	void startActivityFromChild(ref<android::app::Activity> child, ref<android::content::Intent> intent, jint requestCode, ref<android::os::Bundle> options);
	void startActivityFromFragment(ref<android::app::Fragment> fragment, ref<android::content::Intent> intent, jint requestCode);
	void startActivityFromFragment(ref<android::app::Fragment> fragment, ref<android::content::Intent> intent, jint requestCode, ref<android::os::Bundle> options);
	void startIntentSenderFromChild(ref<android::app::Activity> child, ref<android::content::IntentSender> intent, jint requestCode, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags);
	void startIntentSenderFromChild(ref<android::app::Activity> child, ref<android::content::IntentSender> intent, jint requestCode, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags, ref<android::os::Bundle> options);
	void overridePendingTransition(jint enterAnim, jint exitAnim);
	void setResult(jint resultCode);
	void setResult(jint resultCode, ref<android::content::Intent> data);
	ref<android::net::Uri> getReferrer();
	ref<android::net::Uri> onProvideReferrer();
	ref<java::lang::String> getCallingPackage();
	ref<android::content::ComponentName> getCallingActivity();
	void setVisible(jboolean visible);
	jboolean isFinishing();
	jboolean isDestroyed();
	jboolean isChangingConfigurations();
	void recreate();
	void finish();
	void finishAffinity();
	void finishFromChild(ref<android::app::Activity> child);
	void finishAfterTransition();
	void finishActivity(jint requestCode);
	void finishActivityFromChild(ref<android::app::Activity> child, jint requestCode);
	void finishAndRemoveTask();
	jboolean releaseInstance();
	void onActivityReenter(jint resultCode, ref<android::content::Intent> data);
	ref<android::app::PendingIntent> createPendingResult(jint requestCode, ref<android::content::Intent> data, jint flags);
	void setRequestedOrientation(jint requestedOrientation);
	jint getRequestedOrientation();
	jint getTaskId();
	jboolean isTaskRoot();
	jboolean moveTaskToBack(jboolean nonRoot);
	ref<java::lang::String> getLocalClassName();
	ref<android::content::ComponentName> getComponentName();
	ref<android::content::SharedPreferences> getPreferences(jint mode);
	ref<java::lang::Object> getSystemService(ref<java::lang::String> name);
	void setTitle(ref<java::lang::CharSequence> title);
	void setTitle(jint titleId);
	void setTitleColor(jint textColor);
	ref<java::lang::CharSequence> getTitle();
	jint getTitleColor();
	void setTaskDescription(ref<android::app::ActivityManager_TaskDescription> taskDescription);
	void setProgressBarVisibility(jboolean visible);
	void setProgressBarIndeterminateVisibility(jboolean visible);
	void setProgressBarIndeterminate(jboolean indeterminate);
	void setProgress(jint progress);
	void setSecondaryProgress(jint secondaryProgress);
	void setVolumeControlStream(jint streamType);
	jint getVolumeControlStream();
	void setMediaController(ref<android::media::session::MediaController> controller);
	ref<android::media::session::MediaController> getMediaController();
	void runOnUiThread(ref<java::lang::Runnable> action);
	ref<android::view::View> onCreateView(ref<java::lang::String> name, ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	ref<android::view::View> onCreateView(ref<android::view::View> parent, ref<java::lang::String> name, ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	void dump(ref<java::lang::String> prefix, ref<java::io::FileDescriptor> fd, ref<java::io::PrintWriter> writer, ref<link::java::array<java::lang::String>> args);
	jboolean isImmersive();
	jboolean requestVisibleBehind(jboolean visible);
	void onVisibleBehindCanceled();
	void onEnterAnimationComplete();
	void setImmersive(jboolean i);
	void setVrModeEnabled(jboolean enabled, ref<android::content::ComponentName> requestedComponent);
	ref<android::view::ActionMode> startActionMode(ref<android::view::ActionMode_Callback> callback);
	ref<android::view::ActionMode> startActionMode(ref<android::view::ActionMode_Callback> callback, jint type);
	ref<android::view::ActionMode> onWindowStartingActionMode(ref<android::view::ActionMode_Callback> callback);
	ref<android::view::ActionMode> onWindowStartingActionMode(ref<android::view::ActionMode_Callback> callback, jint type);
	void onActionModeStarted(ref<android::view::ActionMode> mode);
	void onActionModeFinished(ref<android::view::ActionMode> mode);
	jboolean shouldUpRecreateTask(ref<android::content::Intent> targetIntent);
	jboolean navigateUpTo(ref<android::content::Intent> upIntent);
	jboolean navigateUpToFromChild(ref<android::app::Activity> child, ref<android::content::Intent> upIntent);
	ref<android::content::Intent> getParentActivityIntent();
	void setEnterSharedElementCallback(ref<android::app::SharedElementCallback> callback);
	void setExitSharedElementCallback(ref<android::app::SharedElementCallback> callback);
	void postponeEnterTransition();
	void startPostponedEnterTransition();
	ref<android::view::DragAndDropPermissions> requestDragAndDropPermissions(ref<android::view::DragEvent> event);
	void startLockTask();
	void stopLockTask();
	void showLockTaskEscapeMessage();
	void setShowWhenLocked(jboolean showWhenLocked);
	void setTurnScreenOn(jboolean turnScreenOn);

protected:

	Activity(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/app/ActionBar.h>
#include <scapix/java_api/android/app/ActivityManager_TaskDescription.h>
#include <scapix/java_api/android/app/Application.h>
#include <scapix/java_api/android/app/Fragment.h>
#include <scapix/java_api/android/app/FragmentManager.h>
#include <scapix/java_api/android/app/LoaderManager.h>
#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/app/PictureInPictureParams.h>
#include <scapix/java_api/android/app/SharedElementCallback.h>
#include <scapix/java_api/android/app/TaskStackBuilder.h>
#include <scapix/java_api/android/app/VoiceInteractor.h>
#include <scapix/java_api/android/app/assist/AssistContent.h>
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/IntentSender.h>
#include <scapix/java_api/android/content/SharedPreferences.h>
#include <scapix/java_api/android/content/res/Configuration.h>
#include <scapix/java_api/android/database/Cursor.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/media/session/MediaController.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/android/transition/Scene.h>
#include <scapix/java_api/android/transition/TransitionManager.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/ActionMode.h>
#include <scapix/java_api/android/view/ActionMode_Callback.h>
#include <scapix/java_api/android/view/ContextMenu.h>
#include <scapix/java_api/android/view/ContextMenu_ContextMenuInfo.h>
#include <scapix/java_api/android/view/DragAndDropPermissions.h>
#include <scapix/java_api/android/view/DragEvent.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/LayoutInflater.h>
#include <scapix/java_api/android/view/Menu.h>
#include <scapix/java_api/android/view/MenuInflater.h>
#include <scapix/java_api/android/view/MenuItem.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/SearchEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup_LayoutParams.h>
#include <scapix/java_api/android/view/Window.h>
#include <scapix/java_api/android/view/WindowManager.h>
#include <scapix/java_api/android/view/WindowManager_LayoutParams.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#include <scapix/java_api/android/widget/Toolbar.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::app {

inline jint Activity::DEFAULT_KEYS_DIALER_() { return get_static_field<SCAPIX_META_STRING("DEFAULT_KEYS_DIALER"), jint>(); }
inline jint Activity::DEFAULT_KEYS_DISABLE_() { return get_static_field<SCAPIX_META_STRING("DEFAULT_KEYS_DISABLE"), jint>(); }
inline jint Activity::DEFAULT_KEYS_SEARCH_GLOBAL_() { return get_static_field<SCAPIX_META_STRING("DEFAULT_KEYS_SEARCH_GLOBAL"), jint>(); }
inline jint Activity::DEFAULT_KEYS_SEARCH_LOCAL_() { return get_static_field<SCAPIX_META_STRING("DEFAULT_KEYS_SEARCH_LOCAL"), jint>(); }
inline jint Activity::DEFAULT_KEYS_SHORTCUT_() { return get_static_field<SCAPIX_META_STRING("DEFAULT_KEYS_SHORTCUT"), jint>(); }
inline jint Activity::RESULT_CANCELED_() { return get_static_field<SCAPIX_META_STRING("RESULT_CANCELED"), jint>(); }
inline jint Activity::RESULT_FIRST_USER_() { return get_static_field<SCAPIX_META_STRING("RESULT_FIRST_USER"), jint>(); }
inline jint Activity::RESULT_OK_() { return get_static_field<SCAPIX_META_STRING("RESULT_OK"), jint>(); }
inline ref<Activity> Activity::new_object() { return base_::new_object(); }
inline ref<android::content::Intent> Activity::getIntent() { return call_method<SCAPIX_META_STRING("getIntent"), ref<android::content::Intent>>(); }
inline void Activity::setIntent(ref<android::content::Intent> newIntent) { return call_method<SCAPIX_META_STRING("setIntent"), void>(newIntent); }
inline ref<android::app::Application> Activity::getApplication() { return call_method<SCAPIX_META_STRING("getApplication"), ref<android::app::Application>>(); }
inline jboolean Activity::isChild() { return call_method<SCAPIX_META_STRING("isChild"), jboolean>(); }
inline ref<android::app::Activity> Activity::getParent() { return call_method<SCAPIX_META_STRING("getParent"), ref<android::app::Activity>>(); }
inline ref<android::view::WindowManager> Activity::getWindowManager() { return call_method<SCAPIX_META_STRING("getWindowManager"), ref<android::view::WindowManager>>(); }
inline ref<android::view::Window> Activity::getWindow() { return call_method<SCAPIX_META_STRING("getWindow"), ref<android::view::Window>>(); }
inline ref<android::app::LoaderManager> Activity::getLoaderManager() { return call_method<SCAPIX_META_STRING("getLoaderManager"), ref<android::app::LoaderManager>>(); }
inline ref<android::view::View> Activity::getCurrentFocus() { return call_method<SCAPIX_META_STRING("getCurrentFocus"), ref<android::view::View>>(); }
inline void Activity::onCreate(ref<android::os::Bundle> savedInstanceState, ref<android::os::PersistableBundle> persistentState) { return call_method<SCAPIX_META_STRING("onCreate"), void>(savedInstanceState, persistentState); }
inline void Activity::onRestoreInstanceState(ref<android::os::Bundle> savedInstanceState, ref<android::os::PersistableBundle> persistentState) { return call_method<SCAPIX_META_STRING("onRestoreInstanceState"), void>(savedInstanceState, persistentState); }
inline void Activity::onPostCreate(ref<android::os::Bundle> savedInstanceState, ref<android::os::PersistableBundle> persistentState) { return call_method<SCAPIX_META_STRING("onPostCreate"), void>(savedInstanceState, persistentState); }
inline void Activity::onStateNotSaved() { return call_method<SCAPIX_META_STRING("onStateNotSaved"), void>(); }
inline jboolean Activity::isVoiceInteraction() { return call_method<SCAPIX_META_STRING("isVoiceInteraction"), jboolean>(); }
inline jboolean Activity::isVoiceInteractionRoot() { return call_method<SCAPIX_META_STRING("isVoiceInteractionRoot"), jboolean>(); }
inline ref<android::app::VoiceInteractor> Activity::getVoiceInteractor() { return call_method<SCAPIX_META_STRING("getVoiceInteractor"), ref<android::app::VoiceInteractor>>(); }
inline jboolean Activity::isLocalVoiceInteractionSupported() { return call_method<SCAPIX_META_STRING("isLocalVoiceInteractionSupported"), jboolean>(); }
inline void Activity::startLocalVoiceInteraction(ref<android::os::Bundle> privateOptions) { return call_method<SCAPIX_META_STRING("startLocalVoiceInteraction"), void>(privateOptions); }
inline void Activity::onLocalVoiceInteractionStarted() { return call_method<SCAPIX_META_STRING("onLocalVoiceInteractionStarted"), void>(); }
inline void Activity::onLocalVoiceInteractionStopped() { return call_method<SCAPIX_META_STRING("onLocalVoiceInteractionStopped"), void>(); }
inline void Activity::stopLocalVoiceInteraction() { return call_method<SCAPIX_META_STRING("stopLocalVoiceInteraction"), void>(); }
inline void Activity::onSaveInstanceState(ref<android::os::Bundle> outState, ref<android::os::PersistableBundle> outPersistentState) { return call_method<SCAPIX_META_STRING("onSaveInstanceState"), void>(outState, outPersistentState); }
inline jboolean Activity::onCreateThumbnail(ref<android::graphics::Bitmap> outBitmap, ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("onCreateThumbnail"), jboolean>(outBitmap, canvas); }
inline ref<java::lang::CharSequence> Activity::onCreateDescription() { return call_method<SCAPIX_META_STRING("onCreateDescription"), ref<java::lang::CharSequence>>(); }
inline void Activity::onProvideAssistData(ref<android::os::Bundle> data) { return call_method<SCAPIX_META_STRING("onProvideAssistData"), void>(data); }
inline void Activity::onProvideAssistContent(ref<android::app::assist::AssistContent> outContent) { return call_method<SCAPIX_META_STRING("onProvideAssistContent"), void>(outContent); }
inline void Activity::requestShowKeyboardShortcuts() { return call_method<SCAPIX_META_STRING("requestShowKeyboardShortcuts"), void>(); }
inline void Activity::dismissKeyboardShortcutsHelper() { return call_method<SCAPIX_META_STRING("dismissKeyboardShortcutsHelper"), void>(); }
inline void Activity::onProvideKeyboardShortcuts(ref<java::util::List> data, ref<android::view::Menu> menu, jint deviceId) { return call_method<SCAPIX_META_STRING("onProvideKeyboardShortcuts"), void>(data, menu, deviceId); }
inline jboolean Activity::showAssist(ref<android::os::Bundle> args) { return call_method<SCAPIX_META_STRING("showAssist"), jboolean>(args); }
inline void Activity::reportFullyDrawn() { return call_method<SCAPIX_META_STRING("reportFullyDrawn"), void>(); }
inline void Activity::onMultiWindowModeChanged(jboolean isInMultiWindowMode, ref<android::content::res::Configuration> newConfig) { return call_method<SCAPIX_META_STRING("onMultiWindowModeChanged"), void>(isInMultiWindowMode, newConfig); }
inline void Activity::onMultiWindowModeChanged(jboolean isInMultiWindowMode) { return call_method<SCAPIX_META_STRING("onMultiWindowModeChanged"), void>(isInMultiWindowMode); }
inline jboolean Activity::isInMultiWindowMode() { return call_method<SCAPIX_META_STRING("isInMultiWindowMode"), jboolean>(); }
inline void Activity::onPictureInPictureModeChanged(jboolean isInPictureInPictureMode, ref<android::content::res::Configuration> newConfig) { return call_method<SCAPIX_META_STRING("onPictureInPictureModeChanged"), void>(isInPictureInPictureMode, newConfig); }
inline void Activity::onPictureInPictureModeChanged(jboolean isInPictureInPictureMode) { return call_method<SCAPIX_META_STRING("onPictureInPictureModeChanged"), void>(isInPictureInPictureMode); }
inline jboolean Activity::isInPictureInPictureMode() { return call_method<SCAPIX_META_STRING("isInPictureInPictureMode"), jboolean>(); }
inline void Activity::enterPictureInPictureMode() { return call_method<SCAPIX_META_STRING("enterPictureInPictureMode"), void>(); }
inline jboolean Activity::enterPictureInPictureMode(ref<android::app::PictureInPictureParams> params) { return call_method<SCAPIX_META_STRING("enterPictureInPictureMode"), jboolean>(params); }
inline void Activity::setPictureInPictureParams(ref<android::app::PictureInPictureParams> params) { return call_method<SCAPIX_META_STRING("setPictureInPictureParams"), void>(params); }
inline jint Activity::getMaxNumPictureInPictureActions() { return call_method<SCAPIX_META_STRING("getMaxNumPictureInPictureActions"), jint>(); }
inline void Activity::onConfigurationChanged(ref<android::content::res::Configuration> newConfig) { return call_method<SCAPIX_META_STRING("onConfigurationChanged"), void>(newConfig); }
inline jint Activity::getChangingConfigurations() { return call_method<SCAPIX_META_STRING("getChangingConfigurations"), jint>(); }
inline ref<java::lang::Object> Activity::getLastNonConfigurationInstance() { return call_method<SCAPIX_META_STRING("getLastNonConfigurationInstance"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> Activity::onRetainNonConfigurationInstance() { return call_method<SCAPIX_META_STRING("onRetainNonConfigurationInstance"), ref<java::lang::Object>>(); }
inline void Activity::onLowMemory() { return call_method<SCAPIX_META_STRING("onLowMemory"), void>(); }
inline void Activity::onTrimMemory(jint level) { return call_method<SCAPIX_META_STRING("onTrimMemory"), void>(level); }
inline ref<android::app::FragmentManager> Activity::getFragmentManager() { return call_method<SCAPIX_META_STRING("getFragmentManager"), ref<android::app::FragmentManager>>(); }
inline void Activity::onAttachFragment(ref<android::app::Fragment> fragment) { return call_method<SCAPIX_META_STRING("onAttachFragment"), void>(fragment); }
inline ref<android::database::Cursor> Activity::managedQuery(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder) { return call_method<SCAPIX_META_STRING("managedQuery"), ref<android::database::Cursor>>(uri, projection, selection, selectionArgs, sortOrder); }
inline void Activity::startManagingCursor(ref<android::database::Cursor> c) { return call_method<SCAPIX_META_STRING("startManagingCursor"), void>(c); }
inline void Activity::stopManagingCursor(ref<android::database::Cursor> c) { return call_method<SCAPIX_META_STRING("stopManagingCursor"), void>(c); }
inline ref<android::view::View> Activity::findViewById(jint id) { return call_method<SCAPIX_META_STRING("findViewById"), ref<android::view::View>>(id); }
inline ref<android::view::View> Activity::requireViewById(jint id) { return call_method<SCAPIX_META_STRING("requireViewById"), ref<android::view::View>>(id); }
inline ref<android::app::ActionBar> Activity::getActionBar() { return call_method<SCAPIX_META_STRING("getActionBar"), ref<android::app::ActionBar>>(); }
inline void Activity::setActionBar(ref<android::widget::Toolbar> toolbar) { return call_method<SCAPIX_META_STRING("setActionBar"), void>(toolbar); }
inline void Activity::setContentView(jint layoutResID) { return call_method<SCAPIX_META_STRING("setContentView"), void>(layoutResID); }
inline void Activity::setContentView(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("setContentView"), void>(view); }
inline void Activity::setContentView(ref<android::view::View> view, ref<android::view::ViewGroup_LayoutParams> params) { return call_method<SCAPIX_META_STRING("setContentView"), void>(view, params); }
inline void Activity::addContentView(ref<android::view::View> view, ref<android::view::ViewGroup_LayoutParams> params) { return call_method<SCAPIX_META_STRING("addContentView"), void>(view, params); }
inline ref<android::transition::TransitionManager> Activity::getContentTransitionManager() { return call_method<SCAPIX_META_STRING("getContentTransitionManager"), ref<android::transition::TransitionManager>>(); }
inline void Activity::setContentTransitionManager(ref<android::transition::TransitionManager> tm) { return call_method<SCAPIX_META_STRING("setContentTransitionManager"), void>(tm); }
inline ref<android::transition::Scene> Activity::getContentScene() { return call_method<SCAPIX_META_STRING("getContentScene"), ref<android::transition::Scene>>(); }
inline void Activity::setFinishOnTouchOutside(jboolean finish) { return call_method<SCAPIX_META_STRING("setFinishOnTouchOutside"), void>(finish); }
inline void Activity::setDefaultKeyMode(jint mode) { return call_method<SCAPIX_META_STRING("setDefaultKeyMode"), void>(mode); }
inline jboolean Activity::onKeyDown(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyDown"), jboolean>(keyCode, event); }
inline jboolean Activity::onKeyLongPress(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyLongPress"), jboolean>(keyCode, event); }
inline jboolean Activity::onKeyUp(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyUp"), jboolean>(keyCode, event); }
inline jboolean Activity::onKeyMultiple(jint keyCode, jint repeatCount, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyMultiple"), jboolean>(keyCode, repeatCount, event); }
inline void Activity::onBackPressed() { return call_method<SCAPIX_META_STRING("onBackPressed"), void>(); }
inline jboolean Activity::onKeyShortcut(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyShortcut"), jboolean>(keyCode, event); }
inline jboolean Activity::onTouchEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onTouchEvent"), jboolean>(event); }
inline jboolean Activity::onTrackballEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onTrackballEvent"), jboolean>(event); }
inline jboolean Activity::onGenericMotionEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onGenericMotionEvent"), jboolean>(event); }
inline void Activity::onUserInteraction() { return call_method<SCAPIX_META_STRING("onUserInteraction"), void>(); }
inline void Activity::onWindowAttributesChanged(ref<android::view::WindowManager_LayoutParams> params) { return call_method<SCAPIX_META_STRING("onWindowAttributesChanged"), void>(params); }
inline void Activity::onContentChanged() { return call_method<SCAPIX_META_STRING("onContentChanged"), void>(); }
inline void Activity::onWindowFocusChanged(jboolean hasFocus) { return call_method<SCAPIX_META_STRING("onWindowFocusChanged"), void>(hasFocus); }
inline void Activity::onAttachedToWindow() { return call_method<SCAPIX_META_STRING("onAttachedToWindow"), void>(); }
inline void Activity::onDetachedFromWindow() { return call_method<SCAPIX_META_STRING("onDetachedFromWindow"), void>(); }
inline jboolean Activity::hasWindowFocus() { return call_method<SCAPIX_META_STRING("hasWindowFocus"), jboolean>(); }
inline jboolean Activity::dispatchKeyEvent(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("dispatchKeyEvent"), jboolean>(event); }
inline jboolean Activity::dispatchKeyShortcutEvent(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("dispatchKeyShortcutEvent"), jboolean>(event); }
inline jboolean Activity::dispatchTouchEvent(ref<android::view::MotionEvent> ev) { return call_method<SCAPIX_META_STRING("dispatchTouchEvent"), jboolean>(ev); }
inline jboolean Activity::dispatchTrackballEvent(ref<android::view::MotionEvent> ev) { return call_method<SCAPIX_META_STRING("dispatchTrackballEvent"), jboolean>(ev); }
inline jboolean Activity::dispatchGenericMotionEvent(ref<android::view::MotionEvent> ev) { return call_method<SCAPIX_META_STRING("dispatchGenericMotionEvent"), jboolean>(ev); }
inline jboolean Activity::dispatchPopulateAccessibilityEvent(ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<SCAPIX_META_STRING("dispatchPopulateAccessibilityEvent"), jboolean>(event); }
inline ref<android::view::View> Activity::onCreatePanelView(jint featureId) { return call_method<SCAPIX_META_STRING("onCreatePanelView"), ref<android::view::View>>(featureId); }
inline jboolean Activity::onCreatePanelMenu(jint featureId, ref<android::view::Menu> menu) { return call_method<SCAPIX_META_STRING("onCreatePanelMenu"), jboolean>(featureId, menu); }
inline jboolean Activity::onPreparePanel(jint featureId, ref<android::view::View> view, ref<android::view::Menu> menu) { return call_method<SCAPIX_META_STRING("onPreparePanel"), jboolean>(featureId, view, menu); }
inline jboolean Activity::onMenuOpened(jint featureId, ref<android::view::Menu> menu) { return call_method<SCAPIX_META_STRING("onMenuOpened"), jboolean>(featureId, menu); }
inline jboolean Activity::onMenuItemSelected(jint featureId, ref<android::view::MenuItem> item) { return call_method<SCAPIX_META_STRING("onMenuItemSelected"), jboolean>(featureId, item); }
inline void Activity::onPanelClosed(jint featureId, ref<android::view::Menu> menu) { return call_method<SCAPIX_META_STRING("onPanelClosed"), void>(featureId, menu); }
inline void Activity::invalidateOptionsMenu() { return call_method<SCAPIX_META_STRING("invalidateOptionsMenu"), void>(); }
inline jboolean Activity::onCreateOptionsMenu(ref<android::view::Menu> menu) { return call_method<SCAPIX_META_STRING("onCreateOptionsMenu"), jboolean>(menu); }
inline jboolean Activity::onPrepareOptionsMenu(ref<android::view::Menu> menu) { return call_method<SCAPIX_META_STRING("onPrepareOptionsMenu"), jboolean>(menu); }
inline jboolean Activity::onOptionsItemSelected(ref<android::view::MenuItem> item) { return call_method<SCAPIX_META_STRING("onOptionsItemSelected"), jboolean>(item); }
inline jboolean Activity::onNavigateUp() { return call_method<SCAPIX_META_STRING("onNavigateUp"), jboolean>(); }
inline jboolean Activity::onNavigateUpFromChild(ref<android::app::Activity> child) { return call_method<SCAPIX_META_STRING("onNavigateUpFromChild"), jboolean>(child); }
inline void Activity::onCreateNavigateUpTaskStack(ref<android::app::TaskStackBuilder> builder) { return call_method<SCAPIX_META_STRING("onCreateNavigateUpTaskStack"), void>(builder); }
inline void Activity::onPrepareNavigateUpTaskStack(ref<android::app::TaskStackBuilder> builder) { return call_method<SCAPIX_META_STRING("onPrepareNavigateUpTaskStack"), void>(builder); }
inline void Activity::onOptionsMenuClosed(ref<android::view::Menu> menu) { return call_method<SCAPIX_META_STRING("onOptionsMenuClosed"), void>(menu); }
inline void Activity::openOptionsMenu() { return call_method<SCAPIX_META_STRING("openOptionsMenu"), void>(); }
inline void Activity::closeOptionsMenu() { return call_method<SCAPIX_META_STRING("closeOptionsMenu"), void>(); }
inline void Activity::onCreateContextMenu(ref<android::view::ContextMenu> menu, ref<android::view::View> v, ref<android::view::ContextMenu_ContextMenuInfo> menuInfo) { return call_method<SCAPIX_META_STRING("onCreateContextMenu"), void>(menu, v, menuInfo); }
inline void Activity::registerForContextMenu(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("registerForContextMenu"), void>(view); }
inline void Activity::unregisterForContextMenu(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("unregisterForContextMenu"), void>(view); }
inline void Activity::openContextMenu(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("openContextMenu"), void>(view); }
inline void Activity::closeContextMenu() { return call_method<SCAPIX_META_STRING("closeContextMenu"), void>(); }
inline jboolean Activity::onContextItemSelected(ref<android::view::MenuItem> item) { return call_method<SCAPIX_META_STRING("onContextItemSelected"), jboolean>(item); }
inline void Activity::onContextMenuClosed(ref<android::view::Menu> menu) { return call_method<SCAPIX_META_STRING("onContextMenuClosed"), void>(menu); }
inline void Activity::showDialog(jint id) { return call_method<SCAPIX_META_STRING("showDialog"), void>(id); }
inline jboolean Activity::showDialog(jint id, ref<android::os::Bundle> args) { return call_method<SCAPIX_META_STRING("showDialog"), jboolean>(id, args); }
inline void Activity::dismissDialog(jint id) { return call_method<SCAPIX_META_STRING("dismissDialog"), void>(id); }
inline void Activity::removeDialog(jint id) { return call_method<SCAPIX_META_STRING("removeDialog"), void>(id); }
inline jboolean Activity::onSearchRequested(ref<android::view::SearchEvent> searchEvent) { return call_method<SCAPIX_META_STRING("onSearchRequested"), jboolean>(searchEvent); }
inline jboolean Activity::onSearchRequested() { return call_method<SCAPIX_META_STRING("onSearchRequested"), jboolean>(); }
inline ref<android::view::SearchEvent> Activity::getSearchEvent() { return call_method<SCAPIX_META_STRING("getSearchEvent"), ref<android::view::SearchEvent>>(); }
inline void Activity::startSearch(ref<java::lang::String> initialQuery, jboolean selectInitialQuery, ref<android::os::Bundle> appSearchData, jboolean globalSearch) { return call_method<SCAPIX_META_STRING("startSearch"), void>(initialQuery, selectInitialQuery, appSearchData, globalSearch); }
inline void Activity::triggerSearch(ref<java::lang::String> query, ref<android::os::Bundle> appSearchData) { return call_method<SCAPIX_META_STRING("triggerSearch"), void>(query, appSearchData); }
inline void Activity::takeKeyEvents(jboolean get) { return call_method<SCAPIX_META_STRING("takeKeyEvents"), void>(get); }
inline jboolean Activity::requestWindowFeature(jint featureId) { return call_method<SCAPIX_META_STRING("requestWindowFeature"), jboolean>(featureId); }
inline void Activity::setFeatureDrawableResource(jint featureId, jint resId) { return call_method<SCAPIX_META_STRING("setFeatureDrawableResource"), void>(featureId, resId); }
inline void Activity::setFeatureDrawableUri(jint featureId, ref<android::net::Uri> uri) { return call_method<SCAPIX_META_STRING("setFeatureDrawableUri"), void>(featureId, uri); }
inline void Activity::setFeatureDrawable(jint featureId, ref<android::graphics::drawable::Drawable> drawable) { return call_method<SCAPIX_META_STRING("setFeatureDrawable"), void>(featureId, drawable); }
inline void Activity::setFeatureDrawableAlpha(jint featureId, jint alpha) { return call_method<SCAPIX_META_STRING("setFeatureDrawableAlpha"), void>(featureId, alpha); }
inline ref<android::view::LayoutInflater> Activity::getLayoutInflater() { return call_method<SCAPIX_META_STRING("getLayoutInflater"), ref<android::view::LayoutInflater>>(); }
inline ref<android::view::MenuInflater> Activity::getMenuInflater() { return call_method<SCAPIX_META_STRING("getMenuInflater"), ref<android::view::MenuInflater>>(); }
inline void Activity::setTheme(jint resid) { return call_method<SCAPIX_META_STRING("setTheme"), void>(resid); }
inline void Activity::requestPermissions(ref<link::java::array<java::lang::String>> permissions, jint requestCode) { return call_method<SCAPIX_META_STRING("requestPermissions"), void>(permissions, requestCode); }
inline void Activity::onRequestPermissionsResult(jint requestCode, ref<link::java::array<java::lang::String>> permissions, ref<link::java::array<jint>> grantResults) { return call_method<SCAPIX_META_STRING("onRequestPermissionsResult"), void>(requestCode, permissions, grantResults); }
inline jboolean Activity::shouldShowRequestPermissionRationale(ref<java::lang::String> permission) { return call_method<SCAPIX_META_STRING("shouldShowRequestPermissionRationale"), jboolean>(permission); }
inline void Activity::startActivityForResult(ref<android::content::Intent> intent, jint requestCode) { return call_method<SCAPIX_META_STRING("startActivityForResult"), void>(intent, requestCode); }
inline void Activity::startActivityForResult(ref<android::content::Intent> intent, jint requestCode, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startActivityForResult"), void>(intent, requestCode, options); }
inline jboolean Activity::isActivityTransitionRunning() { return call_method<SCAPIX_META_STRING("isActivityTransitionRunning"), jboolean>(); }
inline void Activity::startIntentSenderForResult(ref<android::content::IntentSender> intent, jint requestCode, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags) { return call_method<SCAPIX_META_STRING("startIntentSenderForResult"), void>(intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags); }
inline void Activity::startIntentSenderForResult(ref<android::content::IntentSender> intent, jint requestCode, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startIntentSenderForResult"), void>(intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags, options); }
inline void Activity::startActivity(ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("startActivity"), void>(intent); }
inline void Activity::startActivity(ref<android::content::Intent> intent, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startActivity"), void>(intent, options); }
inline void Activity::startActivities(ref<link::java::array<android::content::Intent>> intents) { return call_method<SCAPIX_META_STRING("startActivities"), void>(intents); }
inline void Activity::startActivities(ref<link::java::array<android::content::Intent>> intents, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startActivities"), void>(intents, options); }
inline void Activity::startIntentSender(ref<android::content::IntentSender> intent, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags) { return call_method<SCAPIX_META_STRING("startIntentSender"), void>(intent, fillInIntent, flagsMask, flagsValues, extraFlags); }
inline void Activity::startIntentSender(ref<android::content::IntentSender> intent, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startIntentSender"), void>(intent, fillInIntent, flagsMask, flagsValues, extraFlags, options); }
inline jboolean Activity::startActivityIfNeeded(ref<android::content::Intent> intent, jint requestCode) { return call_method<SCAPIX_META_STRING("startActivityIfNeeded"), jboolean>(intent, requestCode); }
inline jboolean Activity::startActivityIfNeeded(ref<android::content::Intent> intent, jint requestCode, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startActivityIfNeeded"), jboolean>(intent, requestCode, options); }
inline jboolean Activity::startNextMatchingActivity(ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("startNextMatchingActivity"), jboolean>(intent); }
inline jboolean Activity::startNextMatchingActivity(ref<android::content::Intent> intent, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startNextMatchingActivity"), jboolean>(intent, options); }
inline void Activity::startActivityFromChild(ref<android::app::Activity> child, ref<android::content::Intent> intent, jint requestCode) { return call_method<SCAPIX_META_STRING("startActivityFromChild"), void>(child, intent, requestCode); }
inline void Activity::startActivityFromChild(ref<android::app::Activity> child, ref<android::content::Intent> intent, jint requestCode, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startActivityFromChild"), void>(child, intent, requestCode, options); }
inline void Activity::startActivityFromFragment(ref<android::app::Fragment> fragment, ref<android::content::Intent> intent, jint requestCode) { return call_method<SCAPIX_META_STRING("startActivityFromFragment"), void>(fragment, intent, requestCode); }
inline void Activity::startActivityFromFragment(ref<android::app::Fragment> fragment, ref<android::content::Intent> intent, jint requestCode, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startActivityFromFragment"), void>(fragment, intent, requestCode, options); }
inline void Activity::startIntentSenderFromChild(ref<android::app::Activity> child, ref<android::content::IntentSender> intent, jint requestCode, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags) { return call_method<SCAPIX_META_STRING("startIntentSenderFromChild"), void>(child, intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags); }
inline void Activity::startIntentSenderFromChild(ref<android::app::Activity> child, ref<android::content::IntentSender> intent, jint requestCode, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startIntentSenderFromChild"), void>(child, intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags, options); }
inline void Activity::overridePendingTransition(jint enterAnim, jint exitAnim) { return call_method<SCAPIX_META_STRING("overridePendingTransition"), void>(enterAnim, exitAnim); }
inline void Activity::setResult(jint resultCode) { return call_method<SCAPIX_META_STRING("setResult"), void>(resultCode); }
inline void Activity::setResult(jint resultCode, ref<android::content::Intent> data) { return call_method<SCAPIX_META_STRING("setResult"), void>(resultCode, data); }
inline ref<android::net::Uri> Activity::getReferrer() { return call_method<SCAPIX_META_STRING("getReferrer"), ref<android::net::Uri>>(); }
inline ref<android::net::Uri> Activity::onProvideReferrer() { return call_method<SCAPIX_META_STRING("onProvideReferrer"), ref<android::net::Uri>>(); }
inline ref<java::lang::String> Activity::getCallingPackage() { return call_method<SCAPIX_META_STRING("getCallingPackage"), ref<java::lang::String>>(); }
inline ref<android::content::ComponentName> Activity::getCallingActivity() { return call_method<SCAPIX_META_STRING("getCallingActivity"), ref<android::content::ComponentName>>(); }
inline void Activity::setVisible(jboolean visible) { return call_method<SCAPIX_META_STRING("setVisible"), void>(visible); }
inline jboolean Activity::isFinishing() { return call_method<SCAPIX_META_STRING("isFinishing"), jboolean>(); }
inline jboolean Activity::isDestroyed() { return call_method<SCAPIX_META_STRING("isDestroyed"), jboolean>(); }
inline jboolean Activity::isChangingConfigurations() { return call_method<SCAPIX_META_STRING("isChangingConfigurations"), jboolean>(); }
inline void Activity::recreate() { return call_method<SCAPIX_META_STRING("recreate"), void>(); }
inline void Activity::finish() { return call_method<SCAPIX_META_STRING("finish"), void>(); }
inline void Activity::finishAffinity() { return call_method<SCAPIX_META_STRING("finishAffinity"), void>(); }
inline void Activity::finishFromChild(ref<android::app::Activity> child) { return call_method<SCAPIX_META_STRING("finishFromChild"), void>(child); }
inline void Activity::finishAfterTransition() { return call_method<SCAPIX_META_STRING("finishAfterTransition"), void>(); }
inline void Activity::finishActivity(jint requestCode) { return call_method<SCAPIX_META_STRING("finishActivity"), void>(requestCode); }
inline void Activity::finishActivityFromChild(ref<android::app::Activity> child, jint requestCode) { return call_method<SCAPIX_META_STRING("finishActivityFromChild"), void>(child, requestCode); }
inline void Activity::finishAndRemoveTask() { return call_method<SCAPIX_META_STRING("finishAndRemoveTask"), void>(); }
inline jboolean Activity::releaseInstance() { return call_method<SCAPIX_META_STRING("releaseInstance"), jboolean>(); }
inline void Activity::onActivityReenter(jint resultCode, ref<android::content::Intent> data) { return call_method<SCAPIX_META_STRING("onActivityReenter"), void>(resultCode, data); }
inline ref<android::app::PendingIntent> Activity::createPendingResult(jint requestCode, ref<android::content::Intent> data, jint flags) { return call_method<SCAPIX_META_STRING("createPendingResult"), ref<android::app::PendingIntent>>(requestCode, data, flags); }
inline void Activity::setRequestedOrientation(jint requestedOrientation) { return call_method<SCAPIX_META_STRING("setRequestedOrientation"), void>(requestedOrientation); }
inline jint Activity::getRequestedOrientation() { return call_method<SCAPIX_META_STRING("getRequestedOrientation"), jint>(); }
inline jint Activity::getTaskId() { return call_method<SCAPIX_META_STRING("getTaskId"), jint>(); }
inline jboolean Activity::isTaskRoot() { return call_method<SCAPIX_META_STRING("isTaskRoot"), jboolean>(); }
inline jboolean Activity::moveTaskToBack(jboolean nonRoot) { return call_method<SCAPIX_META_STRING("moveTaskToBack"), jboolean>(nonRoot); }
inline ref<java::lang::String> Activity::getLocalClassName() { return call_method<SCAPIX_META_STRING("getLocalClassName"), ref<java::lang::String>>(); }
inline ref<android::content::ComponentName> Activity::getComponentName() { return call_method<SCAPIX_META_STRING("getComponentName"), ref<android::content::ComponentName>>(); }
inline ref<android::content::SharedPreferences> Activity::getPreferences(jint mode) { return call_method<SCAPIX_META_STRING("getPreferences"), ref<android::content::SharedPreferences>>(mode); }
inline ref<java::lang::Object> Activity::getSystemService(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getSystemService"), ref<java::lang::Object>>(name); }
inline void Activity::setTitle(ref<java::lang::CharSequence> title) { return call_method<SCAPIX_META_STRING("setTitle"), void>(title); }
inline void Activity::setTitle(jint titleId) { return call_method<SCAPIX_META_STRING("setTitle"), void>(titleId); }
inline void Activity::setTitleColor(jint textColor) { return call_method<SCAPIX_META_STRING("setTitleColor"), void>(textColor); }
inline ref<java::lang::CharSequence> Activity::getTitle() { return call_method<SCAPIX_META_STRING("getTitle"), ref<java::lang::CharSequence>>(); }
inline jint Activity::getTitleColor() { return call_method<SCAPIX_META_STRING("getTitleColor"), jint>(); }
inline void Activity::setTaskDescription(ref<android::app::ActivityManager_TaskDescription> taskDescription) { return call_method<SCAPIX_META_STRING("setTaskDescription"), void>(taskDescription); }
inline void Activity::setProgressBarVisibility(jboolean visible) { return call_method<SCAPIX_META_STRING("setProgressBarVisibility"), void>(visible); }
inline void Activity::setProgressBarIndeterminateVisibility(jboolean visible) { return call_method<SCAPIX_META_STRING("setProgressBarIndeterminateVisibility"), void>(visible); }
inline void Activity::setProgressBarIndeterminate(jboolean indeterminate) { return call_method<SCAPIX_META_STRING("setProgressBarIndeterminate"), void>(indeterminate); }
inline void Activity::setProgress(jint progress) { return call_method<SCAPIX_META_STRING("setProgress"), void>(progress); }
inline void Activity::setSecondaryProgress(jint secondaryProgress) { return call_method<SCAPIX_META_STRING("setSecondaryProgress"), void>(secondaryProgress); }
inline void Activity::setVolumeControlStream(jint streamType) { return call_method<SCAPIX_META_STRING("setVolumeControlStream"), void>(streamType); }
inline jint Activity::getVolumeControlStream() { return call_method<SCAPIX_META_STRING("getVolumeControlStream"), jint>(); }
inline void Activity::setMediaController(ref<android::media::session::MediaController> controller) { return call_method<SCAPIX_META_STRING("setMediaController"), void>(controller); }
inline ref<android::media::session::MediaController> Activity::getMediaController() { return call_method<SCAPIX_META_STRING("getMediaController"), ref<android::media::session::MediaController>>(); }
inline void Activity::runOnUiThread(ref<java::lang::Runnable> action) { return call_method<SCAPIX_META_STRING("runOnUiThread"), void>(action); }
inline ref<android::view::View> Activity::onCreateView(ref<java::lang::String> name, ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return call_method<SCAPIX_META_STRING("onCreateView"), ref<android::view::View>>(name, context, attrs); }
inline ref<android::view::View> Activity::onCreateView(ref<android::view::View> parent, ref<java::lang::String> name, ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return call_method<SCAPIX_META_STRING("onCreateView"), ref<android::view::View>>(parent, name, context, attrs); }
inline void Activity::dump(ref<java::lang::String> prefix, ref<java::io::FileDescriptor> fd, ref<java::io::PrintWriter> writer, ref<link::java::array<java::lang::String>> args) { return call_method<SCAPIX_META_STRING("dump"), void>(prefix, fd, writer, args); }
inline jboolean Activity::isImmersive() { return call_method<SCAPIX_META_STRING("isImmersive"), jboolean>(); }
inline jboolean Activity::requestVisibleBehind(jboolean visible) { return call_method<SCAPIX_META_STRING("requestVisibleBehind"), jboolean>(visible); }
inline void Activity::onVisibleBehindCanceled() { return call_method<SCAPIX_META_STRING("onVisibleBehindCanceled"), void>(); }
inline void Activity::onEnterAnimationComplete() { return call_method<SCAPIX_META_STRING("onEnterAnimationComplete"), void>(); }
inline void Activity::setImmersive(jboolean i) { return call_method<SCAPIX_META_STRING("setImmersive"), void>(i); }
inline void Activity::setVrModeEnabled(jboolean enabled, ref<android::content::ComponentName> requestedComponent) { return call_method<SCAPIX_META_STRING("setVrModeEnabled"), void>(enabled, requestedComponent); }
inline ref<android::view::ActionMode> Activity::startActionMode(ref<android::view::ActionMode_Callback> callback) { return call_method<SCAPIX_META_STRING("startActionMode"), ref<android::view::ActionMode>>(callback); }
inline ref<android::view::ActionMode> Activity::startActionMode(ref<android::view::ActionMode_Callback> callback, jint type) { return call_method<SCAPIX_META_STRING("startActionMode"), ref<android::view::ActionMode>>(callback, type); }
inline ref<android::view::ActionMode> Activity::onWindowStartingActionMode(ref<android::view::ActionMode_Callback> callback) { return call_method<SCAPIX_META_STRING("onWindowStartingActionMode"), ref<android::view::ActionMode>>(callback); }
inline ref<android::view::ActionMode> Activity::onWindowStartingActionMode(ref<android::view::ActionMode_Callback> callback, jint type) { return call_method<SCAPIX_META_STRING("onWindowStartingActionMode"), ref<android::view::ActionMode>>(callback, type); }
inline void Activity::onActionModeStarted(ref<android::view::ActionMode> mode) { return call_method<SCAPIX_META_STRING("onActionModeStarted"), void>(mode); }
inline void Activity::onActionModeFinished(ref<android::view::ActionMode> mode) { return call_method<SCAPIX_META_STRING("onActionModeFinished"), void>(mode); }
inline jboolean Activity::shouldUpRecreateTask(ref<android::content::Intent> targetIntent) { return call_method<SCAPIX_META_STRING("shouldUpRecreateTask"), jboolean>(targetIntent); }
inline jboolean Activity::navigateUpTo(ref<android::content::Intent> upIntent) { return call_method<SCAPIX_META_STRING("navigateUpTo"), jboolean>(upIntent); }
inline jboolean Activity::navigateUpToFromChild(ref<android::app::Activity> child, ref<android::content::Intent> upIntent) { return call_method<SCAPIX_META_STRING("navigateUpToFromChild"), jboolean>(child, upIntent); }
inline ref<android::content::Intent> Activity::getParentActivityIntent() { return call_method<SCAPIX_META_STRING("getParentActivityIntent"), ref<android::content::Intent>>(); }
inline void Activity::setEnterSharedElementCallback(ref<android::app::SharedElementCallback> callback) { return call_method<SCAPIX_META_STRING("setEnterSharedElementCallback"), void>(callback); }
inline void Activity::setExitSharedElementCallback(ref<android::app::SharedElementCallback> callback) { return call_method<SCAPIX_META_STRING("setExitSharedElementCallback"), void>(callback); }
inline void Activity::postponeEnterTransition() { return call_method<SCAPIX_META_STRING("postponeEnterTransition"), void>(); }
inline void Activity::startPostponedEnterTransition() { return call_method<SCAPIX_META_STRING("startPostponedEnterTransition"), void>(); }
inline ref<android::view::DragAndDropPermissions> Activity::requestDragAndDropPermissions(ref<android::view::DragEvent> event) { return call_method<SCAPIX_META_STRING("requestDragAndDropPermissions"), ref<android::view::DragAndDropPermissions>>(event); }
inline void Activity::startLockTask() { return call_method<SCAPIX_META_STRING("startLockTask"), void>(); }
inline void Activity::stopLockTask() { return call_method<SCAPIX_META_STRING("stopLockTask"), void>(); }
inline void Activity::showLockTaskEscapeMessage() { return call_method<SCAPIX_META_STRING("showLockTaskEscapeMessage"), void>(); }
inline void Activity::setShowWhenLocked(jboolean showWhenLocked) { return call_method<SCAPIX_META_STRING("setShowWhenLocked"), void>(showWhenLocked); }
inline void Activity::setTurnScreenOn(jboolean turnScreenOn) { return call_method<SCAPIX_META_STRING("setTurnScreenOn"), void>(turnScreenOn); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_ACTIVITY_H
