// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_APP_FRAGMENTMANAGER_H
#define SCAPIX_ANDROID_APP_FRAGMENTMANAGER_H

namespace scapix::java_api {

namespace android::app { class Fragment; }
namespace android::app { class Fragment_SavedState; }
namespace android::app { class FragmentManager_BackStackEntry; }
namespace android::app { class FragmentManager_FragmentLifecycleCallbacks; }
namespace android::app { class FragmentManager_OnBackStackChangedListener; }
namespace android::app { class FragmentTransaction; }
namespace android::os { class Bundle; }
namespace java::io { class FileDescriptor; }
namespace java::io { class PrintWriter; }
namespace java::lang { class String; }
namespace java::util { class List; }

namespace android::app {

class FragmentManager : public object_base<SCAPIX_META_STRING("android/app/FragmentManager"),
	java::lang::Object>
{
public:

	using OnBackStackChangedListener = FragmentManager_OnBackStackChangedListener;
	using FragmentLifecycleCallbacks = FragmentManager_FragmentLifecycleCallbacks;
	using BackStackEntry = FragmentManager_BackStackEntry;

	static jint POP_BACK_STACK_INCLUSIVE_();

	static ref<FragmentManager> new_object();
	ref<android::app::FragmentTransaction> beginTransaction();
	jboolean executePendingTransactions();
	ref<android::app::Fragment> findFragmentById(jint p1);
	ref<android::app::Fragment> findFragmentByTag(ref<java::lang::String> p1);
	void popBackStack();
	jboolean popBackStackImmediate();
	void popBackStack(ref<java::lang::String> p1, jint p2);
	jboolean popBackStackImmediate(ref<java::lang::String> p1, jint p2);
	void popBackStack(jint p1, jint p2);
	jboolean popBackStackImmediate(jint p1, jint p2);
	jint getBackStackEntryCount();
	ref<android::app::FragmentManager_BackStackEntry> getBackStackEntryAt(jint p1);
	void addOnBackStackChangedListener(ref<android::app::FragmentManager_OnBackStackChangedListener> p1);
	void removeOnBackStackChangedListener(ref<android::app::FragmentManager_OnBackStackChangedListener> p1);
	void putFragment(ref<android::os::Bundle> p1, ref<java::lang::String> p2, ref<android::app::Fragment> p3);
	ref<android::app::Fragment> getFragment(ref<android::os::Bundle> p1, ref<java::lang::String> p2);
	ref<java::util::List> getFragments();
	ref<android::app::Fragment_SavedState> saveFragmentInstanceState(ref<android::app::Fragment> p1);
	jboolean isDestroyed();
	void registerFragmentLifecycleCallbacks(ref<android::app::FragmentManager_FragmentLifecycleCallbacks> p1, jboolean p2);
	void unregisterFragmentLifecycleCallbacks(ref<android::app::FragmentManager_FragmentLifecycleCallbacks> p1);
	ref<android::app::Fragment> getPrimaryNavigationFragment();
	void dump(ref<java::lang::String> p1, ref<java::io::FileDescriptor> p2, ref<java::io::PrintWriter> p3, ref<link::java::array<java::lang::String>> p4);
	static void enableDebugLogging(jboolean enabled);
	void invalidateOptionsMenu();
	jboolean isStateSaved();

protected:

	FragmentManager(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/app/Fragment.h>
#include <scapix/java_api/android/app/Fragment_SavedState.h>
#include <scapix/java_api/android/app/FragmentManager_BackStackEntry.h>
#include <scapix/java_api/android/app/FragmentManager_FragmentLifecycleCallbacks.h>
#include <scapix/java_api/android/app/FragmentManager_OnBackStackChangedListener.h>
#include <scapix/java_api/android/app/FragmentTransaction.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::app {

inline jint FragmentManager::POP_BACK_STACK_INCLUSIVE_() { return get_static_field<SCAPIX_META_STRING("POP_BACK_STACK_INCLUSIVE"), jint>(); }
inline ref<FragmentManager> FragmentManager::new_object() { return base_::new_object(); }
inline ref<android::app::FragmentTransaction> FragmentManager::beginTransaction() { return call_method<SCAPIX_META_STRING("beginTransaction"), ref<android::app::FragmentTransaction>>(); }
inline jboolean FragmentManager::executePendingTransactions() { return call_method<SCAPIX_META_STRING("executePendingTransactions"), jboolean>(); }
inline ref<android::app::Fragment> FragmentManager::findFragmentById(jint p1) { return call_method<SCAPIX_META_STRING("findFragmentById"), ref<android::app::Fragment>>(p1); }
inline ref<android::app::Fragment> FragmentManager::findFragmentByTag(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("findFragmentByTag"), ref<android::app::Fragment>>(p1); }
inline void FragmentManager::popBackStack() { return call_method<SCAPIX_META_STRING("popBackStack"), void>(); }
inline jboolean FragmentManager::popBackStackImmediate() { return call_method<SCAPIX_META_STRING("popBackStackImmediate"), jboolean>(); }
inline void FragmentManager::popBackStack(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("popBackStack"), void>(p1, p2); }
inline jboolean FragmentManager::popBackStackImmediate(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("popBackStackImmediate"), jboolean>(p1, p2); }
inline void FragmentManager::popBackStack(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("popBackStack"), void>(p1, p2); }
inline jboolean FragmentManager::popBackStackImmediate(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("popBackStackImmediate"), jboolean>(p1, p2); }
inline jint FragmentManager::getBackStackEntryCount() { return call_method<SCAPIX_META_STRING("getBackStackEntryCount"), jint>(); }
inline ref<android::app::FragmentManager_BackStackEntry> FragmentManager::getBackStackEntryAt(jint p1) { return call_method<SCAPIX_META_STRING("getBackStackEntryAt"), ref<android::app::FragmentManager_BackStackEntry>>(p1); }
inline void FragmentManager::addOnBackStackChangedListener(ref<android::app::FragmentManager_OnBackStackChangedListener> p1) { return call_method<SCAPIX_META_STRING("addOnBackStackChangedListener"), void>(p1); }
inline void FragmentManager::removeOnBackStackChangedListener(ref<android::app::FragmentManager_OnBackStackChangedListener> p1) { return call_method<SCAPIX_META_STRING("removeOnBackStackChangedListener"), void>(p1); }
inline void FragmentManager::putFragment(ref<android::os::Bundle> p1, ref<java::lang::String> p2, ref<android::app::Fragment> p3) { return call_method<SCAPIX_META_STRING("putFragment"), void>(p1, p2, p3); }
inline ref<android::app::Fragment> FragmentManager::getFragment(ref<android::os::Bundle> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("getFragment"), ref<android::app::Fragment>>(p1, p2); }
inline ref<java::util::List> FragmentManager::getFragments() { return call_method<SCAPIX_META_STRING("getFragments"), ref<java::util::List>>(); }
inline ref<android::app::Fragment_SavedState> FragmentManager::saveFragmentInstanceState(ref<android::app::Fragment> p1) { return call_method<SCAPIX_META_STRING("saveFragmentInstanceState"), ref<android::app::Fragment_SavedState>>(p1); }
inline jboolean FragmentManager::isDestroyed() { return call_method<SCAPIX_META_STRING("isDestroyed"), jboolean>(); }
inline void FragmentManager::registerFragmentLifecycleCallbacks(ref<android::app::FragmentManager_FragmentLifecycleCallbacks> p1, jboolean p2) { return call_method<SCAPIX_META_STRING("registerFragmentLifecycleCallbacks"), void>(p1, p2); }
inline void FragmentManager::unregisterFragmentLifecycleCallbacks(ref<android::app::FragmentManager_FragmentLifecycleCallbacks> p1) { return call_method<SCAPIX_META_STRING("unregisterFragmentLifecycleCallbacks"), void>(p1); }
inline ref<android::app::Fragment> FragmentManager::getPrimaryNavigationFragment() { return call_method<SCAPIX_META_STRING("getPrimaryNavigationFragment"), ref<android::app::Fragment>>(); }
inline void FragmentManager::dump(ref<java::lang::String> p1, ref<java::io::FileDescriptor> p2, ref<java::io::PrintWriter> p3, ref<link::java::array<java::lang::String>> p4) { return call_method<SCAPIX_META_STRING("dump"), void>(p1, p2, p3, p4); }
inline void FragmentManager::enableDebugLogging(jboolean enabled) { return call_static_method<SCAPIX_META_STRING("enableDebugLogging"), void>(enabled); }
inline void FragmentManager::invalidateOptionsMenu() { return call_method<SCAPIX_META_STRING("invalidateOptionsMenu"), void>(); }
inline jboolean FragmentManager::isStateSaved() { return call_method<SCAPIX_META_STRING("isStateSaved"), jboolean>(); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_FRAGMENTMANAGER_H
