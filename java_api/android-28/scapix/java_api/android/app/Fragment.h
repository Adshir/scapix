// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/content/ComponentCallbacks2.h>
#include <scapix/java_api/android/view/View_OnCreateContextMenuListener.h>

#ifndef SCAPIX_ANDROID_APP_FRAGMENT_H
#define SCAPIX_ANDROID_APP_FRAGMENT_H

namespace scapix::java_api {

namespace android::animation { class Animator; }
namespace android::app { class Activity; }
namespace android::app { class Fragment_SavedState; }
namespace android::app { class FragmentManager; }
namespace android::app { class LoaderManager; }
namespace android::app { class SharedElementCallback; }
namespace android::content { class Context; }
namespace android::content { class Intent; }
namespace android::content { class IntentSender; }
namespace android::content::res { class Configuration; }
namespace android::content::res { class Resources; }
namespace android::os { class Bundle; }
namespace android::transition { class Transition; }
namespace android::util { class AttributeSet; }
namespace android::view { class ContextMenu; }
namespace android::view { class ContextMenu_ContextMenuInfo; }
namespace android::view { class LayoutInflater; }
namespace android::view { class Menu; }
namespace android::view { class MenuInflater; }
namespace android::view { class MenuItem; }
namespace android::view { class View; }
namespace android::view { class ViewGroup; }
namespace java::io { class FileDescriptor; }
namespace java::io { class PrintWriter; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace android::app { class Fragment_InstantiationException; }

namespace android::app {

class Fragment : public object_base<SCAPIX_META_STRING("android/app/Fragment"),
	java::lang::Object,
	android::content::ComponentCallbacks2,
	android::view::View_OnCreateContextMenuListener>
{
public:

	using SavedState = Fragment_SavedState;
	using InstantiationException = Fragment_InstantiationException;

	static ref<Fragment> new_object();
	static ref<android::app::Fragment> instantiate(ref<android::content::Context> context, ref<java::lang::String> fname);
	static ref<android::app::Fragment> instantiate(ref<android::content::Context> context, ref<java::lang::String> fname, ref<android::os::Bundle> args);
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	ref<java::lang::String> toString();
	jint getId();
	ref<java::lang::String> getTag();
	void setArguments(ref<android::os::Bundle> args);
	ref<android::os::Bundle> getArguments();
	jboolean isStateSaved();
	void setInitialSavedState(ref<android::app::Fragment_SavedState> state);
	void setTargetFragment(ref<android::app::Fragment> fragment, jint requestCode);
	ref<android::app::Fragment> getTargetFragment();
	jint getTargetRequestCode();
	ref<android::content::Context> getContext();
	ref<android::app::Activity> getActivity();
	ref<java::lang::Object> getHost();
	ref<android::content::res::Resources> getResources();
	ref<java::lang::CharSequence> getText(jint resId);
	ref<java::lang::String> getString(jint resId);
	ref<java::lang::String> getString(jint resId, ref<link::java::array<java::lang::Object>> formatArgs);
	ref<android::app::FragmentManager> getFragmentManager();
	ref<android::app::FragmentManager> getChildFragmentManager();
	ref<android::app::Fragment> getParentFragment();
	jboolean isAdded();
	jboolean isDetached();
	jboolean isRemoving();
	jboolean isInLayout();
	jboolean isResumed();
	jboolean isVisible();
	jboolean isHidden();
	void onHiddenChanged(jboolean hidden);
	void setRetainInstance(jboolean retain);
	jboolean getRetainInstance();
	void setHasOptionsMenu(jboolean hasMenu);
	void setMenuVisibility(jboolean menuVisible);
	void setUserVisibleHint(jboolean isVisibleToUser);
	jboolean getUserVisibleHint();
	ref<android::app::LoaderManager> getLoaderManager();
	void startActivity(ref<android::content::Intent> intent);
	void startActivity(ref<android::content::Intent> intent, ref<android::os::Bundle> options);
	void startActivityForResult(ref<android::content::Intent> intent, jint requestCode);
	void startActivityForResult(ref<android::content::Intent> intent, jint requestCode, ref<android::os::Bundle> options);
	void startIntentSenderForResult(ref<android::content::IntentSender> intent, jint requestCode, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags, ref<android::os::Bundle> options);
	void onActivityResult(jint requestCode, jint resultCode, ref<android::content::Intent> data);
	void requestPermissions(ref<link::java::array<java::lang::String>> permissions, jint requestCode);
	void onRequestPermissionsResult(jint requestCode, ref<link::java::array<java::lang::String>> permissions, ref<link::java::array<jint>> grantResults);
	jboolean shouldShowRequestPermissionRationale(ref<java::lang::String> permission);
	ref<android::view::LayoutInflater> onGetLayoutInflater(ref<android::os::Bundle> savedInstanceState);
	ref<android::view::LayoutInflater> getLayoutInflater();
	void onInflate(ref<android::util::AttributeSet> attrs, ref<android::os::Bundle> savedInstanceState);
	void onInflate(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, ref<android::os::Bundle> savedInstanceState);
	void onInflate(ref<android::app::Activity> activity, ref<android::util::AttributeSet> attrs, ref<android::os::Bundle> savedInstanceState);
	void onAttachFragment(ref<android::app::Fragment> childFragment);
	void onAttach(ref<android::content::Context> context);
	void onAttach(ref<android::app::Activity> activity);
	ref<android::animation::Animator> onCreateAnimator(jint transit, jboolean enter, jint nextAnim);
	void onCreate(ref<android::os::Bundle> savedInstanceState);
	ref<android::view::View> onCreateView(ref<android::view::LayoutInflater> inflater, ref<android::view::ViewGroup> container, ref<android::os::Bundle> savedInstanceState);
	void onViewCreated(ref<android::view::View> view, ref<android::os::Bundle> savedInstanceState);
	ref<android::view::View> getView();
	void onActivityCreated(ref<android::os::Bundle> savedInstanceState);
	void onViewStateRestored(ref<android::os::Bundle> savedInstanceState);
	void onStart();
	void onResume();
	void onSaveInstanceState(ref<android::os::Bundle> outState);
	void onMultiWindowModeChanged(jboolean isInMultiWindowMode, ref<android::content::res::Configuration> newConfig);
	void onMultiWindowModeChanged(jboolean isInMultiWindowMode);
	void onPictureInPictureModeChanged(jboolean isInPictureInPictureMode, ref<android::content::res::Configuration> newConfig);
	void onPictureInPictureModeChanged(jboolean isInPictureInPictureMode);
	void onConfigurationChanged(ref<android::content::res::Configuration> newConfig);
	void onPause();
	void onStop();
	void onLowMemory();
	void onTrimMemory(jint level);
	void onDestroyView();
	void onDestroy();
	void onDetach();
	void onCreateOptionsMenu(ref<android::view::Menu> menu, ref<android::view::MenuInflater> inflater);
	void onPrepareOptionsMenu(ref<android::view::Menu> menu);
	void onDestroyOptionsMenu();
	jboolean onOptionsItemSelected(ref<android::view::MenuItem> item);
	void onOptionsMenuClosed(ref<android::view::Menu> menu);
	void onCreateContextMenu(ref<android::view::ContextMenu> menu, ref<android::view::View> v, ref<android::view::ContextMenu_ContextMenuInfo> menuInfo);
	void registerForContextMenu(ref<android::view::View> view);
	void unregisterForContextMenu(ref<android::view::View> view);
	jboolean onContextItemSelected(ref<android::view::MenuItem> item);
	void setEnterSharedElementCallback(ref<android::app::SharedElementCallback> callback);
	void setExitSharedElementCallback(ref<android::app::SharedElementCallback> callback);
	void setEnterTransition(ref<android::transition::Transition> transition);
	ref<android::transition::Transition> getEnterTransition();
	void setReturnTransition(ref<android::transition::Transition> transition);
	ref<android::transition::Transition> getReturnTransition();
	void setExitTransition(ref<android::transition::Transition> transition);
	ref<android::transition::Transition> getExitTransition();
	void setReenterTransition(ref<android::transition::Transition> transition);
	ref<android::transition::Transition> getReenterTransition();
	void setSharedElementEnterTransition(ref<android::transition::Transition> transition);
	ref<android::transition::Transition> getSharedElementEnterTransition();
	void setSharedElementReturnTransition(ref<android::transition::Transition> transition);
	ref<android::transition::Transition> getSharedElementReturnTransition();
	void setAllowEnterTransitionOverlap(jboolean allow);
	jboolean getAllowEnterTransitionOverlap();
	void setAllowReturnTransitionOverlap(jboolean allow);
	jboolean getAllowReturnTransitionOverlap();
	void postponeEnterTransition();
	void startPostponedEnterTransition();
	void dump(ref<java::lang::String> prefix, ref<java::io::FileDescriptor> fd, ref<java::io::PrintWriter> writer, ref<link::java::array<java::lang::String>> args);

protected:

	Fragment(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/animation/Animator.h>
#include <scapix/java_api/android/app/Activity.h>
#include <scapix/java_api/android/app/Fragment_SavedState.h>
#include <scapix/java_api/android/app/FragmentManager.h>
#include <scapix/java_api/android/app/LoaderManager.h>
#include <scapix/java_api/android/app/SharedElementCallback.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/IntentSender.h>
#include <scapix/java_api/android/content/res/Configuration.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/transition/Transition.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/ContextMenu.h>
#include <scapix/java_api/android/view/ContextMenu_ContextMenuInfo.h>
#include <scapix/java_api/android/view/LayoutInflater.h>
#include <scapix/java_api/android/view/Menu.h>
#include <scapix/java_api/android/view/MenuInflater.h>
#include <scapix/java_api/android/view/MenuItem.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::app {

inline ref<Fragment> Fragment::new_object() { return base_::new_object(); }
inline ref<android::app::Fragment> Fragment::instantiate(ref<android::content::Context> context, ref<java::lang::String> fname) { return call_static_method<SCAPIX_META_STRING("instantiate"), ref<android::app::Fragment>>(context, fname); }
inline ref<android::app::Fragment> Fragment::instantiate(ref<android::content::Context> context, ref<java::lang::String> fname, ref<android::os::Bundle> args) { return call_static_method<SCAPIX_META_STRING("instantiate"), ref<android::app::Fragment>>(context, fname, args); }
inline jboolean Fragment::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint Fragment::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> Fragment::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint Fragment::getId() { return call_method<SCAPIX_META_STRING("getId"), jint>(); }
inline ref<java::lang::String> Fragment::getTag() { return call_method<SCAPIX_META_STRING("getTag"), ref<java::lang::String>>(); }
inline void Fragment::setArguments(ref<android::os::Bundle> args) { return call_method<SCAPIX_META_STRING("setArguments"), void>(args); }
inline ref<android::os::Bundle> Fragment::getArguments() { return call_method<SCAPIX_META_STRING("getArguments"), ref<android::os::Bundle>>(); }
inline jboolean Fragment::isStateSaved() { return call_method<SCAPIX_META_STRING("isStateSaved"), jboolean>(); }
inline void Fragment::setInitialSavedState(ref<android::app::Fragment_SavedState> state) { return call_method<SCAPIX_META_STRING("setInitialSavedState"), void>(state); }
inline void Fragment::setTargetFragment(ref<android::app::Fragment> fragment, jint requestCode) { return call_method<SCAPIX_META_STRING("setTargetFragment"), void>(fragment, requestCode); }
inline ref<android::app::Fragment> Fragment::getTargetFragment() { return call_method<SCAPIX_META_STRING("getTargetFragment"), ref<android::app::Fragment>>(); }
inline jint Fragment::getTargetRequestCode() { return call_method<SCAPIX_META_STRING("getTargetRequestCode"), jint>(); }
inline ref<android::content::Context> Fragment::getContext() { return call_method<SCAPIX_META_STRING("getContext"), ref<android::content::Context>>(); }
inline ref<android::app::Activity> Fragment::getActivity() { return call_method<SCAPIX_META_STRING("getActivity"), ref<android::app::Activity>>(); }
inline ref<java::lang::Object> Fragment::getHost() { return call_method<SCAPIX_META_STRING("getHost"), ref<java::lang::Object>>(); }
inline ref<android::content::res::Resources> Fragment::getResources() { return call_method<SCAPIX_META_STRING("getResources"), ref<android::content::res::Resources>>(); }
inline ref<java::lang::CharSequence> Fragment::getText(jint resId) { return call_method<SCAPIX_META_STRING("getText"), ref<java::lang::CharSequence>>(resId); }
inline ref<java::lang::String> Fragment::getString(jint resId) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(resId); }
inline ref<java::lang::String> Fragment::getString(jint resId, ref<link::java::array<java::lang::Object>> formatArgs) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(resId, formatArgs); }
inline ref<android::app::FragmentManager> Fragment::getFragmentManager() { return call_method<SCAPIX_META_STRING("getFragmentManager"), ref<android::app::FragmentManager>>(); }
inline ref<android::app::FragmentManager> Fragment::getChildFragmentManager() { return call_method<SCAPIX_META_STRING("getChildFragmentManager"), ref<android::app::FragmentManager>>(); }
inline ref<android::app::Fragment> Fragment::getParentFragment() { return call_method<SCAPIX_META_STRING("getParentFragment"), ref<android::app::Fragment>>(); }
inline jboolean Fragment::isAdded() { return call_method<SCAPIX_META_STRING("isAdded"), jboolean>(); }
inline jboolean Fragment::isDetached() { return call_method<SCAPIX_META_STRING("isDetached"), jboolean>(); }
inline jboolean Fragment::isRemoving() { return call_method<SCAPIX_META_STRING("isRemoving"), jboolean>(); }
inline jboolean Fragment::isInLayout() { return call_method<SCAPIX_META_STRING("isInLayout"), jboolean>(); }
inline jboolean Fragment::isResumed() { return call_method<SCAPIX_META_STRING("isResumed"), jboolean>(); }
inline jboolean Fragment::isVisible() { return call_method<SCAPIX_META_STRING("isVisible"), jboolean>(); }
inline jboolean Fragment::isHidden() { return call_method<SCAPIX_META_STRING("isHidden"), jboolean>(); }
inline void Fragment::onHiddenChanged(jboolean hidden) { return call_method<SCAPIX_META_STRING("onHiddenChanged"), void>(hidden); }
inline void Fragment::setRetainInstance(jboolean retain) { return call_method<SCAPIX_META_STRING("setRetainInstance"), void>(retain); }
inline jboolean Fragment::getRetainInstance() { return call_method<SCAPIX_META_STRING("getRetainInstance"), jboolean>(); }
inline void Fragment::setHasOptionsMenu(jboolean hasMenu) { return call_method<SCAPIX_META_STRING("setHasOptionsMenu"), void>(hasMenu); }
inline void Fragment::setMenuVisibility(jboolean menuVisible) { return call_method<SCAPIX_META_STRING("setMenuVisibility"), void>(menuVisible); }
inline void Fragment::setUserVisibleHint(jboolean isVisibleToUser) { return call_method<SCAPIX_META_STRING("setUserVisibleHint"), void>(isVisibleToUser); }
inline jboolean Fragment::getUserVisibleHint() { return call_method<SCAPIX_META_STRING("getUserVisibleHint"), jboolean>(); }
inline ref<android::app::LoaderManager> Fragment::getLoaderManager() { return call_method<SCAPIX_META_STRING("getLoaderManager"), ref<android::app::LoaderManager>>(); }
inline void Fragment::startActivity(ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("startActivity"), void>(intent); }
inline void Fragment::startActivity(ref<android::content::Intent> intent, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startActivity"), void>(intent, options); }
inline void Fragment::startActivityForResult(ref<android::content::Intent> intent, jint requestCode) { return call_method<SCAPIX_META_STRING("startActivityForResult"), void>(intent, requestCode); }
inline void Fragment::startActivityForResult(ref<android::content::Intent> intent, jint requestCode, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startActivityForResult"), void>(intent, requestCode, options); }
inline void Fragment::startIntentSenderForResult(ref<android::content::IntentSender> intent, jint requestCode, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startIntentSenderForResult"), void>(intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags, options); }
inline void Fragment::onActivityResult(jint requestCode, jint resultCode, ref<android::content::Intent> data) { return call_method<SCAPIX_META_STRING("onActivityResult"), void>(requestCode, resultCode, data); }
inline void Fragment::requestPermissions(ref<link::java::array<java::lang::String>> permissions, jint requestCode) { return call_method<SCAPIX_META_STRING("requestPermissions"), void>(permissions, requestCode); }
inline void Fragment::onRequestPermissionsResult(jint requestCode, ref<link::java::array<java::lang::String>> permissions, ref<link::java::array<jint>> grantResults) { return call_method<SCAPIX_META_STRING("onRequestPermissionsResult"), void>(requestCode, permissions, grantResults); }
inline jboolean Fragment::shouldShowRequestPermissionRationale(ref<java::lang::String> permission) { return call_method<SCAPIX_META_STRING("shouldShowRequestPermissionRationale"), jboolean>(permission); }
inline ref<android::view::LayoutInflater> Fragment::onGetLayoutInflater(ref<android::os::Bundle> savedInstanceState) { return call_method<SCAPIX_META_STRING("onGetLayoutInflater"), ref<android::view::LayoutInflater>>(savedInstanceState); }
inline ref<android::view::LayoutInflater> Fragment::getLayoutInflater() { return call_method<SCAPIX_META_STRING("getLayoutInflater"), ref<android::view::LayoutInflater>>(); }
inline void Fragment::onInflate(ref<android::util::AttributeSet> attrs, ref<android::os::Bundle> savedInstanceState) { return call_method<SCAPIX_META_STRING("onInflate"), void>(attrs, savedInstanceState); }
inline void Fragment::onInflate(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, ref<android::os::Bundle> savedInstanceState) { return call_method<SCAPIX_META_STRING("onInflate"), void>(context, attrs, savedInstanceState); }
inline void Fragment::onInflate(ref<android::app::Activity> activity, ref<android::util::AttributeSet> attrs, ref<android::os::Bundle> savedInstanceState) { return call_method<SCAPIX_META_STRING("onInflate"), void>(activity, attrs, savedInstanceState); }
inline void Fragment::onAttachFragment(ref<android::app::Fragment> childFragment) { return call_method<SCAPIX_META_STRING("onAttachFragment"), void>(childFragment); }
inline void Fragment::onAttach(ref<android::content::Context> context) { return call_method<SCAPIX_META_STRING("onAttach"), void>(context); }
inline void Fragment::onAttach(ref<android::app::Activity> activity) { return call_method<SCAPIX_META_STRING("onAttach"), void>(activity); }
inline ref<android::animation::Animator> Fragment::onCreateAnimator(jint transit, jboolean enter, jint nextAnim) { return call_method<SCAPIX_META_STRING("onCreateAnimator"), ref<android::animation::Animator>>(transit, enter, nextAnim); }
inline void Fragment::onCreate(ref<android::os::Bundle> savedInstanceState) { return call_method<SCAPIX_META_STRING("onCreate"), void>(savedInstanceState); }
inline ref<android::view::View> Fragment::onCreateView(ref<android::view::LayoutInflater> inflater, ref<android::view::ViewGroup> container, ref<android::os::Bundle> savedInstanceState) { return call_method<SCAPIX_META_STRING("onCreateView"), ref<android::view::View>>(inflater, container, savedInstanceState); }
inline void Fragment::onViewCreated(ref<android::view::View> view, ref<android::os::Bundle> savedInstanceState) { return call_method<SCAPIX_META_STRING("onViewCreated"), void>(view, savedInstanceState); }
inline ref<android::view::View> Fragment::getView() { return call_method<SCAPIX_META_STRING("getView"), ref<android::view::View>>(); }
inline void Fragment::onActivityCreated(ref<android::os::Bundle> savedInstanceState) { return call_method<SCAPIX_META_STRING("onActivityCreated"), void>(savedInstanceState); }
inline void Fragment::onViewStateRestored(ref<android::os::Bundle> savedInstanceState) { return call_method<SCAPIX_META_STRING("onViewStateRestored"), void>(savedInstanceState); }
inline void Fragment::onStart() { return call_method<SCAPIX_META_STRING("onStart"), void>(); }
inline void Fragment::onResume() { return call_method<SCAPIX_META_STRING("onResume"), void>(); }
inline void Fragment::onSaveInstanceState(ref<android::os::Bundle> outState) { return call_method<SCAPIX_META_STRING("onSaveInstanceState"), void>(outState); }
inline void Fragment::onMultiWindowModeChanged(jboolean isInMultiWindowMode, ref<android::content::res::Configuration> newConfig) { return call_method<SCAPIX_META_STRING("onMultiWindowModeChanged"), void>(isInMultiWindowMode, newConfig); }
inline void Fragment::onMultiWindowModeChanged(jboolean isInMultiWindowMode) { return call_method<SCAPIX_META_STRING("onMultiWindowModeChanged"), void>(isInMultiWindowMode); }
inline void Fragment::onPictureInPictureModeChanged(jboolean isInPictureInPictureMode, ref<android::content::res::Configuration> newConfig) { return call_method<SCAPIX_META_STRING("onPictureInPictureModeChanged"), void>(isInPictureInPictureMode, newConfig); }
inline void Fragment::onPictureInPictureModeChanged(jboolean isInPictureInPictureMode) { return call_method<SCAPIX_META_STRING("onPictureInPictureModeChanged"), void>(isInPictureInPictureMode); }
inline void Fragment::onConfigurationChanged(ref<android::content::res::Configuration> newConfig) { return call_method<SCAPIX_META_STRING("onConfigurationChanged"), void>(newConfig); }
inline void Fragment::onPause() { return call_method<SCAPIX_META_STRING("onPause"), void>(); }
inline void Fragment::onStop() { return call_method<SCAPIX_META_STRING("onStop"), void>(); }
inline void Fragment::onLowMemory() { return call_method<SCAPIX_META_STRING("onLowMemory"), void>(); }
inline void Fragment::onTrimMemory(jint level) { return call_method<SCAPIX_META_STRING("onTrimMemory"), void>(level); }
inline void Fragment::onDestroyView() { return call_method<SCAPIX_META_STRING("onDestroyView"), void>(); }
inline void Fragment::onDestroy() { return call_method<SCAPIX_META_STRING("onDestroy"), void>(); }
inline void Fragment::onDetach() { return call_method<SCAPIX_META_STRING("onDetach"), void>(); }
inline void Fragment::onCreateOptionsMenu(ref<android::view::Menu> menu, ref<android::view::MenuInflater> inflater) { return call_method<SCAPIX_META_STRING("onCreateOptionsMenu"), void>(menu, inflater); }
inline void Fragment::onPrepareOptionsMenu(ref<android::view::Menu> menu) { return call_method<SCAPIX_META_STRING("onPrepareOptionsMenu"), void>(menu); }
inline void Fragment::onDestroyOptionsMenu() { return call_method<SCAPIX_META_STRING("onDestroyOptionsMenu"), void>(); }
inline jboolean Fragment::onOptionsItemSelected(ref<android::view::MenuItem> item) { return call_method<SCAPIX_META_STRING("onOptionsItemSelected"), jboolean>(item); }
inline void Fragment::onOptionsMenuClosed(ref<android::view::Menu> menu) { return call_method<SCAPIX_META_STRING("onOptionsMenuClosed"), void>(menu); }
inline void Fragment::onCreateContextMenu(ref<android::view::ContextMenu> menu, ref<android::view::View> v, ref<android::view::ContextMenu_ContextMenuInfo> menuInfo) { return call_method<SCAPIX_META_STRING("onCreateContextMenu"), void>(menu, v, menuInfo); }
inline void Fragment::registerForContextMenu(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("registerForContextMenu"), void>(view); }
inline void Fragment::unregisterForContextMenu(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("unregisterForContextMenu"), void>(view); }
inline jboolean Fragment::onContextItemSelected(ref<android::view::MenuItem> item) { return call_method<SCAPIX_META_STRING("onContextItemSelected"), jboolean>(item); }
inline void Fragment::setEnterSharedElementCallback(ref<android::app::SharedElementCallback> callback) { return call_method<SCAPIX_META_STRING("setEnterSharedElementCallback"), void>(callback); }
inline void Fragment::setExitSharedElementCallback(ref<android::app::SharedElementCallback> callback) { return call_method<SCAPIX_META_STRING("setExitSharedElementCallback"), void>(callback); }
inline void Fragment::setEnterTransition(ref<android::transition::Transition> transition) { return call_method<SCAPIX_META_STRING("setEnterTransition"), void>(transition); }
inline ref<android::transition::Transition> Fragment::getEnterTransition() { return call_method<SCAPIX_META_STRING("getEnterTransition"), ref<android::transition::Transition>>(); }
inline void Fragment::setReturnTransition(ref<android::transition::Transition> transition) { return call_method<SCAPIX_META_STRING("setReturnTransition"), void>(transition); }
inline ref<android::transition::Transition> Fragment::getReturnTransition() { return call_method<SCAPIX_META_STRING("getReturnTransition"), ref<android::transition::Transition>>(); }
inline void Fragment::setExitTransition(ref<android::transition::Transition> transition) { return call_method<SCAPIX_META_STRING("setExitTransition"), void>(transition); }
inline ref<android::transition::Transition> Fragment::getExitTransition() { return call_method<SCAPIX_META_STRING("getExitTransition"), ref<android::transition::Transition>>(); }
inline void Fragment::setReenterTransition(ref<android::transition::Transition> transition) { return call_method<SCAPIX_META_STRING("setReenterTransition"), void>(transition); }
inline ref<android::transition::Transition> Fragment::getReenterTransition() { return call_method<SCAPIX_META_STRING("getReenterTransition"), ref<android::transition::Transition>>(); }
inline void Fragment::setSharedElementEnterTransition(ref<android::transition::Transition> transition) { return call_method<SCAPIX_META_STRING("setSharedElementEnterTransition"), void>(transition); }
inline ref<android::transition::Transition> Fragment::getSharedElementEnterTransition() { return call_method<SCAPIX_META_STRING("getSharedElementEnterTransition"), ref<android::transition::Transition>>(); }
inline void Fragment::setSharedElementReturnTransition(ref<android::transition::Transition> transition) { return call_method<SCAPIX_META_STRING("setSharedElementReturnTransition"), void>(transition); }
inline ref<android::transition::Transition> Fragment::getSharedElementReturnTransition() { return call_method<SCAPIX_META_STRING("getSharedElementReturnTransition"), ref<android::transition::Transition>>(); }
inline void Fragment::setAllowEnterTransitionOverlap(jboolean allow) { return call_method<SCAPIX_META_STRING("setAllowEnterTransitionOverlap"), void>(allow); }
inline jboolean Fragment::getAllowEnterTransitionOverlap() { return call_method<SCAPIX_META_STRING("getAllowEnterTransitionOverlap"), jboolean>(); }
inline void Fragment::setAllowReturnTransitionOverlap(jboolean allow) { return call_method<SCAPIX_META_STRING("setAllowReturnTransitionOverlap"), void>(allow); }
inline jboolean Fragment::getAllowReturnTransitionOverlap() { return call_method<SCAPIX_META_STRING("getAllowReturnTransitionOverlap"), jboolean>(); }
inline void Fragment::postponeEnterTransition() { return call_method<SCAPIX_META_STRING("postponeEnterTransition"), void>(); }
inline void Fragment::startPostponedEnterTransition() { return call_method<SCAPIX_META_STRING("startPostponedEnterTransition"), void>(); }
inline void Fragment::dump(ref<java::lang::String> prefix, ref<java::io::FileDescriptor> fd, ref<java::io::PrintWriter> writer, ref<link::java::array<java::lang::String>> args) { return call_method<SCAPIX_META_STRING("dump"), void>(prefix, fd, writer, args); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_FRAGMENT_H
