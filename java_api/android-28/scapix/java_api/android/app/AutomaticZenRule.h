// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_APP_AUTOMATICZENRULE_H
#define SCAPIX_ANDROID_APP_AUTOMATICZENRULE_H

namespace scapix::java_api {

namespace android::content { class ComponentName; }
namespace android::net { class Uri; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::app {

class AutomaticZenRule : public object_base<SCAPIX_META_STRING("android/app/AutomaticZenRule"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();

	static ref<AutomaticZenRule> new_object(ref<java::lang::String> name, ref<android::content::ComponentName> owner, ref<android::net::Uri> conditionId, jint interruptionFilter, jboolean enabled);
	static ref<AutomaticZenRule> new_object(ref<android::os::Parcel> source);
	ref<android::content::ComponentName> getOwner();
	ref<android::net::Uri> getConditionId();
	jint getInterruptionFilter();
	ref<java::lang::String> getName();
	jboolean isEnabled();
	jlong getCreationTime();
	void setConditionId(ref<android::net::Uri> conditionId);
	void setInterruptionFilter(jint interruptionFilter);
	void setName(ref<java::lang::String> name);
	void setEnabled(jboolean enabled);
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	ref<java::lang::String> toString();
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();

protected:

	AutomaticZenRule(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::app {

inline ref<android::os::Parcelable_Creator> AutomaticZenRule::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<AutomaticZenRule> AutomaticZenRule::new_object(ref<java::lang::String> name, ref<android::content::ComponentName> owner, ref<android::net::Uri> conditionId, jint interruptionFilter, jboolean enabled) { return base_::new_object(name, owner, conditionId, interruptionFilter, enabled); }
inline ref<AutomaticZenRule> AutomaticZenRule::new_object(ref<android::os::Parcel> source) { return base_::new_object(source); }
inline ref<android::content::ComponentName> AutomaticZenRule::getOwner() { return call_method<SCAPIX_META_STRING("getOwner"), ref<android::content::ComponentName>>(); }
inline ref<android::net::Uri> AutomaticZenRule::getConditionId() { return call_method<SCAPIX_META_STRING("getConditionId"), ref<android::net::Uri>>(); }
inline jint AutomaticZenRule::getInterruptionFilter() { return call_method<SCAPIX_META_STRING("getInterruptionFilter"), jint>(); }
inline ref<java::lang::String> AutomaticZenRule::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline jboolean AutomaticZenRule::isEnabled() { return call_method<SCAPIX_META_STRING("isEnabled"), jboolean>(); }
inline jlong AutomaticZenRule::getCreationTime() { return call_method<SCAPIX_META_STRING("getCreationTime"), jlong>(); }
inline void AutomaticZenRule::setConditionId(ref<android::net::Uri> conditionId) { return call_method<SCAPIX_META_STRING("setConditionId"), void>(conditionId); }
inline void AutomaticZenRule::setInterruptionFilter(jint interruptionFilter) { return call_method<SCAPIX_META_STRING("setInterruptionFilter"), void>(interruptionFilter); }
inline void AutomaticZenRule::setName(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("setName"), void>(name); }
inline void AutomaticZenRule::setEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setEnabled"), void>(enabled); }
inline jint AutomaticZenRule::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void AutomaticZenRule::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline ref<java::lang::String> AutomaticZenRule::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean AutomaticZenRule::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint AutomaticZenRule::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_AUTOMATICZENRULE_H
