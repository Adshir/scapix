// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_APP_ACTIVITYOPTIONS_H
#define SCAPIX_ANDROID_APP_ACTIVITYOPTIONS_H

namespace scapix::java_api {

namespace android::app { class Activity; }
namespace android::app { class PendingIntent; }
namespace android::content { class Context; }
namespace android::graphics { class Bitmap; }
namespace android::graphics { class Rect; }
namespace android::os { class Bundle; }
namespace android::util { class Pair; }
namespace android::view { class View; }
namespace java::lang { class String; }

namespace android::app {

class ActivityOptions : public object_base<SCAPIX_META_STRING("android/app/ActivityOptions"),
	java::lang::Object>
{
public:

	static ref<java::lang::String> EXTRA_USAGE_TIME_REPORT_();
	static ref<java::lang::String> EXTRA_USAGE_TIME_REPORT_PACKAGES_();

	static ref<android::app::ActivityOptions> makeCustomAnimation(ref<android::content::Context> context, jint enterResId, jint exitResId);
	static ref<android::app::ActivityOptions> makeScaleUpAnimation(ref<android::view::View> source, jint startX, jint startY, jint width, jint height);
	static ref<android::app::ActivityOptions> makeClipRevealAnimation(ref<android::view::View> source, jint startX, jint startY, jint width, jint height);
	static ref<android::app::ActivityOptions> makeThumbnailScaleUpAnimation(ref<android::view::View> source, ref<android::graphics::Bitmap> thumbnail, jint startX, jint startY);
	static ref<android::app::ActivityOptions> makeSceneTransitionAnimation(ref<android::app::Activity> activity, ref<android::view::View> sharedElement, ref<java::lang::String> sharedElementName);
	static ref<android::app::ActivityOptions> makeSceneTransitionAnimation(ref<android::app::Activity> activity, ref<link::java::array<android::util::Pair>> sharedElements);
	static ref<android::app::ActivityOptions> makeTaskLaunchBehind();
	static ref<android::app::ActivityOptions> makeBasic();
	ref<android::app::ActivityOptions> setLaunchBounds(ref<android::graphics::Rect> screenSpacePixelRect);
	ref<android::graphics::Rect> getLaunchBounds();
	jboolean getLockTaskMode();
	ref<android::app::ActivityOptions> setLockTaskEnabled(jboolean lockTaskMode);
	jint getLaunchDisplayId();
	ref<android::app::ActivityOptions> setLaunchDisplayId(jint launchDisplayId);
	void update(ref<android::app::ActivityOptions> otherOptions);
	ref<android::os::Bundle> toBundle();
	void requestUsageTimeReport(ref<android::app::PendingIntent> receiver);
	ref<android::app::ActivityOptions> setAppVerificationBundle(ref<android::os::Bundle> bundle);
	ref<java::lang::String> toString();

protected:

	ActivityOptions(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/app/Activity.h>
#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/util/Pair.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::app {

inline ref<java::lang::String> ActivityOptions::EXTRA_USAGE_TIME_REPORT_() { return get_static_field<SCAPIX_META_STRING("EXTRA_USAGE_TIME_REPORT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ActivityOptions::EXTRA_USAGE_TIME_REPORT_PACKAGES_() { return get_static_field<SCAPIX_META_STRING("EXTRA_USAGE_TIME_REPORT_PACKAGES"), ref<java::lang::String>>(); }
inline ref<android::app::ActivityOptions> ActivityOptions::makeCustomAnimation(ref<android::content::Context> context, jint enterResId, jint exitResId) { return call_static_method<SCAPIX_META_STRING("makeCustomAnimation"), ref<android::app::ActivityOptions>>(context, enterResId, exitResId); }
inline ref<android::app::ActivityOptions> ActivityOptions::makeScaleUpAnimation(ref<android::view::View> source, jint startX, jint startY, jint width, jint height) { return call_static_method<SCAPIX_META_STRING("makeScaleUpAnimation"), ref<android::app::ActivityOptions>>(source, startX, startY, width, height); }
inline ref<android::app::ActivityOptions> ActivityOptions::makeClipRevealAnimation(ref<android::view::View> source, jint startX, jint startY, jint width, jint height) { return call_static_method<SCAPIX_META_STRING("makeClipRevealAnimation"), ref<android::app::ActivityOptions>>(source, startX, startY, width, height); }
inline ref<android::app::ActivityOptions> ActivityOptions::makeThumbnailScaleUpAnimation(ref<android::view::View> source, ref<android::graphics::Bitmap> thumbnail, jint startX, jint startY) { return call_static_method<SCAPIX_META_STRING("makeThumbnailScaleUpAnimation"), ref<android::app::ActivityOptions>>(source, thumbnail, startX, startY); }
inline ref<android::app::ActivityOptions> ActivityOptions::makeSceneTransitionAnimation(ref<android::app::Activity> activity, ref<android::view::View> sharedElement, ref<java::lang::String> sharedElementName) { return call_static_method<SCAPIX_META_STRING("makeSceneTransitionAnimation"), ref<android::app::ActivityOptions>>(activity, sharedElement, sharedElementName); }
inline ref<android::app::ActivityOptions> ActivityOptions::makeSceneTransitionAnimation(ref<android::app::Activity> activity, ref<link::java::array<android::util::Pair>> sharedElements) { return call_static_method<SCAPIX_META_STRING("makeSceneTransitionAnimation"), ref<android::app::ActivityOptions>>(activity, sharedElements); }
inline ref<android::app::ActivityOptions> ActivityOptions::makeTaskLaunchBehind() { return call_static_method<SCAPIX_META_STRING("makeTaskLaunchBehind"), ref<android::app::ActivityOptions>>(); }
inline ref<android::app::ActivityOptions> ActivityOptions::makeBasic() { return call_static_method<SCAPIX_META_STRING("makeBasic"), ref<android::app::ActivityOptions>>(); }
inline ref<android::app::ActivityOptions> ActivityOptions::setLaunchBounds(ref<android::graphics::Rect> screenSpacePixelRect) { return call_method<SCAPIX_META_STRING("setLaunchBounds"), ref<android::app::ActivityOptions>>(screenSpacePixelRect); }
inline ref<android::graphics::Rect> ActivityOptions::getLaunchBounds() { return call_method<SCAPIX_META_STRING("getLaunchBounds"), ref<android::graphics::Rect>>(); }
inline jboolean ActivityOptions::getLockTaskMode() { return call_method<SCAPIX_META_STRING("getLockTaskMode"), jboolean>(); }
inline ref<android::app::ActivityOptions> ActivityOptions::setLockTaskEnabled(jboolean lockTaskMode) { return call_method<SCAPIX_META_STRING("setLockTaskEnabled"), ref<android::app::ActivityOptions>>(lockTaskMode); }
inline jint ActivityOptions::getLaunchDisplayId() { return call_method<SCAPIX_META_STRING("getLaunchDisplayId"), jint>(); }
inline ref<android::app::ActivityOptions> ActivityOptions::setLaunchDisplayId(jint launchDisplayId) { return call_method<SCAPIX_META_STRING("setLaunchDisplayId"), ref<android::app::ActivityOptions>>(launchDisplayId); }
inline void ActivityOptions::update(ref<android::app::ActivityOptions> otherOptions) { return call_method<SCAPIX_META_STRING("update"), void>(otherOptions); }
inline ref<android::os::Bundle> ActivityOptions::toBundle() { return call_method<SCAPIX_META_STRING("toBundle"), ref<android::os::Bundle>>(); }
inline void ActivityOptions::requestUsageTimeReport(ref<android::app::PendingIntent> receiver) { return call_method<SCAPIX_META_STRING("requestUsageTimeReport"), void>(receiver); }
inline ref<android::app::ActivityOptions> ActivityOptions::setAppVerificationBundle(ref<android::os::Bundle> bundle) { return call_method<SCAPIX_META_STRING("setAppVerificationBundle"), ref<android::app::ActivityOptions>>(bundle); }
inline ref<java::lang::String> ActivityOptions::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_ACTIVITYOPTIONS_H
