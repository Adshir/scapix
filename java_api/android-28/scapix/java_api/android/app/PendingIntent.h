// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_APP_PENDINGINTENT_H
#define SCAPIX_ANDROID_APP_PENDINGINTENT_H

namespace scapix::java_api {

namespace android::app { class PendingIntent_OnFinished; }
namespace android::content { class Context; }
namespace android::content { class Intent; }
namespace android::content { class IntentSender; }
namespace android::os { class Bundle; }
namespace android::os { class Handler; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::os { class UserHandle; }
namespace java::lang { class String; }
namespace android::app { class PendingIntent_CanceledException; }

namespace android::app {

class PendingIntent : public object_base<SCAPIX_META_STRING("android/app/PendingIntent"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using OnFinished = PendingIntent_OnFinished;
	using CanceledException = PendingIntent_CanceledException;

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint FLAG_CANCEL_CURRENT_();
	static jint FLAG_IMMUTABLE_();
	static jint FLAG_NO_CREATE_();
	static jint FLAG_ONE_SHOT_();
	static jint FLAG_UPDATE_CURRENT_();

	static ref<android::app::PendingIntent> getActivity(ref<android::content::Context> context, jint requestCode, ref<android::content::Intent> intent, jint flags);
	static ref<android::app::PendingIntent> getActivity(ref<android::content::Context> context, jint requestCode, ref<android::content::Intent> intent, jint flags, ref<android::os::Bundle> options);
	static ref<android::app::PendingIntent> getActivities(ref<android::content::Context> context, jint requestCode, ref<link::java::array<android::content::Intent>> intents, jint flags);
	static ref<android::app::PendingIntent> getActivities(ref<android::content::Context> context, jint requestCode, ref<link::java::array<android::content::Intent>> intents, jint flags, ref<android::os::Bundle> options);
	static ref<android::app::PendingIntent> getBroadcast(ref<android::content::Context> context, jint requestCode, ref<android::content::Intent> intent, jint flags);
	static ref<android::app::PendingIntent> getService(ref<android::content::Context> context, jint requestCode, ref<android::content::Intent> intent, jint flags);
	static ref<android::app::PendingIntent> getForegroundService(ref<android::content::Context> context, jint requestCode, ref<android::content::Intent> intent, jint flags);
	ref<android::content::IntentSender> getIntentSender();
	void cancel();
	void send();
	void send(jint code);
	void send(ref<android::content::Context> context, jint code, ref<android::content::Intent> intent);
	void send(jint code, ref<android::app::PendingIntent_OnFinished> onFinished, ref<android::os::Handler> handler);
	void send(ref<android::content::Context> context, jint code, ref<android::content::Intent> intent, ref<android::app::PendingIntent_OnFinished> onFinished, ref<android::os::Handler> handler);
	void send(ref<android::content::Context> context, jint code, ref<android::content::Intent> intent, ref<android::app::PendingIntent_OnFinished> onFinished, ref<android::os::Handler> handler, ref<java::lang::String> requiredPermission);
	void send(ref<android::content::Context> context, jint code, ref<android::content::Intent> intent, ref<android::app::PendingIntent_OnFinished> onFinished, ref<android::os::Handler> handler, ref<java::lang::String> requiredPermission, ref<android::os::Bundle> options);
	ref<java::lang::String> getTargetPackage();
	ref<java::lang::String> getCreatorPackage();
	jint getCreatorUid();
	ref<android::os::UserHandle> getCreatorUserHandle();
	jboolean equals(ref<java::lang::Object> otherObj);
	jint hashCode();
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint flags);
	static void writePendingIntentOrNullToParcel(ref<android::app::PendingIntent> sender, ref<android::os::Parcel> out);
	static ref<android::app::PendingIntent> readPendingIntentOrNullFromParcel(ref<android::os::Parcel> in);

protected:

	PendingIntent(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/app/PendingIntent_OnFinished.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/IntentSender.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/os/UserHandle.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::app {

inline ref<android::os::Parcelable_Creator> PendingIntent::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint PendingIntent::FLAG_CANCEL_CURRENT_() { return get_static_field<SCAPIX_META_STRING("FLAG_CANCEL_CURRENT"), jint>(); }
inline jint PendingIntent::FLAG_IMMUTABLE_() { return get_static_field<SCAPIX_META_STRING("FLAG_IMMUTABLE"), jint>(); }
inline jint PendingIntent::FLAG_NO_CREATE_() { return get_static_field<SCAPIX_META_STRING("FLAG_NO_CREATE"), jint>(); }
inline jint PendingIntent::FLAG_ONE_SHOT_() { return get_static_field<SCAPIX_META_STRING("FLAG_ONE_SHOT"), jint>(); }
inline jint PendingIntent::FLAG_UPDATE_CURRENT_() { return get_static_field<SCAPIX_META_STRING("FLAG_UPDATE_CURRENT"), jint>(); }
inline ref<android::app::PendingIntent> PendingIntent::getActivity(ref<android::content::Context> context, jint requestCode, ref<android::content::Intent> intent, jint flags) { return call_static_method<SCAPIX_META_STRING("getActivity"), ref<android::app::PendingIntent>>(context, requestCode, intent, flags); }
inline ref<android::app::PendingIntent> PendingIntent::getActivity(ref<android::content::Context> context, jint requestCode, ref<android::content::Intent> intent, jint flags, ref<android::os::Bundle> options) { return call_static_method<SCAPIX_META_STRING("getActivity"), ref<android::app::PendingIntent>>(context, requestCode, intent, flags, options); }
inline ref<android::app::PendingIntent> PendingIntent::getActivities(ref<android::content::Context> context, jint requestCode, ref<link::java::array<android::content::Intent>> intents, jint flags) { return call_static_method<SCAPIX_META_STRING("getActivities"), ref<android::app::PendingIntent>>(context, requestCode, intents, flags); }
inline ref<android::app::PendingIntent> PendingIntent::getActivities(ref<android::content::Context> context, jint requestCode, ref<link::java::array<android::content::Intent>> intents, jint flags, ref<android::os::Bundle> options) { return call_static_method<SCAPIX_META_STRING("getActivities"), ref<android::app::PendingIntent>>(context, requestCode, intents, flags, options); }
inline ref<android::app::PendingIntent> PendingIntent::getBroadcast(ref<android::content::Context> context, jint requestCode, ref<android::content::Intent> intent, jint flags) { return call_static_method<SCAPIX_META_STRING("getBroadcast"), ref<android::app::PendingIntent>>(context, requestCode, intent, flags); }
inline ref<android::app::PendingIntent> PendingIntent::getService(ref<android::content::Context> context, jint requestCode, ref<android::content::Intent> intent, jint flags) { return call_static_method<SCAPIX_META_STRING("getService"), ref<android::app::PendingIntent>>(context, requestCode, intent, flags); }
inline ref<android::app::PendingIntent> PendingIntent::getForegroundService(ref<android::content::Context> context, jint requestCode, ref<android::content::Intent> intent, jint flags) { return call_static_method<SCAPIX_META_STRING("getForegroundService"), ref<android::app::PendingIntent>>(context, requestCode, intent, flags); }
inline ref<android::content::IntentSender> PendingIntent::getIntentSender() { return call_method<SCAPIX_META_STRING("getIntentSender"), ref<android::content::IntentSender>>(); }
inline void PendingIntent::cancel() { return call_method<SCAPIX_META_STRING("cancel"), void>(); }
inline void PendingIntent::send() { return call_method<SCAPIX_META_STRING("send"), void>(); }
inline void PendingIntent::send(jint code) { return call_method<SCAPIX_META_STRING("send"), void>(code); }
inline void PendingIntent::send(ref<android::content::Context> context, jint code, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("send"), void>(context, code, intent); }
inline void PendingIntent::send(jint code, ref<android::app::PendingIntent_OnFinished> onFinished, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("send"), void>(code, onFinished, handler); }
inline void PendingIntent::send(ref<android::content::Context> context, jint code, ref<android::content::Intent> intent, ref<android::app::PendingIntent_OnFinished> onFinished, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("send"), void>(context, code, intent, onFinished, handler); }
inline void PendingIntent::send(ref<android::content::Context> context, jint code, ref<android::content::Intent> intent, ref<android::app::PendingIntent_OnFinished> onFinished, ref<android::os::Handler> handler, ref<java::lang::String> requiredPermission) { return call_method<SCAPIX_META_STRING("send"), void>(context, code, intent, onFinished, handler, requiredPermission); }
inline void PendingIntent::send(ref<android::content::Context> context, jint code, ref<android::content::Intent> intent, ref<android::app::PendingIntent_OnFinished> onFinished, ref<android::os::Handler> handler, ref<java::lang::String> requiredPermission, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("send"), void>(context, code, intent, onFinished, handler, requiredPermission, options); }
inline ref<java::lang::String> PendingIntent::getTargetPackage() { return call_method<SCAPIX_META_STRING("getTargetPackage"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PendingIntent::getCreatorPackage() { return call_method<SCAPIX_META_STRING("getCreatorPackage"), ref<java::lang::String>>(); }
inline jint PendingIntent::getCreatorUid() { return call_method<SCAPIX_META_STRING("getCreatorUid"), jint>(); }
inline ref<android::os::UserHandle> PendingIntent::getCreatorUserHandle() { return call_method<SCAPIX_META_STRING("getCreatorUserHandle"), ref<android::os::UserHandle>>(); }
inline jboolean PendingIntent::equals(ref<java::lang::Object> otherObj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(otherObj); }
inline jint PendingIntent::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> PendingIntent::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint PendingIntent::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void PendingIntent::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }
inline void PendingIntent::writePendingIntentOrNullToParcel(ref<android::app::PendingIntent> sender, ref<android::os::Parcel> out) { return call_static_method<SCAPIX_META_STRING("writePendingIntentOrNullToParcel"), void>(sender, out); }
inline ref<android::app::PendingIntent> PendingIntent::readPendingIntentOrNullFromParcel(ref<android::os::Parcel> in) { return call_static_method<SCAPIX_META_STRING("readPendingIntentOrNullFromParcel"), ref<android::app::PendingIntent>>(in); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_PENDINGINTENT_H
