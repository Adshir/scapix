// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_APP_NOTIFICATIONMANAGER_H
#define SCAPIX_ANDROID_APP_NOTIFICATIONMANAGER_H

namespace scapix::java_api {

namespace android::app { class AutomaticZenRule; }
namespace android::app { class Notification; }
namespace android::app { class NotificationChannel; }
namespace android::app { class NotificationChannelGroup; }
namespace android::app { class NotificationManager_Policy; }
namespace android::content { class ComponentName; }
namespace android::service::notification { class StatusBarNotification; }
namespace java::lang { class String; }
namespace java::util { class List; }
namespace java::util { class Map; }

namespace android::app {

class NotificationManager : public object_base<SCAPIX_META_STRING("android/app/NotificationManager"),
	java::lang::Object>
{
public:

	using Policy = NotificationManager_Policy;

	static ref<java::lang::String> ACTION_APP_BLOCK_STATE_CHANGED_();
	static ref<java::lang::String> ACTION_INTERRUPTION_FILTER_CHANGED_();
	static ref<java::lang::String> ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED_();
	static ref<java::lang::String> ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED_();
	static ref<java::lang::String> ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED_();
	static ref<java::lang::String> ACTION_NOTIFICATION_POLICY_CHANGED_();
	static ref<java::lang::String> EXTRA_BLOCKED_STATE_();
	static ref<java::lang::String> EXTRA_NOTIFICATION_CHANNEL_GROUP_ID_();
	static ref<java::lang::String> EXTRA_NOTIFICATION_CHANNEL_ID_();
	static jint IMPORTANCE_DEFAULT_();
	static jint IMPORTANCE_HIGH_();
	static jint IMPORTANCE_LOW_();
	static jint IMPORTANCE_MAX_();
	static jint IMPORTANCE_MIN_();
	static jint IMPORTANCE_NONE_();
	static jint IMPORTANCE_UNSPECIFIED_();
	static jint INTERRUPTION_FILTER_ALARMS_();
	static jint INTERRUPTION_FILTER_ALL_();
	static jint INTERRUPTION_FILTER_NONE_();
	static jint INTERRUPTION_FILTER_PRIORITY_();
	static jint INTERRUPTION_FILTER_UNKNOWN_();

	void notify(jint id, ref<android::app::Notification> notification);
	void notify(ref<java::lang::String> tag, jint id, ref<android::app::Notification> notification);
	void cancel(jint id);
	void cancel(ref<java::lang::String> tag, jint id);
	void cancelAll();
	void createNotificationChannelGroup(ref<android::app::NotificationChannelGroup> group);
	void createNotificationChannelGroups(ref<java::util::List> groups);
	void createNotificationChannel(ref<android::app::NotificationChannel> channel);
	void createNotificationChannels(ref<java::util::List> channels);
	ref<android::app::NotificationChannel> getNotificationChannel(ref<java::lang::String> channelId);
	ref<java::util::List> getNotificationChannels();
	void deleteNotificationChannel(ref<java::lang::String> channelId);
	ref<android::app::NotificationChannelGroup> getNotificationChannelGroup(ref<java::lang::String> channelGroupId);
	ref<java::util::List> getNotificationChannelGroups();
	void deleteNotificationChannelGroup(ref<java::lang::String> groupId);
	ref<java::util::Map> getAutomaticZenRules();
	ref<android::app::AutomaticZenRule> getAutomaticZenRule(ref<java::lang::String> id);
	ref<java::lang::String> addAutomaticZenRule(ref<android::app::AutomaticZenRule> automaticZenRule);
	jboolean updateAutomaticZenRule(ref<java::lang::String> id, ref<android::app::AutomaticZenRule> automaticZenRule);
	jboolean removeAutomaticZenRule(ref<java::lang::String> id);
	jint getImportance();
	jboolean areNotificationsEnabled();
	jboolean isNotificationPolicyAccessGranted();
	jboolean isNotificationListenerAccessGranted(ref<android::content::ComponentName> listener);
	ref<android::app::NotificationManager_Policy> getNotificationPolicy();
	void setNotificationPolicy(ref<android::app::NotificationManager_Policy> policy);
	ref<link::java::array<android::service::notification::StatusBarNotification>> getActiveNotifications();
	jint getCurrentInterruptionFilter();
	void setInterruptionFilter(jint interruptionFilter);

protected:

	NotificationManager(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/app/AutomaticZenRule.h>
#include <scapix/java_api/android/app/Notification.h>
#include <scapix/java_api/android/app/NotificationChannel.h>
#include <scapix/java_api/android/app/NotificationChannelGroup.h>
#include <scapix/java_api/android/app/NotificationManager_Policy.h>
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/service/notification/StatusBarNotification.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>

namespace scapix::java_api {
namespace android::app {

inline ref<java::lang::String> NotificationManager::ACTION_APP_BLOCK_STATE_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_APP_BLOCK_STATE_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> NotificationManager::ACTION_INTERRUPTION_FILTER_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_INTERRUPTION_FILTER_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> NotificationManager::ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> NotificationManager::ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> NotificationManager::ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> NotificationManager::ACTION_NOTIFICATION_POLICY_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_NOTIFICATION_POLICY_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> NotificationManager::EXTRA_BLOCKED_STATE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_BLOCKED_STATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> NotificationManager::EXTRA_NOTIFICATION_CHANNEL_GROUP_ID_() { return get_static_field<SCAPIX_META_STRING("EXTRA_NOTIFICATION_CHANNEL_GROUP_ID"), ref<java::lang::String>>(); }
inline ref<java::lang::String> NotificationManager::EXTRA_NOTIFICATION_CHANNEL_ID_() { return get_static_field<SCAPIX_META_STRING("EXTRA_NOTIFICATION_CHANNEL_ID"), ref<java::lang::String>>(); }
inline jint NotificationManager::IMPORTANCE_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("IMPORTANCE_DEFAULT"), jint>(); }
inline jint NotificationManager::IMPORTANCE_HIGH_() { return get_static_field<SCAPIX_META_STRING("IMPORTANCE_HIGH"), jint>(); }
inline jint NotificationManager::IMPORTANCE_LOW_() { return get_static_field<SCAPIX_META_STRING("IMPORTANCE_LOW"), jint>(); }
inline jint NotificationManager::IMPORTANCE_MAX_() { return get_static_field<SCAPIX_META_STRING("IMPORTANCE_MAX"), jint>(); }
inline jint NotificationManager::IMPORTANCE_MIN_() { return get_static_field<SCAPIX_META_STRING("IMPORTANCE_MIN"), jint>(); }
inline jint NotificationManager::IMPORTANCE_NONE_() { return get_static_field<SCAPIX_META_STRING("IMPORTANCE_NONE"), jint>(); }
inline jint NotificationManager::IMPORTANCE_UNSPECIFIED_() { return get_static_field<SCAPIX_META_STRING("IMPORTANCE_UNSPECIFIED"), jint>(); }
inline jint NotificationManager::INTERRUPTION_FILTER_ALARMS_() { return get_static_field<SCAPIX_META_STRING("INTERRUPTION_FILTER_ALARMS"), jint>(); }
inline jint NotificationManager::INTERRUPTION_FILTER_ALL_() { return get_static_field<SCAPIX_META_STRING("INTERRUPTION_FILTER_ALL"), jint>(); }
inline jint NotificationManager::INTERRUPTION_FILTER_NONE_() { return get_static_field<SCAPIX_META_STRING("INTERRUPTION_FILTER_NONE"), jint>(); }
inline jint NotificationManager::INTERRUPTION_FILTER_PRIORITY_() { return get_static_field<SCAPIX_META_STRING("INTERRUPTION_FILTER_PRIORITY"), jint>(); }
inline jint NotificationManager::INTERRUPTION_FILTER_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("INTERRUPTION_FILTER_UNKNOWN"), jint>(); }
inline void NotificationManager::notify(jint id, ref<android::app::Notification> notification) { return call_method<SCAPIX_META_STRING("notify"), void>(id, notification); }
inline void NotificationManager::notify(ref<java::lang::String> tag, jint id, ref<android::app::Notification> notification) { return call_method<SCAPIX_META_STRING("notify"), void>(tag, id, notification); }
inline void NotificationManager::cancel(jint id) { return call_method<SCAPIX_META_STRING("cancel"), void>(id); }
inline void NotificationManager::cancel(ref<java::lang::String> tag, jint id) { return call_method<SCAPIX_META_STRING("cancel"), void>(tag, id); }
inline void NotificationManager::cancelAll() { return call_method<SCAPIX_META_STRING("cancelAll"), void>(); }
inline void NotificationManager::createNotificationChannelGroup(ref<android::app::NotificationChannelGroup> group) { return call_method<SCAPIX_META_STRING("createNotificationChannelGroup"), void>(group); }
inline void NotificationManager::createNotificationChannelGroups(ref<java::util::List> groups) { return call_method<SCAPIX_META_STRING("createNotificationChannelGroups"), void>(groups); }
inline void NotificationManager::createNotificationChannel(ref<android::app::NotificationChannel> channel) { return call_method<SCAPIX_META_STRING("createNotificationChannel"), void>(channel); }
inline void NotificationManager::createNotificationChannels(ref<java::util::List> channels) { return call_method<SCAPIX_META_STRING("createNotificationChannels"), void>(channels); }
inline ref<android::app::NotificationChannel> NotificationManager::getNotificationChannel(ref<java::lang::String> channelId) { return call_method<SCAPIX_META_STRING("getNotificationChannel"), ref<android::app::NotificationChannel>>(channelId); }
inline ref<java::util::List> NotificationManager::getNotificationChannels() { return call_method<SCAPIX_META_STRING("getNotificationChannels"), ref<java::util::List>>(); }
inline void NotificationManager::deleteNotificationChannel(ref<java::lang::String> channelId) { return call_method<SCAPIX_META_STRING("deleteNotificationChannel"), void>(channelId); }
inline ref<android::app::NotificationChannelGroup> NotificationManager::getNotificationChannelGroup(ref<java::lang::String> channelGroupId) { return call_method<SCAPIX_META_STRING("getNotificationChannelGroup"), ref<android::app::NotificationChannelGroup>>(channelGroupId); }
inline ref<java::util::List> NotificationManager::getNotificationChannelGroups() { return call_method<SCAPIX_META_STRING("getNotificationChannelGroups"), ref<java::util::List>>(); }
inline void NotificationManager::deleteNotificationChannelGroup(ref<java::lang::String> groupId) { return call_method<SCAPIX_META_STRING("deleteNotificationChannelGroup"), void>(groupId); }
inline ref<java::util::Map> NotificationManager::getAutomaticZenRules() { return call_method<SCAPIX_META_STRING("getAutomaticZenRules"), ref<java::util::Map>>(); }
inline ref<android::app::AutomaticZenRule> NotificationManager::getAutomaticZenRule(ref<java::lang::String> id) { return call_method<SCAPIX_META_STRING("getAutomaticZenRule"), ref<android::app::AutomaticZenRule>>(id); }
inline ref<java::lang::String> NotificationManager::addAutomaticZenRule(ref<android::app::AutomaticZenRule> automaticZenRule) { return call_method<SCAPIX_META_STRING("addAutomaticZenRule"), ref<java::lang::String>>(automaticZenRule); }
inline jboolean NotificationManager::updateAutomaticZenRule(ref<java::lang::String> id, ref<android::app::AutomaticZenRule> automaticZenRule) { return call_method<SCAPIX_META_STRING("updateAutomaticZenRule"), jboolean>(id, automaticZenRule); }
inline jboolean NotificationManager::removeAutomaticZenRule(ref<java::lang::String> id) { return call_method<SCAPIX_META_STRING("removeAutomaticZenRule"), jboolean>(id); }
inline jint NotificationManager::getImportance() { return call_method<SCAPIX_META_STRING("getImportance"), jint>(); }
inline jboolean NotificationManager::areNotificationsEnabled() { return call_method<SCAPIX_META_STRING("areNotificationsEnabled"), jboolean>(); }
inline jboolean NotificationManager::isNotificationPolicyAccessGranted() { return call_method<SCAPIX_META_STRING("isNotificationPolicyAccessGranted"), jboolean>(); }
inline jboolean NotificationManager::isNotificationListenerAccessGranted(ref<android::content::ComponentName> listener) { return call_method<SCAPIX_META_STRING("isNotificationListenerAccessGranted"), jboolean>(listener); }
inline ref<android::app::NotificationManager_Policy> NotificationManager::getNotificationPolicy() { return call_method<SCAPIX_META_STRING("getNotificationPolicy"), ref<android::app::NotificationManager_Policy>>(); }
inline void NotificationManager::setNotificationPolicy(ref<android::app::NotificationManager_Policy> policy) { return call_method<SCAPIX_META_STRING("setNotificationPolicy"), void>(policy); }
inline ref<link::java::array<android::service::notification::StatusBarNotification>> NotificationManager::getActiveNotifications() { return call_method<SCAPIX_META_STRING("getActiveNotifications"), ref<link::java::array<android::service::notification::StatusBarNotification>>>(); }
inline jint NotificationManager::getCurrentInterruptionFilter() { return call_method<SCAPIX_META_STRING("getCurrentInterruptionFilter"), jint>(); }
inline void NotificationManager::setInterruptionFilter(jint interruptionFilter) { return call_method<SCAPIX_META_STRING("setInterruptionFilter"), void>(interruptionFilter); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_NOTIFICATIONMANAGER_H
