// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_APP_DOWNLOADMANAGER_H
#define SCAPIX_ANDROID_APP_DOWNLOADMANAGER_H

namespace scapix::java_api {

namespace android::app { class DownloadManager_Query; }
namespace android::app { class DownloadManager_Request; }
namespace android::content { class Context; }
namespace android::database { class Cursor; }
namespace android::net { class Uri; }
namespace android::os { class ParcelFileDescriptor; }
namespace java::lang { class Long; }
namespace java::lang { class String; }

namespace android::app {

class DownloadManager : public object_base<SCAPIX_META_STRING("android/app/DownloadManager"),
	java::lang::Object>
{
public:

	using Request = DownloadManager_Request;
	using Query = DownloadManager_Query;

	static ref<java::lang::String> ACTION_DOWNLOAD_COMPLETE_();
	static ref<java::lang::String> ACTION_NOTIFICATION_CLICKED_();
	static ref<java::lang::String> ACTION_VIEW_DOWNLOADS_();
	static ref<java::lang::String> COLUMN_BYTES_DOWNLOADED_SO_FAR_();
	static ref<java::lang::String> COLUMN_DESCRIPTION_();
	static ref<java::lang::String> COLUMN_ID_();
	static ref<java::lang::String> COLUMN_LAST_MODIFIED_TIMESTAMP_();
	static ref<java::lang::String> COLUMN_LOCAL_FILENAME_();
	static ref<java::lang::String> COLUMN_LOCAL_URI_();
	static ref<java::lang::String> COLUMN_MEDIAPROVIDER_URI_();
	static ref<java::lang::String> COLUMN_MEDIA_TYPE_();
	static ref<java::lang::String> COLUMN_REASON_();
	static ref<java::lang::String> COLUMN_STATUS_();
	static ref<java::lang::String> COLUMN_TITLE_();
	static ref<java::lang::String> COLUMN_TOTAL_SIZE_BYTES_();
	static ref<java::lang::String> COLUMN_URI_();
	static jint ERROR_CANNOT_RESUME_();
	static jint ERROR_DEVICE_NOT_FOUND_();
	static jint ERROR_FILE_ALREADY_EXISTS_();
	static jint ERROR_FILE_ERROR_();
	static jint ERROR_HTTP_DATA_ERROR_();
	static jint ERROR_INSUFFICIENT_SPACE_();
	static jint ERROR_TOO_MANY_REDIRECTS_();
	static jint ERROR_UNHANDLED_HTTP_CODE_();
	static jint ERROR_UNKNOWN_();
	static ref<java::lang::String> EXTRA_DOWNLOAD_ID_();
	static ref<java::lang::String> EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS_();
	static ref<java::lang::String> INTENT_EXTRAS_SORT_BY_SIZE_();
	static jint PAUSED_QUEUED_FOR_WIFI_();
	static jint PAUSED_UNKNOWN_();
	static jint PAUSED_WAITING_FOR_NETWORK_();
	static jint PAUSED_WAITING_TO_RETRY_();
	static jint STATUS_FAILED_();
	static jint STATUS_PAUSED_();
	static jint STATUS_PENDING_();
	static jint STATUS_RUNNING_();
	static jint STATUS_SUCCESSFUL_();

	jlong enqueue(ref<android::app::DownloadManager_Request> request);
	jint remove(ref<link::java::array<jlong>> ids);
	ref<android::database::Cursor> query(ref<android::app::DownloadManager_Query> query);
	ref<android::os::ParcelFileDescriptor> openDownloadedFile(jlong id);
	ref<android::net::Uri> getUriForDownloadedFile(jlong id);
	ref<java::lang::String> getMimeTypeForDownloadedFile(jlong id);
	static ref<java::lang::Long> getMaxBytesOverMobile(ref<android::content::Context> context);
	static ref<java::lang::Long> getRecommendedMaxBytesOverMobile(ref<android::content::Context> context);
	jlong addCompletedDownload(ref<java::lang::String> title, ref<java::lang::String> description, jboolean isMediaScannerScannable, ref<java::lang::String> mimeType, ref<java::lang::String> path, jlong length, jboolean p7);
	jlong addCompletedDownload(ref<java::lang::String> title, ref<java::lang::String> description, jboolean isMediaScannerScannable, ref<java::lang::String> mimeType, ref<java::lang::String> path, jlong length, jboolean p7, ref<android::net::Uri> showNotification, ref<android::net::Uri> uri);

protected:

	DownloadManager(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/app/DownloadManager_Query.h>
#include <scapix/java_api/android/app/DownloadManager_Request.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/database/Cursor.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/lang/Long.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::app {

inline ref<java::lang::String> DownloadManager::ACTION_DOWNLOAD_COMPLETE_() { return get_static_field<SCAPIX_META_STRING("ACTION_DOWNLOAD_COMPLETE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::ACTION_NOTIFICATION_CLICKED_() { return get_static_field<SCAPIX_META_STRING("ACTION_NOTIFICATION_CLICKED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::ACTION_VIEW_DOWNLOADS_() { return get_static_field<SCAPIX_META_STRING("ACTION_VIEW_DOWNLOADS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::COLUMN_BYTES_DOWNLOADED_SO_FAR_() { return get_static_field<SCAPIX_META_STRING("COLUMN_BYTES_DOWNLOADED_SO_FAR"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::COLUMN_DESCRIPTION_() { return get_static_field<SCAPIX_META_STRING("COLUMN_DESCRIPTION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::COLUMN_ID_() { return get_static_field<SCAPIX_META_STRING("COLUMN_ID"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::COLUMN_LAST_MODIFIED_TIMESTAMP_() { return get_static_field<SCAPIX_META_STRING("COLUMN_LAST_MODIFIED_TIMESTAMP"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::COLUMN_LOCAL_FILENAME_() { return get_static_field<SCAPIX_META_STRING("COLUMN_LOCAL_FILENAME"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::COLUMN_LOCAL_URI_() { return get_static_field<SCAPIX_META_STRING("COLUMN_LOCAL_URI"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::COLUMN_MEDIAPROVIDER_URI_() { return get_static_field<SCAPIX_META_STRING("COLUMN_MEDIAPROVIDER_URI"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::COLUMN_MEDIA_TYPE_() { return get_static_field<SCAPIX_META_STRING("COLUMN_MEDIA_TYPE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::COLUMN_REASON_() { return get_static_field<SCAPIX_META_STRING("COLUMN_REASON"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::COLUMN_STATUS_() { return get_static_field<SCAPIX_META_STRING("COLUMN_STATUS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::COLUMN_TITLE_() { return get_static_field<SCAPIX_META_STRING("COLUMN_TITLE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::COLUMN_TOTAL_SIZE_BYTES_() { return get_static_field<SCAPIX_META_STRING("COLUMN_TOTAL_SIZE_BYTES"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::COLUMN_URI_() { return get_static_field<SCAPIX_META_STRING("COLUMN_URI"), ref<java::lang::String>>(); }
inline jint DownloadManager::ERROR_CANNOT_RESUME_() { return get_static_field<SCAPIX_META_STRING("ERROR_CANNOT_RESUME"), jint>(); }
inline jint DownloadManager::ERROR_DEVICE_NOT_FOUND_() { return get_static_field<SCAPIX_META_STRING("ERROR_DEVICE_NOT_FOUND"), jint>(); }
inline jint DownloadManager::ERROR_FILE_ALREADY_EXISTS_() { return get_static_field<SCAPIX_META_STRING("ERROR_FILE_ALREADY_EXISTS"), jint>(); }
inline jint DownloadManager::ERROR_FILE_ERROR_() { return get_static_field<SCAPIX_META_STRING("ERROR_FILE_ERROR"), jint>(); }
inline jint DownloadManager::ERROR_HTTP_DATA_ERROR_() { return get_static_field<SCAPIX_META_STRING("ERROR_HTTP_DATA_ERROR"), jint>(); }
inline jint DownloadManager::ERROR_INSUFFICIENT_SPACE_() { return get_static_field<SCAPIX_META_STRING("ERROR_INSUFFICIENT_SPACE"), jint>(); }
inline jint DownloadManager::ERROR_TOO_MANY_REDIRECTS_() { return get_static_field<SCAPIX_META_STRING("ERROR_TOO_MANY_REDIRECTS"), jint>(); }
inline jint DownloadManager::ERROR_UNHANDLED_HTTP_CODE_() { return get_static_field<SCAPIX_META_STRING("ERROR_UNHANDLED_HTTP_CODE"), jint>(); }
inline jint DownloadManager::ERROR_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("ERROR_UNKNOWN"), jint>(); }
inline ref<java::lang::String> DownloadManager::EXTRA_DOWNLOAD_ID_() { return get_static_field<SCAPIX_META_STRING("EXTRA_DOWNLOAD_ID"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS_() { return get_static_field<SCAPIX_META_STRING("EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DownloadManager::INTENT_EXTRAS_SORT_BY_SIZE_() { return get_static_field<SCAPIX_META_STRING("INTENT_EXTRAS_SORT_BY_SIZE"), ref<java::lang::String>>(); }
inline jint DownloadManager::PAUSED_QUEUED_FOR_WIFI_() { return get_static_field<SCAPIX_META_STRING("PAUSED_QUEUED_FOR_WIFI"), jint>(); }
inline jint DownloadManager::PAUSED_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("PAUSED_UNKNOWN"), jint>(); }
inline jint DownloadManager::PAUSED_WAITING_FOR_NETWORK_() { return get_static_field<SCAPIX_META_STRING("PAUSED_WAITING_FOR_NETWORK"), jint>(); }
inline jint DownloadManager::PAUSED_WAITING_TO_RETRY_() { return get_static_field<SCAPIX_META_STRING("PAUSED_WAITING_TO_RETRY"), jint>(); }
inline jint DownloadManager::STATUS_FAILED_() { return get_static_field<SCAPIX_META_STRING("STATUS_FAILED"), jint>(); }
inline jint DownloadManager::STATUS_PAUSED_() { return get_static_field<SCAPIX_META_STRING("STATUS_PAUSED"), jint>(); }
inline jint DownloadManager::STATUS_PENDING_() { return get_static_field<SCAPIX_META_STRING("STATUS_PENDING"), jint>(); }
inline jint DownloadManager::STATUS_RUNNING_() { return get_static_field<SCAPIX_META_STRING("STATUS_RUNNING"), jint>(); }
inline jint DownloadManager::STATUS_SUCCESSFUL_() { return get_static_field<SCAPIX_META_STRING("STATUS_SUCCESSFUL"), jint>(); }
inline jlong DownloadManager::enqueue(ref<android::app::DownloadManager_Request> request) { return call_method<SCAPIX_META_STRING("enqueue"), jlong>(request); }
inline jint DownloadManager::remove(ref<link::java::array<jlong>> ids) { return call_method<SCAPIX_META_STRING("remove"), jint>(ids); }
inline ref<android::database::Cursor> DownloadManager::query(ref<android::app::DownloadManager_Query> query) { return call_method<SCAPIX_META_STRING("query"), ref<android::database::Cursor>>(query); }
inline ref<android::os::ParcelFileDescriptor> DownloadManager::openDownloadedFile(jlong id) { return call_method<SCAPIX_META_STRING("openDownloadedFile"), ref<android::os::ParcelFileDescriptor>>(id); }
inline ref<android::net::Uri> DownloadManager::getUriForDownloadedFile(jlong id) { return call_method<SCAPIX_META_STRING("getUriForDownloadedFile"), ref<android::net::Uri>>(id); }
inline ref<java::lang::String> DownloadManager::getMimeTypeForDownloadedFile(jlong id) { return call_method<SCAPIX_META_STRING("getMimeTypeForDownloadedFile"), ref<java::lang::String>>(id); }
inline ref<java::lang::Long> DownloadManager::getMaxBytesOverMobile(ref<android::content::Context> context) { return call_static_method<SCAPIX_META_STRING("getMaxBytesOverMobile"), ref<java::lang::Long>>(context); }
inline ref<java::lang::Long> DownloadManager::getRecommendedMaxBytesOverMobile(ref<android::content::Context> context) { return call_static_method<SCAPIX_META_STRING("getRecommendedMaxBytesOverMobile"), ref<java::lang::Long>>(context); }
inline jlong DownloadManager::addCompletedDownload(ref<java::lang::String> title, ref<java::lang::String> description, jboolean isMediaScannerScannable, ref<java::lang::String> mimeType, ref<java::lang::String> path, jlong length, jboolean p7) { return call_method<SCAPIX_META_STRING("addCompletedDownload"), jlong>(title, description, isMediaScannerScannable, mimeType, path, length, p7); }
inline jlong DownloadManager::addCompletedDownload(ref<java::lang::String> title, ref<java::lang::String> description, jboolean isMediaScannerScannable, ref<java::lang::String> mimeType, ref<java::lang::String> path, jlong length, jboolean p7, ref<android::net::Uri> showNotification, ref<android::net::Uri> uri) { return call_method<SCAPIX_META_STRING("addCompletedDownload"), jlong>(title, description, isMediaScannerScannable, mimeType, path, length, p7, showNotification, uri); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_DOWNLOADMANAGER_H
