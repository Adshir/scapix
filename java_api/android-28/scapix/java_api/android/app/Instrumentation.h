// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_APP_INSTRUMENTATION_H
#define SCAPIX_ANDROID_APP_INSTRUMENTATION_H

namespace scapix::java_api {

namespace android::app { class Activity; }
namespace android::app { class Application; }
namespace android::app { class Instrumentation_ActivityMonitor; }
namespace android::app { class Instrumentation_ActivityResult; }
namespace android::app { class UiAutomation; }
namespace android::content { class ComponentName; }
namespace android::content { class Context; }
namespace android::content { class Intent; }
namespace android::content { class IntentFilter; }
namespace android::content::pm { class ActivityInfo; }
namespace android::os { class Bundle; }
namespace android::os { class IBinder; }
namespace android::os { class Looper; }
namespace android::os { class PersistableBundle; }
namespace android::os { class TestLooperManager; }
namespace android::view { class KeyEvent; }
namespace android::view { class MotionEvent; }
namespace java::lang { class CharSequence; }
namespace java::lang { class Class; }
namespace java::lang { class ClassLoader; }
namespace java::lang { class Runnable; }
namespace java::lang { class String; }
namespace java::lang { class Throwable; }

namespace android::app {

class Instrumentation : public object_base<SCAPIX_META_STRING("android/app/Instrumentation"),
	java::lang::Object>
{
public:

	using ActivityResult = Instrumentation_ActivityResult;
	using ActivityMonitor = Instrumentation_ActivityMonitor;

	static ref<java::lang::String> REPORT_KEY_IDENTIFIER_();
	static ref<java::lang::String> REPORT_KEY_STREAMRESULT_();

	static ref<Instrumentation> new_object();
	void onCreate(ref<android::os::Bundle> arguments);
	void start();
	void onStart();
	jboolean onException(ref<java::lang::Object> obj, ref<java::lang::Throwable> e);
	void sendStatus(jint resultCode, ref<android::os::Bundle> results);
	void addResults(ref<android::os::Bundle> results);
	void finish(jint resultCode, ref<android::os::Bundle> results);
	void setAutomaticPerformanceSnapshots();
	void startPerformanceSnapshot();
	void endPerformanceSnapshot();
	void onDestroy();
	ref<android::content::Context> getContext();
	ref<android::content::ComponentName> getComponentName();
	ref<android::content::Context> getTargetContext();
	ref<java::lang::String> getProcessName();
	jboolean isProfiling();
	void startProfiling();
	void stopProfiling();
	void setInTouchMode(jboolean inTouch);
	void waitForIdle(ref<java::lang::Runnable> recipient);
	void waitForIdleSync();
	void runOnMainSync(ref<java::lang::Runnable> runner);
	ref<android::app::Activity> startActivitySync(ref<android::content::Intent> intent);
	ref<android::app::Activity> startActivitySync(ref<android::content::Intent> intent, ref<android::os::Bundle> options);
	void addMonitor(ref<android::app::Instrumentation_ActivityMonitor> monitor);
	ref<android::app::Instrumentation_ActivityMonitor> addMonitor(ref<android::content::IntentFilter> filter, ref<android::app::Instrumentation_ActivityResult> result, jboolean block);
	ref<android::app::Instrumentation_ActivityMonitor> addMonitor(ref<java::lang::String> cls, ref<android::app::Instrumentation_ActivityResult> result, jboolean block);
	jboolean checkMonitorHit(ref<android::app::Instrumentation_ActivityMonitor> monitor, jint minHits);
	ref<android::app::Activity> waitForMonitor(ref<android::app::Instrumentation_ActivityMonitor> monitor);
	ref<android::app::Activity> waitForMonitorWithTimeout(ref<android::app::Instrumentation_ActivityMonitor> monitor, jlong timeOut);
	void removeMonitor(ref<android::app::Instrumentation_ActivityMonitor> monitor);
	jboolean invokeMenuActionSync(ref<android::app::Activity> targetActivity, jint id, jint flag);
	jboolean invokeContextMenuAction(ref<android::app::Activity> targetActivity, jint id, jint flag);
	void sendStringSync(ref<java::lang::String> text);
	void sendKeySync(ref<android::view::KeyEvent> event);
	void sendKeyDownUpSync(jint key);
	void sendCharacterSync(jint keyCode);
	void sendPointerSync(ref<android::view::MotionEvent> event);
	void sendTrackballEventSync(ref<android::view::MotionEvent> event);
	ref<android::app::Application> newApplication(ref<java::lang::ClassLoader> cl, ref<java::lang::String> className, ref<android::content::Context> context);
	static ref<android::app::Application> newApplication(ref<java::lang::Class> clazz, ref<android::content::Context> context);
	void callApplicationOnCreate(ref<android::app::Application> app);
	ref<android::app::Activity> newActivity(ref<java::lang::Class> clazz, ref<android::content::Context> context, ref<android::os::IBinder> token, ref<android::app::Application> application, ref<android::content::Intent> intent, ref<android::content::pm::ActivityInfo> info, ref<java::lang::CharSequence> title, ref<android::app::Activity> parent, ref<java::lang::String> id, ref<java::lang::Object> lastNonConfigurationInstance);
	ref<android::app::Activity> newActivity(ref<java::lang::ClassLoader> cl, ref<java::lang::String> className, ref<android::content::Intent> intent);
	void callActivityOnCreate(ref<android::app::Activity> activity, ref<android::os::Bundle> icicle);
	void callActivityOnCreate(ref<android::app::Activity> activity, ref<android::os::Bundle> icicle, ref<android::os::PersistableBundle> persistentState);
	void callActivityOnDestroy(ref<android::app::Activity> activity);
	void callActivityOnRestoreInstanceState(ref<android::app::Activity> activity, ref<android::os::Bundle> savedInstanceState);
	void callActivityOnRestoreInstanceState(ref<android::app::Activity> activity, ref<android::os::Bundle> savedInstanceState, ref<android::os::PersistableBundle> persistentState);
	void callActivityOnPostCreate(ref<android::app::Activity> activity, ref<android::os::Bundle> icicle);
	void callActivityOnPostCreate(ref<android::app::Activity> activity, ref<android::os::Bundle> icicle, ref<android::os::PersistableBundle> persistentState);
	void callActivityOnNewIntent(ref<android::app::Activity> activity, ref<android::content::Intent> intent);
	void callActivityOnStart(ref<android::app::Activity> activity);
	void callActivityOnRestart(ref<android::app::Activity> activity);
	void callActivityOnResume(ref<android::app::Activity> activity);
	void callActivityOnStop(ref<android::app::Activity> activity);
	void callActivityOnSaveInstanceState(ref<android::app::Activity> activity, ref<android::os::Bundle> outState);
	void callActivityOnSaveInstanceState(ref<android::app::Activity> activity, ref<android::os::Bundle> outState, ref<android::os::PersistableBundle> outPersistentState);
	void callActivityOnPause(ref<android::app::Activity> activity);
	void callActivityOnUserLeaving(ref<android::app::Activity> activity);
	void startAllocCounting();
	void stopAllocCounting();
	ref<android::os::Bundle> getAllocCounts();
	ref<android::os::Bundle> getBinderCounts();
	ref<android::app::UiAutomation> getUiAutomation();
	ref<android::app::UiAutomation> getUiAutomation(jint flags);
	ref<android::os::TestLooperManager> acquireLooperManager(ref<android::os::Looper> looper);

protected:

	Instrumentation(handle_type h) : base_(h) {}

};

} // namespace android::app
} // namespace scapix::java_api

#include <scapix/java_api/android/app/Activity.h>
#include <scapix/java_api/android/app/Application.h>
#include <scapix/java_api/android/app/Instrumentation_ActivityMonitor.h>
#include <scapix/java_api/android/app/Instrumentation_ActivityResult.h>
#include <scapix/java_api/android/app/UiAutomation.h>
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/IntentFilter.h>
#include <scapix/java_api/android/content/pm/ActivityInfo.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/android/os/Looper.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/android/os/TestLooperManager.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>

namespace scapix::java_api {
namespace android::app {

inline ref<java::lang::String> Instrumentation::REPORT_KEY_IDENTIFIER_() { return get_static_field<SCAPIX_META_STRING("REPORT_KEY_IDENTIFIER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Instrumentation::REPORT_KEY_STREAMRESULT_() { return get_static_field<SCAPIX_META_STRING("REPORT_KEY_STREAMRESULT"), ref<java::lang::String>>(); }
inline ref<Instrumentation> Instrumentation::new_object() { return base_::new_object(); }
inline void Instrumentation::onCreate(ref<android::os::Bundle> arguments) { return call_method<SCAPIX_META_STRING("onCreate"), void>(arguments); }
inline void Instrumentation::start() { return call_method<SCAPIX_META_STRING("start"), void>(); }
inline void Instrumentation::onStart() { return call_method<SCAPIX_META_STRING("onStart"), void>(); }
inline jboolean Instrumentation::onException(ref<java::lang::Object> obj, ref<java::lang::Throwable> e) { return call_method<SCAPIX_META_STRING("onException"), jboolean>(obj, e); }
inline void Instrumentation::sendStatus(jint resultCode, ref<android::os::Bundle> results) { return call_method<SCAPIX_META_STRING("sendStatus"), void>(resultCode, results); }
inline void Instrumentation::addResults(ref<android::os::Bundle> results) { return call_method<SCAPIX_META_STRING("addResults"), void>(results); }
inline void Instrumentation::finish(jint resultCode, ref<android::os::Bundle> results) { return call_method<SCAPIX_META_STRING("finish"), void>(resultCode, results); }
inline void Instrumentation::setAutomaticPerformanceSnapshots() { return call_method<SCAPIX_META_STRING("setAutomaticPerformanceSnapshots"), void>(); }
inline void Instrumentation::startPerformanceSnapshot() { return call_method<SCAPIX_META_STRING("startPerformanceSnapshot"), void>(); }
inline void Instrumentation::endPerformanceSnapshot() { return call_method<SCAPIX_META_STRING("endPerformanceSnapshot"), void>(); }
inline void Instrumentation::onDestroy() { return call_method<SCAPIX_META_STRING("onDestroy"), void>(); }
inline ref<android::content::Context> Instrumentation::getContext() { return call_method<SCAPIX_META_STRING("getContext"), ref<android::content::Context>>(); }
inline ref<android::content::ComponentName> Instrumentation::getComponentName() { return call_method<SCAPIX_META_STRING("getComponentName"), ref<android::content::ComponentName>>(); }
inline ref<android::content::Context> Instrumentation::getTargetContext() { return call_method<SCAPIX_META_STRING("getTargetContext"), ref<android::content::Context>>(); }
inline ref<java::lang::String> Instrumentation::getProcessName() { return call_method<SCAPIX_META_STRING("getProcessName"), ref<java::lang::String>>(); }
inline jboolean Instrumentation::isProfiling() { return call_method<SCAPIX_META_STRING("isProfiling"), jboolean>(); }
inline void Instrumentation::startProfiling() { return call_method<SCAPIX_META_STRING("startProfiling"), void>(); }
inline void Instrumentation::stopProfiling() { return call_method<SCAPIX_META_STRING("stopProfiling"), void>(); }
inline void Instrumentation::setInTouchMode(jboolean inTouch) { return call_method<SCAPIX_META_STRING("setInTouchMode"), void>(inTouch); }
inline void Instrumentation::waitForIdle(ref<java::lang::Runnable> recipient) { return call_method<SCAPIX_META_STRING("waitForIdle"), void>(recipient); }
inline void Instrumentation::waitForIdleSync() { return call_method<SCAPIX_META_STRING("waitForIdleSync"), void>(); }
inline void Instrumentation::runOnMainSync(ref<java::lang::Runnable> runner) { return call_method<SCAPIX_META_STRING("runOnMainSync"), void>(runner); }
inline ref<android::app::Activity> Instrumentation::startActivitySync(ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("startActivitySync"), ref<android::app::Activity>>(intent); }
inline ref<android::app::Activity> Instrumentation::startActivitySync(ref<android::content::Intent> intent, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startActivitySync"), ref<android::app::Activity>>(intent, options); }
inline void Instrumentation::addMonitor(ref<android::app::Instrumentation_ActivityMonitor> monitor) { return call_method<SCAPIX_META_STRING("addMonitor"), void>(monitor); }
inline ref<android::app::Instrumentation_ActivityMonitor> Instrumentation::addMonitor(ref<android::content::IntentFilter> filter, ref<android::app::Instrumentation_ActivityResult> result, jboolean block) { return call_method<SCAPIX_META_STRING("addMonitor"), ref<android::app::Instrumentation_ActivityMonitor>>(filter, result, block); }
inline ref<android::app::Instrumentation_ActivityMonitor> Instrumentation::addMonitor(ref<java::lang::String> cls, ref<android::app::Instrumentation_ActivityResult> result, jboolean block) { return call_method<SCAPIX_META_STRING("addMonitor"), ref<android::app::Instrumentation_ActivityMonitor>>(cls, result, block); }
inline jboolean Instrumentation::checkMonitorHit(ref<android::app::Instrumentation_ActivityMonitor> monitor, jint minHits) { return call_method<SCAPIX_META_STRING("checkMonitorHit"), jboolean>(monitor, minHits); }
inline ref<android::app::Activity> Instrumentation::waitForMonitor(ref<android::app::Instrumentation_ActivityMonitor> monitor) { return call_method<SCAPIX_META_STRING("waitForMonitor"), ref<android::app::Activity>>(monitor); }
inline ref<android::app::Activity> Instrumentation::waitForMonitorWithTimeout(ref<android::app::Instrumentation_ActivityMonitor> monitor, jlong timeOut) { return call_method<SCAPIX_META_STRING("waitForMonitorWithTimeout"), ref<android::app::Activity>>(monitor, timeOut); }
inline void Instrumentation::removeMonitor(ref<android::app::Instrumentation_ActivityMonitor> monitor) { return call_method<SCAPIX_META_STRING("removeMonitor"), void>(monitor); }
inline jboolean Instrumentation::invokeMenuActionSync(ref<android::app::Activity> targetActivity, jint id, jint flag) { return call_method<SCAPIX_META_STRING("invokeMenuActionSync"), jboolean>(targetActivity, id, flag); }
inline jboolean Instrumentation::invokeContextMenuAction(ref<android::app::Activity> targetActivity, jint id, jint flag) { return call_method<SCAPIX_META_STRING("invokeContextMenuAction"), jboolean>(targetActivity, id, flag); }
inline void Instrumentation::sendStringSync(ref<java::lang::String> text) { return call_method<SCAPIX_META_STRING("sendStringSync"), void>(text); }
inline void Instrumentation::sendKeySync(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("sendKeySync"), void>(event); }
inline void Instrumentation::sendKeyDownUpSync(jint key) { return call_method<SCAPIX_META_STRING("sendKeyDownUpSync"), void>(key); }
inline void Instrumentation::sendCharacterSync(jint keyCode) { return call_method<SCAPIX_META_STRING("sendCharacterSync"), void>(keyCode); }
inline void Instrumentation::sendPointerSync(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("sendPointerSync"), void>(event); }
inline void Instrumentation::sendTrackballEventSync(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("sendTrackballEventSync"), void>(event); }
inline ref<android::app::Application> Instrumentation::newApplication(ref<java::lang::ClassLoader> cl, ref<java::lang::String> className, ref<android::content::Context> context) { return call_method<SCAPIX_META_STRING("newApplication"), ref<android::app::Application>>(cl, className, context); }
inline ref<android::app::Application> Instrumentation::newApplication(ref<java::lang::Class> clazz, ref<android::content::Context> context) { return call_static_method<SCAPIX_META_STRING("newApplication"), ref<android::app::Application>>(clazz, context); }
inline void Instrumentation::callApplicationOnCreate(ref<android::app::Application> app) { return call_method<SCAPIX_META_STRING("callApplicationOnCreate"), void>(app); }
inline ref<android::app::Activity> Instrumentation::newActivity(ref<java::lang::Class> clazz, ref<android::content::Context> context, ref<android::os::IBinder> token, ref<android::app::Application> application, ref<android::content::Intent> intent, ref<android::content::pm::ActivityInfo> info, ref<java::lang::CharSequence> title, ref<android::app::Activity> parent, ref<java::lang::String> id, ref<java::lang::Object> lastNonConfigurationInstance) { return call_method<SCAPIX_META_STRING("newActivity"), ref<android::app::Activity>>(clazz, context, token, application, intent, info, title, parent, id, lastNonConfigurationInstance); }
inline ref<android::app::Activity> Instrumentation::newActivity(ref<java::lang::ClassLoader> cl, ref<java::lang::String> className, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("newActivity"), ref<android::app::Activity>>(cl, className, intent); }
inline void Instrumentation::callActivityOnCreate(ref<android::app::Activity> activity, ref<android::os::Bundle> icicle) { return call_method<SCAPIX_META_STRING("callActivityOnCreate"), void>(activity, icicle); }
inline void Instrumentation::callActivityOnCreate(ref<android::app::Activity> activity, ref<android::os::Bundle> icicle, ref<android::os::PersistableBundle> persistentState) { return call_method<SCAPIX_META_STRING("callActivityOnCreate"), void>(activity, icicle, persistentState); }
inline void Instrumentation::callActivityOnDestroy(ref<android::app::Activity> activity) { return call_method<SCAPIX_META_STRING("callActivityOnDestroy"), void>(activity); }
inline void Instrumentation::callActivityOnRestoreInstanceState(ref<android::app::Activity> activity, ref<android::os::Bundle> savedInstanceState) { return call_method<SCAPIX_META_STRING("callActivityOnRestoreInstanceState"), void>(activity, savedInstanceState); }
inline void Instrumentation::callActivityOnRestoreInstanceState(ref<android::app::Activity> activity, ref<android::os::Bundle> savedInstanceState, ref<android::os::PersistableBundle> persistentState) { return call_method<SCAPIX_META_STRING("callActivityOnRestoreInstanceState"), void>(activity, savedInstanceState, persistentState); }
inline void Instrumentation::callActivityOnPostCreate(ref<android::app::Activity> activity, ref<android::os::Bundle> icicle) { return call_method<SCAPIX_META_STRING("callActivityOnPostCreate"), void>(activity, icicle); }
inline void Instrumentation::callActivityOnPostCreate(ref<android::app::Activity> activity, ref<android::os::Bundle> icicle, ref<android::os::PersistableBundle> persistentState) { return call_method<SCAPIX_META_STRING("callActivityOnPostCreate"), void>(activity, icicle, persistentState); }
inline void Instrumentation::callActivityOnNewIntent(ref<android::app::Activity> activity, ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("callActivityOnNewIntent"), void>(activity, intent); }
inline void Instrumentation::callActivityOnStart(ref<android::app::Activity> activity) { return call_method<SCAPIX_META_STRING("callActivityOnStart"), void>(activity); }
inline void Instrumentation::callActivityOnRestart(ref<android::app::Activity> activity) { return call_method<SCAPIX_META_STRING("callActivityOnRestart"), void>(activity); }
inline void Instrumentation::callActivityOnResume(ref<android::app::Activity> activity) { return call_method<SCAPIX_META_STRING("callActivityOnResume"), void>(activity); }
inline void Instrumentation::callActivityOnStop(ref<android::app::Activity> activity) { return call_method<SCAPIX_META_STRING("callActivityOnStop"), void>(activity); }
inline void Instrumentation::callActivityOnSaveInstanceState(ref<android::app::Activity> activity, ref<android::os::Bundle> outState) { return call_method<SCAPIX_META_STRING("callActivityOnSaveInstanceState"), void>(activity, outState); }
inline void Instrumentation::callActivityOnSaveInstanceState(ref<android::app::Activity> activity, ref<android::os::Bundle> outState, ref<android::os::PersistableBundle> outPersistentState) { return call_method<SCAPIX_META_STRING("callActivityOnSaveInstanceState"), void>(activity, outState, outPersistentState); }
inline void Instrumentation::callActivityOnPause(ref<android::app::Activity> activity) { return call_method<SCAPIX_META_STRING("callActivityOnPause"), void>(activity); }
inline void Instrumentation::callActivityOnUserLeaving(ref<android::app::Activity> activity) { return call_method<SCAPIX_META_STRING("callActivityOnUserLeaving"), void>(activity); }
inline void Instrumentation::startAllocCounting() { return call_method<SCAPIX_META_STRING("startAllocCounting"), void>(); }
inline void Instrumentation::stopAllocCounting() { return call_method<SCAPIX_META_STRING("stopAllocCounting"), void>(); }
inline ref<android::os::Bundle> Instrumentation::getAllocCounts() { return call_method<SCAPIX_META_STRING("getAllocCounts"), ref<android::os::Bundle>>(); }
inline ref<android::os::Bundle> Instrumentation::getBinderCounts() { return call_method<SCAPIX_META_STRING("getBinderCounts"), ref<android::os::Bundle>>(); }
inline ref<android::app::UiAutomation> Instrumentation::getUiAutomation() { return call_method<SCAPIX_META_STRING("getUiAutomation"), ref<android::app::UiAutomation>>(); }
inline ref<android::app::UiAutomation> Instrumentation::getUiAutomation(jint flags) { return call_method<SCAPIX_META_STRING("getUiAutomation"), ref<android::app::UiAutomation>>(flags); }
inline ref<android::os::TestLooperManager> Instrumentation::acquireLooperManager(ref<android::os::Looper> looper) { return call_method<SCAPIX_META_STRING("acquireLooperManager"), ref<android::os::TestLooperManager>>(looper); }

} // namespace android::app
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_APP_INSTRUMENTATION_H
