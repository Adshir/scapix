// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_OS_MESSENGER_H
#define SCAPIX_ANDROID_OS_MESSENGER_H

namespace scapix::java_api {

namespace android::os { class Handler; }
namespace android::os { class IBinder; }
namespace android::os { class Message; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }

namespace android::os {

class Messenger : public object_base<SCAPIX_META_STRING("android/os/Messenger"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();

	static ref<Messenger> new_object(ref<android::os::Handler> target);
	static ref<Messenger> new_object(ref<android::os::IBinder> target);
	void send(ref<android::os::Message> message);
	ref<android::os::IBinder> getBinder();
	jboolean equals(ref<java::lang::Object> otherObj);
	jint hashCode();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint flags);
	static void writeMessengerOrNullToParcel(ref<android::os::Messenger> messenger, ref<android::os::Parcel> out);
	static ref<android::os::Messenger> readMessengerOrNullFromParcel(ref<android::os::Parcel> in);

protected:

	Messenger(handle_type h) : base_(h) {}

};

} // namespace android::os
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/android/os/Message.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>

namespace scapix::java_api {
namespace android::os {

inline ref<android::os::Parcelable_Creator> Messenger::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<Messenger> Messenger::new_object(ref<android::os::Handler> target) { return base_::new_object(target); }
inline ref<Messenger> Messenger::new_object(ref<android::os::IBinder> target) { return base_::new_object(target); }
inline void Messenger::send(ref<android::os::Message> message) { return call_method<SCAPIX_META_STRING("send"), void>(message); }
inline ref<android::os::IBinder> Messenger::getBinder() { return call_method<SCAPIX_META_STRING("getBinder"), ref<android::os::IBinder>>(); }
inline jboolean Messenger::equals(ref<java::lang::Object> otherObj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(otherObj); }
inline jint Messenger::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint Messenger::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void Messenger::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }
inline void Messenger::writeMessengerOrNullToParcel(ref<android::os::Messenger> messenger, ref<android::os::Parcel> out) { return call_static_method<SCAPIX_META_STRING("writeMessengerOrNullToParcel"), void>(messenger, out); }
inline ref<android::os::Messenger> Messenger::readMessengerOrNullFromParcel(ref<android::os::Parcel> in) { return call_static_method<SCAPIX_META_STRING("readMessengerOrNullFromParcel"), ref<android::os::Messenger>>(in); }

} // namespace android::os
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OS_MESSENGER_H
