// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/IBinder.h>

#ifndef SCAPIX_ANDROID_OS_BINDER_H
#define SCAPIX_ANDROID_OS_BINDER_H

namespace scapix::java_api {

namespace android::os { class IBinder_DeathRecipient; }
namespace android::os { class IInterface; }
namespace android::os { class Parcel; }
namespace android::os { class UserHandle; }
namespace java::io { class FileDescriptor; }
namespace java::lang { class String; }

namespace android::os {

class Binder : public object_base<SCAPIX_META_STRING("android/os/Binder"),
	java::lang::Object,
	android::os::IBinder>
{
public:

	static ref<Binder> new_object();
	static jint getCallingPid();
	static jint getCallingUid();
	static ref<android::os::UserHandle> getCallingUserHandle();
	static jlong clearCallingIdentity();
	static void restoreCallingIdentity(jlong p1);
	static void flushPendingCommands();
	static void joinThreadPool();
	void attachInterface(ref<android::os::IInterface> owner, ref<java::lang::String> descriptor);
	ref<java::lang::String> getInterfaceDescriptor();
	jboolean pingBinder();
	jboolean isBinderAlive();
	ref<android::os::IInterface> queryLocalInterface(ref<java::lang::String> descriptor);
	void dump(ref<java::io::FileDescriptor> fd, ref<link::java::array<java::lang::String>> args);
	void dumpAsync(ref<java::io::FileDescriptor> fd, ref<link::java::array<java::lang::String>> args);
	jboolean transact(jint code, ref<android::os::Parcel> data, ref<android::os::Parcel> reply, jint flags);
	void linkToDeath(ref<android::os::IBinder_DeathRecipient> recipient, jint flags);
	jboolean unlinkToDeath(ref<android::os::IBinder_DeathRecipient> recipient, jint flags);

protected:

	Binder(handle_type h) : base_(h) {}

};

} // namespace android::os
} // namespace scapix::java_api

#include <scapix/java_api/android/os/IBinder_DeathRecipient.h>
#include <scapix/java_api/android/os/IInterface.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/UserHandle.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::os {

inline ref<Binder> Binder::new_object() { return base_::new_object(); }
inline jint Binder::getCallingPid() { return call_static_method<SCAPIX_META_STRING("getCallingPid"), jint>(); }
inline jint Binder::getCallingUid() { return call_static_method<SCAPIX_META_STRING("getCallingUid"), jint>(); }
inline ref<android::os::UserHandle> Binder::getCallingUserHandle() { return call_static_method<SCAPIX_META_STRING("getCallingUserHandle"), ref<android::os::UserHandle>>(); }
inline jlong Binder::clearCallingIdentity() { return call_static_method<SCAPIX_META_STRING("clearCallingIdentity"), jlong>(); }
inline void Binder::restoreCallingIdentity(jlong p1) { return call_static_method<SCAPIX_META_STRING("restoreCallingIdentity"), void>(p1); }
inline void Binder::flushPendingCommands() { return call_static_method<SCAPIX_META_STRING("flushPendingCommands"), void>(); }
inline void Binder::joinThreadPool() { return call_static_method<SCAPIX_META_STRING("joinThreadPool"), void>(); }
inline void Binder::attachInterface(ref<android::os::IInterface> owner, ref<java::lang::String> descriptor) { return call_method<SCAPIX_META_STRING("attachInterface"), void>(owner, descriptor); }
inline ref<java::lang::String> Binder::getInterfaceDescriptor() { return call_method<SCAPIX_META_STRING("getInterfaceDescriptor"), ref<java::lang::String>>(); }
inline jboolean Binder::pingBinder() { return call_method<SCAPIX_META_STRING("pingBinder"), jboolean>(); }
inline jboolean Binder::isBinderAlive() { return call_method<SCAPIX_META_STRING("isBinderAlive"), jboolean>(); }
inline ref<android::os::IInterface> Binder::queryLocalInterface(ref<java::lang::String> descriptor) { return call_method<SCAPIX_META_STRING("queryLocalInterface"), ref<android::os::IInterface>>(descriptor); }
inline void Binder::dump(ref<java::io::FileDescriptor> fd, ref<link::java::array<java::lang::String>> args) { return call_method<SCAPIX_META_STRING("dump"), void>(fd, args); }
inline void Binder::dumpAsync(ref<java::io::FileDescriptor> fd, ref<link::java::array<java::lang::String>> args) { return call_method<SCAPIX_META_STRING("dumpAsync"), void>(fd, args); }
inline jboolean Binder::transact(jint code, ref<android::os::Parcel> data, ref<android::os::Parcel> reply, jint flags) { return call_method<SCAPIX_META_STRING("transact"), jboolean>(code, data, reply, flags); }
inline void Binder::linkToDeath(ref<android::os::IBinder_DeathRecipient> recipient, jint flags) { return call_method<SCAPIX_META_STRING("linkToDeath"), void>(recipient, flags); }
inline jboolean Binder::unlinkToDeath(ref<android::os::IBinder_DeathRecipient> recipient, jint flags) { return call_method<SCAPIX_META_STRING("unlinkToDeath"), jboolean>(recipient, flags); }

} // namespace android::os
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OS_BINDER_H
