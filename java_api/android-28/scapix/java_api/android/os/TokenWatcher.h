// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_OS_TOKENWATCHER_H
#define SCAPIX_ANDROID_OS_TOKENWATCHER_H

namespace scapix::java_api {

namespace android::os { class Handler; }
namespace android::os { class IBinder; }
namespace java::io { class PrintWriter; }
namespace java::lang { class String; }

namespace android::os {

class TokenWatcher : public object_base<SCAPIX_META_STRING("android/os/TokenWatcher"),
	java::lang::Object>
{
public:

	static ref<TokenWatcher> new_object(ref<android::os::Handler> h, ref<java::lang::String> tag);
	void acquired();
	void released();
	void acquire(ref<android::os::IBinder> token, ref<java::lang::String> tag);
	void cleanup(ref<android::os::IBinder> token, jboolean unlink);
	void release(ref<android::os::IBinder> token);
	jboolean isAcquired();
	void dump();
	void dump(ref<java::io::PrintWriter> pw);

protected:

	TokenWatcher(handle_type h) : base_(h) {}

};

} // namespace android::os
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::os {

inline ref<TokenWatcher> TokenWatcher::new_object(ref<android::os::Handler> h, ref<java::lang::String> tag) { return base_::new_object(h, tag); }
inline void TokenWatcher::acquired() { return call_method<SCAPIX_META_STRING("acquired"), void>(); }
inline void TokenWatcher::released() { return call_method<SCAPIX_META_STRING("released"), void>(); }
inline void TokenWatcher::acquire(ref<android::os::IBinder> token, ref<java::lang::String> tag) { return call_method<SCAPIX_META_STRING("acquire"), void>(token, tag); }
inline void TokenWatcher::cleanup(ref<android::os::IBinder> token, jboolean unlink) { return call_method<SCAPIX_META_STRING("cleanup"), void>(token, unlink); }
inline void TokenWatcher::release(ref<android::os::IBinder> token) { return call_method<SCAPIX_META_STRING("release"), void>(token); }
inline jboolean TokenWatcher::isAcquired() { return call_method<SCAPIX_META_STRING("isAcquired"), jboolean>(); }
inline void TokenWatcher::dump() { return call_method<SCAPIX_META_STRING("dump"), void>(); }
inline void TokenWatcher::dump(ref<java::io::PrintWriter> pw) { return call_method<SCAPIX_META_STRING("dump"), void>(pw); }

} // namespace android::os
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OS_TOKENWATCHER_H
