// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_ANDROID_OS_PARCELFILEDESCRIPTOR_H
#define SCAPIX_ANDROID_OS_PARCELFILEDESCRIPTOR_H

namespace scapix::java_api {

namespace android::os { class Handler; }
namespace android::os { class Parcel; }
namespace android::os { class ParcelFileDescriptor_OnCloseListener; }
namespace android::os { class Parcelable_Creator; }
namespace java::io { class File; }
namespace java::io { class FileDescriptor; }
namespace java::lang { class String; }
namespace java::net { class DatagramSocket; }
namespace java::net { class Socket; }
namespace android::os { class ParcelFileDescriptor_FileDescriptorDetachedException; }
namespace android::os { class ParcelFileDescriptor_AutoCloseOutputStream; }
namespace android::os { class ParcelFileDescriptor_AutoCloseInputStream; }

namespace android::os {

class ParcelFileDescriptor : public object_base<SCAPIX_META_STRING("android/os/ParcelFileDescriptor"),
	java::lang::Object,
	android::os::Parcelable,
	java::io::Closeable>
{
public:

	using OnCloseListener = ParcelFileDescriptor_OnCloseListener;
	using FileDescriptorDetachedException = ParcelFileDescriptor_FileDescriptorDetachedException;
	using AutoCloseOutputStream = ParcelFileDescriptor_AutoCloseOutputStream;
	using AutoCloseInputStream = ParcelFileDescriptor_AutoCloseInputStream;

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint MODE_APPEND_();
	static jint MODE_CREATE_();
	static jint MODE_READ_ONLY_();
	static jint MODE_READ_WRITE_();
	static jint MODE_TRUNCATE_();
	static jint MODE_WORLD_READABLE_();
	static jint MODE_WORLD_WRITEABLE_();
	static jint MODE_WRITE_ONLY_();

	static ref<ParcelFileDescriptor> new_object(ref<android::os::ParcelFileDescriptor> wrapped);
	static ref<android::os::ParcelFileDescriptor> open(ref<java::io::File> file, jint mode);
	static ref<android::os::ParcelFileDescriptor> open(ref<java::io::File> file, jint mode, ref<android::os::Handler> handler, ref<android::os::ParcelFileDescriptor_OnCloseListener> listener);
	static ref<android::os::ParcelFileDescriptor> dup(ref<java::io::FileDescriptor> orig);
	ref<android::os::ParcelFileDescriptor> dup();
	static ref<android::os::ParcelFileDescriptor> fromFd(jint fd);
	static ref<android::os::ParcelFileDescriptor> adoptFd(jint fd);
	static ref<android::os::ParcelFileDescriptor> fromSocket(ref<java::net::Socket> socket);
	static ref<android::os::ParcelFileDescriptor> fromDatagramSocket(ref<java::net::DatagramSocket> datagramSocket);
	static ref<link::java::array<android::os::ParcelFileDescriptor>> createPipe();
	static ref<link::java::array<android::os::ParcelFileDescriptor>> createReliablePipe();
	static ref<link::java::array<android::os::ParcelFileDescriptor>> createSocketPair();
	static ref<link::java::array<android::os::ParcelFileDescriptor>> createReliableSocketPair();
	static jint parseMode(ref<java::lang::String> mode);
	ref<java::io::FileDescriptor> getFileDescriptor();
	jlong getStatSize();
	jint getFd();
	jint detachFd();
	void close();
	void closeWithError(ref<java::lang::String> msg);
	jboolean canDetectErrors();
	void checkError();
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint flags);

protected:

	ParcelFileDescriptor(handle_type h) : base_(h) {}

};

} // namespace android::os
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor_OnCloseListener.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/DatagramSocket.h>
#include <scapix/java_api/java/net/Socket.h>

namespace scapix::java_api {
namespace android::os {

inline ref<android::os::Parcelable_Creator> ParcelFileDescriptor::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint ParcelFileDescriptor::MODE_APPEND_() { return get_static_field<SCAPIX_META_STRING("MODE_APPEND"), jint>(); }
inline jint ParcelFileDescriptor::MODE_CREATE_() { return get_static_field<SCAPIX_META_STRING("MODE_CREATE"), jint>(); }
inline jint ParcelFileDescriptor::MODE_READ_ONLY_() { return get_static_field<SCAPIX_META_STRING("MODE_READ_ONLY"), jint>(); }
inline jint ParcelFileDescriptor::MODE_READ_WRITE_() { return get_static_field<SCAPIX_META_STRING("MODE_READ_WRITE"), jint>(); }
inline jint ParcelFileDescriptor::MODE_TRUNCATE_() { return get_static_field<SCAPIX_META_STRING("MODE_TRUNCATE"), jint>(); }
inline jint ParcelFileDescriptor::MODE_WORLD_READABLE_() { return get_static_field<SCAPIX_META_STRING("MODE_WORLD_READABLE"), jint>(); }
inline jint ParcelFileDescriptor::MODE_WORLD_WRITEABLE_() { return get_static_field<SCAPIX_META_STRING("MODE_WORLD_WRITEABLE"), jint>(); }
inline jint ParcelFileDescriptor::MODE_WRITE_ONLY_() { return get_static_field<SCAPIX_META_STRING("MODE_WRITE_ONLY"), jint>(); }
inline ref<ParcelFileDescriptor> ParcelFileDescriptor::new_object(ref<android::os::ParcelFileDescriptor> wrapped) { return base_::new_object(wrapped); }
inline ref<android::os::ParcelFileDescriptor> ParcelFileDescriptor::open(ref<java::io::File> file, jint mode) { return call_static_method<SCAPIX_META_STRING("open"), ref<android::os::ParcelFileDescriptor>>(file, mode); }
inline ref<android::os::ParcelFileDescriptor> ParcelFileDescriptor::open(ref<java::io::File> file, jint mode, ref<android::os::Handler> handler, ref<android::os::ParcelFileDescriptor_OnCloseListener> listener) { return call_static_method<SCAPIX_META_STRING("open"), ref<android::os::ParcelFileDescriptor>>(file, mode, handler, listener); }
inline ref<android::os::ParcelFileDescriptor> ParcelFileDescriptor::dup(ref<java::io::FileDescriptor> orig) { return call_static_method<SCAPIX_META_STRING("dup"), ref<android::os::ParcelFileDescriptor>>(orig); }
inline ref<android::os::ParcelFileDescriptor> ParcelFileDescriptor::dup() { return call_method<SCAPIX_META_STRING("dup"), ref<android::os::ParcelFileDescriptor>>(); }
inline ref<android::os::ParcelFileDescriptor> ParcelFileDescriptor::fromFd(jint fd) { return call_static_method<SCAPIX_META_STRING("fromFd"), ref<android::os::ParcelFileDescriptor>>(fd); }
inline ref<android::os::ParcelFileDescriptor> ParcelFileDescriptor::adoptFd(jint fd) { return call_static_method<SCAPIX_META_STRING("adoptFd"), ref<android::os::ParcelFileDescriptor>>(fd); }
inline ref<android::os::ParcelFileDescriptor> ParcelFileDescriptor::fromSocket(ref<java::net::Socket> socket) { return call_static_method<SCAPIX_META_STRING("fromSocket"), ref<android::os::ParcelFileDescriptor>>(socket); }
inline ref<android::os::ParcelFileDescriptor> ParcelFileDescriptor::fromDatagramSocket(ref<java::net::DatagramSocket> datagramSocket) { return call_static_method<SCAPIX_META_STRING("fromDatagramSocket"), ref<android::os::ParcelFileDescriptor>>(datagramSocket); }
inline ref<link::java::array<android::os::ParcelFileDescriptor>> ParcelFileDescriptor::createPipe() { return call_static_method<SCAPIX_META_STRING("createPipe"), ref<link::java::array<android::os::ParcelFileDescriptor>>>(); }
inline ref<link::java::array<android::os::ParcelFileDescriptor>> ParcelFileDescriptor::createReliablePipe() { return call_static_method<SCAPIX_META_STRING("createReliablePipe"), ref<link::java::array<android::os::ParcelFileDescriptor>>>(); }
inline ref<link::java::array<android::os::ParcelFileDescriptor>> ParcelFileDescriptor::createSocketPair() { return call_static_method<SCAPIX_META_STRING("createSocketPair"), ref<link::java::array<android::os::ParcelFileDescriptor>>>(); }
inline ref<link::java::array<android::os::ParcelFileDescriptor>> ParcelFileDescriptor::createReliableSocketPair() { return call_static_method<SCAPIX_META_STRING("createReliableSocketPair"), ref<link::java::array<android::os::ParcelFileDescriptor>>>(); }
inline jint ParcelFileDescriptor::parseMode(ref<java::lang::String> mode) { return call_static_method<SCAPIX_META_STRING("parseMode"), jint>(mode); }
inline ref<java::io::FileDescriptor> ParcelFileDescriptor::getFileDescriptor() { return call_method<SCAPIX_META_STRING("getFileDescriptor"), ref<java::io::FileDescriptor>>(); }
inline jlong ParcelFileDescriptor::getStatSize() { return call_method<SCAPIX_META_STRING("getStatSize"), jlong>(); }
inline jint ParcelFileDescriptor::getFd() { return call_method<SCAPIX_META_STRING("getFd"), jint>(); }
inline jint ParcelFileDescriptor::detachFd() { return call_method<SCAPIX_META_STRING("detachFd"), jint>(); }
inline void ParcelFileDescriptor::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void ParcelFileDescriptor::closeWithError(ref<java::lang::String> msg) { return call_method<SCAPIX_META_STRING("closeWithError"), void>(msg); }
inline jboolean ParcelFileDescriptor::canDetectErrors() { return call_method<SCAPIX_META_STRING("canDetectErrors"), jboolean>(); }
inline void ParcelFileDescriptor::checkError() { return call_method<SCAPIX_META_STRING("checkError"), void>(); }
inline ref<java::lang::String> ParcelFileDescriptor::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint ParcelFileDescriptor::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void ParcelFileDescriptor::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }

} // namespace android::os
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OS_PARCELFILEDESCRIPTOR_H
