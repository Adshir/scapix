// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_OS_PROCESS_H
#define SCAPIX_ANDROID_OS_PROCESS_H

namespace scapix::java_api {

namespace android::os { class UserHandle; }
namespace java::lang { class String; }

namespace android::os {

class Process : public object_base<SCAPIX_META_STRING("android/os/Process"),
	java::lang::Object>
{
public:

	static jint FIRST_APPLICATION_UID_();
	static jint LAST_APPLICATION_UID_();
	static jint PHONE_UID_();
	static jint SIGNAL_KILL_();
	static jint SIGNAL_QUIT_();
	static jint SIGNAL_USR1_();
	static jint SYSTEM_UID_();
	static jint THREAD_PRIORITY_AUDIO_();
	static jint THREAD_PRIORITY_BACKGROUND_();
	static jint THREAD_PRIORITY_DEFAULT_();
	static jint THREAD_PRIORITY_DISPLAY_();
	static jint THREAD_PRIORITY_FOREGROUND_();
	static jint THREAD_PRIORITY_LESS_FAVORABLE_();
	static jint THREAD_PRIORITY_LOWEST_();
	static jint THREAD_PRIORITY_MORE_FAVORABLE_();
	static jint THREAD_PRIORITY_URGENT_AUDIO_();
	static jint THREAD_PRIORITY_URGENT_DISPLAY_();
	static jint THREAD_PRIORITY_VIDEO_();

	static ref<Process> new_object();
	static jlong getElapsedCpuTime();
	static jlong getStartElapsedRealtime();
	static jlong getStartUptimeMillis();
	static jboolean is64Bit();
	static jint myPid();
	static jint myTid();
	static jint myUid();
	static ref<android::os::UserHandle> myUserHandle();
	static jboolean isApplicationUid(jint uid);
	static jboolean isIsolated();
	static jint getUidForName(ref<java::lang::String> p1);
	static jint getGidForName(ref<java::lang::String> p1);
	static void setThreadPriority(jint p1, jint p2);
	static ref<link::java::array<jint>> getExclusiveCores();
	static void setThreadPriority(jint p1);
	static jint getThreadPriority(jint p1);
	static jboolean supportsProcesses();
	static void killProcess(jint pid);
	static void sendSignal(jint p1, jint p2);

protected:

	Process(handle_type h) : base_(h) {}

};

} // namespace android::os
} // namespace scapix::java_api

#include <scapix/java_api/android/os/UserHandle.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::os {

inline jint Process::FIRST_APPLICATION_UID_() { return get_static_field<SCAPIX_META_STRING("FIRST_APPLICATION_UID"), jint>(); }
inline jint Process::LAST_APPLICATION_UID_() { return get_static_field<SCAPIX_META_STRING("LAST_APPLICATION_UID"), jint>(); }
inline jint Process::PHONE_UID_() { return get_static_field<SCAPIX_META_STRING("PHONE_UID"), jint>(); }
inline jint Process::SIGNAL_KILL_() { return get_static_field<SCAPIX_META_STRING("SIGNAL_KILL"), jint>(); }
inline jint Process::SIGNAL_QUIT_() { return get_static_field<SCAPIX_META_STRING("SIGNAL_QUIT"), jint>(); }
inline jint Process::SIGNAL_USR1_() { return get_static_field<SCAPIX_META_STRING("SIGNAL_USR1"), jint>(); }
inline jint Process::SYSTEM_UID_() { return get_static_field<SCAPIX_META_STRING("SYSTEM_UID"), jint>(); }
inline jint Process::THREAD_PRIORITY_AUDIO_() { return get_static_field<SCAPIX_META_STRING("THREAD_PRIORITY_AUDIO"), jint>(); }
inline jint Process::THREAD_PRIORITY_BACKGROUND_() { return get_static_field<SCAPIX_META_STRING("THREAD_PRIORITY_BACKGROUND"), jint>(); }
inline jint Process::THREAD_PRIORITY_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("THREAD_PRIORITY_DEFAULT"), jint>(); }
inline jint Process::THREAD_PRIORITY_DISPLAY_() { return get_static_field<SCAPIX_META_STRING("THREAD_PRIORITY_DISPLAY"), jint>(); }
inline jint Process::THREAD_PRIORITY_FOREGROUND_() { return get_static_field<SCAPIX_META_STRING("THREAD_PRIORITY_FOREGROUND"), jint>(); }
inline jint Process::THREAD_PRIORITY_LESS_FAVORABLE_() { return get_static_field<SCAPIX_META_STRING("THREAD_PRIORITY_LESS_FAVORABLE"), jint>(); }
inline jint Process::THREAD_PRIORITY_LOWEST_() { return get_static_field<SCAPIX_META_STRING("THREAD_PRIORITY_LOWEST"), jint>(); }
inline jint Process::THREAD_PRIORITY_MORE_FAVORABLE_() { return get_static_field<SCAPIX_META_STRING("THREAD_PRIORITY_MORE_FAVORABLE"), jint>(); }
inline jint Process::THREAD_PRIORITY_URGENT_AUDIO_() { return get_static_field<SCAPIX_META_STRING("THREAD_PRIORITY_URGENT_AUDIO"), jint>(); }
inline jint Process::THREAD_PRIORITY_URGENT_DISPLAY_() { return get_static_field<SCAPIX_META_STRING("THREAD_PRIORITY_URGENT_DISPLAY"), jint>(); }
inline jint Process::THREAD_PRIORITY_VIDEO_() { return get_static_field<SCAPIX_META_STRING("THREAD_PRIORITY_VIDEO"), jint>(); }
inline ref<Process> Process::new_object() { return base_::new_object(); }
inline jlong Process::getElapsedCpuTime() { return call_static_method<SCAPIX_META_STRING("getElapsedCpuTime"), jlong>(); }
inline jlong Process::getStartElapsedRealtime() { return call_static_method<SCAPIX_META_STRING("getStartElapsedRealtime"), jlong>(); }
inline jlong Process::getStartUptimeMillis() { return call_static_method<SCAPIX_META_STRING("getStartUptimeMillis"), jlong>(); }
inline jboolean Process::is64Bit() { return call_static_method<SCAPIX_META_STRING("is64Bit"), jboolean>(); }
inline jint Process::myPid() { return call_static_method<SCAPIX_META_STRING("myPid"), jint>(); }
inline jint Process::myTid() { return call_static_method<SCAPIX_META_STRING("myTid"), jint>(); }
inline jint Process::myUid() { return call_static_method<SCAPIX_META_STRING("myUid"), jint>(); }
inline ref<android::os::UserHandle> Process::myUserHandle() { return call_static_method<SCAPIX_META_STRING("myUserHandle"), ref<android::os::UserHandle>>(); }
inline jboolean Process::isApplicationUid(jint uid) { return call_static_method<SCAPIX_META_STRING("isApplicationUid"), jboolean>(uid); }
inline jboolean Process::isIsolated() { return call_static_method<SCAPIX_META_STRING("isIsolated"), jboolean>(); }
inline jint Process::getUidForName(ref<java::lang::String> p1) { return call_static_method<SCAPIX_META_STRING("getUidForName"), jint>(p1); }
inline jint Process::getGidForName(ref<java::lang::String> p1) { return call_static_method<SCAPIX_META_STRING("getGidForName"), jint>(p1); }
inline void Process::setThreadPriority(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("setThreadPriority"), void>(p1, p2); }
inline ref<link::java::array<jint>> Process::getExclusiveCores() { return call_static_method<SCAPIX_META_STRING("getExclusiveCores"), ref<link::java::array<jint>>>(); }
inline void Process::setThreadPriority(jint p1) { return call_static_method<SCAPIX_META_STRING("setThreadPriority"), void>(p1); }
inline jint Process::getThreadPriority(jint p1) { return call_static_method<SCAPIX_META_STRING("getThreadPriority"), jint>(p1); }
inline jboolean Process::supportsProcesses() { return call_static_method<SCAPIX_META_STRING("supportsProcesses"), jboolean>(); }
inline void Process::killProcess(jint pid) { return call_static_method<SCAPIX_META_STRING("killProcess"), void>(pid); }
inline void Process::sendSignal(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("sendSignal"), void>(p1, p2); }

} // namespace android::os
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OS_PROCESS_H
