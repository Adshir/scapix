// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_OS_BASEBUNDLE_H
#define SCAPIX_ANDROID_OS_BASEBUNDLE_H

namespace scapix::java_api {

namespace android::os { class PersistableBundle; }
namespace java::lang { class String; }
namespace java::util { class Set; }

namespace android::os {

class BaseBundle : public object_base<SCAPIX_META_STRING("android/os/BaseBundle"),
	java::lang::Object>
{
public:

	jint size();
	jboolean isEmpty();
	void clear();
	jboolean containsKey(ref<java::lang::String> key);
	ref<java::lang::Object> get(ref<java::lang::String> key);
	void remove(ref<java::lang::String> key);
	void putAll(ref<android::os::PersistableBundle> bundle);
	ref<java::util::Set> keySet();
	void putBoolean(ref<java::lang::String> key, jboolean value);
	void putInt(ref<java::lang::String> key, jint value);
	void putLong(ref<java::lang::String> key, jlong value);
	void putDouble(ref<java::lang::String> key, jdouble value);
	void putString(ref<java::lang::String> key, ref<java::lang::String> value);
	void putBooleanArray(ref<java::lang::String> key, ref<link::java::array<jboolean>> value);
	void putIntArray(ref<java::lang::String> key, ref<link::java::array<jint>> value);
	void putLongArray(ref<java::lang::String> key, ref<link::java::array<jlong>> value);
	void putDoubleArray(ref<java::lang::String> key, ref<link::java::array<jdouble>> value);
	void putStringArray(ref<java::lang::String> key, ref<link::java::array<java::lang::String>> value);
	jboolean getBoolean(ref<java::lang::String> key);
	jboolean getBoolean(ref<java::lang::String> key, jboolean defaultValue);
	jint getInt(ref<java::lang::String> key);
	jint getInt(ref<java::lang::String> key, jint defaultValue);
	jlong getLong(ref<java::lang::String> key);
	jlong getLong(ref<java::lang::String> key, jlong defaultValue);
	jdouble getDouble(ref<java::lang::String> key);
	jdouble getDouble(ref<java::lang::String> key, jdouble defaultValue);
	ref<java::lang::String> getString(ref<java::lang::String> key);
	ref<java::lang::String> getString(ref<java::lang::String> key, ref<java::lang::String> defaultValue);
	ref<link::java::array<jboolean>> getBooleanArray(ref<java::lang::String> key);
	ref<link::java::array<jint>> getIntArray(ref<java::lang::String> key);
	ref<link::java::array<jlong>> getLongArray(ref<java::lang::String> key);
	ref<link::java::array<jdouble>> getDoubleArray(ref<java::lang::String> key);
	ref<link::java::array<java::lang::String>> getStringArray(ref<java::lang::String> key);

protected:

	BaseBundle(handle_type h) : base_(h) {}

};

} // namespace android::os
} // namespace scapix::java_api

#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace android::os {

inline jint BaseBundle::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jboolean BaseBundle::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline void BaseBundle::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline jboolean BaseBundle::containsKey(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("containsKey"), jboolean>(key); }
inline ref<java::lang::Object> BaseBundle::get(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(key); }
inline void BaseBundle::remove(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("remove"), void>(key); }
inline void BaseBundle::putAll(ref<android::os::PersistableBundle> bundle) { return call_method<SCAPIX_META_STRING("putAll"), void>(bundle); }
inline ref<java::util::Set> BaseBundle::keySet() { return call_method<SCAPIX_META_STRING("keySet"), ref<java::util::Set>>(); }
inline void BaseBundle::putBoolean(ref<java::lang::String> key, jboolean value) { return call_method<SCAPIX_META_STRING("putBoolean"), void>(key, value); }
inline void BaseBundle::putInt(ref<java::lang::String> key, jint value) { return call_method<SCAPIX_META_STRING("putInt"), void>(key, value); }
inline void BaseBundle::putLong(ref<java::lang::String> key, jlong value) { return call_method<SCAPIX_META_STRING("putLong"), void>(key, value); }
inline void BaseBundle::putDouble(ref<java::lang::String> key, jdouble value) { return call_method<SCAPIX_META_STRING("putDouble"), void>(key, value); }
inline void BaseBundle::putString(ref<java::lang::String> key, ref<java::lang::String> value) { return call_method<SCAPIX_META_STRING("putString"), void>(key, value); }
inline void BaseBundle::putBooleanArray(ref<java::lang::String> key, ref<link::java::array<jboolean>> value) { return call_method<SCAPIX_META_STRING("putBooleanArray"), void>(key, value); }
inline void BaseBundle::putIntArray(ref<java::lang::String> key, ref<link::java::array<jint>> value) { return call_method<SCAPIX_META_STRING("putIntArray"), void>(key, value); }
inline void BaseBundle::putLongArray(ref<java::lang::String> key, ref<link::java::array<jlong>> value) { return call_method<SCAPIX_META_STRING("putLongArray"), void>(key, value); }
inline void BaseBundle::putDoubleArray(ref<java::lang::String> key, ref<link::java::array<jdouble>> value) { return call_method<SCAPIX_META_STRING("putDoubleArray"), void>(key, value); }
inline void BaseBundle::putStringArray(ref<java::lang::String> key, ref<link::java::array<java::lang::String>> value) { return call_method<SCAPIX_META_STRING("putStringArray"), void>(key, value); }
inline jboolean BaseBundle::getBoolean(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getBoolean"), jboolean>(key); }
inline jboolean BaseBundle::getBoolean(ref<java::lang::String> key, jboolean defaultValue) { return call_method<SCAPIX_META_STRING("getBoolean"), jboolean>(key, defaultValue); }
inline jint BaseBundle::getInt(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getInt"), jint>(key); }
inline jint BaseBundle::getInt(ref<java::lang::String> key, jint defaultValue) { return call_method<SCAPIX_META_STRING("getInt"), jint>(key, defaultValue); }
inline jlong BaseBundle::getLong(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(key); }
inline jlong BaseBundle::getLong(ref<java::lang::String> key, jlong defaultValue) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(key, defaultValue); }
inline jdouble BaseBundle::getDouble(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(key); }
inline jdouble BaseBundle::getDouble(ref<java::lang::String> key, jdouble defaultValue) { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(key, defaultValue); }
inline ref<java::lang::String> BaseBundle::getString(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(key); }
inline ref<java::lang::String> BaseBundle::getString(ref<java::lang::String> key, ref<java::lang::String> defaultValue) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(key, defaultValue); }
inline ref<link::java::array<jboolean>> BaseBundle::getBooleanArray(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getBooleanArray"), ref<link::java::array<jboolean>>>(key); }
inline ref<link::java::array<jint>> BaseBundle::getIntArray(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getIntArray"), ref<link::java::array<jint>>>(key); }
inline ref<link::java::array<jlong>> BaseBundle::getLongArray(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getLongArray"), ref<link::java::array<jlong>>>(key); }
inline ref<link::java::array<jdouble>> BaseBundle::getDoubleArray(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getDoubleArray"), ref<link::java::array<jdouble>>>(key); }
inline ref<link::java::array<java::lang::String>> BaseBundle::getStringArray(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getStringArray"), ref<link::java::array<java::lang::String>>>(key); }

} // namespace android::os
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OS_BASEBUNDLE_H
