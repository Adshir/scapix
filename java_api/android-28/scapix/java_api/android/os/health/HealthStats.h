// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_OS_HEALTH_HEALTHSTATS_H
#define SCAPIX_ANDROID_OS_HEALTH_HEALTHSTATS_H

namespace scapix::java_api {

namespace android::os::health { class TimerStat; }
namespace java::lang { class String; }
namespace java::util { class Map; }

namespace android::os::health {

class HealthStats : public object_base<SCAPIX_META_STRING("android/os/health/HealthStats"),
	java::lang::Object>
{
public:

	ref<java::lang::String> getDataType();
	jboolean hasTimer(jint key);
	ref<android::os::health::TimerStat> getTimer(jint key);
	jint getTimerCount(jint key);
	jlong getTimerTime(jint key);
	jint getTimerKeyCount();
	jint getTimerKeyAt(jint index);
	jboolean hasMeasurement(jint key);
	jlong getMeasurement(jint key);
	jint getMeasurementKeyCount();
	jint getMeasurementKeyAt(jint index);
	jboolean hasStats(jint key);
	ref<java::util::Map> getStats(jint key);
	jint getStatsKeyCount();
	jint getStatsKeyAt(jint index);
	jboolean hasTimers(jint key);
	ref<java::util::Map> getTimers(jint key);
	jint getTimersKeyCount();
	jint getTimersKeyAt(jint index);
	jboolean hasMeasurements(jint key);
	ref<java::util::Map> getMeasurements(jint key);
	jint getMeasurementsKeyCount();
	jint getMeasurementsKeyAt(jint index);

protected:

	HealthStats(handle_type h) : base_(h) {}

};

} // namespace android::os::health
} // namespace scapix::java_api

#include <scapix/java_api/android/os/health/TimerStat.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>

namespace scapix::java_api {
namespace android::os::health {

inline ref<java::lang::String> HealthStats::getDataType() { return call_method<SCAPIX_META_STRING("getDataType"), ref<java::lang::String>>(); }
inline jboolean HealthStats::hasTimer(jint key) { return call_method<SCAPIX_META_STRING("hasTimer"), jboolean>(key); }
inline ref<android::os::health::TimerStat> HealthStats::getTimer(jint key) { return call_method<SCAPIX_META_STRING("getTimer"), ref<android::os::health::TimerStat>>(key); }
inline jint HealthStats::getTimerCount(jint key) { return call_method<SCAPIX_META_STRING("getTimerCount"), jint>(key); }
inline jlong HealthStats::getTimerTime(jint key) { return call_method<SCAPIX_META_STRING("getTimerTime"), jlong>(key); }
inline jint HealthStats::getTimerKeyCount() { return call_method<SCAPIX_META_STRING("getTimerKeyCount"), jint>(); }
inline jint HealthStats::getTimerKeyAt(jint index) { return call_method<SCAPIX_META_STRING("getTimerKeyAt"), jint>(index); }
inline jboolean HealthStats::hasMeasurement(jint key) { return call_method<SCAPIX_META_STRING("hasMeasurement"), jboolean>(key); }
inline jlong HealthStats::getMeasurement(jint key) { return call_method<SCAPIX_META_STRING("getMeasurement"), jlong>(key); }
inline jint HealthStats::getMeasurementKeyCount() { return call_method<SCAPIX_META_STRING("getMeasurementKeyCount"), jint>(); }
inline jint HealthStats::getMeasurementKeyAt(jint index) { return call_method<SCAPIX_META_STRING("getMeasurementKeyAt"), jint>(index); }
inline jboolean HealthStats::hasStats(jint key) { return call_method<SCAPIX_META_STRING("hasStats"), jboolean>(key); }
inline ref<java::util::Map> HealthStats::getStats(jint key) { return call_method<SCAPIX_META_STRING("getStats"), ref<java::util::Map>>(key); }
inline jint HealthStats::getStatsKeyCount() { return call_method<SCAPIX_META_STRING("getStatsKeyCount"), jint>(); }
inline jint HealthStats::getStatsKeyAt(jint index) { return call_method<SCAPIX_META_STRING("getStatsKeyAt"), jint>(index); }
inline jboolean HealthStats::hasTimers(jint key) { return call_method<SCAPIX_META_STRING("hasTimers"), jboolean>(key); }
inline ref<java::util::Map> HealthStats::getTimers(jint key) { return call_method<SCAPIX_META_STRING("getTimers"), ref<java::util::Map>>(key); }
inline jint HealthStats::getTimersKeyCount() { return call_method<SCAPIX_META_STRING("getTimersKeyCount"), jint>(); }
inline jint HealthStats::getTimersKeyAt(jint index) { return call_method<SCAPIX_META_STRING("getTimersKeyAt"), jint>(index); }
inline jboolean HealthStats::hasMeasurements(jint key) { return call_method<SCAPIX_META_STRING("hasMeasurements"), jboolean>(key); }
inline ref<java::util::Map> HealthStats::getMeasurements(jint key) { return call_method<SCAPIX_META_STRING("getMeasurements"), ref<java::util::Map>>(key); }
inline jint HealthStats::getMeasurementsKeyCount() { return call_method<SCAPIX_META_STRING("getMeasurementsKeyCount"), jint>(); }
inline jint HealthStats::getMeasurementsKeyAt(jint index) { return call_method<SCAPIX_META_STRING("getMeasurementsKeyAt"), jint>(index); }

} // namespace android::os::health
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OS_HEALTH_HEALTHSTATS_H
