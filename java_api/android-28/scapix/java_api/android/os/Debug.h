// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_OS_DEBUG_H
#define SCAPIX_ANDROID_OS_DEBUG_H

namespace scapix::java_api {

namespace android::os { class Debug_MemoryInfo; }
namespace java::io { class FileDescriptor; }
namespace java::lang { class ClassLoader; }
namespace java::lang { class String; }
namespace java::util { class Map; }
namespace android::os { class Debug_InstructionCount; }

namespace android::os {

class Debug : public object_base<SCAPIX_META_STRING("android/os/Debug"),
	java::lang::Object>
{
public:

	using MemoryInfo = Debug_MemoryInfo;
	using InstructionCount = Debug_InstructionCount;

	static jint SHOW_CLASSLOADER_();
	static jint SHOW_FULL_DETAIL_();
	static jint SHOW_INITIALIZED_();
	static jint TRACE_COUNT_ALLOCS_();

	static void waitForDebugger();
	static jboolean waitingForDebugger();
	static jboolean isDebuggerConnected();
	static void changeDebugPort(jint port);
	static void startNativeTracing();
	static void stopNativeTracing();
	static void enableEmulatorTraceOutput();
	static void startMethodTracing();
	static void startMethodTracing(ref<java::lang::String> tracePath);
	static void startMethodTracing(ref<java::lang::String> tracePath, jint bufferSize);
	static void startMethodTracing(ref<java::lang::String> tracePath, jint bufferSize, jint flags);
	static void startMethodTracingSampling(ref<java::lang::String> tracePath, jint bufferSize, jint intervalUs);
	static void stopMethodTracing();
	static jlong threadCpuTimeNanos();
	static void startAllocCounting();
	static void stopAllocCounting();
	static jint getGlobalAllocCount();
	static void resetGlobalAllocCount();
	static jint getGlobalAllocSize();
	static void resetGlobalAllocSize();
	static jint getGlobalFreedCount();
	static void resetGlobalFreedCount();
	static jint getGlobalFreedSize();
	static void resetGlobalFreedSize();
	static jint getGlobalGcInvocationCount();
	static void resetGlobalGcInvocationCount();
	static jint getGlobalClassInitCount();
	static void resetGlobalClassInitCount();
	static jint getGlobalClassInitTime();
	static void resetGlobalClassInitTime();
	static jint getGlobalExternalAllocCount();
	static void resetGlobalExternalAllocSize();
	static void resetGlobalExternalAllocCount();
	static jint getGlobalExternalAllocSize();
	static jint getGlobalExternalFreedCount();
	static void resetGlobalExternalFreedCount();
	static jint getGlobalExternalFreedSize();
	static void resetGlobalExternalFreedSize();
	static jint getThreadAllocCount();
	static void resetThreadAllocCount();
	static jint getThreadAllocSize();
	static void resetThreadAllocSize();
	static jint getThreadExternalAllocCount();
	static void resetThreadExternalAllocCount();
	static jint getThreadExternalAllocSize();
	static void resetThreadExternalAllocSize();
	static jint getThreadGcInvocationCount();
	static void resetThreadGcInvocationCount();
	static void resetAllCounts();
	static ref<java::lang::String> getRuntimeStat(ref<java::lang::String> statName);
	static ref<java::util::Map> getRuntimeStats();
	static jlong getNativeHeapSize();
	static jlong getNativeHeapAllocatedSize();
	static jlong getNativeHeapFreeSize();
	static void getMemoryInfo(ref<android::os::Debug_MemoryInfo> p1);
	static jlong getPss();
	static jint setAllocationLimit(jint limit);
	static jint setGlobalAllocationLimit(jint limit);
	static void printLoadedClasses(jint flags);
	static jint getLoadedClassCount();
	static void dumpHprofData(ref<java::lang::String> fileName);
	static jint getBinderSentTransactions();
	static jint getBinderReceivedTransactions();
	static jint getBinderLocalObjectCount();
	static jint getBinderProxyObjectCount();
	static jint getBinderDeathObjectCount();
	static jboolean dumpService(ref<java::lang::String> name, ref<java::io::FileDescriptor> fd, ref<link::java::array<java::lang::String>> args);
	static void attachJvmtiAgent(ref<java::lang::String> library, ref<java::lang::String> options, ref<java::lang::ClassLoader> classLoader);

protected:

	Debug(handle_type h) : base_(h) {}

};

} // namespace android::os
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Debug_MemoryInfo.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>

namespace scapix::java_api {
namespace android::os {

inline jint Debug::SHOW_CLASSLOADER_() { return get_static_field<SCAPIX_META_STRING("SHOW_CLASSLOADER"), jint>(); }
inline jint Debug::SHOW_FULL_DETAIL_() { return get_static_field<SCAPIX_META_STRING("SHOW_FULL_DETAIL"), jint>(); }
inline jint Debug::SHOW_INITIALIZED_() { return get_static_field<SCAPIX_META_STRING("SHOW_INITIALIZED"), jint>(); }
inline jint Debug::TRACE_COUNT_ALLOCS_() { return get_static_field<SCAPIX_META_STRING("TRACE_COUNT_ALLOCS"), jint>(); }
inline void Debug::waitForDebugger() { return call_static_method<SCAPIX_META_STRING("waitForDebugger"), void>(); }
inline jboolean Debug::waitingForDebugger() { return call_static_method<SCAPIX_META_STRING("waitingForDebugger"), jboolean>(); }
inline jboolean Debug::isDebuggerConnected() { return call_static_method<SCAPIX_META_STRING("isDebuggerConnected"), jboolean>(); }
inline void Debug::changeDebugPort(jint port) { return call_static_method<SCAPIX_META_STRING("changeDebugPort"), void>(port); }
inline void Debug::startNativeTracing() { return call_static_method<SCAPIX_META_STRING("startNativeTracing"), void>(); }
inline void Debug::stopNativeTracing() { return call_static_method<SCAPIX_META_STRING("stopNativeTracing"), void>(); }
inline void Debug::enableEmulatorTraceOutput() { return call_static_method<SCAPIX_META_STRING("enableEmulatorTraceOutput"), void>(); }
inline void Debug::startMethodTracing() { return call_static_method<SCAPIX_META_STRING("startMethodTracing"), void>(); }
inline void Debug::startMethodTracing(ref<java::lang::String> tracePath) { return call_static_method<SCAPIX_META_STRING("startMethodTracing"), void>(tracePath); }
inline void Debug::startMethodTracing(ref<java::lang::String> tracePath, jint bufferSize) { return call_static_method<SCAPIX_META_STRING("startMethodTracing"), void>(tracePath, bufferSize); }
inline void Debug::startMethodTracing(ref<java::lang::String> tracePath, jint bufferSize, jint flags) { return call_static_method<SCAPIX_META_STRING("startMethodTracing"), void>(tracePath, bufferSize, flags); }
inline void Debug::startMethodTracingSampling(ref<java::lang::String> tracePath, jint bufferSize, jint intervalUs) { return call_static_method<SCAPIX_META_STRING("startMethodTracingSampling"), void>(tracePath, bufferSize, intervalUs); }
inline void Debug::stopMethodTracing() { return call_static_method<SCAPIX_META_STRING("stopMethodTracing"), void>(); }
inline jlong Debug::threadCpuTimeNanos() { return call_static_method<SCAPIX_META_STRING("threadCpuTimeNanos"), jlong>(); }
inline void Debug::startAllocCounting() { return call_static_method<SCAPIX_META_STRING("startAllocCounting"), void>(); }
inline void Debug::stopAllocCounting() { return call_static_method<SCAPIX_META_STRING("stopAllocCounting"), void>(); }
inline jint Debug::getGlobalAllocCount() { return call_static_method<SCAPIX_META_STRING("getGlobalAllocCount"), jint>(); }
inline void Debug::resetGlobalAllocCount() { return call_static_method<SCAPIX_META_STRING("resetGlobalAllocCount"), void>(); }
inline jint Debug::getGlobalAllocSize() { return call_static_method<SCAPIX_META_STRING("getGlobalAllocSize"), jint>(); }
inline void Debug::resetGlobalAllocSize() { return call_static_method<SCAPIX_META_STRING("resetGlobalAllocSize"), void>(); }
inline jint Debug::getGlobalFreedCount() { return call_static_method<SCAPIX_META_STRING("getGlobalFreedCount"), jint>(); }
inline void Debug::resetGlobalFreedCount() { return call_static_method<SCAPIX_META_STRING("resetGlobalFreedCount"), void>(); }
inline jint Debug::getGlobalFreedSize() { return call_static_method<SCAPIX_META_STRING("getGlobalFreedSize"), jint>(); }
inline void Debug::resetGlobalFreedSize() { return call_static_method<SCAPIX_META_STRING("resetGlobalFreedSize"), void>(); }
inline jint Debug::getGlobalGcInvocationCount() { return call_static_method<SCAPIX_META_STRING("getGlobalGcInvocationCount"), jint>(); }
inline void Debug::resetGlobalGcInvocationCount() { return call_static_method<SCAPIX_META_STRING("resetGlobalGcInvocationCount"), void>(); }
inline jint Debug::getGlobalClassInitCount() { return call_static_method<SCAPIX_META_STRING("getGlobalClassInitCount"), jint>(); }
inline void Debug::resetGlobalClassInitCount() { return call_static_method<SCAPIX_META_STRING("resetGlobalClassInitCount"), void>(); }
inline jint Debug::getGlobalClassInitTime() { return call_static_method<SCAPIX_META_STRING("getGlobalClassInitTime"), jint>(); }
inline void Debug::resetGlobalClassInitTime() { return call_static_method<SCAPIX_META_STRING("resetGlobalClassInitTime"), void>(); }
inline jint Debug::getGlobalExternalAllocCount() { return call_static_method<SCAPIX_META_STRING("getGlobalExternalAllocCount"), jint>(); }
inline void Debug::resetGlobalExternalAllocSize() { return call_static_method<SCAPIX_META_STRING("resetGlobalExternalAllocSize"), void>(); }
inline void Debug::resetGlobalExternalAllocCount() { return call_static_method<SCAPIX_META_STRING("resetGlobalExternalAllocCount"), void>(); }
inline jint Debug::getGlobalExternalAllocSize() { return call_static_method<SCAPIX_META_STRING("getGlobalExternalAllocSize"), jint>(); }
inline jint Debug::getGlobalExternalFreedCount() { return call_static_method<SCAPIX_META_STRING("getGlobalExternalFreedCount"), jint>(); }
inline void Debug::resetGlobalExternalFreedCount() { return call_static_method<SCAPIX_META_STRING("resetGlobalExternalFreedCount"), void>(); }
inline jint Debug::getGlobalExternalFreedSize() { return call_static_method<SCAPIX_META_STRING("getGlobalExternalFreedSize"), jint>(); }
inline void Debug::resetGlobalExternalFreedSize() { return call_static_method<SCAPIX_META_STRING("resetGlobalExternalFreedSize"), void>(); }
inline jint Debug::getThreadAllocCount() { return call_static_method<SCAPIX_META_STRING("getThreadAllocCount"), jint>(); }
inline void Debug::resetThreadAllocCount() { return call_static_method<SCAPIX_META_STRING("resetThreadAllocCount"), void>(); }
inline jint Debug::getThreadAllocSize() { return call_static_method<SCAPIX_META_STRING("getThreadAllocSize"), jint>(); }
inline void Debug::resetThreadAllocSize() { return call_static_method<SCAPIX_META_STRING("resetThreadAllocSize"), void>(); }
inline jint Debug::getThreadExternalAllocCount() { return call_static_method<SCAPIX_META_STRING("getThreadExternalAllocCount"), jint>(); }
inline void Debug::resetThreadExternalAllocCount() { return call_static_method<SCAPIX_META_STRING("resetThreadExternalAllocCount"), void>(); }
inline jint Debug::getThreadExternalAllocSize() { return call_static_method<SCAPIX_META_STRING("getThreadExternalAllocSize"), jint>(); }
inline void Debug::resetThreadExternalAllocSize() { return call_static_method<SCAPIX_META_STRING("resetThreadExternalAllocSize"), void>(); }
inline jint Debug::getThreadGcInvocationCount() { return call_static_method<SCAPIX_META_STRING("getThreadGcInvocationCount"), jint>(); }
inline void Debug::resetThreadGcInvocationCount() { return call_static_method<SCAPIX_META_STRING("resetThreadGcInvocationCount"), void>(); }
inline void Debug::resetAllCounts() { return call_static_method<SCAPIX_META_STRING("resetAllCounts"), void>(); }
inline ref<java::lang::String> Debug::getRuntimeStat(ref<java::lang::String> statName) { return call_static_method<SCAPIX_META_STRING("getRuntimeStat"), ref<java::lang::String>>(statName); }
inline ref<java::util::Map> Debug::getRuntimeStats() { return call_static_method<SCAPIX_META_STRING("getRuntimeStats"), ref<java::util::Map>>(); }
inline jlong Debug::getNativeHeapSize() { return call_static_method<SCAPIX_META_STRING("getNativeHeapSize"), jlong>(); }
inline jlong Debug::getNativeHeapAllocatedSize() { return call_static_method<SCAPIX_META_STRING("getNativeHeapAllocatedSize"), jlong>(); }
inline jlong Debug::getNativeHeapFreeSize() { return call_static_method<SCAPIX_META_STRING("getNativeHeapFreeSize"), jlong>(); }
inline void Debug::getMemoryInfo(ref<android::os::Debug_MemoryInfo> p1) { return call_static_method<SCAPIX_META_STRING("getMemoryInfo"), void>(p1); }
inline jlong Debug::getPss() { return call_static_method<SCAPIX_META_STRING("getPss"), jlong>(); }
inline jint Debug::setAllocationLimit(jint limit) { return call_static_method<SCAPIX_META_STRING("setAllocationLimit"), jint>(limit); }
inline jint Debug::setGlobalAllocationLimit(jint limit) { return call_static_method<SCAPIX_META_STRING("setGlobalAllocationLimit"), jint>(limit); }
inline void Debug::printLoadedClasses(jint flags) { return call_static_method<SCAPIX_META_STRING("printLoadedClasses"), void>(flags); }
inline jint Debug::getLoadedClassCount() { return call_static_method<SCAPIX_META_STRING("getLoadedClassCount"), jint>(); }
inline void Debug::dumpHprofData(ref<java::lang::String> fileName) { return call_static_method<SCAPIX_META_STRING("dumpHprofData"), void>(fileName); }
inline jint Debug::getBinderSentTransactions() { return call_static_method<SCAPIX_META_STRING("getBinderSentTransactions"), jint>(); }
inline jint Debug::getBinderReceivedTransactions() { return call_static_method<SCAPIX_META_STRING("getBinderReceivedTransactions"), jint>(); }
inline jint Debug::getBinderLocalObjectCount() { return call_static_method<SCAPIX_META_STRING("getBinderLocalObjectCount"), jint>(); }
inline jint Debug::getBinderProxyObjectCount() { return call_static_method<SCAPIX_META_STRING("getBinderProxyObjectCount"), jint>(); }
inline jint Debug::getBinderDeathObjectCount() { return call_static_method<SCAPIX_META_STRING("getBinderDeathObjectCount"), jint>(); }
inline jboolean Debug::dumpService(ref<java::lang::String> name, ref<java::io::FileDescriptor> fd, ref<link::java::array<java::lang::String>> args) { return call_static_method<SCAPIX_META_STRING("dumpService"), jboolean>(name, fd, args); }
inline void Debug::attachJvmtiAgent(ref<java::lang::String> library, ref<java::lang::String> options, ref<java::lang::ClassLoader> classLoader) { return call_static_method<SCAPIX_META_STRING("attachJvmtiAgent"), void>(library, options, classLoader); }

} // namespace android::os
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OS_DEBUG_H
