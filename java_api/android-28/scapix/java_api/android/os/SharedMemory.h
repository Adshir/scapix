// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_ANDROID_OS_SHAREDMEMORY_H
#define SCAPIX_ANDROID_OS_SHAREDMEMORY_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }
namespace java::nio { class ByteBuffer; }

namespace android::os {

class SharedMemory : public object_base<SCAPIX_META_STRING("android/os/SharedMemory"),
	java::lang::Object,
	android::os::Parcelable,
	java::io::Closeable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();

	static ref<android::os::SharedMemory> create(ref<java::lang::String> name, jint size);
	jboolean setProtect(jint prot);
	jint getSize();
	ref<java::nio::ByteBuffer> mapReadWrite();
	ref<java::nio::ByteBuffer> mapReadOnly();
	ref<java::nio::ByteBuffer> map(jint prot, jint offset, jint length);
	static void unmap(ref<java::nio::ByteBuffer> buffer);
	void close();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);

protected:

	SharedMemory(handle_type h) : base_(h) {}

};

} // namespace android::os
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>

namespace scapix::java_api {
namespace android::os {

inline ref<android::os::Parcelable_Creator> SharedMemory::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<android::os::SharedMemory> SharedMemory::create(ref<java::lang::String> name, jint size) { return call_static_method<SCAPIX_META_STRING("create"), ref<android::os::SharedMemory>>(name, size); }
inline jboolean SharedMemory::setProtect(jint prot) { return call_method<SCAPIX_META_STRING("setProtect"), jboolean>(prot); }
inline jint SharedMemory::getSize() { return call_method<SCAPIX_META_STRING("getSize"), jint>(); }
inline ref<java::nio::ByteBuffer> SharedMemory::mapReadWrite() { return call_method<SCAPIX_META_STRING("mapReadWrite"), ref<java::nio::ByteBuffer>>(); }
inline ref<java::nio::ByteBuffer> SharedMemory::mapReadOnly() { return call_method<SCAPIX_META_STRING("mapReadOnly"), ref<java::nio::ByteBuffer>>(); }
inline ref<java::nio::ByteBuffer> SharedMemory::map(jint prot, jint offset, jint length) { return call_method<SCAPIX_META_STRING("map"), ref<java::nio::ByteBuffer>>(prot, offset, length); }
inline void SharedMemory::unmap(ref<java::nio::ByteBuffer> buffer) { return call_static_method<SCAPIX_META_STRING("unmap"), void>(buffer); }
inline void SharedMemory::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jint SharedMemory::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void SharedMemory::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }

} // namespace android::os
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OS_SHAREDMEMORY_H
