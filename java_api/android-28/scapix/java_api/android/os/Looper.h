// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_OS_LOOPER_H
#define SCAPIX_ANDROID_OS_LOOPER_H

namespace scapix::java_api {

namespace android::os { class MessageQueue; }
namespace android::util { class Printer; }
namespace java::lang { class String; }
namespace java::lang { class Thread; }

namespace android::os {

class Looper : public object_base<SCAPIX_META_STRING("android/os/Looper"),
	java::lang::Object>
{
public:

	static void prepare();
	static void prepareMainLooper();
	static ref<android::os::Looper> getMainLooper();
	static void loop();
	static ref<android::os::Looper> myLooper();
	static ref<android::os::MessageQueue> myQueue();
	jboolean isCurrentThread();
	void setMessageLogging(ref<android::util::Printer> printer);
	void quit();
	void quitSafely();
	ref<java::lang::Thread> getThread();
	ref<android::os::MessageQueue> getQueue();
	void dump(ref<android::util::Printer> pw, ref<java::lang::String> prefix);
	ref<java::lang::String> toString();

protected:

	Looper(handle_type h) : base_(h) {}

};

} // namespace android::os
} // namespace scapix::java_api

#include <scapix/java_api/android/os/MessageQueue.h>
#include <scapix/java_api/android/util/Printer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>

namespace scapix::java_api {
namespace android::os {

inline void Looper::prepare() { return call_static_method<SCAPIX_META_STRING("prepare"), void>(); }
inline void Looper::prepareMainLooper() { return call_static_method<SCAPIX_META_STRING("prepareMainLooper"), void>(); }
inline ref<android::os::Looper> Looper::getMainLooper() { return call_static_method<SCAPIX_META_STRING("getMainLooper"), ref<android::os::Looper>>(); }
inline void Looper::loop() { return call_static_method<SCAPIX_META_STRING("loop"), void>(); }
inline ref<android::os::Looper> Looper::myLooper() { return call_static_method<SCAPIX_META_STRING("myLooper"), ref<android::os::Looper>>(); }
inline ref<android::os::MessageQueue> Looper::myQueue() { return call_static_method<SCAPIX_META_STRING("myQueue"), ref<android::os::MessageQueue>>(); }
inline jboolean Looper::isCurrentThread() { return call_method<SCAPIX_META_STRING("isCurrentThread"), jboolean>(); }
inline void Looper::setMessageLogging(ref<android::util::Printer> printer) { return call_method<SCAPIX_META_STRING("setMessageLogging"), void>(printer); }
inline void Looper::quit() { return call_method<SCAPIX_META_STRING("quit"), void>(); }
inline void Looper::quitSafely() { return call_method<SCAPIX_META_STRING("quitSafely"), void>(); }
inline ref<java::lang::Thread> Looper::getThread() { return call_method<SCAPIX_META_STRING("getThread"), ref<java::lang::Thread>>(); }
inline ref<android::os::MessageQueue> Looper::getQueue() { return call_method<SCAPIX_META_STRING("getQueue"), ref<android::os::MessageQueue>>(); }
inline void Looper::dump(ref<android::util::Printer> pw, ref<java::lang::String> prefix) { return call_method<SCAPIX_META_STRING("dump"), void>(pw, prefix); }
inline ref<java::lang::String> Looper::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::os
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OS_LOOPER_H
