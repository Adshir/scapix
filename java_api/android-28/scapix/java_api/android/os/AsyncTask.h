// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_OS_ASYNCTASK_H
#define SCAPIX_ANDROID_OS_ASYNCTASK_H

namespace scapix::java_api {

namespace android::os { class AsyncTask_Status; }
namespace java::lang { class Runnable; }
namespace java::util::concurrent { class Executor; }
namespace java::util::concurrent { class TimeUnit; }

namespace android::os {

class AsyncTask : public object_base<SCAPIX_META_STRING("android/os/AsyncTask"),
	java::lang::Object>
{
public:

	using Status = AsyncTask_Status;

	static ref<java::util::concurrent::Executor> SERIAL_EXECUTOR_();
	static ref<java::util::concurrent::Executor> THREAD_POOL_EXECUTOR_();

	static ref<AsyncTask> new_object();
	ref<android::os::AsyncTask_Status> getStatus();
	jboolean isCancelled();
	jboolean cancel(jboolean mayInterruptIfRunning);
	ref<java::lang::Object> get();
	ref<java::lang::Object> get(jlong timeout, ref<java::util::concurrent::TimeUnit> p2);
	ref<android::os::AsyncTask> execute(ref<link::java::array<java::lang::Object>> params);
	ref<android::os::AsyncTask> executeOnExecutor(ref<java::util::concurrent::Executor> exec, ref<link::java::array<java::lang::Object>> params);
	static void execute(ref<java::lang::Runnable> runnable);

protected:

	AsyncTask(handle_type h) : base_(h) {}

};

} // namespace android::os
} // namespace scapix::java_api

#include <scapix/java_api/android/os/AsyncTask_Status.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>

namespace scapix::java_api {
namespace android::os {

inline ref<java::util::concurrent::Executor> AsyncTask::SERIAL_EXECUTOR_() { return get_static_field<SCAPIX_META_STRING("SERIAL_EXECUTOR"), ref<java::util::concurrent::Executor>>(); }
inline ref<java::util::concurrent::Executor> AsyncTask::THREAD_POOL_EXECUTOR_() { return get_static_field<SCAPIX_META_STRING("THREAD_POOL_EXECUTOR"), ref<java::util::concurrent::Executor>>(); }
inline ref<AsyncTask> AsyncTask::new_object() { return base_::new_object(); }
inline ref<android::os::AsyncTask_Status> AsyncTask::getStatus() { return call_method<SCAPIX_META_STRING("getStatus"), ref<android::os::AsyncTask_Status>>(); }
inline jboolean AsyncTask::isCancelled() { return call_method<SCAPIX_META_STRING("isCancelled"), jboolean>(); }
inline jboolean AsyncTask::cancel(jboolean mayInterruptIfRunning) { return call_method<SCAPIX_META_STRING("cancel"), jboolean>(mayInterruptIfRunning); }
inline ref<java::lang::Object> AsyncTask::get() { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> AsyncTask::get(jlong timeout, ref<java::util::concurrent::TimeUnit> p2) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(timeout, p2); }
inline ref<android::os::AsyncTask> AsyncTask::execute(ref<link::java::array<java::lang::Object>> params) { return call_method<SCAPIX_META_STRING("execute"), ref<android::os::AsyncTask>>(params); }
inline ref<android::os::AsyncTask> AsyncTask::executeOnExecutor(ref<java::util::concurrent::Executor> exec, ref<link::java::array<java::lang::Object>> params) { return call_method<SCAPIX_META_STRING("executeOnExecutor"), ref<android::os::AsyncTask>>(exec, params); }
inline void AsyncTask::execute(ref<java::lang::Runnable> runnable) { return call_static_method<SCAPIX_META_STRING("execute"), void>(runnable); }

} // namespace android::os
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OS_ASYNCTASK_H
