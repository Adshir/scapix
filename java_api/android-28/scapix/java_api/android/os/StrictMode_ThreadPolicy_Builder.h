// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_OS_STRICTMODE_THREADPOLICY_BUILDER_H
#define SCAPIX_ANDROID_OS_STRICTMODE_THREADPOLICY_BUILDER_H

namespace scapix::java_api {

namespace android::os { class StrictMode_OnThreadViolationListener; }
namespace android::os { class StrictMode_ThreadPolicy; }
namespace java::util::concurrent { class Executor; }

namespace android::os {

class StrictMode_ThreadPolicy_Builder : public object_base<SCAPIX_META_STRING("android/os/StrictMode$ThreadPolicy$Builder"),
	java::lang::Object>
{
public:

	static ref<StrictMode_ThreadPolicy_Builder> new_object();
	static ref<StrictMode_ThreadPolicy_Builder> new_object(ref<android::os::StrictMode_ThreadPolicy> policy);
	ref<android::os::StrictMode_ThreadPolicy_Builder> detectAll();
	ref<android::os::StrictMode_ThreadPolicy_Builder> permitAll();
	ref<android::os::StrictMode_ThreadPolicy_Builder> detectNetwork();
	ref<android::os::StrictMode_ThreadPolicy_Builder> permitNetwork();
	ref<android::os::StrictMode_ThreadPolicy_Builder> detectDiskReads();
	ref<android::os::StrictMode_ThreadPolicy_Builder> permitDiskReads();
	ref<android::os::StrictMode_ThreadPolicy_Builder> detectCustomSlowCalls();
	ref<android::os::StrictMode_ThreadPolicy_Builder> permitCustomSlowCalls();
	ref<android::os::StrictMode_ThreadPolicy_Builder> permitResourceMismatches();
	ref<android::os::StrictMode_ThreadPolicy_Builder> detectUnbufferedIo();
	ref<android::os::StrictMode_ThreadPolicy_Builder> permitUnbufferedIo();
	ref<android::os::StrictMode_ThreadPolicy_Builder> detectResourceMismatches();
	ref<android::os::StrictMode_ThreadPolicy_Builder> detectDiskWrites();
	ref<android::os::StrictMode_ThreadPolicy_Builder> permitDiskWrites();
	ref<android::os::StrictMode_ThreadPolicy_Builder> penaltyDialog();
	ref<android::os::StrictMode_ThreadPolicy_Builder> penaltyDeath();
	ref<android::os::StrictMode_ThreadPolicy_Builder> penaltyDeathOnNetwork();
	ref<android::os::StrictMode_ThreadPolicy_Builder> penaltyFlashScreen();
	ref<android::os::StrictMode_ThreadPolicy_Builder> penaltyLog();
	ref<android::os::StrictMode_ThreadPolicy_Builder> penaltyDropBox();
	ref<android::os::StrictMode_ThreadPolicy_Builder> penaltyListener(ref<java::util::concurrent::Executor> executor, ref<android::os::StrictMode_OnThreadViolationListener> listener);
	ref<android::os::StrictMode_ThreadPolicy> build();

protected:

	StrictMode_ThreadPolicy_Builder(handle_type h) : base_(h) {}

};

} // namespace android::os
} // namespace scapix::java_api

#include <scapix/java_api/android/os/StrictMode_OnThreadViolationListener.h>
#include <scapix/java_api/android/os/StrictMode_ThreadPolicy.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>

namespace scapix::java_api {
namespace android::os {

inline ref<StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::new_object() { return base_::new_object(); }
inline ref<StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::new_object(ref<android::os::StrictMode_ThreadPolicy> policy) { return base_::new_object(policy); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::detectAll() { return call_method<SCAPIX_META_STRING("detectAll"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::permitAll() { return call_method<SCAPIX_META_STRING("permitAll"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::detectNetwork() { return call_method<SCAPIX_META_STRING("detectNetwork"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::permitNetwork() { return call_method<SCAPIX_META_STRING("permitNetwork"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::detectDiskReads() { return call_method<SCAPIX_META_STRING("detectDiskReads"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::permitDiskReads() { return call_method<SCAPIX_META_STRING("permitDiskReads"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::detectCustomSlowCalls() { return call_method<SCAPIX_META_STRING("detectCustomSlowCalls"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::permitCustomSlowCalls() { return call_method<SCAPIX_META_STRING("permitCustomSlowCalls"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::permitResourceMismatches() { return call_method<SCAPIX_META_STRING("permitResourceMismatches"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::detectUnbufferedIo() { return call_method<SCAPIX_META_STRING("detectUnbufferedIo"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::permitUnbufferedIo() { return call_method<SCAPIX_META_STRING("permitUnbufferedIo"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::detectResourceMismatches() { return call_method<SCAPIX_META_STRING("detectResourceMismatches"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::detectDiskWrites() { return call_method<SCAPIX_META_STRING("detectDiskWrites"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::permitDiskWrites() { return call_method<SCAPIX_META_STRING("permitDiskWrites"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::penaltyDialog() { return call_method<SCAPIX_META_STRING("penaltyDialog"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::penaltyDeath() { return call_method<SCAPIX_META_STRING("penaltyDeath"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::penaltyDeathOnNetwork() { return call_method<SCAPIX_META_STRING("penaltyDeathOnNetwork"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::penaltyFlashScreen() { return call_method<SCAPIX_META_STRING("penaltyFlashScreen"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::penaltyLog() { return call_method<SCAPIX_META_STRING("penaltyLog"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::penaltyDropBox() { return call_method<SCAPIX_META_STRING("penaltyDropBox"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
inline ref<android::os::StrictMode_ThreadPolicy_Builder> StrictMode_ThreadPolicy_Builder::penaltyListener(ref<java::util::concurrent::Executor> executor, ref<android::os::StrictMode_OnThreadViolationListener> listener) { return call_method<SCAPIX_META_STRING("penaltyListener"), ref<android::os::StrictMode_ThreadPolicy_Builder>>(executor, listener); }
inline ref<android::os::StrictMode_ThreadPolicy> StrictMode_ThreadPolicy_Builder::build() { return call_method<SCAPIX_META_STRING("build"), ref<android::os::StrictMode_ThreadPolicy>>(); }

} // namespace android::os
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OS_STRICTMODE_THREADPOLICY_BUILDER_H
