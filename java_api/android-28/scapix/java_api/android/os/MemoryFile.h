// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_OS_MEMORYFILE_H
#define SCAPIX_ANDROID_OS_MEMORYFILE_H

namespace scapix::java_api {

namespace java::io { class InputStream; }
namespace java::io { class OutputStream; }
namespace java::lang { class String; }

namespace android::os {

class MemoryFile : public object_base<SCAPIX_META_STRING("android/os/MemoryFile"),
	java::lang::Object>
{
public:

	static ref<MemoryFile> new_object(ref<java::lang::String> name, jint length);
	void close();
	jint length();
	jboolean isPurgingAllowed();
	jboolean allowPurging(jboolean allowPurging);
	ref<java::io::InputStream> getInputStream();
	ref<java::io::OutputStream> getOutputStream();
	jint readBytes(ref<link::java::array<jbyte>> buffer, jint srcOffset, jint destOffset, jint count);
	void writeBytes(ref<link::java::array<jbyte>> buffer, jint srcOffset, jint destOffset, jint count);

protected:

	MemoryFile(handle_type h) : base_(h) {}

};

} // namespace android::os
} // namespace scapix::java_api

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::os {

inline ref<MemoryFile> MemoryFile::new_object(ref<java::lang::String> name, jint length) { return base_::new_object(name, length); }
inline void MemoryFile::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jint MemoryFile::length() { return call_method<SCAPIX_META_STRING("length"), jint>(); }
inline jboolean MemoryFile::isPurgingAllowed() { return call_method<SCAPIX_META_STRING("isPurgingAllowed"), jboolean>(); }
inline jboolean MemoryFile::allowPurging(jboolean allowPurging) { return call_method<SCAPIX_META_STRING("allowPurging"), jboolean>(allowPurging); }
inline ref<java::io::InputStream> MemoryFile::getInputStream() { return call_method<SCAPIX_META_STRING("getInputStream"), ref<java::io::InputStream>>(); }
inline ref<java::io::OutputStream> MemoryFile::getOutputStream() { return call_method<SCAPIX_META_STRING("getOutputStream"), ref<java::io::OutputStream>>(); }
inline jint MemoryFile::readBytes(ref<link::java::array<jbyte>> buffer, jint srcOffset, jint destOffset, jint count) { return call_method<SCAPIX_META_STRING("readBytes"), jint>(buffer, srcOffset, destOffset, count); }
inline void MemoryFile::writeBytes(ref<link::java::array<jbyte>> buffer, jint srcOffset, jint destOffset, jint count) { return call_method<SCAPIX_META_STRING("writeBytes"), void>(buffer, srcOffset, destOffset, count); }

} // namespace android::os
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OS_MEMORYFILE_H
