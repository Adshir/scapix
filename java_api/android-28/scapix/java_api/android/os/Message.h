// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_OS_MESSAGE_H
#define SCAPIX_ANDROID_OS_MESSAGE_H

namespace scapix::java_api {

namespace android::os { class Bundle; }
namespace android::os { class Handler; }
namespace android::os { class Messenger; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class Runnable; }
namespace java::lang { class String; }

namespace android::os {

class Message : public object_base<SCAPIX_META_STRING("android/os/Message"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	jint arg1();
	void arg1(jint);
	jint arg2();
	void arg2(jint);
	ref<java::lang::Object> obj();
	void obj(ref<java::lang::Object>);
	ref<android::os::Messenger> replyTo();
	void replyTo(ref<android::os::Messenger>);
	jint sendingUid();
	void sendingUid(jint);
	jint what();
	void what(jint);

	static ref<Message> new_object();
	static ref<android::os::Message> obtain();
	static ref<android::os::Message> obtain(ref<android::os::Message> orig);
	static ref<android::os::Message> obtain(ref<android::os::Handler> h);
	static ref<android::os::Message> obtain(ref<android::os::Handler> h, ref<java::lang::Runnable> callback);
	static ref<android::os::Message> obtain(ref<android::os::Handler> h, jint what);
	static ref<android::os::Message> obtain(ref<android::os::Handler> h, jint what, ref<java::lang::Object> obj);
	static ref<android::os::Message> obtain(ref<android::os::Handler> h, jint what, jint arg1, jint arg2);
	static ref<android::os::Message> obtain(ref<android::os::Handler> h, jint what, jint arg1, jint arg2, ref<java::lang::Object> obj);
	void recycle();
	void copyFrom(ref<android::os::Message> o);
	jlong getWhen();
	void setTarget(ref<android::os::Handler> target);
	ref<android::os::Handler> getTarget();
	ref<java::lang::Runnable> getCallback();
	ref<android::os::Bundle> getData();
	ref<android::os::Bundle> peekData();
	void setData(ref<android::os::Bundle> data);
	void sendToTarget();
	jboolean isAsynchronous();
	void setAsynchronous(jboolean async);
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);

protected:

	Message(handle_type h) : base_(h) {}

};

} // namespace android::os
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/Messenger.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::os {

inline ref<android::os::Parcelable_Creator> Message::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint Message::arg1() { return get_field<SCAPIX_META_STRING("arg1"), jint>(); }
inline void Message::arg1(jint v) { set_field<SCAPIX_META_STRING("arg1"), jint>(v); }
inline jint Message::arg2() { return get_field<SCAPIX_META_STRING("arg2"), jint>(); }
inline void Message::arg2(jint v) { set_field<SCAPIX_META_STRING("arg2"), jint>(v); }
inline ref<java::lang::Object> Message::obj() { return get_field<SCAPIX_META_STRING("obj"), ref<java::lang::Object>>(); }
inline void Message::obj(ref<java::lang::Object> v) { set_field<SCAPIX_META_STRING("obj"), ref<java::lang::Object>>(v); }
inline ref<android::os::Messenger> Message::replyTo() { return get_field<SCAPIX_META_STRING("replyTo"), ref<android::os::Messenger>>(); }
inline void Message::replyTo(ref<android::os::Messenger> v) { set_field<SCAPIX_META_STRING("replyTo"), ref<android::os::Messenger>>(v); }
inline jint Message::sendingUid() { return get_field<SCAPIX_META_STRING("sendingUid"), jint>(); }
inline void Message::sendingUid(jint v) { set_field<SCAPIX_META_STRING("sendingUid"), jint>(v); }
inline jint Message::what() { return get_field<SCAPIX_META_STRING("what"), jint>(); }
inline void Message::what(jint v) { set_field<SCAPIX_META_STRING("what"), jint>(v); }
inline ref<Message> Message::new_object() { return base_::new_object(); }
inline ref<android::os::Message> Message::obtain() { return call_static_method<SCAPIX_META_STRING("obtain"), ref<android::os::Message>>(); }
inline ref<android::os::Message> Message::obtain(ref<android::os::Message> orig) { return call_static_method<SCAPIX_META_STRING("obtain"), ref<android::os::Message>>(orig); }
inline ref<android::os::Message> Message::obtain(ref<android::os::Handler> h) { return call_static_method<SCAPIX_META_STRING("obtain"), ref<android::os::Message>>(h); }
inline ref<android::os::Message> Message::obtain(ref<android::os::Handler> h, ref<java::lang::Runnable> callback) { return call_static_method<SCAPIX_META_STRING("obtain"), ref<android::os::Message>>(h, callback); }
inline ref<android::os::Message> Message::obtain(ref<android::os::Handler> h, jint what) { return call_static_method<SCAPIX_META_STRING("obtain"), ref<android::os::Message>>(h, what); }
inline ref<android::os::Message> Message::obtain(ref<android::os::Handler> h, jint what, ref<java::lang::Object> obj) { return call_static_method<SCAPIX_META_STRING("obtain"), ref<android::os::Message>>(h, what, obj); }
inline ref<android::os::Message> Message::obtain(ref<android::os::Handler> h, jint what, jint arg1, jint arg2) { return call_static_method<SCAPIX_META_STRING("obtain"), ref<android::os::Message>>(h, what, arg1, arg2); }
inline ref<android::os::Message> Message::obtain(ref<android::os::Handler> h, jint what, jint arg1, jint arg2, ref<java::lang::Object> obj) { return call_static_method<SCAPIX_META_STRING("obtain"), ref<android::os::Message>>(h, what, arg1, arg2, obj); }
inline void Message::recycle() { return call_method<SCAPIX_META_STRING("recycle"), void>(); }
inline void Message::copyFrom(ref<android::os::Message> o) { return call_method<SCAPIX_META_STRING("copyFrom"), void>(o); }
inline jlong Message::getWhen() { return call_method<SCAPIX_META_STRING("getWhen"), jlong>(); }
inline void Message::setTarget(ref<android::os::Handler> target) { return call_method<SCAPIX_META_STRING("setTarget"), void>(target); }
inline ref<android::os::Handler> Message::getTarget() { return call_method<SCAPIX_META_STRING("getTarget"), ref<android::os::Handler>>(); }
inline ref<java::lang::Runnable> Message::getCallback() { return call_method<SCAPIX_META_STRING("getCallback"), ref<java::lang::Runnable>>(); }
inline ref<android::os::Bundle> Message::getData() { return call_method<SCAPIX_META_STRING("getData"), ref<android::os::Bundle>>(); }
inline ref<android::os::Bundle> Message::peekData() { return call_method<SCAPIX_META_STRING("peekData"), ref<android::os::Bundle>>(); }
inline void Message::setData(ref<android::os::Bundle> data) { return call_method<SCAPIX_META_STRING("setData"), void>(data); }
inline void Message::sendToTarget() { return call_method<SCAPIX_META_STRING("sendToTarget"), void>(); }
inline jboolean Message::isAsynchronous() { return call_method<SCAPIX_META_STRING("isAsynchronous"), jboolean>(); }
inline void Message::setAsynchronous(jboolean async) { return call_method<SCAPIX_META_STRING("setAsynchronous"), void>(async); }
inline ref<java::lang::String> Message::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint Message::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void Message::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }

} // namespace android::os
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OS_MESSAGE_H
