// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_OS_STORAGE_STORAGEMANAGER_H
#define SCAPIX_ANDROID_OS_STORAGE_STORAGEMANAGER_H

namespace scapix::java_api {

namespace android::os { class Handler; }
namespace android::os { class ParcelFileDescriptor; }
namespace android::os { class ProxyFileDescriptorCallback; }
namespace android::os::storage { class OnObbStateChangeListener; }
namespace android::os::storage { class StorageVolume; }
namespace java::io { class File; }
namespace java::io { class FileDescriptor; }
namespace java::lang { class String; }
namespace java::util { class List; }
namespace java::util { class UUID; }

namespace android::os::storage {

class StorageManager : public object_base<SCAPIX_META_STRING("android/os/storage/StorageManager"),
	java::lang::Object>
{
public:

	static ref<java::lang::String> ACTION_MANAGE_STORAGE_();
	static ref<java::lang::String> EXTRA_REQUESTED_BYTES_();
	static ref<java::lang::String> EXTRA_UUID_();
	static ref<java::util::UUID> UUID_DEFAULT_();

	jboolean mountObb(ref<java::lang::String> rawPath, ref<java::lang::String> key, ref<android::os::storage::OnObbStateChangeListener> listener);
	jboolean unmountObb(ref<java::lang::String> rawPath, jboolean force, ref<android::os::storage::OnObbStateChangeListener> listener);
	jboolean isObbMounted(ref<java::lang::String> rawPath);
	ref<java::lang::String> getMountedObbPath(ref<java::lang::String> rawPath);
	ref<java::util::UUID> getUuidForPath(ref<java::io::File> path);
	jboolean isAllocationSupported(ref<java::io::FileDescriptor> fd);
	ref<android::os::storage::StorageVolume> getStorageVolume(ref<java::io::File> file);
	ref<java::util::List> getStorageVolumes();
	ref<android::os::storage::StorageVolume> getPrimaryStorageVolume();
	jboolean isEncrypted(ref<java::io::File> file);
	ref<android::os::ParcelFileDescriptor> openProxyFileDescriptor(jint mode, ref<android::os::ProxyFileDescriptorCallback> callback, ref<android::os::Handler> handler);
	jlong getCacheQuotaBytes(ref<java::util::UUID> storageUuid);
	jlong getCacheSizeBytes(ref<java::util::UUID> storageUuid);
	jlong getAllocatableBytes(ref<java::util::UUID> storageUuid);
	void allocateBytes(ref<java::util::UUID> storageUuid, jlong bytes);
	void allocateBytes(ref<java::io::FileDescriptor> fd, jlong bytes);
	void setCacheBehaviorGroup(ref<java::io::File> path, jboolean group);
	jboolean isCacheBehaviorGroup(ref<java::io::File> path);
	void setCacheBehaviorTombstone(ref<java::io::File> path, jboolean tombstone);
	jboolean isCacheBehaviorTombstone(ref<java::io::File> path);

protected:

	StorageManager(handle_type h) : base_(h) {}

};

} // namespace android::os::storage
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/android/os/ProxyFileDescriptorCallback.h>
#include <scapix/java_api/android/os/storage/OnObbStateChangeListener.h>
#include <scapix/java_api/android/os/storage/StorageVolume.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/UUID.h>

namespace scapix::java_api {
namespace android::os::storage {

inline ref<java::lang::String> StorageManager::ACTION_MANAGE_STORAGE_() { return get_static_field<SCAPIX_META_STRING("ACTION_MANAGE_STORAGE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> StorageManager::EXTRA_REQUESTED_BYTES_() { return get_static_field<SCAPIX_META_STRING("EXTRA_REQUESTED_BYTES"), ref<java::lang::String>>(); }
inline ref<java::lang::String> StorageManager::EXTRA_UUID_() { return get_static_field<SCAPIX_META_STRING("EXTRA_UUID"), ref<java::lang::String>>(); }
inline ref<java::util::UUID> StorageManager::UUID_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("UUID_DEFAULT"), ref<java::util::UUID>>(); }
inline jboolean StorageManager::mountObb(ref<java::lang::String> rawPath, ref<java::lang::String> key, ref<android::os::storage::OnObbStateChangeListener> listener) { return call_method<SCAPIX_META_STRING("mountObb"), jboolean>(rawPath, key, listener); }
inline jboolean StorageManager::unmountObb(ref<java::lang::String> rawPath, jboolean force, ref<android::os::storage::OnObbStateChangeListener> listener) { return call_method<SCAPIX_META_STRING("unmountObb"), jboolean>(rawPath, force, listener); }
inline jboolean StorageManager::isObbMounted(ref<java::lang::String> rawPath) { return call_method<SCAPIX_META_STRING("isObbMounted"), jboolean>(rawPath); }
inline ref<java::lang::String> StorageManager::getMountedObbPath(ref<java::lang::String> rawPath) { return call_method<SCAPIX_META_STRING("getMountedObbPath"), ref<java::lang::String>>(rawPath); }
inline ref<java::util::UUID> StorageManager::getUuidForPath(ref<java::io::File> path) { return call_method<SCAPIX_META_STRING("getUuidForPath"), ref<java::util::UUID>>(path); }
inline jboolean StorageManager::isAllocationSupported(ref<java::io::FileDescriptor> fd) { return call_method<SCAPIX_META_STRING("isAllocationSupported"), jboolean>(fd); }
inline ref<android::os::storage::StorageVolume> StorageManager::getStorageVolume(ref<java::io::File> file) { return call_method<SCAPIX_META_STRING("getStorageVolume"), ref<android::os::storage::StorageVolume>>(file); }
inline ref<java::util::List> StorageManager::getStorageVolumes() { return call_method<SCAPIX_META_STRING("getStorageVolumes"), ref<java::util::List>>(); }
inline ref<android::os::storage::StorageVolume> StorageManager::getPrimaryStorageVolume() { return call_method<SCAPIX_META_STRING("getPrimaryStorageVolume"), ref<android::os::storage::StorageVolume>>(); }
inline jboolean StorageManager::isEncrypted(ref<java::io::File> file) { return call_method<SCAPIX_META_STRING("isEncrypted"), jboolean>(file); }
inline ref<android::os::ParcelFileDescriptor> StorageManager::openProxyFileDescriptor(jint mode, ref<android::os::ProxyFileDescriptorCallback> callback, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("openProxyFileDescriptor"), ref<android::os::ParcelFileDescriptor>>(mode, callback, handler); }
inline jlong StorageManager::getCacheQuotaBytes(ref<java::util::UUID> storageUuid) { return call_method<SCAPIX_META_STRING("getCacheQuotaBytes"), jlong>(storageUuid); }
inline jlong StorageManager::getCacheSizeBytes(ref<java::util::UUID> storageUuid) { return call_method<SCAPIX_META_STRING("getCacheSizeBytes"), jlong>(storageUuid); }
inline jlong StorageManager::getAllocatableBytes(ref<java::util::UUID> storageUuid) { return call_method<SCAPIX_META_STRING("getAllocatableBytes"), jlong>(storageUuid); }
inline void StorageManager::allocateBytes(ref<java::util::UUID> storageUuid, jlong bytes) { return call_method<SCAPIX_META_STRING("allocateBytes"), void>(storageUuid, bytes); }
inline void StorageManager::allocateBytes(ref<java::io::FileDescriptor> fd, jlong bytes) { return call_method<SCAPIX_META_STRING("allocateBytes"), void>(fd, bytes); }
inline void StorageManager::setCacheBehaviorGroup(ref<java::io::File> path, jboolean group) { return call_method<SCAPIX_META_STRING("setCacheBehaviorGroup"), void>(path, group); }
inline jboolean StorageManager::isCacheBehaviorGroup(ref<java::io::File> path) { return call_method<SCAPIX_META_STRING("isCacheBehaviorGroup"), jboolean>(path); }
inline void StorageManager::setCacheBehaviorTombstone(ref<java::io::File> path, jboolean tombstone) { return call_method<SCAPIX_META_STRING("setCacheBehaviorTombstone"), void>(path, tombstone); }
inline jboolean StorageManager::isCacheBehaviorTombstone(ref<java::io::File> path) { return call_method<SCAPIX_META_STRING("isCacheBehaviorTombstone"), jboolean>(path); }

} // namespace android::os::storage
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OS_STORAGE_STORAGEMANAGER_H
