// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_OS_STORAGE_STORAGEVOLUME_H
#define SCAPIX_ANDROID_OS_STORAGE_STORAGEVOLUME_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content { class Intent; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::os::storage {

class StorageVolume : public object_base<SCAPIX_META_STRING("android/os/storage/StorageVolume"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static ref<java::lang::String> EXTRA_STORAGE_VOLUME_();

	ref<java::lang::String> getDescription(ref<android::content::Context> context);
	jboolean isPrimary();
	jboolean isRemovable();
	jboolean isEmulated();
	ref<java::lang::String> getUuid();
	ref<java::lang::String> getState();
	ref<android::content::Intent> createAccessIntent(ref<java::lang::String> directoryName);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> parcel, jint flags);

protected:

	StorageVolume(handle_type h) : base_(h) {}

};

} // namespace android::os::storage
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::os::storage {

inline ref<android::os::Parcelable_Creator> StorageVolume::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<java::lang::String> StorageVolume::EXTRA_STORAGE_VOLUME_() { return get_static_field<SCAPIX_META_STRING("EXTRA_STORAGE_VOLUME"), ref<java::lang::String>>(); }
inline ref<java::lang::String> StorageVolume::getDescription(ref<android::content::Context> context) { return call_method<SCAPIX_META_STRING("getDescription"), ref<java::lang::String>>(context); }
inline jboolean StorageVolume::isPrimary() { return call_method<SCAPIX_META_STRING("isPrimary"), jboolean>(); }
inline jboolean StorageVolume::isRemovable() { return call_method<SCAPIX_META_STRING("isRemovable"), jboolean>(); }
inline jboolean StorageVolume::isEmulated() { return call_method<SCAPIX_META_STRING("isEmulated"), jboolean>(); }
inline ref<java::lang::String> StorageVolume::getUuid() { return call_method<SCAPIX_META_STRING("getUuid"), ref<java::lang::String>>(); }
inline ref<java::lang::String> StorageVolume::getState() { return call_method<SCAPIX_META_STRING("getState"), ref<java::lang::String>>(); }
inline ref<android::content::Intent> StorageVolume::createAccessIntent(ref<java::lang::String> directoryName) { return call_method<SCAPIX_META_STRING("createAccessIntent"), ref<android::content::Intent>>(directoryName); }
inline jboolean StorageVolume::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint StorageVolume::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> StorageVolume::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint StorageVolume::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void StorageVolume::writeToParcel(ref<android::os::Parcel> parcel, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(parcel, flags); }

} // namespace android::os::storage
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OS_STORAGE_STORAGEVOLUME_H
