// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_ANDROID_UTIL_SPARSEARRAY_H
#define SCAPIX_ANDROID_UTIL_SPARSEARRAY_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace android::util {

class SparseArray : public object_base<SCAPIX_META_STRING("android/util/SparseArray"),
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static ref<SparseArray> new_object();
	static ref<SparseArray> new_object(jint initialCapacity);
	ref<android::util::SparseArray> clone();
	ref<java::lang::Object> get(jint key);
	ref<java::lang::Object> get(jint key, ref<java::lang::Object> valueIfKeyNotFound);
	void delete_(jint key);
	void remove(jint key);
	void removeAt(jint index);
	void removeAtRange(jint index, jint size);
	void put(jint key, ref<java::lang::Object> value);
	jint size();
	jint keyAt(jint index);
	ref<java::lang::Object> valueAt(jint index);
	void setValueAt(jint index, ref<java::lang::Object> value);
	jint indexOfKey(jint key);
	jint indexOfValue(ref<java::lang::Object> value);
	void clear();
	void append(jint key, ref<java::lang::Object> value);
	ref<java::lang::String> toString();

protected:

	SparseArray(handle_type h) : base_(h) {}

};

} // namespace android::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::util {

inline ref<SparseArray> SparseArray::new_object() { return base_::new_object(); }
inline ref<SparseArray> SparseArray::new_object(jint initialCapacity) { return base_::new_object(initialCapacity); }
inline ref<android::util::SparseArray> SparseArray::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<android::util::SparseArray>>(); }
inline ref<java::lang::Object> SparseArray::get(jint key) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(key); }
inline ref<java::lang::Object> SparseArray::get(jint key, ref<java::lang::Object> valueIfKeyNotFound) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(key, valueIfKeyNotFound); }
inline void SparseArray::delete_(jint key) { return call_method<SCAPIX_META_STRING("delete"), void>(key); }
inline void SparseArray::remove(jint key) { return call_method<SCAPIX_META_STRING("remove"), void>(key); }
inline void SparseArray::removeAt(jint index) { return call_method<SCAPIX_META_STRING("removeAt"), void>(index); }
inline void SparseArray::removeAtRange(jint index, jint size) { return call_method<SCAPIX_META_STRING("removeAtRange"), void>(index, size); }
inline void SparseArray::put(jint key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("put"), void>(key, value); }
inline jint SparseArray::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jint SparseArray::keyAt(jint index) { return call_method<SCAPIX_META_STRING("keyAt"), jint>(index); }
inline ref<java::lang::Object> SparseArray::valueAt(jint index) { return call_method<SCAPIX_META_STRING("valueAt"), ref<java::lang::Object>>(index); }
inline void SparseArray::setValueAt(jint index, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("setValueAt"), void>(index, value); }
inline jint SparseArray::indexOfKey(jint key) { return call_method<SCAPIX_META_STRING("indexOfKey"), jint>(key); }
inline jint SparseArray::indexOfValue(ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("indexOfValue"), jint>(value); }
inline void SparseArray::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline void SparseArray::append(jint key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("append"), void>(key, value); }
inline ref<java::lang::String> SparseArray::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::util
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_UTIL_SPARSEARRAY_H
