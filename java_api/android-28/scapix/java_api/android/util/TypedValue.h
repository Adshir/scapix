// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_UTIL_TYPEDVALUE_H
#define SCAPIX_ANDROID_UTIL_TYPEDVALUE_H

namespace scapix::java_api {

namespace android::util { class DisplayMetrics; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::util {

class TypedValue : public object_base<SCAPIX_META_STRING("android/util/TypedValue"),
	java::lang::Object>
{
public:

	static jint COMPLEX_MANTISSA_MASK_();
	static jint COMPLEX_MANTISSA_SHIFT_();
	static jint COMPLEX_RADIX_0p23();
	static jint COMPLEX_RADIX_16p7();
	static jint COMPLEX_RADIX_23p0();
	static jint COMPLEX_RADIX_8p15();
	static jint COMPLEX_RADIX_MASK_();
	static jint COMPLEX_RADIX_SHIFT_();
	static jint COMPLEX_UNIT_DIP_();
	static jint COMPLEX_UNIT_FRACTION_();
	static jint COMPLEX_UNIT_FRACTION_PARENT_();
	static jint COMPLEX_UNIT_IN_();
	static jint COMPLEX_UNIT_MASK_();
	static jint COMPLEX_UNIT_MM_();
	static jint COMPLEX_UNIT_PT_();
	static jint COMPLEX_UNIT_PX_();
	static jint COMPLEX_UNIT_SHIFT_();
	static jint COMPLEX_UNIT_SP_();
	static jint DATA_NULL_EMPTY_();
	static jint DATA_NULL_UNDEFINED_();
	static jint DENSITY_DEFAULT_();
	static jint DENSITY_NONE_();
	static jint TYPE_ATTRIBUTE_();
	static jint TYPE_DIMENSION_();
	static jint TYPE_FIRST_COLOR_INT_();
	static jint TYPE_FIRST_INT_();
	static jint TYPE_FLOAT_();
	static jint TYPE_FRACTION_();
	static jint TYPE_INT_BOOLEAN_();
	static jint TYPE_INT_COLOR_ARGB4_();
	static jint TYPE_INT_COLOR_ARGB8_();
	static jint TYPE_INT_COLOR_RGB4_();
	static jint TYPE_INT_COLOR_RGB8_();
	static jint TYPE_INT_DEC_();
	static jint TYPE_INT_HEX_();
	static jint TYPE_LAST_COLOR_INT_();
	static jint TYPE_LAST_INT_();
	static jint TYPE_NULL_();
	static jint TYPE_REFERENCE_();
	static jint TYPE_STRING_();
	jint assetCookie();
	void assetCookie(jint);
	jint changingConfigurations();
	void changingConfigurations(jint);
	jint data();
	void data(jint);
	jint density();
	void density(jint);
	jint resourceId();
	void resourceId(jint);
	ref<java::lang::CharSequence> string();
	void string(ref<java::lang::CharSequence>);
	jint type();
	void type(jint);

	static ref<TypedValue> new_object();
	jfloat getFloat();
	static jfloat complexToFloat(jint complex);
	static jfloat complexToDimension(jint data, ref<android::util::DisplayMetrics> metrics);
	static jint complexToDimensionPixelOffset(jint data, ref<android::util::DisplayMetrics> metrics);
	static jint complexToDimensionPixelSize(jint data, ref<android::util::DisplayMetrics> metrics);
	jint getComplexUnit();
	static jfloat applyDimension(jint unit, jfloat value, ref<android::util::DisplayMetrics> metrics);
	jfloat getDimension(ref<android::util::DisplayMetrics> metrics);
	static jfloat complexToFraction(jint data, jfloat base, jfloat pbase);
	jfloat getFraction(jfloat base, jfloat pbase);
	ref<java::lang::CharSequence> coerceToString();
	static ref<java::lang::String> coerceToString(jint type, jint data);
	void setTo(ref<android::util::TypedValue> other);
	ref<java::lang::String> toString();

protected:

	TypedValue(handle_type h) : base_(h) {}

};

} // namespace android::util
} // namespace scapix::java_api

#include <scapix/java_api/android/util/DisplayMetrics.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::util {

inline jint TypedValue::COMPLEX_MANTISSA_MASK_() { return get_static_field<SCAPIX_META_STRING("COMPLEX_MANTISSA_MASK"), jint>(); }
inline jint TypedValue::COMPLEX_MANTISSA_SHIFT_() { return get_static_field<SCAPIX_META_STRING("COMPLEX_MANTISSA_SHIFT"), jint>(); }
inline jint TypedValue::COMPLEX_RADIX_0p23() { return get_static_field<SCAPIX_META_STRING("COMPLEX_RADIX_0p23"), jint>(); }
inline jint TypedValue::COMPLEX_RADIX_16p7() { return get_static_field<SCAPIX_META_STRING("COMPLEX_RADIX_16p7"), jint>(); }
inline jint TypedValue::COMPLEX_RADIX_23p0() { return get_static_field<SCAPIX_META_STRING("COMPLEX_RADIX_23p0"), jint>(); }
inline jint TypedValue::COMPLEX_RADIX_8p15() { return get_static_field<SCAPIX_META_STRING("COMPLEX_RADIX_8p15"), jint>(); }
inline jint TypedValue::COMPLEX_RADIX_MASK_() { return get_static_field<SCAPIX_META_STRING("COMPLEX_RADIX_MASK"), jint>(); }
inline jint TypedValue::COMPLEX_RADIX_SHIFT_() { return get_static_field<SCAPIX_META_STRING("COMPLEX_RADIX_SHIFT"), jint>(); }
inline jint TypedValue::COMPLEX_UNIT_DIP_() { return get_static_field<SCAPIX_META_STRING("COMPLEX_UNIT_DIP"), jint>(); }
inline jint TypedValue::COMPLEX_UNIT_FRACTION_() { return get_static_field<SCAPIX_META_STRING("COMPLEX_UNIT_FRACTION"), jint>(); }
inline jint TypedValue::COMPLEX_UNIT_FRACTION_PARENT_() { return get_static_field<SCAPIX_META_STRING("COMPLEX_UNIT_FRACTION_PARENT"), jint>(); }
inline jint TypedValue::COMPLEX_UNIT_IN_() { return get_static_field<SCAPIX_META_STRING("COMPLEX_UNIT_IN"), jint>(); }
inline jint TypedValue::COMPLEX_UNIT_MASK_() { return get_static_field<SCAPIX_META_STRING("COMPLEX_UNIT_MASK"), jint>(); }
inline jint TypedValue::COMPLEX_UNIT_MM_() { return get_static_field<SCAPIX_META_STRING("COMPLEX_UNIT_MM"), jint>(); }
inline jint TypedValue::COMPLEX_UNIT_PT_() { return get_static_field<SCAPIX_META_STRING("COMPLEX_UNIT_PT"), jint>(); }
inline jint TypedValue::COMPLEX_UNIT_PX_() { return get_static_field<SCAPIX_META_STRING("COMPLEX_UNIT_PX"), jint>(); }
inline jint TypedValue::COMPLEX_UNIT_SHIFT_() { return get_static_field<SCAPIX_META_STRING("COMPLEX_UNIT_SHIFT"), jint>(); }
inline jint TypedValue::COMPLEX_UNIT_SP_() { return get_static_field<SCAPIX_META_STRING("COMPLEX_UNIT_SP"), jint>(); }
inline jint TypedValue::DATA_NULL_EMPTY_() { return get_static_field<SCAPIX_META_STRING("DATA_NULL_EMPTY"), jint>(); }
inline jint TypedValue::DATA_NULL_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("DATA_NULL_UNDEFINED"), jint>(); }
inline jint TypedValue::DENSITY_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("DENSITY_DEFAULT"), jint>(); }
inline jint TypedValue::DENSITY_NONE_() { return get_static_field<SCAPIX_META_STRING("DENSITY_NONE"), jint>(); }
inline jint TypedValue::TYPE_ATTRIBUTE_() { return get_static_field<SCAPIX_META_STRING("TYPE_ATTRIBUTE"), jint>(); }
inline jint TypedValue::TYPE_DIMENSION_() { return get_static_field<SCAPIX_META_STRING("TYPE_DIMENSION"), jint>(); }
inline jint TypedValue::TYPE_FIRST_COLOR_INT_() { return get_static_field<SCAPIX_META_STRING("TYPE_FIRST_COLOR_INT"), jint>(); }
inline jint TypedValue::TYPE_FIRST_INT_() { return get_static_field<SCAPIX_META_STRING("TYPE_FIRST_INT"), jint>(); }
inline jint TypedValue::TYPE_FLOAT_() { return get_static_field<SCAPIX_META_STRING("TYPE_FLOAT"), jint>(); }
inline jint TypedValue::TYPE_FRACTION_() { return get_static_field<SCAPIX_META_STRING("TYPE_FRACTION"), jint>(); }
inline jint TypedValue::TYPE_INT_BOOLEAN_() { return get_static_field<SCAPIX_META_STRING("TYPE_INT_BOOLEAN"), jint>(); }
inline jint TypedValue::TYPE_INT_COLOR_ARGB4_() { return get_static_field<SCAPIX_META_STRING("TYPE_INT_COLOR_ARGB4"), jint>(); }
inline jint TypedValue::TYPE_INT_COLOR_ARGB8_() { return get_static_field<SCAPIX_META_STRING("TYPE_INT_COLOR_ARGB8"), jint>(); }
inline jint TypedValue::TYPE_INT_COLOR_RGB4_() { return get_static_field<SCAPIX_META_STRING("TYPE_INT_COLOR_RGB4"), jint>(); }
inline jint TypedValue::TYPE_INT_COLOR_RGB8_() { return get_static_field<SCAPIX_META_STRING("TYPE_INT_COLOR_RGB8"), jint>(); }
inline jint TypedValue::TYPE_INT_DEC_() { return get_static_field<SCAPIX_META_STRING("TYPE_INT_DEC"), jint>(); }
inline jint TypedValue::TYPE_INT_HEX_() { return get_static_field<SCAPIX_META_STRING("TYPE_INT_HEX"), jint>(); }
inline jint TypedValue::TYPE_LAST_COLOR_INT_() { return get_static_field<SCAPIX_META_STRING("TYPE_LAST_COLOR_INT"), jint>(); }
inline jint TypedValue::TYPE_LAST_INT_() { return get_static_field<SCAPIX_META_STRING("TYPE_LAST_INT"), jint>(); }
inline jint TypedValue::TYPE_NULL_() { return get_static_field<SCAPIX_META_STRING("TYPE_NULL"), jint>(); }
inline jint TypedValue::TYPE_REFERENCE_() { return get_static_field<SCAPIX_META_STRING("TYPE_REFERENCE"), jint>(); }
inline jint TypedValue::TYPE_STRING_() { return get_static_field<SCAPIX_META_STRING("TYPE_STRING"), jint>(); }
inline jint TypedValue::assetCookie() { return get_field<SCAPIX_META_STRING("assetCookie"), jint>(); }
inline void TypedValue::assetCookie(jint v) { set_field<SCAPIX_META_STRING("assetCookie"), jint>(v); }
inline jint TypedValue::changingConfigurations() { return get_field<SCAPIX_META_STRING("changingConfigurations"), jint>(); }
inline void TypedValue::changingConfigurations(jint v) { set_field<SCAPIX_META_STRING("changingConfigurations"), jint>(v); }
inline jint TypedValue::data() { return get_field<SCAPIX_META_STRING("data"), jint>(); }
inline void TypedValue::data(jint v) { set_field<SCAPIX_META_STRING("data"), jint>(v); }
inline jint TypedValue::density() { return get_field<SCAPIX_META_STRING("density"), jint>(); }
inline void TypedValue::density(jint v) { set_field<SCAPIX_META_STRING("density"), jint>(v); }
inline jint TypedValue::resourceId() { return get_field<SCAPIX_META_STRING("resourceId"), jint>(); }
inline void TypedValue::resourceId(jint v) { set_field<SCAPIX_META_STRING("resourceId"), jint>(v); }
inline ref<java::lang::CharSequence> TypedValue::string() { return get_field<SCAPIX_META_STRING("string"), ref<java::lang::CharSequence>>(); }
inline void TypedValue::string(ref<java::lang::CharSequence> v) { set_field<SCAPIX_META_STRING("string"), ref<java::lang::CharSequence>>(v); }
inline jint TypedValue::type() { return get_field<SCAPIX_META_STRING("type"), jint>(); }
inline void TypedValue::type(jint v) { set_field<SCAPIX_META_STRING("type"), jint>(v); }
inline ref<TypedValue> TypedValue::new_object() { return base_::new_object(); }
inline jfloat TypedValue::getFloat() { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(); }
inline jfloat TypedValue::complexToFloat(jint complex) { return call_static_method<SCAPIX_META_STRING("complexToFloat"), jfloat>(complex); }
inline jfloat TypedValue::complexToDimension(jint data, ref<android::util::DisplayMetrics> metrics) { return call_static_method<SCAPIX_META_STRING("complexToDimension"), jfloat>(data, metrics); }
inline jint TypedValue::complexToDimensionPixelOffset(jint data, ref<android::util::DisplayMetrics> metrics) { return call_static_method<SCAPIX_META_STRING("complexToDimensionPixelOffset"), jint>(data, metrics); }
inline jint TypedValue::complexToDimensionPixelSize(jint data, ref<android::util::DisplayMetrics> metrics) { return call_static_method<SCAPIX_META_STRING("complexToDimensionPixelSize"), jint>(data, metrics); }
inline jint TypedValue::getComplexUnit() { return call_method<SCAPIX_META_STRING("getComplexUnit"), jint>(); }
inline jfloat TypedValue::applyDimension(jint unit, jfloat value, ref<android::util::DisplayMetrics> metrics) { return call_static_method<SCAPIX_META_STRING("applyDimension"), jfloat>(unit, value, metrics); }
inline jfloat TypedValue::getDimension(ref<android::util::DisplayMetrics> metrics) { return call_method<SCAPIX_META_STRING("getDimension"), jfloat>(metrics); }
inline jfloat TypedValue::complexToFraction(jint data, jfloat base, jfloat pbase) { return call_static_method<SCAPIX_META_STRING("complexToFraction"), jfloat>(data, base, pbase); }
inline jfloat TypedValue::getFraction(jfloat base, jfloat pbase) { return call_method<SCAPIX_META_STRING("getFraction"), jfloat>(base, pbase); }
inline ref<java::lang::CharSequence> TypedValue::coerceToString() { return call_method<SCAPIX_META_STRING("coerceToString"), ref<java::lang::CharSequence>>(); }
inline ref<java::lang::String> TypedValue::coerceToString(jint type, jint data) { return call_static_method<SCAPIX_META_STRING("coerceToString"), ref<java::lang::String>>(type, data); }
inline void TypedValue::setTo(ref<android::util::TypedValue> other) { return call_method<SCAPIX_META_STRING("setTo"), void>(other); }
inline ref<java::lang::String> TypedValue::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::util
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_UTIL_TYPEDVALUE_H
