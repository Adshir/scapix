// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_ANDROID_UTIL_RATIONAL_H
#define SCAPIX_ANDROID_UTIL_RATIONAL_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }

namespace android::util {

class Rational : public object_base<SCAPIX_META_STRING("android/util/Rational"),
	java::lang::Number,
	java::lang::Comparable>
{
public:

	static ref<android::util::Rational> NEGATIVE_INFINITY_();
	static ref<android::util::Rational> NaN();
	static ref<android::util::Rational> POSITIVE_INFINITY_();
	static ref<android::util::Rational> ZERO_();

	static ref<Rational> new_object(jint numerator, jint denominator);
	jint getNumerator();
	jint getDenominator();
	jboolean isNaN();
	jboolean isInfinite();
	jboolean isFinite();
	jboolean isZero();
	jboolean equals(ref<java::lang::Object> obj);
	ref<java::lang::String> toString();
	jint hashCode();
	jdouble doubleValue();
	jfloat floatValue();
	jint intValue();
	jlong longValue();
	jshort shortValue();
	jint compareTo(ref<android::util::Rational> another);
	static ref<android::util::Rational> parseRational(ref<java::lang::String> string);

protected:

	Rational(handle_type h) : base_(h) {}

};

} // namespace android::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::util {

inline ref<android::util::Rational> Rational::NEGATIVE_INFINITY_() { return get_static_field<SCAPIX_META_STRING("NEGATIVE_INFINITY"), ref<android::util::Rational>>(); }
inline ref<android::util::Rational> Rational::NaN() { return get_static_field<SCAPIX_META_STRING("NaN"), ref<android::util::Rational>>(); }
inline ref<android::util::Rational> Rational::POSITIVE_INFINITY_() { return get_static_field<SCAPIX_META_STRING("POSITIVE_INFINITY"), ref<android::util::Rational>>(); }
inline ref<android::util::Rational> Rational::ZERO_() { return get_static_field<SCAPIX_META_STRING("ZERO"), ref<android::util::Rational>>(); }
inline ref<Rational> Rational::new_object(jint numerator, jint denominator) { return base_::new_object(numerator, denominator); }
inline jint Rational::getNumerator() { return call_method<SCAPIX_META_STRING("getNumerator"), jint>(); }
inline jint Rational::getDenominator() { return call_method<SCAPIX_META_STRING("getDenominator"), jint>(); }
inline jboolean Rational::isNaN() { return call_method<SCAPIX_META_STRING("isNaN"), jboolean>(); }
inline jboolean Rational::isInfinite() { return call_method<SCAPIX_META_STRING("isInfinite"), jboolean>(); }
inline jboolean Rational::isFinite() { return call_method<SCAPIX_META_STRING("isFinite"), jboolean>(); }
inline jboolean Rational::isZero() { return call_method<SCAPIX_META_STRING("isZero"), jboolean>(); }
inline jboolean Rational::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline ref<java::lang::String> Rational::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint Rational::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jdouble Rational::doubleValue() { return call_method<SCAPIX_META_STRING("doubleValue"), jdouble>(); }
inline jfloat Rational::floatValue() { return call_method<SCAPIX_META_STRING("floatValue"), jfloat>(); }
inline jint Rational::intValue() { return call_method<SCAPIX_META_STRING("intValue"), jint>(); }
inline jlong Rational::longValue() { return call_method<SCAPIX_META_STRING("longValue"), jlong>(); }
inline jshort Rational::shortValue() { return call_method<SCAPIX_META_STRING("shortValue"), jshort>(); }
inline jint Rational::compareTo(ref<android::util::Rational> another) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(another); }
inline ref<android::util::Rational> Rational::parseRational(ref<java::lang::String> string) { return call_static_method<SCAPIX_META_STRING("parseRational"), ref<android::util::Rational>>(string); }

} // namespace android::util
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_UTIL_RATIONAL_H
