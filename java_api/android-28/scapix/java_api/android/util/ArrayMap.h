// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Map.h>

#ifndef SCAPIX_ANDROID_UTIL_ARRAYMAP_H
#define SCAPIX_ANDROID_UTIL_ARRAYMAP_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util { class Collection; }
namespace java::util { class Set; }

namespace android::util {

class ArrayMap : public object_base<SCAPIX_META_STRING("android/util/ArrayMap"),
	java::lang::Object,
	java::util::Map>
{
public:

	static ref<ArrayMap> new_object();
	static ref<ArrayMap> new_object(jint capacity);
	static ref<ArrayMap> new_object(ref<android::util::ArrayMap> map);
	void clear();
	void ensureCapacity(jint minimumCapacity);
	jboolean containsKey(ref<java::lang::Object> key);
	jint indexOfKey(ref<java::lang::Object> key);
	jboolean containsValue(ref<java::lang::Object> value);
	ref<java::lang::Object> get(ref<java::lang::Object> key);
	ref<java::lang::Object> keyAt(jint index);
	ref<java::lang::Object> valueAt(jint index);
	ref<java::lang::Object> setValueAt(jint index, ref<java::lang::Object> value);
	jboolean isEmpty();
	ref<java::lang::Object> put(ref<java::lang::Object> key, ref<java::lang::Object> value);
	void putAll(ref<android::util::ArrayMap> array);
	ref<java::lang::Object> remove(ref<java::lang::Object> key);
	ref<java::lang::Object> removeAt(jint index);
	jint size();
	jboolean equals(ref<java::lang::Object> object);
	jint hashCode();
	ref<java::lang::String> toString();
	jboolean containsAll(ref<java::util::Collection> collection);
	void putAll(ref<java::util::Map> map);
	jboolean removeAll(ref<java::util::Collection> collection);
	jboolean retainAll(ref<java::util::Collection> collection);
	ref<java::util::Set> entrySet();
	ref<java::util::Set> keySet();
	ref<java::util::Collection> values();

protected:

	ArrayMap(handle_type h) : base_(h) {}

};

} // namespace android::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace android::util {

inline ref<ArrayMap> ArrayMap::new_object() { return base_::new_object(); }
inline ref<ArrayMap> ArrayMap::new_object(jint capacity) { return base_::new_object(capacity); }
inline ref<ArrayMap> ArrayMap::new_object(ref<android::util::ArrayMap> map) { return base_::new_object(map); }
inline void ArrayMap::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline void ArrayMap::ensureCapacity(jint minimumCapacity) { return call_method<SCAPIX_META_STRING("ensureCapacity"), void>(minimumCapacity); }
inline jboolean ArrayMap::containsKey(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("containsKey"), jboolean>(key); }
inline jint ArrayMap::indexOfKey(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("indexOfKey"), jint>(key); }
inline jboolean ArrayMap::containsValue(ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("containsValue"), jboolean>(value); }
inline ref<java::lang::Object> ArrayMap::get(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(key); }
inline ref<java::lang::Object> ArrayMap::keyAt(jint index) { return call_method<SCAPIX_META_STRING("keyAt"), ref<java::lang::Object>>(index); }
inline ref<java::lang::Object> ArrayMap::valueAt(jint index) { return call_method<SCAPIX_META_STRING("valueAt"), ref<java::lang::Object>>(index); }
inline ref<java::lang::Object> ArrayMap::setValueAt(jint index, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("setValueAt"), ref<java::lang::Object>>(index, value); }
inline jboolean ArrayMap::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline ref<java::lang::Object> ArrayMap::put(ref<java::lang::Object> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("put"), ref<java::lang::Object>>(key, value); }
inline void ArrayMap::putAll(ref<android::util::ArrayMap> array) { return call_method<SCAPIX_META_STRING("putAll"), void>(array); }
inline ref<java::lang::Object> ArrayMap::remove(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("remove"), ref<java::lang::Object>>(key); }
inline ref<java::lang::Object> ArrayMap::removeAt(jint index) { return call_method<SCAPIX_META_STRING("removeAt"), ref<java::lang::Object>>(index); }
inline jint ArrayMap::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jboolean ArrayMap::equals(ref<java::lang::Object> object) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(object); }
inline jint ArrayMap::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> ArrayMap::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean ArrayMap::containsAll(ref<java::util::Collection> collection) { return call_method<SCAPIX_META_STRING("containsAll"), jboolean>(collection); }
inline void ArrayMap::putAll(ref<java::util::Map> map) { return call_method<SCAPIX_META_STRING("putAll"), void>(map); }
inline jboolean ArrayMap::removeAll(ref<java::util::Collection> collection) { return call_method<SCAPIX_META_STRING("removeAll"), jboolean>(collection); }
inline jboolean ArrayMap::retainAll(ref<java::util::Collection> collection) { return call_method<SCAPIX_META_STRING("retainAll"), jboolean>(collection); }
inline ref<java::util::Set> ArrayMap::entrySet() { return call_method<SCAPIX_META_STRING("entrySet"), ref<java::util::Set>>(); }
inline ref<java::util::Set> ArrayMap::keySet() { return call_method<SCAPIX_META_STRING("keySet"), ref<java::util::Set>>(); }
inline ref<java::util::Collection> ArrayMap::values() { return call_method<SCAPIX_META_STRING("values"), ref<java::util::Collection>>(); }

} // namespace android::util
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_UTIL_ARRAYMAP_H
