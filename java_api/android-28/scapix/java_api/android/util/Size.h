// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_UTIL_SIZE_H
#define SCAPIX_ANDROID_UTIL_SIZE_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace android::util {

class Size : public object_base<SCAPIX_META_STRING("android/util/Size"),
	java::lang::Object>
{
public:

	static ref<Size> new_object(jint width, jint height);
	jint getWidth();
	jint getHeight();
	jboolean equals(ref<java::lang::Object> obj);
	ref<java::lang::String> toString();
	static ref<android::util::Size> parseSize(ref<java::lang::String> string);
	jint hashCode();

protected:

	Size(handle_type h) : base_(h) {}

};

} // namespace android::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::util {

inline ref<Size> Size::new_object(jint width, jint height) { return base_::new_object(width, height); }
inline jint Size::getWidth() { return call_method<SCAPIX_META_STRING("getWidth"), jint>(); }
inline jint Size::getHeight() { return call_method<SCAPIX_META_STRING("getHeight"), jint>(); }
inline jboolean Size::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline ref<java::lang::String> Size::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<android::util::Size> Size::parseSize(ref<java::lang::String> string) { return call_static_method<SCAPIX_META_STRING("parseSize"), ref<android::util::Size>>(string); }
inline jint Size::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }

} // namespace android::util
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_UTIL_SIZE_H
