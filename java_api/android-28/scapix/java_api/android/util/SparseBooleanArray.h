// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_ANDROID_UTIL_SPARSEBOOLEANARRAY_H
#define SCAPIX_ANDROID_UTIL_SPARSEBOOLEANARRAY_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace android::util {

class SparseBooleanArray : public object_base<SCAPIX_META_STRING("android/util/SparseBooleanArray"),
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static ref<SparseBooleanArray> new_object();
	static ref<SparseBooleanArray> new_object(jint initialCapacity);
	ref<android::util::SparseBooleanArray> clone();
	jboolean get(jint key);
	jboolean get(jint key, jboolean valueIfKeyNotFound);
	void delete_(jint key);
	void removeAt(jint index);
	void put(jint key, jboolean value);
	jint size();
	jint keyAt(jint index);
	jboolean valueAt(jint index);
	jint indexOfKey(jint key);
	jint indexOfValue(jboolean value);
	void clear();
	void append(jint key, jboolean value);
	jint hashCode();
	jboolean equals(ref<java::lang::Object> that);
	ref<java::lang::String> toString();

protected:

	SparseBooleanArray(handle_type h) : base_(h) {}

};

} // namespace android::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::util {

inline ref<SparseBooleanArray> SparseBooleanArray::new_object() { return base_::new_object(); }
inline ref<SparseBooleanArray> SparseBooleanArray::new_object(jint initialCapacity) { return base_::new_object(initialCapacity); }
inline ref<android::util::SparseBooleanArray> SparseBooleanArray::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<android::util::SparseBooleanArray>>(); }
inline jboolean SparseBooleanArray::get(jint key) { return call_method<SCAPIX_META_STRING("get"), jboolean>(key); }
inline jboolean SparseBooleanArray::get(jint key, jboolean valueIfKeyNotFound) { return call_method<SCAPIX_META_STRING("get"), jboolean>(key, valueIfKeyNotFound); }
inline void SparseBooleanArray::delete_(jint key) { return call_method<SCAPIX_META_STRING("delete"), void>(key); }
inline void SparseBooleanArray::removeAt(jint index) { return call_method<SCAPIX_META_STRING("removeAt"), void>(index); }
inline void SparseBooleanArray::put(jint key, jboolean value) { return call_method<SCAPIX_META_STRING("put"), void>(key, value); }
inline jint SparseBooleanArray::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline jint SparseBooleanArray::keyAt(jint index) { return call_method<SCAPIX_META_STRING("keyAt"), jint>(index); }
inline jboolean SparseBooleanArray::valueAt(jint index) { return call_method<SCAPIX_META_STRING("valueAt"), jboolean>(index); }
inline jint SparseBooleanArray::indexOfKey(jint key) { return call_method<SCAPIX_META_STRING("indexOfKey"), jint>(key); }
inline jint SparseBooleanArray::indexOfValue(jboolean value) { return call_method<SCAPIX_META_STRING("indexOfValue"), jint>(value); }
inline void SparseBooleanArray::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline void SparseBooleanArray::append(jint key, jboolean value) { return call_method<SCAPIX_META_STRING("append"), void>(key, value); }
inline jint SparseBooleanArray::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean SparseBooleanArray::equals(ref<java::lang::Object> that) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(that); }
inline ref<java::lang::String> SparseBooleanArray::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::util
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_UTIL_SPARSEBOOLEANARRAY_H
