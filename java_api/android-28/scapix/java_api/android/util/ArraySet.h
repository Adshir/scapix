// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Set.h>

#ifndef SCAPIX_ANDROID_UTIL_ARRAYSET_H
#define SCAPIX_ANDROID_UTIL_ARRAYSET_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util { class Iterator; }

namespace android::util {

class ArraySet : public object_base<SCAPIX_META_STRING("android/util/ArraySet"),
	java::lang::Object,
	java::util::Collection,
	java::util::Set>
{
public:

	static ref<ArraySet> new_object();
	static ref<ArraySet> new_object(jint capacity);
	static ref<ArraySet> new_object(ref<android::util::ArraySet> set);
	void clear();
	void ensureCapacity(jint minimumCapacity);
	jboolean contains(ref<java::lang::Object> key);
	jint indexOf(ref<java::lang::Object> key);
	ref<java::lang::Object> valueAt(jint index);
	jboolean isEmpty();
	jboolean add(ref<java::lang::Object> value);
	void addAll(ref<android::util::ArraySet> array);
	jboolean remove(ref<java::lang::Object> object);
	ref<java::lang::Object> removeAt(jint index);
	jboolean removeAll(ref<android::util::ArraySet> array);
	jint size();
	ref<link::java::array<java::lang::Object>> toArray();
	ref<link::java::array<java::lang::Object>> toArray(ref<link::java::array<java::lang::Object>> array);
	jboolean equals(ref<java::lang::Object> object);
	jint hashCode();
	ref<java::lang::String> toString();
	ref<java::util::Iterator> iterator();
	jboolean containsAll(ref<java::util::Collection> collection);
	jboolean addAll(ref<java::util::Collection> collection);
	jboolean removeAll(ref<java::util::Collection> collection);
	jboolean retainAll(ref<java::util::Collection> collection);

protected:

	ArraySet(handle_type h) : base_(h) {}

};

} // namespace android::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>

namespace scapix::java_api {
namespace android::util {

inline ref<ArraySet> ArraySet::new_object() { return base_::new_object(); }
inline ref<ArraySet> ArraySet::new_object(jint capacity) { return base_::new_object(capacity); }
inline ref<ArraySet> ArraySet::new_object(ref<android::util::ArraySet> set) { return base_::new_object(set); }
inline void ArraySet::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline void ArraySet::ensureCapacity(jint minimumCapacity) { return call_method<SCAPIX_META_STRING("ensureCapacity"), void>(minimumCapacity); }
inline jboolean ArraySet::contains(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(key); }
inline jint ArraySet::indexOf(ref<java::lang::Object> key) { return call_method<SCAPIX_META_STRING("indexOf"), jint>(key); }
inline ref<java::lang::Object> ArraySet::valueAt(jint index) { return call_method<SCAPIX_META_STRING("valueAt"), ref<java::lang::Object>>(index); }
inline jboolean ArraySet::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline jboolean ArraySet::add(ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("add"), jboolean>(value); }
inline void ArraySet::addAll(ref<android::util::ArraySet> array) { return call_method<SCAPIX_META_STRING("addAll"), void>(array); }
inline jboolean ArraySet::remove(ref<java::lang::Object> object) { return call_method<SCAPIX_META_STRING("remove"), jboolean>(object); }
inline ref<java::lang::Object> ArraySet::removeAt(jint index) { return call_method<SCAPIX_META_STRING("removeAt"), ref<java::lang::Object>>(index); }
inline jboolean ArraySet::removeAll(ref<android::util::ArraySet> array) { return call_method<SCAPIX_META_STRING("removeAll"), jboolean>(array); }
inline jint ArraySet::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline ref<link::java::array<java::lang::Object>> ArraySet::toArray() { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<java::lang::Object>>>(); }
inline ref<link::java::array<java::lang::Object>> ArraySet::toArray(ref<link::java::array<java::lang::Object>> array) { return call_method<SCAPIX_META_STRING("toArray"), ref<link::java::array<java::lang::Object>>>(array); }
inline jboolean ArraySet::equals(ref<java::lang::Object> object) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(object); }
inline jint ArraySet::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> ArraySet::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::util::Iterator> ArraySet::iterator() { return call_method<SCAPIX_META_STRING("iterator"), ref<java::util::Iterator>>(); }
inline jboolean ArraySet::containsAll(ref<java::util::Collection> collection) { return call_method<SCAPIX_META_STRING("containsAll"), jboolean>(collection); }
inline jboolean ArraySet::addAll(ref<java::util::Collection> collection) { return call_method<SCAPIX_META_STRING("addAll"), jboolean>(collection); }
inline jboolean ArraySet::removeAll(ref<java::util::Collection> collection) { return call_method<SCAPIX_META_STRING("removeAll"), jboolean>(collection); }
inline jboolean ArraySet::retainAll(ref<java::util::Collection> collection) { return call_method<SCAPIX_META_STRING("retainAll"), jboolean>(collection); }

} // namespace android::util
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_UTIL_ARRAYSET_H
