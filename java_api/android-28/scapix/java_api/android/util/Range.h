// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_UTIL_RANGE_H
#define SCAPIX_ANDROID_UTIL_RANGE_H

namespace scapix::java_api {

namespace java::lang { class Comparable; }
namespace java::lang { class String; }

namespace android::util {

class Range : public object_base<SCAPIX_META_STRING("android/util/Range"),
	java::lang::Object>
{
public:

	static ref<Range> new_object(ref<java::lang::Comparable> lower, ref<java::lang::Comparable> upper);
	static ref<android::util::Range> create(ref<java::lang::Comparable> lower, ref<java::lang::Comparable> upper);
	ref<java::lang::Comparable> getLower();
	ref<java::lang::Comparable> getUpper();
	jboolean contains(ref<java::lang::Comparable> value);
	jboolean contains(ref<android::util::Range> range);
	jboolean equals(ref<java::lang::Object> obj);
	ref<java::lang::Comparable> clamp(ref<java::lang::Comparable> value);
	ref<android::util::Range> intersect(ref<android::util::Range> range);
	ref<android::util::Range> intersect(ref<java::lang::Comparable> lower, ref<java::lang::Comparable> upper);
	ref<android::util::Range> extend(ref<android::util::Range> range);
	ref<android::util::Range> extend(ref<java::lang::Comparable> lower, ref<java::lang::Comparable> upper);
	ref<android::util::Range> extend(ref<java::lang::Comparable> value);
	ref<java::lang::String> toString();
	jint hashCode();

protected:

	Range(handle_type h) : base_(h) {}

};

} // namespace android::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::util {

inline ref<Range> Range::new_object(ref<java::lang::Comparable> lower, ref<java::lang::Comparable> upper) { return base_::new_object(lower, upper); }
inline ref<android::util::Range> Range::create(ref<java::lang::Comparable> lower, ref<java::lang::Comparable> upper) { return call_static_method<SCAPIX_META_STRING("create"), ref<android::util::Range>>(lower, upper); }
inline ref<java::lang::Comparable> Range::getLower() { return call_method<SCAPIX_META_STRING("getLower"), ref<java::lang::Comparable>>(); }
inline ref<java::lang::Comparable> Range::getUpper() { return call_method<SCAPIX_META_STRING("getUpper"), ref<java::lang::Comparable>>(); }
inline jboolean Range::contains(ref<java::lang::Comparable> value) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(value); }
inline jboolean Range::contains(ref<android::util::Range> range) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(range); }
inline jboolean Range::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline ref<java::lang::Comparable> Range::clamp(ref<java::lang::Comparable> value) { return call_method<SCAPIX_META_STRING("clamp"), ref<java::lang::Comparable>>(value); }
inline ref<android::util::Range> Range::intersect(ref<android::util::Range> range) { return call_method<SCAPIX_META_STRING("intersect"), ref<android::util::Range>>(range); }
inline ref<android::util::Range> Range::intersect(ref<java::lang::Comparable> lower, ref<java::lang::Comparable> upper) { return call_method<SCAPIX_META_STRING("intersect"), ref<android::util::Range>>(lower, upper); }
inline ref<android::util::Range> Range::extend(ref<android::util::Range> range) { return call_method<SCAPIX_META_STRING("extend"), ref<android::util::Range>>(range); }
inline ref<android::util::Range> Range::extend(ref<java::lang::Comparable> lower, ref<java::lang::Comparable> upper) { return call_method<SCAPIX_META_STRING("extend"), ref<android::util::Range>>(lower, upper); }
inline ref<android::util::Range> Range::extend(ref<java::lang::Comparable> value) { return call_method<SCAPIX_META_STRING("extend"), ref<android::util::Range>>(value); }
inline ref<java::lang::String> Range::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint Range::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }

} // namespace android::util
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_UTIL_RANGE_H
