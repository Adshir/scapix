// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_ANDROID_UTIL_JSONREADER_H
#define SCAPIX_ANDROID_UTIL_JSONREADER_H

namespace scapix::java_api {

namespace android::util { class JsonToken; }
namespace java::io { class Reader; }
namespace java::lang { class String; }

namespace android::util {

class JsonReader : public object_base<SCAPIX_META_STRING("android/util/JsonReader"),
	java::lang::Object,
	java::io::Closeable>
{
public:

	static ref<JsonReader> new_object(ref<java::io::Reader> in);
	void setLenient(jboolean lenient);
	jboolean isLenient();
	void beginArray();
	void endArray();
	void beginObject();
	void endObject();
	jboolean hasNext();
	ref<android::util::JsonToken> peek();
	ref<java::lang::String> nextName();
	ref<java::lang::String> nextString();
	jboolean nextBoolean();
	void nextNull();
	jdouble nextDouble();
	jlong nextLong();
	jint nextInt();
	void close();
	void skipValue();
	ref<java::lang::String> toString();

protected:

	JsonReader(handle_type h) : base_(h) {}

};

} // namespace android::util
} // namespace scapix::java_api

#include <scapix/java_api/android/util/JsonToken.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::util {

inline ref<JsonReader> JsonReader::new_object(ref<java::io::Reader> in) { return base_::new_object(in); }
inline void JsonReader::setLenient(jboolean lenient) { return call_method<SCAPIX_META_STRING("setLenient"), void>(lenient); }
inline jboolean JsonReader::isLenient() { return call_method<SCAPIX_META_STRING("isLenient"), jboolean>(); }
inline void JsonReader::beginArray() { return call_method<SCAPIX_META_STRING("beginArray"), void>(); }
inline void JsonReader::endArray() { return call_method<SCAPIX_META_STRING("endArray"), void>(); }
inline void JsonReader::beginObject() { return call_method<SCAPIX_META_STRING("beginObject"), void>(); }
inline void JsonReader::endObject() { return call_method<SCAPIX_META_STRING("endObject"), void>(); }
inline jboolean JsonReader::hasNext() { return call_method<SCAPIX_META_STRING("hasNext"), jboolean>(); }
inline ref<android::util::JsonToken> JsonReader::peek() { return call_method<SCAPIX_META_STRING("peek"), ref<android::util::JsonToken>>(); }
inline ref<java::lang::String> JsonReader::nextName() { return call_method<SCAPIX_META_STRING("nextName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> JsonReader::nextString() { return call_method<SCAPIX_META_STRING("nextString"), ref<java::lang::String>>(); }
inline jboolean JsonReader::nextBoolean() { return call_method<SCAPIX_META_STRING("nextBoolean"), jboolean>(); }
inline void JsonReader::nextNull() { return call_method<SCAPIX_META_STRING("nextNull"), void>(); }
inline jdouble JsonReader::nextDouble() { return call_method<SCAPIX_META_STRING("nextDouble"), jdouble>(); }
inline jlong JsonReader::nextLong() { return call_method<SCAPIX_META_STRING("nextLong"), jlong>(); }
inline jint JsonReader::nextInt() { return call_method<SCAPIX_META_STRING("nextInt"), jint>(); }
inline void JsonReader::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void JsonReader::skipValue() { return call_method<SCAPIX_META_STRING("skipValue"), void>(); }
inline ref<java::lang::String> JsonReader::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::util
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_UTIL_JSONREADER_H
