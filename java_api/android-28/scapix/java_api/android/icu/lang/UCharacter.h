// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/icu/lang/UCharacterEnums_ECharacterCategory.h>
#include <scapix/java_api/android/icu/lang/UCharacterEnums_ECharacterDirection.h>

#ifndef SCAPIX_ANDROID_ICU_LANG_UCHARACTER_H
#define SCAPIX_ANDROID_ICU_LANG_UCHARACTER_H

namespace scapix::java_api {

namespace android::icu::text { class BreakIterator; }
namespace android::icu::util { class RangeValueIterator; }
namespace android::icu::util { class ULocale; }
namespace android::icu::util { class ValueIterator; }
namespace android::icu::util { class VersionInfo; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::util { class Locale; }
namespace android::icu::lang { class UCharacter_WordBreak; }
namespace android::icu::lang { class UCharacter_UnicodeBlock; }
namespace android::icu::lang { class UCharacter_SentenceBreak; }
namespace android::icu::lang { class UCharacter_NumericType; }
namespace android::icu::lang { class UCharacter_LineBreak; }
namespace android::icu::lang { class UCharacter_JoiningType; }
namespace android::icu::lang { class UCharacter_JoiningGroup; }
namespace android::icu::lang { class UCharacter_HangulSyllableType; }
namespace android::icu::lang { class UCharacter_GraphemeClusterBreak; }
namespace android::icu::lang { class UCharacter_EastAsianWidth; }
namespace android::icu::lang { class UCharacter_DecompositionType; }
namespace android::icu::lang { class UCharacter_BidiPairedBracketType; }

namespace android::icu::lang {

class UCharacter : public object_base<SCAPIX_META_STRING("android/icu/lang/UCharacter"),
	java::lang::Object,
	android::icu::lang::UCharacterEnums_ECharacterCategory,
	android::icu::lang::UCharacterEnums_ECharacterDirection>
{
public:

	using WordBreak = UCharacter_WordBreak;
	using UnicodeBlock = UCharacter_UnicodeBlock;
	using SentenceBreak = UCharacter_SentenceBreak;
	using NumericType = UCharacter_NumericType;
	using LineBreak = UCharacter_LineBreak;
	using JoiningType = UCharacter_JoiningType;
	using JoiningGroup = UCharacter_JoiningGroup;
	using HangulSyllableType = UCharacter_HangulSyllableType;
	using GraphemeClusterBreak = UCharacter_GraphemeClusterBreak;
	using EastAsianWidth = UCharacter_EastAsianWidth;
	using DecompositionType = UCharacter_DecompositionType;
	using BidiPairedBracketType = UCharacter_BidiPairedBracketType;

	static jint FOLD_CASE_DEFAULT_();
	static jint FOLD_CASE_EXCLUDE_SPECIAL_I_();
	static jint MAX_CODE_POINT_();
	static jchar MAX_HIGH_SURROGATE_();
	static jchar MAX_LOW_SURROGATE_();
	static jint MAX_RADIX_();
	static jchar MAX_SURROGATE_();
	static jint MAX_VALUE_();
	static jint MIN_CODE_POINT_();
	static jchar MIN_HIGH_SURROGATE_();
	static jchar MIN_LOW_SURROGATE_();
	static jint MIN_RADIX_();
	static jint MIN_SUPPLEMENTARY_CODE_POINT_();
	static jchar MIN_SURROGATE_();
	static jint MIN_VALUE_();
	static jdouble NO_NUMERIC_VALUE_();
	static jint REPLACEMENT_CHAR_();
	static jint SUPPLEMENTARY_MIN_VALUE_();
	static jint TITLECASE_NO_BREAK_ADJUSTMENT_();
	static jint TITLECASE_NO_LOWERCASE_();

	static jint digit(jint ch, jint radix);
	static jint digit(jint ch);
	static jint getNumericValue(jint ch);
	static jdouble getUnicodeNumericValue(jint ch);
	static jint getType(jint ch);
	static jboolean isDefined(jint ch);
	static jboolean isDigit(jint ch);
	static jboolean isISOControl(jint ch);
	static jboolean isLetter(jint ch);
	static jboolean isLetterOrDigit(jint ch);
	static jboolean isJavaIdentifierStart(jint cp);
	static jboolean isJavaIdentifierPart(jint cp);
	static jboolean isLowerCase(jint ch);
	static jboolean isWhitespace(jint ch);
	static jboolean isSpaceChar(jint ch);
	static jboolean isTitleCase(jint ch);
	static jboolean isUnicodeIdentifierPart(jint ch);
	static jboolean isUnicodeIdentifierStart(jint ch);
	static jboolean isIdentifierIgnorable(jint ch);
	static jboolean isUpperCase(jint ch);
	static jint toLowerCase(jint ch);
	static ref<java::lang::String> toString(jint ch);
	static jint toTitleCase(jint ch);
	static jint toUpperCase(jint ch);
	static jboolean isSupplementary(jint ch);
	static jboolean isBMP(jint ch);
	static jboolean isPrintable(jint ch);
	static jboolean isBaseForm(jint ch);
	static jint getDirection(jint ch);
	static jboolean isMirrored(jint ch);
	static jint getMirror(jint ch);
	static jint getBidiPairedBracket(jint c);
	static jint getCombiningClass(jint ch);
	static jboolean isLegal(jint ch);
	static jboolean isLegal(ref<java::lang::String> str);
	static ref<android::icu::util::VersionInfo> getUnicodeVersion();
	static ref<java::lang::String> getName(jint ch);
	static ref<java::lang::String> getName(ref<java::lang::String> s, ref<java::lang::String> separator);
	static ref<java::lang::String> getExtendedName(jint ch);
	static ref<java::lang::String> getNameAlias(jint ch);
	static jint getCharFromName(ref<java::lang::String> name);
	static jint getCharFromExtendedName(ref<java::lang::String> name);
	static jint getCharFromNameAlias(ref<java::lang::String> name);
	static ref<java::lang::String> getPropertyName(jint property, jint nameChoice);
	static jint getPropertyEnum(ref<java::lang::CharSequence> propertyAlias);
	static ref<java::lang::String> getPropertyValueName(jint property, jint value, jint nameChoice);
	static jint getPropertyValueEnum(jint property, ref<java::lang::CharSequence> valueAlias);
	static jint getCodePoint(jchar lead, jchar trail);
	static jint getCodePoint(jchar char16);
	static ref<java::lang::String> toUpperCase(ref<java::lang::String> str);
	static ref<java::lang::String> toLowerCase(ref<java::lang::String> str);
	static ref<java::lang::String> toTitleCase(ref<java::lang::String> str, ref<android::icu::text::BreakIterator> breakiter);
	static ref<java::lang::String> toUpperCase(ref<java::util::Locale> locale, ref<java::lang::String> str);
	static ref<java::lang::String> toUpperCase(ref<android::icu::util::ULocale> locale, ref<java::lang::String> str);
	static ref<java::lang::String> toLowerCase(ref<java::util::Locale> locale, ref<java::lang::String> str);
	static ref<java::lang::String> toLowerCase(ref<android::icu::util::ULocale> locale, ref<java::lang::String> str);
	static ref<java::lang::String> toTitleCase(ref<java::util::Locale> locale, ref<java::lang::String> str, ref<android::icu::text::BreakIterator> breakiter);
	static ref<java::lang::String> toTitleCase(ref<android::icu::util::ULocale> locale, ref<java::lang::String> str, ref<android::icu::text::BreakIterator> titleIter);
	static ref<java::lang::String> toTitleCase(ref<android::icu::util::ULocale> locale, ref<java::lang::String> str, ref<android::icu::text::BreakIterator> titleIter, jint options);
	static ref<java::lang::String> toTitleCase(ref<java::util::Locale> locale, ref<java::lang::String> str, ref<android::icu::text::BreakIterator> titleIter, jint options);
	static jint foldCase(jint ch, jboolean defaultmapping);
	static ref<java::lang::String> foldCase(ref<java::lang::String> str, jboolean defaultmapping);
	static jint foldCase(jint ch, jint options);
	static ref<java::lang::String> foldCase(ref<java::lang::String> str, jint options);
	static jint getHanNumericValue(jint ch);
	static ref<android::icu::util::RangeValueIterator> getTypeIterator();
	static ref<android::icu::util::ValueIterator> getNameIterator();
	static ref<android::icu::util::ValueIterator> getExtendedNameIterator();
	static ref<android::icu::util::VersionInfo> getAge(jint ch);
	static jboolean hasBinaryProperty(jint ch, jint property);
	static jboolean isUAlphabetic(jint ch);
	static jboolean isULowercase(jint ch);
	static jboolean isUUppercase(jint ch);
	static jboolean isUWhiteSpace(jint ch);
	static jint getIntPropertyValue(jint ch, jint type);
	static jint getIntPropertyMinValue(jint type);
	static jint getIntPropertyMaxValue(jint type);
	static jchar forDigit(jint digit, jint radix);
	static jboolean isValidCodePoint(jint cp);
	static jboolean isSupplementaryCodePoint(jint cp);
	static jboolean isHighSurrogate(jchar ch);
	static jboolean isLowSurrogate(jchar ch);
	static jboolean isSurrogatePair(jchar high, jchar low);
	static jint charCount(jint cp);
	static jint toCodePoint(jchar high, jchar low);
	static jint codePointAt(ref<java::lang::CharSequence> seq, jint index);
	static jint codePointAt(ref<link::java::array<jchar>> text, jint index);
	static jint codePointAt(ref<link::java::array<jchar>> text, jint index, jint limit);
	static jint codePointBefore(ref<java::lang::CharSequence> seq, jint index);
	static jint codePointBefore(ref<link::java::array<jchar>> text, jint index);
	static jint codePointBefore(ref<link::java::array<jchar>> text, jint index, jint limit);
	static jint toChars(jint cp, ref<link::java::array<jchar>> dst, jint dstIndex);
	static ref<link::java::array<jchar>> toChars(jint cp);
	static jbyte getDirectionality(jint cp);
	static jint codePointCount(ref<java::lang::CharSequence> text, jint start, jint limit);
	static jint codePointCount(ref<link::java::array<jchar>> text, jint start, jint limit);
	static jint offsetByCodePoints(ref<java::lang::CharSequence> text, jint index, jint codePointOffset);
	static jint offsetByCodePoints(ref<link::java::array<jchar>> text, jint start, jint count, jint index, jint codePointOffset);

protected:

	UCharacter(handle_type h) : base_(h) {}

};

} // namespace android::icu::lang
} // namespace scapix::java_api

#include <scapix/java_api/android/icu/text/BreakIterator.h>
#include <scapix/java_api/android/icu/util/RangeValueIterator.h>
#include <scapix/java_api/android/icu/util/ULocale.h>
#include <scapix/java_api/android/icu/util/ValueIterator.h>
#include <scapix/java_api/android/icu/util/VersionInfo.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>

namespace scapix::java_api {
namespace android::icu::lang {

inline jint UCharacter::FOLD_CASE_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("FOLD_CASE_DEFAULT"), jint>(); }
inline jint UCharacter::FOLD_CASE_EXCLUDE_SPECIAL_I_() { return get_static_field<SCAPIX_META_STRING("FOLD_CASE_EXCLUDE_SPECIAL_I"), jint>(); }
inline jint UCharacter::MAX_CODE_POINT_() { return get_static_field<SCAPIX_META_STRING("MAX_CODE_POINT"), jint>(); }
inline jchar UCharacter::MAX_HIGH_SURROGATE_() { return get_static_field<SCAPIX_META_STRING("MAX_HIGH_SURROGATE"), jchar>(); }
inline jchar UCharacter::MAX_LOW_SURROGATE_() { return get_static_field<SCAPIX_META_STRING("MAX_LOW_SURROGATE"), jchar>(); }
inline jint UCharacter::MAX_RADIX_() { return get_static_field<SCAPIX_META_STRING("MAX_RADIX"), jint>(); }
inline jchar UCharacter::MAX_SURROGATE_() { return get_static_field<SCAPIX_META_STRING("MAX_SURROGATE"), jchar>(); }
inline jint UCharacter::MAX_VALUE_() { return get_static_field<SCAPIX_META_STRING("MAX_VALUE"), jint>(); }
inline jint UCharacter::MIN_CODE_POINT_() { return get_static_field<SCAPIX_META_STRING("MIN_CODE_POINT"), jint>(); }
inline jchar UCharacter::MIN_HIGH_SURROGATE_() { return get_static_field<SCAPIX_META_STRING("MIN_HIGH_SURROGATE"), jchar>(); }
inline jchar UCharacter::MIN_LOW_SURROGATE_() { return get_static_field<SCAPIX_META_STRING("MIN_LOW_SURROGATE"), jchar>(); }
inline jint UCharacter::MIN_RADIX_() { return get_static_field<SCAPIX_META_STRING("MIN_RADIX"), jint>(); }
inline jint UCharacter::MIN_SUPPLEMENTARY_CODE_POINT_() { return get_static_field<SCAPIX_META_STRING("MIN_SUPPLEMENTARY_CODE_POINT"), jint>(); }
inline jchar UCharacter::MIN_SURROGATE_() { return get_static_field<SCAPIX_META_STRING("MIN_SURROGATE"), jchar>(); }
inline jint UCharacter::MIN_VALUE_() { return get_static_field<SCAPIX_META_STRING("MIN_VALUE"), jint>(); }
inline jdouble UCharacter::NO_NUMERIC_VALUE_() { return get_static_field<SCAPIX_META_STRING("NO_NUMERIC_VALUE"), jdouble>(); }
inline jint UCharacter::REPLACEMENT_CHAR_() { return get_static_field<SCAPIX_META_STRING("REPLACEMENT_CHAR"), jint>(); }
inline jint UCharacter::SUPPLEMENTARY_MIN_VALUE_() { return get_static_field<SCAPIX_META_STRING("SUPPLEMENTARY_MIN_VALUE"), jint>(); }
inline jint UCharacter::TITLECASE_NO_BREAK_ADJUSTMENT_() { return get_static_field<SCAPIX_META_STRING("TITLECASE_NO_BREAK_ADJUSTMENT"), jint>(); }
inline jint UCharacter::TITLECASE_NO_LOWERCASE_() { return get_static_field<SCAPIX_META_STRING("TITLECASE_NO_LOWERCASE"), jint>(); }
inline jint UCharacter::digit(jint ch, jint radix) { return call_static_method<SCAPIX_META_STRING("digit"), jint>(ch, radix); }
inline jint UCharacter::digit(jint ch) { return call_static_method<SCAPIX_META_STRING("digit"), jint>(ch); }
inline jint UCharacter::getNumericValue(jint ch) { return call_static_method<SCAPIX_META_STRING("getNumericValue"), jint>(ch); }
inline jdouble UCharacter::getUnicodeNumericValue(jint ch) { return call_static_method<SCAPIX_META_STRING("getUnicodeNumericValue"), jdouble>(ch); }
inline jint UCharacter::getType(jint ch) { return call_static_method<SCAPIX_META_STRING("getType"), jint>(ch); }
inline jboolean UCharacter::isDefined(jint ch) { return call_static_method<SCAPIX_META_STRING("isDefined"), jboolean>(ch); }
inline jboolean UCharacter::isDigit(jint ch) { return call_static_method<SCAPIX_META_STRING("isDigit"), jboolean>(ch); }
inline jboolean UCharacter::isISOControl(jint ch) { return call_static_method<SCAPIX_META_STRING("isISOControl"), jboolean>(ch); }
inline jboolean UCharacter::isLetter(jint ch) { return call_static_method<SCAPIX_META_STRING("isLetter"), jboolean>(ch); }
inline jboolean UCharacter::isLetterOrDigit(jint ch) { return call_static_method<SCAPIX_META_STRING("isLetterOrDigit"), jboolean>(ch); }
inline jboolean UCharacter::isJavaIdentifierStart(jint cp) { return call_static_method<SCAPIX_META_STRING("isJavaIdentifierStart"), jboolean>(cp); }
inline jboolean UCharacter::isJavaIdentifierPart(jint cp) { return call_static_method<SCAPIX_META_STRING("isJavaIdentifierPart"), jboolean>(cp); }
inline jboolean UCharacter::isLowerCase(jint ch) { return call_static_method<SCAPIX_META_STRING("isLowerCase"), jboolean>(ch); }
inline jboolean UCharacter::isWhitespace(jint ch) { return call_static_method<SCAPIX_META_STRING("isWhitespace"), jboolean>(ch); }
inline jboolean UCharacter::isSpaceChar(jint ch) { return call_static_method<SCAPIX_META_STRING("isSpaceChar"), jboolean>(ch); }
inline jboolean UCharacter::isTitleCase(jint ch) { return call_static_method<SCAPIX_META_STRING("isTitleCase"), jboolean>(ch); }
inline jboolean UCharacter::isUnicodeIdentifierPart(jint ch) { return call_static_method<SCAPIX_META_STRING("isUnicodeIdentifierPart"), jboolean>(ch); }
inline jboolean UCharacter::isUnicodeIdentifierStart(jint ch) { return call_static_method<SCAPIX_META_STRING("isUnicodeIdentifierStart"), jboolean>(ch); }
inline jboolean UCharacter::isIdentifierIgnorable(jint ch) { return call_static_method<SCAPIX_META_STRING("isIdentifierIgnorable"), jboolean>(ch); }
inline jboolean UCharacter::isUpperCase(jint ch) { return call_static_method<SCAPIX_META_STRING("isUpperCase"), jboolean>(ch); }
inline jint UCharacter::toLowerCase(jint ch) { return call_static_method<SCAPIX_META_STRING("toLowerCase"), jint>(ch); }
inline ref<java::lang::String> UCharacter::toString(jint ch) { return call_static_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(ch); }
inline jint UCharacter::toTitleCase(jint ch) { return call_static_method<SCAPIX_META_STRING("toTitleCase"), jint>(ch); }
inline jint UCharacter::toUpperCase(jint ch) { return call_static_method<SCAPIX_META_STRING("toUpperCase"), jint>(ch); }
inline jboolean UCharacter::isSupplementary(jint ch) { return call_static_method<SCAPIX_META_STRING("isSupplementary"), jboolean>(ch); }
inline jboolean UCharacter::isBMP(jint ch) { return call_static_method<SCAPIX_META_STRING("isBMP"), jboolean>(ch); }
inline jboolean UCharacter::isPrintable(jint ch) { return call_static_method<SCAPIX_META_STRING("isPrintable"), jboolean>(ch); }
inline jboolean UCharacter::isBaseForm(jint ch) { return call_static_method<SCAPIX_META_STRING("isBaseForm"), jboolean>(ch); }
inline jint UCharacter::getDirection(jint ch) { return call_static_method<SCAPIX_META_STRING("getDirection"), jint>(ch); }
inline jboolean UCharacter::isMirrored(jint ch) { return call_static_method<SCAPIX_META_STRING("isMirrored"), jboolean>(ch); }
inline jint UCharacter::getMirror(jint ch) { return call_static_method<SCAPIX_META_STRING("getMirror"), jint>(ch); }
inline jint UCharacter::getBidiPairedBracket(jint c) { return call_static_method<SCAPIX_META_STRING("getBidiPairedBracket"), jint>(c); }
inline jint UCharacter::getCombiningClass(jint ch) { return call_static_method<SCAPIX_META_STRING("getCombiningClass"), jint>(ch); }
inline jboolean UCharacter::isLegal(jint ch) { return call_static_method<SCAPIX_META_STRING("isLegal"), jboolean>(ch); }
inline jboolean UCharacter::isLegal(ref<java::lang::String> str) { return call_static_method<SCAPIX_META_STRING("isLegal"), jboolean>(str); }
inline ref<android::icu::util::VersionInfo> UCharacter::getUnicodeVersion() { return call_static_method<SCAPIX_META_STRING("getUnicodeVersion"), ref<android::icu::util::VersionInfo>>(); }
inline ref<java::lang::String> UCharacter::getName(jint ch) { return call_static_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(ch); }
inline ref<java::lang::String> UCharacter::getName(ref<java::lang::String> s, ref<java::lang::String> separator) { return call_static_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(s, separator); }
inline ref<java::lang::String> UCharacter::getExtendedName(jint ch) { return call_static_method<SCAPIX_META_STRING("getExtendedName"), ref<java::lang::String>>(ch); }
inline ref<java::lang::String> UCharacter::getNameAlias(jint ch) { return call_static_method<SCAPIX_META_STRING("getNameAlias"), ref<java::lang::String>>(ch); }
inline jint UCharacter::getCharFromName(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("getCharFromName"), jint>(name); }
inline jint UCharacter::getCharFromExtendedName(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("getCharFromExtendedName"), jint>(name); }
inline jint UCharacter::getCharFromNameAlias(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("getCharFromNameAlias"), jint>(name); }
inline ref<java::lang::String> UCharacter::getPropertyName(jint property, jint nameChoice) { return call_static_method<SCAPIX_META_STRING("getPropertyName"), ref<java::lang::String>>(property, nameChoice); }
inline jint UCharacter::getPropertyEnum(ref<java::lang::CharSequence> propertyAlias) { return call_static_method<SCAPIX_META_STRING("getPropertyEnum"), jint>(propertyAlias); }
inline ref<java::lang::String> UCharacter::getPropertyValueName(jint property, jint value, jint nameChoice) { return call_static_method<SCAPIX_META_STRING("getPropertyValueName"), ref<java::lang::String>>(property, value, nameChoice); }
inline jint UCharacter::getPropertyValueEnum(jint property, ref<java::lang::CharSequence> valueAlias) { return call_static_method<SCAPIX_META_STRING("getPropertyValueEnum"), jint>(property, valueAlias); }
inline jint UCharacter::getCodePoint(jchar lead, jchar trail) { return call_static_method<SCAPIX_META_STRING("getCodePoint"), jint>(lead, trail); }
inline jint UCharacter::getCodePoint(jchar char16) { return call_static_method<SCAPIX_META_STRING("getCodePoint"), jint>(char16); }
inline ref<java::lang::String> UCharacter::toUpperCase(ref<java::lang::String> str) { return call_static_method<SCAPIX_META_STRING("toUpperCase"), ref<java::lang::String>>(str); }
inline ref<java::lang::String> UCharacter::toLowerCase(ref<java::lang::String> str) { return call_static_method<SCAPIX_META_STRING("toLowerCase"), ref<java::lang::String>>(str); }
inline ref<java::lang::String> UCharacter::toTitleCase(ref<java::lang::String> str, ref<android::icu::text::BreakIterator> breakiter) { return call_static_method<SCAPIX_META_STRING("toTitleCase"), ref<java::lang::String>>(str, breakiter); }
inline ref<java::lang::String> UCharacter::toUpperCase(ref<java::util::Locale> locale, ref<java::lang::String> str) { return call_static_method<SCAPIX_META_STRING("toUpperCase"), ref<java::lang::String>>(locale, str); }
inline ref<java::lang::String> UCharacter::toUpperCase(ref<android::icu::util::ULocale> locale, ref<java::lang::String> str) { return call_static_method<SCAPIX_META_STRING("toUpperCase"), ref<java::lang::String>>(locale, str); }
inline ref<java::lang::String> UCharacter::toLowerCase(ref<java::util::Locale> locale, ref<java::lang::String> str) { return call_static_method<SCAPIX_META_STRING("toLowerCase"), ref<java::lang::String>>(locale, str); }
inline ref<java::lang::String> UCharacter::toLowerCase(ref<android::icu::util::ULocale> locale, ref<java::lang::String> str) { return call_static_method<SCAPIX_META_STRING("toLowerCase"), ref<java::lang::String>>(locale, str); }
inline ref<java::lang::String> UCharacter::toTitleCase(ref<java::util::Locale> locale, ref<java::lang::String> str, ref<android::icu::text::BreakIterator> breakiter) { return call_static_method<SCAPIX_META_STRING("toTitleCase"), ref<java::lang::String>>(locale, str, breakiter); }
inline ref<java::lang::String> UCharacter::toTitleCase(ref<android::icu::util::ULocale> locale, ref<java::lang::String> str, ref<android::icu::text::BreakIterator> titleIter) { return call_static_method<SCAPIX_META_STRING("toTitleCase"), ref<java::lang::String>>(locale, str, titleIter); }
inline ref<java::lang::String> UCharacter::toTitleCase(ref<android::icu::util::ULocale> locale, ref<java::lang::String> str, ref<android::icu::text::BreakIterator> titleIter, jint options) { return call_static_method<SCAPIX_META_STRING("toTitleCase"), ref<java::lang::String>>(locale, str, titleIter, options); }
inline ref<java::lang::String> UCharacter::toTitleCase(ref<java::util::Locale> locale, ref<java::lang::String> str, ref<android::icu::text::BreakIterator> titleIter, jint options) { return call_static_method<SCAPIX_META_STRING("toTitleCase"), ref<java::lang::String>>(locale, str, titleIter, options); }
inline jint UCharacter::foldCase(jint ch, jboolean defaultmapping) { return call_static_method<SCAPIX_META_STRING("foldCase"), jint>(ch, defaultmapping); }
inline ref<java::lang::String> UCharacter::foldCase(ref<java::lang::String> str, jboolean defaultmapping) { return call_static_method<SCAPIX_META_STRING("foldCase"), ref<java::lang::String>>(str, defaultmapping); }
inline jint UCharacter::foldCase(jint ch, jint options) { return call_static_method<SCAPIX_META_STRING("foldCase"), jint>(ch, options); }
inline ref<java::lang::String> UCharacter::foldCase(ref<java::lang::String> str, jint options) { return call_static_method<SCAPIX_META_STRING("foldCase"), ref<java::lang::String>>(str, options); }
inline jint UCharacter::getHanNumericValue(jint ch) { return call_static_method<SCAPIX_META_STRING("getHanNumericValue"), jint>(ch); }
inline ref<android::icu::util::RangeValueIterator> UCharacter::getTypeIterator() { return call_static_method<SCAPIX_META_STRING("getTypeIterator"), ref<android::icu::util::RangeValueIterator>>(); }
inline ref<android::icu::util::ValueIterator> UCharacter::getNameIterator() { return call_static_method<SCAPIX_META_STRING("getNameIterator"), ref<android::icu::util::ValueIterator>>(); }
inline ref<android::icu::util::ValueIterator> UCharacter::getExtendedNameIterator() { return call_static_method<SCAPIX_META_STRING("getExtendedNameIterator"), ref<android::icu::util::ValueIterator>>(); }
inline ref<android::icu::util::VersionInfo> UCharacter::getAge(jint ch) { return call_static_method<SCAPIX_META_STRING("getAge"), ref<android::icu::util::VersionInfo>>(ch); }
inline jboolean UCharacter::hasBinaryProperty(jint ch, jint property) { return call_static_method<SCAPIX_META_STRING("hasBinaryProperty"), jboolean>(ch, property); }
inline jboolean UCharacter::isUAlphabetic(jint ch) { return call_static_method<SCAPIX_META_STRING("isUAlphabetic"), jboolean>(ch); }
inline jboolean UCharacter::isULowercase(jint ch) { return call_static_method<SCAPIX_META_STRING("isULowercase"), jboolean>(ch); }
inline jboolean UCharacter::isUUppercase(jint ch) { return call_static_method<SCAPIX_META_STRING("isUUppercase"), jboolean>(ch); }
inline jboolean UCharacter::isUWhiteSpace(jint ch) { return call_static_method<SCAPIX_META_STRING("isUWhiteSpace"), jboolean>(ch); }
inline jint UCharacter::getIntPropertyValue(jint ch, jint type) { return call_static_method<SCAPIX_META_STRING("getIntPropertyValue"), jint>(ch, type); }
inline jint UCharacter::getIntPropertyMinValue(jint type) { return call_static_method<SCAPIX_META_STRING("getIntPropertyMinValue"), jint>(type); }
inline jint UCharacter::getIntPropertyMaxValue(jint type) { return call_static_method<SCAPIX_META_STRING("getIntPropertyMaxValue"), jint>(type); }
inline jchar UCharacter::forDigit(jint digit, jint radix) { return call_static_method<SCAPIX_META_STRING("forDigit"), jchar>(digit, radix); }
inline jboolean UCharacter::isValidCodePoint(jint cp) { return call_static_method<SCAPIX_META_STRING("isValidCodePoint"), jboolean>(cp); }
inline jboolean UCharacter::isSupplementaryCodePoint(jint cp) { return call_static_method<SCAPIX_META_STRING("isSupplementaryCodePoint"), jboolean>(cp); }
inline jboolean UCharacter::isHighSurrogate(jchar ch) { return call_static_method<SCAPIX_META_STRING("isHighSurrogate"), jboolean>(ch); }
inline jboolean UCharacter::isLowSurrogate(jchar ch) { return call_static_method<SCAPIX_META_STRING("isLowSurrogate"), jboolean>(ch); }
inline jboolean UCharacter::isSurrogatePair(jchar high, jchar low) { return call_static_method<SCAPIX_META_STRING("isSurrogatePair"), jboolean>(high, low); }
inline jint UCharacter::charCount(jint cp) { return call_static_method<SCAPIX_META_STRING("charCount"), jint>(cp); }
inline jint UCharacter::toCodePoint(jchar high, jchar low) { return call_static_method<SCAPIX_META_STRING("toCodePoint"), jint>(high, low); }
inline jint UCharacter::codePointAt(ref<java::lang::CharSequence> seq, jint index) { return call_static_method<SCAPIX_META_STRING("codePointAt"), jint>(seq, index); }
inline jint UCharacter::codePointAt(ref<link::java::array<jchar>> text, jint index) { return call_static_method<SCAPIX_META_STRING("codePointAt"), jint>(text, index); }
inline jint UCharacter::codePointAt(ref<link::java::array<jchar>> text, jint index, jint limit) { return call_static_method<SCAPIX_META_STRING("codePointAt"), jint>(text, index, limit); }
inline jint UCharacter::codePointBefore(ref<java::lang::CharSequence> seq, jint index) { return call_static_method<SCAPIX_META_STRING("codePointBefore"), jint>(seq, index); }
inline jint UCharacter::codePointBefore(ref<link::java::array<jchar>> text, jint index) { return call_static_method<SCAPIX_META_STRING("codePointBefore"), jint>(text, index); }
inline jint UCharacter::codePointBefore(ref<link::java::array<jchar>> text, jint index, jint limit) { return call_static_method<SCAPIX_META_STRING("codePointBefore"), jint>(text, index, limit); }
inline jint UCharacter::toChars(jint cp, ref<link::java::array<jchar>> dst, jint dstIndex) { return call_static_method<SCAPIX_META_STRING("toChars"), jint>(cp, dst, dstIndex); }
inline ref<link::java::array<jchar>> UCharacter::toChars(jint cp) { return call_static_method<SCAPIX_META_STRING("toChars"), ref<link::java::array<jchar>>>(cp); }
inline jbyte UCharacter::getDirectionality(jint cp) { return call_static_method<SCAPIX_META_STRING("getDirectionality"), jbyte>(cp); }
inline jint UCharacter::codePointCount(ref<java::lang::CharSequence> text, jint start, jint limit) { return call_static_method<SCAPIX_META_STRING("codePointCount"), jint>(text, start, limit); }
inline jint UCharacter::codePointCount(ref<link::java::array<jchar>> text, jint start, jint limit) { return call_static_method<SCAPIX_META_STRING("codePointCount"), jint>(text, start, limit); }
inline jint UCharacter::offsetByCodePoints(ref<java::lang::CharSequence> text, jint index, jint codePointOffset) { return call_static_method<SCAPIX_META_STRING("offsetByCodePoints"), jint>(text, index, codePointOffset); }
inline jint UCharacter::offsetByCodePoints(ref<link::java::array<jchar>> text, jint start, jint count, jint index, jint codePointOffset) { return call_static_method<SCAPIX_META_STRING("offsetByCodePoints"), jint>(text, start, count, index, codePointOffset); }

} // namespace android::icu::lang
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_ICU_LANG_UCHARACTER_H
