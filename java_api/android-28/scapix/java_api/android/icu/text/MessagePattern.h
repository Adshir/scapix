// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/android/icu/util/Freezable.h>

#ifndef SCAPIX_ANDROID_ICU_TEXT_MESSAGEPATTERN_H
#define SCAPIX_ANDROID_ICU_TEXT_MESSAGEPATTERN_H

namespace scapix::java_api {

namespace android::icu::text { class MessagePattern_ApostropheMode; }
namespace android::icu::text { class MessagePattern_Part; }
namespace android::icu::text { class MessagePattern_Part_Type; }
namespace java::lang { class String; }
namespace android::icu::text { class MessagePattern_ArgType; }

namespace android::icu::text {

class MessagePattern : public object_base<SCAPIX_META_STRING("android/icu/text/MessagePattern"),
	java::lang::Object,
	java::lang::Cloneable,
	android::icu::util::Freezable>
{
public:

	using Part = MessagePattern_Part;
	using ArgType = MessagePattern_ArgType;
	using ApostropheMode = MessagePattern_ApostropheMode;

	static jint ARG_NAME_NOT_NUMBER_();
	static jint ARG_NAME_NOT_VALID_();
	static jdouble NO_NUMERIC_VALUE_();

	static ref<MessagePattern> new_object();
	static ref<MessagePattern> new_object(ref<android::icu::text::MessagePattern_ApostropheMode> mode);
	static ref<MessagePattern> new_object(ref<java::lang::String> pattern);
	ref<android::icu::text::MessagePattern> parse(ref<java::lang::String> pattern);
	ref<android::icu::text::MessagePattern> parseChoiceStyle(ref<java::lang::String> pattern);
	ref<android::icu::text::MessagePattern> parsePluralStyle(ref<java::lang::String> pattern);
	ref<android::icu::text::MessagePattern> parseSelectStyle(ref<java::lang::String> pattern);
	void clear();
	void clearPatternAndSetApostropheMode(ref<android::icu::text::MessagePattern_ApostropheMode> mode);
	jboolean equals(ref<java::lang::Object> other);
	jint hashCode();
	ref<android::icu::text::MessagePattern_ApostropheMode> getApostropheMode();
	ref<java::lang::String> getPatternString();
	jboolean hasNamedArguments();
	jboolean hasNumberedArguments();
	ref<java::lang::String> toString();
	static jint validateArgumentName(ref<java::lang::String> name);
	ref<java::lang::String> autoQuoteApostropheDeep();
	jint countParts();
	ref<android::icu::text::MessagePattern_Part> getPart(jint i);
	ref<android::icu::text::MessagePattern_Part_Type> getPartType(jint i);
	jint getPatternIndex(jint partIndex);
	ref<java::lang::String> getSubstring(ref<android::icu::text::MessagePattern_Part> part);
	jboolean partSubstringMatches(ref<android::icu::text::MessagePattern_Part> part, ref<java::lang::String> s);
	jdouble getNumericValue(ref<android::icu::text::MessagePattern_Part> part);
	jdouble getPluralOffset(jint pluralStart);
	jint getLimitPartIndex(jint start);
	ref<java::lang::Object> clone();
	ref<android::icu::text::MessagePattern> cloneAsThawed();
	ref<android::icu::text::MessagePattern> freeze();
	jboolean isFrozen();

protected:

	MessagePattern(handle_type h) : base_(h) {}

};

} // namespace android::icu::text
} // namespace scapix::java_api

#include <scapix/java_api/android/icu/text/MessagePattern_ApostropheMode.h>
#include <scapix/java_api/android/icu/text/MessagePattern_Part.h>
#include <scapix/java_api/android/icu/text/MessagePattern_Part_Type.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::icu::text {

inline jint MessagePattern::ARG_NAME_NOT_NUMBER_() { return get_static_field<SCAPIX_META_STRING("ARG_NAME_NOT_NUMBER"), jint>(); }
inline jint MessagePattern::ARG_NAME_NOT_VALID_() { return get_static_field<SCAPIX_META_STRING("ARG_NAME_NOT_VALID"), jint>(); }
inline jdouble MessagePattern::NO_NUMERIC_VALUE_() { return get_static_field<SCAPIX_META_STRING("NO_NUMERIC_VALUE"), jdouble>(); }
inline ref<MessagePattern> MessagePattern::new_object() { return base_::new_object(); }
inline ref<MessagePattern> MessagePattern::new_object(ref<android::icu::text::MessagePattern_ApostropheMode> mode) { return base_::new_object(mode); }
inline ref<MessagePattern> MessagePattern::new_object(ref<java::lang::String> pattern) { return base_::new_object(pattern); }
inline ref<android::icu::text::MessagePattern> MessagePattern::parse(ref<java::lang::String> pattern) { return call_method<SCAPIX_META_STRING("parse"), ref<android::icu::text::MessagePattern>>(pattern); }
inline ref<android::icu::text::MessagePattern> MessagePattern::parseChoiceStyle(ref<java::lang::String> pattern) { return call_method<SCAPIX_META_STRING("parseChoiceStyle"), ref<android::icu::text::MessagePattern>>(pattern); }
inline ref<android::icu::text::MessagePattern> MessagePattern::parsePluralStyle(ref<java::lang::String> pattern) { return call_method<SCAPIX_META_STRING("parsePluralStyle"), ref<android::icu::text::MessagePattern>>(pattern); }
inline ref<android::icu::text::MessagePattern> MessagePattern::parseSelectStyle(ref<java::lang::String> pattern) { return call_method<SCAPIX_META_STRING("parseSelectStyle"), ref<android::icu::text::MessagePattern>>(pattern); }
inline void MessagePattern::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline void MessagePattern::clearPatternAndSetApostropheMode(ref<android::icu::text::MessagePattern_ApostropheMode> mode) { return call_method<SCAPIX_META_STRING("clearPatternAndSetApostropheMode"), void>(mode); }
inline jboolean MessagePattern::equals(ref<java::lang::Object> other) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(other); }
inline jint MessagePattern::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<android::icu::text::MessagePattern_ApostropheMode> MessagePattern::getApostropheMode() { return call_method<SCAPIX_META_STRING("getApostropheMode"), ref<android::icu::text::MessagePattern_ApostropheMode>>(); }
inline ref<java::lang::String> MessagePattern::getPatternString() { return call_method<SCAPIX_META_STRING("getPatternString"), ref<java::lang::String>>(); }
inline jboolean MessagePattern::hasNamedArguments() { return call_method<SCAPIX_META_STRING("hasNamedArguments"), jboolean>(); }
inline jboolean MessagePattern::hasNumberedArguments() { return call_method<SCAPIX_META_STRING("hasNumberedArguments"), jboolean>(); }
inline ref<java::lang::String> MessagePattern::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint MessagePattern::validateArgumentName(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("validateArgumentName"), jint>(name); }
inline ref<java::lang::String> MessagePattern::autoQuoteApostropheDeep() { return call_method<SCAPIX_META_STRING("autoQuoteApostropheDeep"), ref<java::lang::String>>(); }
inline jint MessagePattern::countParts() { return call_method<SCAPIX_META_STRING("countParts"), jint>(); }
inline ref<android::icu::text::MessagePattern_Part> MessagePattern::getPart(jint i) { return call_method<SCAPIX_META_STRING("getPart"), ref<android::icu::text::MessagePattern_Part>>(i); }
inline ref<android::icu::text::MessagePattern_Part_Type> MessagePattern::getPartType(jint i) { return call_method<SCAPIX_META_STRING("getPartType"), ref<android::icu::text::MessagePattern_Part_Type>>(i); }
inline jint MessagePattern::getPatternIndex(jint partIndex) { return call_method<SCAPIX_META_STRING("getPatternIndex"), jint>(partIndex); }
inline ref<java::lang::String> MessagePattern::getSubstring(ref<android::icu::text::MessagePattern_Part> part) { return call_method<SCAPIX_META_STRING("getSubstring"), ref<java::lang::String>>(part); }
inline jboolean MessagePattern::partSubstringMatches(ref<android::icu::text::MessagePattern_Part> part, ref<java::lang::String> s) { return call_method<SCAPIX_META_STRING("partSubstringMatches"), jboolean>(part, s); }
inline jdouble MessagePattern::getNumericValue(ref<android::icu::text::MessagePattern_Part> part) { return call_method<SCAPIX_META_STRING("getNumericValue"), jdouble>(part); }
inline jdouble MessagePattern::getPluralOffset(jint pluralStart) { return call_method<SCAPIX_META_STRING("getPluralOffset"), jdouble>(pluralStart); }
inline jint MessagePattern::getLimitPartIndex(jint start) { return call_method<SCAPIX_META_STRING("getLimitPartIndex"), jint>(start); }
inline ref<java::lang::Object> MessagePattern::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline ref<android::icu::text::MessagePattern> MessagePattern::cloneAsThawed() { return call_method<SCAPIX_META_STRING("cloneAsThawed"), ref<android::icu::text::MessagePattern>>(); }
inline ref<android::icu::text::MessagePattern> MessagePattern::freeze() { return call_method<SCAPIX_META_STRING("freeze"), ref<android::icu::text::MessagePattern>>(); }
inline jboolean MessagePattern::isFrozen() { return call_method<SCAPIX_META_STRING("isFrozen"), jboolean>(); }

} // namespace android::icu::text
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_ICU_TEXT_MESSAGEPATTERN_H
