// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_ANDROID_ICU_TEXT_NORMALIZER_H
#define SCAPIX_ANDROID_ICU_TEXT_NORMALIZER_H

namespace scapix::java_api {

namespace android::icu::text { class Normalizer_QuickCheckResult; }
namespace java::lang { class String; }

namespace android::icu::text {

class Normalizer : public object_base<SCAPIX_META_STRING("android/icu/text/Normalizer"),
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	using QuickCheckResult = Normalizer_QuickCheckResult;

	static jint COMPARE_CODE_POINT_ORDER_();
	static jint COMPARE_IGNORE_CASE_();
	static jint FOLD_CASE_DEFAULT_();
	static jint FOLD_CASE_EXCLUDE_SPECIAL_I_();
	static jint INPUT_IS_FCD_();
	static ref<android::icu::text::Normalizer_QuickCheckResult> MAYBE_();
	static ref<android::icu::text::Normalizer_QuickCheckResult> NO_();
	static ref<android::icu::text::Normalizer_QuickCheckResult> YES_();

	ref<java::lang::Object> clone();
	static jint compare(ref<link::java::array<jchar>> s1, jint s1Start, jint s1Limit, ref<link::java::array<jchar>> s2, jint s2Start, jint s2Limit, jint options);
	static jint compare(ref<java::lang::String> s1, ref<java::lang::String> s2, jint options);
	static jint compare(ref<link::java::array<jchar>> s1, ref<link::java::array<jchar>> s2, jint options);
	static jint compare(jint char32a, jint char32b, jint options);
	static jint compare(jint char32a, ref<java::lang::String> str2, jint options);

protected:

	Normalizer(handle_type h) : base_(h) {}

};

} // namespace android::icu::text
} // namespace scapix::java_api

#include <scapix/java_api/android/icu/text/Normalizer_QuickCheckResult.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::icu::text {

inline jint Normalizer::COMPARE_CODE_POINT_ORDER_() { return get_static_field<SCAPIX_META_STRING("COMPARE_CODE_POINT_ORDER"), jint>(); }
inline jint Normalizer::COMPARE_IGNORE_CASE_() { return get_static_field<SCAPIX_META_STRING("COMPARE_IGNORE_CASE"), jint>(); }
inline jint Normalizer::FOLD_CASE_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("FOLD_CASE_DEFAULT"), jint>(); }
inline jint Normalizer::FOLD_CASE_EXCLUDE_SPECIAL_I_() { return get_static_field<SCAPIX_META_STRING("FOLD_CASE_EXCLUDE_SPECIAL_I"), jint>(); }
inline jint Normalizer::INPUT_IS_FCD_() { return get_static_field<SCAPIX_META_STRING("INPUT_IS_FCD"), jint>(); }
inline ref<android::icu::text::Normalizer_QuickCheckResult> Normalizer::MAYBE_() { return get_static_field<SCAPIX_META_STRING("MAYBE"), ref<android::icu::text::Normalizer_QuickCheckResult>>(); }
inline ref<android::icu::text::Normalizer_QuickCheckResult> Normalizer::NO_() { return get_static_field<SCAPIX_META_STRING("NO"), ref<android::icu::text::Normalizer_QuickCheckResult>>(); }
inline ref<android::icu::text::Normalizer_QuickCheckResult> Normalizer::YES_() { return get_static_field<SCAPIX_META_STRING("YES"), ref<android::icu::text::Normalizer_QuickCheckResult>>(); }
inline ref<java::lang::Object> Normalizer::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline jint Normalizer::compare(ref<link::java::array<jchar>> s1, jint s1Start, jint s1Limit, ref<link::java::array<jchar>> s2, jint s2Start, jint s2Limit, jint options) { return call_static_method<SCAPIX_META_STRING("compare"), jint>(s1, s1Start, s1Limit, s2, s2Start, s2Limit, options); }
inline jint Normalizer::compare(ref<java::lang::String> s1, ref<java::lang::String> s2, jint options) { return call_static_method<SCAPIX_META_STRING("compare"), jint>(s1, s2, options); }
inline jint Normalizer::compare(ref<link::java::array<jchar>> s1, ref<link::java::array<jchar>> s2, jint options) { return call_static_method<SCAPIX_META_STRING("compare"), jint>(s1, s2, options); }
inline jint Normalizer::compare(jint char32a, jint char32b, jint options) { return call_static_method<SCAPIX_META_STRING("compare"), jint>(char32a, char32b, options); }
inline jint Normalizer::compare(jint char32a, ref<java::lang::String> str2, jint options) { return call_static_method<SCAPIX_META_STRING("compare"), jint>(char32a, str2, options); }

} // namespace android::icu::text
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_ICU_TEXT_NORMALIZER_H
