// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/icu/text/Collator.h>

#ifndef SCAPIX_ANDROID_ICU_TEXT_RULEBASEDCOLLATOR_H
#define SCAPIX_ANDROID_ICU_TEXT_RULEBASEDCOLLATOR_H

namespace scapix::java_api {

namespace android::icu::text { class CollationElementIterator; }
namespace android::icu::text { class CollationKey; }
namespace android::icu::text { class UCharacterIterator; }
namespace android::icu::text { class UnicodeSet; }
namespace android::icu::util { class VersionInfo; }
namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::text { class CharacterIterator; }

namespace android::icu::text {

class RuleBasedCollator : public object_base<SCAPIX_META_STRING("android/icu/text/RuleBasedCollator"),
	android::icu::text::Collator>
{
public:

	static ref<RuleBasedCollator> new_object(ref<java::lang::String> rules);
	ref<java::lang::Object> clone();
	ref<android::icu::text::CollationElementIterator> getCollationElementIterator(ref<java::lang::String> source);
	ref<android::icu::text::CollationElementIterator> getCollationElementIterator(ref<java::text::CharacterIterator> source);
	ref<android::icu::text::CollationElementIterator> getCollationElementIterator(ref<android::icu::text::UCharacterIterator> source);
	jboolean isFrozen();
	ref<android::icu::text::Collator> freeze();
	ref<android::icu::text::RuleBasedCollator> cloneAsThawed();
	void setUpperCaseFirst(jboolean upperfirst);
	void setLowerCaseFirst(jboolean lowerfirst);
	void setCaseFirstDefault();
	void setAlternateHandlingDefault();
	void setCaseLevelDefault();
	void setDecompositionDefault();
	void setFrenchCollationDefault();
	void setStrengthDefault();
	void setNumericCollationDefault();
	void setFrenchCollation(jboolean flag);
	void setAlternateHandlingShifted(jboolean shifted);
	void setCaseLevel(jboolean flag);
	void setDecomposition(jint decomposition);
	void setStrength(jint newStrength);
	ref<android::icu::text::RuleBasedCollator> setMaxVariable(jint group);
	jint getMaxVariable();
	void setNumericCollation(jboolean flag);
	void setReorderCodes(ref<link::java::array<jint>> order);
	ref<java::lang::String> getRules();
	ref<java::lang::String> getRules(jboolean fullrules);
	ref<android::icu::text::UnicodeSet> getTailoredSet();
	void getContractionsAndExpansions(ref<android::icu::text::UnicodeSet> contractions, ref<android::icu::text::UnicodeSet> expansions, jboolean addPrefixes);
	ref<android::icu::text::CollationKey> getCollationKey(ref<java::lang::String> source);
	jint getStrength();
	jint getDecomposition();
	jboolean isUpperCaseFirst();
	jboolean isLowerCaseFirst();
	jboolean isAlternateHandlingShifted();
	jboolean isCaseLevel();
	jboolean isFrenchCollation();
	jint getVariableTop();
	jboolean getNumericCollation();
	ref<link::java::array<jint>> getReorderCodes();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	jint compare(ref<java::lang::String> source, ref<java::lang::String> target);
	ref<android::icu::util::VersionInfo> getVersion();
	ref<android::icu::util::VersionInfo> getUCAVersion();

protected:

	RuleBasedCollator(handle_type h) : base_(h) {}

};

} // namespace android::icu::text
} // namespace scapix::java_api

#include <scapix/java_api/android/icu/text/CollationElementIterator.h>
#include <scapix/java_api/android/icu/text/CollationKey.h>
#include <scapix/java_api/android/icu/text/UCharacterIterator.h>
#include <scapix/java_api/android/icu/text/UnicodeSet.h>
#include <scapix/java_api/android/icu/util/VersionInfo.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/CharacterIterator.h>

namespace scapix::java_api {
namespace android::icu::text {

inline ref<RuleBasedCollator> RuleBasedCollator::new_object(ref<java::lang::String> rules) { return base_::new_object(rules); }
inline ref<java::lang::Object> RuleBasedCollator::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline ref<android::icu::text::CollationElementIterator> RuleBasedCollator::getCollationElementIterator(ref<java::lang::String> source) { return call_method<SCAPIX_META_STRING("getCollationElementIterator"), ref<android::icu::text::CollationElementIterator>>(source); }
inline ref<android::icu::text::CollationElementIterator> RuleBasedCollator::getCollationElementIterator(ref<java::text::CharacterIterator> source) { return call_method<SCAPIX_META_STRING("getCollationElementIterator"), ref<android::icu::text::CollationElementIterator>>(source); }
inline ref<android::icu::text::CollationElementIterator> RuleBasedCollator::getCollationElementIterator(ref<android::icu::text::UCharacterIterator> source) { return call_method<SCAPIX_META_STRING("getCollationElementIterator"), ref<android::icu::text::CollationElementIterator>>(source); }
inline jboolean RuleBasedCollator::isFrozen() { return call_method<SCAPIX_META_STRING("isFrozen"), jboolean>(); }
inline ref<android::icu::text::Collator> RuleBasedCollator::freeze() { return call_method<SCAPIX_META_STRING("freeze"), ref<android::icu::text::Collator>>(); }
inline ref<android::icu::text::RuleBasedCollator> RuleBasedCollator::cloneAsThawed() { return call_method<SCAPIX_META_STRING("cloneAsThawed"), ref<android::icu::text::RuleBasedCollator>>(); }
inline void RuleBasedCollator::setUpperCaseFirst(jboolean upperfirst) { return call_method<SCAPIX_META_STRING("setUpperCaseFirst"), void>(upperfirst); }
inline void RuleBasedCollator::setLowerCaseFirst(jboolean lowerfirst) { return call_method<SCAPIX_META_STRING("setLowerCaseFirst"), void>(lowerfirst); }
inline void RuleBasedCollator::setCaseFirstDefault() { return call_method<SCAPIX_META_STRING("setCaseFirstDefault"), void>(); }
inline void RuleBasedCollator::setAlternateHandlingDefault() { return call_method<SCAPIX_META_STRING("setAlternateHandlingDefault"), void>(); }
inline void RuleBasedCollator::setCaseLevelDefault() { return call_method<SCAPIX_META_STRING("setCaseLevelDefault"), void>(); }
inline void RuleBasedCollator::setDecompositionDefault() { return call_method<SCAPIX_META_STRING("setDecompositionDefault"), void>(); }
inline void RuleBasedCollator::setFrenchCollationDefault() { return call_method<SCAPIX_META_STRING("setFrenchCollationDefault"), void>(); }
inline void RuleBasedCollator::setStrengthDefault() { return call_method<SCAPIX_META_STRING("setStrengthDefault"), void>(); }
inline void RuleBasedCollator::setNumericCollationDefault() { return call_method<SCAPIX_META_STRING("setNumericCollationDefault"), void>(); }
inline void RuleBasedCollator::setFrenchCollation(jboolean flag) { return call_method<SCAPIX_META_STRING("setFrenchCollation"), void>(flag); }
inline void RuleBasedCollator::setAlternateHandlingShifted(jboolean shifted) { return call_method<SCAPIX_META_STRING("setAlternateHandlingShifted"), void>(shifted); }
inline void RuleBasedCollator::setCaseLevel(jboolean flag) { return call_method<SCAPIX_META_STRING("setCaseLevel"), void>(flag); }
inline void RuleBasedCollator::setDecomposition(jint decomposition) { return call_method<SCAPIX_META_STRING("setDecomposition"), void>(decomposition); }
inline void RuleBasedCollator::setStrength(jint newStrength) { return call_method<SCAPIX_META_STRING("setStrength"), void>(newStrength); }
inline ref<android::icu::text::RuleBasedCollator> RuleBasedCollator::setMaxVariable(jint group) { return call_method<SCAPIX_META_STRING("setMaxVariable"), ref<android::icu::text::RuleBasedCollator>>(group); }
inline jint RuleBasedCollator::getMaxVariable() { return call_method<SCAPIX_META_STRING("getMaxVariable"), jint>(); }
inline void RuleBasedCollator::setNumericCollation(jboolean flag) { return call_method<SCAPIX_META_STRING("setNumericCollation"), void>(flag); }
inline void RuleBasedCollator::setReorderCodes(ref<link::java::array<jint>> order) { return call_method<SCAPIX_META_STRING("setReorderCodes"), void>(order); }
inline ref<java::lang::String> RuleBasedCollator::getRules() { return call_method<SCAPIX_META_STRING("getRules"), ref<java::lang::String>>(); }
inline ref<java::lang::String> RuleBasedCollator::getRules(jboolean fullrules) { return call_method<SCAPIX_META_STRING("getRules"), ref<java::lang::String>>(fullrules); }
inline ref<android::icu::text::UnicodeSet> RuleBasedCollator::getTailoredSet() { return call_method<SCAPIX_META_STRING("getTailoredSet"), ref<android::icu::text::UnicodeSet>>(); }
inline void RuleBasedCollator::getContractionsAndExpansions(ref<android::icu::text::UnicodeSet> contractions, ref<android::icu::text::UnicodeSet> expansions, jboolean addPrefixes) { return call_method<SCAPIX_META_STRING("getContractionsAndExpansions"), void>(contractions, expansions, addPrefixes); }
inline ref<android::icu::text::CollationKey> RuleBasedCollator::getCollationKey(ref<java::lang::String> source) { return call_method<SCAPIX_META_STRING("getCollationKey"), ref<android::icu::text::CollationKey>>(source); }
inline jint RuleBasedCollator::getStrength() { return call_method<SCAPIX_META_STRING("getStrength"), jint>(); }
inline jint RuleBasedCollator::getDecomposition() { return call_method<SCAPIX_META_STRING("getDecomposition"), jint>(); }
inline jboolean RuleBasedCollator::isUpperCaseFirst() { return call_method<SCAPIX_META_STRING("isUpperCaseFirst"), jboolean>(); }
inline jboolean RuleBasedCollator::isLowerCaseFirst() { return call_method<SCAPIX_META_STRING("isLowerCaseFirst"), jboolean>(); }
inline jboolean RuleBasedCollator::isAlternateHandlingShifted() { return call_method<SCAPIX_META_STRING("isAlternateHandlingShifted"), jboolean>(); }
inline jboolean RuleBasedCollator::isCaseLevel() { return call_method<SCAPIX_META_STRING("isCaseLevel"), jboolean>(); }
inline jboolean RuleBasedCollator::isFrenchCollation() { return call_method<SCAPIX_META_STRING("isFrenchCollation"), jboolean>(); }
inline jint RuleBasedCollator::getVariableTop() { return call_method<SCAPIX_META_STRING("getVariableTop"), jint>(); }
inline jboolean RuleBasedCollator::getNumericCollation() { return call_method<SCAPIX_META_STRING("getNumericCollation"), jboolean>(); }
inline ref<link::java::array<jint>> RuleBasedCollator::getReorderCodes() { return call_method<SCAPIX_META_STRING("getReorderCodes"), ref<link::java::array<jint>>>(); }
inline jboolean RuleBasedCollator::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint RuleBasedCollator::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint RuleBasedCollator::compare(ref<java::lang::String> source, ref<java::lang::String> target) { return call_method<SCAPIX_META_STRING("compare"), jint>(source, target); }
inline ref<android::icu::util::VersionInfo> RuleBasedCollator::getVersion() { return call_method<SCAPIX_META_STRING("getVersion"), ref<android::icu::util::VersionInfo>>(); }
inline ref<android::icu::util::VersionInfo> RuleBasedCollator::getUCAVersion() { return call_method<SCAPIX_META_STRING("getUCAVersion"), ref<android::icu::util::VersionInfo>>(); }

} // namespace android::icu::text
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_ICU_TEXT_RULEBASEDCOLLATOR_H
