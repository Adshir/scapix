// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/text/Format.h>

#ifndef SCAPIX_ANDROID_ICU_TEXT_SELECTFORMAT_H
#define SCAPIX_ANDROID_ICU_TEXT_SELECTFORMAT_H

namespace scapix::java_api {

namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::lang { class StringBuffer; }
namespace java::text { class FieldPosition; }
namespace java::text { class ParsePosition; }

namespace android::icu::text {

class SelectFormat : public object_base<SCAPIX_META_STRING("android/icu/text/SelectFormat"),
	java::text::Format>
{
public:

	static ref<SelectFormat> new_object(ref<java::lang::String> pattern);
	void applyPattern(ref<java::lang::String> pattern);
	ref<java::lang::String> toPattern();
	ref<java::lang::String> format(ref<java::lang::String> keyword);
	ref<java::lang::StringBuffer> format(ref<java::lang::Object> keyword, ref<java::lang::StringBuffer> toAppendTo, ref<java::text::FieldPosition> pos);
	ref<java::lang::Object> parseObject(ref<java::lang::String> source, ref<java::text::ParsePosition> pos);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	SelectFormat(handle_type h) : base_(h) {}

};

} // namespace android::icu::text
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/text/FieldPosition.h>
#include <scapix/java_api/java/text/ParsePosition.h>

namespace scapix::java_api {
namespace android::icu::text {

inline ref<SelectFormat> SelectFormat::new_object(ref<java::lang::String> pattern) { return base_::new_object(pattern); }
inline void SelectFormat::applyPattern(ref<java::lang::String> pattern) { return call_method<SCAPIX_META_STRING("applyPattern"), void>(pattern); }
inline ref<java::lang::String> SelectFormat::toPattern() { return call_method<SCAPIX_META_STRING("toPattern"), ref<java::lang::String>>(); }
inline ref<java::lang::String> SelectFormat::format(ref<java::lang::String> keyword) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::String>>(keyword); }
inline ref<java::lang::StringBuffer> SelectFormat::format(ref<java::lang::Object> keyword, ref<java::lang::StringBuffer> toAppendTo, ref<java::text::FieldPosition> pos) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::StringBuffer>>(keyword, toAppendTo, pos); }
inline ref<java::lang::Object> SelectFormat::parseObject(ref<java::lang::String> source, ref<java::text::ParsePosition> pos) { return call_method<SCAPIX_META_STRING("parseObject"), ref<java::lang::Object>>(source, pos); }
inline jboolean SelectFormat::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint SelectFormat::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> SelectFormat::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::icu::text
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_ICU_TEXT_SELECTFORMAT_H
