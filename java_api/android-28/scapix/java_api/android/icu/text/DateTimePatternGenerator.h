// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/icu/util/Freezable.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_ANDROID_ICU_TEXT_DATETIMEPATTERNGENERATOR_H
#define SCAPIX_ANDROID_ICU_TEXT_DATETIMEPATTERNGENERATOR_H

namespace scapix::java_api {

namespace android::icu::text { class DateTimePatternGenerator_PatternInfo; }
namespace android::icu::util { class ULocale; }
namespace java::lang { class String; }
namespace java::util { class Locale; }
namespace java::util { class Map; }
namespace java::util { class Set; }

namespace android::icu::text {

class DateTimePatternGenerator : public object_base<SCAPIX_META_STRING("android/icu/text/DateTimePatternGenerator"),
	java::lang::Object,
	android::icu::util::Freezable,
	java::lang::Cloneable>
{
public:

	using PatternInfo = DateTimePatternGenerator_PatternInfo;

	static jint DAY_();
	static jint DAYPERIOD_();
	static jint DAY_OF_WEEK_IN_MONTH_();
	static jint DAY_OF_YEAR_();
	static jint ERA_();
	static jint FRACTIONAL_SECOND_();
	static jint HOUR_();
	static jint MATCH_ALL_FIELDS_LENGTH_();
	static jint MATCH_HOUR_FIELD_LENGTH_();
	static jint MATCH_NO_OPTIONS_();
	static jint MINUTE_();
	static jint MONTH_();
	static jint QUARTER_();
	static jint SECOND_();
	static jint WEEKDAY_();
	static jint WEEK_OF_MONTH_();
	static jint WEEK_OF_YEAR_();
	static jint YEAR_();
	static jint ZONE_();

	static ref<android::icu::text::DateTimePatternGenerator> getEmptyInstance();
	static ref<android::icu::text::DateTimePatternGenerator> getInstance();
	static ref<android::icu::text::DateTimePatternGenerator> getInstance(ref<android::icu::util::ULocale> uLocale);
	static ref<android::icu::text::DateTimePatternGenerator> getInstance(ref<java::util::Locale> locale);
	ref<java::lang::String> getBestPattern(ref<java::lang::String> skeleton);
	ref<java::lang::String> getBestPattern(ref<java::lang::String> skeleton, jint options);
	ref<android::icu::text::DateTimePatternGenerator> addPattern(ref<java::lang::String> pattern, jboolean override, ref<android::icu::text::DateTimePatternGenerator_PatternInfo> returnInfo);
	ref<java::lang::String> getSkeleton(ref<java::lang::String> pattern);
	ref<java::lang::String> getBaseSkeleton(ref<java::lang::String> pattern);
	ref<java::util::Map> getSkeletons(ref<java::util::Map> result);
	ref<java::util::Set> getBaseSkeletons(ref<java::util::Set> result);
	ref<java::lang::String> replaceFieldTypes(ref<java::lang::String> pattern, ref<java::lang::String> skeleton);
	ref<java::lang::String> replaceFieldTypes(ref<java::lang::String> pattern, ref<java::lang::String> skeleton, jint options);
	void setDateTimeFormat(ref<java::lang::String> dateTimeFormat);
	ref<java::lang::String> getDateTimeFormat();
	void setDecimal(ref<java::lang::String> decimal);
	ref<java::lang::String> getDecimal();
	void setAppendItemFormat(jint field, ref<java::lang::String> value);
	ref<java::lang::String> getAppendItemFormat(jint field);
	void setAppendItemName(jint field, ref<java::lang::String> value);
	ref<java::lang::String> getAppendItemName(jint field);
	jboolean isFrozen();
	ref<android::icu::text::DateTimePatternGenerator> freeze();
	ref<android::icu::text::DateTimePatternGenerator> cloneAsThawed();
	ref<java::lang::Object> clone();

protected:

	DateTimePatternGenerator(handle_type h) : base_(h) {}

};

} // namespace android::icu::text
} // namespace scapix::java_api

#include <scapix/java_api/android/icu/text/DateTimePatternGenerator_PatternInfo.h>
#include <scapix/java_api/android/icu/util/ULocale.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace android::icu::text {

inline jint DateTimePatternGenerator::DAY_() { return get_static_field<SCAPIX_META_STRING("DAY"), jint>(); }
inline jint DateTimePatternGenerator::DAYPERIOD_() { return get_static_field<SCAPIX_META_STRING("DAYPERIOD"), jint>(); }
inline jint DateTimePatternGenerator::DAY_OF_WEEK_IN_MONTH_() { return get_static_field<SCAPIX_META_STRING("DAY_OF_WEEK_IN_MONTH"), jint>(); }
inline jint DateTimePatternGenerator::DAY_OF_YEAR_() { return get_static_field<SCAPIX_META_STRING("DAY_OF_YEAR"), jint>(); }
inline jint DateTimePatternGenerator::ERA_() { return get_static_field<SCAPIX_META_STRING("ERA"), jint>(); }
inline jint DateTimePatternGenerator::FRACTIONAL_SECOND_() { return get_static_field<SCAPIX_META_STRING("FRACTIONAL_SECOND"), jint>(); }
inline jint DateTimePatternGenerator::HOUR_() { return get_static_field<SCAPIX_META_STRING("HOUR"), jint>(); }
inline jint DateTimePatternGenerator::MATCH_ALL_FIELDS_LENGTH_() { return get_static_field<SCAPIX_META_STRING("MATCH_ALL_FIELDS_LENGTH"), jint>(); }
inline jint DateTimePatternGenerator::MATCH_HOUR_FIELD_LENGTH_() { return get_static_field<SCAPIX_META_STRING("MATCH_HOUR_FIELD_LENGTH"), jint>(); }
inline jint DateTimePatternGenerator::MATCH_NO_OPTIONS_() { return get_static_field<SCAPIX_META_STRING("MATCH_NO_OPTIONS"), jint>(); }
inline jint DateTimePatternGenerator::MINUTE_() { return get_static_field<SCAPIX_META_STRING("MINUTE"), jint>(); }
inline jint DateTimePatternGenerator::MONTH_() { return get_static_field<SCAPIX_META_STRING("MONTH"), jint>(); }
inline jint DateTimePatternGenerator::QUARTER_() { return get_static_field<SCAPIX_META_STRING("QUARTER"), jint>(); }
inline jint DateTimePatternGenerator::SECOND_() { return get_static_field<SCAPIX_META_STRING("SECOND"), jint>(); }
inline jint DateTimePatternGenerator::WEEKDAY_() { return get_static_field<SCAPIX_META_STRING("WEEKDAY"), jint>(); }
inline jint DateTimePatternGenerator::WEEK_OF_MONTH_() { return get_static_field<SCAPIX_META_STRING("WEEK_OF_MONTH"), jint>(); }
inline jint DateTimePatternGenerator::WEEK_OF_YEAR_() { return get_static_field<SCAPIX_META_STRING("WEEK_OF_YEAR"), jint>(); }
inline jint DateTimePatternGenerator::YEAR_() { return get_static_field<SCAPIX_META_STRING("YEAR"), jint>(); }
inline jint DateTimePatternGenerator::ZONE_() { return get_static_field<SCAPIX_META_STRING("ZONE"), jint>(); }
inline ref<android::icu::text::DateTimePatternGenerator> DateTimePatternGenerator::getEmptyInstance() { return call_static_method<SCAPIX_META_STRING("getEmptyInstance"), ref<android::icu::text::DateTimePatternGenerator>>(); }
inline ref<android::icu::text::DateTimePatternGenerator> DateTimePatternGenerator::getInstance() { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<android::icu::text::DateTimePatternGenerator>>(); }
inline ref<android::icu::text::DateTimePatternGenerator> DateTimePatternGenerator::getInstance(ref<android::icu::util::ULocale> uLocale) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<android::icu::text::DateTimePatternGenerator>>(uLocale); }
inline ref<android::icu::text::DateTimePatternGenerator> DateTimePatternGenerator::getInstance(ref<java::util::Locale> locale) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<android::icu::text::DateTimePatternGenerator>>(locale); }
inline ref<java::lang::String> DateTimePatternGenerator::getBestPattern(ref<java::lang::String> skeleton) { return call_method<SCAPIX_META_STRING("getBestPattern"), ref<java::lang::String>>(skeleton); }
inline ref<java::lang::String> DateTimePatternGenerator::getBestPattern(ref<java::lang::String> skeleton, jint options) { return call_method<SCAPIX_META_STRING("getBestPattern"), ref<java::lang::String>>(skeleton, options); }
inline ref<android::icu::text::DateTimePatternGenerator> DateTimePatternGenerator::addPattern(ref<java::lang::String> pattern, jboolean override, ref<android::icu::text::DateTimePatternGenerator_PatternInfo> returnInfo) { return call_method<SCAPIX_META_STRING("addPattern"), ref<android::icu::text::DateTimePatternGenerator>>(pattern, override, returnInfo); }
inline ref<java::lang::String> DateTimePatternGenerator::getSkeleton(ref<java::lang::String> pattern) { return call_method<SCAPIX_META_STRING("getSkeleton"), ref<java::lang::String>>(pattern); }
inline ref<java::lang::String> DateTimePatternGenerator::getBaseSkeleton(ref<java::lang::String> pattern) { return call_method<SCAPIX_META_STRING("getBaseSkeleton"), ref<java::lang::String>>(pattern); }
inline ref<java::util::Map> DateTimePatternGenerator::getSkeletons(ref<java::util::Map> result) { return call_method<SCAPIX_META_STRING("getSkeletons"), ref<java::util::Map>>(result); }
inline ref<java::util::Set> DateTimePatternGenerator::getBaseSkeletons(ref<java::util::Set> result) { return call_method<SCAPIX_META_STRING("getBaseSkeletons"), ref<java::util::Set>>(result); }
inline ref<java::lang::String> DateTimePatternGenerator::replaceFieldTypes(ref<java::lang::String> pattern, ref<java::lang::String> skeleton) { return call_method<SCAPIX_META_STRING("replaceFieldTypes"), ref<java::lang::String>>(pattern, skeleton); }
inline ref<java::lang::String> DateTimePatternGenerator::replaceFieldTypes(ref<java::lang::String> pattern, ref<java::lang::String> skeleton, jint options) { return call_method<SCAPIX_META_STRING("replaceFieldTypes"), ref<java::lang::String>>(pattern, skeleton, options); }
inline void DateTimePatternGenerator::setDateTimeFormat(ref<java::lang::String> dateTimeFormat) { return call_method<SCAPIX_META_STRING("setDateTimeFormat"), void>(dateTimeFormat); }
inline ref<java::lang::String> DateTimePatternGenerator::getDateTimeFormat() { return call_method<SCAPIX_META_STRING("getDateTimeFormat"), ref<java::lang::String>>(); }
inline void DateTimePatternGenerator::setDecimal(ref<java::lang::String> decimal) { return call_method<SCAPIX_META_STRING("setDecimal"), void>(decimal); }
inline ref<java::lang::String> DateTimePatternGenerator::getDecimal() { return call_method<SCAPIX_META_STRING("getDecimal"), ref<java::lang::String>>(); }
inline void DateTimePatternGenerator::setAppendItemFormat(jint field, ref<java::lang::String> value) { return call_method<SCAPIX_META_STRING("setAppendItemFormat"), void>(field, value); }
inline ref<java::lang::String> DateTimePatternGenerator::getAppendItemFormat(jint field) { return call_method<SCAPIX_META_STRING("getAppendItemFormat"), ref<java::lang::String>>(field); }
inline void DateTimePatternGenerator::setAppendItemName(jint field, ref<java::lang::String> value) { return call_method<SCAPIX_META_STRING("setAppendItemName"), void>(field, value); }
inline ref<java::lang::String> DateTimePatternGenerator::getAppendItemName(jint field) { return call_method<SCAPIX_META_STRING("getAppendItemName"), ref<java::lang::String>>(field); }
inline jboolean DateTimePatternGenerator::isFrozen() { return call_method<SCAPIX_META_STRING("isFrozen"), jboolean>(); }
inline ref<android::icu::text::DateTimePatternGenerator> DateTimePatternGenerator::freeze() { return call_method<SCAPIX_META_STRING("freeze"), ref<android::icu::text::DateTimePatternGenerator>>(); }
inline ref<android::icu::text::DateTimePatternGenerator> DateTimePatternGenerator::cloneAsThawed() { return call_method<SCAPIX_META_STRING("cloneAsThawed"), ref<android::icu::text::DateTimePatternGenerator>>(); }
inline ref<java::lang::Object> DateTimePatternGenerator::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }

} // namespace android::icu::text
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_ICU_TEXT_DATETIMEPATTERNGENERATOR_H
