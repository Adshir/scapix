// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/icu/text/UFormat.h>

#ifndef SCAPIX_ANDROID_ICU_TEXT_PLURALFORMAT_H
#define SCAPIX_ANDROID_ICU_TEXT_PLURALFORMAT_H

namespace scapix::java_api {

namespace android::icu::text { class NumberFormat; }
namespace android::icu::text { class PluralRules; }
namespace android::icu::text { class PluralRules_PluralType; }
namespace android::icu::util { class ULocale; }
namespace java::lang { class Number; }
namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::lang { class StringBuffer; }
namespace java::text { class FieldPosition; }
namespace java::text { class ParsePosition; }
namespace java::util { class Locale; }

namespace android::icu::text {

class PluralFormat : public object_base<SCAPIX_META_STRING("android/icu/text/PluralFormat"),
	android::icu::text::UFormat>
{
public:

	static ref<PluralFormat> new_object();
	static ref<PluralFormat> new_object(ref<android::icu::util::ULocale> ulocale);
	static ref<PluralFormat> new_object(ref<java::util::Locale> locale);
	static ref<PluralFormat> new_object(ref<android::icu::text::PluralRules> rules);
	static ref<PluralFormat> new_object(ref<android::icu::util::ULocale> ulocale, ref<android::icu::text::PluralRules> rules);
	static ref<PluralFormat> new_object(ref<java::util::Locale> locale, ref<android::icu::text::PluralRules> rules);
	static ref<PluralFormat> new_object(ref<android::icu::util::ULocale> ulocale, ref<android::icu::text::PluralRules_PluralType> type);
	static ref<PluralFormat> new_object(ref<java::util::Locale> locale, ref<android::icu::text::PluralRules_PluralType> type);
	static ref<PluralFormat> new_object(ref<java::lang::String> pattern);
	static ref<PluralFormat> new_object(ref<android::icu::util::ULocale> ulocale, ref<java::lang::String> pattern);
	static ref<PluralFormat> new_object(ref<android::icu::text::PluralRules> rules, ref<java::lang::String> pattern);
	static ref<PluralFormat> new_object(ref<android::icu::util::ULocale> ulocale, ref<android::icu::text::PluralRules> rules, ref<java::lang::String> pattern);
	static ref<PluralFormat> new_object(ref<android::icu::util::ULocale> ulocale, ref<android::icu::text::PluralRules_PluralType> type, ref<java::lang::String> pattern);
	void applyPattern(ref<java::lang::String> pattern);
	ref<java::lang::String> toPattern();
	ref<java::lang::String> format(jdouble number);
	ref<java::lang::StringBuffer> format(ref<java::lang::Object> number, ref<java::lang::StringBuffer> toAppendTo, ref<java::text::FieldPosition> pos);
	ref<java::lang::Number> parse(ref<java::lang::String> text, ref<java::text::ParsePosition> parsePosition);
	ref<java::lang::Object> parseObject(ref<java::lang::String> source, ref<java::text::ParsePosition> pos);
	void setNumberFormat(ref<android::icu::text::NumberFormat> format);
	jboolean equals(ref<java::lang::Object> rhs);
	jboolean equals(ref<android::icu::text::PluralFormat> rhs);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	PluralFormat(handle_type h) : base_(h) {}

};

} // namespace android::icu::text
} // namespace scapix::java_api

#include <scapix/java_api/android/icu/text/NumberFormat.h>
#include <scapix/java_api/android/icu/text/PluralRules.h>
#include <scapix/java_api/android/icu/text/PluralRules_PluralType.h>
#include <scapix/java_api/android/icu/util/ULocale.h>
#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/text/FieldPosition.h>
#include <scapix/java_api/java/text/ParsePosition.h>
#include <scapix/java_api/java/util/Locale.h>

namespace scapix::java_api {
namespace android::icu::text {

inline ref<PluralFormat> PluralFormat::new_object() { return base_::new_object(); }
inline ref<PluralFormat> PluralFormat::new_object(ref<android::icu::util::ULocale> ulocale) { return base_::new_object(ulocale); }
inline ref<PluralFormat> PluralFormat::new_object(ref<java::util::Locale> locale) { return base_::new_object(locale); }
inline ref<PluralFormat> PluralFormat::new_object(ref<android::icu::text::PluralRules> rules) { return base_::new_object(rules); }
inline ref<PluralFormat> PluralFormat::new_object(ref<android::icu::util::ULocale> ulocale, ref<android::icu::text::PluralRules> rules) { return base_::new_object(ulocale, rules); }
inline ref<PluralFormat> PluralFormat::new_object(ref<java::util::Locale> locale, ref<android::icu::text::PluralRules> rules) { return base_::new_object(locale, rules); }
inline ref<PluralFormat> PluralFormat::new_object(ref<android::icu::util::ULocale> ulocale, ref<android::icu::text::PluralRules_PluralType> type) { return base_::new_object(ulocale, type); }
inline ref<PluralFormat> PluralFormat::new_object(ref<java::util::Locale> locale, ref<android::icu::text::PluralRules_PluralType> type) { return base_::new_object(locale, type); }
inline ref<PluralFormat> PluralFormat::new_object(ref<java::lang::String> pattern) { return base_::new_object(pattern); }
inline ref<PluralFormat> PluralFormat::new_object(ref<android::icu::util::ULocale> ulocale, ref<java::lang::String> pattern) { return base_::new_object(ulocale, pattern); }
inline ref<PluralFormat> PluralFormat::new_object(ref<android::icu::text::PluralRules> rules, ref<java::lang::String> pattern) { return base_::new_object(rules, pattern); }
inline ref<PluralFormat> PluralFormat::new_object(ref<android::icu::util::ULocale> ulocale, ref<android::icu::text::PluralRules> rules, ref<java::lang::String> pattern) { return base_::new_object(ulocale, rules, pattern); }
inline ref<PluralFormat> PluralFormat::new_object(ref<android::icu::util::ULocale> ulocale, ref<android::icu::text::PluralRules_PluralType> type, ref<java::lang::String> pattern) { return base_::new_object(ulocale, type, pattern); }
inline void PluralFormat::applyPattern(ref<java::lang::String> pattern) { return call_method<SCAPIX_META_STRING("applyPattern"), void>(pattern); }
inline ref<java::lang::String> PluralFormat::toPattern() { return call_method<SCAPIX_META_STRING("toPattern"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PluralFormat::format(jdouble number) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::String>>(number); }
inline ref<java::lang::StringBuffer> PluralFormat::format(ref<java::lang::Object> number, ref<java::lang::StringBuffer> toAppendTo, ref<java::text::FieldPosition> pos) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::StringBuffer>>(number, toAppendTo, pos); }
inline ref<java::lang::Number> PluralFormat::parse(ref<java::lang::String> text, ref<java::text::ParsePosition> parsePosition) { return call_method<SCAPIX_META_STRING("parse"), ref<java::lang::Number>>(text, parsePosition); }
inline ref<java::lang::Object> PluralFormat::parseObject(ref<java::lang::String> source, ref<java::text::ParsePosition> pos) { return call_method<SCAPIX_META_STRING("parseObject"), ref<java::lang::Object>>(source, pos); }
inline void PluralFormat::setNumberFormat(ref<android::icu::text::NumberFormat> format) { return call_method<SCAPIX_META_STRING("setNumberFormat"), void>(format); }
inline jboolean PluralFormat::equals(ref<java::lang::Object> rhs) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(rhs); }
inline jboolean PluralFormat::equals(ref<android::icu::text::PluralFormat> rhs) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(rhs); }
inline jint PluralFormat::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> PluralFormat::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::icu::text
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_ICU_TEXT_PLURALFORMAT_H
