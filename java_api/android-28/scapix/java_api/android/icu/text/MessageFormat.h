// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/icu/text/UFormat.h>

#ifndef SCAPIX_ANDROID_ICU_TEXT_MESSAGEFORMAT_H
#define SCAPIX_ANDROID_ICU_TEXT_MESSAGEFORMAT_H

namespace scapix::java_api {

namespace android::icu::text { class MessagePattern_ApostropheMode; }
namespace android::icu::util { class ULocale; }
namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::lang { class StringBuffer; }
namespace java::text { class AttributedCharacterIterator; }
namespace java::text { class FieldPosition; }
namespace java::text { class Format; }
namespace java::text { class ParsePosition; }
namespace java::util { class Locale; }
namespace java::util { class Map; }
namespace java::util { class Set; }
namespace android::icu::text { class MessageFormat_Field; }

namespace android::icu::text {

class MessageFormat : public object_base<SCAPIX_META_STRING("android/icu/text/MessageFormat"),
	android::icu::text::UFormat>
{
public:

	using Field = MessageFormat_Field;

	static ref<MessageFormat> new_object(ref<java::lang::String> pattern);
	static ref<MessageFormat> new_object(ref<java::lang::String> pattern, ref<java::util::Locale> locale);
	static ref<MessageFormat> new_object(ref<java::lang::String> pattern, ref<android::icu::util::ULocale> locale);
	void setLocale(ref<java::util::Locale> locale);
	void setLocale(ref<android::icu::util::ULocale> locale);
	ref<java::util::Locale> getLocale();
	ref<android::icu::util::ULocale> getULocale();
	void applyPattern(ref<java::lang::String> pttrn);
	void applyPattern(ref<java::lang::String> pattern, ref<android::icu::text::MessagePattern_ApostropheMode> aposMode);
	ref<android::icu::text::MessagePattern_ApostropheMode> getApostropheMode();
	ref<java::lang::String> toPattern();
	void setFormatsByArgumentIndex(ref<link::java::array<java::text::Format>> newFormats);
	void setFormatsByArgumentName(ref<java::util::Map> newFormats);
	void setFormats(ref<link::java::array<java::text::Format>> newFormats);
	void setFormatByArgumentIndex(jint argumentIndex, ref<java::text::Format> newFormat);
	void setFormatByArgumentName(ref<java::lang::String> argumentName, ref<java::text::Format> newFormat);
	void setFormat(jint formatElementIndex, ref<java::text::Format> newFormat);
	ref<link::java::array<java::text::Format>> getFormatsByArgumentIndex();
	ref<link::java::array<java::text::Format>> getFormats();
	ref<java::util::Set> getArgumentNames();
	ref<java::text::Format> getFormatByArgumentName(ref<java::lang::String> argumentName);
	ref<java::lang::StringBuffer> format(ref<link::java::array<java::lang::Object>> arguments, ref<java::lang::StringBuffer> result, ref<java::text::FieldPosition> pos);
	ref<java::lang::StringBuffer> format(ref<java::util::Map> arguments, ref<java::lang::StringBuffer> result, ref<java::text::FieldPosition> pos);
	static ref<java::lang::String> format(ref<java::lang::String> pattern, ref<link::java::array<java::lang::Object>> arguments);
	static ref<java::lang::String> format(ref<java::lang::String> pattern, ref<java::util::Map> arguments);
	jboolean usesNamedArguments();
	ref<java::lang::StringBuffer> format(ref<java::lang::Object> arguments, ref<java::lang::StringBuffer> result, ref<java::text::FieldPosition> pos);
	ref<java::text::AttributedCharacterIterator> formatToCharacterIterator(ref<java::lang::Object> arguments);
	ref<link::java::array<java::lang::Object>> parse(ref<java::lang::String> source, ref<java::text::ParsePosition> pos);
	ref<java::util::Map> parseToMap(ref<java::lang::String> source, ref<java::text::ParsePosition> pos);
	ref<link::java::array<java::lang::Object>> parse(ref<java::lang::String> source);
	ref<java::util::Map> parseToMap(ref<java::lang::String> source);
	ref<java::lang::Object> parseObject(ref<java::lang::String> source, ref<java::text::ParsePosition> pos);
	ref<java::lang::Object> clone();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	static ref<java::lang::String> autoQuoteApostrophe(ref<java::lang::String> pattern);

protected:

	MessageFormat(handle_type h) : base_(h) {}

};

} // namespace android::icu::text
} // namespace scapix::java_api

#include <scapix/java_api/android/icu/text/MessagePattern_ApostropheMode.h>
#include <scapix/java_api/android/icu/util/ULocale.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/text/AttributedCharacterIterator.h>
#include <scapix/java_api/java/text/FieldPosition.h>
#include <scapix/java_api/java/text/Format.h>
#include <scapix/java_api/java/text/ParsePosition.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace android::icu::text {

inline ref<MessageFormat> MessageFormat::new_object(ref<java::lang::String> pattern) { return base_::new_object(pattern); }
inline ref<MessageFormat> MessageFormat::new_object(ref<java::lang::String> pattern, ref<java::util::Locale> locale) { return base_::new_object(pattern, locale); }
inline ref<MessageFormat> MessageFormat::new_object(ref<java::lang::String> pattern, ref<android::icu::util::ULocale> locale) { return base_::new_object(pattern, locale); }
inline void MessageFormat::setLocale(ref<java::util::Locale> locale) { return call_method<SCAPIX_META_STRING("setLocale"), void>(locale); }
inline void MessageFormat::setLocale(ref<android::icu::util::ULocale> locale) { return call_method<SCAPIX_META_STRING("setLocale"), void>(locale); }
inline ref<java::util::Locale> MessageFormat::getLocale() { return call_method<SCAPIX_META_STRING("getLocale"), ref<java::util::Locale>>(); }
inline ref<android::icu::util::ULocale> MessageFormat::getULocale() { return call_method<SCAPIX_META_STRING("getULocale"), ref<android::icu::util::ULocale>>(); }
inline void MessageFormat::applyPattern(ref<java::lang::String> pttrn) { return call_method<SCAPIX_META_STRING("applyPattern"), void>(pttrn); }
inline void MessageFormat::applyPattern(ref<java::lang::String> pattern, ref<android::icu::text::MessagePattern_ApostropheMode> aposMode) { return call_method<SCAPIX_META_STRING("applyPattern"), void>(pattern, aposMode); }
inline ref<android::icu::text::MessagePattern_ApostropheMode> MessageFormat::getApostropheMode() { return call_method<SCAPIX_META_STRING("getApostropheMode"), ref<android::icu::text::MessagePattern_ApostropheMode>>(); }
inline ref<java::lang::String> MessageFormat::toPattern() { return call_method<SCAPIX_META_STRING("toPattern"), ref<java::lang::String>>(); }
inline void MessageFormat::setFormatsByArgumentIndex(ref<link::java::array<java::text::Format>> newFormats) { return call_method<SCAPIX_META_STRING("setFormatsByArgumentIndex"), void>(newFormats); }
inline void MessageFormat::setFormatsByArgumentName(ref<java::util::Map> newFormats) { return call_method<SCAPIX_META_STRING("setFormatsByArgumentName"), void>(newFormats); }
inline void MessageFormat::setFormats(ref<link::java::array<java::text::Format>> newFormats) { return call_method<SCAPIX_META_STRING("setFormats"), void>(newFormats); }
inline void MessageFormat::setFormatByArgumentIndex(jint argumentIndex, ref<java::text::Format> newFormat) { return call_method<SCAPIX_META_STRING("setFormatByArgumentIndex"), void>(argumentIndex, newFormat); }
inline void MessageFormat::setFormatByArgumentName(ref<java::lang::String> argumentName, ref<java::text::Format> newFormat) { return call_method<SCAPIX_META_STRING("setFormatByArgumentName"), void>(argumentName, newFormat); }
inline void MessageFormat::setFormat(jint formatElementIndex, ref<java::text::Format> newFormat) { return call_method<SCAPIX_META_STRING("setFormat"), void>(formatElementIndex, newFormat); }
inline ref<link::java::array<java::text::Format>> MessageFormat::getFormatsByArgumentIndex() { return call_method<SCAPIX_META_STRING("getFormatsByArgumentIndex"), ref<link::java::array<java::text::Format>>>(); }
inline ref<link::java::array<java::text::Format>> MessageFormat::getFormats() { return call_method<SCAPIX_META_STRING("getFormats"), ref<link::java::array<java::text::Format>>>(); }
inline ref<java::util::Set> MessageFormat::getArgumentNames() { return call_method<SCAPIX_META_STRING("getArgumentNames"), ref<java::util::Set>>(); }
inline ref<java::text::Format> MessageFormat::getFormatByArgumentName(ref<java::lang::String> argumentName) { return call_method<SCAPIX_META_STRING("getFormatByArgumentName"), ref<java::text::Format>>(argumentName); }
inline ref<java::lang::StringBuffer> MessageFormat::format(ref<link::java::array<java::lang::Object>> arguments, ref<java::lang::StringBuffer> result, ref<java::text::FieldPosition> pos) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::StringBuffer>>(arguments, result, pos); }
inline ref<java::lang::StringBuffer> MessageFormat::format(ref<java::util::Map> arguments, ref<java::lang::StringBuffer> result, ref<java::text::FieldPosition> pos) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::StringBuffer>>(arguments, result, pos); }
inline ref<java::lang::String> MessageFormat::format(ref<java::lang::String> pattern, ref<link::java::array<java::lang::Object>> arguments) { return call_static_method<SCAPIX_META_STRING("format"), ref<java::lang::String>>(pattern, arguments); }
inline ref<java::lang::String> MessageFormat::format(ref<java::lang::String> pattern, ref<java::util::Map> arguments) { return call_static_method<SCAPIX_META_STRING("format"), ref<java::lang::String>>(pattern, arguments); }
inline jboolean MessageFormat::usesNamedArguments() { return call_method<SCAPIX_META_STRING("usesNamedArguments"), jboolean>(); }
inline ref<java::lang::StringBuffer> MessageFormat::format(ref<java::lang::Object> arguments, ref<java::lang::StringBuffer> result, ref<java::text::FieldPosition> pos) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::StringBuffer>>(arguments, result, pos); }
inline ref<java::text::AttributedCharacterIterator> MessageFormat::formatToCharacterIterator(ref<java::lang::Object> arguments) { return call_method<SCAPIX_META_STRING("formatToCharacterIterator"), ref<java::text::AttributedCharacterIterator>>(arguments); }
inline ref<link::java::array<java::lang::Object>> MessageFormat::parse(ref<java::lang::String> source, ref<java::text::ParsePosition> pos) { return call_method<SCAPIX_META_STRING("parse"), ref<link::java::array<java::lang::Object>>>(source, pos); }
inline ref<java::util::Map> MessageFormat::parseToMap(ref<java::lang::String> source, ref<java::text::ParsePosition> pos) { return call_method<SCAPIX_META_STRING("parseToMap"), ref<java::util::Map>>(source, pos); }
inline ref<link::java::array<java::lang::Object>> MessageFormat::parse(ref<java::lang::String> source) { return call_method<SCAPIX_META_STRING("parse"), ref<link::java::array<java::lang::Object>>>(source); }
inline ref<java::util::Map> MessageFormat::parseToMap(ref<java::lang::String> source) { return call_method<SCAPIX_META_STRING("parseToMap"), ref<java::util::Map>>(source); }
inline ref<java::lang::Object> MessageFormat::parseObject(ref<java::lang::String> source, ref<java::text::ParsePosition> pos) { return call_method<SCAPIX_META_STRING("parseObject"), ref<java::lang::Object>>(source, pos); }
inline ref<java::lang::Object> MessageFormat::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline jboolean MessageFormat::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint MessageFormat::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> MessageFormat::autoQuoteApostrophe(ref<java::lang::String> pattern) { return call_static_method<SCAPIX_META_STRING("autoQuoteApostrophe"), ref<java::lang::String>>(pattern); }

} // namespace android::icu::text
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_ICU_TEXT_MESSAGEFORMAT_H
