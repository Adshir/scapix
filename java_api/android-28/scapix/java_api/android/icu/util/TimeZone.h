// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/android/icu/util/Freezable.h>

#ifndef SCAPIX_ANDROID_ICU_UTIL_TIMEZONE_H
#define SCAPIX_ANDROID_ICU_UTIL_TIMEZONE_H

namespace scapix::java_api {

namespace android::icu::util { class TimeZone_SystemTimeZoneType; }
namespace android::icu::util { class ULocale; }
namespace java::lang { class Integer; }
namespace java::lang { class String; }
namespace java::util { class Date; }
namespace java::util { class Locale; }
namespace java::util { class Set; }

namespace android::icu::util {

class TimeZone : public object_base<SCAPIX_META_STRING("android/icu/util/TimeZone"),
	java::lang::Object,
	java::io::Serializable,
	java::lang::Cloneable,
	android::icu::util::Freezable>
{
public:

	using SystemTimeZoneType = TimeZone_SystemTimeZoneType;

	static jint GENERIC_LOCATION_();
	static ref<android::icu::util::TimeZone> GMT_ZONE_();
	static jint LONG_();
	static jint LONG_GENERIC_();
	static jint LONG_GMT_();
	static jint SHORT_();
	static jint SHORT_COMMONLY_USED_();
	static jint SHORT_GENERIC_();
	static jint SHORT_GMT_();
	static jint TIMEZONE_ICU_();
	static jint TIMEZONE_JDK_();
	static ref<android::icu::util::TimeZone> UNKNOWN_ZONE_();
	static ref<java::lang::String> UNKNOWN_ZONE_ID_();

	static ref<TimeZone> new_object();
	jint getOffset(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6);
	jint getOffset(jlong date);
	void getOffset(jlong date, jboolean p2, ref<link::java::array<jint>> local);
	void setRawOffset(jint p1);
	jint getRawOffset();
	ref<java::lang::String> getID();
	void setID(ref<java::lang::String> ID_);
	ref<java::lang::String> getDisplayName();
	ref<java::lang::String> getDisplayName(ref<java::util::Locale> locale);
	ref<java::lang::String> getDisplayName(ref<android::icu::util::ULocale> locale);
	ref<java::lang::String> getDisplayName(jboolean daylight, jint style);
	ref<java::lang::String> getDisplayName(jboolean daylight, jint style, ref<java::util::Locale> locale);
	ref<java::lang::String> getDisplayName(jboolean daylight, jint style, ref<android::icu::util::ULocale> locale);
	jint getDSTSavings();
	jboolean useDaylightTime();
	jboolean observesDaylightTime();
	jboolean inDaylightTime(ref<java::util::Date> p1);
	static ref<android::icu::util::TimeZone> getTimeZone(ref<java::lang::String> ID_);
	static ref<android::icu::util::TimeZone> getFrozenTimeZone(ref<java::lang::String> ID_);
	static ref<android::icu::util::TimeZone> getTimeZone(ref<java::lang::String> ID_, jint type);
	static ref<java::util::Set> getAvailableIDs(ref<android::icu::util::TimeZone_SystemTimeZoneType> zoneType, ref<java::lang::String> region, ref<java::lang::Integer> rawOffset);
	static ref<link::java::array<java::lang::String>> getAvailableIDs(jint rawOffset);
	static ref<link::java::array<java::lang::String>> getAvailableIDs(ref<java::lang::String> country);
	static ref<link::java::array<java::lang::String>> getAvailableIDs();
	static jint countEquivalentIDs(ref<java::lang::String> id);
	static ref<java::lang::String> getEquivalentID(ref<java::lang::String> id, jint index);
	static ref<android::icu::util::TimeZone> getDefault();
	jboolean hasSameRules(ref<android::icu::util::TimeZone> other);
	ref<java::lang::Object> clone();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	static ref<java::lang::String> getTZDataVersion();
	static ref<java::lang::String> getCanonicalID(ref<java::lang::String> id);
	static ref<java::lang::String> getCanonicalID(ref<java::lang::String> id, ref<link::java::array<jboolean>> isSystemID);
	static ref<java::lang::String> getRegion(ref<java::lang::String> id);
	static ref<java::lang::String> getWindowsID(ref<java::lang::String> id);
	static ref<java::lang::String> getIDForWindowsID(ref<java::lang::String> winid, ref<java::lang::String> region);
	jboolean isFrozen();
	ref<android::icu::util::TimeZone> freeze();
	ref<android::icu::util::TimeZone> cloneAsThawed();

protected:

	TimeZone(handle_type h) : base_(h) {}

};

} // namespace android::icu::util
} // namespace scapix::java_api

#include <scapix/java_api/android/icu/util/TimeZone_SystemTimeZoneType.h>
#include <scapix/java_api/android/icu/util/ULocale.h>
#include <scapix/java_api/java/lang/Integer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace android::icu::util {

inline jint TimeZone::GENERIC_LOCATION_() { return get_static_field<SCAPIX_META_STRING("GENERIC_LOCATION"), jint>(); }
inline ref<android::icu::util::TimeZone> TimeZone::GMT_ZONE_() { return get_static_field<SCAPIX_META_STRING("GMT_ZONE"), ref<android::icu::util::TimeZone>>(); }
inline jint TimeZone::LONG_() { return get_static_field<SCAPIX_META_STRING("LONG"), jint>(); }
inline jint TimeZone::LONG_GENERIC_() { return get_static_field<SCAPIX_META_STRING("LONG_GENERIC"), jint>(); }
inline jint TimeZone::LONG_GMT_() { return get_static_field<SCAPIX_META_STRING("LONG_GMT"), jint>(); }
inline jint TimeZone::SHORT_() { return get_static_field<SCAPIX_META_STRING("SHORT"), jint>(); }
inline jint TimeZone::SHORT_COMMONLY_USED_() { return get_static_field<SCAPIX_META_STRING("SHORT_COMMONLY_USED"), jint>(); }
inline jint TimeZone::SHORT_GENERIC_() { return get_static_field<SCAPIX_META_STRING("SHORT_GENERIC"), jint>(); }
inline jint TimeZone::SHORT_GMT_() { return get_static_field<SCAPIX_META_STRING("SHORT_GMT"), jint>(); }
inline jint TimeZone::TIMEZONE_ICU_() { return get_static_field<SCAPIX_META_STRING("TIMEZONE_ICU"), jint>(); }
inline jint TimeZone::TIMEZONE_JDK_() { return get_static_field<SCAPIX_META_STRING("TIMEZONE_JDK"), jint>(); }
inline ref<android::icu::util::TimeZone> TimeZone::UNKNOWN_ZONE_() { return get_static_field<SCAPIX_META_STRING("UNKNOWN_ZONE"), ref<android::icu::util::TimeZone>>(); }
inline ref<java::lang::String> TimeZone::UNKNOWN_ZONE_ID_() { return get_static_field<SCAPIX_META_STRING("UNKNOWN_ZONE_ID"), ref<java::lang::String>>(); }
inline ref<TimeZone> TimeZone::new_object() { return base_::new_object(); }
inline jint TimeZone::getOffset(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<SCAPIX_META_STRING("getOffset"), jint>(p1, p2, p3, p4, p5, p6); }
inline jint TimeZone::getOffset(jlong date) { return call_method<SCAPIX_META_STRING("getOffset"), jint>(date); }
inline void TimeZone::getOffset(jlong date, jboolean p2, ref<link::java::array<jint>> local) { return call_method<SCAPIX_META_STRING("getOffset"), void>(date, p2, local); }
inline void TimeZone::setRawOffset(jint p1) { return call_method<SCAPIX_META_STRING("setRawOffset"), void>(p1); }
inline jint TimeZone::getRawOffset() { return call_method<SCAPIX_META_STRING("getRawOffset"), jint>(); }
inline ref<java::lang::String> TimeZone::getID() { return call_method<SCAPIX_META_STRING("getID"), ref<java::lang::String>>(); }
inline void TimeZone::setID(ref<java::lang::String> ID_) { return call_method<SCAPIX_META_STRING("setID"), void>(ID_); }
inline ref<java::lang::String> TimeZone::getDisplayName() { return call_method<SCAPIX_META_STRING("getDisplayName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> TimeZone::getDisplayName(ref<java::util::Locale> locale) { return call_method<SCAPIX_META_STRING("getDisplayName"), ref<java::lang::String>>(locale); }
inline ref<java::lang::String> TimeZone::getDisplayName(ref<android::icu::util::ULocale> locale) { return call_method<SCAPIX_META_STRING("getDisplayName"), ref<java::lang::String>>(locale); }
inline ref<java::lang::String> TimeZone::getDisplayName(jboolean daylight, jint style) { return call_method<SCAPIX_META_STRING("getDisplayName"), ref<java::lang::String>>(daylight, style); }
inline ref<java::lang::String> TimeZone::getDisplayName(jboolean daylight, jint style, ref<java::util::Locale> locale) { return call_method<SCAPIX_META_STRING("getDisplayName"), ref<java::lang::String>>(daylight, style, locale); }
inline ref<java::lang::String> TimeZone::getDisplayName(jboolean daylight, jint style, ref<android::icu::util::ULocale> locale) { return call_method<SCAPIX_META_STRING("getDisplayName"), ref<java::lang::String>>(daylight, style, locale); }
inline jint TimeZone::getDSTSavings() { return call_method<SCAPIX_META_STRING("getDSTSavings"), jint>(); }
inline jboolean TimeZone::useDaylightTime() { return call_method<SCAPIX_META_STRING("useDaylightTime"), jboolean>(); }
inline jboolean TimeZone::observesDaylightTime() { return call_method<SCAPIX_META_STRING("observesDaylightTime"), jboolean>(); }
inline jboolean TimeZone::inDaylightTime(ref<java::util::Date> p1) { return call_method<SCAPIX_META_STRING("inDaylightTime"), jboolean>(p1); }
inline ref<android::icu::util::TimeZone> TimeZone::getTimeZone(ref<java::lang::String> ID_) { return call_static_method<SCAPIX_META_STRING("getTimeZone"), ref<android::icu::util::TimeZone>>(ID_); }
inline ref<android::icu::util::TimeZone> TimeZone::getFrozenTimeZone(ref<java::lang::String> ID_) { return call_static_method<SCAPIX_META_STRING("getFrozenTimeZone"), ref<android::icu::util::TimeZone>>(ID_); }
inline ref<android::icu::util::TimeZone> TimeZone::getTimeZone(ref<java::lang::String> ID_, jint type) { return call_static_method<SCAPIX_META_STRING("getTimeZone"), ref<android::icu::util::TimeZone>>(ID_, type); }
inline ref<java::util::Set> TimeZone::getAvailableIDs(ref<android::icu::util::TimeZone_SystemTimeZoneType> zoneType, ref<java::lang::String> region, ref<java::lang::Integer> rawOffset) { return call_static_method<SCAPIX_META_STRING("getAvailableIDs"), ref<java::util::Set>>(zoneType, region, rawOffset); }
inline ref<link::java::array<java::lang::String>> TimeZone::getAvailableIDs(jint rawOffset) { return call_static_method<SCAPIX_META_STRING("getAvailableIDs"), ref<link::java::array<java::lang::String>>>(rawOffset); }
inline ref<link::java::array<java::lang::String>> TimeZone::getAvailableIDs(ref<java::lang::String> country) { return call_static_method<SCAPIX_META_STRING("getAvailableIDs"), ref<link::java::array<java::lang::String>>>(country); }
inline ref<link::java::array<java::lang::String>> TimeZone::getAvailableIDs() { return call_static_method<SCAPIX_META_STRING("getAvailableIDs"), ref<link::java::array<java::lang::String>>>(); }
inline jint TimeZone::countEquivalentIDs(ref<java::lang::String> id) { return call_static_method<SCAPIX_META_STRING("countEquivalentIDs"), jint>(id); }
inline ref<java::lang::String> TimeZone::getEquivalentID(ref<java::lang::String> id, jint index) { return call_static_method<SCAPIX_META_STRING("getEquivalentID"), ref<java::lang::String>>(id, index); }
inline ref<android::icu::util::TimeZone> TimeZone::getDefault() { return call_static_method<SCAPIX_META_STRING("getDefault"), ref<android::icu::util::TimeZone>>(); }
inline jboolean TimeZone::hasSameRules(ref<android::icu::util::TimeZone> other) { return call_method<SCAPIX_META_STRING("hasSameRules"), jboolean>(other); }
inline ref<java::lang::Object> TimeZone::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline jboolean TimeZone::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint TimeZone::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> TimeZone::getTZDataVersion() { return call_static_method<SCAPIX_META_STRING("getTZDataVersion"), ref<java::lang::String>>(); }
inline ref<java::lang::String> TimeZone::getCanonicalID(ref<java::lang::String> id) { return call_static_method<SCAPIX_META_STRING("getCanonicalID"), ref<java::lang::String>>(id); }
inline ref<java::lang::String> TimeZone::getCanonicalID(ref<java::lang::String> id, ref<link::java::array<jboolean>> isSystemID) { return call_static_method<SCAPIX_META_STRING("getCanonicalID"), ref<java::lang::String>>(id, isSystemID); }
inline ref<java::lang::String> TimeZone::getRegion(ref<java::lang::String> id) { return call_static_method<SCAPIX_META_STRING("getRegion"), ref<java::lang::String>>(id); }
inline ref<java::lang::String> TimeZone::getWindowsID(ref<java::lang::String> id) { return call_static_method<SCAPIX_META_STRING("getWindowsID"), ref<java::lang::String>>(id); }
inline ref<java::lang::String> TimeZone::getIDForWindowsID(ref<java::lang::String> winid, ref<java::lang::String> region) { return call_static_method<SCAPIX_META_STRING("getIDForWindowsID"), ref<java::lang::String>>(winid, region); }
inline jboolean TimeZone::isFrozen() { return call_method<SCAPIX_META_STRING("isFrozen"), jboolean>(); }
inline ref<android::icu::util::TimeZone> TimeZone::freeze() { return call_method<SCAPIX_META_STRING("freeze"), ref<android::icu::util::TimeZone>>(); }
inline ref<android::icu::util::TimeZone> TimeZone::cloneAsThawed() { return call_method<SCAPIX_META_STRING("cloneAsThawed"), ref<android::icu::util::TimeZone>>(); }

} // namespace android::icu::util
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_ICU_UTIL_TIMEZONE_H
