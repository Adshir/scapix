// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_ICU_UTIL_UNIVERSALTIMESCALE_H
#define SCAPIX_ANDROID_ICU_UTIL_UNIVERSALTIMESCALE_H

namespace scapix::java_api {

namespace android::icu::math { class BigDecimal; }

namespace android::icu::util {

class UniversalTimeScale : public object_base<SCAPIX_META_STRING("android/icu/util/UniversalTimeScale"),
	java::lang::Object>
{
public:

	static jint DB2_TIME_();
	static jint DOTNET_DATE_TIME_();
	static jint EPOCH_OFFSET_PLUS_1_VALUE_();
	static jint EPOCH_OFFSET_VALUE_();
	static jint EXCEL_TIME_();
	static jint FROM_MAX_VALUE_();
	static jint FROM_MIN_VALUE_();
	static jint ICU4C_TIME_();
	static jint JAVA_TIME_();
	static jint MAC_OLD_TIME_();
	static jint MAC_TIME_();
	static jint MAX_SCALE_();
	static jint TO_MAX_VALUE_();
	static jint TO_MIN_VALUE_();
	static jint UNITS_VALUE_();
	static jint UNIX_MICROSECONDS_TIME_();
	static jint UNIX_TIME_();
	static jint WINDOWS_FILE_TIME_();

	static jlong from(jlong otherTime, jint p2);
	static ref<android::icu::math::BigDecimal> bigDecimalFrom(jdouble otherTime, jint p2);
	static ref<android::icu::math::BigDecimal> bigDecimalFrom(jlong otherTime, jint p2);
	static ref<android::icu::math::BigDecimal> bigDecimalFrom(ref<android::icu::math::BigDecimal> otherTime, jint timeScale);
	static jlong toLong(jlong universalTime, jint p2);
	static ref<android::icu::math::BigDecimal> toBigDecimal(jlong universalTime, jint p2);
	static ref<android::icu::math::BigDecimal> toBigDecimal(ref<android::icu::math::BigDecimal> universalTime, jint timeScale);
	static jlong getTimeScaleValue(jint scale, jint value);

protected:

	UniversalTimeScale(handle_type h) : base_(h) {}

};

} // namespace android::icu::util
} // namespace scapix::java_api

#include <scapix/java_api/android/icu/math/BigDecimal.h>

namespace scapix::java_api {
namespace android::icu::util {

inline jint UniversalTimeScale::DB2_TIME_() { return get_static_field<SCAPIX_META_STRING("DB2_TIME"), jint>(); }
inline jint UniversalTimeScale::DOTNET_DATE_TIME_() { return get_static_field<SCAPIX_META_STRING("DOTNET_DATE_TIME"), jint>(); }
inline jint UniversalTimeScale::EPOCH_OFFSET_PLUS_1_VALUE_() { return get_static_field<SCAPIX_META_STRING("EPOCH_OFFSET_PLUS_1_VALUE"), jint>(); }
inline jint UniversalTimeScale::EPOCH_OFFSET_VALUE_() { return get_static_field<SCAPIX_META_STRING("EPOCH_OFFSET_VALUE"), jint>(); }
inline jint UniversalTimeScale::EXCEL_TIME_() { return get_static_field<SCAPIX_META_STRING("EXCEL_TIME"), jint>(); }
inline jint UniversalTimeScale::FROM_MAX_VALUE_() { return get_static_field<SCAPIX_META_STRING("FROM_MAX_VALUE"), jint>(); }
inline jint UniversalTimeScale::FROM_MIN_VALUE_() { return get_static_field<SCAPIX_META_STRING("FROM_MIN_VALUE"), jint>(); }
inline jint UniversalTimeScale::ICU4C_TIME_() { return get_static_field<SCAPIX_META_STRING("ICU4C_TIME"), jint>(); }
inline jint UniversalTimeScale::JAVA_TIME_() { return get_static_field<SCAPIX_META_STRING("JAVA_TIME"), jint>(); }
inline jint UniversalTimeScale::MAC_OLD_TIME_() { return get_static_field<SCAPIX_META_STRING("MAC_OLD_TIME"), jint>(); }
inline jint UniversalTimeScale::MAC_TIME_() { return get_static_field<SCAPIX_META_STRING("MAC_TIME"), jint>(); }
inline jint UniversalTimeScale::MAX_SCALE_() { return get_static_field<SCAPIX_META_STRING("MAX_SCALE"), jint>(); }
inline jint UniversalTimeScale::TO_MAX_VALUE_() { return get_static_field<SCAPIX_META_STRING("TO_MAX_VALUE"), jint>(); }
inline jint UniversalTimeScale::TO_MIN_VALUE_() { return get_static_field<SCAPIX_META_STRING("TO_MIN_VALUE"), jint>(); }
inline jint UniversalTimeScale::UNITS_VALUE_() { return get_static_field<SCAPIX_META_STRING("UNITS_VALUE"), jint>(); }
inline jint UniversalTimeScale::UNIX_MICROSECONDS_TIME_() { return get_static_field<SCAPIX_META_STRING("UNIX_MICROSECONDS_TIME"), jint>(); }
inline jint UniversalTimeScale::UNIX_TIME_() { return get_static_field<SCAPIX_META_STRING("UNIX_TIME"), jint>(); }
inline jint UniversalTimeScale::WINDOWS_FILE_TIME_() { return get_static_field<SCAPIX_META_STRING("WINDOWS_FILE_TIME"), jint>(); }
inline jlong UniversalTimeScale::from(jlong otherTime, jint p2) { return call_static_method<SCAPIX_META_STRING("from"), jlong>(otherTime, p2); }
inline ref<android::icu::math::BigDecimal> UniversalTimeScale::bigDecimalFrom(jdouble otherTime, jint p2) { return call_static_method<SCAPIX_META_STRING("bigDecimalFrom"), ref<android::icu::math::BigDecimal>>(otherTime, p2); }
inline ref<android::icu::math::BigDecimal> UniversalTimeScale::bigDecimalFrom(jlong otherTime, jint p2) { return call_static_method<SCAPIX_META_STRING("bigDecimalFrom"), ref<android::icu::math::BigDecimal>>(otherTime, p2); }
inline ref<android::icu::math::BigDecimal> UniversalTimeScale::bigDecimalFrom(ref<android::icu::math::BigDecimal> otherTime, jint timeScale) { return call_static_method<SCAPIX_META_STRING("bigDecimalFrom"), ref<android::icu::math::BigDecimal>>(otherTime, timeScale); }
inline jlong UniversalTimeScale::toLong(jlong universalTime, jint p2) { return call_static_method<SCAPIX_META_STRING("toLong"), jlong>(universalTime, p2); }
inline ref<android::icu::math::BigDecimal> UniversalTimeScale::toBigDecimal(jlong universalTime, jint p2) { return call_static_method<SCAPIX_META_STRING("toBigDecimal"), ref<android::icu::math::BigDecimal>>(universalTime, p2); }
inline ref<android::icu::math::BigDecimal> UniversalTimeScale::toBigDecimal(ref<android::icu::math::BigDecimal> universalTime, jint timeScale) { return call_static_method<SCAPIX_META_STRING("toBigDecimal"), ref<android::icu::math::BigDecimal>>(universalTime, timeScale); }
inline jlong UniversalTimeScale::getTimeScaleValue(jint scale, jint value) { return call_static_method<SCAPIX_META_STRING("getTimeScaleValue"), jlong>(scale, value); }

} // namespace android::icu::util
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_ICU_UTIL_UNIVERSALTIMESCALE_H
