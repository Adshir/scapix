// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_CONTENT_RES_TYPEDARRAY_H
#define SCAPIX_ANDROID_CONTENT_RES_TYPEDARRAY_H

namespace scapix::java_api {

namespace android::content::res { class ColorStateList; }
namespace android::content::res { class Resources; }
namespace android::graphics { class Typeface; }
namespace android::graphics::drawable { class Drawable; }
namespace android::util { class TypedValue; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::content::res {

class TypedArray : public object_base<SCAPIX_META_STRING("android/content/res/TypedArray"),
	java::lang::Object>
{
public:

	jint length();
	jint getIndexCount();
	jint getIndex(jint at);
	ref<android::content::res::Resources> getResources();
	ref<java::lang::CharSequence> getText(jint index);
	ref<java::lang::String> getString(jint index);
	ref<java::lang::String> getNonResourceString(jint index);
	jboolean getBoolean(jint index, jboolean defValue);
	jint getInt(jint index, jint defValue);
	jfloat getFloat(jint index, jfloat defValue);
	jint getColor(jint index, jint defValue);
	ref<android::content::res::ColorStateList> getColorStateList(jint index);
	jint getInteger(jint index, jint defValue);
	jfloat getDimension(jint index, jfloat defValue);
	jint getDimensionPixelOffset(jint index, jint defValue);
	jint getDimensionPixelSize(jint index, jint defValue);
	jint getLayoutDimension(jint index, ref<java::lang::String> name);
	jint getLayoutDimension(jint index, jint defValue);
	jfloat getFraction(jint index, jint base, jint pbase, jfloat defValue);
	jint getResourceId(jint index, jint defValue);
	ref<android::graphics::drawable::Drawable> getDrawable(jint index);
	ref<android::graphics::Typeface> getFont(jint index);
	ref<link::java::array<java::lang::CharSequence>> getTextArray(jint index);
	jboolean getValue(jint index, ref<android::util::TypedValue> outValue);
	jint getType(jint index);
	jboolean hasValue(jint index);
	jboolean hasValueOrEmpty(jint index);
	ref<android::util::TypedValue> peekValue(jint index);
	ref<java::lang::String> getPositionDescription();
	void recycle();
	jint getChangingConfigurations();
	ref<java::lang::String> toString();

protected:

	TypedArray(handle_type h) : base_(h) {}

};

} // namespace android::content::res
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/graphics/Typeface.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/util/TypedValue.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::content::res {

inline jint TypedArray::length() { return call_method<SCAPIX_META_STRING("length"), jint>(); }
inline jint TypedArray::getIndexCount() { return call_method<SCAPIX_META_STRING("getIndexCount"), jint>(); }
inline jint TypedArray::getIndex(jint at) { return call_method<SCAPIX_META_STRING("getIndex"), jint>(at); }
inline ref<android::content::res::Resources> TypedArray::getResources() { return call_method<SCAPIX_META_STRING("getResources"), ref<android::content::res::Resources>>(); }
inline ref<java::lang::CharSequence> TypedArray::getText(jint index) { return call_method<SCAPIX_META_STRING("getText"), ref<java::lang::CharSequence>>(index); }
inline ref<java::lang::String> TypedArray::getString(jint index) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(index); }
inline ref<java::lang::String> TypedArray::getNonResourceString(jint index) { return call_method<SCAPIX_META_STRING("getNonResourceString"), ref<java::lang::String>>(index); }
inline jboolean TypedArray::getBoolean(jint index, jboolean defValue) { return call_method<SCAPIX_META_STRING("getBoolean"), jboolean>(index, defValue); }
inline jint TypedArray::getInt(jint index, jint defValue) { return call_method<SCAPIX_META_STRING("getInt"), jint>(index, defValue); }
inline jfloat TypedArray::getFloat(jint index, jfloat defValue) { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(index, defValue); }
inline jint TypedArray::getColor(jint index, jint defValue) { return call_method<SCAPIX_META_STRING("getColor"), jint>(index, defValue); }
inline ref<android::content::res::ColorStateList> TypedArray::getColorStateList(jint index) { return call_method<SCAPIX_META_STRING("getColorStateList"), ref<android::content::res::ColorStateList>>(index); }
inline jint TypedArray::getInteger(jint index, jint defValue) { return call_method<SCAPIX_META_STRING("getInteger"), jint>(index, defValue); }
inline jfloat TypedArray::getDimension(jint index, jfloat defValue) { return call_method<SCAPIX_META_STRING("getDimension"), jfloat>(index, defValue); }
inline jint TypedArray::getDimensionPixelOffset(jint index, jint defValue) { return call_method<SCAPIX_META_STRING("getDimensionPixelOffset"), jint>(index, defValue); }
inline jint TypedArray::getDimensionPixelSize(jint index, jint defValue) { return call_method<SCAPIX_META_STRING("getDimensionPixelSize"), jint>(index, defValue); }
inline jint TypedArray::getLayoutDimension(jint index, ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getLayoutDimension"), jint>(index, name); }
inline jint TypedArray::getLayoutDimension(jint index, jint defValue) { return call_method<SCAPIX_META_STRING("getLayoutDimension"), jint>(index, defValue); }
inline jfloat TypedArray::getFraction(jint index, jint base, jint pbase, jfloat defValue) { return call_method<SCAPIX_META_STRING("getFraction"), jfloat>(index, base, pbase, defValue); }
inline jint TypedArray::getResourceId(jint index, jint defValue) { return call_method<SCAPIX_META_STRING("getResourceId"), jint>(index, defValue); }
inline ref<android::graphics::drawable::Drawable> TypedArray::getDrawable(jint index) { return call_method<SCAPIX_META_STRING("getDrawable"), ref<android::graphics::drawable::Drawable>>(index); }
inline ref<android::graphics::Typeface> TypedArray::getFont(jint index) { return call_method<SCAPIX_META_STRING("getFont"), ref<android::graphics::Typeface>>(index); }
inline ref<link::java::array<java::lang::CharSequence>> TypedArray::getTextArray(jint index) { return call_method<SCAPIX_META_STRING("getTextArray"), ref<link::java::array<java::lang::CharSequence>>>(index); }
inline jboolean TypedArray::getValue(jint index, ref<android::util::TypedValue> outValue) { return call_method<SCAPIX_META_STRING("getValue"), jboolean>(index, outValue); }
inline jint TypedArray::getType(jint index) { return call_method<SCAPIX_META_STRING("getType"), jint>(index); }
inline jboolean TypedArray::hasValue(jint index) { return call_method<SCAPIX_META_STRING("hasValue"), jboolean>(index); }
inline jboolean TypedArray::hasValueOrEmpty(jint index) { return call_method<SCAPIX_META_STRING("hasValueOrEmpty"), jboolean>(index); }
inline ref<android::util::TypedValue> TypedArray::peekValue(jint index) { return call_method<SCAPIX_META_STRING("peekValue"), ref<android::util::TypedValue>>(index); }
inline ref<java::lang::String> TypedArray::getPositionDescription() { return call_method<SCAPIX_META_STRING("getPositionDescription"), ref<java::lang::String>>(); }
inline void TypedArray::recycle() { return call_method<SCAPIX_META_STRING("recycle"), void>(); }
inline jint TypedArray::getChangingConfigurations() { return call_method<SCAPIX_META_STRING("getChangingConfigurations"), jint>(); }
inline ref<java::lang::String> TypedArray::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::content::res
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_RES_TYPEDARRAY_H
