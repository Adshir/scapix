// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_CONTENT_RES_COLORSTATELIST_H
#define SCAPIX_ANDROID_CONTENT_RES_COLORSTATELIST_H

namespace scapix::java_api {

namespace android::content::res { class Resources; }
namespace android::content::res { class Resources_Theme; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }
namespace org::xmlpull::v1 { class XmlPullParser; }

namespace android::content::res {

class ColorStateList : public object_base<SCAPIX_META_STRING("android/content/res/ColorStateList"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();

	static ref<ColorStateList> new_object(ref<link::java::array<link::java::array<jint>>> states, ref<link::java::array<jint>> colors);
	static ref<android::content::res::ColorStateList> valueOf(jint color);
	static ref<android::content::res::ColorStateList> createFromXml(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser);
	static ref<android::content::res::ColorStateList> createFromXml(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::content::res::Resources_Theme> theme);
	ref<android::content::res::ColorStateList> withAlpha(jint alpha);
	jint getChangingConfigurations();
	jboolean isStateful();
	jboolean isOpaque();
	jint getColorForState(ref<link::java::array<jint>> stateSet, jint defaultColor);
	jint getDefaultColor();
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);

protected:

	ColorStateList(handle_type h) : base_(h) {}

};

} // namespace android::content::res
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>

namespace scapix::java_api {
namespace android::content::res {

inline ref<android::os::Parcelable_Creator> ColorStateList::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<ColorStateList> ColorStateList::new_object(ref<link::java::array<link::java::array<jint>>> states, ref<link::java::array<jint>> colors) { return base_::new_object(states, colors); }
inline ref<android::content::res::ColorStateList> ColorStateList::valueOf(jint color) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<android::content::res::ColorStateList>>(color); }
inline ref<android::content::res::ColorStateList> ColorStateList::createFromXml(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser) { return call_static_method<SCAPIX_META_STRING("createFromXml"), ref<android::content::res::ColorStateList>>(r, parser); }
inline ref<android::content::res::ColorStateList> ColorStateList::createFromXml(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::content::res::Resources_Theme> theme) { return call_static_method<SCAPIX_META_STRING("createFromXml"), ref<android::content::res::ColorStateList>>(r, parser, theme); }
inline ref<android::content::res::ColorStateList> ColorStateList::withAlpha(jint alpha) { return call_method<SCAPIX_META_STRING("withAlpha"), ref<android::content::res::ColorStateList>>(alpha); }
inline jint ColorStateList::getChangingConfigurations() { return call_method<SCAPIX_META_STRING("getChangingConfigurations"), jint>(); }
inline jboolean ColorStateList::isStateful() { return call_method<SCAPIX_META_STRING("isStateful"), jboolean>(); }
inline jboolean ColorStateList::isOpaque() { return call_method<SCAPIX_META_STRING("isOpaque"), jboolean>(); }
inline jint ColorStateList::getColorForState(ref<link::java::array<jint>> stateSet, jint defaultColor) { return call_method<SCAPIX_META_STRING("getColorForState"), jint>(stateSet, defaultColor); }
inline jint ColorStateList::getDefaultColor() { return call_method<SCAPIX_META_STRING("getDefaultColor"), jint>(); }
inline ref<java::lang::String> ColorStateList::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint ColorStateList::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void ColorStateList::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }

} // namespace android::content::res
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_RES_COLORSTATELIST_H
