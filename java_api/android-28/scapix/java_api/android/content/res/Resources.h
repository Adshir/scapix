// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_CONTENT_RES_RESOURCES_H
#define SCAPIX_ANDROID_CONTENT_RES_RESOURCES_H

namespace scapix::java_api {

namespace android::content::res { class AssetFileDescriptor; }
namespace android::content::res { class AssetManager; }
namespace android::content::res { class ColorStateList; }
namespace android::content::res { class Configuration; }
namespace android::content::res { class Resources_Theme; }
namespace android::content::res { class TypedArray; }
namespace android::content::res { class XmlResourceParser; }
namespace android::graphics { class Movie; }
namespace android::graphics { class Typeface; }
namespace android::graphics::drawable { class Drawable; }
namespace android::os { class Bundle; }
namespace android::util { class AttributeSet; }
namespace android::util { class DisplayMetrics; }
namespace android::util { class TypedValue; }
namespace java::io { class InputStream; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace android::content::res { class Resources_NotFoundException; }

namespace android::content::res {

class Resources : public object_base<SCAPIX_META_STRING("android/content/res/Resources"),
	java::lang::Object>
{
public:

	using Theme = Resources_Theme;
	using NotFoundException = Resources_NotFoundException;

	static ref<Resources> new_object(ref<android::content::res::AssetManager> assets, ref<android::util::DisplayMetrics> metrics, ref<android::content::res::Configuration> config);
	static ref<android::content::res::Resources> getSystem();
	ref<java::lang::CharSequence> getText(jint id);
	ref<android::graphics::Typeface> getFont(jint id);
	ref<java::lang::CharSequence> getQuantityText(jint id, jint quantity);
	ref<java::lang::String> getString(jint id);
	ref<java::lang::String> getString(jint id, ref<link::java::array<java::lang::Object>> formatArgs);
	ref<java::lang::String> getQuantityString(jint id, jint quantity, ref<link::java::array<java::lang::Object>> formatArgs);
	ref<java::lang::String> getQuantityString(jint id, jint quantity);
	ref<java::lang::CharSequence> getText(jint id, ref<java::lang::CharSequence> def);
	ref<link::java::array<java::lang::CharSequence>> getTextArray(jint id);
	ref<link::java::array<java::lang::String>> getStringArray(jint id);
	ref<link::java::array<jint>> getIntArray(jint id);
	ref<android::content::res::TypedArray> obtainTypedArray(jint id);
	jfloat getDimension(jint id);
	jint getDimensionPixelOffset(jint id);
	jint getDimensionPixelSize(jint id);
	jfloat getFraction(jint id, jint base, jint pbase);
	ref<android::graphics::drawable::Drawable> getDrawable(jint id);
	ref<android::graphics::drawable::Drawable> getDrawable(jint id, ref<android::content::res::Resources_Theme> theme);
	ref<android::graphics::drawable::Drawable> getDrawableForDensity(jint id, jint density);
	ref<android::graphics::drawable::Drawable> getDrawableForDensity(jint id, jint density, ref<android::content::res::Resources_Theme> theme);
	ref<android::graphics::Movie> getMovie(jint id);
	jint getColor(jint id);
	jint getColor(jint id, ref<android::content::res::Resources_Theme> theme);
	ref<android::content::res::ColorStateList> getColorStateList(jint id);
	ref<android::content::res::ColorStateList> getColorStateList(jint id, ref<android::content::res::Resources_Theme> theme);
	jboolean getBoolean(jint id);
	jint getInteger(jint id);
	ref<android::content::res::XmlResourceParser> getLayout(jint id);
	ref<android::content::res::XmlResourceParser> getAnimation(jint id);
	ref<android::content::res::XmlResourceParser> getXml(jint id);
	ref<java::io::InputStream> openRawResource(jint id);
	ref<java::io::InputStream> openRawResource(jint id, ref<android::util::TypedValue> value);
	ref<android::content::res::AssetFileDescriptor> openRawResourceFd(jint id);
	void getValue(jint id, ref<android::util::TypedValue> outValue, jboolean resolveRefs);
	void getValueForDensity(jint id, jint density, ref<android::util::TypedValue> outValue, jboolean resolveRefs);
	void getValue(ref<java::lang::String> name, ref<android::util::TypedValue> outValue, jboolean resolveRefs);
	ref<android::content::res::Resources_Theme> newTheme();
	ref<android::content::res::TypedArray> obtainAttributes(ref<android::util::AttributeSet> set, ref<link::java::array<jint>> attrs);
	void updateConfiguration(ref<android::content::res::Configuration> config, ref<android::util::DisplayMetrics> metrics);
	ref<android::util::DisplayMetrics> getDisplayMetrics();
	ref<android::content::res::Configuration> getConfiguration();
	jint getIdentifier(ref<java::lang::String> name, ref<java::lang::String> defType, ref<java::lang::String> defPackage);
	ref<java::lang::String> getResourceName(jint resid);
	ref<java::lang::String> getResourcePackageName(jint resid);
	ref<java::lang::String> getResourceTypeName(jint resid);
	ref<java::lang::String> getResourceEntryName(jint resid);
	void parseBundleExtras(ref<android::content::res::XmlResourceParser> parser, ref<android::os::Bundle> outBundle);
	void parseBundleExtra(ref<java::lang::String> tagName, ref<android::util::AttributeSet> attrs, ref<android::os::Bundle> outBundle);
	ref<android::content::res::AssetManager> getAssets();
	void flushLayoutCache();
	void finishPreloading();

protected:

	Resources(handle_type h) : base_(h) {}

};

} // namespace android::content::res
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/AssetFileDescriptor.h>
#include <scapix/java_api/android/content/res/AssetManager.h>
#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/content/res/Configuration.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/content/res/TypedArray.h>
#include <scapix/java_api/android/content/res/XmlResourceParser.h>
#include <scapix/java_api/android/graphics/Movie.h>
#include <scapix/java_api/android/graphics/Typeface.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/util/DisplayMetrics.h>
#include <scapix/java_api/android/util/TypedValue.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::content::res {

inline ref<Resources> Resources::new_object(ref<android::content::res::AssetManager> assets, ref<android::util::DisplayMetrics> metrics, ref<android::content::res::Configuration> config) { return base_::new_object(assets, metrics, config); }
inline ref<android::content::res::Resources> Resources::getSystem() { return call_static_method<SCAPIX_META_STRING("getSystem"), ref<android::content::res::Resources>>(); }
inline ref<java::lang::CharSequence> Resources::getText(jint id) { return call_method<SCAPIX_META_STRING("getText"), ref<java::lang::CharSequence>>(id); }
inline ref<android::graphics::Typeface> Resources::getFont(jint id) { return call_method<SCAPIX_META_STRING("getFont"), ref<android::graphics::Typeface>>(id); }
inline ref<java::lang::CharSequence> Resources::getQuantityText(jint id, jint quantity) { return call_method<SCAPIX_META_STRING("getQuantityText"), ref<java::lang::CharSequence>>(id, quantity); }
inline ref<java::lang::String> Resources::getString(jint id) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(id); }
inline ref<java::lang::String> Resources::getString(jint id, ref<link::java::array<java::lang::Object>> formatArgs) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(id, formatArgs); }
inline ref<java::lang::String> Resources::getQuantityString(jint id, jint quantity, ref<link::java::array<java::lang::Object>> formatArgs) { return call_method<SCAPIX_META_STRING("getQuantityString"), ref<java::lang::String>>(id, quantity, formatArgs); }
inline ref<java::lang::String> Resources::getQuantityString(jint id, jint quantity) { return call_method<SCAPIX_META_STRING("getQuantityString"), ref<java::lang::String>>(id, quantity); }
inline ref<java::lang::CharSequence> Resources::getText(jint id, ref<java::lang::CharSequence> def) { return call_method<SCAPIX_META_STRING("getText"), ref<java::lang::CharSequence>>(id, def); }
inline ref<link::java::array<java::lang::CharSequence>> Resources::getTextArray(jint id) { return call_method<SCAPIX_META_STRING("getTextArray"), ref<link::java::array<java::lang::CharSequence>>>(id); }
inline ref<link::java::array<java::lang::String>> Resources::getStringArray(jint id) { return call_method<SCAPIX_META_STRING("getStringArray"), ref<link::java::array<java::lang::String>>>(id); }
inline ref<link::java::array<jint>> Resources::getIntArray(jint id) { return call_method<SCAPIX_META_STRING("getIntArray"), ref<link::java::array<jint>>>(id); }
inline ref<android::content::res::TypedArray> Resources::obtainTypedArray(jint id) { return call_method<SCAPIX_META_STRING("obtainTypedArray"), ref<android::content::res::TypedArray>>(id); }
inline jfloat Resources::getDimension(jint id) { return call_method<SCAPIX_META_STRING("getDimension"), jfloat>(id); }
inline jint Resources::getDimensionPixelOffset(jint id) { return call_method<SCAPIX_META_STRING("getDimensionPixelOffset"), jint>(id); }
inline jint Resources::getDimensionPixelSize(jint id) { return call_method<SCAPIX_META_STRING("getDimensionPixelSize"), jint>(id); }
inline jfloat Resources::getFraction(jint id, jint base, jint pbase) { return call_method<SCAPIX_META_STRING("getFraction"), jfloat>(id, base, pbase); }
inline ref<android::graphics::drawable::Drawable> Resources::getDrawable(jint id) { return call_method<SCAPIX_META_STRING("getDrawable"), ref<android::graphics::drawable::Drawable>>(id); }
inline ref<android::graphics::drawable::Drawable> Resources::getDrawable(jint id, ref<android::content::res::Resources_Theme> theme) { return call_method<SCAPIX_META_STRING("getDrawable"), ref<android::graphics::drawable::Drawable>>(id, theme); }
inline ref<android::graphics::drawable::Drawable> Resources::getDrawableForDensity(jint id, jint density) { return call_method<SCAPIX_META_STRING("getDrawableForDensity"), ref<android::graphics::drawable::Drawable>>(id, density); }
inline ref<android::graphics::drawable::Drawable> Resources::getDrawableForDensity(jint id, jint density, ref<android::content::res::Resources_Theme> theme) { return call_method<SCAPIX_META_STRING("getDrawableForDensity"), ref<android::graphics::drawable::Drawable>>(id, density, theme); }
inline ref<android::graphics::Movie> Resources::getMovie(jint id) { return call_method<SCAPIX_META_STRING("getMovie"), ref<android::graphics::Movie>>(id); }
inline jint Resources::getColor(jint id) { return call_method<SCAPIX_META_STRING("getColor"), jint>(id); }
inline jint Resources::getColor(jint id, ref<android::content::res::Resources_Theme> theme) { return call_method<SCAPIX_META_STRING("getColor"), jint>(id, theme); }
inline ref<android::content::res::ColorStateList> Resources::getColorStateList(jint id) { return call_method<SCAPIX_META_STRING("getColorStateList"), ref<android::content::res::ColorStateList>>(id); }
inline ref<android::content::res::ColorStateList> Resources::getColorStateList(jint id, ref<android::content::res::Resources_Theme> theme) { return call_method<SCAPIX_META_STRING("getColorStateList"), ref<android::content::res::ColorStateList>>(id, theme); }
inline jboolean Resources::getBoolean(jint id) { return call_method<SCAPIX_META_STRING("getBoolean"), jboolean>(id); }
inline jint Resources::getInteger(jint id) { return call_method<SCAPIX_META_STRING("getInteger"), jint>(id); }
inline ref<android::content::res::XmlResourceParser> Resources::getLayout(jint id) { return call_method<SCAPIX_META_STRING("getLayout"), ref<android::content::res::XmlResourceParser>>(id); }
inline ref<android::content::res::XmlResourceParser> Resources::getAnimation(jint id) { return call_method<SCAPIX_META_STRING("getAnimation"), ref<android::content::res::XmlResourceParser>>(id); }
inline ref<android::content::res::XmlResourceParser> Resources::getXml(jint id) { return call_method<SCAPIX_META_STRING("getXml"), ref<android::content::res::XmlResourceParser>>(id); }
inline ref<java::io::InputStream> Resources::openRawResource(jint id) { return call_method<SCAPIX_META_STRING("openRawResource"), ref<java::io::InputStream>>(id); }
inline ref<java::io::InputStream> Resources::openRawResource(jint id, ref<android::util::TypedValue> value) { return call_method<SCAPIX_META_STRING("openRawResource"), ref<java::io::InputStream>>(id, value); }
inline ref<android::content::res::AssetFileDescriptor> Resources::openRawResourceFd(jint id) { return call_method<SCAPIX_META_STRING("openRawResourceFd"), ref<android::content::res::AssetFileDescriptor>>(id); }
inline void Resources::getValue(jint id, ref<android::util::TypedValue> outValue, jboolean resolveRefs) { return call_method<SCAPIX_META_STRING("getValue"), void>(id, outValue, resolveRefs); }
inline void Resources::getValueForDensity(jint id, jint density, ref<android::util::TypedValue> outValue, jboolean resolveRefs) { return call_method<SCAPIX_META_STRING("getValueForDensity"), void>(id, density, outValue, resolveRefs); }
inline void Resources::getValue(ref<java::lang::String> name, ref<android::util::TypedValue> outValue, jboolean resolveRefs) { return call_method<SCAPIX_META_STRING("getValue"), void>(name, outValue, resolveRefs); }
inline ref<android::content::res::Resources_Theme> Resources::newTheme() { return call_method<SCAPIX_META_STRING("newTheme"), ref<android::content::res::Resources_Theme>>(); }
inline ref<android::content::res::TypedArray> Resources::obtainAttributes(ref<android::util::AttributeSet> set, ref<link::java::array<jint>> attrs) { return call_method<SCAPIX_META_STRING("obtainAttributes"), ref<android::content::res::TypedArray>>(set, attrs); }
inline void Resources::updateConfiguration(ref<android::content::res::Configuration> config, ref<android::util::DisplayMetrics> metrics) { return call_method<SCAPIX_META_STRING("updateConfiguration"), void>(config, metrics); }
inline ref<android::util::DisplayMetrics> Resources::getDisplayMetrics() { return call_method<SCAPIX_META_STRING("getDisplayMetrics"), ref<android::util::DisplayMetrics>>(); }
inline ref<android::content::res::Configuration> Resources::getConfiguration() { return call_method<SCAPIX_META_STRING("getConfiguration"), ref<android::content::res::Configuration>>(); }
inline jint Resources::getIdentifier(ref<java::lang::String> name, ref<java::lang::String> defType, ref<java::lang::String> defPackage) { return call_method<SCAPIX_META_STRING("getIdentifier"), jint>(name, defType, defPackage); }
inline ref<java::lang::String> Resources::getResourceName(jint resid) { return call_method<SCAPIX_META_STRING("getResourceName"), ref<java::lang::String>>(resid); }
inline ref<java::lang::String> Resources::getResourcePackageName(jint resid) { return call_method<SCAPIX_META_STRING("getResourcePackageName"), ref<java::lang::String>>(resid); }
inline ref<java::lang::String> Resources::getResourceTypeName(jint resid) { return call_method<SCAPIX_META_STRING("getResourceTypeName"), ref<java::lang::String>>(resid); }
inline ref<java::lang::String> Resources::getResourceEntryName(jint resid) { return call_method<SCAPIX_META_STRING("getResourceEntryName"), ref<java::lang::String>>(resid); }
inline void Resources::parseBundleExtras(ref<android::content::res::XmlResourceParser> parser, ref<android::os::Bundle> outBundle) { return call_method<SCAPIX_META_STRING("parseBundleExtras"), void>(parser, outBundle); }
inline void Resources::parseBundleExtra(ref<java::lang::String> tagName, ref<android::util::AttributeSet> attrs, ref<android::os::Bundle> outBundle) { return call_method<SCAPIX_META_STRING("parseBundleExtra"), void>(tagName, attrs, outBundle); }
inline ref<android::content::res::AssetManager> Resources::getAssets() { return call_method<SCAPIX_META_STRING("getAssets"), ref<android::content::res::AssetManager>>(); }
inline void Resources::flushLayoutCache() { return call_method<SCAPIX_META_STRING("flushLayoutCache"), void>(); }
inline void Resources::finishPreloading() { return call_method<SCAPIX_META_STRING("finishPreloading"), void>(); }

} // namespace android::content::res
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_RES_RESOURCES_H
