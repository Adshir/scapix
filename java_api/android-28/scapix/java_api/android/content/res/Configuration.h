// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_ANDROID_CONTENT_RES_CONFIGURATION_H
#define SCAPIX_ANDROID_CONTENT_RES_CONFIGURATION_H

namespace scapix::java_api {

namespace android::os { class LocaleList; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }
namespace java::util { class Locale; }

namespace android::content::res {

class Configuration : public object_base<SCAPIX_META_STRING("android/content/res/Configuration"),
	java::lang::Object,
	android::os::Parcelable,
	java::lang::Comparable>
{
public:

	static jint COLOR_MODE_HDR_MASK_();
	static jint COLOR_MODE_HDR_NO_();
	static jint COLOR_MODE_HDR_SHIFT_();
	static jint COLOR_MODE_HDR_UNDEFINED_();
	static jint COLOR_MODE_HDR_YES_();
	static jint COLOR_MODE_UNDEFINED_();
	static jint COLOR_MODE_WIDE_COLOR_GAMUT_MASK_();
	static jint COLOR_MODE_WIDE_COLOR_GAMUT_NO_();
	static jint COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED_();
	static jint COLOR_MODE_WIDE_COLOR_GAMUT_YES_();
	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint DENSITY_DPI_UNDEFINED_();
	static jint HARDKEYBOARDHIDDEN_NO_();
	static jint HARDKEYBOARDHIDDEN_UNDEFINED_();
	static jint HARDKEYBOARDHIDDEN_YES_();
	static jint KEYBOARDHIDDEN_NO_();
	static jint KEYBOARDHIDDEN_UNDEFINED_();
	static jint KEYBOARDHIDDEN_YES_();
	static jint KEYBOARD_12KEY_();
	static jint KEYBOARD_NOKEYS_();
	static jint KEYBOARD_QWERTY_();
	static jint KEYBOARD_UNDEFINED_();
	static jint MNC_ZERO_();
	static jint NAVIGATIONHIDDEN_NO_();
	static jint NAVIGATIONHIDDEN_UNDEFINED_();
	static jint NAVIGATIONHIDDEN_YES_();
	static jint NAVIGATION_DPAD_();
	static jint NAVIGATION_NONAV_();
	static jint NAVIGATION_TRACKBALL_();
	static jint NAVIGATION_UNDEFINED_();
	static jint NAVIGATION_WHEEL_();
	static jint ORIENTATION_LANDSCAPE_();
	static jint ORIENTATION_PORTRAIT_();
	static jint ORIENTATION_SQUARE_();
	static jint ORIENTATION_UNDEFINED_();
	static jint SCREENLAYOUT_LAYOUTDIR_LTR_();
	static jint SCREENLAYOUT_LAYOUTDIR_MASK_();
	static jint SCREENLAYOUT_LAYOUTDIR_RTL_();
	static jint SCREENLAYOUT_LAYOUTDIR_SHIFT_();
	static jint SCREENLAYOUT_LAYOUTDIR_UNDEFINED_();
	static jint SCREENLAYOUT_LONG_MASK_();
	static jint SCREENLAYOUT_LONG_NO_();
	static jint SCREENLAYOUT_LONG_UNDEFINED_();
	static jint SCREENLAYOUT_LONG_YES_();
	static jint SCREENLAYOUT_ROUND_MASK_();
	static jint SCREENLAYOUT_ROUND_NO_();
	static jint SCREENLAYOUT_ROUND_UNDEFINED_();
	static jint SCREENLAYOUT_ROUND_YES_();
	static jint SCREENLAYOUT_SIZE_LARGE_();
	static jint SCREENLAYOUT_SIZE_MASK_();
	static jint SCREENLAYOUT_SIZE_NORMAL_();
	static jint SCREENLAYOUT_SIZE_SMALL_();
	static jint SCREENLAYOUT_SIZE_UNDEFINED_();
	static jint SCREENLAYOUT_SIZE_XLARGE_();
	static jint SCREENLAYOUT_UNDEFINED_();
	static jint SCREEN_HEIGHT_DP_UNDEFINED_();
	static jint SCREEN_WIDTH_DP_UNDEFINED_();
	static jint SMALLEST_SCREEN_WIDTH_DP_UNDEFINED_();
	static jint TOUCHSCREEN_FINGER_();
	static jint TOUCHSCREEN_NOTOUCH_();
	static jint TOUCHSCREEN_STYLUS_();
	static jint TOUCHSCREEN_UNDEFINED_();
	static jint UI_MODE_NIGHT_MASK_();
	static jint UI_MODE_NIGHT_NO_();
	static jint UI_MODE_NIGHT_UNDEFINED_();
	static jint UI_MODE_NIGHT_YES_();
	static jint UI_MODE_TYPE_APPLIANCE_();
	static jint UI_MODE_TYPE_CAR_();
	static jint UI_MODE_TYPE_DESK_();
	static jint UI_MODE_TYPE_MASK_();
	static jint UI_MODE_TYPE_NORMAL_();
	static jint UI_MODE_TYPE_TELEVISION_();
	static jint UI_MODE_TYPE_UNDEFINED_();
	static jint UI_MODE_TYPE_VR_HEADSET_();
	static jint UI_MODE_TYPE_WATCH_();
	jint colorMode();
	void colorMode(jint);
	jint densityDpi();
	void densityDpi(jint);
	jfloat fontScale();
	void fontScale(jfloat);
	jint hardKeyboardHidden();
	void hardKeyboardHidden(jint);
	jint keyboard();
	void keyboard(jint);
	jint keyboardHidden();
	void keyboardHidden(jint);
	ref<java::util::Locale> locale();
	void locale(ref<java::util::Locale>);
	jint mcc();
	void mcc(jint);
	jint mnc();
	void mnc(jint);
	jint navigation();
	void navigation(jint);
	jint navigationHidden();
	void navigationHidden(jint);
	jint orientation();
	void orientation(jint);
	jint screenHeightDp();
	void screenHeightDp(jint);
	jint screenLayout();
	void screenLayout(jint);
	jint screenWidthDp();
	void screenWidthDp(jint);
	jint smallestScreenWidthDp();
	void smallestScreenWidthDp(jint);
	jint touchscreen();
	void touchscreen(jint);
	jint uiMode();
	void uiMode(jint);

	static ref<Configuration> new_object();
	static ref<Configuration> new_object(ref<android::content::res::Configuration> o);
	jboolean isLayoutSizeAtLeast(jint size);
	void setTo(ref<android::content::res::Configuration> o);
	ref<java::lang::String> toString();
	void setToDefaults();
	jint updateFrom(ref<android::content::res::Configuration> delta);
	jint diff(ref<android::content::res::Configuration> delta);
	static jboolean needNewResources(jint configChanges, jint interestingChanges);
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	void readFromParcel(ref<android::os::Parcel> source);
	jint compareTo(ref<android::content::res::Configuration> that);
	jboolean equals(ref<android::content::res::Configuration> that);
	jboolean equals(ref<java::lang::Object> that);
	jint hashCode();
	ref<android::os::LocaleList> getLocales();
	void setLocales(ref<android::os::LocaleList> locales);
	void setLocale(ref<java::util::Locale> loc);
	jint getLayoutDirection();
	void setLayoutDirection(ref<java::util::Locale> loc);
	jboolean isScreenRound();
	jboolean isScreenWideColorGamut();
	jboolean isScreenHdr();

protected:

	Configuration(handle_type h) : base_(h) {}

};

} // namespace android::content::res
} // namespace scapix::java_api

#include <scapix/java_api/android/os/LocaleList.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>

namespace scapix::java_api {
namespace android::content::res {

inline jint Configuration::COLOR_MODE_HDR_MASK_() { return get_static_field<SCAPIX_META_STRING("COLOR_MODE_HDR_MASK"), jint>(); }
inline jint Configuration::COLOR_MODE_HDR_NO_() { return get_static_field<SCAPIX_META_STRING("COLOR_MODE_HDR_NO"), jint>(); }
inline jint Configuration::COLOR_MODE_HDR_SHIFT_() { return get_static_field<SCAPIX_META_STRING("COLOR_MODE_HDR_SHIFT"), jint>(); }
inline jint Configuration::COLOR_MODE_HDR_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("COLOR_MODE_HDR_UNDEFINED"), jint>(); }
inline jint Configuration::COLOR_MODE_HDR_YES_() { return get_static_field<SCAPIX_META_STRING("COLOR_MODE_HDR_YES"), jint>(); }
inline jint Configuration::COLOR_MODE_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("COLOR_MODE_UNDEFINED"), jint>(); }
inline jint Configuration::COLOR_MODE_WIDE_COLOR_GAMUT_MASK_() { return get_static_field<SCAPIX_META_STRING("COLOR_MODE_WIDE_COLOR_GAMUT_MASK"), jint>(); }
inline jint Configuration::COLOR_MODE_WIDE_COLOR_GAMUT_NO_() { return get_static_field<SCAPIX_META_STRING("COLOR_MODE_WIDE_COLOR_GAMUT_NO"), jint>(); }
inline jint Configuration::COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED"), jint>(); }
inline jint Configuration::COLOR_MODE_WIDE_COLOR_GAMUT_YES_() { return get_static_field<SCAPIX_META_STRING("COLOR_MODE_WIDE_COLOR_GAMUT_YES"), jint>(); }
inline ref<android::os::Parcelable_Creator> Configuration::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint Configuration::DENSITY_DPI_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("DENSITY_DPI_UNDEFINED"), jint>(); }
inline jint Configuration::HARDKEYBOARDHIDDEN_NO_() { return get_static_field<SCAPIX_META_STRING("HARDKEYBOARDHIDDEN_NO"), jint>(); }
inline jint Configuration::HARDKEYBOARDHIDDEN_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("HARDKEYBOARDHIDDEN_UNDEFINED"), jint>(); }
inline jint Configuration::HARDKEYBOARDHIDDEN_YES_() { return get_static_field<SCAPIX_META_STRING("HARDKEYBOARDHIDDEN_YES"), jint>(); }
inline jint Configuration::KEYBOARDHIDDEN_NO_() { return get_static_field<SCAPIX_META_STRING("KEYBOARDHIDDEN_NO"), jint>(); }
inline jint Configuration::KEYBOARDHIDDEN_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("KEYBOARDHIDDEN_UNDEFINED"), jint>(); }
inline jint Configuration::KEYBOARDHIDDEN_YES_() { return get_static_field<SCAPIX_META_STRING("KEYBOARDHIDDEN_YES"), jint>(); }
inline jint Configuration::KEYBOARD_12KEY_() { return get_static_field<SCAPIX_META_STRING("KEYBOARD_12KEY"), jint>(); }
inline jint Configuration::KEYBOARD_NOKEYS_() { return get_static_field<SCAPIX_META_STRING("KEYBOARD_NOKEYS"), jint>(); }
inline jint Configuration::KEYBOARD_QWERTY_() { return get_static_field<SCAPIX_META_STRING("KEYBOARD_QWERTY"), jint>(); }
inline jint Configuration::KEYBOARD_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("KEYBOARD_UNDEFINED"), jint>(); }
inline jint Configuration::MNC_ZERO_() { return get_static_field<SCAPIX_META_STRING("MNC_ZERO"), jint>(); }
inline jint Configuration::NAVIGATIONHIDDEN_NO_() { return get_static_field<SCAPIX_META_STRING("NAVIGATIONHIDDEN_NO"), jint>(); }
inline jint Configuration::NAVIGATIONHIDDEN_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("NAVIGATIONHIDDEN_UNDEFINED"), jint>(); }
inline jint Configuration::NAVIGATIONHIDDEN_YES_() { return get_static_field<SCAPIX_META_STRING("NAVIGATIONHIDDEN_YES"), jint>(); }
inline jint Configuration::NAVIGATION_DPAD_() { return get_static_field<SCAPIX_META_STRING("NAVIGATION_DPAD"), jint>(); }
inline jint Configuration::NAVIGATION_NONAV_() { return get_static_field<SCAPIX_META_STRING("NAVIGATION_NONAV"), jint>(); }
inline jint Configuration::NAVIGATION_TRACKBALL_() { return get_static_field<SCAPIX_META_STRING("NAVIGATION_TRACKBALL"), jint>(); }
inline jint Configuration::NAVIGATION_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("NAVIGATION_UNDEFINED"), jint>(); }
inline jint Configuration::NAVIGATION_WHEEL_() { return get_static_field<SCAPIX_META_STRING("NAVIGATION_WHEEL"), jint>(); }
inline jint Configuration::ORIENTATION_LANDSCAPE_() { return get_static_field<SCAPIX_META_STRING("ORIENTATION_LANDSCAPE"), jint>(); }
inline jint Configuration::ORIENTATION_PORTRAIT_() { return get_static_field<SCAPIX_META_STRING("ORIENTATION_PORTRAIT"), jint>(); }
inline jint Configuration::ORIENTATION_SQUARE_() { return get_static_field<SCAPIX_META_STRING("ORIENTATION_SQUARE"), jint>(); }
inline jint Configuration::ORIENTATION_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("ORIENTATION_UNDEFINED"), jint>(); }
inline jint Configuration::SCREENLAYOUT_LAYOUTDIR_LTR_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_LAYOUTDIR_LTR"), jint>(); }
inline jint Configuration::SCREENLAYOUT_LAYOUTDIR_MASK_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_LAYOUTDIR_MASK"), jint>(); }
inline jint Configuration::SCREENLAYOUT_LAYOUTDIR_RTL_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_LAYOUTDIR_RTL"), jint>(); }
inline jint Configuration::SCREENLAYOUT_LAYOUTDIR_SHIFT_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_LAYOUTDIR_SHIFT"), jint>(); }
inline jint Configuration::SCREENLAYOUT_LAYOUTDIR_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_LAYOUTDIR_UNDEFINED"), jint>(); }
inline jint Configuration::SCREENLAYOUT_LONG_MASK_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_LONG_MASK"), jint>(); }
inline jint Configuration::SCREENLAYOUT_LONG_NO_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_LONG_NO"), jint>(); }
inline jint Configuration::SCREENLAYOUT_LONG_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_LONG_UNDEFINED"), jint>(); }
inline jint Configuration::SCREENLAYOUT_LONG_YES_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_LONG_YES"), jint>(); }
inline jint Configuration::SCREENLAYOUT_ROUND_MASK_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_ROUND_MASK"), jint>(); }
inline jint Configuration::SCREENLAYOUT_ROUND_NO_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_ROUND_NO"), jint>(); }
inline jint Configuration::SCREENLAYOUT_ROUND_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_ROUND_UNDEFINED"), jint>(); }
inline jint Configuration::SCREENLAYOUT_ROUND_YES_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_ROUND_YES"), jint>(); }
inline jint Configuration::SCREENLAYOUT_SIZE_LARGE_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_SIZE_LARGE"), jint>(); }
inline jint Configuration::SCREENLAYOUT_SIZE_MASK_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_SIZE_MASK"), jint>(); }
inline jint Configuration::SCREENLAYOUT_SIZE_NORMAL_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_SIZE_NORMAL"), jint>(); }
inline jint Configuration::SCREENLAYOUT_SIZE_SMALL_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_SIZE_SMALL"), jint>(); }
inline jint Configuration::SCREENLAYOUT_SIZE_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_SIZE_UNDEFINED"), jint>(); }
inline jint Configuration::SCREENLAYOUT_SIZE_XLARGE_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_SIZE_XLARGE"), jint>(); }
inline jint Configuration::SCREENLAYOUT_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("SCREENLAYOUT_UNDEFINED"), jint>(); }
inline jint Configuration::SCREEN_HEIGHT_DP_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("SCREEN_HEIGHT_DP_UNDEFINED"), jint>(); }
inline jint Configuration::SCREEN_WIDTH_DP_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("SCREEN_WIDTH_DP_UNDEFINED"), jint>(); }
inline jint Configuration::SMALLEST_SCREEN_WIDTH_DP_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("SMALLEST_SCREEN_WIDTH_DP_UNDEFINED"), jint>(); }
inline jint Configuration::TOUCHSCREEN_FINGER_() { return get_static_field<SCAPIX_META_STRING("TOUCHSCREEN_FINGER"), jint>(); }
inline jint Configuration::TOUCHSCREEN_NOTOUCH_() { return get_static_field<SCAPIX_META_STRING("TOUCHSCREEN_NOTOUCH"), jint>(); }
inline jint Configuration::TOUCHSCREEN_STYLUS_() { return get_static_field<SCAPIX_META_STRING("TOUCHSCREEN_STYLUS"), jint>(); }
inline jint Configuration::TOUCHSCREEN_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("TOUCHSCREEN_UNDEFINED"), jint>(); }
inline jint Configuration::UI_MODE_NIGHT_MASK_() { return get_static_field<SCAPIX_META_STRING("UI_MODE_NIGHT_MASK"), jint>(); }
inline jint Configuration::UI_MODE_NIGHT_NO_() { return get_static_field<SCAPIX_META_STRING("UI_MODE_NIGHT_NO"), jint>(); }
inline jint Configuration::UI_MODE_NIGHT_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("UI_MODE_NIGHT_UNDEFINED"), jint>(); }
inline jint Configuration::UI_MODE_NIGHT_YES_() { return get_static_field<SCAPIX_META_STRING("UI_MODE_NIGHT_YES"), jint>(); }
inline jint Configuration::UI_MODE_TYPE_APPLIANCE_() { return get_static_field<SCAPIX_META_STRING("UI_MODE_TYPE_APPLIANCE"), jint>(); }
inline jint Configuration::UI_MODE_TYPE_CAR_() { return get_static_field<SCAPIX_META_STRING("UI_MODE_TYPE_CAR"), jint>(); }
inline jint Configuration::UI_MODE_TYPE_DESK_() { return get_static_field<SCAPIX_META_STRING("UI_MODE_TYPE_DESK"), jint>(); }
inline jint Configuration::UI_MODE_TYPE_MASK_() { return get_static_field<SCAPIX_META_STRING("UI_MODE_TYPE_MASK"), jint>(); }
inline jint Configuration::UI_MODE_TYPE_NORMAL_() { return get_static_field<SCAPIX_META_STRING("UI_MODE_TYPE_NORMAL"), jint>(); }
inline jint Configuration::UI_MODE_TYPE_TELEVISION_() { return get_static_field<SCAPIX_META_STRING("UI_MODE_TYPE_TELEVISION"), jint>(); }
inline jint Configuration::UI_MODE_TYPE_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("UI_MODE_TYPE_UNDEFINED"), jint>(); }
inline jint Configuration::UI_MODE_TYPE_VR_HEADSET_() { return get_static_field<SCAPIX_META_STRING("UI_MODE_TYPE_VR_HEADSET"), jint>(); }
inline jint Configuration::UI_MODE_TYPE_WATCH_() { return get_static_field<SCAPIX_META_STRING("UI_MODE_TYPE_WATCH"), jint>(); }
inline jint Configuration::colorMode() { return get_field<SCAPIX_META_STRING("colorMode"), jint>(); }
inline void Configuration::colorMode(jint v) { set_field<SCAPIX_META_STRING("colorMode"), jint>(v); }
inline jint Configuration::densityDpi() { return get_field<SCAPIX_META_STRING("densityDpi"), jint>(); }
inline void Configuration::densityDpi(jint v) { set_field<SCAPIX_META_STRING("densityDpi"), jint>(v); }
inline jfloat Configuration::fontScale() { return get_field<SCAPIX_META_STRING("fontScale"), jfloat>(); }
inline void Configuration::fontScale(jfloat v) { set_field<SCAPIX_META_STRING("fontScale"), jfloat>(v); }
inline jint Configuration::hardKeyboardHidden() { return get_field<SCAPIX_META_STRING("hardKeyboardHidden"), jint>(); }
inline void Configuration::hardKeyboardHidden(jint v) { set_field<SCAPIX_META_STRING("hardKeyboardHidden"), jint>(v); }
inline jint Configuration::keyboard() { return get_field<SCAPIX_META_STRING("keyboard"), jint>(); }
inline void Configuration::keyboard(jint v) { set_field<SCAPIX_META_STRING("keyboard"), jint>(v); }
inline jint Configuration::keyboardHidden() { return get_field<SCAPIX_META_STRING("keyboardHidden"), jint>(); }
inline void Configuration::keyboardHidden(jint v) { set_field<SCAPIX_META_STRING("keyboardHidden"), jint>(v); }
inline ref<java::util::Locale> Configuration::locale() { return get_field<SCAPIX_META_STRING("locale"), ref<java::util::Locale>>(); }
inline void Configuration::locale(ref<java::util::Locale> v) { set_field<SCAPIX_META_STRING("locale"), ref<java::util::Locale>>(v); }
inline jint Configuration::mcc() { return get_field<SCAPIX_META_STRING("mcc"), jint>(); }
inline void Configuration::mcc(jint v) { set_field<SCAPIX_META_STRING("mcc"), jint>(v); }
inline jint Configuration::mnc() { return get_field<SCAPIX_META_STRING("mnc"), jint>(); }
inline void Configuration::mnc(jint v) { set_field<SCAPIX_META_STRING("mnc"), jint>(v); }
inline jint Configuration::navigation() { return get_field<SCAPIX_META_STRING("navigation"), jint>(); }
inline void Configuration::navigation(jint v) { set_field<SCAPIX_META_STRING("navigation"), jint>(v); }
inline jint Configuration::navigationHidden() { return get_field<SCAPIX_META_STRING("navigationHidden"), jint>(); }
inline void Configuration::navigationHidden(jint v) { set_field<SCAPIX_META_STRING("navigationHidden"), jint>(v); }
inline jint Configuration::orientation() { return get_field<SCAPIX_META_STRING("orientation"), jint>(); }
inline void Configuration::orientation(jint v) { set_field<SCAPIX_META_STRING("orientation"), jint>(v); }
inline jint Configuration::screenHeightDp() { return get_field<SCAPIX_META_STRING("screenHeightDp"), jint>(); }
inline void Configuration::screenHeightDp(jint v) { set_field<SCAPIX_META_STRING("screenHeightDp"), jint>(v); }
inline jint Configuration::screenLayout() { return get_field<SCAPIX_META_STRING("screenLayout"), jint>(); }
inline void Configuration::screenLayout(jint v) { set_field<SCAPIX_META_STRING("screenLayout"), jint>(v); }
inline jint Configuration::screenWidthDp() { return get_field<SCAPIX_META_STRING("screenWidthDp"), jint>(); }
inline void Configuration::screenWidthDp(jint v) { set_field<SCAPIX_META_STRING("screenWidthDp"), jint>(v); }
inline jint Configuration::smallestScreenWidthDp() { return get_field<SCAPIX_META_STRING("smallestScreenWidthDp"), jint>(); }
inline void Configuration::smallestScreenWidthDp(jint v) { set_field<SCAPIX_META_STRING("smallestScreenWidthDp"), jint>(v); }
inline jint Configuration::touchscreen() { return get_field<SCAPIX_META_STRING("touchscreen"), jint>(); }
inline void Configuration::touchscreen(jint v) { set_field<SCAPIX_META_STRING("touchscreen"), jint>(v); }
inline jint Configuration::uiMode() { return get_field<SCAPIX_META_STRING("uiMode"), jint>(); }
inline void Configuration::uiMode(jint v) { set_field<SCAPIX_META_STRING("uiMode"), jint>(v); }
inline ref<Configuration> Configuration::new_object() { return base_::new_object(); }
inline ref<Configuration> Configuration::new_object(ref<android::content::res::Configuration> o) { return base_::new_object(o); }
inline jboolean Configuration::isLayoutSizeAtLeast(jint size) { return call_method<SCAPIX_META_STRING("isLayoutSizeAtLeast"), jboolean>(size); }
inline void Configuration::setTo(ref<android::content::res::Configuration> o) { return call_method<SCAPIX_META_STRING("setTo"), void>(o); }
inline ref<java::lang::String> Configuration::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline void Configuration::setToDefaults() { return call_method<SCAPIX_META_STRING("setToDefaults"), void>(); }
inline jint Configuration::updateFrom(ref<android::content::res::Configuration> delta) { return call_method<SCAPIX_META_STRING("updateFrom"), jint>(delta); }
inline jint Configuration::diff(ref<android::content::res::Configuration> delta) { return call_method<SCAPIX_META_STRING("diff"), jint>(delta); }
inline jboolean Configuration::needNewResources(jint configChanges, jint interestingChanges) { return call_static_method<SCAPIX_META_STRING("needNewResources"), jboolean>(configChanges, interestingChanges); }
inline jint Configuration::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void Configuration::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline void Configuration::readFromParcel(ref<android::os::Parcel> source) { return call_method<SCAPIX_META_STRING("readFromParcel"), void>(source); }
inline jint Configuration::compareTo(ref<android::content::res::Configuration> that) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(that); }
inline jboolean Configuration::equals(ref<android::content::res::Configuration> that) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(that); }
inline jboolean Configuration::equals(ref<java::lang::Object> that) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(that); }
inline jint Configuration::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<android::os::LocaleList> Configuration::getLocales() { return call_method<SCAPIX_META_STRING("getLocales"), ref<android::os::LocaleList>>(); }
inline void Configuration::setLocales(ref<android::os::LocaleList> locales) { return call_method<SCAPIX_META_STRING("setLocales"), void>(locales); }
inline void Configuration::setLocale(ref<java::util::Locale> loc) { return call_method<SCAPIX_META_STRING("setLocale"), void>(loc); }
inline jint Configuration::getLayoutDirection() { return call_method<SCAPIX_META_STRING("getLayoutDirection"), jint>(); }
inline void Configuration::setLayoutDirection(ref<java::util::Locale> loc) { return call_method<SCAPIX_META_STRING("setLayoutDirection"), void>(loc); }
inline jboolean Configuration::isScreenRound() { return call_method<SCAPIX_META_STRING("isScreenRound"), jboolean>(); }
inline jboolean Configuration::isScreenWideColorGamut() { return call_method<SCAPIX_META_STRING("isScreenWideColorGamut"), jboolean>(); }
inline jboolean Configuration::isScreenHdr() { return call_method<SCAPIX_META_STRING("isScreenHdr"), jboolean>(); }

} // namespace android::content::res
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_RES_CONFIGURATION_H
