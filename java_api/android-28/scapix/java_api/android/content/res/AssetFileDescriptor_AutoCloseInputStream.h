// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/os/ParcelFileDescriptor_AutoCloseInputStream.h>

#ifndef SCAPIX_ANDROID_CONTENT_RES_ASSETFILEDESCRIPTOR_AUTOCLOSEINPUTSTREAM_H
#define SCAPIX_ANDROID_CONTENT_RES_ASSETFILEDESCRIPTOR_AUTOCLOSEINPUTSTREAM_H

namespace scapix::java_api {

namespace android::content::res { class AssetFileDescriptor; }

namespace android::content::res {

class AssetFileDescriptor_AutoCloseInputStream : public object_base<SCAPIX_META_STRING("android/content/res/AssetFileDescriptor$AutoCloseInputStream"),
	android::os::ParcelFileDescriptor_AutoCloseInputStream>
{
public:

	static ref<AssetFileDescriptor_AutoCloseInputStream> new_object(ref<android::content::res::AssetFileDescriptor> fd);
	jint available();
	jint read();
	jint read(ref<link::java::array<jbyte>> buffer, jint offset, jint count);
	jint read(ref<link::java::array<jbyte>> buffer);
	jlong skip(jlong count);
	void mark(jint readlimit);
	jboolean markSupported();
	void reset();

protected:

	AssetFileDescriptor_AutoCloseInputStream(handle_type h) : base_(h) {}

};

} // namespace android::content::res
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/AssetFileDescriptor.h>

namespace scapix::java_api {
namespace android::content::res {

inline ref<AssetFileDescriptor_AutoCloseInputStream> AssetFileDescriptor_AutoCloseInputStream::new_object(ref<android::content::res::AssetFileDescriptor> fd) { return base_::new_object(fd); }
inline jint AssetFileDescriptor_AutoCloseInputStream::available() { return call_method<SCAPIX_META_STRING("available"), jint>(); }
inline jint AssetFileDescriptor_AutoCloseInputStream::read() { return call_method<SCAPIX_META_STRING("read"), jint>(); }
inline jint AssetFileDescriptor_AutoCloseInputStream::read(ref<link::java::array<jbyte>> buffer, jint offset, jint count) { return call_method<SCAPIX_META_STRING("read"), jint>(buffer, offset, count); }
inline jint AssetFileDescriptor_AutoCloseInputStream::read(ref<link::java::array<jbyte>> buffer) { return call_method<SCAPIX_META_STRING("read"), jint>(buffer); }
inline jlong AssetFileDescriptor_AutoCloseInputStream::skip(jlong count) { return call_method<SCAPIX_META_STRING("skip"), jlong>(count); }
inline void AssetFileDescriptor_AutoCloseInputStream::mark(jint readlimit) { return call_method<SCAPIX_META_STRING("mark"), void>(readlimit); }
inline jboolean AssetFileDescriptor_AutoCloseInputStream::markSupported() { return call_method<SCAPIX_META_STRING("markSupported"), jboolean>(); }
inline void AssetFileDescriptor_AutoCloseInputStream::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }

} // namespace android::content::res
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_RES_ASSETFILEDESCRIPTOR_AUTOCLOSEINPUTSTREAM_H
