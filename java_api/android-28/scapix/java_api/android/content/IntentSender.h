// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_CONTENT_INTENTSENDER_H
#define SCAPIX_ANDROID_CONTENT_INTENTSENDER_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content { class Intent; }
namespace android::content { class IntentSender_OnFinished; }
namespace android::os { class Handler; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::os { class UserHandle; }
namespace java::lang { class String; }
namespace android::content { class IntentSender_SendIntentException; }

namespace android::content {

class IntentSender : public object_base<SCAPIX_META_STRING("android/content/IntentSender"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using SendIntentException = IntentSender_SendIntentException;
	using OnFinished = IntentSender_OnFinished;

	static ref<android::os::Parcelable_Creator> CREATOR_();

	void sendIntent(ref<android::content::Context> context, jint code, ref<android::content::Intent> intent, ref<android::content::IntentSender_OnFinished> onFinished, ref<android::os::Handler> handler);
	void sendIntent(ref<android::content::Context> context, jint code, ref<android::content::Intent> intent, ref<android::content::IntentSender_OnFinished> onFinished, ref<android::os::Handler> handler, ref<java::lang::String> requiredPermission);
	ref<java::lang::String> getTargetPackage();
	ref<java::lang::String> getCreatorPackage();
	jint getCreatorUid();
	ref<android::os::UserHandle> getCreatorUserHandle();
	jboolean equals(ref<java::lang::Object> otherObj);
	jint hashCode();
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint flags);
	static void writeIntentSenderOrNullToParcel(ref<android::content::IntentSender> sender, ref<android::os::Parcel> out);
	static ref<android::content::IntentSender> readIntentSenderOrNullFromParcel(ref<android::os::Parcel> in);

protected:

	IntentSender(handle_type h) : base_(h) {}

};

} // namespace android::content
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/IntentSender_OnFinished.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/os/UserHandle.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::content {

inline ref<android::os::Parcelable_Creator> IntentSender::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline void IntentSender::sendIntent(ref<android::content::Context> context, jint code, ref<android::content::Intent> intent, ref<android::content::IntentSender_OnFinished> onFinished, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("sendIntent"), void>(context, code, intent, onFinished, handler); }
inline void IntentSender::sendIntent(ref<android::content::Context> context, jint code, ref<android::content::Intent> intent, ref<android::content::IntentSender_OnFinished> onFinished, ref<android::os::Handler> handler, ref<java::lang::String> requiredPermission) { return call_method<SCAPIX_META_STRING("sendIntent"), void>(context, code, intent, onFinished, handler, requiredPermission); }
inline ref<java::lang::String> IntentSender::getTargetPackage() { return call_method<SCAPIX_META_STRING("getTargetPackage"), ref<java::lang::String>>(); }
inline ref<java::lang::String> IntentSender::getCreatorPackage() { return call_method<SCAPIX_META_STRING("getCreatorPackage"), ref<java::lang::String>>(); }
inline jint IntentSender::getCreatorUid() { return call_method<SCAPIX_META_STRING("getCreatorUid"), jint>(); }
inline ref<android::os::UserHandle> IntentSender::getCreatorUserHandle() { return call_method<SCAPIX_META_STRING("getCreatorUserHandle"), ref<android::os::UserHandle>>(); }
inline jboolean IntentSender::equals(ref<java::lang::Object> otherObj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(otherObj); }
inline jint IntentSender::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> IntentSender::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint IntentSender::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void IntentSender::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }
inline void IntentSender::writeIntentSenderOrNullToParcel(ref<android::content::IntentSender> sender, ref<android::os::Parcel> out) { return call_static_method<SCAPIX_META_STRING("writeIntentSenderOrNullToParcel"), void>(sender, out); }
inline ref<android::content::IntentSender> IntentSender::readIntentSenderOrNullFromParcel(ref<android::os::Parcel> in) { return call_static_method<SCAPIX_META_STRING("readIntentSenderOrNullFromParcel"), ref<android::content::IntentSender>>(in); }

} // namespace android::content
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_INTENTSENDER_H
