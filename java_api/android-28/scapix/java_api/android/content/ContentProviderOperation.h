// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_CONTENT_CONTENTPROVIDEROPERATION_H
#define SCAPIX_ANDROID_CONTENT_CONTENTPROVIDEROPERATION_H

namespace scapix::java_api {

namespace android::content { class ContentProvider; }
namespace android::content { class ContentProviderOperation_Builder; }
namespace android::content { class ContentProviderResult; }
namespace android::content { class ContentValues; }
namespace android::net { class Uri; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::content {

class ContentProviderOperation : public object_base<SCAPIX_META_STRING("android/content/ContentProviderOperation"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = ContentProviderOperation_Builder;

	static ref<android::os::Parcelable_Creator> CREATOR_();

	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	static ref<android::content::ContentProviderOperation_Builder> newInsert(ref<android::net::Uri> uri);
	static ref<android::content::ContentProviderOperation_Builder> newUpdate(ref<android::net::Uri> uri);
	static ref<android::content::ContentProviderOperation_Builder> newDelete(ref<android::net::Uri> uri);
	static ref<android::content::ContentProviderOperation_Builder> newAssertQuery(ref<android::net::Uri> uri);
	ref<android::net::Uri> getUri();
	jboolean isYieldAllowed();
	jboolean isInsert();
	jboolean isDelete();
	jboolean isUpdate();
	jboolean isAssertQuery();
	jboolean isWriteOperation();
	jboolean isReadOperation();
	ref<android::content::ContentProviderResult> apply(ref<android::content::ContentProvider> provider, ref<link::java::array<android::content::ContentProviderResult>> backRefs, jint numBackRefs);
	ref<android::content::ContentValues> resolveValueBackReferences(ref<link::java::array<android::content::ContentProviderResult>> backRefs, jint numBackRefs);
	ref<link::java::array<java::lang::String>> resolveSelectionArgsBackReferences(ref<link::java::array<android::content::ContentProviderResult>> backRefs, jint numBackRefs);
	ref<java::lang::String> toString();
	jint describeContents();

protected:

	ContentProviderOperation(handle_type h) : base_(h) {}

};

} // namespace android::content
} // namespace scapix::java_api

#include <scapix/java_api/android/content/ContentProvider.h>
#include <scapix/java_api/android/content/ContentProviderOperation_Builder.h>
#include <scapix/java_api/android/content/ContentProviderResult.h>
#include <scapix/java_api/android/content/ContentValues.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::content {

inline ref<android::os::Parcelable_Creator> ContentProviderOperation::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline void ContentProviderOperation::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline ref<android::content::ContentProviderOperation_Builder> ContentProviderOperation::newInsert(ref<android::net::Uri> uri) { return call_static_method<SCAPIX_META_STRING("newInsert"), ref<android::content::ContentProviderOperation_Builder>>(uri); }
inline ref<android::content::ContentProviderOperation_Builder> ContentProviderOperation::newUpdate(ref<android::net::Uri> uri) { return call_static_method<SCAPIX_META_STRING("newUpdate"), ref<android::content::ContentProviderOperation_Builder>>(uri); }
inline ref<android::content::ContentProviderOperation_Builder> ContentProviderOperation::newDelete(ref<android::net::Uri> uri) { return call_static_method<SCAPIX_META_STRING("newDelete"), ref<android::content::ContentProviderOperation_Builder>>(uri); }
inline ref<android::content::ContentProviderOperation_Builder> ContentProviderOperation::newAssertQuery(ref<android::net::Uri> uri) { return call_static_method<SCAPIX_META_STRING("newAssertQuery"), ref<android::content::ContentProviderOperation_Builder>>(uri); }
inline ref<android::net::Uri> ContentProviderOperation::getUri() { return call_method<SCAPIX_META_STRING("getUri"), ref<android::net::Uri>>(); }
inline jboolean ContentProviderOperation::isYieldAllowed() { return call_method<SCAPIX_META_STRING("isYieldAllowed"), jboolean>(); }
inline jboolean ContentProviderOperation::isInsert() { return call_method<SCAPIX_META_STRING("isInsert"), jboolean>(); }
inline jboolean ContentProviderOperation::isDelete() { return call_method<SCAPIX_META_STRING("isDelete"), jboolean>(); }
inline jboolean ContentProviderOperation::isUpdate() { return call_method<SCAPIX_META_STRING("isUpdate"), jboolean>(); }
inline jboolean ContentProviderOperation::isAssertQuery() { return call_method<SCAPIX_META_STRING("isAssertQuery"), jboolean>(); }
inline jboolean ContentProviderOperation::isWriteOperation() { return call_method<SCAPIX_META_STRING("isWriteOperation"), jboolean>(); }
inline jboolean ContentProviderOperation::isReadOperation() { return call_method<SCAPIX_META_STRING("isReadOperation"), jboolean>(); }
inline ref<android::content::ContentProviderResult> ContentProviderOperation::apply(ref<android::content::ContentProvider> provider, ref<link::java::array<android::content::ContentProviderResult>> backRefs, jint numBackRefs) { return call_method<SCAPIX_META_STRING("apply"), ref<android::content::ContentProviderResult>>(provider, backRefs, numBackRefs); }
inline ref<android::content::ContentValues> ContentProviderOperation::resolveValueBackReferences(ref<link::java::array<android::content::ContentProviderResult>> backRefs, jint numBackRefs) { return call_method<SCAPIX_META_STRING("resolveValueBackReferences"), ref<android::content::ContentValues>>(backRefs, numBackRefs); }
inline ref<link::java::array<java::lang::String>> ContentProviderOperation::resolveSelectionArgsBackReferences(ref<link::java::array<android::content::ContentProviderResult>> backRefs, jint numBackRefs) { return call_method<SCAPIX_META_STRING("resolveSelectionArgsBackReferences"), ref<link::java::array<java::lang::String>>>(backRefs, numBackRefs); }
inline ref<java::lang::String> ContentProviderOperation::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint ContentProviderOperation::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }

} // namespace android::content
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_CONTENTPROVIDEROPERATION_H
