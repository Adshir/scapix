// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/content/Context.h>

#ifndef SCAPIX_ANDROID_CONTENT_CONTEXTWRAPPER_H
#define SCAPIX_ANDROID_CONTENT_CONTEXTWRAPPER_H

namespace scapix::java_api {

namespace android::content { class BroadcastReceiver; }
namespace android::content { class ComponentName; }
namespace android::content { class ContentResolver; }
namespace android::content { class Intent; }
namespace android::content { class IntentFilter; }
namespace android::content { class IntentSender; }
namespace android::content { class ServiceConnection; }
namespace android::content { class SharedPreferences; }
namespace android::content::pm { class ApplicationInfo; }
namespace android::content::pm { class PackageManager; }
namespace android::content::res { class AssetManager; }
namespace android::content::res { class Configuration; }
namespace android::content::res { class Resources; }
namespace android::content::res { class Resources_Theme; }
namespace android::database { class DatabaseErrorHandler; }
namespace android::database::sqlite { class SQLiteDatabase; }
namespace android::database::sqlite { class SQLiteDatabase_CursorFactory; }
namespace android::graphics { class Bitmap; }
namespace android::graphics::drawable { class Drawable; }
namespace android::net { class Uri; }
namespace android::os { class Bundle; }
namespace android::os { class Handler; }
namespace android::os { class Looper; }
namespace android::os { class UserHandle; }
namespace android::view { class Display; }
namespace java::io { class File; }
namespace java::io { class FileInputStream; }
namespace java::io { class FileOutputStream; }
namespace java::io { class InputStream; }
namespace java::lang { class Class; }
namespace java::lang { class ClassLoader; }
namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::util::concurrent { class Executor; }

namespace android::content {

class ContextWrapper : public object_base<SCAPIX_META_STRING("android/content/ContextWrapper"),
	android::content::Context>
{
public:

	static ref<ContextWrapper> new_object(ref<android::content::Context> base);
	ref<android::content::Context> getBaseContext();
	ref<android::content::res::AssetManager> getAssets();
	ref<android::content::res::Resources> getResources();
	ref<android::content::pm::PackageManager> getPackageManager();
	ref<android::content::ContentResolver> getContentResolver();
	ref<android::os::Looper> getMainLooper();
	ref<java::util::concurrent::Executor> getMainExecutor();
	ref<android::content::Context> getApplicationContext();
	void setTheme(jint resid);
	ref<android::content::res::Resources_Theme> getTheme();
	ref<java::lang::ClassLoader> getClassLoader();
	ref<java::lang::String> getPackageName();
	ref<android::content::pm::ApplicationInfo> getApplicationInfo();
	ref<java::lang::String> getPackageResourcePath();
	ref<java::lang::String> getPackageCodePath();
	ref<android::content::SharedPreferences> getSharedPreferences(ref<java::lang::String> name, jint mode);
	jboolean moveSharedPreferencesFrom(ref<android::content::Context> sourceContext, ref<java::lang::String> name);
	jboolean deleteSharedPreferences(ref<java::lang::String> name);
	ref<java::io::FileInputStream> openFileInput(ref<java::lang::String> name);
	ref<java::io::FileOutputStream> openFileOutput(ref<java::lang::String> name, jint mode);
	jboolean deleteFile(ref<java::lang::String> name);
	ref<java::io::File> getFileStreamPath(ref<java::lang::String> name);
	ref<link::java::array<java::lang::String>> fileList();
	ref<java::io::File> getDataDir();
	ref<java::io::File> getFilesDir();
	ref<java::io::File> getNoBackupFilesDir();
	ref<java::io::File> getExternalFilesDir(ref<java::lang::String> type);
	ref<link::java::array<java::io::File>> getExternalFilesDirs(ref<java::lang::String> type);
	ref<java::io::File> getObbDir();
	ref<link::java::array<java::io::File>> getObbDirs();
	ref<java::io::File> getCacheDir();
	ref<java::io::File> getCodeCacheDir();
	ref<java::io::File> getExternalCacheDir();
	ref<link::java::array<java::io::File>> getExternalCacheDirs();
	ref<link::java::array<java::io::File>> getExternalMediaDirs();
	ref<java::io::File> getDir(ref<java::lang::String> name, jint mode);
	ref<android::database::sqlite::SQLiteDatabase> openOrCreateDatabase(ref<java::lang::String> name, jint mode, ref<android::database::sqlite::SQLiteDatabase_CursorFactory> factory);
	ref<android::database::sqlite::SQLiteDatabase> openOrCreateDatabase(ref<java::lang::String> name, jint mode, ref<android::database::sqlite::SQLiteDatabase_CursorFactory> factory, ref<android::database::DatabaseErrorHandler> errorHandler);
	jboolean moveDatabaseFrom(ref<android::content::Context> sourceContext, ref<java::lang::String> name);
	jboolean deleteDatabase(ref<java::lang::String> name);
	ref<java::io::File> getDatabasePath(ref<java::lang::String> name);
	ref<link::java::array<java::lang::String>> databaseList();
	ref<android::graphics::drawable::Drawable> getWallpaper();
	ref<android::graphics::drawable::Drawable> peekWallpaper();
	jint getWallpaperDesiredMinimumWidth();
	jint getWallpaperDesiredMinimumHeight();
	void setWallpaper(ref<android::graphics::Bitmap> bitmap);
	void setWallpaper(ref<java::io::InputStream> data);
	void clearWallpaper();
	void startActivity(ref<android::content::Intent> intent);
	void startActivity(ref<android::content::Intent> intent, ref<android::os::Bundle> options);
	void startActivities(ref<link::java::array<android::content::Intent>> intents);
	void startActivities(ref<link::java::array<android::content::Intent>> intents, ref<android::os::Bundle> options);
	void startIntentSender(ref<android::content::IntentSender> intent, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags);
	void startIntentSender(ref<android::content::IntentSender> intent, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags, ref<android::os::Bundle> options);
	void sendBroadcast(ref<android::content::Intent> intent);
	void sendBroadcast(ref<android::content::Intent> intent, ref<java::lang::String> receiverPermission);
	void sendOrderedBroadcast(ref<android::content::Intent> intent, ref<java::lang::String> receiverPermission);
	void sendOrderedBroadcast(ref<android::content::Intent> intent, ref<java::lang::String> receiverPermission, ref<android::content::BroadcastReceiver> resultReceiver, ref<android::os::Handler> scheduler, jint initialCode, ref<java::lang::String> initialData, ref<android::os::Bundle> initialExtras);
	void sendBroadcastAsUser(ref<android::content::Intent> intent, ref<android::os::UserHandle> user);
	void sendBroadcastAsUser(ref<android::content::Intent> intent, ref<android::os::UserHandle> user, ref<java::lang::String> receiverPermission);
	void sendOrderedBroadcastAsUser(ref<android::content::Intent> intent, ref<android::os::UserHandle> user, ref<java::lang::String> receiverPermission, ref<android::content::BroadcastReceiver> resultReceiver, ref<android::os::Handler> scheduler, jint initialCode, ref<java::lang::String> initialData, ref<android::os::Bundle> initialExtras);
	void sendStickyBroadcast(ref<android::content::Intent> intent);
	void sendStickyOrderedBroadcast(ref<android::content::Intent> intent, ref<android::content::BroadcastReceiver> resultReceiver, ref<android::os::Handler> scheduler, jint initialCode, ref<java::lang::String> initialData, ref<android::os::Bundle> initialExtras);
	void removeStickyBroadcast(ref<android::content::Intent> intent);
	void sendStickyBroadcastAsUser(ref<android::content::Intent> intent, ref<android::os::UserHandle> user);
	void sendStickyOrderedBroadcastAsUser(ref<android::content::Intent> intent, ref<android::os::UserHandle> user, ref<android::content::BroadcastReceiver> resultReceiver, ref<android::os::Handler> scheduler, jint initialCode, ref<java::lang::String> initialData, ref<android::os::Bundle> initialExtras);
	void removeStickyBroadcastAsUser(ref<android::content::Intent> intent, ref<android::os::UserHandle> user);
	ref<android::content::Intent> registerReceiver(ref<android::content::BroadcastReceiver> receiver, ref<android::content::IntentFilter> filter);
	ref<android::content::Intent> registerReceiver(ref<android::content::BroadcastReceiver> receiver, ref<android::content::IntentFilter> filter, jint flags);
	ref<android::content::Intent> registerReceiver(ref<android::content::BroadcastReceiver> receiver, ref<android::content::IntentFilter> filter, ref<java::lang::String> broadcastPermission, ref<android::os::Handler> scheduler);
	ref<android::content::Intent> registerReceiver(ref<android::content::BroadcastReceiver> receiver, ref<android::content::IntentFilter> filter, ref<java::lang::String> broadcastPermission, ref<android::os::Handler> scheduler, jint flags);
	void unregisterReceiver(ref<android::content::BroadcastReceiver> receiver);
	ref<android::content::ComponentName> startService(ref<android::content::Intent> service);
	ref<android::content::ComponentName> startForegroundService(ref<android::content::Intent> service);
	jboolean stopService(ref<android::content::Intent> name);
	jboolean bindService(ref<android::content::Intent> service, ref<android::content::ServiceConnection> conn, jint flags);
	void unbindService(ref<android::content::ServiceConnection> conn);
	jboolean startInstrumentation(ref<android::content::ComponentName> className, ref<java::lang::String> profileFile, ref<android::os::Bundle> arguments);
	ref<java::lang::Object> getSystemService(ref<java::lang::String> name);
	ref<java::lang::String> getSystemServiceName(ref<java::lang::Class> serviceClass);
	jint checkPermission(ref<java::lang::String> permission, jint pid, jint uid);
	jint checkCallingPermission(ref<java::lang::String> permission);
	jint checkCallingOrSelfPermission(ref<java::lang::String> permission);
	jint checkSelfPermission(ref<java::lang::String> permission);
	void enforcePermission(ref<java::lang::String> permission, jint pid, jint uid, ref<java::lang::String> message);
	void enforceCallingPermission(ref<java::lang::String> permission, ref<java::lang::String> message);
	void enforceCallingOrSelfPermission(ref<java::lang::String> permission, ref<java::lang::String> message);
	void grantUriPermission(ref<java::lang::String> toPackage, ref<android::net::Uri> uri, jint modeFlags);
	void revokeUriPermission(ref<android::net::Uri> uri, jint modeFlags);
	void revokeUriPermission(ref<java::lang::String> targetPackage, ref<android::net::Uri> uri, jint modeFlags);
	jint checkUriPermission(ref<android::net::Uri> uri, jint pid, jint uid, jint modeFlags);
	jint checkCallingUriPermission(ref<android::net::Uri> uri, jint modeFlags);
	jint checkCallingOrSelfUriPermission(ref<android::net::Uri> uri, jint modeFlags);
	jint checkUriPermission(ref<android::net::Uri> uri, ref<java::lang::String> readPermission, ref<java::lang::String> writePermission, jint pid, jint uid, jint modeFlags);
	void enforceUriPermission(ref<android::net::Uri> uri, jint pid, jint uid, jint modeFlags, ref<java::lang::String> message);
	void enforceCallingUriPermission(ref<android::net::Uri> uri, jint modeFlags, ref<java::lang::String> message);
	void enforceCallingOrSelfUriPermission(ref<android::net::Uri> uri, jint modeFlags, ref<java::lang::String> message);
	void enforceUriPermission(ref<android::net::Uri> uri, ref<java::lang::String> readPermission, ref<java::lang::String> writePermission, jint pid, jint uid, jint modeFlags, ref<java::lang::String> message);
	ref<android::content::Context> createPackageContext(ref<java::lang::String> packageName, jint flags);
	ref<android::content::Context> createContextForSplit(ref<java::lang::String> splitName);
	ref<android::content::Context> createConfigurationContext(ref<android::content::res::Configuration> overrideConfiguration);
	ref<android::content::Context> createDisplayContext(ref<android::view::Display> display);
	jboolean isRestricted();
	ref<android::content::Context> createDeviceProtectedStorageContext();
	jboolean isDeviceProtectedStorage();

protected:

	ContextWrapper(handle_type h) : base_(h) {}

};

} // namespace android::content
} // namespace scapix::java_api

#include <scapix/java_api/android/content/BroadcastReceiver.h>
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/content/ContentResolver.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/IntentFilter.h>
#include <scapix/java_api/android/content/IntentSender.h>
#include <scapix/java_api/android/content/ServiceConnection.h>
#include <scapix/java_api/android/content/SharedPreferences.h>
#include <scapix/java_api/android/content/pm/ApplicationInfo.h>
#include <scapix/java_api/android/content/pm/PackageManager.h>
#include <scapix/java_api/android/content/res/AssetManager.h>
#include <scapix/java_api/android/content/res/Configuration.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/database/DatabaseErrorHandler.h>
#include <scapix/java_api/android/database/sqlite/SQLiteDatabase.h>
#include <scapix/java_api/android/database/sqlite/SQLiteDatabase_CursorFactory.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/Looper.h>
#include <scapix/java_api/android/os/UserHandle.h>
#include <scapix/java_api/android/view/Display.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/FileInputStream.h>
#include <scapix/java_api/java/io/FileOutputStream.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>

namespace scapix::java_api {
namespace android::content {

inline ref<ContextWrapper> ContextWrapper::new_object(ref<android::content::Context> base) { return base_::new_object(base); }
inline ref<android::content::Context> ContextWrapper::getBaseContext() { return call_method<SCAPIX_META_STRING("getBaseContext"), ref<android::content::Context>>(); }
inline ref<android::content::res::AssetManager> ContextWrapper::getAssets() { return call_method<SCAPIX_META_STRING("getAssets"), ref<android::content::res::AssetManager>>(); }
inline ref<android::content::res::Resources> ContextWrapper::getResources() { return call_method<SCAPIX_META_STRING("getResources"), ref<android::content::res::Resources>>(); }
inline ref<android::content::pm::PackageManager> ContextWrapper::getPackageManager() { return call_method<SCAPIX_META_STRING("getPackageManager"), ref<android::content::pm::PackageManager>>(); }
inline ref<android::content::ContentResolver> ContextWrapper::getContentResolver() { return call_method<SCAPIX_META_STRING("getContentResolver"), ref<android::content::ContentResolver>>(); }
inline ref<android::os::Looper> ContextWrapper::getMainLooper() { return call_method<SCAPIX_META_STRING("getMainLooper"), ref<android::os::Looper>>(); }
inline ref<java::util::concurrent::Executor> ContextWrapper::getMainExecutor() { return call_method<SCAPIX_META_STRING("getMainExecutor"), ref<java::util::concurrent::Executor>>(); }
inline ref<android::content::Context> ContextWrapper::getApplicationContext() { return call_method<SCAPIX_META_STRING("getApplicationContext"), ref<android::content::Context>>(); }
inline void ContextWrapper::setTheme(jint resid) { return call_method<SCAPIX_META_STRING("setTheme"), void>(resid); }
inline ref<android::content::res::Resources_Theme> ContextWrapper::getTheme() { return call_method<SCAPIX_META_STRING("getTheme"), ref<android::content::res::Resources_Theme>>(); }
inline ref<java::lang::ClassLoader> ContextWrapper::getClassLoader() { return call_method<SCAPIX_META_STRING("getClassLoader"), ref<java::lang::ClassLoader>>(); }
inline ref<java::lang::String> ContextWrapper::getPackageName() { return call_method<SCAPIX_META_STRING("getPackageName"), ref<java::lang::String>>(); }
inline ref<android::content::pm::ApplicationInfo> ContextWrapper::getApplicationInfo() { return call_method<SCAPIX_META_STRING("getApplicationInfo"), ref<android::content::pm::ApplicationInfo>>(); }
inline ref<java::lang::String> ContextWrapper::getPackageResourcePath() { return call_method<SCAPIX_META_STRING("getPackageResourcePath"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContextWrapper::getPackageCodePath() { return call_method<SCAPIX_META_STRING("getPackageCodePath"), ref<java::lang::String>>(); }
inline ref<android::content::SharedPreferences> ContextWrapper::getSharedPreferences(ref<java::lang::String> name, jint mode) { return call_method<SCAPIX_META_STRING("getSharedPreferences"), ref<android::content::SharedPreferences>>(name, mode); }
inline jboolean ContextWrapper::moveSharedPreferencesFrom(ref<android::content::Context> sourceContext, ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("moveSharedPreferencesFrom"), jboolean>(sourceContext, name); }
inline jboolean ContextWrapper::deleteSharedPreferences(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("deleteSharedPreferences"), jboolean>(name); }
inline ref<java::io::FileInputStream> ContextWrapper::openFileInput(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("openFileInput"), ref<java::io::FileInputStream>>(name); }
inline ref<java::io::FileOutputStream> ContextWrapper::openFileOutput(ref<java::lang::String> name, jint mode) { return call_method<SCAPIX_META_STRING("openFileOutput"), ref<java::io::FileOutputStream>>(name, mode); }
inline jboolean ContextWrapper::deleteFile(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("deleteFile"), jboolean>(name); }
inline ref<java::io::File> ContextWrapper::getFileStreamPath(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getFileStreamPath"), ref<java::io::File>>(name); }
inline ref<link::java::array<java::lang::String>> ContextWrapper::fileList() { return call_method<SCAPIX_META_STRING("fileList"), ref<link::java::array<java::lang::String>>>(); }
inline ref<java::io::File> ContextWrapper::getDataDir() { return call_method<SCAPIX_META_STRING("getDataDir"), ref<java::io::File>>(); }
inline ref<java::io::File> ContextWrapper::getFilesDir() { return call_method<SCAPIX_META_STRING("getFilesDir"), ref<java::io::File>>(); }
inline ref<java::io::File> ContextWrapper::getNoBackupFilesDir() { return call_method<SCAPIX_META_STRING("getNoBackupFilesDir"), ref<java::io::File>>(); }
inline ref<java::io::File> ContextWrapper::getExternalFilesDir(ref<java::lang::String> type) { return call_method<SCAPIX_META_STRING("getExternalFilesDir"), ref<java::io::File>>(type); }
inline ref<link::java::array<java::io::File>> ContextWrapper::getExternalFilesDirs(ref<java::lang::String> type) { return call_method<SCAPIX_META_STRING("getExternalFilesDirs"), ref<link::java::array<java::io::File>>>(type); }
inline ref<java::io::File> ContextWrapper::getObbDir() { return call_method<SCAPIX_META_STRING("getObbDir"), ref<java::io::File>>(); }
inline ref<link::java::array<java::io::File>> ContextWrapper::getObbDirs() { return call_method<SCAPIX_META_STRING("getObbDirs"), ref<link::java::array<java::io::File>>>(); }
inline ref<java::io::File> ContextWrapper::getCacheDir() { return call_method<SCAPIX_META_STRING("getCacheDir"), ref<java::io::File>>(); }
inline ref<java::io::File> ContextWrapper::getCodeCacheDir() { return call_method<SCAPIX_META_STRING("getCodeCacheDir"), ref<java::io::File>>(); }
inline ref<java::io::File> ContextWrapper::getExternalCacheDir() { return call_method<SCAPIX_META_STRING("getExternalCacheDir"), ref<java::io::File>>(); }
inline ref<link::java::array<java::io::File>> ContextWrapper::getExternalCacheDirs() { return call_method<SCAPIX_META_STRING("getExternalCacheDirs"), ref<link::java::array<java::io::File>>>(); }
inline ref<link::java::array<java::io::File>> ContextWrapper::getExternalMediaDirs() { return call_method<SCAPIX_META_STRING("getExternalMediaDirs"), ref<link::java::array<java::io::File>>>(); }
inline ref<java::io::File> ContextWrapper::getDir(ref<java::lang::String> name, jint mode) { return call_method<SCAPIX_META_STRING("getDir"), ref<java::io::File>>(name, mode); }
inline ref<android::database::sqlite::SQLiteDatabase> ContextWrapper::openOrCreateDatabase(ref<java::lang::String> name, jint mode, ref<android::database::sqlite::SQLiteDatabase_CursorFactory> factory) { return call_method<SCAPIX_META_STRING("openOrCreateDatabase"), ref<android::database::sqlite::SQLiteDatabase>>(name, mode, factory); }
inline ref<android::database::sqlite::SQLiteDatabase> ContextWrapper::openOrCreateDatabase(ref<java::lang::String> name, jint mode, ref<android::database::sqlite::SQLiteDatabase_CursorFactory> factory, ref<android::database::DatabaseErrorHandler> errorHandler) { return call_method<SCAPIX_META_STRING("openOrCreateDatabase"), ref<android::database::sqlite::SQLiteDatabase>>(name, mode, factory, errorHandler); }
inline jboolean ContextWrapper::moveDatabaseFrom(ref<android::content::Context> sourceContext, ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("moveDatabaseFrom"), jboolean>(sourceContext, name); }
inline jboolean ContextWrapper::deleteDatabase(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("deleteDatabase"), jboolean>(name); }
inline ref<java::io::File> ContextWrapper::getDatabasePath(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getDatabasePath"), ref<java::io::File>>(name); }
inline ref<link::java::array<java::lang::String>> ContextWrapper::databaseList() { return call_method<SCAPIX_META_STRING("databaseList"), ref<link::java::array<java::lang::String>>>(); }
inline ref<android::graphics::drawable::Drawable> ContextWrapper::getWallpaper() { return call_method<SCAPIX_META_STRING("getWallpaper"), ref<android::graphics::drawable::Drawable>>(); }
inline ref<android::graphics::drawable::Drawable> ContextWrapper::peekWallpaper() { return call_method<SCAPIX_META_STRING("peekWallpaper"), ref<android::graphics::drawable::Drawable>>(); }
inline jint ContextWrapper::getWallpaperDesiredMinimumWidth() { return call_method<SCAPIX_META_STRING("getWallpaperDesiredMinimumWidth"), jint>(); }
inline jint ContextWrapper::getWallpaperDesiredMinimumHeight() { return call_method<SCAPIX_META_STRING("getWallpaperDesiredMinimumHeight"), jint>(); }
inline void ContextWrapper::setWallpaper(ref<android::graphics::Bitmap> bitmap) { return call_method<SCAPIX_META_STRING("setWallpaper"), void>(bitmap); }
inline void ContextWrapper::setWallpaper(ref<java::io::InputStream> data) { return call_method<SCAPIX_META_STRING("setWallpaper"), void>(data); }
inline void ContextWrapper::clearWallpaper() { return call_method<SCAPIX_META_STRING("clearWallpaper"), void>(); }
inline void ContextWrapper::startActivity(ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("startActivity"), void>(intent); }
inline void ContextWrapper::startActivity(ref<android::content::Intent> intent, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startActivity"), void>(intent, options); }
inline void ContextWrapper::startActivities(ref<link::java::array<android::content::Intent>> intents) { return call_method<SCAPIX_META_STRING("startActivities"), void>(intents); }
inline void ContextWrapper::startActivities(ref<link::java::array<android::content::Intent>> intents, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startActivities"), void>(intents, options); }
inline void ContextWrapper::startIntentSender(ref<android::content::IntentSender> intent, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags) { return call_method<SCAPIX_META_STRING("startIntentSender"), void>(intent, fillInIntent, flagsMask, flagsValues, extraFlags); }
inline void ContextWrapper::startIntentSender(ref<android::content::IntentSender> intent, ref<android::content::Intent> fillInIntent, jint flagsMask, jint flagsValues, jint extraFlags, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startIntentSender"), void>(intent, fillInIntent, flagsMask, flagsValues, extraFlags, options); }
inline void ContextWrapper::sendBroadcast(ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("sendBroadcast"), void>(intent); }
inline void ContextWrapper::sendBroadcast(ref<android::content::Intent> intent, ref<java::lang::String> receiverPermission) { return call_method<SCAPIX_META_STRING("sendBroadcast"), void>(intent, receiverPermission); }
inline void ContextWrapper::sendOrderedBroadcast(ref<android::content::Intent> intent, ref<java::lang::String> receiverPermission) { return call_method<SCAPIX_META_STRING("sendOrderedBroadcast"), void>(intent, receiverPermission); }
inline void ContextWrapper::sendOrderedBroadcast(ref<android::content::Intent> intent, ref<java::lang::String> receiverPermission, ref<android::content::BroadcastReceiver> resultReceiver, ref<android::os::Handler> scheduler, jint initialCode, ref<java::lang::String> initialData, ref<android::os::Bundle> initialExtras) { return call_method<SCAPIX_META_STRING("sendOrderedBroadcast"), void>(intent, receiverPermission, resultReceiver, scheduler, initialCode, initialData, initialExtras); }
inline void ContextWrapper::sendBroadcastAsUser(ref<android::content::Intent> intent, ref<android::os::UserHandle> user) { return call_method<SCAPIX_META_STRING("sendBroadcastAsUser"), void>(intent, user); }
inline void ContextWrapper::sendBroadcastAsUser(ref<android::content::Intent> intent, ref<android::os::UserHandle> user, ref<java::lang::String> receiverPermission) { return call_method<SCAPIX_META_STRING("sendBroadcastAsUser"), void>(intent, user, receiverPermission); }
inline void ContextWrapper::sendOrderedBroadcastAsUser(ref<android::content::Intent> intent, ref<android::os::UserHandle> user, ref<java::lang::String> receiverPermission, ref<android::content::BroadcastReceiver> resultReceiver, ref<android::os::Handler> scheduler, jint initialCode, ref<java::lang::String> initialData, ref<android::os::Bundle> initialExtras) { return call_method<SCAPIX_META_STRING("sendOrderedBroadcastAsUser"), void>(intent, user, receiverPermission, resultReceiver, scheduler, initialCode, initialData, initialExtras); }
inline void ContextWrapper::sendStickyBroadcast(ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("sendStickyBroadcast"), void>(intent); }
inline void ContextWrapper::sendStickyOrderedBroadcast(ref<android::content::Intent> intent, ref<android::content::BroadcastReceiver> resultReceiver, ref<android::os::Handler> scheduler, jint initialCode, ref<java::lang::String> initialData, ref<android::os::Bundle> initialExtras) { return call_method<SCAPIX_META_STRING("sendStickyOrderedBroadcast"), void>(intent, resultReceiver, scheduler, initialCode, initialData, initialExtras); }
inline void ContextWrapper::removeStickyBroadcast(ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("removeStickyBroadcast"), void>(intent); }
inline void ContextWrapper::sendStickyBroadcastAsUser(ref<android::content::Intent> intent, ref<android::os::UserHandle> user) { return call_method<SCAPIX_META_STRING("sendStickyBroadcastAsUser"), void>(intent, user); }
inline void ContextWrapper::sendStickyOrderedBroadcastAsUser(ref<android::content::Intent> intent, ref<android::os::UserHandle> user, ref<android::content::BroadcastReceiver> resultReceiver, ref<android::os::Handler> scheduler, jint initialCode, ref<java::lang::String> initialData, ref<android::os::Bundle> initialExtras) { return call_method<SCAPIX_META_STRING("sendStickyOrderedBroadcastAsUser"), void>(intent, user, resultReceiver, scheduler, initialCode, initialData, initialExtras); }
inline void ContextWrapper::removeStickyBroadcastAsUser(ref<android::content::Intent> intent, ref<android::os::UserHandle> user) { return call_method<SCAPIX_META_STRING("removeStickyBroadcastAsUser"), void>(intent, user); }
inline ref<android::content::Intent> ContextWrapper::registerReceiver(ref<android::content::BroadcastReceiver> receiver, ref<android::content::IntentFilter> filter) { return call_method<SCAPIX_META_STRING("registerReceiver"), ref<android::content::Intent>>(receiver, filter); }
inline ref<android::content::Intent> ContextWrapper::registerReceiver(ref<android::content::BroadcastReceiver> receiver, ref<android::content::IntentFilter> filter, jint flags) { return call_method<SCAPIX_META_STRING("registerReceiver"), ref<android::content::Intent>>(receiver, filter, flags); }
inline ref<android::content::Intent> ContextWrapper::registerReceiver(ref<android::content::BroadcastReceiver> receiver, ref<android::content::IntentFilter> filter, ref<java::lang::String> broadcastPermission, ref<android::os::Handler> scheduler) { return call_method<SCAPIX_META_STRING("registerReceiver"), ref<android::content::Intent>>(receiver, filter, broadcastPermission, scheduler); }
inline ref<android::content::Intent> ContextWrapper::registerReceiver(ref<android::content::BroadcastReceiver> receiver, ref<android::content::IntentFilter> filter, ref<java::lang::String> broadcastPermission, ref<android::os::Handler> scheduler, jint flags) { return call_method<SCAPIX_META_STRING("registerReceiver"), ref<android::content::Intent>>(receiver, filter, broadcastPermission, scheduler, flags); }
inline void ContextWrapper::unregisterReceiver(ref<android::content::BroadcastReceiver> receiver) { return call_method<SCAPIX_META_STRING("unregisterReceiver"), void>(receiver); }
inline ref<android::content::ComponentName> ContextWrapper::startService(ref<android::content::Intent> service) { return call_method<SCAPIX_META_STRING("startService"), ref<android::content::ComponentName>>(service); }
inline ref<android::content::ComponentName> ContextWrapper::startForegroundService(ref<android::content::Intent> service) { return call_method<SCAPIX_META_STRING("startForegroundService"), ref<android::content::ComponentName>>(service); }
inline jboolean ContextWrapper::stopService(ref<android::content::Intent> name) { return call_method<SCAPIX_META_STRING("stopService"), jboolean>(name); }
inline jboolean ContextWrapper::bindService(ref<android::content::Intent> service, ref<android::content::ServiceConnection> conn, jint flags) { return call_method<SCAPIX_META_STRING("bindService"), jboolean>(service, conn, flags); }
inline void ContextWrapper::unbindService(ref<android::content::ServiceConnection> conn) { return call_method<SCAPIX_META_STRING("unbindService"), void>(conn); }
inline jboolean ContextWrapper::startInstrumentation(ref<android::content::ComponentName> className, ref<java::lang::String> profileFile, ref<android::os::Bundle> arguments) { return call_method<SCAPIX_META_STRING("startInstrumentation"), jboolean>(className, profileFile, arguments); }
inline ref<java::lang::Object> ContextWrapper::getSystemService(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getSystemService"), ref<java::lang::Object>>(name); }
inline ref<java::lang::String> ContextWrapper::getSystemServiceName(ref<java::lang::Class> serviceClass) { return call_method<SCAPIX_META_STRING("getSystemServiceName"), ref<java::lang::String>>(serviceClass); }
inline jint ContextWrapper::checkPermission(ref<java::lang::String> permission, jint pid, jint uid) { return call_method<SCAPIX_META_STRING("checkPermission"), jint>(permission, pid, uid); }
inline jint ContextWrapper::checkCallingPermission(ref<java::lang::String> permission) { return call_method<SCAPIX_META_STRING("checkCallingPermission"), jint>(permission); }
inline jint ContextWrapper::checkCallingOrSelfPermission(ref<java::lang::String> permission) { return call_method<SCAPIX_META_STRING("checkCallingOrSelfPermission"), jint>(permission); }
inline jint ContextWrapper::checkSelfPermission(ref<java::lang::String> permission) { return call_method<SCAPIX_META_STRING("checkSelfPermission"), jint>(permission); }
inline void ContextWrapper::enforcePermission(ref<java::lang::String> permission, jint pid, jint uid, ref<java::lang::String> message) { return call_method<SCAPIX_META_STRING("enforcePermission"), void>(permission, pid, uid, message); }
inline void ContextWrapper::enforceCallingPermission(ref<java::lang::String> permission, ref<java::lang::String> message) { return call_method<SCAPIX_META_STRING("enforceCallingPermission"), void>(permission, message); }
inline void ContextWrapper::enforceCallingOrSelfPermission(ref<java::lang::String> permission, ref<java::lang::String> message) { return call_method<SCAPIX_META_STRING("enforceCallingOrSelfPermission"), void>(permission, message); }
inline void ContextWrapper::grantUriPermission(ref<java::lang::String> toPackage, ref<android::net::Uri> uri, jint modeFlags) { return call_method<SCAPIX_META_STRING("grantUriPermission"), void>(toPackage, uri, modeFlags); }
inline void ContextWrapper::revokeUriPermission(ref<android::net::Uri> uri, jint modeFlags) { return call_method<SCAPIX_META_STRING("revokeUriPermission"), void>(uri, modeFlags); }
inline void ContextWrapper::revokeUriPermission(ref<java::lang::String> targetPackage, ref<android::net::Uri> uri, jint modeFlags) { return call_method<SCAPIX_META_STRING("revokeUriPermission"), void>(targetPackage, uri, modeFlags); }
inline jint ContextWrapper::checkUriPermission(ref<android::net::Uri> uri, jint pid, jint uid, jint modeFlags) { return call_method<SCAPIX_META_STRING("checkUriPermission"), jint>(uri, pid, uid, modeFlags); }
inline jint ContextWrapper::checkCallingUriPermission(ref<android::net::Uri> uri, jint modeFlags) { return call_method<SCAPIX_META_STRING("checkCallingUriPermission"), jint>(uri, modeFlags); }
inline jint ContextWrapper::checkCallingOrSelfUriPermission(ref<android::net::Uri> uri, jint modeFlags) { return call_method<SCAPIX_META_STRING("checkCallingOrSelfUriPermission"), jint>(uri, modeFlags); }
inline jint ContextWrapper::checkUriPermission(ref<android::net::Uri> uri, ref<java::lang::String> readPermission, ref<java::lang::String> writePermission, jint pid, jint uid, jint modeFlags) { return call_method<SCAPIX_META_STRING("checkUriPermission"), jint>(uri, readPermission, writePermission, pid, uid, modeFlags); }
inline void ContextWrapper::enforceUriPermission(ref<android::net::Uri> uri, jint pid, jint uid, jint modeFlags, ref<java::lang::String> message) { return call_method<SCAPIX_META_STRING("enforceUriPermission"), void>(uri, pid, uid, modeFlags, message); }
inline void ContextWrapper::enforceCallingUriPermission(ref<android::net::Uri> uri, jint modeFlags, ref<java::lang::String> message) { return call_method<SCAPIX_META_STRING("enforceCallingUriPermission"), void>(uri, modeFlags, message); }
inline void ContextWrapper::enforceCallingOrSelfUriPermission(ref<android::net::Uri> uri, jint modeFlags, ref<java::lang::String> message) { return call_method<SCAPIX_META_STRING("enforceCallingOrSelfUriPermission"), void>(uri, modeFlags, message); }
inline void ContextWrapper::enforceUriPermission(ref<android::net::Uri> uri, ref<java::lang::String> readPermission, ref<java::lang::String> writePermission, jint pid, jint uid, jint modeFlags, ref<java::lang::String> message) { return call_method<SCAPIX_META_STRING("enforceUriPermission"), void>(uri, readPermission, writePermission, pid, uid, modeFlags, message); }
inline ref<android::content::Context> ContextWrapper::createPackageContext(ref<java::lang::String> packageName, jint flags) { return call_method<SCAPIX_META_STRING("createPackageContext"), ref<android::content::Context>>(packageName, flags); }
inline ref<android::content::Context> ContextWrapper::createContextForSplit(ref<java::lang::String> splitName) { return call_method<SCAPIX_META_STRING("createContextForSplit"), ref<android::content::Context>>(splitName); }
inline ref<android::content::Context> ContextWrapper::createConfigurationContext(ref<android::content::res::Configuration> overrideConfiguration) { return call_method<SCAPIX_META_STRING("createConfigurationContext"), ref<android::content::Context>>(overrideConfiguration); }
inline ref<android::content::Context> ContextWrapper::createDisplayContext(ref<android::view::Display> display) { return call_method<SCAPIX_META_STRING("createDisplayContext"), ref<android::content::Context>>(display); }
inline jboolean ContextWrapper::isRestricted() { return call_method<SCAPIX_META_STRING("isRestricted"), jboolean>(); }
inline ref<android::content::Context> ContextWrapper::createDeviceProtectedStorageContext() { return call_method<SCAPIX_META_STRING("createDeviceProtectedStorageContext"), ref<android::content::Context>>(); }
inline jboolean ContextWrapper::isDeviceProtectedStorage() { return call_method<SCAPIX_META_STRING("isDeviceProtectedStorage"), jboolean>(); }

} // namespace android::content
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_CONTEXTWRAPPER_H
