// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_CONTENT_LOADER_H
#define SCAPIX_ANDROID_CONTENT_LOADER_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content { class Loader_OnLoadCanceledListener; }
namespace android::content { class Loader_OnLoadCompleteListener; }
namespace java::io { class FileDescriptor; }
namespace java::io { class PrintWriter; }
namespace java::lang { class String; }
namespace android::content { class Loader_ForceLoadContentObserver; }

namespace android::content {

class Loader : public object_base<SCAPIX_META_STRING("android/content/Loader"),
	java::lang::Object>
{
public:

	using OnLoadCompleteListener = Loader_OnLoadCompleteListener;
	using OnLoadCanceledListener = Loader_OnLoadCanceledListener;
	using ForceLoadContentObserver = Loader_ForceLoadContentObserver;

	static ref<Loader> new_object(ref<android::content::Context> context);
	void deliverResult(ref<java::lang::Object> data);
	void deliverCancellation();
	ref<android::content::Context> getContext();
	jint getId();
	void registerListener(jint id, ref<android::content::Loader_OnLoadCompleteListener> listener);
	void unregisterListener(ref<android::content::Loader_OnLoadCompleteListener> listener);
	void registerOnLoadCanceledListener(ref<android::content::Loader_OnLoadCanceledListener> listener);
	void unregisterOnLoadCanceledListener(ref<android::content::Loader_OnLoadCanceledListener> listener);
	jboolean isStarted();
	jboolean isAbandoned();
	jboolean isReset();
	void startLoading();
	jboolean cancelLoad();
	void forceLoad();
	void stopLoading();
	void abandon();
	void reset();
	jboolean takeContentChanged();
	void commitContentChanged();
	void rollbackContentChanged();
	void onContentChanged();
	ref<java::lang::String> dataToString(ref<java::lang::Object> data);
	ref<java::lang::String> toString();
	void dump(ref<java::lang::String> prefix, ref<java::io::FileDescriptor> fd, ref<java::io::PrintWriter> writer, ref<link::java::array<java::lang::String>> args);

protected:

	Loader(handle_type h) : base_(h) {}

};

} // namespace android::content
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Loader_OnLoadCanceledListener.h>
#include <scapix/java_api/android/content/Loader_OnLoadCompleteListener.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::content {

inline ref<Loader> Loader::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline void Loader::deliverResult(ref<java::lang::Object> data) { return call_method<SCAPIX_META_STRING("deliverResult"), void>(data); }
inline void Loader::deliverCancellation() { return call_method<SCAPIX_META_STRING("deliverCancellation"), void>(); }
inline ref<android::content::Context> Loader::getContext() { return call_method<SCAPIX_META_STRING("getContext"), ref<android::content::Context>>(); }
inline jint Loader::getId() { return call_method<SCAPIX_META_STRING("getId"), jint>(); }
inline void Loader::registerListener(jint id, ref<android::content::Loader_OnLoadCompleteListener> listener) { return call_method<SCAPIX_META_STRING("registerListener"), void>(id, listener); }
inline void Loader::unregisterListener(ref<android::content::Loader_OnLoadCompleteListener> listener) { return call_method<SCAPIX_META_STRING("unregisterListener"), void>(listener); }
inline void Loader::registerOnLoadCanceledListener(ref<android::content::Loader_OnLoadCanceledListener> listener) { return call_method<SCAPIX_META_STRING("registerOnLoadCanceledListener"), void>(listener); }
inline void Loader::unregisterOnLoadCanceledListener(ref<android::content::Loader_OnLoadCanceledListener> listener) { return call_method<SCAPIX_META_STRING("unregisterOnLoadCanceledListener"), void>(listener); }
inline jboolean Loader::isStarted() { return call_method<SCAPIX_META_STRING("isStarted"), jboolean>(); }
inline jboolean Loader::isAbandoned() { return call_method<SCAPIX_META_STRING("isAbandoned"), jboolean>(); }
inline jboolean Loader::isReset() { return call_method<SCAPIX_META_STRING("isReset"), jboolean>(); }
inline void Loader::startLoading() { return call_method<SCAPIX_META_STRING("startLoading"), void>(); }
inline jboolean Loader::cancelLoad() { return call_method<SCAPIX_META_STRING("cancelLoad"), jboolean>(); }
inline void Loader::forceLoad() { return call_method<SCAPIX_META_STRING("forceLoad"), void>(); }
inline void Loader::stopLoading() { return call_method<SCAPIX_META_STRING("stopLoading"), void>(); }
inline void Loader::abandon() { return call_method<SCAPIX_META_STRING("abandon"), void>(); }
inline void Loader::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline jboolean Loader::takeContentChanged() { return call_method<SCAPIX_META_STRING("takeContentChanged"), jboolean>(); }
inline void Loader::commitContentChanged() { return call_method<SCAPIX_META_STRING("commitContentChanged"), void>(); }
inline void Loader::rollbackContentChanged() { return call_method<SCAPIX_META_STRING("rollbackContentChanged"), void>(); }
inline void Loader::onContentChanged() { return call_method<SCAPIX_META_STRING("onContentChanged"), void>(); }
inline ref<java::lang::String> Loader::dataToString(ref<java::lang::Object> data) { return call_method<SCAPIX_META_STRING("dataToString"), ref<java::lang::String>>(data); }
inline ref<java::lang::String> Loader::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline void Loader::dump(ref<java::lang::String> prefix, ref<java::io::FileDescriptor> fd, ref<java::io::PrintWriter> writer, ref<link::java::array<java::lang::String>> args) { return call_method<SCAPIX_META_STRING("dump"), void>(prefix, fd, writer, args); }

} // namespace android::content
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_LOADER_H
