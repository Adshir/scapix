// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_CONTENT_INTENTFILTER_H
#define SCAPIX_ANDROID_CONTENT_INTENTFILTER_H

namespace scapix::java_api {

namespace android::content { class ContentResolver; }
namespace android::content { class Intent; }
namespace android::content { class IntentFilter_AuthorityEntry; }
namespace android::net { class Uri; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::os { class PatternMatcher; }
namespace android::util { class Printer; }
namespace java::lang { class String; }
namespace java::util { class Iterator; }
namespace java::util { class Set; }
namespace org::xmlpull::v1 { class XmlPullParser; }
namespace org::xmlpull::v1 { class XmlSerializer; }
namespace android::content { class IntentFilter_MalformedMimeTypeException; }

namespace android::content {

class IntentFilter : public object_base<SCAPIX_META_STRING("android/content/IntentFilter"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using MalformedMimeTypeException = IntentFilter_MalformedMimeTypeException;
	using AuthorityEntry = IntentFilter_AuthorityEntry;

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint MATCH_ADJUSTMENT_MASK_();
	static jint MATCH_ADJUSTMENT_NORMAL_();
	static jint MATCH_CATEGORY_EMPTY_();
	static jint MATCH_CATEGORY_HOST_();
	static jint MATCH_CATEGORY_MASK_();
	static jint MATCH_CATEGORY_PATH_();
	static jint MATCH_CATEGORY_PORT_();
	static jint MATCH_CATEGORY_SCHEME_();
	static jint MATCH_CATEGORY_SCHEME_SPECIFIC_PART_();
	static jint MATCH_CATEGORY_TYPE_();
	static jint NO_MATCH_ACTION_();
	static jint NO_MATCH_CATEGORY_();
	static jint NO_MATCH_DATA_();
	static jint NO_MATCH_TYPE_();
	static jint SYSTEM_HIGH_PRIORITY_();
	static jint SYSTEM_LOW_PRIORITY_();

	static ref<IntentFilter> new_object();
	static ref<IntentFilter> new_object(ref<java::lang::String> action);
	static ref<IntentFilter> new_object(ref<java::lang::String> action, ref<java::lang::String> dataType);
	static ref<IntentFilter> new_object(ref<android::content::IntentFilter> o);
	static ref<android::content::IntentFilter> create(ref<java::lang::String> action, ref<java::lang::String> dataType);
	void setPriority(jint priority);
	jint getPriority();
	void addAction(ref<java::lang::String> action);
	jint countActions();
	ref<java::lang::String> getAction(jint index);
	jboolean hasAction(ref<java::lang::String> action);
	jboolean matchAction(ref<java::lang::String> action);
	ref<java::util::Iterator> actionsIterator();
	void addDataType(ref<java::lang::String> type);
	jboolean hasDataType(ref<java::lang::String> type);
	jint countDataTypes();
	ref<java::lang::String> getDataType(jint index);
	ref<java::util::Iterator> typesIterator();
	void addDataScheme(ref<java::lang::String> scheme);
	jint countDataSchemes();
	ref<java::lang::String> getDataScheme(jint index);
	jboolean hasDataScheme(ref<java::lang::String> scheme);
	ref<java::util::Iterator> schemesIterator();
	void addDataSchemeSpecificPart(ref<java::lang::String> ssp, jint type);
	jint countDataSchemeSpecificParts();
	ref<android::os::PatternMatcher> getDataSchemeSpecificPart(jint index);
	jboolean hasDataSchemeSpecificPart(ref<java::lang::String> data);
	ref<java::util::Iterator> schemeSpecificPartsIterator();
	void addDataAuthority(ref<java::lang::String> host, ref<java::lang::String> port);
	jint countDataAuthorities();
	ref<android::content::IntentFilter_AuthorityEntry> getDataAuthority(jint index);
	jboolean hasDataAuthority(ref<android::net::Uri> data);
	ref<java::util::Iterator> authoritiesIterator();
	void addDataPath(ref<java::lang::String> path, jint type);
	jint countDataPaths();
	ref<android::os::PatternMatcher> getDataPath(jint index);
	jboolean hasDataPath(ref<java::lang::String> data);
	ref<java::util::Iterator> pathsIterator();
	jint matchDataAuthority(ref<android::net::Uri> data);
	jint matchData(ref<java::lang::String> type, ref<java::lang::String> scheme, ref<android::net::Uri> data);
	void addCategory(ref<java::lang::String> category);
	jint countCategories();
	ref<java::lang::String> getCategory(jint index);
	jboolean hasCategory(ref<java::lang::String> category);
	ref<java::util::Iterator> categoriesIterator();
	ref<java::lang::String> matchCategories(ref<java::util::Set> categories);
	jint match(ref<android::content::ContentResolver> resolver, ref<android::content::Intent> intent, jboolean resolve, ref<java::lang::String> logTag);
	jint match(ref<java::lang::String> action, ref<java::lang::String> type, ref<java::lang::String> scheme, ref<android::net::Uri> data, ref<java::util::Set> categories, ref<java::lang::String> logTag);
	void writeToXml(ref<org::xmlpull::v1::XmlSerializer> serializer);
	void readFromXml(ref<org::xmlpull::v1::XmlPullParser> parser);
	void dump(ref<android::util::Printer> du, ref<java::lang::String> prefix);
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);

protected:

	IntentFilter(handle_type h) : base_(h) {}

};

} // namespace android::content
} // namespace scapix::java_api

#include <scapix/java_api/android/content/ContentResolver.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/IntentFilter_AuthorityEntry.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/os/PatternMatcher.h>
#include <scapix/java_api/android/util/Printer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>
#include <scapix/java_api/org/xmlpull/v1/XmlSerializer.h>

namespace scapix::java_api {
namespace android::content {

inline ref<android::os::Parcelable_Creator> IntentFilter::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint IntentFilter::MATCH_ADJUSTMENT_MASK_() { return get_static_field<SCAPIX_META_STRING("MATCH_ADJUSTMENT_MASK"), jint>(); }
inline jint IntentFilter::MATCH_ADJUSTMENT_NORMAL_() { return get_static_field<SCAPIX_META_STRING("MATCH_ADJUSTMENT_NORMAL"), jint>(); }
inline jint IntentFilter::MATCH_CATEGORY_EMPTY_() { return get_static_field<SCAPIX_META_STRING("MATCH_CATEGORY_EMPTY"), jint>(); }
inline jint IntentFilter::MATCH_CATEGORY_HOST_() { return get_static_field<SCAPIX_META_STRING("MATCH_CATEGORY_HOST"), jint>(); }
inline jint IntentFilter::MATCH_CATEGORY_MASK_() { return get_static_field<SCAPIX_META_STRING("MATCH_CATEGORY_MASK"), jint>(); }
inline jint IntentFilter::MATCH_CATEGORY_PATH_() { return get_static_field<SCAPIX_META_STRING("MATCH_CATEGORY_PATH"), jint>(); }
inline jint IntentFilter::MATCH_CATEGORY_PORT_() { return get_static_field<SCAPIX_META_STRING("MATCH_CATEGORY_PORT"), jint>(); }
inline jint IntentFilter::MATCH_CATEGORY_SCHEME_() { return get_static_field<SCAPIX_META_STRING("MATCH_CATEGORY_SCHEME"), jint>(); }
inline jint IntentFilter::MATCH_CATEGORY_SCHEME_SPECIFIC_PART_() { return get_static_field<SCAPIX_META_STRING("MATCH_CATEGORY_SCHEME_SPECIFIC_PART"), jint>(); }
inline jint IntentFilter::MATCH_CATEGORY_TYPE_() { return get_static_field<SCAPIX_META_STRING("MATCH_CATEGORY_TYPE"), jint>(); }
inline jint IntentFilter::NO_MATCH_ACTION_() { return get_static_field<SCAPIX_META_STRING("NO_MATCH_ACTION"), jint>(); }
inline jint IntentFilter::NO_MATCH_CATEGORY_() { return get_static_field<SCAPIX_META_STRING("NO_MATCH_CATEGORY"), jint>(); }
inline jint IntentFilter::NO_MATCH_DATA_() { return get_static_field<SCAPIX_META_STRING("NO_MATCH_DATA"), jint>(); }
inline jint IntentFilter::NO_MATCH_TYPE_() { return get_static_field<SCAPIX_META_STRING("NO_MATCH_TYPE"), jint>(); }
inline jint IntentFilter::SYSTEM_HIGH_PRIORITY_() { return get_static_field<SCAPIX_META_STRING("SYSTEM_HIGH_PRIORITY"), jint>(); }
inline jint IntentFilter::SYSTEM_LOW_PRIORITY_() { return get_static_field<SCAPIX_META_STRING("SYSTEM_LOW_PRIORITY"), jint>(); }
inline ref<IntentFilter> IntentFilter::new_object() { return base_::new_object(); }
inline ref<IntentFilter> IntentFilter::new_object(ref<java::lang::String> action) { return base_::new_object(action); }
inline ref<IntentFilter> IntentFilter::new_object(ref<java::lang::String> action, ref<java::lang::String> dataType) { return base_::new_object(action, dataType); }
inline ref<IntentFilter> IntentFilter::new_object(ref<android::content::IntentFilter> o) { return base_::new_object(o); }
inline ref<android::content::IntentFilter> IntentFilter::create(ref<java::lang::String> action, ref<java::lang::String> dataType) { return call_static_method<SCAPIX_META_STRING("create"), ref<android::content::IntentFilter>>(action, dataType); }
inline void IntentFilter::setPriority(jint priority) { return call_method<SCAPIX_META_STRING("setPriority"), void>(priority); }
inline jint IntentFilter::getPriority() { return call_method<SCAPIX_META_STRING("getPriority"), jint>(); }
inline void IntentFilter::addAction(ref<java::lang::String> action) { return call_method<SCAPIX_META_STRING("addAction"), void>(action); }
inline jint IntentFilter::countActions() { return call_method<SCAPIX_META_STRING("countActions"), jint>(); }
inline ref<java::lang::String> IntentFilter::getAction(jint index) { return call_method<SCAPIX_META_STRING("getAction"), ref<java::lang::String>>(index); }
inline jboolean IntentFilter::hasAction(ref<java::lang::String> action) { return call_method<SCAPIX_META_STRING("hasAction"), jboolean>(action); }
inline jboolean IntentFilter::matchAction(ref<java::lang::String> action) { return call_method<SCAPIX_META_STRING("matchAction"), jboolean>(action); }
inline ref<java::util::Iterator> IntentFilter::actionsIterator() { return call_method<SCAPIX_META_STRING("actionsIterator"), ref<java::util::Iterator>>(); }
inline void IntentFilter::addDataType(ref<java::lang::String> type) { return call_method<SCAPIX_META_STRING("addDataType"), void>(type); }
inline jboolean IntentFilter::hasDataType(ref<java::lang::String> type) { return call_method<SCAPIX_META_STRING("hasDataType"), jboolean>(type); }
inline jint IntentFilter::countDataTypes() { return call_method<SCAPIX_META_STRING("countDataTypes"), jint>(); }
inline ref<java::lang::String> IntentFilter::getDataType(jint index) { return call_method<SCAPIX_META_STRING("getDataType"), ref<java::lang::String>>(index); }
inline ref<java::util::Iterator> IntentFilter::typesIterator() { return call_method<SCAPIX_META_STRING("typesIterator"), ref<java::util::Iterator>>(); }
inline void IntentFilter::addDataScheme(ref<java::lang::String> scheme) { return call_method<SCAPIX_META_STRING("addDataScheme"), void>(scheme); }
inline jint IntentFilter::countDataSchemes() { return call_method<SCAPIX_META_STRING("countDataSchemes"), jint>(); }
inline ref<java::lang::String> IntentFilter::getDataScheme(jint index) { return call_method<SCAPIX_META_STRING("getDataScheme"), ref<java::lang::String>>(index); }
inline jboolean IntentFilter::hasDataScheme(ref<java::lang::String> scheme) { return call_method<SCAPIX_META_STRING("hasDataScheme"), jboolean>(scheme); }
inline ref<java::util::Iterator> IntentFilter::schemesIterator() { return call_method<SCAPIX_META_STRING("schemesIterator"), ref<java::util::Iterator>>(); }
inline void IntentFilter::addDataSchemeSpecificPart(ref<java::lang::String> ssp, jint type) { return call_method<SCAPIX_META_STRING("addDataSchemeSpecificPart"), void>(ssp, type); }
inline jint IntentFilter::countDataSchemeSpecificParts() { return call_method<SCAPIX_META_STRING("countDataSchemeSpecificParts"), jint>(); }
inline ref<android::os::PatternMatcher> IntentFilter::getDataSchemeSpecificPart(jint index) { return call_method<SCAPIX_META_STRING("getDataSchemeSpecificPart"), ref<android::os::PatternMatcher>>(index); }
inline jboolean IntentFilter::hasDataSchemeSpecificPart(ref<java::lang::String> data) { return call_method<SCAPIX_META_STRING("hasDataSchemeSpecificPart"), jboolean>(data); }
inline ref<java::util::Iterator> IntentFilter::schemeSpecificPartsIterator() { return call_method<SCAPIX_META_STRING("schemeSpecificPartsIterator"), ref<java::util::Iterator>>(); }
inline void IntentFilter::addDataAuthority(ref<java::lang::String> host, ref<java::lang::String> port) { return call_method<SCAPIX_META_STRING("addDataAuthority"), void>(host, port); }
inline jint IntentFilter::countDataAuthorities() { return call_method<SCAPIX_META_STRING("countDataAuthorities"), jint>(); }
inline ref<android::content::IntentFilter_AuthorityEntry> IntentFilter::getDataAuthority(jint index) { return call_method<SCAPIX_META_STRING("getDataAuthority"), ref<android::content::IntentFilter_AuthorityEntry>>(index); }
inline jboolean IntentFilter::hasDataAuthority(ref<android::net::Uri> data) { return call_method<SCAPIX_META_STRING("hasDataAuthority"), jboolean>(data); }
inline ref<java::util::Iterator> IntentFilter::authoritiesIterator() { return call_method<SCAPIX_META_STRING("authoritiesIterator"), ref<java::util::Iterator>>(); }
inline void IntentFilter::addDataPath(ref<java::lang::String> path, jint type) { return call_method<SCAPIX_META_STRING("addDataPath"), void>(path, type); }
inline jint IntentFilter::countDataPaths() { return call_method<SCAPIX_META_STRING("countDataPaths"), jint>(); }
inline ref<android::os::PatternMatcher> IntentFilter::getDataPath(jint index) { return call_method<SCAPIX_META_STRING("getDataPath"), ref<android::os::PatternMatcher>>(index); }
inline jboolean IntentFilter::hasDataPath(ref<java::lang::String> data) { return call_method<SCAPIX_META_STRING("hasDataPath"), jboolean>(data); }
inline ref<java::util::Iterator> IntentFilter::pathsIterator() { return call_method<SCAPIX_META_STRING("pathsIterator"), ref<java::util::Iterator>>(); }
inline jint IntentFilter::matchDataAuthority(ref<android::net::Uri> data) { return call_method<SCAPIX_META_STRING("matchDataAuthority"), jint>(data); }
inline jint IntentFilter::matchData(ref<java::lang::String> type, ref<java::lang::String> scheme, ref<android::net::Uri> data) { return call_method<SCAPIX_META_STRING("matchData"), jint>(type, scheme, data); }
inline void IntentFilter::addCategory(ref<java::lang::String> category) { return call_method<SCAPIX_META_STRING("addCategory"), void>(category); }
inline jint IntentFilter::countCategories() { return call_method<SCAPIX_META_STRING("countCategories"), jint>(); }
inline ref<java::lang::String> IntentFilter::getCategory(jint index) { return call_method<SCAPIX_META_STRING("getCategory"), ref<java::lang::String>>(index); }
inline jboolean IntentFilter::hasCategory(ref<java::lang::String> category) { return call_method<SCAPIX_META_STRING("hasCategory"), jboolean>(category); }
inline ref<java::util::Iterator> IntentFilter::categoriesIterator() { return call_method<SCAPIX_META_STRING("categoriesIterator"), ref<java::util::Iterator>>(); }
inline ref<java::lang::String> IntentFilter::matchCategories(ref<java::util::Set> categories) { return call_method<SCAPIX_META_STRING("matchCategories"), ref<java::lang::String>>(categories); }
inline jint IntentFilter::match(ref<android::content::ContentResolver> resolver, ref<android::content::Intent> intent, jboolean resolve, ref<java::lang::String> logTag) { return call_method<SCAPIX_META_STRING("match"), jint>(resolver, intent, resolve, logTag); }
inline jint IntentFilter::match(ref<java::lang::String> action, ref<java::lang::String> type, ref<java::lang::String> scheme, ref<android::net::Uri> data, ref<java::util::Set> categories, ref<java::lang::String> logTag) { return call_method<SCAPIX_META_STRING("match"), jint>(action, type, scheme, data, categories, logTag); }
inline void IntentFilter::writeToXml(ref<org::xmlpull::v1::XmlSerializer> serializer) { return call_method<SCAPIX_META_STRING("writeToXml"), void>(serializer); }
inline void IntentFilter::readFromXml(ref<org::xmlpull::v1::XmlPullParser> parser) { return call_method<SCAPIX_META_STRING("readFromXml"), void>(parser); }
inline void IntentFilter::dump(ref<android::util::Printer> du, ref<java::lang::String> prefix) { return call_method<SCAPIX_META_STRING("dump"), void>(du, prefix); }
inline jint IntentFilter::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void IntentFilter::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }

} // namespace android::content
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_INTENTFILTER_H
