// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_CONTENT_CONTENTRESOLVER_H
#define SCAPIX_ANDROID_CONTENT_CONTENTRESOLVER_H

namespace scapix::java_api {

namespace android::accounts { class Account; }
namespace android::content { class ContentProviderClient; }
namespace android::content { class ContentProviderResult; }
namespace android::content { class ContentValues; }
namespace android::content { class Context; }
namespace android::content { class SyncAdapterType; }
namespace android::content { class SyncInfo; }
namespace android::content { class SyncRequest; }
namespace android::content { class SyncStatusObserver; }
namespace android::content::res { class AssetFileDescriptor; }
namespace android::database { class ContentObserver; }
namespace android::database { class Cursor; }
namespace android::net { class Uri; }
namespace android::os { class Bundle; }
namespace android::os { class CancellationSignal; }
namespace android::os { class ParcelFileDescriptor; }
namespace java::io { class InputStream; }
namespace java::io { class OutputStream; }
namespace java::lang { class String; }
namespace java::util { class ArrayList; }
namespace java::util { class List; }

namespace android::content {

class ContentResolver : public object_base<SCAPIX_META_STRING("android/content/ContentResolver"),
	java::lang::Object>
{
public:

	static ref<java::lang::String> ANY_CURSOR_ITEM_TYPE_();
	static ref<java::lang::String> CURSOR_DIR_BASE_TYPE_();
	static ref<java::lang::String> CURSOR_ITEM_BASE_TYPE_();
	static ref<java::lang::String> EXTRA_HONORED_ARGS_();
	static ref<java::lang::String> EXTRA_REFRESH_SUPPORTED_();
	static ref<java::lang::String> EXTRA_SIZE_();
	static ref<java::lang::String> EXTRA_TOTAL_COUNT_();
	static jint NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS_();
	static jint NOTIFY_SYNC_TO_NETWORK_();
	static ref<java::lang::String> QUERY_ARG_LIMIT_();
	static ref<java::lang::String> QUERY_ARG_OFFSET_();
	static ref<java::lang::String> QUERY_ARG_SORT_COLLATION_();
	static ref<java::lang::String> QUERY_ARG_SORT_COLUMNS_();
	static ref<java::lang::String> QUERY_ARG_SORT_DIRECTION_();
	static ref<java::lang::String> QUERY_ARG_SQL_SELECTION_();
	static ref<java::lang::String> QUERY_ARG_SQL_SELECTION_ARGS_();
	static ref<java::lang::String> QUERY_ARG_SQL_SORT_ORDER_();
	static jint QUERY_SORT_DIRECTION_ASCENDING_();
	static jint QUERY_SORT_DIRECTION_DESCENDING_();
	static ref<java::lang::String> SCHEME_ANDROID_RESOURCE_();
	static ref<java::lang::String> SCHEME_CONTENT_();
	static ref<java::lang::String> SCHEME_FILE_();
	static ref<java::lang::String> SYNC_EXTRAS_ACCOUNT_();
	static ref<java::lang::String> SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS_();
	static ref<java::lang::String> SYNC_EXTRAS_DO_NOT_RETRY_();
	static ref<java::lang::String> SYNC_EXTRAS_EXPEDITED_();
	static ref<java::lang::String> SYNC_EXTRAS_FORCE_();
	static ref<java::lang::String> SYNC_EXTRAS_IGNORE_BACKOFF_();
	static ref<java::lang::String> SYNC_EXTRAS_IGNORE_SETTINGS_();
	static ref<java::lang::String> SYNC_EXTRAS_INITIALIZE_();
	static ref<java::lang::String> SYNC_EXTRAS_MANUAL_();
	static ref<java::lang::String> SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS_();
	static ref<java::lang::String> SYNC_EXTRAS_REQUIRE_CHARGING_();
	static ref<java::lang::String> SYNC_EXTRAS_UPLOAD_();
	static jint SYNC_OBSERVER_TYPE_ACTIVE_();
	static jint SYNC_OBSERVER_TYPE_PENDING_();
	static jint SYNC_OBSERVER_TYPE_SETTINGS_();

	static ref<ContentResolver> new_object(ref<android::content::Context> context);
	ref<java::lang::String> getType(ref<android::net::Uri> url);
	ref<link::java::array<java::lang::String>> getStreamTypes(ref<android::net::Uri> url, ref<java::lang::String> mimeTypeFilter);
	ref<android::database::Cursor> query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder);
	ref<android::database::Cursor> query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder, ref<android::os::CancellationSignal> cancellationSignal);
	ref<android::database::Cursor> query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<android::os::Bundle> queryArgs, ref<android::os::CancellationSignal> cancellationSignal);
	ref<android::net::Uri> canonicalize(ref<android::net::Uri> url);
	ref<android::net::Uri> uncanonicalize(ref<android::net::Uri> url);
	jboolean refresh(ref<android::net::Uri> url, ref<android::os::Bundle> args, ref<android::os::CancellationSignal> cancellationSignal);
	ref<java::io::InputStream> openInputStream(ref<android::net::Uri> uri);
	ref<java::io::OutputStream> openOutputStream(ref<android::net::Uri> uri);
	ref<java::io::OutputStream> openOutputStream(ref<android::net::Uri> uri, ref<java::lang::String> mode);
	ref<android::os::ParcelFileDescriptor> openFileDescriptor(ref<android::net::Uri> uri, ref<java::lang::String> mode);
	ref<android::os::ParcelFileDescriptor> openFileDescriptor(ref<android::net::Uri> uri, ref<java::lang::String> mode, ref<android::os::CancellationSignal> cancellationSignal);
	ref<android::content::res::AssetFileDescriptor> openAssetFileDescriptor(ref<android::net::Uri> uri, ref<java::lang::String> mode);
	ref<android::content::res::AssetFileDescriptor> openAssetFileDescriptor(ref<android::net::Uri> uri, ref<java::lang::String> mode, ref<android::os::CancellationSignal> cancellationSignal);
	ref<android::content::res::AssetFileDescriptor> openTypedAssetFileDescriptor(ref<android::net::Uri> uri, ref<java::lang::String> mimeType, ref<android::os::Bundle> opts);
	ref<android::content::res::AssetFileDescriptor> openTypedAssetFileDescriptor(ref<android::net::Uri> uri, ref<java::lang::String> mimeType, ref<android::os::Bundle> opts, ref<android::os::CancellationSignal> cancellationSignal);
	ref<android::net::Uri> insert(ref<android::net::Uri> url, ref<android::content::ContentValues> values);
	ref<link::java::array<android::content::ContentProviderResult>> applyBatch(ref<java::lang::String> authority, ref<java::util::ArrayList> operations);
	jint bulkInsert(ref<android::net::Uri> url, ref<link::java::array<android::content::ContentValues>> values);
	jint delete_(ref<android::net::Uri> url, ref<java::lang::String> where, ref<link::java::array<java::lang::String>> selectionArgs);
	jint update(ref<android::net::Uri> uri, ref<android::content::ContentValues> values, ref<java::lang::String> where, ref<link::java::array<java::lang::String>> selectionArgs);
	ref<android::os::Bundle> call(ref<android::net::Uri> uri, ref<java::lang::String> method, ref<java::lang::String> arg, ref<android::os::Bundle> extras);
	ref<android::content::ContentProviderClient> acquireContentProviderClient(ref<android::net::Uri> uri);
	ref<android::content::ContentProviderClient> acquireContentProviderClient(ref<java::lang::String> name);
	ref<android::content::ContentProviderClient> acquireUnstableContentProviderClient(ref<android::net::Uri> uri);
	ref<android::content::ContentProviderClient> acquireUnstableContentProviderClient(ref<java::lang::String> name);
	void registerContentObserver(ref<android::net::Uri> uri, jboolean notifyForDescendants, ref<android::database::ContentObserver> observer);
	void unregisterContentObserver(ref<android::database::ContentObserver> observer);
	void notifyChange(ref<android::net::Uri> uri, ref<android::database::ContentObserver> observer);
	void notifyChange(ref<android::net::Uri> uri, ref<android::database::ContentObserver> observer, jboolean syncToNetwork);
	void notifyChange(ref<android::net::Uri> uri, ref<android::database::ContentObserver> observer, jint flags);
	void takePersistableUriPermission(ref<android::net::Uri> uri, jint modeFlags);
	void releasePersistableUriPermission(ref<android::net::Uri> uri, jint modeFlags);
	ref<java::util::List> getPersistedUriPermissions();
	ref<java::util::List> getOutgoingPersistedUriPermissions();
	void startSync(ref<android::net::Uri> uri, ref<android::os::Bundle> extras);
	static void requestSync(ref<android::accounts::Account> account, ref<java::lang::String> authority, ref<android::os::Bundle> extras);
	static void requestSync(ref<android::content::SyncRequest> request);
	static void validateSyncExtrasBundle(ref<android::os::Bundle> extras);
	void cancelSync(ref<android::net::Uri> uri);
	static void cancelSync(ref<android::accounts::Account> account, ref<java::lang::String> authority);
	static ref<link::java::array<android::content::SyncAdapterType>> getSyncAdapterTypes();
	static jboolean getSyncAutomatically(ref<android::accounts::Account> account, ref<java::lang::String> authority);
	static void setSyncAutomatically(ref<android::accounts::Account> account, ref<java::lang::String> authority, jboolean sync);
	static void addPeriodicSync(ref<android::accounts::Account> account, ref<java::lang::String> authority, ref<android::os::Bundle> extras, jlong pollFrequency);
	static void removePeriodicSync(ref<android::accounts::Account> account, ref<java::lang::String> authority, ref<android::os::Bundle> extras);
	static void cancelSync(ref<android::content::SyncRequest> request);
	static ref<java::util::List> getPeriodicSyncs(ref<android::accounts::Account> account, ref<java::lang::String> authority);
	static jint getIsSyncable(ref<android::accounts::Account> account, ref<java::lang::String> authority);
	static void setIsSyncable(ref<android::accounts::Account> account, ref<java::lang::String> authority, jint syncable);
	static jboolean getMasterSyncAutomatically();
	static void setMasterSyncAutomatically(jboolean sync);
	static jboolean isSyncActive(ref<android::accounts::Account> account, ref<java::lang::String> authority);
	static ref<android::content::SyncInfo> getCurrentSync();
	static ref<java::util::List> getCurrentSyncs();
	static jboolean isSyncPending(ref<android::accounts::Account> account, ref<java::lang::String> authority);
	static ref<java::lang::Object> addStatusChangeListener(jint mask, ref<android::content::SyncStatusObserver> callback);
	static void removeStatusChangeListener(ref<java::lang::Object> handle);

protected:

	ContentResolver(handle_type h) : base_(h) {}

};

} // namespace android::content
} // namespace scapix::java_api

#include <scapix/java_api/android/accounts/Account.h>
#include <scapix/java_api/android/content/ContentProviderClient.h>
#include <scapix/java_api/android/content/ContentProviderResult.h>
#include <scapix/java_api/android/content/ContentValues.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/SyncAdapterType.h>
#include <scapix/java_api/android/content/SyncInfo.h>
#include <scapix/java_api/android/content/SyncRequest.h>
#include <scapix/java_api/android/content/SyncStatusObserver.h>
#include <scapix/java_api/android/content/res/AssetFileDescriptor.h>
#include <scapix/java_api/android/database/ContentObserver.h>
#include <scapix/java_api/android/database/Cursor.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/CancellationSignal.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/ArrayList.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::content {

inline ref<java::lang::String> ContentResolver::ANY_CURSOR_ITEM_TYPE_() { return get_static_field<SCAPIX_META_STRING("ANY_CURSOR_ITEM_TYPE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::CURSOR_DIR_BASE_TYPE_() { return get_static_field<SCAPIX_META_STRING("CURSOR_DIR_BASE_TYPE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::CURSOR_ITEM_BASE_TYPE_() { return get_static_field<SCAPIX_META_STRING("CURSOR_ITEM_BASE_TYPE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::EXTRA_HONORED_ARGS_() { return get_static_field<SCAPIX_META_STRING("EXTRA_HONORED_ARGS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::EXTRA_REFRESH_SUPPORTED_() { return get_static_field<SCAPIX_META_STRING("EXTRA_REFRESH_SUPPORTED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::EXTRA_SIZE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_SIZE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::EXTRA_TOTAL_COUNT_() { return get_static_field<SCAPIX_META_STRING("EXTRA_TOTAL_COUNT"), ref<java::lang::String>>(); }
inline jint ContentResolver::NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS_() { return get_static_field<SCAPIX_META_STRING("NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS"), jint>(); }
inline jint ContentResolver::NOTIFY_SYNC_TO_NETWORK_() { return get_static_field<SCAPIX_META_STRING("NOTIFY_SYNC_TO_NETWORK"), jint>(); }
inline ref<java::lang::String> ContentResolver::QUERY_ARG_LIMIT_() { return get_static_field<SCAPIX_META_STRING("QUERY_ARG_LIMIT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::QUERY_ARG_OFFSET_() { return get_static_field<SCAPIX_META_STRING("QUERY_ARG_OFFSET"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::QUERY_ARG_SORT_COLLATION_() { return get_static_field<SCAPIX_META_STRING("QUERY_ARG_SORT_COLLATION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::QUERY_ARG_SORT_COLUMNS_() { return get_static_field<SCAPIX_META_STRING("QUERY_ARG_SORT_COLUMNS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::QUERY_ARG_SORT_DIRECTION_() { return get_static_field<SCAPIX_META_STRING("QUERY_ARG_SORT_DIRECTION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::QUERY_ARG_SQL_SELECTION_() { return get_static_field<SCAPIX_META_STRING("QUERY_ARG_SQL_SELECTION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::QUERY_ARG_SQL_SELECTION_ARGS_() { return get_static_field<SCAPIX_META_STRING("QUERY_ARG_SQL_SELECTION_ARGS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::QUERY_ARG_SQL_SORT_ORDER_() { return get_static_field<SCAPIX_META_STRING("QUERY_ARG_SQL_SORT_ORDER"), ref<java::lang::String>>(); }
inline jint ContentResolver::QUERY_SORT_DIRECTION_ASCENDING_() { return get_static_field<SCAPIX_META_STRING("QUERY_SORT_DIRECTION_ASCENDING"), jint>(); }
inline jint ContentResolver::QUERY_SORT_DIRECTION_DESCENDING_() { return get_static_field<SCAPIX_META_STRING("QUERY_SORT_DIRECTION_DESCENDING"), jint>(); }
inline ref<java::lang::String> ContentResolver::SCHEME_ANDROID_RESOURCE_() { return get_static_field<SCAPIX_META_STRING("SCHEME_ANDROID_RESOURCE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::SCHEME_CONTENT_() { return get_static_field<SCAPIX_META_STRING("SCHEME_CONTENT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::SCHEME_FILE_() { return get_static_field<SCAPIX_META_STRING("SCHEME_FILE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::SYNC_EXTRAS_ACCOUNT_() { return get_static_field<SCAPIX_META_STRING("SYNC_EXTRAS_ACCOUNT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS_() { return get_static_field<SCAPIX_META_STRING("SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::SYNC_EXTRAS_DO_NOT_RETRY_() { return get_static_field<SCAPIX_META_STRING("SYNC_EXTRAS_DO_NOT_RETRY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::SYNC_EXTRAS_EXPEDITED_() { return get_static_field<SCAPIX_META_STRING("SYNC_EXTRAS_EXPEDITED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::SYNC_EXTRAS_FORCE_() { return get_static_field<SCAPIX_META_STRING("SYNC_EXTRAS_FORCE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::SYNC_EXTRAS_IGNORE_BACKOFF_() { return get_static_field<SCAPIX_META_STRING("SYNC_EXTRAS_IGNORE_BACKOFF"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::SYNC_EXTRAS_IGNORE_SETTINGS_() { return get_static_field<SCAPIX_META_STRING("SYNC_EXTRAS_IGNORE_SETTINGS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::SYNC_EXTRAS_INITIALIZE_() { return get_static_field<SCAPIX_META_STRING("SYNC_EXTRAS_INITIALIZE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::SYNC_EXTRAS_MANUAL_() { return get_static_field<SCAPIX_META_STRING("SYNC_EXTRAS_MANUAL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS_() { return get_static_field<SCAPIX_META_STRING("SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::SYNC_EXTRAS_REQUIRE_CHARGING_() { return get_static_field<SCAPIX_META_STRING("SYNC_EXTRAS_REQUIRE_CHARGING"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ContentResolver::SYNC_EXTRAS_UPLOAD_() { return get_static_field<SCAPIX_META_STRING("SYNC_EXTRAS_UPLOAD"), ref<java::lang::String>>(); }
inline jint ContentResolver::SYNC_OBSERVER_TYPE_ACTIVE_() { return get_static_field<SCAPIX_META_STRING("SYNC_OBSERVER_TYPE_ACTIVE"), jint>(); }
inline jint ContentResolver::SYNC_OBSERVER_TYPE_PENDING_() { return get_static_field<SCAPIX_META_STRING("SYNC_OBSERVER_TYPE_PENDING"), jint>(); }
inline jint ContentResolver::SYNC_OBSERVER_TYPE_SETTINGS_() { return get_static_field<SCAPIX_META_STRING("SYNC_OBSERVER_TYPE_SETTINGS"), jint>(); }
inline ref<ContentResolver> ContentResolver::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<java::lang::String> ContentResolver::getType(ref<android::net::Uri> url) { return call_method<SCAPIX_META_STRING("getType"), ref<java::lang::String>>(url); }
inline ref<link::java::array<java::lang::String>> ContentResolver::getStreamTypes(ref<android::net::Uri> url, ref<java::lang::String> mimeTypeFilter) { return call_method<SCAPIX_META_STRING("getStreamTypes"), ref<link::java::array<java::lang::String>>>(url, mimeTypeFilter); }
inline ref<android::database::Cursor> ContentResolver::query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder) { return call_method<SCAPIX_META_STRING("query"), ref<android::database::Cursor>>(uri, projection, selection, selectionArgs, sortOrder); }
inline ref<android::database::Cursor> ContentResolver::query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder, ref<android::os::CancellationSignal> cancellationSignal) { return call_method<SCAPIX_META_STRING("query"), ref<android::database::Cursor>>(uri, projection, selection, selectionArgs, sortOrder, cancellationSignal); }
inline ref<android::database::Cursor> ContentResolver::query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<android::os::Bundle> queryArgs, ref<android::os::CancellationSignal> cancellationSignal) { return call_method<SCAPIX_META_STRING("query"), ref<android::database::Cursor>>(uri, projection, queryArgs, cancellationSignal); }
inline ref<android::net::Uri> ContentResolver::canonicalize(ref<android::net::Uri> url) { return call_method<SCAPIX_META_STRING("canonicalize"), ref<android::net::Uri>>(url); }
inline ref<android::net::Uri> ContentResolver::uncanonicalize(ref<android::net::Uri> url) { return call_method<SCAPIX_META_STRING("uncanonicalize"), ref<android::net::Uri>>(url); }
inline jboolean ContentResolver::refresh(ref<android::net::Uri> url, ref<android::os::Bundle> args, ref<android::os::CancellationSignal> cancellationSignal) { return call_method<SCAPIX_META_STRING("refresh"), jboolean>(url, args, cancellationSignal); }
inline ref<java::io::InputStream> ContentResolver::openInputStream(ref<android::net::Uri> uri) { return call_method<SCAPIX_META_STRING("openInputStream"), ref<java::io::InputStream>>(uri); }
inline ref<java::io::OutputStream> ContentResolver::openOutputStream(ref<android::net::Uri> uri) { return call_method<SCAPIX_META_STRING("openOutputStream"), ref<java::io::OutputStream>>(uri); }
inline ref<java::io::OutputStream> ContentResolver::openOutputStream(ref<android::net::Uri> uri, ref<java::lang::String> mode) { return call_method<SCAPIX_META_STRING("openOutputStream"), ref<java::io::OutputStream>>(uri, mode); }
inline ref<android::os::ParcelFileDescriptor> ContentResolver::openFileDescriptor(ref<android::net::Uri> uri, ref<java::lang::String> mode) { return call_method<SCAPIX_META_STRING("openFileDescriptor"), ref<android::os::ParcelFileDescriptor>>(uri, mode); }
inline ref<android::os::ParcelFileDescriptor> ContentResolver::openFileDescriptor(ref<android::net::Uri> uri, ref<java::lang::String> mode, ref<android::os::CancellationSignal> cancellationSignal) { return call_method<SCAPIX_META_STRING("openFileDescriptor"), ref<android::os::ParcelFileDescriptor>>(uri, mode, cancellationSignal); }
inline ref<android::content::res::AssetFileDescriptor> ContentResolver::openAssetFileDescriptor(ref<android::net::Uri> uri, ref<java::lang::String> mode) { return call_method<SCAPIX_META_STRING("openAssetFileDescriptor"), ref<android::content::res::AssetFileDescriptor>>(uri, mode); }
inline ref<android::content::res::AssetFileDescriptor> ContentResolver::openAssetFileDescriptor(ref<android::net::Uri> uri, ref<java::lang::String> mode, ref<android::os::CancellationSignal> cancellationSignal) { return call_method<SCAPIX_META_STRING("openAssetFileDescriptor"), ref<android::content::res::AssetFileDescriptor>>(uri, mode, cancellationSignal); }
inline ref<android::content::res::AssetFileDescriptor> ContentResolver::openTypedAssetFileDescriptor(ref<android::net::Uri> uri, ref<java::lang::String> mimeType, ref<android::os::Bundle> opts) { return call_method<SCAPIX_META_STRING("openTypedAssetFileDescriptor"), ref<android::content::res::AssetFileDescriptor>>(uri, mimeType, opts); }
inline ref<android::content::res::AssetFileDescriptor> ContentResolver::openTypedAssetFileDescriptor(ref<android::net::Uri> uri, ref<java::lang::String> mimeType, ref<android::os::Bundle> opts, ref<android::os::CancellationSignal> cancellationSignal) { return call_method<SCAPIX_META_STRING("openTypedAssetFileDescriptor"), ref<android::content::res::AssetFileDescriptor>>(uri, mimeType, opts, cancellationSignal); }
inline ref<android::net::Uri> ContentResolver::insert(ref<android::net::Uri> url, ref<android::content::ContentValues> values) { return call_method<SCAPIX_META_STRING("insert"), ref<android::net::Uri>>(url, values); }
inline ref<link::java::array<android::content::ContentProviderResult>> ContentResolver::applyBatch(ref<java::lang::String> authority, ref<java::util::ArrayList> operations) { return call_method<SCAPIX_META_STRING("applyBatch"), ref<link::java::array<android::content::ContentProviderResult>>>(authority, operations); }
inline jint ContentResolver::bulkInsert(ref<android::net::Uri> url, ref<link::java::array<android::content::ContentValues>> values) { return call_method<SCAPIX_META_STRING("bulkInsert"), jint>(url, values); }
inline jint ContentResolver::delete_(ref<android::net::Uri> url, ref<java::lang::String> where, ref<link::java::array<java::lang::String>> selectionArgs) { return call_method<SCAPIX_META_STRING("delete"), jint>(url, where, selectionArgs); }
inline jint ContentResolver::update(ref<android::net::Uri> uri, ref<android::content::ContentValues> values, ref<java::lang::String> where, ref<link::java::array<java::lang::String>> selectionArgs) { return call_method<SCAPIX_META_STRING("update"), jint>(uri, values, where, selectionArgs); }
inline ref<android::os::Bundle> ContentResolver::call(ref<android::net::Uri> uri, ref<java::lang::String> method, ref<java::lang::String> arg, ref<android::os::Bundle> extras) { return call_method<SCAPIX_META_STRING("call"), ref<android::os::Bundle>>(uri, method, arg, extras); }
inline ref<android::content::ContentProviderClient> ContentResolver::acquireContentProviderClient(ref<android::net::Uri> uri) { return call_method<SCAPIX_META_STRING("acquireContentProviderClient"), ref<android::content::ContentProviderClient>>(uri); }
inline ref<android::content::ContentProviderClient> ContentResolver::acquireContentProviderClient(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("acquireContentProviderClient"), ref<android::content::ContentProviderClient>>(name); }
inline ref<android::content::ContentProviderClient> ContentResolver::acquireUnstableContentProviderClient(ref<android::net::Uri> uri) { return call_method<SCAPIX_META_STRING("acquireUnstableContentProviderClient"), ref<android::content::ContentProviderClient>>(uri); }
inline ref<android::content::ContentProviderClient> ContentResolver::acquireUnstableContentProviderClient(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("acquireUnstableContentProviderClient"), ref<android::content::ContentProviderClient>>(name); }
inline void ContentResolver::registerContentObserver(ref<android::net::Uri> uri, jboolean notifyForDescendants, ref<android::database::ContentObserver> observer) { return call_method<SCAPIX_META_STRING("registerContentObserver"), void>(uri, notifyForDescendants, observer); }
inline void ContentResolver::unregisterContentObserver(ref<android::database::ContentObserver> observer) { return call_method<SCAPIX_META_STRING("unregisterContentObserver"), void>(observer); }
inline void ContentResolver::notifyChange(ref<android::net::Uri> uri, ref<android::database::ContentObserver> observer) { return call_method<SCAPIX_META_STRING("notifyChange"), void>(uri, observer); }
inline void ContentResolver::notifyChange(ref<android::net::Uri> uri, ref<android::database::ContentObserver> observer, jboolean syncToNetwork) { return call_method<SCAPIX_META_STRING("notifyChange"), void>(uri, observer, syncToNetwork); }
inline void ContentResolver::notifyChange(ref<android::net::Uri> uri, ref<android::database::ContentObserver> observer, jint flags) { return call_method<SCAPIX_META_STRING("notifyChange"), void>(uri, observer, flags); }
inline void ContentResolver::takePersistableUriPermission(ref<android::net::Uri> uri, jint modeFlags) { return call_method<SCAPIX_META_STRING("takePersistableUriPermission"), void>(uri, modeFlags); }
inline void ContentResolver::releasePersistableUriPermission(ref<android::net::Uri> uri, jint modeFlags) { return call_method<SCAPIX_META_STRING("releasePersistableUriPermission"), void>(uri, modeFlags); }
inline ref<java::util::List> ContentResolver::getPersistedUriPermissions() { return call_method<SCAPIX_META_STRING("getPersistedUriPermissions"), ref<java::util::List>>(); }
inline ref<java::util::List> ContentResolver::getOutgoingPersistedUriPermissions() { return call_method<SCAPIX_META_STRING("getOutgoingPersistedUriPermissions"), ref<java::util::List>>(); }
inline void ContentResolver::startSync(ref<android::net::Uri> uri, ref<android::os::Bundle> extras) { return call_method<SCAPIX_META_STRING("startSync"), void>(uri, extras); }
inline void ContentResolver::requestSync(ref<android::accounts::Account> account, ref<java::lang::String> authority, ref<android::os::Bundle> extras) { return call_static_method<SCAPIX_META_STRING("requestSync"), void>(account, authority, extras); }
inline void ContentResolver::requestSync(ref<android::content::SyncRequest> request) { return call_static_method<SCAPIX_META_STRING("requestSync"), void>(request); }
inline void ContentResolver::validateSyncExtrasBundle(ref<android::os::Bundle> extras) { return call_static_method<SCAPIX_META_STRING("validateSyncExtrasBundle"), void>(extras); }
inline void ContentResolver::cancelSync(ref<android::net::Uri> uri) { return call_method<SCAPIX_META_STRING("cancelSync"), void>(uri); }
inline void ContentResolver::cancelSync(ref<android::accounts::Account> account, ref<java::lang::String> authority) { return call_static_method<SCAPIX_META_STRING("cancelSync"), void>(account, authority); }
inline ref<link::java::array<android::content::SyncAdapterType>> ContentResolver::getSyncAdapterTypes() { return call_static_method<SCAPIX_META_STRING("getSyncAdapterTypes"), ref<link::java::array<android::content::SyncAdapterType>>>(); }
inline jboolean ContentResolver::getSyncAutomatically(ref<android::accounts::Account> account, ref<java::lang::String> authority) { return call_static_method<SCAPIX_META_STRING("getSyncAutomatically"), jboolean>(account, authority); }
inline void ContentResolver::setSyncAutomatically(ref<android::accounts::Account> account, ref<java::lang::String> authority, jboolean sync) { return call_static_method<SCAPIX_META_STRING("setSyncAutomatically"), void>(account, authority, sync); }
inline void ContentResolver::addPeriodicSync(ref<android::accounts::Account> account, ref<java::lang::String> authority, ref<android::os::Bundle> extras, jlong pollFrequency) { return call_static_method<SCAPIX_META_STRING("addPeriodicSync"), void>(account, authority, extras, pollFrequency); }
inline void ContentResolver::removePeriodicSync(ref<android::accounts::Account> account, ref<java::lang::String> authority, ref<android::os::Bundle> extras) { return call_static_method<SCAPIX_META_STRING("removePeriodicSync"), void>(account, authority, extras); }
inline void ContentResolver::cancelSync(ref<android::content::SyncRequest> request) { return call_static_method<SCAPIX_META_STRING("cancelSync"), void>(request); }
inline ref<java::util::List> ContentResolver::getPeriodicSyncs(ref<android::accounts::Account> account, ref<java::lang::String> authority) { return call_static_method<SCAPIX_META_STRING("getPeriodicSyncs"), ref<java::util::List>>(account, authority); }
inline jint ContentResolver::getIsSyncable(ref<android::accounts::Account> account, ref<java::lang::String> authority) { return call_static_method<SCAPIX_META_STRING("getIsSyncable"), jint>(account, authority); }
inline void ContentResolver::setIsSyncable(ref<android::accounts::Account> account, ref<java::lang::String> authority, jint syncable) { return call_static_method<SCAPIX_META_STRING("setIsSyncable"), void>(account, authority, syncable); }
inline jboolean ContentResolver::getMasterSyncAutomatically() { return call_static_method<SCAPIX_META_STRING("getMasterSyncAutomatically"), jboolean>(); }
inline void ContentResolver::setMasterSyncAutomatically(jboolean sync) { return call_static_method<SCAPIX_META_STRING("setMasterSyncAutomatically"), void>(sync); }
inline jboolean ContentResolver::isSyncActive(ref<android::accounts::Account> account, ref<java::lang::String> authority) { return call_static_method<SCAPIX_META_STRING("isSyncActive"), jboolean>(account, authority); }
inline ref<android::content::SyncInfo> ContentResolver::getCurrentSync() { return call_static_method<SCAPIX_META_STRING("getCurrentSync"), ref<android::content::SyncInfo>>(); }
inline ref<java::util::List> ContentResolver::getCurrentSyncs() { return call_static_method<SCAPIX_META_STRING("getCurrentSyncs"), ref<java::util::List>>(); }
inline jboolean ContentResolver::isSyncPending(ref<android::accounts::Account> account, ref<java::lang::String> authority) { return call_static_method<SCAPIX_META_STRING("isSyncPending"), jboolean>(account, authority); }
inline ref<java::lang::Object> ContentResolver::addStatusChangeListener(jint mask, ref<android::content::SyncStatusObserver> callback) { return call_static_method<SCAPIX_META_STRING("addStatusChangeListener"), ref<java::lang::Object>>(mask, callback); }
inline void ContentResolver::removeStatusChangeListener(ref<java::lang::Object> handle) { return call_static_method<SCAPIX_META_STRING("removeStatusChangeListener"), void>(handle); }

} // namespace android::content
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_CONTENTRESOLVER_H
