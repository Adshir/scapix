// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_CONTENT_ABSTRACTTHREADEDSYNCADAPTER_H
#define SCAPIX_ANDROID_CONTENT_ABSTRACTTHREADEDSYNCADAPTER_H

namespace scapix::java_api {

namespace android::accounts { class Account; }
namespace android::content { class ContentProviderClient; }
namespace android::content { class Context; }
namespace android::content { class SyncResult; }
namespace android::os { class Bundle; }
namespace android::os { class IBinder; }
namespace java::lang { class String; }
namespace java::lang { class Thread; }

namespace android::content {

class AbstractThreadedSyncAdapter : public object_base<SCAPIX_META_STRING("android/content/AbstractThreadedSyncAdapter"),
	java::lang::Object>
{
public:

	static jint LOG_SYNC_DETAILS_();

	static ref<AbstractThreadedSyncAdapter> new_object(ref<android::content::Context> context, jboolean autoInitialize);
	static ref<AbstractThreadedSyncAdapter> new_object(ref<android::content::Context> context, jboolean autoInitialize, jboolean allowParallelSyncs);
	ref<android::content::Context> getContext();
	ref<android::os::IBinder> getSyncAdapterBinder();
	jboolean onUnsyncableAccount();
	void onPerformSync(ref<android::accounts::Account> p1, ref<android::os::Bundle> p2, ref<java::lang::String> p3, ref<android::content::ContentProviderClient> p4, ref<android::content::SyncResult> p5);
	void onSecurityException(ref<android::accounts::Account> account, ref<android::os::Bundle> extras, ref<java::lang::String> authority, ref<android::content::SyncResult> syncResult);
	void onSyncCanceled();
	void onSyncCanceled(ref<java::lang::Thread> thread);

protected:

	AbstractThreadedSyncAdapter(handle_type h) : base_(h) {}

};

} // namespace android::content
} // namespace scapix::java_api

#include <scapix/java_api/android/accounts/Account.h>
#include <scapix/java_api/android/content/ContentProviderClient.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/SyncResult.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>

namespace scapix::java_api {
namespace android::content {

inline jint AbstractThreadedSyncAdapter::LOG_SYNC_DETAILS_() { return get_static_field<SCAPIX_META_STRING("LOG_SYNC_DETAILS"), jint>(); }
inline ref<AbstractThreadedSyncAdapter> AbstractThreadedSyncAdapter::new_object(ref<android::content::Context> context, jboolean autoInitialize) { return base_::new_object(context, autoInitialize); }
inline ref<AbstractThreadedSyncAdapter> AbstractThreadedSyncAdapter::new_object(ref<android::content::Context> context, jboolean autoInitialize, jboolean allowParallelSyncs) { return base_::new_object(context, autoInitialize, allowParallelSyncs); }
inline ref<android::content::Context> AbstractThreadedSyncAdapter::getContext() { return call_method<SCAPIX_META_STRING("getContext"), ref<android::content::Context>>(); }
inline ref<android::os::IBinder> AbstractThreadedSyncAdapter::getSyncAdapterBinder() { return call_method<SCAPIX_META_STRING("getSyncAdapterBinder"), ref<android::os::IBinder>>(); }
inline jboolean AbstractThreadedSyncAdapter::onUnsyncableAccount() { return call_method<SCAPIX_META_STRING("onUnsyncableAccount"), jboolean>(); }
inline void AbstractThreadedSyncAdapter::onPerformSync(ref<android::accounts::Account> p1, ref<android::os::Bundle> p2, ref<java::lang::String> p3, ref<android::content::ContentProviderClient> p4, ref<android::content::SyncResult> p5) { return call_method<SCAPIX_META_STRING("onPerformSync"), void>(p1, p2, p3, p4, p5); }
inline void AbstractThreadedSyncAdapter::onSecurityException(ref<android::accounts::Account> account, ref<android::os::Bundle> extras, ref<java::lang::String> authority, ref<android::content::SyncResult> syncResult) { return call_method<SCAPIX_META_STRING("onSecurityException"), void>(account, extras, authority, syncResult); }
inline void AbstractThreadedSyncAdapter::onSyncCanceled() { return call_method<SCAPIX_META_STRING("onSyncCanceled"), void>(); }
inline void AbstractThreadedSyncAdapter::onSyncCanceled(ref<java::lang::Thread> thread) { return call_method<SCAPIX_META_STRING("onSyncCanceled"), void>(thread); }

} // namespace android::content
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_ABSTRACTTHREADEDSYNCADAPTER_H
