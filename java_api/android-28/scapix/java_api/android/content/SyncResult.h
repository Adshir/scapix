// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_CONTENT_SYNCRESULT_H
#define SCAPIX_ANDROID_CONTENT_SYNCRESULT_H

namespace scapix::java_api {

namespace android::content { class SyncStats; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::content {

class SyncResult : public object_base<SCAPIX_META_STRING("android/content/SyncResult"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::content::SyncResult> ALREADY_IN_PROGRESS_();
	static ref<android::os::Parcelable_Creator> CREATOR_();
	jboolean databaseError();
	void databaseError(jboolean);
	jlong delayUntil();
	void delayUntil(jlong);
	jboolean fullSyncRequested();
	void fullSyncRequested(jboolean);
	jboolean moreRecordsToGet();
	void moreRecordsToGet(jboolean);
	jboolean partialSyncUnavailable();
	void partialSyncUnavailable(jboolean);
	ref<android::content::SyncStats> stats();
	jboolean syncAlreadyInProgress();
	jboolean tooManyDeletions();
	void tooManyDeletions(jboolean);
	jboolean tooManyRetries();
	void tooManyRetries(jboolean);

	static ref<SyncResult> new_object();
	jboolean hasHardError();
	jboolean hasSoftError();
	jboolean hasError();
	jboolean madeSomeProgress();
	void clear();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> parcel, jint flags);
	ref<java::lang::String> toString();
	ref<java::lang::String> toDebugString();

protected:

	SyncResult(handle_type h) : base_(h) {}

};

} // namespace android::content
} // namespace scapix::java_api

#include <scapix/java_api/android/content/SyncStats.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::content {

inline ref<android::content::SyncResult> SyncResult::ALREADY_IN_PROGRESS_() { return get_static_field<SCAPIX_META_STRING("ALREADY_IN_PROGRESS"), ref<android::content::SyncResult>>(); }
inline ref<android::os::Parcelable_Creator> SyncResult::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jboolean SyncResult::databaseError() { return get_field<SCAPIX_META_STRING("databaseError"), jboolean>(); }
inline void SyncResult::databaseError(jboolean v) { set_field<SCAPIX_META_STRING("databaseError"), jboolean>(v); }
inline jlong SyncResult::delayUntil() { return get_field<SCAPIX_META_STRING("delayUntil"), jlong>(); }
inline void SyncResult::delayUntil(jlong v) { set_field<SCAPIX_META_STRING("delayUntil"), jlong>(v); }
inline jboolean SyncResult::fullSyncRequested() { return get_field<SCAPIX_META_STRING("fullSyncRequested"), jboolean>(); }
inline void SyncResult::fullSyncRequested(jboolean v) { set_field<SCAPIX_META_STRING("fullSyncRequested"), jboolean>(v); }
inline jboolean SyncResult::moreRecordsToGet() { return get_field<SCAPIX_META_STRING("moreRecordsToGet"), jboolean>(); }
inline void SyncResult::moreRecordsToGet(jboolean v) { set_field<SCAPIX_META_STRING("moreRecordsToGet"), jboolean>(v); }
inline jboolean SyncResult::partialSyncUnavailable() { return get_field<SCAPIX_META_STRING("partialSyncUnavailable"), jboolean>(); }
inline void SyncResult::partialSyncUnavailable(jboolean v) { set_field<SCAPIX_META_STRING("partialSyncUnavailable"), jboolean>(v); }
inline ref<android::content::SyncStats> SyncResult::stats() { return get_field<SCAPIX_META_STRING("stats"), ref<android::content::SyncStats>>(); }
inline jboolean SyncResult::syncAlreadyInProgress() { return get_field<SCAPIX_META_STRING("syncAlreadyInProgress"), jboolean>(); }
inline jboolean SyncResult::tooManyDeletions() { return get_field<SCAPIX_META_STRING("tooManyDeletions"), jboolean>(); }
inline void SyncResult::tooManyDeletions(jboolean v) { set_field<SCAPIX_META_STRING("tooManyDeletions"), jboolean>(v); }
inline jboolean SyncResult::tooManyRetries() { return get_field<SCAPIX_META_STRING("tooManyRetries"), jboolean>(); }
inline void SyncResult::tooManyRetries(jboolean v) { set_field<SCAPIX_META_STRING("tooManyRetries"), jboolean>(v); }
inline ref<SyncResult> SyncResult::new_object() { return base_::new_object(); }
inline jboolean SyncResult::hasHardError() { return call_method<SCAPIX_META_STRING("hasHardError"), jboolean>(); }
inline jboolean SyncResult::hasSoftError() { return call_method<SCAPIX_META_STRING("hasSoftError"), jboolean>(); }
inline jboolean SyncResult::hasError() { return call_method<SCAPIX_META_STRING("hasError"), jboolean>(); }
inline jboolean SyncResult::madeSomeProgress() { return call_method<SCAPIX_META_STRING("madeSomeProgress"), jboolean>(); }
inline void SyncResult::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline jint SyncResult::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void SyncResult::writeToParcel(ref<android::os::Parcel> parcel, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(parcel, flags); }
inline ref<java::lang::String> SyncResult::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> SyncResult::toDebugString() { return call_method<SCAPIX_META_STRING("toDebugString"), ref<java::lang::String>>(); }

} // namespace android::content
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_SYNCRESULT_H
