// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_ANDROID_CONTENT_COMPONENTNAME_H
#define SCAPIX_ANDROID_CONTENT_COMPONENTNAME_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class Class; }
namespace java::lang { class String; }

namespace android::content {

class ComponentName : public object_base<SCAPIX_META_STRING("android/content/ComponentName"),
	java::lang::Object,
	android::os::Parcelable,
	java::lang::Cloneable,
	java::lang::Comparable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();

	static ref<ComponentName> new_object(ref<java::lang::String> pkg, ref<java::lang::String> cls);
	static ref<ComponentName> new_object(ref<android::content::Context> pkg, ref<java::lang::String> cls);
	static ref<ComponentName> new_object(ref<android::content::Context> pkg, ref<java::lang::Class> cls);
	static ref<ComponentName> new_object(ref<android::os::Parcel> in);
	static ref<android::content::ComponentName> createRelative(ref<java::lang::String> pkg, ref<java::lang::String> cls);
	static ref<android::content::ComponentName> createRelative(ref<android::content::Context> pkg, ref<java::lang::String> cls);
	ref<android::content::ComponentName> clone();
	ref<java::lang::String> getPackageName();
	ref<java::lang::String> getClassName();
	ref<java::lang::String> getShortClassName();
	ref<java::lang::String> flattenToString();
	ref<java::lang::String> flattenToShortString();
	static ref<android::content::ComponentName> unflattenFromString(ref<java::lang::String> str);
	ref<java::lang::String> toShortString();
	ref<java::lang::String> toString();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	jint compareTo(ref<android::content::ComponentName> that);
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint flags);
	static void writeToParcel(ref<android::content::ComponentName> c, ref<android::os::Parcel> out);
	static ref<android::content::ComponentName> readFromParcel(ref<android::os::Parcel> in);

protected:

	ComponentName(handle_type h) : base_(h) {}

};

} // namespace android::content
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::content {

inline ref<android::os::Parcelable_Creator> ComponentName::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<ComponentName> ComponentName::new_object(ref<java::lang::String> pkg, ref<java::lang::String> cls) { return base_::new_object(pkg, cls); }
inline ref<ComponentName> ComponentName::new_object(ref<android::content::Context> pkg, ref<java::lang::String> cls) { return base_::new_object(pkg, cls); }
inline ref<ComponentName> ComponentName::new_object(ref<android::content::Context> pkg, ref<java::lang::Class> cls) { return base_::new_object(pkg, cls); }
inline ref<ComponentName> ComponentName::new_object(ref<android::os::Parcel> in) { return base_::new_object(in); }
inline ref<android::content::ComponentName> ComponentName::createRelative(ref<java::lang::String> pkg, ref<java::lang::String> cls) { return call_static_method<SCAPIX_META_STRING("createRelative"), ref<android::content::ComponentName>>(pkg, cls); }
inline ref<android::content::ComponentName> ComponentName::createRelative(ref<android::content::Context> pkg, ref<java::lang::String> cls) { return call_static_method<SCAPIX_META_STRING("createRelative"), ref<android::content::ComponentName>>(pkg, cls); }
inline ref<android::content::ComponentName> ComponentName::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<android::content::ComponentName>>(); }
inline ref<java::lang::String> ComponentName::getPackageName() { return call_method<SCAPIX_META_STRING("getPackageName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ComponentName::getClassName() { return call_method<SCAPIX_META_STRING("getClassName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ComponentName::getShortClassName() { return call_method<SCAPIX_META_STRING("getShortClassName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ComponentName::flattenToString() { return call_method<SCAPIX_META_STRING("flattenToString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ComponentName::flattenToShortString() { return call_method<SCAPIX_META_STRING("flattenToShortString"), ref<java::lang::String>>(); }
inline ref<android::content::ComponentName> ComponentName::unflattenFromString(ref<java::lang::String> str) { return call_static_method<SCAPIX_META_STRING("unflattenFromString"), ref<android::content::ComponentName>>(str); }
inline ref<java::lang::String> ComponentName::toShortString() { return call_method<SCAPIX_META_STRING("toShortString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ComponentName::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean ComponentName::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint ComponentName::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint ComponentName::compareTo(ref<android::content::ComponentName> that) { return call_method<SCAPIX_META_STRING("compareTo"), jint>(that); }
inline jint ComponentName::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void ComponentName::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }
inline void ComponentName::writeToParcel(ref<android::content::ComponentName> c, ref<android::os::Parcel> out) { return call_static_method<SCAPIX_META_STRING("writeToParcel"), void>(c, out); }
inline ref<android::content::ComponentName> ComponentName::readFromParcel(ref<android::os::Parcel> in) { return call_static_method<SCAPIX_META_STRING("readFromParcel"), ref<android::content::ComponentName>>(in); }

} // namespace android::content
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_COMPONENTNAME_H
