// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_ANDROID_CONTENT_CONTENTPROVIDERCLIENT_H
#define SCAPIX_ANDROID_CONTENT_CONTENTPROVIDERCLIENT_H

namespace scapix::java_api {

namespace android::content { class ContentProvider; }
namespace android::content { class ContentProviderResult; }
namespace android::content { class ContentValues; }
namespace android::content::res { class AssetFileDescriptor; }
namespace android::database { class Cursor; }
namespace android::net { class Uri; }
namespace android::os { class Bundle; }
namespace android::os { class CancellationSignal; }
namespace android::os { class ParcelFileDescriptor; }
namespace java::lang { class String; }
namespace java::util { class ArrayList; }

namespace android::content {

class ContentProviderClient : public object_base<SCAPIX_META_STRING("android/content/ContentProviderClient"),
	java::lang::Object,
	java::lang::AutoCloseable>
{
public:

	ref<android::database::Cursor> query(ref<android::net::Uri> url, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder);
	ref<android::database::Cursor> query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder, ref<android::os::CancellationSignal> cancellationSignal);
	ref<android::database::Cursor> query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<android::os::Bundle> queryArgs, ref<android::os::CancellationSignal> cancellationSignal);
	ref<java::lang::String> getType(ref<android::net::Uri> url);
	ref<link::java::array<java::lang::String>> getStreamTypes(ref<android::net::Uri> url, ref<java::lang::String> mimeTypeFilter);
	ref<android::net::Uri> canonicalize(ref<android::net::Uri> url);
	ref<android::net::Uri> uncanonicalize(ref<android::net::Uri> url);
	jboolean refresh(ref<android::net::Uri> url, ref<android::os::Bundle> args, ref<android::os::CancellationSignal> cancellationSignal);
	ref<android::net::Uri> insert(ref<android::net::Uri> url, ref<android::content::ContentValues> initialValues);
	jint bulkInsert(ref<android::net::Uri> url, ref<link::java::array<android::content::ContentValues>> initialValues);
	jint delete_(ref<android::net::Uri> url, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs);
	jint update(ref<android::net::Uri> url, ref<android::content::ContentValues> values, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs);
	ref<android::os::ParcelFileDescriptor> openFile(ref<android::net::Uri> url, ref<java::lang::String> mode);
	ref<android::os::ParcelFileDescriptor> openFile(ref<android::net::Uri> url, ref<java::lang::String> mode, ref<android::os::CancellationSignal> signal);
	ref<android::content::res::AssetFileDescriptor> openAssetFile(ref<android::net::Uri> url, ref<java::lang::String> mode);
	ref<android::content::res::AssetFileDescriptor> openAssetFile(ref<android::net::Uri> url, ref<java::lang::String> mode, ref<android::os::CancellationSignal> signal);
	ref<android::content::res::AssetFileDescriptor> openTypedAssetFileDescriptor(ref<android::net::Uri> uri, ref<java::lang::String> mimeType, ref<android::os::Bundle> opts);
	ref<android::content::res::AssetFileDescriptor> openTypedAssetFileDescriptor(ref<android::net::Uri> uri, ref<java::lang::String> mimeType, ref<android::os::Bundle> opts, ref<android::os::CancellationSignal> signal);
	ref<link::java::array<android::content::ContentProviderResult>> applyBatch(ref<java::util::ArrayList> operations);
	ref<android::os::Bundle> call(ref<java::lang::String> method, ref<java::lang::String> arg, ref<android::os::Bundle> extras);
	void close();
	jboolean release();
	ref<android::content::ContentProvider> getLocalContentProvider();

protected:

	ContentProviderClient(handle_type h) : base_(h) {}

};

} // namespace android::content
} // namespace scapix::java_api

#include <scapix/java_api/android/content/ContentProvider.h>
#include <scapix/java_api/android/content/ContentProviderResult.h>
#include <scapix/java_api/android/content/ContentValues.h>
#include <scapix/java_api/android/content/res/AssetFileDescriptor.h>
#include <scapix/java_api/android/database/Cursor.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/CancellationSignal.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/ArrayList.h>

namespace scapix::java_api {
namespace android::content {

inline ref<android::database::Cursor> ContentProviderClient::query(ref<android::net::Uri> url, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder) { return call_method<SCAPIX_META_STRING("query"), ref<android::database::Cursor>>(url, projection, selection, selectionArgs, sortOrder); }
inline ref<android::database::Cursor> ContentProviderClient::query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder, ref<android::os::CancellationSignal> cancellationSignal) { return call_method<SCAPIX_META_STRING("query"), ref<android::database::Cursor>>(uri, projection, selection, selectionArgs, sortOrder, cancellationSignal); }
inline ref<android::database::Cursor> ContentProviderClient::query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<android::os::Bundle> queryArgs, ref<android::os::CancellationSignal> cancellationSignal) { return call_method<SCAPIX_META_STRING("query"), ref<android::database::Cursor>>(uri, projection, queryArgs, cancellationSignal); }
inline ref<java::lang::String> ContentProviderClient::getType(ref<android::net::Uri> url) { return call_method<SCAPIX_META_STRING("getType"), ref<java::lang::String>>(url); }
inline ref<link::java::array<java::lang::String>> ContentProviderClient::getStreamTypes(ref<android::net::Uri> url, ref<java::lang::String> mimeTypeFilter) { return call_method<SCAPIX_META_STRING("getStreamTypes"), ref<link::java::array<java::lang::String>>>(url, mimeTypeFilter); }
inline ref<android::net::Uri> ContentProviderClient::canonicalize(ref<android::net::Uri> url) { return call_method<SCAPIX_META_STRING("canonicalize"), ref<android::net::Uri>>(url); }
inline ref<android::net::Uri> ContentProviderClient::uncanonicalize(ref<android::net::Uri> url) { return call_method<SCAPIX_META_STRING("uncanonicalize"), ref<android::net::Uri>>(url); }
inline jboolean ContentProviderClient::refresh(ref<android::net::Uri> url, ref<android::os::Bundle> args, ref<android::os::CancellationSignal> cancellationSignal) { return call_method<SCAPIX_META_STRING("refresh"), jboolean>(url, args, cancellationSignal); }
inline ref<android::net::Uri> ContentProviderClient::insert(ref<android::net::Uri> url, ref<android::content::ContentValues> initialValues) { return call_method<SCAPIX_META_STRING("insert"), ref<android::net::Uri>>(url, initialValues); }
inline jint ContentProviderClient::bulkInsert(ref<android::net::Uri> url, ref<link::java::array<android::content::ContentValues>> initialValues) { return call_method<SCAPIX_META_STRING("bulkInsert"), jint>(url, initialValues); }
inline jint ContentProviderClient::delete_(ref<android::net::Uri> url, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs) { return call_method<SCAPIX_META_STRING("delete"), jint>(url, selection, selectionArgs); }
inline jint ContentProviderClient::update(ref<android::net::Uri> url, ref<android::content::ContentValues> values, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs) { return call_method<SCAPIX_META_STRING("update"), jint>(url, values, selection, selectionArgs); }
inline ref<android::os::ParcelFileDescriptor> ContentProviderClient::openFile(ref<android::net::Uri> url, ref<java::lang::String> mode) { return call_method<SCAPIX_META_STRING("openFile"), ref<android::os::ParcelFileDescriptor>>(url, mode); }
inline ref<android::os::ParcelFileDescriptor> ContentProviderClient::openFile(ref<android::net::Uri> url, ref<java::lang::String> mode, ref<android::os::CancellationSignal> signal) { return call_method<SCAPIX_META_STRING("openFile"), ref<android::os::ParcelFileDescriptor>>(url, mode, signal); }
inline ref<android::content::res::AssetFileDescriptor> ContentProviderClient::openAssetFile(ref<android::net::Uri> url, ref<java::lang::String> mode) { return call_method<SCAPIX_META_STRING("openAssetFile"), ref<android::content::res::AssetFileDescriptor>>(url, mode); }
inline ref<android::content::res::AssetFileDescriptor> ContentProviderClient::openAssetFile(ref<android::net::Uri> url, ref<java::lang::String> mode, ref<android::os::CancellationSignal> signal) { return call_method<SCAPIX_META_STRING("openAssetFile"), ref<android::content::res::AssetFileDescriptor>>(url, mode, signal); }
inline ref<android::content::res::AssetFileDescriptor> ContentProviderClient::openTypedAssetFileDescriptor(ref<android::net::Uri> uri, ref<java::lang::String> mimeType, ref<android::os::Bundle> opts) { return call_method<SCAPIX_META_STRING("openTypedAssetFileDescriptor"), ref<android::content::res::AssetFileDescriptor>>(uri, mimeType, opts); }
inline ref<android::content::res::AssetFileDescriptor> ContentProviderClient::openTypedAssetFileDescriptor(ref<android::net::Uri> uri, ref<java::lang::String> mimeType, ref<android::os::Bundle> opts, ref<android::os::CancellationSignal> signal) { return call_method<SCAPIX_META_STRING("openTypedAssetFileDescriptor"), ref<android::content::res::AssetFileDescriptor>>(uri, mimeType, opts, signal); }
inline ref<link::java::array<android::content::ContentProviderResult>> ContentProviderClient::applyBatch(ref<java::util::ArrayList> operations) { return call_method<SCAPIX_META_STRING("applyBatch"), ref<link::java::array<android::content::ContentProviderResult>>>(operations); }
inline ref<android::os::Bundle> ContentProviderClient::call(ref<java::lang::String> method, ref<java::lang::String> arg, ref<android::os::Bundle> extras) { return call_method<SCAPIX_META_STRING("call"), ref<android::os::Bundle>>(method, arg, extras); }
inline void ContentProviderClient::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jboolean ContentProviderClient::release() { return call_method<SCAPIX_META_STRING("release"), jboolean>(); }
inline ref<android::content::ContentProvider> ContentProviderClient::getLocalContentProvider() { return call_method<SCAPIX_META_STRING("getLocalContentProvider"), ref<android::content::ContentProvider>>(); }

} // namespace android::content
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_CONTENTPROVIDERCLIENT_H
