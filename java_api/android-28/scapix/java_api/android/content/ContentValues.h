// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_CONTENT_CONTENTVALUES_H
#define SCAPIX_ANDROID_CONTENT_CONTENTVALUES_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class Boolean; }
namespace java::lang { class Byte; }
namespace java::lang { class Double; }
namespace java::lang { class Float; }
namespace java::lang { class Integer; }
namespace java::lang { class Long; }
namespace java::lang { class Short; }
namespace java::lang { class String; }
namespace java::util { class Set; }

namespace android::content {

class ContentValues : public object_base<SCAPIX_META_STRING("android/content/ContentValues"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static ref<java::lang::String> TAG_();

	static ref<ContentValues> new_object();
	static ref<ContentValues> new_object(jint size);
	static ref<ContentValues> new_object(ref<android::content::ContentValues> from);
	jboolean equals(ref<java::lang::Object> object);
	jint hashCode();
	void put(ref<java::lang::String> key, ref<java::lang::String> value);
	void putAll(ref<android::content::ContentValues> other);
	void put(ref<java::lang::String> key, ref<java::lang::Byte> value);
	void put(ref<java::lang::String> key, ref<java::lang::Short> value);
	void put(ref<java::lang::String> key, ref<java::lang::Integer> value);
	void put(ref<java::lang::String> key, ref<java::lang::Long> value);
	void put(ref<java::lang::String> key, ref<java::lang::Float> value);
	void put(ref<java::lang::String> key, ref<java::lang::Double> value);
	void put(ref<java::lang::String> key, ref<java::lang::Boolean> value);
	void put(ref<java::lang::String> key, ref<link::java::array<jbyte>> value);
	void putNull(ref<java::lang::String> key);
	jint size();
	void remove(ref<java::lang::String> key);
	void clear();
	jboolean containsKey(ref<java::lang::String> key);
	ref<java::lang::Object> get(ref<java::lang::String> key);
	ref<java::lang::String> getAsString(ref<java::lang::String> key);
	ref<java::lang::Long> getAsLong(ref<java::lang::String> key);
	ref<java::lang::Integer> getAsInteger(ref<java::lang::String> key);
	ref<java::lang::Short> getAsShort(ref<java::lang::String> key);
	ref<java::lang::Byte> getAsByte(ref<java::lang::String> key);
	ref<java::lang::Double> getAsDouble(ref<java::lang::String> key);
	ref<java::lang::Float> getAsFloat(ref<java::lang::String> key);
	ref<java::lang::Boolean> getAsBoolean(ref<java::lang::String> key);
	ref<link::java::array<jbyte>> getAsByteArray(ref<java::lang::String> key);
	ref<java::util::Set> valueSet();
	ref<java::util::Set> keySet();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> parcel, jint flags);
	ref<java::lang::String> toString();

protected:

	ContentValues(handle_type h) : base_(h) {}

};

} // namespace android::content
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/Boolean.h>
#include <scapix/java_api/java/lang/Byte.h>
#include <scapix/java_api/java/lang/Double.h>
#include <scapix/java_api/java/lang/Float.h>
#include <scapix/java_api/java/lang/Integer.h>
#include <scapix/java_api/java/lang/Long.h>
#include <scapix/java_api/java/lang/Short.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace android::content {

inline ref<android::os::Parcelable_Creator> ContentValues::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<java::lang::String> ContentValues::TAG_() { return get_static_field<SCAPIX_META_STRING("TAG"), ref<java::lang::String>>(); }
inline ref<ContentValues> ContentValues::new_object() { return base_::new_object(); }
inline ref<ContentValues> ContentValues::new_object(jint size) { return base_::new_object(size); }
inline ref<ContentValues> ContentValues::new_object(ref<android::content::ContentValues> from) { return base_::new_object(from); }
inline jboolean ContentValues::equals(ref<java::lang::Object> object) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(object); }
inline jint ContentValues::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline void ContentValues::put(ref<java::lang::String> key, ref<java::lang::String> value) { return call_method<SCAPIX_META_STRING("put"), void>(key, value); }
inline void ContentValues::putAll(ref<android::content::ContentValues> other) { return call_method<SCAPIX_META_STRING("putAll"), void>(other); }
inline void ContentValues::put(ref<java::lang::String> key, ref<java::lang::Byte> value) { return call_method<SCAPIX_META_STRING("put"), void>(key, value); }
inline void ContentValues::put(ref<java::lang::String> key, ref<java::lang::Short> value) { return call_method<SCAPIX_META_STRING("put"), void>(key, value); }
inline void ContentValues::put(ref<java::lang::String> key, ref<java::lang::Integer> value) { return call_method<SCAPIX_META_STRING("put"), void>(key, value); }
inline void ContentValues::put(ref<java::lang::String> key, ref<java::lang::Long> value) { return call_method<SCAPIX_META_STRING("put"), void>(key, value); }
inline void ContentValues::put(ref<java::lang::String> key, ref<java::lang::Float> value) { return call_method<SCAPIX_META_STRING("put"), void>(key, value); }
inline void ContentValues::put(ref<java::lang::String> key, ref<java::lang::Double> value) { return call_method<SCAPIX_META_STRING("put"), void>(key, value); }
inline void ContentValues::put(ref<java::lang::String> key, ref<java::lang::Boolean> value) { return call_method<SCAPIX_META_STRING("put"), void>(key, value); }
inline void ContentValues::put(ref<java::lang::String> key, ref<link::java::array<jbyte>> value) { return call_method<SCAPIX_META_STRING("put"), void>(key, value); }
inline void ContentValues::putNull(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("putNull"), void>(key); }
inline jint ContentValues::size() { return call_method<SCAPIX_META_STRING("size"), jint>(); }
inline void ContentValues::remove(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("remove"), void>(key); }
inline void ContentValues::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline jboolean ContentValues::containsKey(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("containsKey"), jboolean>(key); }
inline ref<java::lang::Object> ContentValues::get(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(key); }
inline ref<java::lang::String> ContentValues::getAsString(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getAsString"), ref<java::lang::String>>(key); }
inline ref<java::lang::Long> ContentValues::getAsLong(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getAsLong"), ref<java::lang::Long>>(key); }
inline ref<java::lang::Integer> ContentValues::getAsInteger(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getAsInteger"), ref<java::lang::Integer>>(key); }
inline ref<java::lang::Short> ContentValues::getAsShort(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getAsShort"), ref<java::lang::Short>>(key); }
inline ref<java::lang::Byte> ContentValues::getAsByte(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getAsByte"), ref<java::lang::Byte>>(key); }
inline ref<java::lang::Double> ContentValues::getAsDouble(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getAsDouble"), ref<java::lang::Double>>(key); }
inline ref<java::lang::Float> ContentValues::getAsFloat(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getAsFloat"), ref<java::lang::Float>>(key); }
inline ref<java::lang::Boolean> ContentValues::getAsBoolean(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getAsBoolean"), ref<java::lang::Boolean>>(key); }
inline ref<link::java::array<jbyte>> ContentValues::getAsByteArray(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getAsByteArray"), ref<link::java::array<jbyte>>>(key); }
inline ref<java::util::Set> ContentValues::valueSet() { return call_method<SCAPIX_META_STRING("valueSet"), ref<java::util::Set>>(); }
inline ref<java::util::Set> ContentValues::keySet() { return call_method<SCAPIX_META_STRING("keySet"), ref<java::util::Set>>(); }
inline jint ContentValues::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void ContentValues::writeToParcel(ref<android::os::Parcel> parcel, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(parcel, flags); }
inline ref<java::lang::String> ContentValues::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::content
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_CONTENTVALUES_H
