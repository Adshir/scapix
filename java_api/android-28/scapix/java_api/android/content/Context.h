// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_CONTENT_CONTEXT_H
#define SCAPIX_ANDROID_CONTENT_CONTEXT_H

namespace scapix::java_api {

namespace android::content { class BroadcastReceiver; }
namespace android::content { class ComponentCallbacks; }
namespace android::content { class ComponentName; }
namespace android::content { class ContentResolver; }
namespace android::content { class Intent; }
namespace android::content { class IntentFilter; }
namespace android::content { class IntentSender; }
namespace android::content { class ServiceConnection; }
namespace android::content { class SharedPreferences; }
namespace android::content::pm { class ApplicationInfo; }
namespace android::content::pm { class PackageManager; }
namespace android::content::res { class AssetManager; }
namespace android::content::res { class ColorStateList; }
namespace android::content::res { class Configuration; }
namespace android::content::res { class Resources; }
namespace android::content::res { class Resources_Theme; }
namespace android::content::res { class TypedArray; }
namespace android::database { class DatabaseErrorHandler; }
namespace android::database::sqlite { class SQLiteDatabase; }
namespace android::database::sqlite { class SQLiteDatabase_CursorFactory; }
namespace android::graphics { class Bitmap; }
namespace android::graphics::drawable { class Drawable; }
namespace android::net { class Uri; }
namespace android::os { class Bundle; }
namespace android::os { class Handler; }
namespace android::os { class Looper; }
namespace android::os { class UserHandle; }
namespace android::util { class AttributeSet; }
namespace android::view { class Display; }
namespace java::io { class File; }
namespace java::io { class FileInputStream; }
namespace java::io { class FileOutputStream; }
namespace java::io { class InputStream; }
namespace java::lang { class CharSequence; }
namespace java::lang { class Class; }
namespace java::lang { class ClassLoader; }
namespace java::lang { class String; }
namespace java::util::concurrent { class Executor; }

namespace android::content {

class Context : public object_base<SCAPIX_META_STRING("android/content/Context"),
	java::lang::Object>
{
public:

	static ref<java::lang::String> ACCESSIBILITY_SERVICE_();
	static ref<java::lang::String> ACCOUNT_SERVICE_();
	static ref<java::lang::String> ACTIVITY_SERVICE_();
	static ref<java::lang::String> ALARM_SERVICE_();
	static ref<java::lang::String> APPWIDGET_SERVICE_();
	static ref<java::lang::String> APP_OPS_SERVICE_();
	static ref<java::lang::String> AUDIO_SERVICE_();
	static ref<java::lang::String> BATTERY_SERVICE_();
	static jint BIND_ABOVE_CLIENT_();
	static jint BIND_ADJUST_WITH_ACTIVITY_();
	static jint BIND_ALLOW_OOM_MANAGEMENT_();
	static jint BIND_AUTO_CREATE_();
	static jint BIND_DEBUG_UNBIND_();
	static jint BIND_EXTERNAL_SERVICE_();
	static jint BIND_IMPORTANT_();
	static jint BIND_NOT_FOREGROUND_();
	static jint BIND_WAIVE_PRIORITY_();
	static ref<java::lang::String> BLUETOOTH_SERVICE_();
	static ref<java::lang::String> CAMERA_SERVICE_();
	static ref<java::lang::String> CAPTIONING_SERVICE_();
	static ref<java::lang::String> CARRIER_CONFIG_SERVICE_();
	static ref<java::lang::String> CLIPBOARD_SERVICE_();
	static ref<java::lang::String> COMPANION_DEVICE_SERVICE_();
	static ref<java::lang::String> CONNECTIVITY_SERVICE_();
	static ref<java::lang::String> CONSUMER_IR_SERVICE_();
	static jint CONTEXT_IGNORE_SECURITY_();
	static jint CONTEXT_INCLUDE_CODE_();
	static jint CONTEXT_RESTRICTED_();
	static ref<java::lang::String> CROSS_PROFILE_APPS_SERVICE_();
	static ref<java::lang::String> DEVICE_POLICY_SERVICE_();
	static ref<java::lang::String> DISPLAY_SERVICE_();
	static ref<java::lang::String> DOWNLOAD_SERVICE_();
	static ref<java::lang::String> DROPBOX_SERVICE_();
	static ref<java::lang::String> EUICC_SERVICE_();
	static ref<java::lang::String> FINGERPRINT_SERVICE_();
	static ref<java::lang::String> HARDWARE_PROPERTIES_SERVICE_();
	static ref<java::lang::String> INPUT_METHOD_SERVICE_();
	static ref<java::lang::String> INPUT_SERVICE_();
	static ref<java::lang::String> IPSEC_SERVICE_();
	static ref<java::lang::String> JOB_SCHEDULER_SERVICE_();
	static ref<java::lang::String> KEYGUARD_SERVICE_();
	static ref<java::lang::String> LAUNCHER_APPS_SERVICE_();
	static ref<java::lang::String> LAYOUT_INFLATER_SERVICE_();
	static ref<java::lang::String> LOCATION_SERVICE_();
	static ref<java::lang::String> MEDIA_PROJECTION_SERVICE_();
	static ref<java::lang::String> MEDIA_ROUTER_SERVICE_();
	static ref<java::lang::String> MEDIA_SESSION_SERVICE_();
	static ref<java::lang::String> MIDI_SERVICE_();
	static jint MODE_APPEND_();
	static jint MODE_ENABLE_WRITE_AHEAD_LOGGING_();
	static jint MODE_MULTI_PROCESS_();
	static jint MODE_NO_LOCALIZED_COLLATORS_();
	static jint MODE_PRIVATE_();
	static jint MODE_WORLD_READABLE_();
	static jint MODE_WORLD_WRITEABLE_();
	static ref<java::lang::String> NETWORK_STATS_SERVICE_();
	static ref<java::lang::String> NFC_SERVICE_();
	static ref<java::lang::String> NOTIFICATION_SERVICE_();
	static ref<java::lang::String> NSD_SERVICE_();
	static ref<java::lang::String> POWER_SERVICE_();
	static ref<java::lang::String> PRINT_SERVICE_();
	static jint RECEIVER_VISIBLE_TO_INSTANT_APPS_();
	static ref<java::lang::String> RESTRICTIONS_SERVICE_();
	static ref<java::lang::String> SEARCH_SERVICE_();
	static ref<java::lang::String> SENSOR_SERVICE_();
	static ref<java::lang::String> SHORTCUT_SERVICE_();
	static ref<java::lang::String> STORAGE_SERVICE_();
	static ref<java::lang::String> STORAGE_STATS_SERVICE_();
	static ref<java::lang::String> SYSTEM_HEALTH_SERVICE_();
	static ref<java::lang::String> TELECOM_SERVICE_();
	static ref<java::lang::String> TELEPHONY_SERVICE_();
	static ref<java::lang::String> TELEPHONY_SUBSCRIPTION_SERVICE_();
	static ref<java::lang::String> TEXT_CLASSIFICATION_SERVICE_();
	static ref<java::lang::String> TEXT_SERVICES_MANAGER_SERVICE_();
	static ref<java::lang::String> TV_INPUT_SERVICE_();
	static ref<java::lang::String> UI_MODE_SERVICE_();
	static ref<java::lang::String> USAGE_STATS_SERVICE_();
	static ref<java::lang::String> USB_SERVICE_();
	static ref<java::lang::String> USER_SERVICE_();
	static ref<java::lang::String> VIBRATOR_SERVICE_();
	static ref<java::lang::String> WALLPAPER_SERVICE_();
	static ref<java::lang::String> WIFI_AWARE_SERVICE_();
	static ref<java::lang::String> WIFI_P2P_SERVICE_();
	static ref<java::lang::String> WIFI_RTT_RANGING_SERVICE_();
	static ref<java::lang::String> WIFI_SERVICE_();
	static ref<java::lang::String> WINDOW_SERVICE_();

	static ref<Context> new_object();
	ref<android::content::res::AssetManager> getAssets();
	ref<android::content::res::Resources> getResources();
	ref<android::content::pm::PackageManager> getPackageManager();
	ref<android::content::ContentResolver> getContentResolver();
	ref<android::os::Looper> getMainLooper();
	ref<java::util::concurrent::Executor> getMainExecutor();
	ref<android::content::Context> getApplicationContext();
	void registerComponentCallbacks(ref<android::content::ComponentCallbacks> callback);
	void unregisterComponentCallbacks(ref<android::content::ComponentCallbacks> callback);
	ref<java::lang::CharSequence> getText(jint resId);
	ref<java::lang::String> getString(jint resId);
	ref<java::lang::String> getString(jint resId, ref<link::java::array<java::lang::Object>> formatArgs);
	jint getColor(jint id);
	ref<android::graphics::drawable::Drawable> getDrawable(jint id);
	ref<android::content::res::ColorStateList> getColorStateList(jint id);
	void setTheme(jint p1);
	ref<android::content::res::Resources_Theme> getTheme();
	ref<android::content::res::TypedArray> obtainStyledAttributes(ref<link::java::array<jint>> attrs);
	ref<android::content::res::TypedArray> obtainStyledAttributes(jint resid, ref<link::java::array<jint>> attrs);
	ref<android::content::res::TypedArray> obtainStyledAttributes(ref<android::util::AttributeSet> set, ref<link::java::array<jint>> attrs);
	ref<android::content::res::TypedArray> obtainStyledAttributes(ref<android::util::AttributeSet> set, ref<link::java::array<jint>> attrs, jint defStyleAttr, jint defStyleRes);
	ref<java::lang::ClassLoader> getClassLoader();
	ref<java::lang::String> getPackageName();
	ref<android::content::pm::ApplicationInfo> getApplicationInfo();
	ref<java::lang::String> getPackageResourcePath();
	ref<java::lang::String> getPackageCodePath();
	ref<android::content::SharedPreferences> getSharedPreferences(ref<java::lang::String> p1, jint p2);
	jboolean moveSharedPreferencesFrom(ref<android::content::Context> p1, ref<java::lang::String> p2);
	jboolean deleteSharedPreferences(ref<java::lang::String> p1);
	ref<java::io::FileInputStream> openFileInput(ref<java::lang::String> p1);
	ref<java::io::FileOutputStream> openFileOutput(ref<java::lang::String> p1, jint p2);
	jboolean deleteFile(ref<java::lang::String> p1);
	ref<java::io::File> getFileStreamPath(ref<java::lang::String> p1);
	ref<java::io::File> getDataDir();
	ref<java::io::File> getFilesDir();
	ref<java::io::File> getNoBackupFilesDir();
	ref<java::io::File> getExternalFilesDir(ref<java::lang::String> p1);
	ref<link::java::array<java::io::File>> getExternalFilesDirs(ref<java::lang::String> p1);
	ref<java::io::File> getObbDir();
	ref<link::java::array<java::io::File>> getObbDirs();
	ref<java::io::File> getCacheDir();
	ref<java::io::File> getCodeCacheDir();
	ref<java::io::File> getExternalCacheDir();
	ref<link::java::array<java::io::File>> getExternalCacheDirs();
	ref<link::java::array<java::io::File>> getExternalMediaDirs();
	ref<link::java::array<java::lang::String>> fileList();
	ref<java::io::File> getDir(ref<java::lang::String> p1, jint p2);
	ref<android::database::sqlite::SQLiteDatabase> openOrCreateDatabase(ref<java::lang::String> p1, jint p2, ref<android::database::sqlite::SQLiteDatabase_CursorFactory> p3);
	ref<android::database::sqlite::SQLiteDatabase> openOrCreateDatabase(ref<java::lang::String> p1, jint p2, ref<android::database::sqlite::SQLiteDatabase_CursorFactory> p3, ref<android::database::DatabaseErrorHandler> p4);
	jboolean moveDatabaseFrom(ref<android::content::Context> p1, ref<java::lang::String> p2);
	jboolean deleteDatabase(ref<java::lang::String> p1);
	ref<java::io::File> getDatabasePath(ref<java::lang::String> p1);
	ref<link::java::array<java::lang::String>> databaseList();
	ref<android::graphics::drawable::Drawable> getWallpaper();
	ref<android::graphics::drawable::Drawable> peekWallpaper();
	jint getWallpaperDesiredMinimumWidth();
	jint getWallpaperDesiredMinimumHeight();
	void setWallpaper(ref<android::graphics::Bitmap> p1);
	void setWallpaper(ref<java::io::InputStream> p1);
	void clearWallpaper();
	void startActivity(ref<android::content::Intent> p1);
	void startActivity(ref<android::content::Intent> p1, ref<android::os::Bundle> p2);
	void startActivities(ref<link::java::array<android::content::Intent>> p1);
	void startActivities(ref<link::java::array<android::content::Intent>> p1, ref<android::os::Bundle> p2);
	void startIntentSender(ref<android::content::IntentSender> p1, ref<android::content::Intent> p2, jint p3, jint p4, jint p5);
	void startIntentSender(ref<android::content::IntentSender> p1, ref<android::content::Intent> p2, jint p3, jint p4, jint p5, ref<android::os::Bundle> p6);
	void sendBroadcast(ref<android::content::Intent> p1);
	void sendBroadcast(ref<android::content::Intent> p1, ref<java::lang::String> p2);
	void sendOrderedBroadcast(ref<android::content::Intent> p1, ref<java::lang::String> p2);
	void sendOrderedBroadcast(ref<android::content::Intent> p1, ref<java::lang::String> p2, ref<android::content::BroadcastReceiver> p3, ref<android::os::Handler> p4, jint p5, ref<java::lang::String> p6, ref<android::os::Bundle> p7);
	void sendBroadcastAsUser(ref<android::content::Intent> p1, ref<android::os::UserHandle> p2);
	void sendBroadcastAsUser(ref<android::content::Intent> p1, ref<android::os::UserHandle> p2, ref<java::lang::String> p3);
	void sendOrderedBroadcastAsUser(ref<android::content::Intent> p1, ref<android::os::UserHandle> p2, ref<java::lang::String> p3, ref<android::content::BroadcastReceiver> p4, ref<android::os::Handler> p5, jint p6, ref<java::lang::String> p7, ref<android::os::Bundle> p8);
	void sendStickyBroadcast(ref<android::content::Intent> p1);
	void sendStickyOrderedBroadcast(ref<android::content::Intent> p1, ref<android::content::BroadcastReceiver> p2, ref<android::os::Handler> p3, jint p4, ref<java::lang::String> p5, ref<android::os::Bundle> p6);
	void removeStickyBroadcast(ref<android::content::Intent> p1);
	void sendStickyBroadcastAsUser(ref<android::content::Intent> p1, ref<android::os::UserHandle> p2);
	void sendStickyOrderedBroadcastAsUser(ref<android::content::Intent> p1, ref<android::os::UserHandle> p2, ref<android::content::BroadcastReceiver> p3, ref<android::os::Handler> p4, jint p5, ref<java::lang::String> p6, ref<android::os::Bundle> p7);
	void removeStickyBroadcastAsUser(ref<android::content::Intent> p1, ref<android::os::UserHandle> p2);
	ref<android::content::Intent> registerReceiver(ref<android::content::BroadcastReceiver> p1, ref<android::content::IntentFilter> p2);
	ref<android::content::Intent> registerReceiver(ref<android::content::BroadcastReceiver> p1, ref<android::content::IntentFilter> p2, jint p3);
	ref<android::content::Intent> registerReceiver(ref<android::content::BroadcastReceiver> p1, ref<android::content::IntentFilter> p2, ref<java::lang::String> p3, ref<android::os::Handler> p4);
	ref<android::content::Intent> registerReceiver(ref<android::content::BroadcastReceiver> p1, ref<android::content::IntentFilter> p2, ref<java::lang::String> p3, ref<android::os::Handler> p4, jint p5);
	void unregisterReceiver(ref<android::content::BroadcastReceiver> p1);
	ref<android::content::ComponentName> startService(ref<android::content::Intent> p1);
	ref<android::content::ComponentName> startForegroundService(ref<android::content::Intent> p1);
	jboolean stopService(ref<android::content::Intent> p1);
	jboolean bindService(ref<android::content::Intent> p1, ref<android::content::ServiceConnection> p2, jint p3);
	void unbindService(ref<android::content::ServiceConnection> p1);
	jboolean startInstrumentation(ref<android::content::ComponentName> p1, ref<java::lang::String> p2, ref<android::os::Bundle> p3);
	ref<java::lang::Object> getSystemService(ref<java::lang::String> p1);
	ref<java::lang::Object> getSystemService(ref<java::lang::Class> serviceClass);
	ref<java::lang::String> getSystemServiceName(ref<java::lang::Class> p1);
	jint checkPermission(ref<java::lang::String> p1, jint p2, jint p3);
	jint checkCallingPermission(ref<java::lang::String> p1);
	jint checkCallingOrSelfPermission(ref<java::lang::String> p1);
	jint checkSelfPermission(ref<java::lang::String> p1);
	void enforcePermission(ref<java::lang::String> p1, jint p2, jint p3, ref<java::lang::String> p4);
	void enforceCallingPermission(ref<java::lang::String> p1, ref<java::lang::String> p2);
	void enforceCallingOrSelfPermission(ref<java::lang::String> p1, ref<java::lang::String> p2);
	void grantUriPermission(ref<java::lang::String> p1, ref<android::net::Uri> p2, jint p3);
	void revokeUriPermission(ref<android::net::Uri> p1, jint p2);
	void revokeUriPermission(ref<java::lang::String> p1, ref<android::net::Uri> p2, jint p3);
	jint checkUriPermission(ref<android::net::Uri> p1, jint p2, jint p3, jint p4);
	jint checkCallingUriPermission(ref<android::net::Uri> p1, jint p2);
	jint checkCallingOrSelfUriPermission(ref<android::net::Uri> p1, jint p2);
	jint checkUriPermission(ref<android::net::Uri> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, jint p4, jint p5, jint p6);
	void enforceUriPermission(ref<android::net::Uri> p1, jint p2, jint p3, jint p4, ref<java::lang::String> p5);
	void enforceCallingUriPermission(ref<android::net::Uri> p1, jint p2, ref<java::lang::String> p3);
	void enforceCallingOrSelfUriPermission(ref<android::net::Uri> p1, jint p2, ref<java::lang::String> p3);
	void enforceUriPermission(ref<android::net::Uri> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, jint p4, jint p5, jint p6, ref<java::lang::String> p7);
	ref<android::content::Context> createPackageContext(ref<java::lang::String> p1, jint p2);
	ref<android::content::Context> createContextForSplit(ref<java::lang::String> p1);
	ref<android::content::Context> createConfigurationContext(ref<android::content::res::Configuration> p1);
	ref<android::content::Context> createDisplayContext(ref<android::view::Display> p1);
	ref<android::content::Context> createDeviceProtectedStorageContext();
	jboolean isRestricted();
	jboolean isDeviceProtectedStorage();

protected:

	Context(handle_type h) : base_(h) {}

};

} // namespace android::content
} // namespace scapix::java_api

#include <scapix/java_api/android/content/BroadcastReceiver.h>
#include <scapix/java_api/android/content/ComponentCallbacks.h>
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/content/ContentResolver.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/IntentFilter.h>
#include <scapix/java_api/android/content/IntentSender.h>
#include <scapix/java_api/android/content/ServiceConnection.h>
#include <scapix/java_api/android/content/SharedPreferences.h>
#include <scapix/java_api/android/content/pm/ApplicationInfo.h>
#include <scapix/java_api/android/content/pm/PackageManager.h>
#include <scapix/java_api/android/content/res/AssetManager.h>
#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/content/res/Configuration.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/content/res/TypedArray.h>
#include <scapix/java_api/android/database/DatabaseErrorHandler.h>
#include <scapix/java_api/android/database/sqlite/SQLiteDatabase.h>
#include <scapix/java_api/android/database/sqlite/SQLiteDatabase_CursorFactory.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/Looper.h>
#include <scapix/java_api/android/os/UserHandle.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/Display.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/FileInputStream.h>
#include <scapix/java_api/java/io/FileOutputStream.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>

namespace scapix::java_api {
namespace android::content {

inline ref<java::lang::String> Context::ACCESSIBILITY_SERVICE_() { return get_static_field<SCAPIX_META_STRING("ACCESSIBILITY_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::ACCOUNT_SERVICE_() { return get_static_field<SCAPIX_META_STRING("ACCOUNT_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::ACTIVITY_SERVICE_() { return get_static_field<SCAPIX_META_STRING("ACTIVITY_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::ALARM_SERVICE_() { return get_static_field<SCAPIX_META_STRING("ALARM_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::APPWIDGET_SERVICE_() { return get_static_field<SCAPIX_META_STRING("APPWIDGET_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::APP_OPS_SERVICE_() { return get_static_field<SCAPIX_META_STRING("APP_OPS_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::AUDIO_SERVICE_() { return get_static_field<SCAPIX_META_STRING("AUDIO_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::BATTERY_SERVICE_() { return get_static_field<SCAPIX_META_STRING("BATTERY_SERVICE"), ref<java::lang::String>>(); }
inline jint Context::BIND_ABOVE_CLIENT_() { return get_static_field<SCAPIX_META_STRING("BIND_ABOVE_CLIENT"), jint>(); }
inline jint Context::BIND_ADJUST_WITH_ACTIVITY_() { return get_static_field<SCAPIX_META_STRING("BIND_ADJUST_WITH_ACTIVITY"), jint>(); }
inline jint Context::BIND_ALLOW_OOM_MANAGEMENT_() { return get_static_field<SCAPIX_META_STRING("BIND_ALLOW_OOM_MANAGEMENT"), jint>(); }
inline jint Context::BIND_AUTO_CREATE_() { return get_static_field<SCAPIX_META_STRING("BIND_AUTO_CREATE"), jint>(); }
inline jint Context::BIND_DEBUG_UNBIND_() { return get_static_field<SCAPIX_META_STRING("BIND_DEBUG_UNBIND"), jint>(); }
inline jint Context::BIND_EXTERNAL_SERVICE_() { return get_static_field<SCAPIX_META_STRING("BIND_EXTERNAL_SERVICE"), jint>(); }
inline jint Context::BIND_IMPORTANT_() { return get_static_field<SCAPIX_META_STRING("BIND_IMPORTANT"), jint>(); }
inline jint Context::BIND_NOT_FOREGROUND_() { return get_static_field<SCAPIX_META_STRING("BIND_NOT_FOREGROUND"), jint>(); }
inline jint Context::BIND_WAIVE_PRIORITY_() { return get_static_field<SCAPIX_META_STRING("BIND_WAIVE_PRIORITY"), jint>(); }
inline ref<java::lang::String> Context::BLUETOOTH_SERVICE_() { return get_static_field<SCAPIX_META_STRING("BLUETOOTH_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::CAMERA_SERVICE_() { return get_static_field<SCAPIX_META_STRING("CAMERA_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::CAPTIONING_SERVICE_() { return get_static_field<SCAPIX_META_STRING("CAPTIONING_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::CARRIER_CONFIG_SERVICE_() { return get_static_field<SCAPIX_META_STRING("CARRIER_CONFIG_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::CLIPBOARD_SERVICE_() { return get_static_field<SCAPIX_META_STRING("CLIPBOARD_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::COMPANION_DEVICE_SERVICE_() { return get_static_field<SCAPIX_META_STRING("COMPANION_DEVICE_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::CONNECTIVITY_SERVICE_() { return get_static_field<SCAPIX_META_STRING("CONNECTIVITY_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::CONSUMER_IR_SERVICE_() { return get_static_field<SCAPIX_META_STRING("CONSUMER_IR_SERVICE"), ref<java::lang::String>>(); }
inline jint Context::CONTEXT_IGNORE_SECURITY_() { return get_static_field<SCAPIX_META_STRING("CONTEXT_IGNORE_SECURITY"), jint>(); }
inline jint Context::CONTEXT_INCLUDE_CODE_() { return get_static_field<SCAPIX_META_STRING("CONTEXT_INCLUDE_CODE"), jint>(); }
inline jint Context::CONTEXT_RESTRICTED_() { return get_static_field<SCAPIX_META_STRING("CONTEXT_RESTRICTED"), jint>(); }
inline ref<java::lang::String> Context::CROSS_PROFILE_APPS_SERVICE_() { return get_static_field<SCAPIX_META_STRING("CROSS_PROFILE_APPS_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::DEVICE_POLICY_SERVICE_() { return get_static_field<SCAPIX_META_STRING("DEVICE_POLICY_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::DISPLAY_SERVICE_() { return get_static_field<SCAPIX_META_STRING("DISPLAY_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::DOWNLOAD_SERVICE_() { return get_static_field<SCAPIX_META_STRING("DOWNLOAD_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::DROPBOX_SERVICE_() { return get_static_field<SCAPIX_META_STRING("DROPBOX_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::EUICC_SERVICE_() { return get_static_field<SCAPIX_META_STRING("EUICC_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::FINGERPRINT_SERVICE_() { return get_static_field<SCAPIX_META_STRING("FINGERPRINT_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::HARDWARE_PROPERTIES_SERVICE_() { return get_static_field<SCAPIX_META_STRING("HARDWARE_PROPERTIES_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::INPUT_METHOD_SERVICE_() { return get_static_field<SCAPIX_META_STRING("INPUT_METHOD_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::INPUT_SERVICE_() { return get_static_field<SCAPIX_META_STRING("INPUT_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::IPSEC_SERVICE_() { return get_static_field<SCAPIX_META_STRING("IPSEC_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::JOB_SCHEDULER_SERVICE_() { return get_static_field<SCAPIX_META_STRING("JOB_SCHEDULER_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::KEYGUARD_SERVICE_() { return get_static_field<SCAPIX_META_STRING("KEYGUARD_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::LAUNCHER_APPS_SERVICE_() { return get_static_field<SCAPIX_META_STRING("LAUNCHER_APPS_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::LAYOUT_INFLATER_SERVICE_() { return get_static_field<SCAPIX_META_STRING("LAYOUT_INFLATER_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::LOCATION_SERVICE_() { return get_static_field<SCAPIX_META_STRING("LOCATION_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::MEDIA_PROJECTION_SERVICE_() { return get_static_field<SCAPIX_META_STRING("MEDIA_PROJECTION_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::MEDIA_ROUTER_SERVICE_() { return get_static_field<SCAPIX_META_STRING("MEDIA_ROUTER_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::MEDIA_SESSION_SERVICE_() { return get_static_field<SCAPIX_META_STRING("MEDIA_SESSION_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::MIDI_SERVICE_() { return get_static_field<SCAPIX_META_STRING("MIDI_SERVICE"), ref<java::lang::String>>(); }
inline jint Context::MODE_APPEND_() { return get_static_field<SCAPIX_META_STRING("MODE_APPEND"), jint>(); }
inline jint Context::MODE_ENABLE_WRITE_AHEAD_LOGGING_() { return get_static_field<SCAPIX_META_STRING("MODE_ENABLE_WRITE_AHEAD_LOGGING"), jint>(); }
inline jint Context::MODE_MULTI_PROCESS_() { return get_static_field<SCAPIX_META_STRING("MODE_MULTI_PROCESS"), jint>(); }
inline jint Context::MODE_NO_LOCALIZED_COLLATORS_() { return get_static_field<SCAPIX_META_STRING("MODE_NO_LOCALIZED_COLLATORS"), jint>(); }
inline jint Context::MODE_PRIVATE_() { return get_static_field<SCAPIX_META_STRING("MODE_PRIVATE"), jint>(); }
inline jint Context::MODE_WORLD_READABLE_() { return get_static_field<SCAPIX_META_STRING("MODE_WORLD_READABLE"), jint>(); }
inline jint Context::MODE_WORLD_WRITEABLE_() { return get_static_field<SCAPIX_META_STRING("MODE_WORLD_WRITEABLE"), jint>(); }
inline ref<java::lang::String> Context::NETWORK_STATS_SERVICE_() { return get_static_field<SCAPIX_META_STRING("NETWORK_STATS_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::NFC_SERVICE_() { return get_static_field<SCAPIX_META_STRING("NFC_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::NOTIFICATION_SERVICE_() { return get_static_field<SCAPIX_META_STRING("NOTIFICATION_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::NSD_SERVICE_() { return get_static_field<SCAPIX_META_STRING("NSD_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::POWER_SERVICE_() { return get_static_field<SCAPIX_META_STRING("POWER_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::PRINT_SERVICE_() { return get_static_field<SCAPIX_META_STRING("PRINT_SERVICE"), ref<java::lang::String>>(); }
inline jint Context::RECEIVER_VISIBLE_TO_INSTANT_APPS_() { return get_static_field<SCAPIX_META_STRING("RECEIVER_VISIBLE_TO_INSTANT_APPS"), jint>(); }
inline ref<java::lang::String> Context::RESTRICTIONS_SERVICE_() { return get_static_field<SCAPIX_META_STRING("RESTRICTIONS_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::SEARCH_SERVICE_() { return get_static_field<SCAPIX_META_STRING("SEARCH_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::SENSOR_SERVICE_() { return get_static_field<SCAPIX_META_STRING("SENSOR_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::SHORTCUT_SERVICE_() { return get_static_field<SCAPIX_META_STRING("SHORTCUT_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::STORAGE_SERVICE_() { return get_static_field<SCAPIX_META_STRING("STORAGE_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::STORAGE_STATS_SERVICE_() { return get_static_field<SCAPIX_META_STRING("STORAGE_STATS_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::SYSTEM_HEALTH_SERVICE_() { return get_static_field<SCAPIX_META_STRING("SYSTEM_HEALTH_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::TELECOM_SERVICE_() { return get_static_field<SCAPIX_META_STRING("TELECOM_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::TELEPHONY_SERVICE_() { return get_static_field<SCAPIX_META_STRING("TELEPHONY_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::TELEPHONY_SUBSCRIPTION_SERVICE_() { return get_static_field<SCAPIX_META_STRING("TELEPHONY_SUBSCRIPTION_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::TEXT_CLASSIFICATION_SERVICE_() { return get_static_field<SCAPIX_META_STRING("TEXT_CLASSIFICATION_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::TEXT_SERVICES_MANAGER_SERVICE_() { return get_static_field<SCAPIX_META_STRING("TEXT_SERVICES_MANAGER_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::TV_INPUT_SERVICE_() { return get_static_field<SCAPIX_META_STRING("TV_INPUT_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::UI_MODE_SERVICE_() { return get_static_field<SCAPIX_META_STRING("UI_MODE_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::USAGE_STATS_SERVICE_() { return get_static_field<SCAPIX_META_STRING("USAGE_STATS_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::USB_SERVICE_() { return get_static_field<SCAPIX_META_STRING("USB_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::USER_SERVICE_() { return get_static_field<SCAPIX_META_STRING("USER_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::VIBRATOR_SERVICE_() { return get_static_field<SCAPIX_META_STRING("VIBRATOR_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::WALLPAPER_SERVICE_() { return get_static_field<SCAPIX_META_STRING("WALLPAPER_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::WIFI_AWARE_SERVICE_() { return get_static_field<SCAPIX_META_STRING("WIFI_AWARE_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::WIFI_P2P_SERVICE_() { return get_static_field<SCAPIX_META_STRING("WIFI_P2P_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::WIFI_RTT_RANGING_SERVICE_() { return get_static_field<SCAPIX_META_STRING("WIFI_RTT_RANGING_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::WIFI_SERVICE_() { return get_static_field<SCAPIX_META_STRING("WIFI_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::WINDOW_SERVICE_() { return get_static_field<SCAPIX_META_STRING("WINDOW_SERVICE"), ref<java::lang::String>>(); }
inline ref<Context> Context::new_object() { return base_::new_object(); }
inline ref<android::content::res::AssetManager> Context::getAssets() { return call_method<SCAPIX_META_STRING("getAssets"), ref<android::content::res::AssetManager>>(); }
inline ref<android::content::res::Resources> Context::getResources() { return call_method<SCAPIX_META_STRING("getResources"), ref<android::content::res::Resources>>(); }
inline ref<android::content::pm::PackageManager> Context::getPackageManager() { return call_method<SCAPIX_META_STRING("getPackageManager"), ref<android::content::pm::PackageManager>>(); }
inline ref<android::content::ContentResolver> Context::getContentResolver() { return call_method<SCAPIX_META_STRING("getContentResolver"), ref<android::content::ContentResolver>>(); }
inline ref<android::os::Looper> Context::getMainLooper() { return call_method<SCAPIX_META_STRING("getMainLooper"), ref<android::os::Looper>>(); }
inline ref<java::util::concurrent::Executor> Context::getMainExecutor() { return call_method<SCAPIX_META_STRING("getMainExecutor"), ref<java::util::concurrent::Executor>>(); }
inline ref<android::content::Context> Context::getApplicationContext() { return call_method<SCAPIX_META_STRING("getApplicationContext"), ref<android::content::Context>>(); }
inline void Context::registerComponentCallbacks(ref<android::content::ComponentCallbacks> callback) { return call_method<SCAPIX_META_STRING("registerComponentCallbacks"), void>(callback); }
inline void Context::unregisterComponentCallbacks(ref<android::content::ComponentCallbacks> callback) { return call_method<SCAPIX_META_STRING("unregisterComponentCallbacks"), void>(callback); }
inline ref<java::lang::CharSequence> Context::getText(jint resId) { return call_method<SCAPIX_META_STRING("getText"), ref<java::lang::CharSequence>>(resId); }
inline ref<java::lang::String> Context::getString(jint resId) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(resId); }
inline ref<java::lang::String> Context::getString(jint resId, ref<link::java::array<java::lang::Object>> formatArgs) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(resId, formatArgs); }
inline jint Context::getColor(jint id) { return call_method<SCAPIX_META_STRING("getColor"), jint>(id); }
inline ref<android::graphics::drawable::Drawable> Context::getDrawable(jint id) { return call_method<SCAPIX_META_STRING("getDrawable"), ref<android::graphics::drawable::Drawable>>(id); }
inline ref<android::content::res::ColorStateList> Context::getColorStateList(jint id) { return call_method<SCAPIX_META_STRING("getColorStateList"), ref<android::content::res::ColorStateList>>(id); }
inline void Context::setTheme(jint p1) { return call_method<SCAPIX_META_STRING("setTheme"), void>(p1); }
inline ref<android::content::res::Resources_Theme> Context::getTheme() { return call_method<SCAPIX_META_STRING("getTheme"), ref<android::content::res::Resources_Theme>>(); }
inline ref<android::content::res::TypedArray> Context::obtainStyledAttributes(ref<link::java::array<jint>> attrs) { return call_method<SCAPIX_META_STRING("obtainStyledAttributes"), ref<android::content::res::TypedArray>>(attrs); }
inline ref<android::content::res::TypedArray> Context::obtainStyledAttributes(jint resid, ref<link::java::array<jint>> attrs) { return call_method<SCAPIX_META_STRING("obtainStyledAttributes"), ref<android::content::res::TypedArray>>(resid, attrs); }
inline ref<android::content::res::TypedArray> Context::obtainStyledAttributes(ref<android::util::AttributeSet> set, ref<link::java::array<jint>> attrs) { return call_method<SCAPIX_META_STRING("obtainStyledAttributes"), ref<android::content::res::TypedArray>>(set, attrs); }
inline ref<android::content::res::TypedArray> Context::obtainStyledAttributes(ref<android::util::AttributeSet> set, ref<link::java::array<jint>> attrs, jint defStyleAttr, jint defStyleRes) { return call_method<SCAPIX_META_STRING("obtainStyledAttributes"), ref<android::content::res::TypedArray>>(set, attrs, defStyleAttr, defStyleRes); }
inline ref<java::lang::ClassLoader> Context::getClassLoader() { return call_method<SCAPIX_META_STRING("getClassLoader"), ref<java::lang::ClassLoader>>(); }
inline ref<java::lang::String> Context::getPackageName() { return call_method<SCAPIX_META_STRING("getPackageName"), ref<java::lang::String>>(); }
inline ref<android::content::pm::ApplicationInfo> Context::getApplicationInfo() { return call_method<SCAPIX_META_STRING("getApplicationInfo"), ref<android::content::pm::ApplicationInfo>>(); }
inline ref<java::lang::String> Context::getPackageResourcePath() { return call_method<SCAPIX_META_STRING("getPackageResourcePath"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Context::getPackageCodePath() { return call_method<SCAPIX_META_STRING("getPackageCodePath"), ref<java::lang::String>>(); }
inline ref<android::content::SharedPreferences> Context::getSharedPreferences(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("getSharedPreferences"), ref<android::content::SharedPreferences>>(p1, p2); }
inline jboolean Context::moveSharedPreferencesFrom(ref<android::content::Context> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("moveSharedPreferencesFrom"), jboolean>(p1, p2); }
inline jboolean Context::deleteSharedPreferences(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("deleteSharedPreferences"), jboolean>(p1); }
inline ref<java::io::FileInputStream> Context::openFileInput(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("openFileInput"), ref<java::io::FileInputStream>>(p1); }
inline ref<java::io::FileOutputStream> Context::openFileOutput(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("openFileOutput"), ref<java::io::FileOutputStream>>(p1, p2); }
inline jboolean Context::deleteFile(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("deleteFile"), jboolean>(p1); }
inline ref<java::io::File> Context::getFileStreamPath(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getFileStreamPath"), ref<java::io::File>>(p1); }
inline ref<java::io::File> Context::getDataDir() { return call_method<SCAPIX_META_STRING("getDataDir"), ref<java::io::File>>(); }
inline ref<java::io::File> Context::getFilesDir() { return call_method<SCAPIX_META_STRING("getFilesDir"), ref<java::io::File>>(); }
inline ref<java::io::File> Context::getNoBackupFilesDir() { return call_method<SCAPIX_META_STRING("getNoBackupFilesDir"), ref<java::io::File>>(); }
inline ref<java::io::File> Context::getExternalFilesDir(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getExternalFilesDir"), ref<java::io::File>>(p1); }
inline ref<link::java::array<java::io::File>> Context::getExternalFilesDirs(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getExternalFilesDirs"), ref<link::java::array<java::io::File>>>(p1); }
inline ref<java::io::File> Context::getObbDir() { return call_method<SCAPIX_META_STRING("getObbDir"), ref<java::io::File>>(); }
inline ref<link::java::array<java::io::File>> Context::getObbDirs() { return call_method<SCAPIX_META_STRING("getObbDirs"), ref<link::java::array<java::io::File>>>(); }
inline ref<java::io::File> Context::getCacheDir() { return call_method<SCAPIX_META_STRING("getCacheDir"), ref<java::io::File>>(); }
inline ref<java::io::File> Context::getCodeCacheDir() { return call_method<SCAPIX_META_STRING("getCodeCacheDir"), ref<java::io::File>>(); }
inline ref<java::io::File> Context::getExternalCacheDir() { return call_method<SCAPIX_META_STRING("getExternalCacheDir"), ref<java::io::File>>(); }
inline ref<link::java::array<java::io::File>> Context::getExternalCacheDirs() { return call_method<SCAPIX_META_STRING("getExternalCacheDirs"), ref<link::java::array<java::io::File>>>(); }
inline ref<link::java::array<java::io::File>> Context::getExternalMediaDirs() { return call_method<SCAPIX_META_STRING("getExternalMediaDirs"), ref<link::java::array<java::io::File>>>(); }
inline ref<link::java::array<java::lang::String>> Context::fileList() { return call_method<SCAPIX_META_STRING("fileList"), ref<link::java::array<java::lang::String>>>(); }
inline ref<java::io::File> Context::getDir(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("getDir"), ref<java::io::File>>(p1, p2); }
inline ref<android::database::sqlite::SQLiteDatabase> Context::openOrCreateDatabase(ref<java::lang::String> p1, jint p2, ref<android::database::sqlite::SQLiteDatabase_CursorFactory> p3) { return call_method<SCAPIX_META_STRING("openOrCreateDatabase"), ref<android::database::sqlite::SQLiteDatabase>>(p1, p2, p3); }
inline ref<android::database::sqlite::SQLiteDatabase> Context::openOrCreateDatabase(ref<java::lang::String> p1, jint p2, ref<android::database::sqlite::SQLiteDatabase_CursorFactory> p3, ref<android::database::DatabaseErrorHandler> p4) { return call_method<SCAPIX_META_STRING("openOrCreateDatabase"), ref<android::database::sqlite::SQLiteDatabase>>(p1, p2, p3, p4); }
inline jboolean Context::moveDatabaseFrom(ref<android::content::Context> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("moveDatabaseFrom"), jboolean>(p1, p2); }
inline jboolean Context::deleteDatabase(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("deleteDatabase"), jboolean>(p1); }
inline ref<java::io::File> Context::getDatabasePath(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getDatabasePath"), ref<java::io::File>>(p1); }
inline ref<link::java::array<java::lang::String>> Context::databaseList() { return call_method<SCAPIX_META_STRING("databaseList"), ref<link::java::array<java::lang::String>>>(); }
inline ref<android::graphics::drawable::Drawable> Context::getWallpaper() { return call_method<SCAPIX_META_STRING("getWallpaper"), ref<android::graphics::drawable::Drawable>>(); }
inline ref<android::graphics::drawable::Drawable> Context::peekWallpaper() { return call_method<SCAPIX_META_STRING("peekWallpaper"), ref<android::graphics::drawable::Drawable>>(); }
inline jint Context::getWallpaperDesiredMinimumWidth() { return call_method<SCAPIX_META_STRING("getWallpaperDesiredMinimumWidth"), jint>(); }
inline jint Context::getWallpaperDesiredMinimumHeight() { return call_method<SCAPIX_META_STRING("getWallpaperDesiredMinimumHeight"), jint>(); }
inline void Context::setWallpaper(ref<android::graphics::Bitmap> p1) { return call_method<SCAPIX_META_STRING("setWallpaper"), void>(p1); }
inline void Context::setWallpaper(ref<java::io::InputStream> p1) { return call_method<SCAPIX_META_STRING("setWallpaper"), void>(p1); }
inline void Context::clearWallpaper() { return call_method<SCAPIX_META_STRING("clearWallpaper"), void>(); }
inline void Context::startActivity(ref<android::content::Intent> p1) { return call_method<SCAPIX_META_STRING("startActivity"), void>(p1); }
inline void Context::startActivity(ref<android::content::Intent> p1, ref<android::os::Bundle> p2) { return call_method<SCAPIX_META_STRING("startActivity"), void>(p1, p2); }
inline void Context::startActivities(ref<link::java::array<android::content::Intent>> p1) { return call_method<SCAPIX_META_STRING("startActivities"), void>(p1); }
inline void Context::startActivities(ref<link::java::array<android::content::Intent>> p1, ref<android::os::Bundle> p2) { return call_method<SCAPIX_META_STRING("startActivities"), void>(p1, p2); }
inline void Context::startIntentSender(ref<android::content::IntentSender> p1, ref<android::content::Intent> p2, jint p3, jint p4, jint p5) { return call_method<SCAPIX_META_STRING("startIntentSender"), void>(p1, p2, p3, p4, p5); }
inline void Context::startIntentSender(ref<android::content::IntentSender> p1, ref<android::content::Intent> p2, jint p3, jint p4, jint p5, ref<android::os::Bundle> p6) { return call_method<SCAPIX_META_STRING("startIntentSender"), void>(p1, p2, p3, p4, p5, p6); }
inline void Context::sendBroadcast(ref<android::content::Intent> p1) { return call_method<SCAPIX_META_STRING("sendBroadcast"), void>(p1); }
inline void Context::sendBroadcast(ref<android::content::Intent> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("sendBroadcast"), void>(p1, p2); }
inline void Context::sendOrderedBroadcast(ref<android::content::Intent> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("sendOrderedBroadcast"), void>(p1, p2); }
inline void Context::sendOrderedBroadcast(ref<android::content::Intent> p1, ref<java::lang::String> p2, ref<android::content::BroadcastReceiver> p3, ref<android::os::Handler> p4, jint p5, ref<java::lang::String> p6, ref<android::os::Bundle> p7) { return call_method<SCAPIX_META_STRING("sendOrderedBroadcast"), void>(p1, p2, p3, p4, p5, p6, p7); }
inline void Context::sendBroadcastAsUser(ref<android::content::Intent> p1, ref<android::os::UserHandle> p2) { return call_method<SCAPIX_META_STRING("sendBroadcastAsUser"), void>(p1, p2); }
inline void Context::sendBroadcastAsUser(ref<android::content::Intent> p1, ref<android::os::UserHandle> p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("sendBroadcastAsUser"), void>(p1, p2, p3); }
inline void Context::sendOrderedBroadcastAsUser(ref<android::content::Intent> p1, ref<android::os::UserHandle> p2, ref<java::lang::String> p3, ref<android::content::BroadcastReceiver> p4, ref<android::os::Handler> p5, jint p6, ref<java::lang::String> p7, ref<android::os::Bundle> p8) { return call_method<SCAPIX_META_STRING("sendOrderedBroadcastAsUser"), void>(p1, p2, p3, p4, p5, p6, p7, p8); }
inline void Context::sendStickyBroadcast(ref<android::content::Intent> p1) { return call_method<SCAPIX_META_STRING("sendStickyBroadcast"), void>(p1); }
inline void Context::sendStickyOrderedBroadcast(ref<android::content::Intent> p1, ref<android::content::BroadcastReceiver> p2, ref<android::os::Handler> p3, jint p4, ref<java::lang::String> p5, ref<android::os::Bundle> p6) { return call_method<SCAPIX_META_STRING("sendStickyOrderedBroadcast"), void>(p1, p2, p3, p4, p5, p6); }
inline void Context::removeStickyBroadcast(ref<android::content::Intent> p1) { return call_method<SCAPIX_META_STRING("removeStickyBroadcast"), void>(p1); }
inline void Context::sendStickyBroadcastAsUser(ref<android::content::Intent> p1, ref<android::os::UserHandle> p2) { return call_method<SCAPIX_META_STRING("sendStickyBroadcastAsUser"), void>(p1, p2); }
inline void Context::sendStickyOrderedBroadcastAsUser(ref<android::content::Intent> p1, ref<android::os::UserHandle> p2, ref<android::content::BroadcastReceiver> p3, ref<android::os::Handler> p4, jint p5, ref<java::lang::String> p6, ref<android::os::Bundle> p7) { return call_method<SCAPIX_META_STRING("sendStickyOrderedBroadcastAsUser"), void>(p1, p2, p3, p4, p5, p6, p7); }
inline void Context::removeStickyBroadcastAsUser(ref<android::content::Intent> p1, ref<android::os::UserHandle> p2) { return call_method<SCAPIX_META_STRING("removeStickyBroadcastAsUser"), void>(p1, p2); }
inline ref<android::content::Intent> Context::registerReceiver(ref<android::content::BroadcastReceiver> p1, ref<android::content::IntentFilter> p2) { return call_method<SCAPIX_META_STRING("registerReceiver"), ref<android::content::Intent>>(p1, p2); }
inline ref<android::content::Intent> Context::registerReceiver(ref<android::content::BroadcastReceiver> p1, ref<android::content::IntentFilter> p2, jint p3) { return call_method<SCAPIX_META_STRING("registerReceiver"), ref<android::content::Intent>>(p1, p2, p3); }
inline ref<android::content::Intent> Context::registerReceiver(ref<android::content::BroadcastReceiver> p1, ref<android::content::IntentFilter> p2, ref<java::lang::String> p3, ref<android::os::Handler> p4) { return call_method<SCAPIX_META_STRING("registerReceiver"), ref<android::content::Intent>>(p1, p2, p3, p4); }
inline ref<android::content::Intent> Context::registerReceiver(ref<android::content::BroadcastReceiver> p1, ref<android::content::IntentFilter> p2, ref<java::lang::String> p3, ref<android::os::Handler> p4, jint p5) { return call_method<SCAPIX_META_STRING("registerReceiver"), ref<android::content::Intent>>(p1, p2, p3, p4, p5); }
inline void Context::unregisterReceiver(ref<android::content::BroadcastReceiver> p1) { return call_method<SCAPIX_META_STRING("unregisterReceiver"), void>(p1); }
inline ref<android::content::ComponentName> Context::startService(ref<android::content::Intent> p1) { return call_method<SCAPIX_META_STRING("startService"), ref<android::content::ComponentName>>(p1); }
inline ref<android::content::ComponentName> Context::startForegroundService(ref<android::content::Intent> p1) { return call_method<SCAPIX_META_STRING("startForegroundService"), ref<android::content::ComponentName>>(p1); }
inline jboolean Context::stopService(ref<android::content::Intent> p1) { return call_method<SCAPIX_META_STRING("stopService"), jboolean>(p1); }
inline jboolean Context::bindService(ref<android::content::Intent> p1, ref<android::content::ServiceConnection> p2, jint p3) { return call_method<SCAPIX_META_STRING("bindService"), jboolean>(p1, p2, p3); }
inline void Context::unbindService(ref<android::content::ServiceConnection> p1) { return call_method<SCAPIX_META_STRING("unbindService"), void>(p1); }
inline jboolean Context::startInstrumentation(ref<android::content::ComponentName> p1, ref<java::lang::String> p2, ref<android::os::Bundle> p3) { return call_method<SCAPIX_META_STRING("startInstrumentation"), jboolean>(p1, p2, p3); }
inline ref<java::lang::Object> Context::getSystemService(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getSystemService"), ref<java::lang::Object>>(p1); }
inline ref<java::lang::Object> Context::getSystemService(ref<java::lang::Class> serviceClass) { return call_method<SCAPIX_META_STRING("getSystemService"), ref<java::lang::Object>>(serviceClass); }
inline ref<java::lang::String> Context::getSystemServiceName(ref<java::lang::Class> p1) { return call_method<SCAPIX_META_STRING("getSystemServiceName"), ref<java::lang::String>>(p1); }
inline jint Context::checkPermission(ref<java::lang::String> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("checkPermission"), jint>(p1, p2, p3); }
inline jint Context::checkCallingPermission(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("checkCallingPermission"), jint>(p1); }
inline jint Context::checkCallingOrSelfPermission(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("checkCallingOrSelfPermission"), jint>(p1); }
inline jint Context::checkSelfPermission(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("checkSelfPermission"), jint>(p1); }
inline void Context::enforcePermission(ref<java::lang::String> p1, jint p2, jint p3, ref<java::lang::String> p4) { return call_method<SCAPIX_META_STRING("enforcePermission"), void>(p1, p2, p3, p4); }
inline void Context::enforceCallingPermission(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("enforceCallingPermission"), void>(p1, p2); }
inline void Context::enforceCallingOrSelfPermission(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("enforceCallingOrSelfPermission"), void>(p1, p2); }
inline void Context::grantUriPermission(ref<java::lang::String> p1, ref<android::net::Uri> p2, jint p3) { return call_method<SCAPIX_META_STRING("grantUriPermission"), void>(p1, p2, p3); }
inline void Context::revokeUriPermission(ref<android::net::Uri> p1, jint p2) { return call_method<SCAPIX_META_STRING("revokeUriPermission"), void>(p1, p2); }
inline void Context::revokeUriPermission(ref<java::lang::String> p1, ref<android::net::Uri> p2, jint p3) { return call_method<SCAPIX_META_STRING("revokeUriPermission"), void>(p1, p2, p3); }
inline jint Context::checkUriPermission(ref<android::net::Uri> p1, jint p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("checkUriPermission"), jint>(p1, p2, p3, p4); }
inline jint Context::checkCallingUriPermission(ref<android::net::Uri> p1, jint p2) { return call_method<SCAPIX_META_STRING("checkCallingUriPermission"), jint>(p1, p2); }
inline jint Context::checkCallingOrSelfUriPermission(ref<android::net::Uri> p1, jint p2) { return call_method<SCAPIX_META_STRING("checkCallingOrSelfUriPermission"), jint>(p1, p2); }
inline jint Context::checkUriPermission(ref<android::net::Uri> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, jint p4, jint p5, jint p6) { return call_method<SCAPIX_META_STRING("checkUriPermission"), jint>(p1, p2, p3, p4, p5, p6); }
inline void Context::enforceUriPermission(ref<android::net::Uri> p1, jint p2, jint p3, jint p4, ref<java::lang::String> p5) { return call_method<SCAPIX_META_STRING("enforceUriPermission"), void>(p1, p2, p3, p4, p5); }
inline void Context::enforceCallingUriPermission(ref<android::net::Uri> p1, jint p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("enforceCallingUriPermission"), void>(p1, p2, p3); }
inline void Context::enforceCallingOrSelfUriPermission(ref<android::net::Uri> p1, jint p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("enforceCallingOrSelfUriPermission"), void>(p1, p2, p3); }
inline void Context::enforceUriPermission(ref<android::net::Uri> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, jint p4, jint p5, jint p6, ref<java::lang::String> p7) { return call_method<SCAPIX_META_STRING("enforceUriPermission"), void>(p1, p2, p3, p4, p5, p6, p7); }
inline ref<android::content::Context> Context::createPackageContext(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("createPackageContext"), ref<android::content::Context>>(p1, p2); }
inline ref<android::content::Context> Context::createContextForSplit(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("createContextForSplit"), ref<android::content::Context>>(p1); }
inline ref<android::content::Context> Context::createConfigurationContext(ref<android::content::res::Configuration> p1) { return call_method<SCAPIX_META_STRING("createConfigurationContext"), ref<android::content::Context>>(p1); }
inline ref<android::content::Context> Context::createDisplayContext(ref<android::view::Display> p1) { return call_method<SCAPIX_META_STRING("createDisplayContext"), ref<android::content::Context>>(p1); }
inline ref<android::content::Context> Context::createDeviceProtectedStorageContext() { return call_method<SCAPIX_META_STRING("createDeviceProtectedStorageContext"), ref<android::content::Context>>(); }
inline jboolean Context::isRestricted() { return call_method<SCAPIX_META_STRING("isRestricted"), jboolean>(); }
inline jboolean Context::isDeviceProtectedStorage() { return call_method<SCAPIX_META_STRING("isDeviceProtectedStorage"), jboolean>(); }

} // namespace android::content
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_CONTEXT_H
