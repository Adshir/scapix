// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/content/pm/PackageItemInfo.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_CONTENT_PM_APPLICATIONINFO_H
#define SCAPIX_ANDROID_CONTENT_PM_APPLICATIONINFO_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content::pm { class PackageManager; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::util { class Printer; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::util { class UUID; }
namespace android::content::pm { class ApplicationInfo_DisplayNameComparator; }

namespace android::content::pm {

class ApplicationInfo : public object_base<SCAPIX_META_STRING("android/content/pm/ApplicationInfo"),
	android::content::pm::PackageItemInfo,
	android::os::Parcelable>
{
public:

	using DisplayNameComparator = ApplicationInfo_DisplayNameComparator;

	static jint CATEGORY_AUDIO_();
	static jint CATEGORY_GAME_();
	static jint CATEGORY_IMAGE_();
	static jint CATEGORY_MAPS_();
	static jint CATEGORY_NEWS_();
	static jint CATEGORY_PRODUCTIVITY_();
	static jint CATEGORY_SOCIAL_();
	static jint CATEGORY_UNDEFINED_();
	static jint CATEGORY_VIDEO_();
	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint FLAG_ALLOW_BACKUP_();
	static jint FLAG_ALLOW_CLEAR_USER_DATA_();
	static jint FLAG_ALLOW_TASK_REPARENTING_();
	static jint FLAG_DEBUGGABLE_();
	static jint FLAG_EXTERNAL_STORAGE_();
	static jint FLAG_EXTRACT_NATIVE_LIBS_();
	static jint FLAG_FACTORY_TEST_();
	static jint FLAG_FULL_BACKUP_ONLY_();
	static jint FLAG_HARDWARE_ACCELERATED_();
	static jint FLAG_HAS_CODE_();
	static jint FLAG_INSTALLED_();
	static jint FLAG_IS_DATA_ONLY_();
	static jint FLAG_IS_GAME_();
	static jint FLAG_KILL_AFTER_RESTORE_();
	static jint FLAG_LARGE_HEAP_();
	static jint FLAG_MULTIARCH_();
	static jint FLAG_PERSISTENT_();
	static jint FLAG_RESIZEABLE_FOR_SCREENS_();
	static jint FLAG_RESTORE_ANY_VERSION_();
	static jint FLAG_STOPPED_();
	static jint FLAG_SUPPORTS_LARGE_SCREENS_();
	static jint FLAG_SUPPORTS_NORMAL_SCREENS_();
	static jint FLAG_SUPPORTS_RTL_();
	static jint FLAG_SUPPORTS_SCREEN_DENSITIES_();
	static jint FLAG_SUPPORTS_SMALL_SCREENS_();
	static jint FLAG_SUPPORTS_XLARGE_SCREENS_();
	static jint FLAG_SUSPENDED_();
	static jint FLAG_SYSTEM_();
	static jint FLAG_TEST_ONLY_();
	static jint FLAG_UPDATED_SYSTEM_APP_();
	static jint FLAG_USES_CLEARTEXT_TRAFFIC_();
	static jint FLAG_VM_SAFE_MODE_();
	ref<java::lang::String> appComponentFactory();
	void appComponentFactory(ref<java::lang::String>);
	ref<java::lang::String> backupAgentName();
	void backupAgentName(ref<java::lang::String>);
	jint category();
	void category(jint);
	ref<java::lang::String> className();
	void className(ref<java::lang::String>);
	jint compatibleWidthLimitDp();
	void compatibleWidthLimitDp(jint);
	ref<java::lang::String> dataDir();
	void dataDir(ref<java::lang::String>);
	jint descriptionRes();
	void descriptionRes(jint);
	ref<java::lang::String> deviceProtectedDataDir();
	void deviceProtectedDataDir(ref<java::lang::String>);
	jboolean enabled();
	void enabled(jboolean);
	jint flags();
	void flags(jint);
	jint largestWidthLimitDp();
	void largestWidthLimitDp(jint);
	ref<java::lang::String> manageSpaceActivityName();
	void manageSpaceActivityName(ref<java::lang::String>);
	jint minSdkVersion();
	void minSdkVersion(jint);
	ref<java::lang::String> nativeLibraryDir();
	void nativeLibraryDir(ref<java::lang::String>);
	ref<java::lang::String> permission();
	void permission(ref<java::lang::String>);
	ref<java::lang::String> processName();
	void processName(ref<java::lang::String>);
	ref<java::lang::String> publicSourceDir();
	void publicSourceDir(ref<java::lang::String>);
	jint requiresSmallestWidthDp();
	void requiresSmallestWidthDp(jint);
	ref<link::java::array<java::lang::String>> sharedLibraryFiles();
	void sharedLibraryFiles(ref<link::java::array<java::lang::String>>);
	ref<java::lang::String> sourceDir();
	void sourceDir(ref<java::lang::String>);
	ref<link::java::array<java::lang::String>> splitNames();
	void splitNames(ref<link::java::array<java::lang::String>>);
	ref<link::java::array<java::lang::String>> splitPublicSourceDirs();
	void splitPublicSourceDirs(ref<link::java::array<java::lang::String>>);
	ref<link::java::array<java::lang::String>> splitSourceDirs();
	void splitSourceDirs(ref<link::java::array<java::lang::String>>);
	ref<java::util::UUID> storageUuid();
	void storageUuid(ref<java::util::UUID>);
	jint targetSdkVersion();
	void targetSdkVersion(jint);
	ref<java::lang::String> taskAffinity();
	void taskAffinity(ref<java::lang::String>);
	jint theme();
	void theme(jint);
	jint uiOptions();
	void uiOptions(jint);
	jint uid();
	void uid(jint);

	static ref<ApplicationInfo> new_object();
	static ref<ApplicationInfo> new_object(ref<android::content::pm::ApplicationInfo> orig);
	static ref<java::lang::CharSequence> getCategoryTitle(ref<android::content::Context> context, jint category);
	void dump(ref<android::util::Printer> pw, ref<java::lang::String> prefix);
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint parcelableFlags);
	ref<java::lang::CharSequence> loadDescription(ref<android::content::pm::PackageManager> pm);
	jboolean isVirtualPreload();

protected:

	ApplicationInfo(handle_type h) : base_(h) {}

};

} // namespace android::content::pm
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/pm/PackageManager.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/util/Printer.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/UUID.h>

namespace scapix::java_api {
namespace android::content::pm {

inline jint ApplicationInfo::CATEGORY_AUDIO_() { return get_static_field<SCAPIX_META_STRING("CATEGORY_AUDIO"), jint>(); }
inline jint ApplicationInfo::CATEGORY_GAME_() { return get_static_field<SCAPIX_META_STRING("CATEGORY_GAME"), jint>(); }
inline jint ApplicationInfo::CATEGORY_IMAGE_() { return get_static_field<SCAPIX_META_STRING("CATEGORY_IMAGE"), jint>(); }
inline jint ApplicationInfo::CATEGORY_MAPS_() { return get_static_field<SCAPIX_META_STRING("CATEGORY_MAPS"), jint>(); }
inline jint ApplicationInfo::CATEGORY_NEWS_() { return get_static_field<SCAPIX_META_STRING("CATEGORY_NEWS"), jint>(); }
inline jint ApplicationInfo::CATEGORY_PRODUCTIVITY_() { return get_static_field<SCAPIX_META_STRING("CATEGORY_PRODUCTIVITY"), jint>(); }
inline jint ApplicationInfo::CATEGORY_SOCIAL_() { return get_static_field<SCAPIX_META_STRING("CATEGORY_SOCIAL"), jint>(); }
inline jint ApplicationInfo::CATEGORY_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("CATEGORY_UNDEFINED"), jint>(); }
inline jint ApplicationInfo::CATEGORY_VIDEO_() { return get_static_field<SCAPIX_META_STRING("CATEGORY_VIDEO"), jint>(); }
inline ref<android::os::Parcelable_Creator> ApplicationInfo::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint ApplicationInfo::FLAG_ALLOW_BACKUP_() { return get_static_field<SCAPIX_META_STRING("FLAG_ALLOW_BACKUP"), jint>(); }
inline jint ApplicationInfo::FLAG_ALLOW_CLEAR_USER_DATA_() { return get_static_field<SCAPIX_META_STRING("FLAG_ALLOW_CLEAR_USER_DATA"), jint>(); }
inline jint ApplicationInfo::FLAG_ALLOW_TASK_REPARENTING_() { return get_static_field<SCAPIX_META_STRING("FLAG_ALLOW_TASK_REPARENTING"), jint>(); }
inline jint ApplicationInfo::FLAG_DEBUGGABLE_() { return get_static_field<SCAPIX_META_STRING("FLAG_DEBUGGABLE"), jint>(); }
inline jint ApplicationInfo::FLAG_EXTERNAL_STORAGE_() { return get_static_field<SCAPIX_META_STRING("FLAG_EXTERNAL_STORAGE"), jint>(); }
inline jint ApplicationInfo::FLAG_EXTRACT_NATIVE_LIBS_() { return get_static_field<SCAPIX_META_STRING("FLAG_EXTRACT_NATIVE_LIBS"), jint>(); }
inline jint ApplicationInfo::FLAG_FACTORY_TEST_() { return get_static_field<SCAPIX_META_STRING("FLAG_FACTORY_TEST"), jint>(); }
inline jint ApplicationInfo::FLAG_FULL_BACKUP_ONLY_() { return get_static_field<SCAPIX_META_STRING("FLAG_FULL_BACKUP_ONLY"), jint>(); }
inline jint ApplicationInfo::FLAG_HARDWARE_ACCELERATED_() { return get_static_field<SCAPIX_META_STRING("FLAG_HARDWARE_ACCELERATED"), jint>(); }
inline jint ApplicationInfo::FLAG_HAS_CODE_() { return get_static_field<SCAPIX_META_STRING("FLAG_HAS_CODE"), jint>(); }
inline jint ApplicationInfo::FLAG_INSTALLED_() { return get_static_field<SCAPIX_META_STRING("FLAG_INSTALLED"), jint>(); }
inline jint ApplicationInfo::FLAG_IS_DATA_ONLY_() { return get_static_field<SCAPIX_META_STRING("FLAG_IS_DATA_ONLY"), jint>(); }
inline jint ApplicationInfo::FLAG_IS_GAME_() { return get_static_field<SCAPIX_META_STRING("FLAG_IS_GAME"), jint>(); }
inline jint ApplicationInfo::FLAG_KILL_AFTER_RESTORE_() { return get_static_field<SCAPIX_META_STRING("FLAG_KILL_AFTER_RESTORE"), jint>(); }
inline jint ApplicationInfo::FLAG_LARGE_HEAP_() { return get_static_field<SCAPIX_META_STRING("FLAG_LARGE_HEAP"), jint>(); }
inline jint ApplicationInfo::FLAG_MULTIARCH_() { return get_static_field<SCAPIX_META_STRING("FLAG_MULTIARCH"), jint>(); }
inline jint ApplicationInfo::FLAG_PERSISTENT_() { return get_static_field<SCAPIX_META_STRING("FLAG_PERSISTENT"), jint>(); }
inline jint ApplicationInfo::FLAG_RESIZEABLE_FOR_SCREENS_() { return get_static_field<SCAPIX_META_STRING("FLAG_RESIZEABLE_FOR_SCREENS"), jint>(); }
inline jint ApplicationInfo::FLAG_RESTORE_ANY_VERSION_() { return get_static_field<SCAPIX_META_STRING("FLAG_RESTORE_ANY_VERSION"), jint>(); }
inline jint ApplicationInfo::FLAG_STOPPED_() { return get_static_field<SCAPIX_META_STRING("FLAG_STOPPED"), jint>(); }
inline jint ApplicationInfo::FLAG_SUPPORTS_LARGE_SCREENS_() { return get_static_field<SCAPIX_META_STRING("FLAG_SUPPORTS_LARGE_SCREENS"), jint>(); }
inline jint ApplicationInfo::FLAG_SUPPORTS_NORMAL_SCREENS_() { return get_static_field<SCAPIX_META_STRING("FLAG_SUPPORTS_NORMAL_SCREENS"), jint>(); }
inline jint ApplicationInfo::FLAG_SUPPORTS_RTL_() { return get_static_field<SCAPIX_META_STRING("FLAG_SUPPORTS_RTL"), jint>(); }
inline jint ApplicationInfo::FLAG_SUPPORTS_SCREEN_DENSITIES_() { return get_static_field<SCAPIX_META_STRING("FLAG_SUPPORTS_SCREEN_DENSITIES"), jint>(); }
inline jint ApplicationInfo::FLAG_SUPPORTS_SMALL_SCREENS_() { return get_static_field<SCAPIX_META_STRING("FLAG_SUPPORTS_SMALL_SCREENS"), jint>(); }
inline jint ApplicationInfo::FLAG_SUPPORTS_XLARGE_SCREENS_() { return get_static_field<SCAPIX_META_STRING("FLAG_SUPPORTS_XLARGE_SCREENS"), jint>(); }
inline jint ApplicationInfo::FLAG_SUSPENDED_() { return get_static_field<SCAPIX_META_STRING("FLAG_SUSPENDED"), jint>(); }
inline jint ApplicationInfo::FLAG_SYSTEM_() { return get_static_field<SCAPIX_META_STRING("FLAG_SYSTEM"), jint>(); }
inline jint ApplicationInfo::FLAG_TEST_ONLY_() { return get_static_field<SCAPIX_META_STRING("FLAG_TEST_ONLY"), jint>(); }
inline jint ApplicationInfo::FLAG_UPDATED_SYSTEM_APP_() { return get_static_field<SCAPIX_META_STRING("FLAG_UPDATED_SYSTEM_APP"), jint>(); }
inline jint ApplicationInfo::FLAG_USES_CLEARTEXT_TRAFFIC_() { return get_static_field<SCAPIX_META_STRING("FLAG_USES_CLEARTEXT_TRAFFIC"), jint>(); }
inline jint ApplicationInfo::FLAG_VM_SAFE_MODE_() { return get_static_field<SCAPIX_META_STRING("FLAG_VM_SAFE_MODE"), jint>(); }
inline ref<java::lang::String> ApplicationInfo::appComponentFactory() { return get_field<SCAPIX_META_STRING("appComponentFactory"), ref<java::lang::String>>(); }
inline void ApplicationInfo::appComponentFactory(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("appComponentFactory"), ref<java::lang::String>>(v); }
inline ref<java::lang::String> ApplicationInfo::backupAgentName() { return get_field<SCAPIX_META_STRING("backupAgentName"), ref<java::lang::String>>(); }
inline void ApplicationInfo::backupAgentName(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("backupAgentName"), ref<java::lang::String>>(v); }
inline jint ApplicationInfo::category() { return get_field<SCAPIX_META_STRING("category"), jint>(); }
inline void ApplicationInfo::category(jint v) { set_field<SCAPIX_META_STRING("category"), jint>(v); }
inline ref<java::lang::String> ApplicationInfo::className() { return get_field<SCAPIX_META_STRING("className"), ref<java::lang::String>>(); }
inline void ApplicationInfo::className(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("className"), ref<java::lang::String>>(v); }
inline jint ApplicationInfo::compatibleWidthLimitDp() { return get_field<SCAPIX_META_STRING("compatibleWidthLimitDp"), jint>(); }
inline void ApplicationInfo::compatibleWidthLimitDp(jint v) { set_field<SCAPIX_META_STRING("compatibleWidthLimitDp"), jint>(v); }
inline ref<java::lang::String> ApplicationInfo::dataDir() { return get_field<SCAPIX_META_STRING("dataDir"), ref<java::lang::String>>(); }
inline void ApplicationInfo::dataDir(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("dataDir"), ref<java::lang::String>>(v); }
inline jint ApplicationInfo::descriptionRes() { return get_field<SCAPIX_META_STRING("descriptionRes"), jint>(); }
inline void ApplicationInfo::descriptionRes(jint v) { set_field<SCAPIX_META_STRING("descriptionRes"), jint>(v); }
inline ref<java::lang::String> ApplicationInfo::deviceProtectedDataDir() { return get_field<SCAPIX_META_STRING("deviceProtectedDataDir"), ref<java::lang::String>>(); }
inline void ApplicationInfo::deviceProtectedDataDir(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("deviceProtectedDataDir"), ref<java::lang::String>>(v); }
inline jboolean ApplicationInfo::enabled() { return get_field<SCAPIX_META_STRING("enabled"), jboolean>(); }
inline void ApplicationInfo::enabled(jboolean v) { set_field<SCAPIX_META_STRING("enabled"), jboolean>(v); }
inline jint ApplicationInfo::flags() { return get_field<SCAPIX_META_STRING("flags"), jint>(); }
inline void ApplicationInfo::flags(jint v) { set_field<SCAPIX_META_STRING("flags"), jint>(v); }
inline jint ApplicationInfo::largestWidthLimitDp() { return get_field<SCAPIX_META_STRING("largestWidthLimitDp"), jint>(); }
inline void ApplicationInfo::largestWidthLimitDp(jint v) { set_field<SCAPIX_META_STRING("largestWidthLimitDp"), jint>(v); }
inline ref<java::lang::String> ApplicationInfo::manageSpaceActivityName() { return get_field<SCAPIX_META_STRING("manageSpaceActivityName"), ref<java::lang::String>>(); }
inline void ApplicationInfo::manageSpaceActivityName(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("manageSpaceActivityName"), ref<java::lang::String>>(v); }
inline jint ApplicationInfo::minSdkVersion() { return get_field<SCAPIX_META_STRING("minSdkVersion"), jint>(); }
inline void ApplicationInfo::minSdkVersion(jint v) { set_field<SCAPIX_META_STRING("minSdkVersion"), jint>(v); }
inline ref<java::lang::String> ApplicationInfo::nativeLibraryDir() { return get_field<SCAPIX_META_STRING("nativeLibraryDir"), ref<java::lang::String>>(); }
inline void ApplicationInfo::nativeLibraryDir(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("nativeLibraryDir"), ref<java::lang::String>>(v); }
inline ref<java::lang::String> ApplicationInfo::permission() { return get_field<SCAPIX_META_STRING("permission"), ref<java::lang::String>>(); }
inline void ApplicationInfo::permission(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("permission"), ref<java::lang::String>>(v); }
inline ref<java::lang::String> ApplicationInfo::processName() { return get_field<SCAPIX_META_STRING("processName"), ref<java::lang::String>>(); }
inline void ApplicationInfo::processName(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("processName"), ref<java::lang::String>>(v); }
inline ref<java::lang::String> ApplicationInfo::publicSourceDir() { return get_field<SCAPIX_META_STRING("publicSourceDir"), ref<java::lang::String>>(); }
inline void ApplicationInfo::publicSourceDir(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("publicSourceDir"), ref<java::lang::String>>(v); }
inline jint ApplicationInfo::requiresSmallestWidthDp() { return get_field<SCAPIX_META_STRING("requiresSmallestWidthDp"), jint>(); }
inline void ApplicationInfo::requiresSmallestWidthDp(jint v) { set_field<SCAPIX_META_STRING("requiresSmallestWidthDp"), jint>(v); }
inline ref<link::java::array<java::lang::String>> ApplicationInfo::sharedLibraryFiles() { return get_field<SCAPIX_META_STRING("sharedLibraryFiles"), ref<link::java::array<java::lang::String>>>(); }
inline void ApplicationInfo::sharedLibraryFiles(ref<link::java::array<java::lang::String>> v) { set_field<SCAPIX_META_STRING("sharedLibraryFiles"), ref<link::java::array<java::lang::String>>>(v); }
inline ref<java::lang::String> ApplicationInfo::sourceDir() { return get_field<SCAPIX_META_STRING("sourceDir"), ref<java::lang::String>>(); }
inline void ApplicationInfo::sourceDir(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("sourceDir"), ref<java::lang::String>>(v); }
inline ref<link::java::array<java::lang::String>> ApplicationInfo::splitNames() { return get_field<SCAPIX_META_STRING("splitNames"), ref<link::java::array<java::lang::String>>>(); }
inline void ApplicationInfo::splitNames(ref<link::java::array<java::lang::String>> v) { set_field<SCAPIX_META_STRING("splitNames"), ref<link::java::array<java::lang::String>>>(v); }
inline ref<link::java::array<java::lang::String>> ApplicationInfo::splitPublicSourceDirs() { return get_field<SCAPIX_META_STRING("splitPublicSourceDirs"), ref<link::java::array<java::lang::String>>>(); }
inline void ApplicationInfo::splitPublicSourceDirs(ref<link::java::array<java::lang::String>> v) { set_field<SCAPIX_META_STRING("splitPublicSourceDirs"), ref<link::java::array<java::lang::String>>>(v); }
inline ref<link::java::array<java::lang::String>> ApplicationInfo::splitSourceDirs() { return get_field<SCAPIX_META_STRING("splitSourceDirs"), ref<link::java::array<java::lang::String>>>(); }
inline void ApplicationInfo::splitSourceDirs(ref<link::java::array<java::lang::String>> v) { set_field<SCAPIX_META_STRING("splitSourceDirs"), ref<link::java::array<java::lang::String>>>(v); }
inline ref<java::util::UUID> ApplicationInfo::storageUuid() { return get_field<SCAPIX_META_STRING("storageUuid"), ref<java::util::UUID>>(); }
inline void ApplicationInfo::storageUuid(ref<java::util::UUID> v) { set_field<SCAPIX_META_STRING("storageUuid"), ref<java::util::UUID>>(v); }
inline jint ApplicationInfo::targetSdkVersion() { return get_field<SCAPIX_META_STRING("targetSdkVersion"), jint>(); }
inline void ApplicationInfo::targetSdkVersion(jint v) { set_field<SCAPIX_META_STRING("targetSdkVersion"), jint>(v); }
inline ref<java::lang::String> ApplicationInfo::taskAffinity() { return get_field<SCAPIX_META_STRING("taskAffinity"), ref<java::lang::String>>(); }
inline void ApplicationInfo::taskAffinity(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("taskAffinity"), ref<java::lang::String>>(v); }
inline jint ApplicationInfo::theme() { return get_field<SCAPIX_META_STRING("theme"), jint>(); }
inline void ApplicationInfo::theme(jint v) { set_field<SCAPIX_META_STRING("theme"), jint>(v); }
inline jint ApplicationInfo::uiOptions() { return get_field<SCAPIX_META_STRING("uiOptions"), jint>(); }
inline void ApplicationInfo::uiOptions(jint v) { set_field<SCAPIX_META_STRING("uiOptions"), jint>(v); }
inline jint ApplicationInfo::uid() { return get_field<SCAPIX_META_STRING("uid"), jint>(); }
inline void ApplicationInfo::uid(jint v) { set_field<SCAPIX_META_STRING("uid"), jint>(v); }
inline ref<ApplicationInfo> ApplicationInfo::new_object() { return base_::new_object(); }
inline ref<ApplicationInfo> ApplicationInfo::new_object(ref<android::content::pm::ApplicationInfo> orig) { return base_::new_object(orig); }
inline ref<java::lang::CharSequence> ApplicationInfo::getCategoryTitle(ref<android::content::Context> context, jint category) { return call_static_method<SCAPIX_META_STRING("getCategoryTitle"), ref<java::lang::CharSequence>>(context, category); }
inline void ApplicationInfo::dump(ref<android::util::Printer> pw, ref<java::lang::String> prefix) { return call_method<SCAPIX_META_STRING("dump"), void>(pw, prefix); }
inline ref<java::lang::String> ApplicationInfo::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint ApplicationInfo::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void ApplicationInfo::writeToParcel(ref<android::os::Parcel> dest, jint parcelableFlags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, parcelableFlags); }
inline ref<java::lang::CharSequence> ApplicationInfo::loadDescription(ref<android::content::pm::PackageManager> pm) { return call_method<SCAPIX_META_STRING("loadDescription"), ref<java::lang::CharSequence>>(pm); }
inline jboolean ApplicationInfo::isVirtualPreload() { return call_method<SCAPIX_META_STRING("isVirtualPreload"), jboolean>(); }

} // namespace android::content::pm
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_PM_APPLICATIONINFO_H
