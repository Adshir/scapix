// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/content/pm/ComponentInfo.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_CONTENT_PM_PROVIDERINFO_H
#define SCAPIX_ANDROID_CONTENT_PM_PROVIDERINFO_H

namespace scapix::java_api {

namespace android::content::pm { class PathPermission; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::os { class PatternMatcher; }
namespace android::util { class Printer; }
namespace java::lang { class String; }

namespace android::content::pm {

class ProviderInfo : public object_base<SCAPIX_META_STRING("android/content/pm/ProviderInfo"),
	android::content::pm::ComponentInfo,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint FLAG_SINGLE_USER_();
	ref<java::lang::String> authority();
	void authority(ref<java::lang::String>);
	jint flags();
	void flags(jint);
	jboolean grantUriPermissions();
	void grantUriPermissions(jboolean);
	jint initOrder();
	void initOrder(jint);
	jboolean isSyncable();
	void isSyncable(jboolean);
	jboolean multiprocess();
	void multiprocess(jboolean);
	ref<link::java::array<android::content::pm::PathPermission>> pathPermissions();
	void pathPermissions(ref<link::java::array<android::content::pm::PathPermission>>);
	ref<java::lang::String> readPermission();
	void readPermission(ref<java::lang::String>);
	ref<link::java::array<android::os::PatternMatcher>> uriPermissionPatterns();
	void uriPermissionPatterns(ref<link::java::array<android::os::PatternMatcher>>);
	ref<java::lang::String> writePermission();
	void writePermission(ref<java::lang::String>);

	static ref<ProviderInfo> new_object();
	static ref<ProviderInfo> new_object(ref<android::content::pm::ProviderInfo> orig);
	void dump(ref<android::util::Printer> pw, ref<java::lang::String> prefix);
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint parcelableFlags);
	ref<java::lang::String> toString();

protected:

	ProviderInfo(handle_type h) : base_(h) {}

};

} // namespace android::content::pm
} // namespace scapix::java_api

#include <scapix/java_api/android/content/pm/PathPermission.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/os/PatternMatcher.h>
#include <scapix/java_api/android/util/Printer.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::content::pm {

inline ref<android::os::Parcelable_Creator> ProviderInfo::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint ProviderInfo::FLAG_SINGLE_USER_() { return get_static_field<SCAPIX_META_STRING("FLAG_SINGLE_USER"), jint>(); }
inline ref<java::lang::String> ProviderInfo::authority() { return get_field<SCAPIX_META_STRING("authority"), ref<java::lang::String>>(); }
inline void ProviderInfo::authority(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("authority"), ref<java::lang::String>>(v); }
inline jint ProviderInfo::flags() { return get_field<SCAPIX_META_STRING("flags"), jint>(); }
inline void ProviderInfo::flags(jint v) { set_field<SCAPIX_META_STRING("flags"), jint>(v); }
inline jboolean ProviderInfo::grantUriPermissions() { return get_field<SCAPIX_META_STRING("grantUriPermissions"), jboolean>(); }
inline void ProviderInfo::grantUriPermissions(jboolean v) { set_field<SCAPIX_META_STRING("grantUriPermissions"), jboolean>(v); }
inline jint ProviderInfo::initOrder() { return get_field<SCAPIX_META_STRING("initOrder"), jint>(); }
inline void ProviderInfo::initOrder(jint v) { set_field<SCAPIX_META_STRING("initOrder"), jint>(v); }
inline jboolean ProviderInfo::isSyncable() { return get_field<SCAPIX_META_STRING("isSyncable"), jboolean>(); }
inline void ProviderInfo::isSyncable(jboolean v) { set_field<SCAPIX_META_STRING("isSyncable"), jboolean>(v); }
inline jboolean ProviderInfo::multiprocess() { return get_field<SCAPIX_META_STRING("multiprocess"), jboolean>(); }
inline void ProviderInfo::multiprocess(jboolean v) { set_field<SCAPIX_META_STRING("multiprocess"), jboolean>(v); }
inline ref<link::java::array<android::content::pm::PathPermission>> ProviderInfo::pathPermissions() { return get_field<SCAPIX_META_STRING("pathPermissions"), ref<link::java::array<android::content::pm::PathPermission>>>(); }
inline void ProviderInfo::pathPermissions(ref<link::java::array<android::content::pm::PathPermission>> v) { set_field<SCAPIX_META_STRING("pathPermissions"), ref<link::java::array<android::content::pm::PathPermission>>>(v); }
inline ref<java::lang::String> ProviderInfo::readPermission() { return get_field<SCAPIX_META_STRING("readPermission"), ref<java::lang::String>>(); }
inline void ProviderInfo::readPermission(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("readPermission"), ref<java::lang::String>>(v); }
inline ref<link::java::array<android::os::PatternMatcher>> ProviderInfo::uriPermissionPatterns() { return get_field<SCAPIX_META_STRING("uriPermissionPatterns"), ref<link::java::array<android::os::PatternMatcher>>>(); }
inline void ProviderInfo::uriPermissionPatterns(ref<link::java::array<android::os::PatternMatcher>> v) { set_field<SCAPIX_META_STRING("uriPermissionPatterns"), ref<link::java::array<android::os::PatternMatcher>>>(v); }
inline ref<java::lang::String> ProviderInfo::writePermission() { return get_field<SCAPIX_META_STRING("writePermission"), ref<java::lang::String>>(); }
inline void ProviderInfo::writePermission(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("writePermission"), ref<java::lang::String>>(v); }
inline ref<ProviderInfo> ProviderInfo::new_object() { return base_::new_object(); }
inline ref<ProviderInfo> ProviderInfo::new_object(ref<android::content::pm::ProviderInfo> orig) { return base_::new_object(orig); }
inline void ProviderInfo::dump(ref<android::util::Printer> pw, ref<java::lang::String> prefix) { return call_method<SCAPIX_META_STRING("dump"), void>(pw, prefix); }
inline jint ProviderInfo::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void ProviderInfo::writeToParcel(ref<android::os::Parcel> out, jint parcelableFlags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, parcelableFlags); }
inline ref<java::lang::String> ProviderInfo::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::content::pm
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_PM_PROVIDERINFO_H
