// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_CONTENT_PM_RESOLVEINFO_H
#define SCAPIX_ANDROID_CONTENT_PM_RESOLVEINFO_H

namespace scapix::java_api {

namespace android::content { class IntentFilter; }
namespace android::content::pm { class ActivityInfo; }
namespace android::content::pm { class PackageManager; }
namespace android::content::pm { class ProviderInfo; }
namespace android::content::pm { class ServiceInfo; }
namespace android::graphics::drawable { class Drawable; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::util { class Printer; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace android::content::pm { class ResolveInfo_DisplayNameComparator; }

namespace android::content::pm {

class ResolveInfo : public object_base<SCAPIX_META_STRING("android/content/pm/ResolveInfo"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using DisplayNameComparator = ResolveInfo_DisplayNameComparator;

	static ref<android::os::Parcelable_Creator> CREATOR_();
	ref<android::content::pm::ActivityInfo> activityInfo();
	void activityInfo(ref<android::content::pm::ActivityInfo>);
	ref<android::content::IntentFilter> filter();
	void filter(ref<android::content::IntentFilter>);
	jint icon();
	void icon(jint);
	jboolean isDefault();
	void isDefault(jboolean);
	jboolean isInstantAppAvailable();
	void isInstantAppAvailable(jboolean);
	jint labelRes();
	void labelRes(jint);
	jint match();
	void match(jint);
	ref<java::lang::CharSequence> nonLocalizedLabel();
	void nonLocalizedLabel(ref<java::lang::CharSequence>);
	jint preferredOrder();
	void preferredOrder(jint);
	jint priority();
	void priority(jint);
	ref<android::content::pm::ProviderInfo> providerInfo();
	void providerInfo(ref<android::content::pm::ProviderInfo>);
	ref<java::lang::String> resolvePackageName();
	void resolvePackageName(ref<java::lang::String>);
	ref<android::content::pm::ServiceInfo> serviceInfo();
	void serviceInfo(ref<android::content::pm::ServiceInfo>);
	jint specificIndex();
	void specificIndex(jint);

	static ref<ResolveInfo> new_object();
	static ref<ResolveInfo> new_object(ref<android::content::pm::ResolveInfo> orig);
	ref<java::lang::CharSequence> loadLabel(ref<android::content::pm::PackageManager> pm);
	ref<android::graphics::drawable::Drawable> loadIcon(ref<android::content::pm::PackageManager> pm);
	jint getIconResource();
	void dump(ref<android::util::Printer> pw, ref<java::lang::String> prefix);
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint parcelableFlags);

protected:

	ResolveInfo(handle_type h) : base_(h) {}

};

} // namespace android::content::pm
} // namespace scapix::java_api

#include <scapix/java_api/android/content/IntentFilter.h>
#include <scapix/java_api/android/content/pm/ActivityInfo.h>
#include <scapix/java_api/android/content/pm/PackageManager.h>
#include <scapix/java_api/android/content/pm/ProviderInfo.h>
#include <scapix/java_api/android/content/pm/ServiceInfo.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/util/Printer.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::content::pm {

inline ref<android::os::Parcelable_Creator> ResolveInfo::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<android::content::pm::ActivityInfo> ResolveInfo::activityInfo() { return get_field<SCAPIX_META_STRING("activityInfo"), ref<android::content::pm::ActivityInfo>>(); }
inline void ResolveInfo::activityInfo(ref<android::content::pm::ActivityInfo> v) { set_field<SCAPIX_META_STRING("activityInfo"), ref<android::content::pm::ActivityInfo>>(v); }
inline ref<android::content::IntentFilter> ResolveInfo::filter() { return get_field<SCAPIX_META_STRING("filter"), ref<android::content::IntentFilter>>(); }
inline void ResolveInfo::filter(ref<android::content::IntentFilter> v) { set_field<SCAPIX_META_STRING("filter"), ref<android::content::IntentFilter>>(v); }
inline jint ResolveInfo::icon() { return get_field<SCAPIX_META_STRING("icon"), jint>(); }
inline void ResolveInfo::icon(jint v) { set_field<SCAPIX_META_STRING("icon"), jint>(v); }
inline jboolean ResolveInfo::isDefault() { return get_field<SCAPIX_META_STRING("isDefault"), jboolean>(); }
inline void ResolveInfo::isDefault(jboolean v) { set_field<SCAPIX_META_STRING("isDefault"), jboolean>(v); }
inline jboolean ResolveInfo::isInstantAppAvailable() { return get_field<SCAPIX_META_STRING("isInstantAppAvailable"), jboolean>(); }
inline void ResolveInfo::isInstantAppAvailable(jboolean v) { set_field<SCAPIX_META_STRING("isInstantAppAvailable"), jboolean>(v); }
inline jint ResolveInfo::labelRes() { return get_field<SCAPIX_META_STRING("labelRes"), jint>(); }
inline void ResolveInfo::labelRes(jint v) { set_field<SCAPIX_META_STRING("labelRes"), jint>(v); }
inline jint ResolveInfo::match() { return get_field<SCAPIX_META_STRING("match"), jint>(); }
inline void ResolveInfo::match(jint v) { set_field<SCAPIX_META_STRING("match"), jint>(v); }
inline ref<java::lang::CharSequence> ResolveInfo::nonLocalizedLabel() { return get_field<SCAPIX_META_STRING("nonLocalizedLabel"), ref<java::lang::CharSequence>>(); }
inline void ResolveInfo::nonLocalizedLabel(ref<java::lang::CharSequence> v) { set_field<SCAPIX_META_STRING("nonLocalizedLabel"), ref<java::lang::CharSequence>>(v); }
inline jint ResolveInfo::preferredOrder() { return get_field<SCAPIX_META_STRING("preferredOrder"), jint>(); }
inline void ResolveInfo::preferredOrder(jint v) { set_field<SCAPIX_META_STRING("preferredOrder"), jint>(v); }
inline jint ResolveInfo::priority() { return get_field<SCAPIX_META_STRING("priority"), jint>(); }
inline void ResolveInfo::priority(jint v) { set_field<SCAPIX_META_STRING("priority"), jint>(v); }
inline ref<android::content::pm::ProviderInfo> ResolveInfo::providerInfo() { return get_field<SCAPIX_META_STRING("providerInfo"), ref<android::content::pm::ProviderInfo>>(); }
inline void ResolveInfo::providerInfo(ref<android::content::pm::ProviderInfo> v) { set_field<SCAPIX_META_STRING("providerInfo"), ref<android::content::pm::ProviderInfo>>(v); }
inline ref<java::lang::String> ResolveInfo::resolvePackageName() { return get_field<SCAPIX_META_STRING("resolvePackageName"), ref<java::lang::String>>(); }
inline void ResolveInfo::resolvePackageName(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("resolvePackageName"), ref<java::lang::String>>(v); }
inline ref<android::content::pm::ServiceInfo> ResolveInfo::serviceInfo() { return get_field<SCAPIX_META_STRING("serviceInfo"), ref<android::content::pm::ServiceInfo>>(); }
inline void ResolveInfo::serviceInfo(ref<android::content::pm::ServiceInfo> v) { set_field<SCAPIX_META_STRING("serviceInfo"), ref<android::content::pm::ServiceInfo>>(v); }
inline jint ResolveInfo::specificIndex() { return get_field<SCAPIX_META_STRING("specificIndex"), jint>(); }
inline void ResolveInfo::specificIndex(jint v) { set_field<SCAPIX_META_STRING("specificIndex"), jint>(v); }
inline ref<ResolveInfo> ResolveInfo::new_object() { return base_::new_object(); }
inline ref<ResolveInfo> ResolveInfo::new_object(ref<android::content::pm::ResolveInfo> orig) { return base_::new_object(orig); }
inline ref<java::lang::CharSequence> ResolveInfo::loadLabel(ref<android::content::pm::PackageManager> pm) { return call_method<SCAPIX_META_STRING("loadLabel"), ref<java::lang::CharSequence>>(pm); }
inline ref<android::graphics::drawable::Drawable> ResolveInfo::loadIcon(ref<android::content::pm::PackageManager> pm) { return call_method<SCAPIX_META_STRING("loadIcon"), ref<android::graphics::drawable::Drawable>>(pm); }
inline jint ResolveInfo::getIconResource() { return call_method<SCAPIX_META_STRING("getIconResource"), jint>(); }
inline void ResolveInfo::dump(ref<android::util::Printer> pw, ref<java::lang::String> prefix) { return call_method<SCAPIX_META_STRING("dump"), void>(pw, prefix); }
inline ref<java::lang::String> ResolveInfo::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint ResolveInfo::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void ResolveInfo::writeToParcel(ref<android::os::Parcel> dest, jint parcelableFlags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, parcelableFlags); }

} // namespace android::content::pm
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_PM_RESOLVEINFO_H
