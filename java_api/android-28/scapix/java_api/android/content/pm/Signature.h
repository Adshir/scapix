// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_CONTENT_PM_SIGNATURE_H
#define SCAPIX_ANDROID_CONTENT_PM_SIGNATURE_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::content::pm {

class Signature : public object_base<SCAPIX_META_STRING("android/content/pm/Signature"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();

	static ref<Signature> new_object(ref<link::java::array<jbyte>> signature);
	static ref<Signature> new_object(ref<java::lang::String> text);
	ref<link::java::array<jchar>> toChars();
	ref<link::java::array<jchar>> toChars(ref<link::java::array<jchar>> existingArray, ref<link::java::array<jint>> outLen);
	ref<java::lang::String> toCharsString();
	ref<link::java::array<jbyte>> toByteArray();
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint parcelableFlags);

protected:

	Signature(handle_type h) : base_(h) {}

};

} // namespace android::content::pm
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::content::pm {

inline ref<android::os::Parcelable_Creator> Signature::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<Signature> Signature::new_object(ref<link::java::array<jbyte>> signature) { return base_::new_object(signature); }
inline ref<Signature> Signature::new_object(ref<java::lang::String> text) { return base_::new_object(text); }
inline ref<link::java::array<jchar>> Signature::toChars() { return call_method<SCAPIX_META_STRING("toChars"), ref<link::java::array<jchar>>>(); }
inline ref<link::java::array<jchar>> Signature::toChars(ref<link::java::array<jchar>> existingArray, ref<link::java::array<jint>> outLen) { return call_method<SCAPIX_META_STRING("toChars"), ref<link::java::array<jchar>>>(existingArray, outLen); }
inline ref<java::lang::String> Signature::toCharsString() { return call_method<SCAPIX_META_STRING("toCharsString"), ref<java::lang::String>>(); }
inline ref<link::java::array<jbyte>> Signature::toByteArray() { return call_method<SCAPIX_META_STRING("toByteArray"), ref<link::java::array<jbyte>>>(); }
inline jboolean Signature::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint Signature::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint Signature::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void Signature::writeToParcel(ref<android::os::Parcel> dest, jint parcelableFlags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, parcelableFlags); }

} // namespace android::content::pm
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_PM_SIGNATURE_H
