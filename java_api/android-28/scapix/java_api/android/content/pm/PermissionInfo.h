// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/content/pm/PackageItemInfo.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_CONTENT_PM_PERMISSIONINFO_H
#define SCAPIX_ANDROID_CONTENT_PM_PERMISSIONINFO_H

namespace scapix::java_api {

namespace android::content::pm { class PackageManager; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::content::pm {

class PermissionInfo : public object_base<SCAPIX_META_STRING("android/content/pm/PermissionInfo"),
	android::content::pm::PackageItemInfo,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint FLAG_COSTS_MONEY_();
	static jint FLAG_INSTALLED_();
	static jint PROTECTION_DANGEROUS_();
	static jint PROTECTION_FLAG_APPOP_();
	static jint PROTECTION_FLAG_DEVELOPMENT_();
	static jint PROTECTION_FLAG_INSTALLER_();
	static jint PROTECTION_FLAG_INSTANT_();
	static jint PROTECTION_FLAG_PRE23_();
	static jint PROTECTION_FLAG_PREINSTALLED_();
	static jint PROTECTION_FLAG_PRIVILEGED_();
	static jint PROTECTION_FLAG_RUNTIME_ONLY_();
	static jint PROTECTION_FLAG_SETUP_();
	static jint PROTECTION_FLAG_SYSTEM_();
	static jint PROTECTION_FLAG_VERIFIER_();
	static jint PROTECTION_MASK_BASE_();
	static jint PROTECTION_MASK_FLAGS_();
	static jint PROTECTION_NORMAL_();
	static jint PROTECTION_SIGNATURE_();
	static jint PROTECTION_SIGNATURE_OR_SYSTEM_();
	jint descriptionRes();
	void descriptionRes(jint);
	jint flags();
	void flags(jint);
	ref<java::lang::String> group();
	void group(ref<java::lang::String>);
	ref<java::lang::CharSequence> nonLocalizedDescription();
	void nonLocalizedDescription(ref<java::lang::CharSequence>);
	jint protectionLevel();
	void protectionLevel(jint);

	static ref<PermissionInfo> new_object();
	static ref<PermissionInfo> new_object(ref<android::content::pm::PermissionInfo> orig);
	ref<java::lang::CharSequence> loadDescription(ref<android::content::pm::PackageManager> pm);
	jint getProtection();
	jint getProtectionFlags();
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint parcelableFlags);

protected:

	PermissionInfo(handle_type h) : base_(h) {}

};

} // namespace android::content::pm
} // namespace scapix::java_api

#include <scapix/java_api/android/content/pm/PackageManager.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::content::pm {

inline ref<android::os::Parcelable_Creator> PermissionInfo::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint PermissionInfo::FLAG_COSTS_MONEY_() { return get_static_field<SCAPIX_META_STRING("FLAG_COSTS_MONEY"), jint>(); }
inline jint PermissionInfo::FLAG_INSTALLED_() { return get_static_field<SCAPIX_META_STRING("FLAG_INSTALLED"), jint>(); }
inline jint PermissionInfo::PROTECTION_DANGEROUS_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_DANGEROUS"), jint>(); }
inline jint PermissionInfo::PROTECTION_FLAG_APPOP_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_FLAG_APPOP"), jint>(); }
inline jint PermissionInfo::PROTECTION_FLAG_DEVELOPMENT_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_FLAG_DEVELOPMENT"), jint>(); }
inline jint PermissionInfo::PROTECTION_FLAG_INSTALLER_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_FLAG_INSTALLER"), jint>(); }
inline jint PermissionInfo::PROTECTION_FLAG_INSTANT_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_FLAG_INSTANT"), jint>(); }
inline jint PermissionInfo::PROTECTION_FLAG_PRE23_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_FLAG_PRE23"), jint>(); }
inline jint PermissionInfo::PROTECTION_FLAG_PREINSTALLED_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_FLAG_PREINSTALLED"), jint>(); }
inline jint PermissionInfo::PROTECTION_FLAG_PRIVILEGED_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_FLAG_PRIVILEGED"), jint>(); }
inline jint PermissionInfo::PROTECTION_FLAG_RUNTIME_ONLY_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_FLAG_RUNTIME_ONLY"), jint>(); }
inline jint PermissionInfo::PROTECTION_FLAG_SETUP_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_FLAG_SETUP"), jint>(); }
inline jint PermissionInfo::PROTECTION_FLAG_SYSTEM_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_FLAG_SYSTEM"), jint>(); }
inline jint PermissionInfo::PROTECTION_FLAG_VERIFIER_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_FLAG_VERIFIER"), jint>(); }
inline jint PermissionInfo::PROTECTION_MASK_BASE_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_MASK_BASE"), jint>(); }
inline jint PermissionInfo::PROTECTION_MASK_FLAGS_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_MASK_FLAGS"), jint>(); }
inline jint PermissionInfo::PROTECTION_NORMAL_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_NORMAL"), jint>(); }
inline jint PermissionInfo::PROTECTION_SIGNATURE_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_SIGNATURE"), jint>(); }
inline jint PermissionInfo::PROTECTION_SIGNATURE_OR_SYSTEM_() { return get_static_field<SCAPIX_META_STRING("PROTECTION_SIGNATURE_OR_SYSTEM"), jint>(); }
inline jint PermissionInfo::descriptionRes() { return get_field<SCAPIX_META_STRING("descriptionRes"), jint>(); }
inline void PermissionInfo::descriptionRes(jint v) { set_field<SCAPIX_META_STRING("descriptionRes"), jint>(v); }
inline jint PermissionInfo::flags() { return get_field<SCAPIX_META_STRING("flags"), jint>(); }
inline void PermissionInfo::flags(jint v) { set_field<SCAPIX_META_STRING("flags"), jint>(v); }
inline ref<java::lang::String> PermissionInfo::group() { return get_field<SCAPIX_META_STRING("group"), ref<java::lang::String>>(); }
inline void PermissionInfo::group(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("group"), ref<java::lang::String>>(v); }
inline ref<java::lang::CharSequence> PermissionInfo::nonLocalizedDescription() { return get_field<SCAPIX_META_STRING("nonLocalizedDescription"), ref<java::lang::CharSequence>>(); }
inline void PermissionInfo::nonLocalizedDescription(ref<java::lang::CharSequence> v) { set_field<SCAPIX_META_STRING("nonLocalizedDescription"), ref<java::lang::CharSequence>>(v); }
inline jint PermissionInfo::protectionLevel() { return get_field<SCAPIX_META_STRING("protectionLevel"), jint>(); }
inline void PermissionInfo::protectionLevel(jint v) { set_field<SCAPIX_META_STRING("protectionLevel"), jint>(v); }
inline ref<PermissionInfo> PermissionInfo::new_object() { return base_::new_object(); }
inline ref<PermissionInfo> PermissionInfo::new_object(ref<android::content::pm::PermissionInfo> orig) { return base_::new_object(orig); }
inline ref<java::lang::CharSequence> PermissionInfo::loadDescription(ref<android::content::pm::PackageManager> pm) { return call_method<SCAPIX_META_STRING("loadDescription"), ref<java::lang::CharSequence>>(pm); }
inline jint PermissionInfo::getProtection() { return call_method<SCAPIX_META_STRING("getProtection"), jint>(); }
inline jint PermissionInfo::getProtectionFlags() { return call_method<SCAPIX_META_STRING("getProtectionFlags"), jint>(); }
inline ref<java::lang::String> PermissionInfo::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint PermissionInfo::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void PermissionInfo::writeToParcel(ref<android::os::Parcel> dest, jint parcelableFlags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, parcelableFlags); }

} // namespace android::content::pm
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_PM_PERMISSIONINFO_H
