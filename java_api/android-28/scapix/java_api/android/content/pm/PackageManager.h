// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_CONTENT_PM_PACKAGEMANAGER_H
#define SCAPIX_ANDROID_CONTENT_PM_PACKAGEMANAGER_H

namespace scapix::java_api {

namespace android::content { class ComponentName; }
namespace android::content { class Intent; }
namespace android::content { class IntentFilter; }
namespace android::content::pm { class ActivityInfo; }
namespace android::content::pm { class ApplicationInfo; }
namespace android::content::pm { class ChangedPackages; }
namespace android::content::pm { class FeatureInfo; }
namespace android::content::pm { class InstrumentationInfo; }
namespace android::content::pm { class PackageInfo; }
namespace android::content::pm { class PackageInstaller; }
namespace android::content::pm { class PermissionGroupInfo; }
namespace android::content::pm { class PermissionInfo; }
namespace android::content::pm { class ProviderInfo; }
namespace android::content::pm { class ResolveInfo; }
namespace android::content::pm { class ServiceInfo; }
namespace android::content::pm { class VersionedPackage; }
namespace android::content::res { class Resources; }
namespace android::content::res { class XmlResourceParser; }
namespace android::graphics { class Rect; }
namespace android::graphics::drawable { class Drawable; }
namespace android::os { class Bundle; }
namespace android::os { class UserHandle; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::util { class List; }
namespace android::content::pm { class PackageManager_NameNotFoundException; }

namespace android::content::pm {

class PackageManager : public object_base<SCAPIX_META_STRING("android/content/pm/PackageManager"),
	java::lang::Object>
{
public:

	using NameNotFoundException = PackageManager_NameNotFoundException;

	static jint CERT_INPUT_RAW_X509_();
	static jint CERT_INPUT_SHA256_();
	static jint COMPONENT_ENABLED_STATE_DEFAULT_();
	static jint COMPONENT_ENABLED_STATE_DISABLED_();
	static jint COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED_();
	static jint COMPONENT_ENABLED_STATE_DISABLED_USER_();
	static jint COMPONENT_ENABLED_STATE_ENABLED_();
	static jint DONT_KILL_APP_();
	static ref<java::lang::String> EXTRA_VERIFICATION_ID_();
	static ref<java::lang::String> EXTRA_VERIFICATION_RESULT_();
	static ref<java::lang::String> FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS_();
	static ref<java::lang::String> FEATURE_APP_WIDGETS_();
	static ref<java::lang::String> FEATURE_AUDIO_LOW_LATENCY_();
	static ref<java::lang::String> FEATURE_AUDIO_OUTPUT_();
	static ref<java::lang::String> FEATURE_AUDIO_PRO_();
	static ref<java::lang::String> FEATURE_AUTOFILL_();
	static ref<java::lang::String> FEATURE_AUTOMOTIVE_();
	static ref<java::lang::String> FEATURE_BACKUP_();
	static ref<java::lang::String> FEATURE_BLUETOOTH_();
	static ref<java::lang::String> FEATURE_BLUETOOTH_LE_();
	static ref<java::lang::String> FEATURE_CAMERA_();
	static ref<java::lang::String> FEATURE_CAMERA_ANY_();
	static ref<java::lang::String> FEATURE_CAMERA_AR_();
	static ref<java::lang::String> FEATURE_CAMERA_AUTOFOCUS_();
	static ref<java::lang::String> FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING_();
	static ref<java::lang::String> FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR_();
	static ref<java::lang::String> FEATURE_CAMERA_CAPABILITY_RAW_();
	static ref<java::lang::String> FEATURE_CAMERA_EXTERNAL_();
	static ref<java::lang::String> FEATURE_CAMERA_FLASH_();
	static ref<java::lang::String> FEATURE_CAMERA_FRONT_();
	static ref<java::lang::String> FEATURE_CAMERA_LEVEL_FULL_();
	static ref<java::lang::String> FEATURE_CANT_SAVE_STATE_();
	static ref<java::lang::String> FEATURE_COMPANION_DEVICE_SETUP_();
	static ref<java::lang::String> FEATURE_CONNECTION_SERVICE_();
	static ref<java::lang::String> FEATURE_CONSUMER_IR_();
	static ref<java::lang::String> FEATURE_DEVICE_ADMIN_();
	static ref<java::lang::String> FEATURE_EMBEDDED_();
	static ref<java::lang::String> FEATURE_ETHERNET_();
	static ref<java::lang::String> FEATURE_FAKETOUCH_();
	static ref<java::lang::String> FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT_();
	static ref<java::lang::String> FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND_();
	static ref<java::lang::String> FEATURE_FINGERPRINT_();
	static ref<java::lang::String> FEATURE_FREEFORM_WINDOW_MANAGEMENT_();
	static ref<java::lang::String> FEATURE_GAMEPAD_();
	static ref<java::lang::String> FEATURE_HIFI_SENSORS_();
	static ref<java::lang::String> FEATURE_HOME_SCREEN_();
	static ref<java::lang::String> FEATURE_INPUT_METHODS_();
	static ref<java::lang::String> FEATURE_LEANBACK_();
	static ref<java::lang::String> FEATURE_LEANBACK_ONLY_();
	static ref<java::lang::String> FEATURE_LIVE_TV_();
	static ref<java::lang::String> FEATURE_LIVE_WALLPAPER_();
	static ref<java::lang::String> FEATURE_LOCATION_();
	static ref<java::lang::String> FEATURE_LOCATION_GPS_();
	static ref<java::lang::String> FEATURE_LOCATION_NETWORK_();
	static ref<java::lang::String> FEATURE_MANAGED_USERS_();
	static ref<java::lang::String> FEATURE_MICROPHONE_();
	static ref<java::lang::String> FEATURE_MIDI_();
	static ref<java::lang::String> FEATURE_NFC_();
	static ref<java::lang::String> FEATURE_NFC_HOST_CARD_EMULATION_();
	static ref<java::lang::String> FEATURE_NFC_HOST_CARD_EMULATION_NFCF_();
	static ref<java::lang::String> FEATURE_OPENGLES_EXTENSION_PACK_();
	static ref<java::lang::String> FEATURE_PC_();
	static ref<java::lang::String> FEATURE_PICTURE_IN_PICTURE_();
	static ref<java::lang::String> FEATURE_PRINTING_();
	static ref<java::lang::String> FEATURE_RAM_LOW_();
	static ref<java::lang::String> FEATURE_RAM_NORMAL_();
	static ref<java::lang::String> FEATURE_SCREEN_LANDSCAPE_();
	static ref<java::lang::String> FEATURE_SCREEN_PORTRAIT_();
	static ref<java::lang::String> FEATURE_SECURELY_REMOVES_USERS_();
	static ref<java::lang::String> FEATURE_SENSOR_ACCELEROMETER_();
	static ref<java::lang::String> FEATURE_SENSOR_AMBIENT_TEMPERATURE_();
	static ref<java::lang::String> FEATURE_SENSOR_BAROMETER_();
	static ref<java::lang::String> FEATURE_SENSOR_COMPASS_();
	static ref<java::lang::String> FEATURE_SENSOR_GYROSCOPE_();
	static ref<java::lang::String> FEATURE_SENSOR_HEART_RATE_();
	static ref<java::lang::String> FEATURE_SENSOR_HEART_RATE_ECG_();
	static ref<java::lang::String> FEATURE_SENSOR_LIGHT_();
	static ref<java::lang::String> FEATURE_SENSOR_PROXIMITY_();
	static ref<java::lang::String> FEATURE_SENSOR_RELATIVE_HUMIDITY_();
	static ref<java::lang::String> FEATURE_SENSOR_STEP_COUNTER_();
	static ref<java::lang::String> FEATURE_SENSOR_STEP_DETECTOR_();
	static ref<java::lang::String> FEATURE_SIP_();
	static ref<java::lang::String> FEATURE_SIP_VOIP_();
	static ref<java::lang::String> FEATURE_STRONGBOX_KEYSTORE_();
	static ref<java::lang::String> FEATURE_TELEPHONY_();
	static ref<java::lang::String> FEATURE_TELEPHONY_CDMA_();
	static ref<java::lang::String> FEATURE_TELEPHONY_EUICC_();
	static ref<java::lang::String> FEATURE_TELEPHONY_GSM_();
	static ref<java::lang::String> FEATURE_TELEPHONY_MBMS_();
	static ref<java::lang::String> FEATURE_TELEVISION_();
	static ref<java::lang::String> FEATURE_TOUCHSCREEN_();
	static ref<java::lang::String> FEATURE_TOUCHSCREEN_MULTITOUCH_();
	static ref<java::lang::String> FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT_();
	static ref<java::lang::String> FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND_();
	static ref<java::lang::String> FEATURE_USB_ACCESSORY_();
	static ref<java::lang::String> FEATURE_USB_HOST_();
	static ref<java::lang::String> FEATURE_VERIFIED_BOOT_();
	static ref<java::lang::String> FEATURE_VR_HEADTRACKING_();
	static ref<java::lang::String> FEATURE_VR_MODE_();
	static ref<java::lang::String> FEATURE_VR_MODE_HIGH_PERFORMANCE_();
	static ref<java::lang::String> FEATURE_VULKAN_HARDWARE_COMPUTE_();
	static ref<java::lang::String> FEATURE_VULKAN_HARDWARE_LEVEL_();
	static ref<java::lang::String> FEATURE_VULKAN_HARDWARE_VERSION_();
	static ref<java::lang::String> FEATURE_WATCH_();
	static ref<java::lang::String> FEATURE_WEBVIEW_();
	static ref<java::lang::String> FEATURE_WIFI_();
	static ref<java::lang::String> FEATURE_WIFI_AWARE_();
	static ref<java::lang::String> FEATURE_WIFI_DIRECT_();
	static ref<java::lang::String> FEATURE_WIFI_PASSPOINT_();
	static ref<java::lang::String> FEATURE_WIFI_RTT_();
	static jint GET_ACTIVITIES_();
	static jint GET_CONFIGURATIONS_();
	static jint GET_DISABLED_COMPONENTS_();
	static jint GET_DISABLED_UNTIL_USED_COMPONENTS_();
	static jint GET_GIDS_();
	static jint GET_INSTRUMENTATION_();
	static jint GET_INTENT_FILTERS_();
	static jint GET_META_DATA_();
	static jint GET_PERMISSIONS_();
	static jint GET_PROVIDERS_();
	static jint GET_RECEIVERS_();
	static jint GET_RESOLVED_FILTER_();
	static jint GET_SERVICES_();
	static jint GET_SHARED_LIBRARY_FILES_();
	static jint GET_SIGNATURES_();
	static jint GET_SIGNING_CERTIFICATES_();
	static jint GET_UNINSTALLED_PACKAGES_();
	static jint GET_URI_PERMISSION_PATTERNS_();
	static jint INSTALL_REASON_DEVICE_RESTORE_();
	static jint INSTALL_REASON_DEVICE_SETUP_();
	static jint INSTALL_REASON_POLICY_();
	static jint INSTALL_REASON_UNKNOWN_();
	static jint INSTALL_REASON_USER_();
	static jint MATCH_ALL_();
	static jint MATCH_DEFAULT_ONLY_();
	static jint MATCH_DIRECT_BOOT_AWARE_();
	static jint MATCH_DIRECT_BOOT_UNAWARE_();
	static jint MATCH_DISABLED_COMPONENTS_();
	static jint MATCH_DISABLED_UNTIL_USED_COMPONENTS_();
	static jint MATCH_SYSTEM_ONLY_();
	static jint MATCH_UNINSTALLED_PACKAGES_();
	static jlong MAXIMUM_VERIFICATION_TIMEOUT_();
	static jint PERMISSION_DENIED_();
	static jint PERMISSION_GRANTED_();
	static jint SIGNATURE_FIRST_NOT_SIGNED_();
	static jint SIGNATURE_MATCH_();
	static jint SIGNATURE_NEITHER_SIGNED_();
	static jint SIGNATURE_NO_MATCH_();
	static jint SIGNATURE_SECOND_NOT_SIGNED_();
	static jint SIGNATURE_UNKNOWN_PACKAGE_();
	static jint VERIFICATION_ALLOW_();
	static jint VERIFICATION_REJECT_();
	static jint VERSION_CODE_HIGHEST_();

	static ref<PackageManager> new_object();
	ref<android::content::pm::PackageInfo> getPackageInfo(ref<java::lang::String> p1, jint p2);
	ref<android::content::pm::PackageInfo> getPackageInfo(ref<android::content::pm::VersionedPackage> p1, jint p2);
	ref<link::java::array<java::lang::String>> currentToCanonicalPackageNames(ref<link::java::array<java::lang::String>> p1);
	ref<link::java::array<java::lang::String>> canonicalToCurrentPackageNames(ref<link::java::array<java::lang::String>> p1);
	ref<android::content::Intent> getLaunchIntentForPackage(ref<java::lang::String> p1);
	ref<android::content::Intent> getLeanbackLaunchIntentForPackage(ref<java::lang::String> p1);
	ref<link::java::array<jint>> getPackageGids(ref<java::lang::String> p1);
	ref<link::java::array<jint>> getPackageGids(ref<java::lang::String> p1, jint p2);
	jint getPackageUid(ref<java::lang::String> p1, jint p2);
	ref<android::content::pm::PermissionInfo> getPermissionInfo(ref<java::lang::String> p1, jint p2);
	ref<java::util::List> queryPermissionsByGroup(ref<java::lang::String> p1, jint p2);
	ref<android::content::pm::PermissionGroupInfo> getPermissionGroupInfo(ref<java::lang::String> p1, jint p2);
	ref<java::util::List> getAllPermissionGroups(jint p1);
	ref<android::content::pm::ApplicationInfo> getApplicationInfo(ref<java::lang::String> p1, jint p2);
	ref<android::content::pm::ActivityInfo> getActivityInfo(ref<android::content::ComponentName> p1, jint p2);
	ref<android::content::pm::ActivityInfo> getReceiverInfo(ref<android::content::ComponentName> p1, jint p2);
	ref<android::content::pm::ServiceInfo> getServiceInfo(ref<android::content::ComponentName> p1, jint p2);
	ref<android::content::pm::ProviderInfo> getProviderInfo(ref<android::content::ComponentName> p1, jint p2);
	ref<java::util::List> getInstalledPackages(jint p1);
	ref<java::util::List> getPackagesHoldingPermissions(ref<link::java::array<java::lang::String>> p1, jint p2);
	jint checkPermission(ref<java::lang::String> p1, ref<java::lang::String> p2);
	jboolean isPermissionRevokedByPolicy(ref<java::lang::String> p1, ref<java::lang::String> p2);
	jboolean addPermission(ref<android::content::pm::PermissionInfo> p1);
	jboolean addPermissionAsync(ref<android::content::pm::PermissionInfo> p1);
	void removePermission(ref<java::lang::String> p1);
	jint checkSignatures(ref<java::lang::String> p1, ref<java::lang::String> p2);
	jint checkSignatures(jint p1, jint p2);
	ref<link::java::array<java::lang::String>> getPackagesForUid(jint p1);
	ref<java::lang::String> getNameForUid(jint p1);
	ref<java::util::List> getInstalledApplications(jint p1);
	jboolean isInstantApp();
	jboolean isInstantApp(ref<java::lang::String> p1);
	jint getInstantAppCookieMaxBytes();
	ref<link::java::array<jbyte>> getInstantAppCookie();
	void clearInstantAppCookie();
	void updateInstantAppCookie(ref<link::java::array<jbyte>> p1);
	ref<link::java::array<java::lang::String>> getSystemSharedLibraryNames();
	ref<java::util::List> getSharedLibraries(jint p1);
	ref<android::content::pm::ChangedPackages> getChangedPackages(jint p1);
	ref<link::java::array<android::content::pm::FeatureInfo>> getSystemAvailableFeatures();
	jboolean hasSystemFeature(ref<java::lang::String> p1);
	jboolean hasSystemFeature(ref<java::lang::String> p1, jint p2);
	ref<android::content::pm::ResolveInfo> resolveActivity(ref<android::content::Intent> p1, jint p2);
	ref<java::util::List> queryIntentActivities(ref<android::content::Intent> p1, jint p2);
	ref<java::util::List> queryIntentActivityOptions(ref<android::content::ComponentName> p1, ref<link::java::array<android::content::Intent>> p2, ref<android::content::Intent> p3, jint p4);
	ref<java::util::List> queryBroadcastReceivers(ref<android::content::Intent> p1, jint p2);
	ref<android::content::pm::ResolveInfo> resolveService(ref<android::content::Intent> p1, jint p2);
	ref<java::util::List> queryIntentServices(ref<android::content::Intent> p1, jint p2);
	ref<java::util::List> queryIntentContentProviders(ref<android::content::Intent> p1, jint p2);
	ref<android::content::pm::ProviderInfo> resolveContentProvider(ref<java::lang::String> p1, jint p2);
	ref<java::util::List> queryContentProviders(ref<java::lang::String> p1, jint p2, jint p3);
	ref<android::content::pm::InstrumentationInfo> getInstrumentationInfo(ref<android::content::ComponentName> p1, jint p2);
	ref<java::util::List> queryInstrumentation(ref<java::lang::String> p1, jint p2);
	ref<android::graphics::drawable::Drawable> getDrawable(ref<java::lang::String> p1, jint p2, ref<android::content::pm::ApplicationInfo> p3);
	ref<android::graphics::drawable::Drawable> getActivityIcon(ref<android::content::ComponentName> p1);
	ref<android::graphics::drawable::Drawable> getActivityIcon(ref<android::content::Intent> p1);
	ref<android::graphics::drawable::Drawable> getActivityBanner(ref<android::content::ComponentName> p1);
	ref<android::graphics::drawable::Drawable> getActivityBanner(ref<android::content::Intent> p1);
	ref<android::graphics::drawable::Drawable> getDefaultActivityIcon();
	ref<android::graphics::drawable::Drawable> getApplicationIcon(ref<android::content::pm::ApplicationInfo> p1);
	ref<android::graphics::drawable::Drawable> getApplicationIcon(ref<java::lang::String> p1);
	ref<android::graphics::drawable::Drawable> getApplicationBanner(ref<android::content::pm::ApplicationInfo> p1);
	ref<android::graphics::drawable::Drawable> getApplicationBanner(ref<java::lang::String> p1);
	ref<android::graphics::drawable::Drawable> getActivityLogo(ref<android::content::ComponentName> p1);
	ref<android::graphics::drawable::Drawable> getActivityLogo(ref<android::content::Intent> p1);
	ref<android::graphics::drawable::Drawable> getApplicationLogo(ref<android::content::pm::ApplicationInfo> p1);
	ref<android::graphics::drawable::Drawable> getApplicationLogo(ref<java::lang::String> p1);
	ref<android::graphics::drawable::Drawable> getUserBadgedIcon(ref<android::graphics::drawable::Drawable> p1, ref<android::os::UserHandle> p2);
	ref<android::graphics::drawable::Drawable> getUserBadgedDrawableForDensity(ref<android::graphics::drawable::Drawable> p1, ref<android::os::UserHandle> p2, ref<android::graphics::Rect> p3, jint p4);
	ref<java::lang::CharSequence> getUserBadgedLabel(ref<java::lang::CharSequence> p1, ref<android::os::UserHandle> p2);
	ref<java::lang::CharSequence> getText(ref<java::lang::String> p1, jint p2, ref<android::content::pm::ApplicationInfo> p3);
	ref<android::content::res::XmlResourceParser> getXml(ref<java::lang::String> p1, jint p2, ref<android::content::pm::ApplicationInfo> p3);
	ref<java::lang::CharSequence> getApplicationLabel(ref<android::content::pm::ApplicationInfo> p1);
	ref<android::content::res::Resources> getResourcesForActivity(ref<android::content::ComponentName> p1);
	ref<android::content::res::Resources> getResourcesForApplication(ref<android::content::pm::ApplicationInfo> p1);
	ref<android::content::res::Resources> getResourcesForApplication(ref<java::lang::String> p1);
	ref<android::content::pm::PackageInfo> getPackageArchiveInfo(ref<java::lang::String> archiveFilePath, jint flags);
	void verifyPendingInstall(jint p1, jint p2);
	void extendVerificationTimeout(jint p1, jint p2, jlong p3);
	void setInstallerPackageName(ref<java::lang::String> p1, ref<java::lang::String> p2);
	ref<java::lang::String> getInstallerPackageName(ref<java::lang::String> p1);
	void addPackageToPreferred(ref<java::lang::String> p1);
	void removePackageFromPreferred(ref<java::lang::String> p1);
	ref<java::util::List> getPreferredPackages(jint p1);
	void addPreferredActivity(ref<android::content::IntentFilter> p1, jint p2, ref<link::java::array<android::content::ComponentName>> p3, ref<android::content::ComponentName> p4);
	void clearPackagePreferredActivities(ref<java::lang::String> p1);
	jint getPreferredActivities(ref<java::util::List> p1, ref<java::util::List> p2, ref<java::lang::String> p3);
	void setComponentEnabledSetting(ref<android::content::ComponentName> p1, jint p2, jint p3);
	jint getComponentEnabledSetting(ref<android::content::ComponentName> p1);
	void setApplicationEnabledSetting(ref<java::lang::String> p1, jint p2, jint p3);
	jint getApplicationEnabledSetting(ref<java::lang::String> p1);
	jboolean isSafeMode();
	jboolean isPackageSuspended();
	ref<android::os::Bundle> getSuspendedPackageAppExtras();
	void setApplicationCategoryHint(ref<java::lang::String> p1, jint p2);
	ref<android::content::pm::PackageInstaller> getPackageInstaller();
	jboolean canRequestPackageInstalls();
	jboolean hasSigningCertificate(ref<java::lang::String> packageName, ref<link::java::array<jbyte>> certificate, jint type);
	jboolean hasSigningCertificate(jint uid, ref<link::java::array<jbyte>> certificate, jint type);

protected:

	PackageManager(handle_type h) : base_(h) {}

};

} // namespace android::content::pm
} // namespace scapix::java_api

#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/IntentFilter.h>
#include <scapix/java_api/android/content/pm/ActivityInfo.h>
#include <scapix/java_api/android/content/pm/ApplicationInfo.h>
#include <scapix/java_api/android/content/pm/ChangedPackages.h>
#include <scapix/java_api/android/content/pm/FeatureInfo.h>
#include <scapix/java_api/android/content/pm/InstrumentationInfo.h>
#include <scapix/java_api/android/content/pm/PackageInfo.h>
#include <scapix/java_api/android/content/pm/PackageInstaller.h>
#include <scapix/java_api/android/content/pm/PermissionGroupInfo.h>
#include <scapix/java_api/android/content/pm/PermissionInfo.h>
#include <scapix/java_api/android/content/pm/ProviderInfo.h>
#include <scapix/java_api/android/content/pm/ResolveInfo.h>
#include <scapix/java_api/android/content/pm/ServiceInfo.h>
#include <scapix/java_api/android/content/pm/VersionedPackage.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/XmlResourceParser.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/UserHandle.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::content::pm {

inline jint PackageManager::CERT_INPUT_RAW_X509_() { return get_static_field<SCAPIX_META_STRING("CERT_INPUT_RAW_X509"), jint>(); }
inline jint PackageManager::CERT_INPUT_SHA256_() { return get_static_field<SCAPIX_META_STRING("CERT_INPUT_SHA256"), jint>(); }
inline jint PackageManager::COMPONENT_ENABLED_STATE_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("COMPONENT_ENABLED_STATE_DEFAULT"), jint>(); }
inline jint PackageManager::COMPONENT_ENABLED_STATE_DISABLED_() { return get_static_field<SCAPIX_META_STRING("COMPONENT_ENABLED_STATE_DISABLED"), jint>(); }
inline jint PackageManager::COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED_() { return get_static_field<SCAPIX_META_STRING("COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED"), jint>(); }
inline jint PackageManager::COMPONENT_ENABLED_STATE_DISABLED_USER_() { return get_static_field<SCAPIX_META_STRING("COMPONENT_ENABLED_STATE_DISABLED_USER"), jint>(); }
inline jint PackageManager::COMPONENT_ENABLED_STATE_ENABLED_() { return get_static_field<SCAPIX_META_STRING("COMPONENT_ENABLED_STATE_ENABLED"), jint>(); }
inline jint PackageManager::DONT_KILL_APP_() { return get_static_field<SCAPIX_META_STRING("DONT_KILL_APP"), jint>(); }
inline ref<java::lang::String> PackageManager::EXTRA_VERIFICATION_ID_() { return get_static_field<SCAPIX_META_STRING("EXTRA_VERIFICATION_ID"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::EXTRA_VERIFICATION_RESULT_() { return get_static_field<SCAPIX_META_STRING("EXTRA_VERIFICATION_RESULT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS_() { return get_static_field<SCAPIX_META_STRING("FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_APP_WIDGETS_() { return get_static_field<SCAPIX_META_STRING("FEATURE_APP_WIDGETS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_AUDIO_LOW_LATENCY_() { return get_static_field<SCAPIX_META_STRING("FEATURE_AUDIO_LOW_LATENCY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_AUDIO_OUTPUT_() { return get_static_field<SCAPIX_META_STRING("FEATURE_AUDIO_OUTPUT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_AUDIO_PRO_() { return get_static_field<SCAPIX_META_STRING("FEATURE_AUDIO_PRO"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_AUTOFILL_() { return get_static_field<SCAPIX_META_STRING("FEATURE_AUTOFILL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_AUTOMOTIVE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_AUTOMOTIVE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_BACKUP_() { return get_static_field<SCAPIX_META_STRING("FEATURE_BACKUP"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_BLUETOOTH_() { return get_static_field<SCAPIX_META_STRING("FEATURE_BLUETOOTH"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_BLUETOOTH_LE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_BLUETOOTH_LE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_CAMERA_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CAMERA"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_CAMERA_ANY_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CAMERA_ANY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_CAMERA_AR_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CAMERA_AR"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_CAMERA_AUTOFOCUS_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CAMERA_AUTOFOCUS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_CAMERA_CAPABILITY_RAW_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CAMERA_CAPABILITY_RAW"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_CAMERA_EXTERNAL_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CAMERA_EXTERNAL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_CAMERA_FLASH_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CAMERA_FLASH"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_CAMERA_FRONT_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CAMERA_FRONT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_CAMERA_LEVEL_FULL_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CAMERA_LEVEL_FULL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_CANT_SAVE_STATE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CANT_SAVE_STATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_COMPANION_DEVICE_SETUP_() { return get_static_field<SCAPIX_META_STRING("FEATURE_COMPANION_DEVICE_SETUP"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_CONNECTION_SERVICE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CONNECTION_SERVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_CONSUMER_IR_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CONSUMER_IR"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_DEVICE_ADMIN_() { return get_static_field<SCAPIX_META_STRING("FEATURE_DEVICE_ADMIN"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_EMBEDDED_() { return get_static_field<SCAPIX_META_STRING("FEATURE_EMBEDDED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_ETHERNET_() { return get_static_field<SCAPIX_META_STRING("FEATURE_ETHERNET"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_FAKETOUCH_() { return get_static_field<SCAPIX_META_STRING("FEATURE_FAKETOUCH"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT_() { return get_static_field<SCAPIX_META_STRING("FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND_() { return get_static_field<SCAPIX_META_STRING("FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_FINGERPRINT_() { return get_static_field<SCAPIX_META_STRING("FEATURE_FINGERPRINT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_FREEFORM_WINDOW_MANAGEMENT_() { return get_static_field<SCAPIX_META_STRING("FEATURE_FREEFORM_WINDOW_MANAGEMENT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_GAMEPAD_() { return get_static_field<SCAPIX_META_STRING("FEATURE_GAMEPAD"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_HIFI_SENSORS_() { return get_static_field<SCAPIX_META_STRING("FEATURE_HIFI_SENSORS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_HOME_SCREEN_() { return get_static_field<SCAPIX_META_STRING("FEATURE_HOME_SCREEN"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_INPUT_METHODS_() { return get_static_field<SCAPIX_META_STRING("FEATURE_INPUT_METHODS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_LEANBACK_() { return get_static_field<SCAPIX_META_STRING("FEATURE_LEANBACK"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_LEANBACK_ONLY_() { return get_static_field<SCAPIX_META_STRING("FEATURE_LEANBACK_ONLY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_LIVE_TV_() { return get_static_field<SCAPIX_META_STRING("FEATURE_LIVE_TV"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_LIVE_WALLPAPER_() { return get_static_field<SCAPIX_META_STRING("FEATURE_LIVE_WALLPAPER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_LOCATION_() { return get_static_field<SCAPIX_META_STRING("FEATURE_LOCATION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_LOCATION_GPS_() { return get_static_field<SCAPIX_META_STRING("FEATURE_LOCATION_GPS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_LOCATION_NETWORK_() { return get_static_field<SCAPIX_META_STRING("FEATURE_LOCATION_NETWORK"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_MANAGED_USERS_() { return get_static_field<SCAPIX_META_STRING("FEATURE_MANAGED_USERS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_MICROPHONE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_MICROPHONE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_MIDI_() { return get_static_field<SCAPIX_META_STRING("FEATURE_MIDI"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_NFC_() { return get_static_field<SCAPIX_META_STRING("FEATURE_NFC"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_NFC_HOST_CARD_EMULATION_() { return get_static_field<SCAPIX_META_STRING("FEATURE_NFC_HOST_CARD_EMULATION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_NFC_HOST_CARD_EMULATION_NFCF_() { return get_static_field<SCAPIX_META_STRING("FEATURE_NFC_HOST_CARD_EMULATION_NFCF"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_OPENGLES_EXTENSION_PACK_() { return get_static_field<SCAPIX_META_STRING("FEATURE_OPENGLES_EXTENSION_PACK"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_PC_() { return get_static_field<SCAPIX_META_STRING("FEATURE_PC"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_PICTURE_IN_PICTURE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_PICTURE_IN_PICTURE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_PRINTING_() { return get_static_field<SCAPIX_META_STRING("FEATURE_PRINTING"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_RAM_LOW_() { return get_static_field<SCAPIX_META_STRING("FEATURE_RAM_LOW"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_RAM_NORMAL_() { return get_static_field<SCAPIX_META_STRING("FEATURE_RAM_NORMAL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SCREEN_LANDSCAPE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SCREEN_LANDSCAPE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SCREEN_PORTRAIT_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SCREEN_PORTRAIT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SECURELY_REMOVES_USERS_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SECURELY_REMOVES_USERS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SENSOR_ACCELEROMETER_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SENSOR_ACCELEROMETER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SENSOR_AMBIENT_TEMPERATURE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SENSOR_AMBIENT_TEMPERATURE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SENSOR_BAROMETER_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SENSOR_BAROMETER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SENSOR_COMPASS_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SENSOR_COMPASS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SENSOR_GYROSCOPE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SENSOR_GYROSCOPE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SENSOR_HEART_RATE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SENSOR_HEART_RATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SENSOR_HEART_RATE_ECG_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SENSOR_HEART_RATE_ECG"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SENSOR_LIGHT_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SENSOR_LIGHT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SENSOR_PROXIMITY_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SENSOR_PROXIMITY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SENSOR_RELATIVE_HUMIDITY_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SENSOR_RELATIVE_HUMIDITY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SENSOR_STEP_COUNTER_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SENSOR_STEP_COUNTER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SENSOR_STEP_DETECTOR_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SENSOR_STEP_DETECTOR"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SIP_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SIP"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_SIP_VOIP_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SIP_VOIP"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_STRONGBOX_KEYSTORE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_STRONGBOX_KEYSTORE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_TELEPHONY_() { return get_static_field<SCAPIX_META_STRING("FEATURE_TELEPHONY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_TELEPHONY_CDMA_() { return get_static_field<SCAPIX_META_STRING("FEATURE_TELEPHONY_CDMA"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_TELEPHONY_EUICC_() { return get_static_field<SCAPIX_META_STRING("FEATURE_TELEPHONY_EUICC"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_TELEPHONY_GSM_() { return get_static_field<SCAPIX_META_STRING("FEATURE_TELEPHONY_GSM"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_TELEPHONY_MBMS_() { return get_static_field<SCAPIX_META_STRING("FEATURE_TELEPHONY_MBMS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_TELEVISION_() { return get_static_field<SCAPIX_META_STRING("FEATURE_TELEVISION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_TOUCHSCREEN_() { return get_static_field<SCAPIX_META_STRING("FEATURE_TOUCHSCREEN"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_TOUCHSCREEN_MULTITOUCH_() { return get_static_field<SCAPIX_META_STRING("FEATURE_TOUCHSCREEN_MULTITOUCH"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT_() { return get_static_field<SCAPIX_META_STRING("FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND_() { return get_static_field<SCAPIX_META_STRING("FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_USB_ACCESSORY_() { return get_static_field<SCAPIX_META_STRING("FEATURE_USB_ACCESSORY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_USB_HOST_() { return get_static_field<SCAPIX_META_STRING("FEATURE_USB_HOST"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_VERIFIED_BOOT_() { return get_static_field<SCAPIX_META_STRING("FEATURE_VERIFIED_BOOT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_VR_HEADTRACKING_() { return get_static_field<SCAPIX_META_STRING("FEATURE_VR_HEADTRACKING"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_VR_MODE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_VR_MODE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_VR_MODE_HIGH_PERFORMANCE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_VR_MODE_HIGH_PERFORMANCE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_VULKAN_HARDWARE_COMPUTE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_VULKAN_HARDWARE_COMPUTE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_VULKAN_HARDWARE_LEVEL_() { return get_static_field<SCAPIX_META_STRING("FEATURE_VULKAN_HARDWARE_LEVEL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_VULKAN_HARDWARE_VERSION_() { return get_static_field<SCAPIX_META_STRING("FEATURE_VULKAN_HARDWARE_VERSION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_WATCH_() { return get_static_field<SCAPIX_META_STRING("FEATURE_WATCH"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_WEBVIEW_() { return get_static_field<SCAPIX_META_STRING("FEATURE_WEBVIEW"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_WIFI_() { return get_static_field<SCAPIX_META_STRING("FEATURE_WIFI"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_WIFI_AWARE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_WIFI_AWARE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_WIFI_DIRECT_() { return get_static_field<SCAPIX_META_STRING("FEATURE_WIFI_DIRECT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_WIFI_PASSPOINT_() { return get_static_field<SCAPIX_META_STRING("FEATURE_WIFI_PASSPOINT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageManager::FEATURE_WIFI_RTT_() { return get_static_field<SCAPIX_META_STRING("FEATURE_WIFI_RTT"), ref<java::lang::String>>(); }
inline jint PackageManager::GET_ACTIVITIES_() { return get_static_field<SCAPIX_META_STRING("GET_ACTIVITIES"), jint>(); }
inline jint PackageManager::GET_CONFIGURATIONS_() { return get_static_field<SCAPIX_META_STRING("GET_CONFIGURATIONS"), jint>(); }
inline jint PackageManager::GET_DISABLED_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GET_DISABLED_COMPONENTS"), jint>(); }
inline jint PackageManager::GET_DISABLED_UNTIL_USED_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GET_DISABLED_UNTIL_USED_COMPONENTS"), jint>(); }
inline jint PackageManager::GET_GIDS_() { return get_static_field<SCAPIX_META_STRING("GET_GIDS"), jint>(); }
inline jint PackageManager::GET_INSTRUMENTATION_() { return get_static_field<SCAPIX_META_STRING("GET_INSTRUMENTATION"), jint>(); }
inline jint PackageManager::GET_INTENT_FILTERS_() { return get_static_field<SCAPIX_META_STRING("GET_INTENT_FILTERS"), jint>(); }
inline jint PackageManager::GET_META_DATA_() { return get_static_field<SCAPIX_META_STRING("GET_META_DATA"), jint>(); }
inline jint PackageManager::GET_PERMISSIONS_() { return get_static_field<SCAPIX_META_STRING("GET_PERMISSIONS"), jint>(); }
inline jint PackageManager::GET_PROVIDERS_() { return get_static_field<SCAPIX_META_STRING("GET_PROVIDERS"), jint>(); }
inline jint PackageManager::GET_RECEIVERS_() { return get_static_field<SCAPIX_META_STRING("GET_RECEIVERS"), jint>(); }
inline jint PackageManager::GET_RESOLVED_FILTER_() { return get_static_field<SCAPIX_META_STRING("GET_RESOLVED_FILTER"), jint>(); }
inline jint PackageManager::GET_SERVICES_() { return get_static_field<SCAPIX_META_STRING("GET_SERVICES"), jint>(); }
inline jint PackageManager::GET_SHARED_LIBRARY_FILES_() { return get_static_field<SCAPIX_META_STRING("GET_SHARED_LIBRARY_FILES"), jint>(); }
inline jint PackageManager::GET_SIGNATURES_() { return get_static_field<SCAPIX_META_STRING("GET_SIGNATURES"), jint>(); }
inline jint PackageManager::GET_SIGNING_CERTIFICATES_() { return get_static_field<SCAPIX_META_STRING("GET_SIGNING_CERTIFICATES"), jint>(); }
inline jint PackageManager::GET_UNINSTALLED_PACKAGES_() { return get_static_field<SCAPIX_META_STRING("GET_UNINSTALLED_PACKAGES"), jint>(); }
inline jint PackageManager::GET_URI_PERMISSION_PATTERNS_() { return get_static_field<SCAPIX_META_STRING("GET_URI_PERMISSION_PATTERNS"), jint>(); }
inline jint PackageManager::INSTALL_REASON_DEVICE_RESTORE_() { return get_static_field<SCAPIX_META_STRING("INSTALL_REASON_DEVICE_RESTORE"), jint>(); }
inline jint PackageManager::INSTALL_REASON_DEVICE_SETUP_() { return get_static_field<SCAPIX_META_STRING("INSTALL_REASON_DEVICE_SETUP"), jint>(); }
inline jint PackageManager::INSTALL_REASON_POLICY_() { return get_static_field<SCAPIX_META_STRING("INSTALL_REASON_POLICY"), jint>(); }
inline jint PackageManager::INSTALL_REASON_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("INSTALL_REASON_UNKNOWN"), jint>(); }
inline jint PackageManager::INSTALL_REASON_USER_() { return get_static_field<SCAPIX_META_STRING("INSTALL_REASON_USER"), jint>(); }
inline jint PackageManager::MATCH_ALL_() { return get_static_field<SCAPIX_META_STRING("MATCH_ALL"), jint>(); }
inline jint PackageManager::MATCH_DEFAULT_ONLY_() { return get_static_field<SCAPIX_META_STRING("MATCH_DEFAULT_ONLY"), jint>(); }
inline jint PackageManager::MATCH_DIRECT_BOOT_AWARE_() { return get_static_field<SCAPIX_META_STRING("MATCH_DIRECT_BOOT_AWARE"), jint>(); }
inline jint PackageManager::MATCH_DIRECT_BOOT_UNAWARE_() { return get_static_field<SCAPIX_META_STRING("MATCH_DIRECT_BOOT_UNAWARE"), jint>(); }
inline jint PackageManager::MATCH_DISABLED_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("MATCH_DISABLED_COMPONENTS"), jint>(); }
inline jint PackageManager::MATCH_DISABLED_UNTIL_USED_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("MATCH_DISABLED_UNTIL_USED_COMPONENTS"), jint>(); }
inline jint PackageManager::MATCH_SYSTEM_ONLY_() { return get_static_field<SCAPIX_META_STRING("MATCH_SYSTEM_ONLY"), jint>(); }
inline jint PackageManager::MATCH_UNINSTALLED_PACKAGES_() { return get_static_field<SCAPIX_META_STRING("MATCH_UNINSTALLED_PACKAGES"), jint>(); }
inline jlong PackageManager::MAXIMUM_VERIFICATION_TIMEOUT_() { return get_static_field<SCAPIX_META_STRING("MAXIMUM_VERIFICATION_TIMEOUT"), jlong>(); }
inline jint PackageManager::PERMISSION_DENIED_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_DENIED"), jint>(); }
inline jint PackageManager::PERMISSION_GRANTED_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_GRANTED"), jint>(); }
inline jint PackageManager::SIGNATURE_FIRST_NOT_SIGNED_() { return get_static_field<SCAPIX_META_STRING("SIGNATURE_FIRST_NOT_SIGNED"), jint>(); }
inline jint PackageManager::SIGNATURE_MATCH_() { return get_static_field<SCAPIX_META_STRING("SIGNATURE_MATCH"), jint>(); }
inline jint PackageManager::SIGNATURE_NEITHER_SIGNED_() { return get_static_field<SCAPIX_META_STRING("SIGNATURE_NEITHER_SIGNED"), jint>(); }
inline jint PackageManager::SIGNATURE_NO_MATCH_() { return get_static_field<SCAPIX_META_STRING("SIGNATURE_NO_MATCH"), jint>(); }
inline jint PackageManager::SIGNATURE_SECOND_NOT_SIGNED_() { return get_static_field<SCAPIX_META_STRING("SIGNATURE_SECOND_NOT_SIGNED"), jint>(); }
inline jint PackageManager::SIGNATURE_UNKNOWN_PACKAGE_() { return get_static_field<SCAPIX_META_STRING("SIGNATURE_UNKNOWN_PACKAGE"), jint>(); }
inline jint PackageManager::VERIFICATION_ALLOW_() { return get_static_field<SCAPIX_META_STRING("VERIFICATION_ALLOW"), jint>(); }
inline jint PackageManager::VERIFICATION_REJECT_() { return get_static_field<SCAPIX_META_STRING("VERIFICATION_REJECT"), jint>(); }
inline jint PackageManager::VERSION_CODE_HIGHEST_() { return get_static_field<SCAPIX_META_STRING("VERSION_CODE_HIGHEST"), jint>(); }
inline ref<PackageManager> PackageManager::new_object() { return base_::new_object(); }
inline ref<android::content::pm::PackageInfo> PackageManager::getPackageInfo(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("getPackageInfo"), ref<android::content::pm::PackageInfo>>(p1, p2); }
inline ref<android::content::pm::PackageInfo> PackageManager::getPackageInfo(ref<android::content::pm::VersionedPackage> p1, jint p2) { return call_method<SCAPIX_META_STRING("getPackageInfo"), ref<android::content::pm::PackageInfo>>(p1, p2); }
inline ref<link::java::array<java::lang::String>> PackageManager::currentToCanonicalPackageNames(ref<link::java::array<java::lang::String>> p1) { return call_method<SCAPIX_META_STRING("currentToCanonicalPackageNames"), ref<link::java::array<java::lang::String>>>(p1); }
inline ref<link::java::array<java::lang::String>> PackageManager::canonicalToCurrentPackageNames(ref<link::java::array<java::lang::String>> p1) { return call_method<SCAPIX_META_STRING("canonicalToCurrentPackageNames"), ref<link::java::array<java::lang::String>>>(p1); }
inline ref<android::content::Intent> PackageManager::getLaunchIntentForPackage(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getLaunchIntentForPackage"), ref<android::content::Intent>>(p1); }
inline ref<android::content::Intent> PackageManager::getLeanbackLaunchIntentForPackage(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getLeanbackLaunchIntentForPackage"), ref<android::content::Intent>>(p1); }
inline ref<link::java::array<jint>> PackageManager::getPackageGids(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getPackageGids"), ref<link::java::array<jint>>>(p1); }
inline ref<link::java::array<jint>> PackageManager::getPackageGids(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("getPackageGids"), ref<link::java::array<jint>>>(p1, p2); }
inline jint PackageManager::getPackageUid(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("getPackageUid"), jint>(p1, p2); }
inline ref<android::content::pm::PermissionInfo> PackageManager::getPermissionInfo(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("getPermissionInfo"), ref<android::content::pm::PermissionInfo>>(p1, p2); }
inline ref<java::util::List> PackageManager::queryPermissionsByGroup(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("queryPermissionsByGroup"), ref<java::util::List>>(p1, p2); }
inline ref<android::content::pm::PermissionGroupInfo> PackageManager::getPermissionGroupInfo(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("getPermissionGroupInfo"), ref<android::content::pm::PermissionGroupInfo>>(p1, p2); }
inline ref<java::util::List> PackageManager::getAllPermissionGroups(jint p1) { return call_method<SCAPIX_META_STRING("getAllPermissionGroups"), ref<java::util::List>>(p1); }
inline ref<android::content::pm::ApplicationInfo> PackageManager::getApplicationInfo(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("getApplicationInfo"), ref<android::content::pm::ApplicationInfo>>(p1, p2); }
inline ref<android::content::pm::ActivityInfo> PackageManager::getActivityInfo(ref<android::content::ComponentName> p1, jint p2) { return call_method<SCAPIX_META_STRING("getActivityInfo"), ref<android::content::pm::ActivityInfo>>(p1, p2); }
inline ref<android::content::pm::ActivityInfo> PackageManager::getReceiverInfo(ref<android::content::ComponentName> p1, jint p2) { return call_method<SCAPIX_META_STRING("getReceiverInfo"), ref<android::content::pm::ActivityInfo>>(p1, p2); }
inline ref<android::content::pm::ServiceInfo> PackageManager::getServiceInfo(ref<android::content::ComponentName> p1, jint p2) { return call_method<SCAPIX_META_STRING("getServiceInfo"), ref<android::content::pm::ServiceInfo>>(p1, p2); }
inline ref<android::content::pm::ProviderInfo> PackageManager::getProviderInfo(ref<android::content::ComponentName> p1, jint p2) { return call_method<SCAPIX_META_STRING("getProviderInfo"), ref<android::content::pm::ProviderInfo>>(p1, p2); }
inline ref<java::util::List> PackageManager::getInstalledPackages(jint p1) { return call_method<SCAPIX_META_STRING("getInstalledPackages"), ref<java::util::List>>(p1); }
inline ref<java::util::List> PackageManager::getPackagesHoldingPermissions(ref<link::java::array<java::lang::String>> p1, jint p2) { return call_method<SCAPIX_META_STRING("getPackagesHoldingPermissions"), ref<java::util::List>>(p1, p2); }
inline jint PackageManager::checkPermission(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("checkPermission"), jint>(p1, p2); }
inline jboolean PackageManager::isPermissionRevokedByPolicy(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("isPermissionRevokedByPolicy"), jboolean>(p1, p2); }
inline jboolean PackageManager::addPermission(ref<android::content::pm::PermissionInfo> p1) { return call_method<SCAPIX_META_STRING("addPermission"), jboolean>(p1); }
inline jboolean PackageManager::addPermissionAsync(ref<android::content::pm::PermissionInfo> p1) { return call_method<SCAPIX_META_STRING("addPermissionAsync"), jboolean>(p1); }
inline void PackageManager::removePermission(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("removePermission"), void>(p1); }
inline jint PackageManager::checkSignatures(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("checkSignatures"), jint>(p1, p2); }
inline jint PackageManager::checkSignatures(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("checkSignatures"), jint>(p1, p2); }
inline ref<link::java::array<java::lang::String>> PackageManager::getPackagesForUid(jint p1) { return call_method<SCAPIX_META_STRING("getPackagesForUid"), ref<link::java::array<java::lang::String>>>(p1); }
inline ref<java::lang::String> PackageManager::getNameForUid(jint p1) { return call_method<SCAPIX_META_STRING("getNameForUid"), ref<java::lang::String>>(p1); }
inline ref<java::util::List> PackageManager::getInstalledApplications(jint p1) { return call_method<SCAPIX_META_STRING("getInstalledApplications"), ref<java::util::List>>(p1); }
inline jboolean PackageManager::isInstantApp() { return call_method<SCAPIX_META_STRING("isInstantApp"), jboolean>(); }
inline jboolean PackageManager::isInstantApp(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("isInstantApp"), jboolean>(p1); }
inline jint PackageManager::getInstantAppCookieMaxBytes() { return call_method<SCAPIX_META_STRING("getInstantAppCookieMaxBytes"), jint>(); }
inline ref<link::java::array<jbyte>> PackageManager::getInstantAppCookie() { return call_method<SCAPIX_META_STRING("getInstantAppCookie"), ref<link::java::array<jbyte>>>(); }
inline void PackageManager::clearInstantAppCookie() { return call_method<SCAPIX_META_STRING("clearInstantAppCookie"), void>(); }
inline void PackageManager::updateInstantAppCookie(ref<link::java::array<jbyte>> p1) { return call_method<SCAPIX_META_STRING("updateInstantAppCookie"), void>(p1); }
inline ref<link::java::array<java::lang::String>> PackageManager::getSystemSharedLibraryNames() { return call_method<SCAPIX_META_STRING("getSystemSharedLibraryNames"), ref<link::java::array<java::lang::String>>>(); }
inline ref<java::util::List> PackageManager::getSharedLibraries(jint p1) { return call_method<SCAPIX_META_STRING("getSharedLibraries"), ref<java::util::List>>(p1); }
inline ref<android::content::pm::ChangedPackages> PackageManager::getChangedPackages(jint p1) { return call_method<SCAPIX_META_STRING("getChangedPackages"), ref<android::content::pm::ChangedPackages>>(p1); }
inline ref<link::java::array<android::content::pm::FeatureInfo>> PackageManager::getSystemAvailableFeatures() { return call_method<SCAPIX_META_STRING("getSystemAvailableFeatures"), ref<link::java::array<android::content::pm::FeatureInfo>>>(); }
inline jboolean PackageManager::hasSystemFeature(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("hasSystemFeature"), jboolean>(p1); }
inline jboolean PackageManager::hasSystemFeature(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("hasSystemFeature"), jboolean>(p1, p2); }
inline ref<android::content::pm::ResolveInfo> PackageManager::resolveActivity(ref<android::content::Intent> p1, jint p2) { return call_method<SCAPIX_META_STRING("resolveActivity"), ref<android::content::pm::ResolveInfo>>(p1, p2); }
inline ref<java::util::List> PackageManager::queryIntentActivities(ref<android::content::Intent> p1, jint p2) { return call_method<SCAPIX_META_STRING("queryIntentActivities"), ref<java::util::List>>(p1, p2); }
inline ref<java::util::List> PackageManager::queryIntentActivityOptions(ref<android::content::ComponentName> p1, ref<link::java::array<android::content::Intent>> p2, ref<android::content::Intent> p3, jint p4) { return call_method<SCAPIX_META_STRING("queryIntentActivityOptions"), ref<java::util::List>>(p1, p2, p3, p4); }
inline ref<java::util::List> PackageManager::queryBroadcastReceivers(ref<android::content::Intent> p1, jint p2) { return call_method<SCAPIX_META_STRING("queryBroadcastReceivers"), ref<java::util::List>>(p1, p2); }
inline ref<android::content::pm::ResolveInfo> PackageManager::resolveService(ref<android::content::Intent> p1, jint p2) { return call_method<SCAPIX_META_STRING("resolveService"), ref<android::content::pm::ResolveInfo>>(p1, p2); }
inline ref<java::util::List> PackageManager::queryIntentServices(ref<android::content::Intent> p1, jint p2) { return call_method<SCAPIX_META_STRING("queryIntentServices"), ref<java::util::List>>(p1, p2); }
inline ref<java::util::List> PackageManager::queryIntentContentProviders(ref<android::content::Intent> p1, jint p2) { return call_method<SCAPIX_META_STRING("queryIntentContentProviders"), ref<java::util::List>>(p1, p2); }
inline ref<android::content::pm::ProviderInfo> PackageManager::resolveContentProvider(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("resolveContentProvider"), ref<android::content::pm::ProviderInfo>>(p1, p2); }
inline ref<java::util::List> PackageManager::queryContentProviders(ref<java::lang::String> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("queryContentProviders"), ref<java::util::List>>(p1, p2, p3); }
inline ref<android::content::pm::InstrumentationInfo> PackageManager::getInstrumentationInfo(ref<android::content::ComponentName> p1, jint p2) { return call_method<SCAPIX_META_STRING("getInstrumentationInfo"), ref<android::content::pm::InstrumentationInfo>>(p1, p2); }
inline ref<java::util::List> PackageManager::queryInstrumentation(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("queryInstrumentation"), ref<java::util::List>>(p1, p2); }
inline ref<android::graphics::drawable::Drawable> PackageManager::getDrawable(ref<java::lang::String> p1, jint p2, ref<android::content::pm::ApplicationInfo> p3) { return call_method<SCAPIX_META_STRING("getDrawable"), ref<android::graphics::drawable::Drawable>>(p1, p2, p3); }
inline ref<android::graphics::drawable::Drawable> PackageManager::getActivityIcon(ref<android::content::ComponentName> p1) { return call_method<SCAPIX_META_STRING("getActivityIcon"), ref<android::graphics::drawable::Drawable>>(p1); }
inline ref<android::graphics::drawable::Drawable> PackageManager::getActivityIcon(ref<android::content::Intent> p1) { return call_method<SCAPIX_META_STRING("getActivityIcon"), ref<android::graphics::drawable::Drawable>>(p1); }
inline ref<android::graphics::drawable::Drawable> PackageManager::getActivityBanner(ref<android::content::ComponentName> p1) { return call_method<SCAPIX_META_STRING("getActivityBanner"), ref<android::graphics::drawable::Drawable>>(p1); }
inline ref<android::graphics::drawable::Drawable> PackageManager::getActivityBanner(ref<android::content::Intent> p1) { return call_method<SCAPIX_META_STRING("getActivityBanner"), ref<android::graphics::drawable::Drawable>>(p1); }
inline ref<android::graphics::drawable::Drawable> PackageManager::getDefaultActivityIcon() { return call_method<SCAPIX_META_STRING("getDefaultActivityIcon"), ref<android::graphics::drawable::Drawable>>(); }
inline ref<android::graphics::drawable::Drawable> PackageManager::getApplicationIcon(ref<android::content::pm::ApplicationInfo> p1) { return call_method<SCAPIX_META_STRING("getApplicationIcon"), ref<android::graphics::drawable::Drawable>>(p1); }
inline ref<android::graphics::drawable::Drawable> PackageManager::getApplicationIcon(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getApplicationIcon"), ref<android::graphics::drawable::Drawable>>(p1); }
inline ref<android::graphics::drawable::Drawable> PackageManager::getApplicationBanner(ref<android::content::pm::ApplicationInfo> p1) { return call_method<SCAPIX_META_STRING("getApplicationBanner"), ref<android::graphics::drawable::Drawable>>(p1); }
inline ref<android::graphics::drawable::Drawable> PackageManager::getApplicationBanner(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getApplicationBanner"), ref<android::graphics::drawable::Drawable>>(p1); }
inline ref<android::graphics::drawable::Drawable> PackageManager::getActivityLogo(ref<android::content::ComponentName> p1) { return call_method<SCAPIX_META_STRING("getActivityLogo"), ref<android::graphics::drawable::Drawable>>(p1); }
inline ref<android::graphics::drawable::Drawable> PackageManager::getActivityLogo(ref<android::content::Intent> p1) { return call_method<SCAPIX_META_STRING("getActivityLogo"), ref<android::graphics::drawable::Drawable>>(p1); }
inline ref<android::graphics::drawable::Drawable> PackageManager::getApplicationLogo(ref<android::content::pm::ApplicationInfo> p1) { return call_method<SCAPIX_META_STRING("getApplicationLogo"), ref<android::graphics::drawable::Drawable>>(p1); }
inline ref<android::graphics::drawable::Drawable> PackageManager::getApplicationLogo(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getApplicationLogo"), ref<android::graphics::drawable::Drawable>>(p1); }
inline ref<android::graphics::drawable::Drawable> PackageManager::getUserBadgedIcon(ref<android::graphics::drawable::Drawable> p1, ref<android::os::UserHandle> p2) { return call_method<SCAPIX_META_STRING("getUserBadgedIcon"), ref<android::graphics::drawable::Drawable>>(p1, p2); }
inline ref<android::graphics::drawable::Drawable> PackageManager::getUserBadgedDrawableForDensity(ref<android::graphics::drawable::Drawable> p1, ref<android::os::UserHandle> p2, ref<android::graphics::Rect> p3, jint p4) { return call_method<SCAPIX_META_STRING("getUserBadgedDrawableForDensity"), ref<android::graphics::drawable::Drawable>>(p1, p2, p3, p4); }
inline ref<java::lang::CharSequence> PackageManager::getUserBadgedLabel(ref<java::lang::CharSequence> p1, ref<android::os::UserHandle> p2) { return call_method<SCAPIX_META_STRING("getUserBadgedLabel"), ref<java::lang::CharSequence>>(p1, p2); }
inline ref<java::lang::CharSequence> PackageManager::getText(ref<java::lang::String> p1, jint p2, ref<android::content::pm::ApplicationInfo> p3) { return call_method<SCAPIX_META_STRING("getText"), ref<java::lang::CharSequence>>(p1, p2, p3); }
inline ref<android::content::res::XmlResourceParser> PackageManager::getXml(ref<java::lang::String> p1, jint p2, ref<android::content::pm::ApplicationInfo> p3) { return call_method<SCAPIX_META_STRING("getXml"), ref<android::content::res::XmlResourceParser>>(p1, p2, p3); }
inline ref<java::lang::CharSequence> PackageManager::getApplicationLabel(ref<android::content::pm::ApplicationInfo> p1) { return call_method<SCAPIX_META_STRING("getApplicationLabel"), ref<java::lang::CharSequence>>(p1); }
inline ref<android::content::res::Resources> PackageManager::getResourcesForActivity(ref<android::content::ComponentName> p1) { return call_method<SCAPIX_META_STRING("getResourcesForActivity"), ref<android::content::res::Resources>>(p1); }
inline ref<android::content::res::Resources> PackageManager::getResourcesForApplication(ref<android::content::pm::ApplicationInfo> p1) { return call_method<SCAPIX_META_STRING("getResourcesForApplication"), ref<android::content::res::Resources>>(p1); }
inline ref<android::content::res::Resources> PackageManager::getResourcesForApplication(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getResourcesForApplication"), ref<android::content::res::Resources>>(p1); }
inline ref<android::content::pm::PackageInfo> PackageManager::getPackageArchiveInfo(ref<java::lang::String> archiveFilePath, jint flags) { return call_method<SCAPIX_META_STRING("getPackageArchiveInfo"), ref<android::content::pm::PackageInfo>>(archiveFilePath, flags); }
inline void PackageManager::verifyPendingInstall(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("verifyPendingInstall"), void>(p1, p2); }
inline void PackageManager::extendVerificationTimeout(jint p1, jint p2, jlong p3) { return call_method<SCAPIX_META_STRING("extendVerificationTimeout"), void>(p1, p2, p3); }
inline void PackageManager::setInstallerPackageName(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("setInstallerPackageName"), void>(p1, p2); }
inline ref<java::lang::String> PackageManager::getInstallerPackageName(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getInstallerPackageName"), ref<java::lang::String>>(p1); }
inline void PackageManager::addPackageToPreferred(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("addPackageToPreferred"), void>(p1); }
inline void PackageManager::removePackageFromPreferred(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("removePackageFromPreferred"), void>(p1); }
inline ref<java::util::List> PackageManager::getPreferredPackages(jint p1) { return call_method<SCAPIX_META_STRING("getPreferredPackages"), ref<java::util::List>>(p1); }
inline void PackageManager::addPreferredActivity(ref<android::content::IntentFilter> p1, jint p2, ref<link::java::array<android::content::ComponentName>> p3, ref<android::content::ComponentName> p4) { return call_method<SCAPIX_META_STRING("addPreferredActivity"), void>(p1, p2, p3, p4); }
inline void PackageManager::clearPackagePreferredActivities(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("clearPackagePreferredActivities"), void>(p1); }
inline jint PackageManager::getPreferredActivities(ref<java::util::List> p1, ref<java::util::List> p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("getPreferredActivities"), jint>(p1, p2, p3); }
inline void PackageManager::setComponentEnabledSetting(ref<android::content::ComponentName> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("setComponentEnabledSetting"), void>(p1, p2, p3); }
inline jint PackageManager::getComponentEnabledSetting(ref<android::content::ComponentName> p1) { return call_method<SCAPIX_META_STRING("getComponentEnabledSetting"), jint>(p1); }
inline void PackageManager::setApplicationEnabledSetting(ref<java::lang::String> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("setApplicationEnabledSetting"), void>(p1, p2, p3); }
inline jint PackageManager::getApplicationEnabledSetting(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getApplicationEnabledSetting"), jint>(p1); }
inline jboolean PackageManager::isSafeMode() { return call_method<SCAPIX_META_STRING("isSafeMode"), jboolean>(); }
inline jboolean PackageManager::isPackageSuspended() { return call_method<SCAPIX_META_STRING("isPackageSuspended"), jboolean>(); }
inline ref<android::os::Bundle> PackageManager::getSuspendedPackageAppExtras() { return call_method<SCAPIX_META_STRING("getSuspendedPackageAppExtras"), ref<android::os::Bundle>>(); }
inline void PackageManager::setApplicationCategoryHint(ref<java::lang::String> p1, jint p2) { return call_method<SCAPIX_META_STRING("setApplicationCategoryHint"), void>(p1, p2); }
inline ref<android::content::pm::PackageInstaller> PackageManager::getPackageInstaller() { return call_method<SCAPIX_META_STRING("getPackageInstaller"), ref<android::content::pm::PackageInstaller>>(); }
inline jboolean PackageManager::canRequestPackageInstalls() { return call_method<SCAPIX_META_STRING("canRequestPackageInstalls"), jboolean>(); }
inline jboolean PackageManager::hasSigningCertificate(ref<java::lang::String> packageName, ref<link::java::array<jbyte>> certificate, jint type) { return call_method<SCAPIX_META_STRING("hasSigningCertificate"), jboolean>(packageName, certificate, type); }
inline jboolean PackageManager::hasSigningCertificate(jint uid, ref<link::java::array<jbyte>> certificate, jint type) { return call_method<SCAPIX_META_STRING("hasSigningCertificate"), jboolean>(uid, certificate, type); }

} // namespace android::content::pm
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_PM_PACKAGEMANAGER_H
