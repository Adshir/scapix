// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/content/pm/PackageItemInfo.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_CONTENT_PM_INSTRUMENTATIONINFO_H
#define SCAPIX_ANDROID_CONTENT_PM_INSTRUMENTATIONINFO_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::content::pm {

class InstrumentationInfo : public object_base<SCAPIX_META_STRING("android/content/pm/InstrumentationInfo"),
	android::content::pm::PackageItemInfo,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	ref<java::lang::String> dataDir();
	void dataDir(ref<java::lang::String>);
	jboolean functionalTest();
	void functionalTest(jboolean);
	jboolean handleProfiling();
	void handleProfiling(jboolean);
	ref<java::lang::String> publicSourceDir();
	void publicSourceDir(ref<java::lang::String>);
	ref<java::lang::String> sourceDir();
	void sourceDir(ref<java::lang::String>);
	ref<link::java::array<java::lang::String>> splitNames();
	void splitNames(ref<link::java::array<java::lang::String>>);
	ref<link::java::array<java::lang::String>> splitPublicSourceDirs();
	void splitPublicSourceDirs(ref<link::java::array<java::lang::String>>);
	ref<link::java::array<java::lang::String>> splitSourceDirs();
	void splitSourceDirs(ref<link::java::array<java::lang::String>>);
	ref<java::lang::String> targetPackage();
	void targetPackage(ref<java::lang::String>);
	ref<java::lang::String> targetProcesses();
	void targetProcesses(ref<java::lang::String>);

	static ref<InstrumentationInfo> new_object();
	static ref<InstrumentationInfo> new_object(ref<android::content::pm::InstrumentationInfo> orig);
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint parcelableFlags);

protected:

	InstrumentationInfo(handle_type h) : base_(h) {}

};

} // namespace android::content::pm
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::content::pm {

inline ref<android::os::Parcelable_Creator> InstrumentationInfo::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<java::lang::String> InstrumentationInfo::dataDir() { return get_field<SCAPIX_META_STRING("dataDir"), ref<java::lang::String>>(); }
inline void InstrumentationInfo::dataDir(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("dataDir"), ref<java::lang::String>>(v); }
inline jboolean InstrumentationInfo::functionalTest() { return get_field<SCAPIX_META_STRING("functionalTest"), jboolean>(); }
inline void InstrumentationInfo::functionalTest(jboolean v) { set_field<SCAPIX_META_STRING("functionalTest"), jboolean>(v); }
inline jboolean InstrumentationInfo::handleProfiling() { return get_field<SCAPIX_META_STRING("handleProfiling"), jboolean>(); }
inline void InstrumentationInfo::handleProfiling(jboolean v) { set_field<SCAPIX_META_STRING("handleProfiling"), jboolean>(v); }
inline ref<java::lang::String> InstrumentationInfo::publicSourceDir() { return get_field<SCAPIX_META_STRING("publicSourceDir"), ref<java::lang::String>>(); }
inline void InstrumentationInfo::publicSourceDir(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("publicSourceDir"), ref<java::lang::String>>(v); }
inline ref<java::lang::String> InstrumentationInfo::sourceDir() { return get_field<SCAPIX_META_STRING("sourceDir"), ref<java::lang::String>>(); }
inline void InstrumentationInfo::sourceDir(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("sourceDir"), ref<java::lang::String>>(v); }
inline ref<link::java::array<java::lang::String>> InstrumentationInfo::splitNames() { return get_field<SCAPIX_META_STRING("splitNames"), ref<link::java::array<java::lang::String>>>(); }
inline void InstrumentationInfo::splitNames(ref<link::java::array<java::lang::String>> v) { set_field<SCAPIX_META_STRING("splitNames"), ref<link::java::array<java::lang::String>>>(v); }
inline ref<link::java::array<java::lang::String>> InstrumentationInfo::splitPublicSourceDirs() { return get_field<SCAPIX_META_STRING("splitPublicSourceDirs"), ref<link::java::array<java::lang::String>>>(); }
inline void InstrumentationInfo::splitPublicSourceDirs(ref<link::java::array<java::lang::String>> v) { set_field<SCAPIX_META_STRING("splitPublicSourceDirs"), ref<link::java::array<java::lang::String>>>(v); }
inline ref<link::java::array<java::lang::String>> InstrumentationInfo::splitSourceDirs() { return get_field<SCAPIX_META_STRING("splitSourceDirs"), ref<link::java::array<java::lang::String>>>(); }
inline void InstrumentationInfo::splitSourceDirs(ref<link::java::array<java::lang::String>> v) { set_field<SCAPIX_META_STRING("splitSourceDirs"), ref<link::java::array<java::lang::String>>>(v); }
inline ref<java::lang::String> InstrumentationInfo::targetPackage() { return get_field<SCAPIX_META_STRING("targetPackage"), ref<java::lang::String>>(); }
inline void InstrumentationInfo::targetPackage(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("targetPackage"), ref<java::lang::String>>(v); }
inline ref<java::lang::String> InstrumentationInfo::targetProcesses() { return get_field<SCAPIX_META_STRING("targetProcesses"), ref<java::lang::String>>(); }
inline void InstrumentationInfo::targetProcesses(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("targetProcesses"), ref<java::lang::String>>(v); }
inline ref<InstrumentationInfo> InstrumentationInfo::new_object() { return base_::new_object(); }
inline ref<InstrumentationInfo> InstrumentationInfo::new_object(ref<android::content::pm::InstrumentationInfo> orig) { return base_::new_object(orig); }
inline ref<java::lang::String> InstrumentationInfo::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint InstrumentationInfo::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void InstrumentationInfo::writeToParcel(ref<android::os::Parcel> dest, jint parcelableFlags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, parcelableFlags); }

} // namespace android::content::pm
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_PM_INSTRUMENTATIONINFO_H
