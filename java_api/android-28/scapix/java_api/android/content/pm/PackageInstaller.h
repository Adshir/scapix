// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_CONTENT_PM_PACKAGEINSTALLER_H
#define SCAPIX_ANDROID_CONTENT_PM_PACKAGEINSTALLER_H

namespace scapix::java_api {

namespace android::content { class IntentSender; }
namespace android::content::pm { class PackageInstaller_Session; }
namespace android::content::pm { class PackageInstaller_SessionCallback; }
namespace android::content::pm { class PackageInstaller_SessionInfo; }
namespace android::content::pm { class PackageInstaller_SessionParams; }
namespace android::content::pm { class VersionedPackage; }
namespace android::graphics { class Bitmap; }
namespace android::os { class Handler; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::util { class List; }

namespace android::content::pm {

class PackageInstaller : public object_base<SCAPIX_META_STRING("android/content/pm/PackageInstaller"),
	java::lang::Object>
{
public:

	using SessionParams = PackageInstaller_SessionParams;
	using SessionInfo = PackageInstaller_SessionInfo;
	using SessionCallback = PackageInstaller_SessionCallback;
	using Session = PackageInstaller_Session;

	static ref<java::lang::String> ACTION_SESSION_COMMITTED_();
	static ref<java::lang::String> ACTION_SESSION_DETAILS_();
	static ref<java::lang::String> EXTRA_OTHER_PACKAGE_NAME_();
	static ref<java::lang::String> EXTRA_PACKAGE_NAME_();
	static ref<java::lang::String> EXTRA_SESSION_();
	static ref<java::lang::String> EXTRA_SESSION_ID_();
	static ref<java::lang::String> EXTRA_STATUS_();
	static ref<java::lang::String> EXTRA_STATUS_MESSAGE_();
	static ref<java::lang::String> EXTRA_STORAGE_PATH_();
	static jint STATUS_FAILURE_();
	static jint STATUS_FAILURE_ABORTED_();
	static jint STATUS_FAILURE_BLOCKED_();
	static jint STATUS_FAILURE_CONFLICT_();
	static jint STATUS_FAILURE_INCOMPATIBLE_();
	static jint STATUS_FAILURE_INVALID_();
	static jint STATUS_FAILURE_STORAGE_();
	static jint STATUS_PENDING_USER_ACTION_();
	static jint STATUS_SUCCESS_();

	jint createSession(ref<android::content::pm::PackageInstaller_SessionParams> params);
	ref<android::content::pm::PackageInstaller_Session> openSession(jint sessionId);
	void updateSessionAppIcon(jint sessionId, ref<android::graphics::Bitmap> appIcon);
	void updateSessionAppLabel(jint sessionId, ref<java::lang::CharSequence> appLabel);
	void abandonSession(jint sessionId);
	ref<android::content::pm::PackageInstaller_SessionInfo> getSessionInfo(jint sessionId);
	ref<java::util::List> getAllSessions();
	ref<java::util::List> getMySessions();
	void uninstall(ref<java::lang::String> packageName, ref<android::content::IntentSender> statusReceiver);
	void uninstall(ref<android::content::pm::VersionedPackage> versionedPackage, ref<android::content::IntentSender> statusReceiver);
	void registerSessionCallback(ref<android::content::pm::PackageInstaller_SessionCallback> callback);
	void registerSessionCallback(ref<android::content::pm::PackageInstaller_SessionCallback> callback, ref<android::os::Handler> handler);
	void unregisterSessionCallback(ref<android::content::pm::PackageInstaller_SessionCallback> callback);

protected:

	PackageInstaller(handle_type h) : base_(h) {}

};

} // namespace android::content::pm
} // namespace scapix::java_api

#include <scapix/java_api/android/content/IntentSender.h>
#include <scapix/java_api/android/content/pm/PackageInstaller_Session.h>
#include <scapix/java_api/android/content/pm/PackageInstaller_SessionCallback.h>
#include <scapix/java_api/android/content/pm/PackageInstaller_SessionInfo.h>
#include <scapix/java_api/android/content/pm/PackageInstaller_SessionParams.h>
#include <scapix/java_api/android/content/pm/VersionedPackage.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::content::pm {

inline ref<java::lang::String> PackageInstaller::ACTION_SESSION_COMMITTED_() { return get_static_field<SCAPIX_META_STRING("ACTION_SESSION_COMMITTED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageInstaller::ACTION_SESSION_DETAILS_() { return get_static_field<SCAPIX_META_STRING("ACTION_SESSION_DETAILS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageInstaller::EXTRA_OTHER_PACKAGE_NAME_() { return get_static_field<SCAPIX_META_STRING("EXTRA_OTHER_PACKAGE_NAME"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageInstaller::EXTRA_PACKAGE_NAME_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PACKAGE_NAME"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageInstaller::EXTRA_SESSION_() { return get_static_field<SCAPIX_META_STRING("EXTRA_SESSION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageInstaller::EXTRA_SESSION_ID_() { return get_static_field<SCAPIX_META_STRING("EXTRA_SESSION_ID"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageInstaller::EXTRA_STATUS_() { return get_static_field<SCAPIX_META_STRING("EXTRA_STATUS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageInstaller::EXTRA_STATUS_MESSAGE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_STATUS_MESSAGE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> PackageInstaller::EXTRA_STORAGE_PATH_() { return get_static_field<SCAPIX_META_STRING("EXTRA_STORAGE_PATH"), ref<java::lang::String>>(); }
inline jint PackageInstaller::STATUS_FAILURE_() { return get_static_field<SCAPIX_META_STRING("STATUS_FAILURE"), jint>(); }
inline jint PackageInstaller::STATUS_FAILURE_ABORTED_() { return get_static_field<SCAPIX_META_STRING("STATUS_FAILURE_ABORTED"), jint>(); }
inline jint PackageInstaller::STATUS_FAILURE_BLOCKED_() { return get_static_field<SCAPIX_META_STRING("STATUS_FAILURE_BLOCKED"), jint>(); }
inline jint PackageInstaller::STATUS_FAILURE_CONFLICT_() { return get_static_field<SCAPIX_META_STRING("STATUS_FAILURE_CONFLICT"), jint>(); }
inline jint PackageInstaller::STATUS_FAILURE_INCOMPATIBLE_() { return get_static_field<SCAPIX_META_STRING("STATUS_FAILURE_INCOMPATIBLE"), jint>(); }
inline jint PackageInstaller::STATUS_FAILURE_INVALID_() { return get_static_field<SCAPIX_META_STRING("STATUS_FAILURE_INVALID"), jint>(); }
inline jint PackageInstaller::STATUS_FAILURE_STORAGE_() { return get_static_field<SCAPIX_META_STRING("STATUS_FAILURE_STORAGE"), jint>(); }
inline jint PackageInstaller::STATUS_PENDING_USER_ACTION_() { return get_static_field<SCAPIX_META_STRING("STATUS_PENDING_USER_ACTION"), jint>(); }
inline jint PackageInstaller::STATUS_SUCCESS_() { return get_static_field<SCAPIX_META_STRING("STATUS_SUCCESS"), jint>(); }
inline jint PackageInstaller::createSession(ref<android::content::pm::PackageInstaller_SessionParams> params) { return call_method<SCAPIX_META_STRING("createSession"), jint>(params); }
inline ref<android::content::pm::PackageInstaller_Session> PackageInstaller::openSession(jint sessionId) { return call_method<SCAPIX_META_STRING("openSession"), ref<android::content::pm::PackageInstaller_Session>>(sessionId); }
inline void PackageInstaller::updateSessionAppIcon(jint sessionId, ref<android::graphics::Bitmap> appIcon) { return call_method<SCAPIX_META_STRING("updateSessionAppIcon"), void>(sessionId, appIcon); }
inline void PackageInstaller::updateSessionAppLabel(jint sessionId, ref<java::lang::CharSequence> appLabel) { return call_method<SCAPIX_META_STRING("updateSessionAppLabel"), void>(sessionId, appLabel); }
inline void PackageInstaller::abandonSession(jint sessionId) { return call_method<SCAPIX_META_STRING("abandonSession"), void>(sessionId); }
inline ref<android::content::pm::PackageInstaller_SessionInfo> PackageInstaller::getSessionInfo(jint sessionId) { return call_method<SCAPIX_META_STRING("getSessionInfo"), ref<android::content::pm::PackageInstaller_SessionInfo>>(sessionId); }
inline ref<java::util::List> PackageInstaller::getAllSessions() { return call_method<SCAPIX_META_STRING("getAllSessions"), ref<java::util::List>>(); }
inline ref<java::util::List> PackageInstaller::getMySessions() { return call_method<SCAPIX_META_STRING("getMySessions"), ref<java::util::List>>(); }
inline void PackageInstaller::uninstall(ref<java::lang::String> packageName, ref<android::content::IntentSender> statusReceiver) { return call_method<SCAPIX_META_STRING("uninstall"), void>(packageName, statusReceiver); }
inline void PackageInstaller::uninstall(ref<android::content::pm::VersionedPackage> versionedPackage, ref<android::content::IntentSender> statusReceiver) { return call_method<SCAPIX_META_STRING("uninstall"), void>(versionedPackage, statusReceiver); }
inline void PackageInstaller::registerSessionCallback(ref<android::content::pm::PackageInstaller_SessionCallback> callback) { return call_method<SCAPIX_META_STRING("registerSessionCallback"), void>(callback); }
inline void PackageInstaller::registerSessionCallback(ref<android::content::pm::PackageInstaller_SessionCallback> callback, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("registerSessionCallback"), void>(callback, handler); }
inline void PackageInstaller::unregisterSessionCallback(ref<android::content::pm::PackageInstaller_SessionCallback> callback) { return call_method<SCAPIX_META_STRING("unregisterSessionCallback"), void>(callback); }

} // namespace android::content::pm
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_PM_PACKAGEINSTALLER_H
