// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_CONTENT_CLIPDESCRIPTION_H
#define SCAPIX_ANDROID_CONTENT_CLIPDESCRIPTION_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::os { class PersistableBundle; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::content {

class ClipDescription : public object_base<SCAPIX_META_STRING("android/content/ClipDescription"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static ref<java::lang::String> MIMETYPE_TEXT_HTML_();
	static ref<java::lang::String> MIMETYPE_TEXT_INTENT_();
	static ref<java::lang::String> MIMETYPE_TEXT_PLAIN_();
	static ref<java::lang::String> MIMETYPE_TEXT_URILIST_();

	static ref<ClipDescription> new_object(ref<java::lang::CharSequence> label, ref<link::java::array<java::lang::String>> mimeTypes);
	static ref<ClipDescription> new_object(ref<android::content::ClipDescription> o);
	static jboolean compareMimeTypes(ref<java::lang::String> concreteType, ref<java::lang::String> desiredType);
	jlong getTimestamp();
	ref<java::lang::CharSequence> getLabel();
	jboolean hasMimeType(ref<java::lang::String> mimeType);
	ref<link::java::array<java::lang::String>> filterMimeTypes(ref<java::lang::String> mimeType);
	jint getMimeTypeCount();
	ref<java::lang::String> getMimeType(jint index);
	ref<android::os::PersistableBundle> getExtras();
	void setExtras(ref<android::os::PersistableBundle> extras);
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);

protected:

	ClipDescription(handle_type h) : base_(h) {}

};

} // namespace android::content
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::content {

inline ref<android::os::Parcelable_Creator> ClipDescription::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<java::lang::String> ClipDescription::MIMETYPE_TEXT_HTML_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_TEXT_HTML"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ClipDescription::MIMETYPE_TEXT_INTENT_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_TEXT_INTENT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ClipDescription::MIMETYPE_TEXT_PLAIN_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_TEXT_PLAIN"), ref<java::lang::String>>(); }
inline ref<java::lang::String> ClipDescription::MIMETYPE_TEXT_URILIST_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_TEXT_URILIST"), ref<java::lang::String>>(); }
inline ref<ClipDescription> ClipDescription::new_object(ref<java::lang::CharSequence> label, ref<link::java::array<java::lang::String>> mimeTypes) { return base_::new_object(label, mimeTypes); }
inline ref<ClipDescription> ClipDescription::new_object(ref<android::content::ClipDescription> o) { return base_::new_object(o); }
inline jboolean ClipDescription::compareMimeTypes(ref<java::lang::String> concreteType, ref<java::lang::String> desiredType) { return call_static_method<SCAPIX_META_STRING("compareMimeTypes"), jboolean>(concreteType, desiredType); }
inline jlong ClipDescription::getTimestamp() { return call_method<SCAPIX_META_STRING("getTimestamp"), jlong>(); }
inline ref<java::lang::CharSequence> ClipDescription::getLabel() { return call_method<SCAPIX_META_STRING("getLabel"), ref<java::lang::CharSequence>>(); }
inline jboolean ClipDescription::hasMimeType(ref<java::lang::String> mimeType) { return call_method<SCAPIX_META_STRING("hasMimeType"), jboolean>(mimeType); }
inline ref<link::java::array<java::lang::String>> ClipDescription::filterMimeTypes(ref<java::lang::String> mimeType) { return call_method<SCAPIX_META_STRING("filterMimeTypes"), ref<link::java::array<java::lang::String>>>(mimeType); }
inline jint ClipDescription::getMimeTypeCount() { return call_method<SCAPIX_META_STRING("getMimeTypeCount"), jint>(); }
inline ref<java::lang::String> ClipDescription::getMimeType(jint index) { return call_method<SCAPIX_META_STRING("getMimeType"), ref<java::lang::String>>(index); }
inline ref<android::os::PersistableBundle> ClipDescription::getExtras() { return call_method<SCAPIX_META_STRING("getExtras"), ref<android::os::PersistableBundle>>(); }
inline void ClipDescription::setExtras(ref<android::os::PersistableBundle> extras) { return call_method<SCAPIX_META_STRING("setExtras"), void>(extras); }
inline ref<java::lang::String> ClipDescription::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint ClipDescription::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void ClipDescription::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }

} // namespace android::content
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_CLIPDESCRIPTION_H
