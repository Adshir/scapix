// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_CONTENT_SYNCADAPTERTYPE_H
#define SCAPIX_ANDROID_CONTENT_SYNCADAPTERTYPE_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::content {

class SyncAdapterType : public object_base<SCAPIX_META_STRING("android/content/SyncAdapterType"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	ref<java::lang::String> accountType();
	ref<java::lang::String> authority();
	jboolean isKey();

	static ref<SyncAdapterType> new_object(ref<java::lang::String> authority, ref<java::lang::String> accountType, jboolean userVisible, jboolean supportsUploading);
	static ref<SyncAdapterType> new_object(ref<android::os::Parcel> source);
	jboolean supportsUploading();
	jboolean isUserVisible();
	jboolean allowParallelSyncs();
	jboolean isAlwaysSyncable();
	ref<java::lang::String> getSettingsActivity();
	static ref<android::content::SyncAdapterType> newKey(ref<java::lang::String> authority, ref<java::lang::String> accountType);
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);

protected:

	SyncAdapterType(handle_type h) : base_(h) {}

};

} // namespace android::content
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::content {

inline ref<android::os::Parcelable_Creator> SyncAdapterType::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<java::lang::String> SyncAdapterType::accountType() { return get_field<SCAPIX_META_STRING("accountType"), ref<java::lang::String>>(); }
inline ref<java::lang::String> SyncAdapterType::authority() { return get_field<SCAPIX_META_STRING("authority"), ref<java::lang::String>>(); }
inline jboolean SyncAdapterType::isKey() { return get_field<SCAPIX_META_STRING("isKey"), jboolean>(); }
inline ref<SyncAdapterType> SyncAdapterType::new_object(ref<java::lang::String> authority, ref<java::lang::String> accountType, jboolean userVisible, jboolean supportsUploading) { return base_::new_object(authority, accountType, userVisible, supportsUploading); }
inline ref<SyncAdapterType> SyncAdapterType::new_object(ref<android::os::Parcel> source) { return base_::new_object(source); }
inline jboolean SyncAdapterType::supportsUploading() { return call_method<SCAPIX_META_STRING("supportsUploading"), jboolean>(); }
inline jboolean SyncAdapterType::isUserVisible() { return call_method<SCAPIX_META_STRING("isUserVisible"), jboolean>(); }
inline jboolean SyncAdapterType::allowParallelSyncs() { return call_method<SCAPIX_META_STRING("allowParallelSyncs"), jboolean>(); }
inline jboolean SyncAdapterType::isAlwaysSyncable() { return call_method<SCAPIX_META_STRING("isAlwaysSyncable"), jboolean>(); }
inline ref<java::lang::String> SyncAdapterType::getSettingsActivity() { return call_method<SCAPIX_META_STRING("getSettingsActivity"), ref<java::lang::String>>(); }
inline ref<android::content::SyncAdapterType> SyncAdapterType::newKey(ref<java::lang::String> authority, ref<java::lang::String> accountType) { return call_static_method<SCAPIX_META_STRING("newKey"), ref<android::content::SyncAdapterType>>(authority, accountType); }
inline jboolean SyncAdapterType::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint SyncAdapterType::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> SyncAdapterType::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint SyncAdapterType::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void SyncAdapterType::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }

} // namespace android::content
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_CONTENT_SYNCADAPTERTYPE_H
