// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_POINTF_H
#define SCAPIX_ANDROID_GRAPHICS_POINTF_H

namespace scapix::java_api {

namespace android::graphics { class Point; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::graphics {

class PointF : public object_base<SCAPIX_META_STRING("android/graphics/PointF"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	jfloat x();
	void x(jfloat);
	jfloat y();
	void y(jfloat);

	static ref<PointF> new_object();
	static ref<PointF> new_object(jfloat x, jfloat y);
	static ref<PointF> new_object(ref<android::graphics::Point> p);
	void set(jfloat x, jfloat y);
	void set(ref<android::graphics::PointF> p);
	void negate();
	void offset(jfloat dx, jfloat dy);
	jboolean equals(jfloat x, jfloat y);
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	ref<java::lang::String> toString();
	jfloat length();
	static jfloat length(jfloat x, jfloat y);
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint flags);
	void readFromParcel(ref<android::os::Parcel> in);

protected:

	PointF(handle_type h) : base_(h) {}

};

} // namespace android::graphics
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Point.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::graphics {

inline ref<android::os::Parcelable_Creator> PointF::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jfloat PointF::x() { return get_field<SCAPIX_META_STRING("x"), jfloat>(); }
inline void PointF::x(jfloat v) { set_field<SCAPIX_META_STRING("x"), jfloat>(v); }
inline jfloat PointF::y() { return get_field<SCAPIX_META_STRING("y"), jfloat>(); }
inline void PointF::y(jfloat v) { set_field<SCAPIX_META_STRING("y"), jfloat>(v); }
inline ref<PointF> PointF::new_object() { return base_::new_object(); }
inline ref<PointF> PointF::new_object(jfloat x, jfloat y) { return base_::new_object(x, y); }
inline ref<PointF> PointF::new_object(ref<android::graphics::Point> p) { return base_::new_object(p); }
inline void PointF::set(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("set"), void>(x, y); }
inline void PointF::set(ref<android::graphics::PointF> p) { return call_method<SCAPIX_META_STRING("set"), void>(p); }
inline void PointF::negate() { return call_method<SCAPIX_META_STRING("negate"), void>(); }
inline void PointF::offset(jfloat dx, jfloat dy) { return call_method<SCAPIX_META_STRING("offset"), void>(dx, dy); }
inline jboolean PointF::equals(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(x, y); }
inline jboolean PointF::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint PointF::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> PointF::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jfloat PointF::length() { return call_method<SCAPIX_META_STRING("length"), jfloat>(); }
inline jfloat PointF::length(jfloat x, jfloat y) { return call_static_method<SCAPIX_META_STRING("length"), jfloat>(x, y); }
inline jint PointF::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void PointF::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }
inline void PointF::readFromParcel(ref<android::os::Parcel> in) { return call_method<SCAPIX_META_STRING("readFromParcel"), void>(in); }

} // namespace android::graphics
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_POINTF_H
