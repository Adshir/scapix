// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_RECT_H
#define SCAPIX_ANDROID_GRAPHICS_RECT_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::graphics {

class Rect : public object_base<SCAPIX_META_STRING("android/graphics/Rect"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	jint bottom();
	void bottom(jint);
	jint left();
	void left(jint);
	jint right();
	void right(jint);
	jint top();
	void top(jint);

	static ref<Rect> new_object();
	static ref<Rect> new_object(jint left, jint top, jint right, jint bottom);
	static ref<Rect> new_object(ref<android::graphics::Rect> r);
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	ref<java::lang::String> toString();
	ref<java::lang::String> toShortString();
	ref<java::lang::String> flattenToString();
	static ref<android::graphics::Rect> unflattenFromString(ref<java::lang::String> str);
	jboolean isEmpty();
	jint width();
	jint height();
	jint centerX();
	jint centerY();
	jfloat exactCenterX();
	jfloat exactCenterY();
	void setEmpty();
	void set(jint left, jint top, jint right, jint bottom);
	void set(ref<android::graphics::Rect> src);
	void offset(jint dx, jint dy);
	void offsetTo(jint newLeft, jint newTop);
	void inset(jint dx, jint dy);
	jboolean contains(jint x, jint y);
	jboolean contains(jint left, jint top, jint right, jint bottom);
	jboolean contains(ref<android::graphics::Rect> r);
	jboolean intersect(jint left, jint top, jint right, jint bottom);
	jboolean intersect(ref<android::graphics::Rect> r);
	jboolean setIntersect(ref<android::graphics::Rect> a, ref<android::graphics::Rect> b);
	jboolean intersects(jint left, jint top, jint right, jint bottom);
	static jboolean intersects(ref<android::graphics::Rect> a, ref<android::graphics::Rect> b);
	void union_(jint left, jint top, jint right, jint bottom);
	void union_(ref<android::graphics::Rect> r);
	void union_(jint x, jint y);
	void sort();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint flags);
	void readFromParcel(ref<android::os::Parcel> in);

protected:

	Rect(handle_type h) : base_(h) {}

};

} // namespace android::graphics
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::graphics {

inline ref<android::os::Parcelable_Creator> Rect::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint Rect::bottom() { return get_field<SCAPIX_META_STRING("bottom"), jint>(); }
inline void Rect::bottom(jint v) { set_field<SCAPIX_META_STRING("bottom"), jint>(v); }
inline jint Rect::left() { return get_field<SCAPIX_META_STRING("left"), jint>(); }
inline void Rect::left(jint v) { set_field<SCAPIX_META_STRING("left"), jint>(v); }
inline jint Rect::right() { return get_field<SCAPIX_META_STRING("right"), jint>(); }
inline void Rect::right(jint v) { set_field<SCAPIX_META_STRING("right"), jint>(v); }
inline jint Rect::top() { return get_field<SCAPIX_META_STRING("top"), jint>(); }
inline void Rect::top(jint v) { set_field<SCAPIX_META_STRING("top"), jint>(v); }
inline ref<Rect> Rect::new_object() { return base_::new_object(); }
inline ref<Rect> Rect::new_object(jint left, jint top, jint right, jint bottom) { return base_::new_object(left, top, right, bottom); }
inline ref<Rect> Rect::new_object(ref<android::graphics::Rect> r) { return base_::new_object(r); }
inline jboolean Rect::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint Rect::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> Rect::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Rect::toShortString() { return call_method<SCAPIX_META_STRING("toShortString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Rect::flattenToString() { return call_method<SCAPIX_META_STRING("flattenToString"), ref<java::lang::String>>(); }
inline ref<android::graphics::Rect> Rect::unflattenFromString(ref<java::lang::String> str) { return call_static_method<SCAPIX_META_STRING("unflattenFromString"), ref<android::graphics::Rect>>(str); }
inline jboolean Rect::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline jint Rect::width() { return call_method<SCAPIX_META_STRING("width"), jint>(); }
inline jint Rect::height() { return call_method<SCAPIX_META_STRING("height"), jint>(); }
inline jint Rect::centerX() { return call_method<SCAPIX_META_STRING("centerX"), jint>(); }
inline jint Rect::centerY() { return call_method<SCAPIX_META_STRING("centerY"), jint>(); }
inline jfloat Rect::exactCenterX() { return call_method<SCAPIX_META_STRING("exactCenterX"), jfloat>(); }
inline jfloat Rect::exactCenterY() { return call_method<SCAPIX_META_STRING("exactCenterY"), jfloat>(); }
inline void Rect::setEmpty() { return call_method<SCAPIX_META_STRING("setEmpty"), void>(); }
inline void Rect::set(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("set"), void>(left, top, right, bottom); }
inline void Rect::set(ref<android::graphics::Rect> src) { return call_method<SCAPIX_META_STRING("set"), void>(src); }
inline void Rect::offset(jint dx, jint dy) { return call_method<SCAPIX_META_STRING("offset"), void>(dx, dy); }
inline void Rect::offsetTo(jint newLeft, jint newTop) { return call_method<SCAPIX_META_STRING("offsetTo"), void>(newLeft, newTop); }
inline void Rect::inset(jint dx, jint dy) { return call_method<SCAPIX_META_STRING("inset"), void>(dx, dy); }
inline jboolean Rect::contains(jint x, jint y) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(x, y); }
inline jboolean Rect::contains(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(left, top, right, bottom); }
inline jboolean Rect::contains(ref<android::graphics::Rect> r) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(r); }
inline jboolean Rect::intersect(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("intersect"), jboolean>(left, top, right, bottom); }
inline jboolean Rect::intersect(ref<android::graphics::Rect> r) { return call_method<SCAPIX_META_STRING("intersect"), jboolean>(r); }
inline jboolean Rect::setIntersect(ref<android::graphics::Rect> a, ref<android::graphics::Rect> b) { return call_method<SCAPIX_META_STRING("setIntersect"), jboolean>(a, b); }
inline jboolean Rect::intersects(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("intersects"), jboolean>(left, top, right, bottom); }
inline jboolean Rect::intersects(ref<android::graphics::Rect> a, ref<android::graphics::Rect> b) { return call_static_method<SCAPIX_META_STRING("intersects"), jboolean>(a, b); }
inline void Rect::union_(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("union"), void>(left, top, right, bottom); }
inline void Rect::union_(ref<android::graphics::Rect> r) { return call_method<SCAPIX_META_STRING("union"), void>(r); }
inline void Rect::union_(jint x, jint y) { return call_method<SCAPIX_META_STRING("union"), void>(x, y); }
inline void Rect::sort() { return call_method<SCAPIX_META_STRING("sort"), void>(); }
inline jint Rect::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void Rect::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }
inline void Rect::readFromParcel(ref<android::os::Parcel> in) { return call_method<SCAPIX_META_STRING("readFromParcel"), void>(in); }

} // namespace android::graphics
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_RECT_H
