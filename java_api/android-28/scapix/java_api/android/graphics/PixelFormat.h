// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_PIXELFORMAT_H
#define SCAPIX_ANDROID_GRAPHICS_PIXELFORMAT_H

namespace scapix::java_api {
namespace android::graphics {

class PixelFormat : public object_base<SCAPIX_META_STRING("android/graphics/PixelFormat"),
	java::lang::Object>
{
public:

	static jint A_8_();
	static jint JPEG_();
	static jint LA_88_();
	static jint L_8_();
	static jint OPAQUE_();
	static jint RGBA_1010102_();
	static jint RGBA_4444_();
	static jint RGBA_5551_();
	static jint RGBA_8888_();
	static jint RGBA_F16_();
	static jint RGBX_8888_();
	static jint RGB_332_();
	static jint RGB_565_();
	static jint RGB_888_();
	static jint TRANSLUCENT_();
	static jint TRANSPARENT_();
	static jint UNKNOWN_();
	static jint YCbCr_420_SP();
	static jint YCbCr_422_I();
	static jint YCbCr_422_SP();
	jint bitsPerPixel();
	void bitsPerPixel(jint);
	jint bytesPerPixel();
	void bytesPerPixel(jint);

	static ref<PixelFormat> new_object();
	static void getPixelFormatInfo(jint format, ref<android::graphics::PixelFormat> info);
	static jboolean formatHasAlpha(jint format);

protected:

	PixelFormat(handle_type h) : base_(h) {}

};

} // namespace android::graphics
} // namespace scapix::java_api


namespace scapix::java_api {
namespace android::graphics {

inline jint PixelFormat::A_8_() { return get_static_field<SCAPIX_META_STRING("A_8"), jint>(); }
inline jint PixelFormat::JPEG_() { return get_static_field<SCAPIX_META_STRING("JPEG"), jint>(); }
inline jint PixelFormat::LA_88_() { return get_static_field<SCAPIX_META_STRING("LA_88"), jint>(); }
inline jint PixelFormat::L_8_() { return get_static_field<SCAPIX_META_STRING("L_8"), jint>(); }
inline jint PixelFormat::OPAQUE_() { return get_static_field<SCAPIX_META_STRING("OPAQUE"), jint>(); }
inline jint PixelFormat::RGBA_1010102_() { return get_static_field<SCAPIX_META_STRING("RGBA_1010102"), jint>(); }
inline jint PixelFormat::RGBA_4444_() { return get_static_field<SCAPIX_META_STRING("RGBA_4444"), jint>(); }
inline jint PixelFormat::RGBA_5551_() { return get_static_field<SCAPIX_META_STRING("RGBA_5551"), jint>(); }
inline jint PixelFormat::RGBA_8888_() { return get_static_field<SCAPIX_META_STRING("RGBA_8888"), jint>(); }
inline jint PixelFormat::RGBA_F16_() { return get_static_field<SCAPIX_META_STRING("RGBA_F16"), jint>(); }
inline jint PixelFormat::RGBX_8888_() { return get_static_field<SCAPIX_META_STRING("RGBX_8888"), jint>(); }
inline jint PixelFormat::RGB_332_() { return get_static_field<SCAPIX_META_STRING("RGB_332"), jint>(); }
inline jint PixelFormat::RGB_565_() { return get_static_field<SCAPIX_META_STRING("RGB_565"), jint>(); }
inline jint PixelFormat::RGB_888_() { return get_static_field<SCAPIX_META_STRING("RGB_888"), jint>(); }
inline jint PixelFormat::TRANSLUCENT_() { return get_static_field<SCAPIX_META_STRING("TRANSLUCENT"), jint>(); }
inline jint PixelFormat::TRANSPARENT_() { return get_static_field<SCAPIX_META_STRING("TRANSPARENT"), jint>(); }
inline jint PixelFormat::UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("UNKNOWN"), jint>(); }
inline jint PixelFormat::YCbCr_420_SP() { return get_static_field<SCAPIX_META_STRING("YCbCr_420_SP"), jint>(); }
inline jint PixelFormat::YCbCr_422_I() { return get_static_field<SCAPIX_META_STRING("YCbCr_422_I"), jint>(); }
inline jint PixelFormat::YCbCr_422_SP() { return get_static_field<SCAPIX_META_STRING("YCbCr_422_SP"), jint>(); }
inline jint PixelFormat::bitsPerPixel() { return get_field<SCAPIX_META_STRING("bitsPerPixel"), jint>(); }
inline void PixelFormat::bitsPerPixel(jint v) { set_field<SCAPIX_META_STRING("bitsPerPixel"), jint>(v); }
inline jint PixelFormat::bytesPerPixel() { return get_field<SCAPIX_META_STRING("bytesPerPixel"), jint>(); }
inline void PixelFormat::bytesPerPixel(jint v) { set_field<SCAPIX_META_STRING("bytesPerPixel"), jint>(v); }
inline ref<PixelFormat> PixelFormat::new_object() { return base_::new_object(); }
inline void PixelFormat::getPixelFormatInfo(jint format, ref<android::graphics::PixelFormat> info) { return call_static_method<SCAPIX_META_STRING("getPixelFormatInfo"), void>(format, info); }
inline jboolean PixelFormat::formatHasAlpha(jint format) { return call_static_method<SCAPIX_META_STRING("formatHasAlpha"), jboolean>(format); }

} // namespace android::graphics
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_PIXELFORMAT_H
