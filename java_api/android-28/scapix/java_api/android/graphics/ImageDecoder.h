// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_IMAGEDECODER_H
#define SCAPIX_ANDROID_GRAPHICS_IMAGEDECODER_H

namespace scapix::java_api {

namespace android::content { class ContentResolver; }
namespace android::content::res { class AssetManager; }
namespace android::content::res { class Resources; }
namespace android::graphics { class Bitmap; }
namespace android::graphics { class ColorSpace; }
namespace android::graphics { class ImageDecoder_OnHeaderDecodedListener; }
namespace android::graphics { class ImageDecoder_OnPartialImageListener; }
namespace android::graphics { class ImageDecoder_Source; }
namespace android::graphics { class PostProcessor; }
namespace android::graphics { class Rect; }
namespace android::graphics::drawable { class Drawable; }
namespace android::net { class Uri; }
namespace java::io { class File; }
namespace java::lang { class String; }
namespace java::nio { class ByteBuffer; }
namespace android::graphics { class ImageDecoder_ImageInfo; }
namespace android::graphics { class ImageDecoder_DecodeException; }

namespace android::graphics {

class ImageDecoder : public object_base<SCAPIX_META_STRING("android/graphics/ImageDecoder"),
	java::lang::Object,
	java::lang::AutoCloseable>
{
public:

	using Source = ImageDecoder_Source;
	using OnPartialImageListener = ImageDecoder_OnPartialImageListener;
	using OnHeaderDecodedListener = ImageDecoder_OnHeaderDecodedListener;
	using ImageInfo = ImageDecoder_ImageInfo;
	using DecodeException = ImageDecoder_DecodeException;

	static jint ALLOCATOR_DEFAULT_();
	static jint ALLOCATOR_HARDWARE_();
	static jint ALLOCATOR_SHARED_MEMORY_();
	static jint ALLOCATOR_SOFTWARE_();
	static jint MEMORY_POLICY_DEFAULT_();
	static jint MEMORY_POLICY_LOW_RAM_();

	static ref<android::graphics::ImageDecoder_Source> createSource(ref<android::content::res::Resources> res, jint resId);
	static ref<android::graphics::ImageDecoder_Source> createSource(ref<android::content::ContentResolver> cr, ref<android::net::Uri> uri);
	static ref<android::graphics::ImageDecoder_Source> createSource(ref<android::content::res::AssetManager> assets, ref<java::lang::String> fileName);
	static ref<android::graphics::ImageDecoder_Source> createSource(ref<java::nio::ByteBuffer> buffer);
	static ref<android::graphics::ImageDecoder_Source> createSource(ref<java::io::File> file);
	void setTargetSize(jint width, jint height);
	void setTargetSampleSize(jint sampleSize);
	void setAllocator(jint allocator);
	jint getAllocator();
	void setUnpremultipliedRequired(jboolean unpremultipliedRequired);
	jboolean isUnpremultipliedRequired();
	void setPostProcessor(ref<android::graphics::PostProcessor> postProcessor);
	ref<android::graphics::PostProcessor> getPostProcessor();
	void setOnPartialImageListener(ref<android::graphics::ImageDecoder_OnPartialImageListener> listener);
	ref<android::graphics::ImageDecoder_OnPartialImageListener> getOnPartialImageListener();
	void setCrop(ref<android::graphics::Rect> subset);
	ref<android::graphics::Rect> getCrop();
	void setMutableRequired(jboolean mutable_);
	jboolean isMutableRequired();
	void setMemorySizePolicy(jint policy);
	jint getMemorySizePolicy();
	void setDecodeAsAlphaMaskEnabled(jboolean enabled);
	jboolean isDecodeAsAlphaMaskEnabled();
	void setTargetColorSpace(ref<android::graphics::ColorSpace> colorSpace);
	void close();
	static ref<android::graphics::drawable::Drawable> decodeDrawable(ref<android::graphics::ImageDecoder_Source> src, ref<android::graphics::ImageDecoder_OnHeaderDecodedListener> listener);
	static ref<android::graphics::drawable::Drawable> decodeDrawable(ref<android::graphics::ImageDecoder_Source> src);
	static ref<android::graphics::Bitmap> decodeBitmap(ref<android::graphics::ImageDecoder_Source> src, ref<android::graphics::ImageDecoder_OnHeaderDecodedListener> listener);
	static ref<android::graphics::Bitmap> decodeBitmap(ref<android::graphics::ImageDecoder_Source> src);

protected:

	ImageDecoder(handle_type h) : base_(h) {}

};

} // namespace android::graphics
} // namespace scapix::java_api

#include <scapix/java_api/android/content/ContentResolver.h>
#include <scapix/java_api/android/content/res/AssetManager.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/ColorSpace.h>
#include <scapix/java_api/android/graphics/ImageDecoder_OnHeaderDecodedListener.h>
#include <scapix/java_api/android/graphics/ImageDecoder_OnPartialImageListener.h>
#include <scapix/java_api/android/graphics/ImageDecoder_Source.h>
#include <scapix/java_api/android/graphics/PostProcessor.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>

namespace scapix::java_api {
namespace android::graphics {

inline jint ImageDecoder::ALLOCATOR_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("ALLOCATOR_DEFAULT"), jint>(); }
inline jint ImageDecoder::ALLOCATOR_HARDWARE_() { return get_static_field<SCAPIX_META_STRING("ALLOCATOR_HARDWARE"), jint>(); }
inline jint ImageDecoder::ALLOCATOR_SHARED_MEMORY_() { return get_static_field<SCAPIX_META_STRING("ALLOCATOR_SHARED_MEMORY"), jint>(); }
inline jint ImageDecoder::ALLOCATOR_SOFTWARE_() { return get_static_field<SCAPIX_META_STRING("ALLOCATOR_SOFTWARE"), jint>(); }
inline jint ImageDecoder::MEMORY_POLICY_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("MEMORY_POLICY_DEFAULT"), jint>(); }
inline jint ImageDecoder::MEMORY_POLICY_LOW_RAM_() { return get_static_field<SCAPIX_META_STRING("MEMORY_POLICY_LOW_RAM"), jint>(); }
inline ref<android::graphics::ImageDecoder_Source> ImageDecoder::createSource(ref<android::content::res::Resources> res, jint resId) { return call_static_method<SCAPIX_META_STRING("createSource"), ref<android::graphics::ImageDecoder_Source>>(res, resId); }
inline ref<android::graphics::ImageDecoder_Source> ImageDecoder::createSource(ref<android::content::ContentResolver> cr, ref<android::net::Uri> uri) { return call_static_method<SCAPIX_META_STRING("createSource"), ref<android::graphics::ImageDecoder_Source>>(cr, uri); }
inline ref<android::graphics::ImageDecoder_Source> ImageDecoder::createSource(ref<android::content::res::AssetManager> assets, ref<java::lang::String> fileName) { return call_static_method<SCAPIX_META_STRING("createSource"), ref<android::graphics::ImageDecoder_Source>>(assets, fileName); }
inline ref<android::graphics::ImageDecoder_Source> ImageDecoder::createSource(ref<java::nio::ByteBuffer> buffer) { return call_static_method<SCAPIX_META_STRING("createSource"), ref<android::graphics::ImageDecoder_Source>>(buffer); }
inline ref<android::graphics::ImageDecoder_Source> ImageDecoder::createSource(ref<java::io::File> file) { return call_static_method<SCAPIX_META_STRING("createSource"), ref<android::graphics::ImageDecoder_Source>>(file); }
inline void ImageDecoder::setTargetSize(jint width, jint height) { return call_method<SCAPIX_META_STRING("setTargetSize"), void>(width, height); }
inline void ImageDecoder::setTargetSampleSize(jint sampleSize) { return call_method<SCAPIX_META_STRING("setTargetSampleSize"), void>(sampleSize); }
inline void ImageDecoder::setAllocator(jint allocator) { return call_method<SCAPIX_META_STRING("setAllocator"), void>(allocator); }
inline jint ImageDecoder::getAllocator() { return call_method<SCAPIX_META_STRING("getAllocator"), jint>(); }
inline void ImageDecoder::setUnpremultipliedRequired(jboolean unpremultipliedRequired) { return call_method<SCAPIX_META_STRING("setUnpremultipliedRequired"), void>(unpremultipliedRequired); }
inline jboolean ImageDecoder::isUnpremultipliedRequired() { return call_method<SCAPIX_META_STRING("isUnpremultipliedRequired"), jboolean>(); }
inline void ImageDecoder::setPostProcessor(ref<android::graphics::PostProcessor> postProcessor) { return call_method<SCAPIX_META_STRING("setPostProcessor"), void>(postProcessor); }
inline ref<android::graphics::PostProcessor> ImageDecoder::getPostProcessor() { return call_method<SCAPIX_META_STRING("getPostProcessor"), ref<android::graphics::PostProcessor>>(); }
inline void ImageDecoder::setOnPartialImageListener(ref<android::graphics::ImageDecoder_OnPartialImageListener> listener) { return call_method<SCAPIX_META_STRING("setOnPartialImageListener"), void>(listener); }
inline ref<android::graphics::ImageDecoder_OnPartialImageListener> ImageDecoder::getOnPartialImageListener() { return call_method<SCAPIX_META_STRING("getOnPartialImageListener"), ref<android::graphics::ImageDecoder_OnPartialImageListener>>(); }
inline void ImageDecoder::setCrop(ref<android::graphics::Rect> subset) { return call_method<SCAPIX_META_STRING("setCrop"), void>(subset); }
inline ref<android::graphics::Rect> ImageDecoder::getCrop() { return call_method<SCAPIX_META_STRING("getCrop"), ref<android::graphics::Rect>>(); }
inline void ImageDecoder::setMutableRequired(jboolean mutable_) { return call_method<SCAPIX_META_STRING("setMutableRequired"), void>(mutable_); }
inline jboolean ImageDecoder::isMutableRequired() { return call_method<SCAPIX_META_STRING("isMutableRequired"), jboolean>(); }
inline void ImageDecoder::setMemorySizePolicy(jint policy) { return call_method<SCAPIX_META_STRING("setMemorySizePolicy"), void>(policy); }
inline jint ImageDecoder::getMemorySizePolicy() { return call_method<SCAPIX_META_STRING("getMemorySizePolicy"), jint>(); }
inline void ImageDecoder::setDecodeAsAlphaMaskEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setDecodeAsAlphaMaskEnabled"), void>(enabled); }
inline jboolean ImageDecoder::isDecodeAsAlphaMaskEnabled() { return call_method<SCAPIX_META_STRING("isDecodeAsAlphaMaskEnabled"), jboolean>(); }
inline void ImageDecoder::setTargetColorSpace(ref<android::graphics::ColorSpace> colorSpace) { return call_method<SCAPIX_META_STRING("setTargetColorSpace"), void>(colorSpace); }
inline void ImageDecoder::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline ref<android::graphics::drawable::Drawable> ImageDecoder::decodeDrawable(ref<android::graphics::ImageDecoder_Source> src, ref<android::graphics::ImageDecoder_OnHeaderDecodedListener> listener) { return call_static_method<SCAPIX_META_STRING("decodeDrawable"), ref<android::graphics::drawable::Drawable>>(src, listener); }
inline ref<android::graphics::drawable::Drawable> ImageDecoder::decodeDrawable(ref<android::graphics::ImageDecoder_Source> src) { return call_static_method<SCAPIX_META_STRING("decodeDrawable"), ref<android::graphics::drawable::Drawable>>(src); }
inline ref<android::graphics::Bitmap> ImageDecoder::decodeBitmap(ref<android::graphics::ImageDecoder_Source> src, ref<android::graphics::ImageDecoder_OnHeaderDecodedListener> listener) { return call_static_method<SCAPIX_META_STRING("decodeBitmap"), ref<android::graphics::Bitmap>>(src, listener); }
inline ref<android::graphics::Bitmap> ImageDecoder::decodeBitmap(ref<android::graphics::ImageDecoder_Source> src) { return call_static_method<SCAPIX_META_STRING("decodeBitmap"), ref<android::graphics::Bitmap>>(src); }

} // namespace android::graphics
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_IMAGEDECODER_H
