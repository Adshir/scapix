// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_RECTF_H
#define SCAPIX_ANDROID_GRAPHICS_RECTF_H

namespace scapix::java_api {

namespace android::graphics { class Rect; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::graphics {

class RectF : public object_base<SCAPIX_META_STRING("android/graphics/RectF"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	jfloat bottom();
	void bottom(jfloat);
	jfloat left();
	void left(jfloat);
	jfloat right();
	void right(jfloat);
	jfloat top();
	void top(jfloat);

	static ref<RectF> new_object();
	static ref<RectF> new_object(jfloat left, jfloat top, jfloat right, jfloat bottom);
	static ref<RectF> new_object(ref<android::graphics::RectF> r);
	static ref<RectF> new_object(ref<android::graphics::Rect> r);
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	ref<java::lang::String> toString();
	ref<java::lang::String> toShortString();
	jboolean isEmpty();
	jfloat width();
	jfloat height();
	jfloat centerX();
	jfloat centerY();
	void setEmpty();
	void set(jfloat left, jfloat top, jfloat right, jfloat bottom);
	void set(ref<android::graphics::RectF> src);
	void set(ref<android::graphics::Rect> src);
	void offset(jfloat dx, jfloat dy);
	void offsetTo(jfloat newLeft, jfloat newTop);
	void inset(jfloat dx, jfloat dy);
	jboolean contains(jfloat x, jfloat y);
	jboolean contains(jfloat left, jfloat top, jfloat right, jfloat bottom);
	jboolean contains(ref<android::graphics::RectF> r);
	jboolean intersect(jfloat left, jfloat top, jfloat right, jfloat bottom);
	jboolean intersect(ref<android::graphics::RectF> r);
	jboolean setIntersect(ref<android::graphics::RectF> a, ref<android::graphics::RectF> b);
	jboolean intersects(jfloat left, jfloat top, jfloat right, jfloat bottom);
	static jboolean intersects(ref<android::graphics::RectF> a, ref<android::graphics::RectF> b);
	void round(ref<android::graphics::Rect> dst);
	void roundOut(ref<android::graphics::Rect> dst);
	void union_(jfloat left, jfloat top, jfloat right, jfloat bottom);
	void union_(ref<android::graphics::RectF> r);
	void union_(jfloat x, jfloat y);
	void sort();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint flags);
	void readFromParcel(ref<android::os::Parcel> in);

protected:

	RectF(handle_type h) : base_(h) {}

};

} // namespace android::graphics
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::graphics {

inline ref<android::os::Parcelable_Creator> RectF::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jfloat RectF::bottom() { return get_field<SCAPIX_META_STRING("bottom"), jfloat>(); }
inline void RectF::bottom(jfloat v) { set_field<SCAPIX_META_STRING("bottom"), jfloat>(v); }
inline jfloat RectF::left() { return get_field<SCAPIX_META_STRING("left"), jfloat>(); }
inline void RectF::left(jfloat v) { set_field<SCAPIX_META_STRING("left"), jfloat>(v); }
inline jfloat RectF::right() { return get_field<SCAPIX_META_STRING("right"), jfloat>(); }
inline void RectF::right(jfloat v) { set_field<SCAPIX_META_STRING("right"), jfloat>(v); }
inline jfloat RectF::top() { return get_field<SCAPIX_META_STRING("top"), jfloat>(); }
inline void RectF::top(jfloat v) { set_field<SCAPIX_META_STRING("top"), jfloat>(v); }
inline ref<RectF> RectF::new_object() { return base_::new_object(); }
inline ref<RectF> RectF::new_object(jfloat left, jfloat top, jfloat right, jfloat bottom) { return base_::new_object(left, top, right, bottom); }
inline ref<RectF> RectF::new_object(ref<android::graphics::RectF> r) { return base_::new_object(r); }
inline ref<RectF> RectF::new_object(ref<android::graphics::Rect> r) { return base_::new_object(r); }
inline jboolean RectF::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint RectF::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> RectF::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> RectF::toShortString() { return call_method<SCAPIX_META_STRING("toShortString"), ref<java::lang::String>>(); }
inline jboolean RectF::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline jfloat RectF::width() { return call_method<SCAPIX_META_STRING("width"), jfloat>(); }
inline jfloat RectF::height() { return call_method<SCAPIX_META_STRING("height"), jfloat>(); }
inline jfloat RectF::centerX() { return call_method<SCAPIX_META_STRING("centerX"), jfloat>(); }
inline jfloat RectF::centerY() { return call_method<SCAPIX_META_STRING("centerY"), jfloat>(); }
inline void RectF::setEmpty() { return call_method<SCAPIX_META_STRING("setEmpty"), void>(); }
inline void RectF::set(jfloat left, jfloat top, jfloat right, jfloat bottom) { return call_method<SCAPIX_META_STRING("set"), void>(left, top, right, bottom); }
inline void RectF::set(ref<android::graphics::RectF> src) { return call_method<SCAPIX_META_STRING("set"), void>(src); }
inline void RectF::set(ref<android::graphics::Rect> src) { return call_method<SCAPIX_META_STRING("set"), void>(src); }
inline void RectF::offset(jfloat dx, jfloat dy) { return call_method<SCAPIX_META_STRING("offset"), void>(dx, dy); }
inline void RectF::offsetTo(jfloat newLeft, jfloat newTop) { return call_method<SCAPIX_META_STRING("offsetTo"), void>(newLeft, newTop); }
inline void RectF::inset(jfloat dx, jfloat dy) { return call_method<SCAPIX_META_STRING("inset"), void>(dx, dy); }
inline jboolean RectF::contains(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(x, y); }
inline jboolean RectF::contains(jfloat left, jfloat top, jfloat right, jfloat bottom) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(left, top, right, bottom); }
inline jboolean RectF::contains(ref<android::graphics::RectF> r) { return call_method<SCAPIX_META_STRING("contains"), jboolean>(r); }
inline jboolean RectF::intersect(jfloat left, jfloat top, jfloat right, jfloat bottom) { return call_method<SCAPIX_META_STRING("intersect"), jboolean>(left, top, right, bottom); }
inline jboolean RectF::intersect(ref<android::graphics::RectF> r) { return call_method<SCAPIX_META_STRING("intersect"), jboolean>(r); }
inline jboolean RectF::setIntersect(ref<android::graphics::RectF> a, ref<android::graphics::RectF> b) { return call_method<SCAPIX_META_STRING("setIntersect"), jboolean>(a, b); }
inline jboolean RectF::intersects(jfloat left, jfloat top, jfloat right, jfloat bottom) { return call_method<SCAPIX_META_STRING("intersects"), jboolean>(left, top, right, bottom); }
inline jboolean RectF::intersects(ref<android::graphics::RectF> a, ref<android::graphics::RectF> b) { return call_static_method<SCAPIX_META_STRING("intersects"), jboolean>(a, b); }
inline void RectF::round(ref<android::graphics::Rect> dst) { return call_method<SCAPIX_META_STRING("round"), void>(dst); }
inline void RectF::roundOut(ref<android::graphics::Rect> dst) { return call_method<SCAPIX_META_STRING("roundOut"), void>(dst); }
inline void RectF::union_(jfloat left, jfloat top, jfloat right, jfloat bottom) { return call_method<SCAPIX_META_STRING("union"), void>(left, top, right, bottom); }
inline void RectF::union_(ref<android::graphics::RectF> r) { return call_method<SCAPIX_META_STRING("union"), void>(r); }
inline void RectF::union_(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("union"), void>(x, y); }
inline void RectF::sort() { return call_method<SCAPIX_META_STRING("sort"), void>(); }
inline jint RectF::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void RectF::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }
inline void RectF::readFromParcel(ref<android::os::Parcel> in) { return call_method<SCAPIX_META_STRING("readFromParcel"), void>(in); }

} // namespace android::graphics
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_RECTF_H
