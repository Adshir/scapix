// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_CANVAS_H
#define SCAPIX_ANDROID_GRAPHICS_CANVAS_H

namespace scapix::java_api {

namespace android::graphics { class Bitmap; }
namespace android::graphics { class Canvas_EdgeType; }
namespace android::graphics { class Canvas_VertexMode; }
namespace android::graphics { class DrawFilter; }
namespace android::graphics { class Matrix; }
namespace android::graphics { class Paint; }
namespace android::graphics { class Path; }
namespace android::graphics { class Picture; }
namespace android::graphics { class PorterDuff_Mode; }
namespace android::graphics { class Rect; }
namespace android::graphics { class RectF; }
namespace android::graphics { class Region_Op; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::graphics {

class Canvas : public object_base<SCAPIX_META_STRING("android/graphics/Canvas"),
	java::lang::Object>
{
public:

	using VertexMode = Canvas_VertexMode;
	using EdgeType = Canvas_EdgeType;

	static jint ALL_SAVE_FLAG_();

	static ref<Canvas> new_object();
	static ref<Canvas> new_object(ref<android::graphics::Bitmap> bitmap);
	jboolean isHardwareAccelerated();
	void setBitmap(ref<android::graphics::Bitmap> bitmap);
	jboolean isOpaque();
	jint getWidth();
	jint getHeight();
	jint getDensity();
	void setDensity(jint density);
	jint getMaximumBitmapWidth();
	jint getMaximumBitmapHeight();
	jint save();
	jint saveLayer(ref<android::graphics::RectF> bounds, ref<android::graphics::Paint> paint, jint saveFlags);
	jint saveLayer(ref<android::graphics::RectF> bounds, ref<android::graphics::Paint> paint);
	jint saveLayer(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<android::graphics::Paint> paint, jint saveFlags);
	jint saveLayer(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<android::graphics::Paint> paint);
	jint saveLayerAlpha(ref<android::graphics::RectF> bounds, jint alpha, jint saveFlags);
	jint saveLayerAlpha(ref<android::graphics::RectF> bounds, jint alpha);
	jint saveLayerAlpha(jfloat left, jfloat top, jfloat right, jfloat bottom, jint alpha, jint saveFlags);
	jint saveLayerAlpha(jfloat left, jfloat top, jfloat right, jfloat bottom, jint alpha);
	void restore();
	jint getSaveCount();
	void restoreToCount(jint saveCount);
	void translate(jfloat dx, jfloat dy);
	void scale(jfloat sx, jfloat sy);
	void scale(jfloat sx, jfloat sy, jfloat px, jfloat py);
	void rotate(jfloat degrees);
	void rotate(jfloat degrees, jfloat px, jfloat py);
	void skew(jfloat sx, jfloat sy);
	void concat(ref<android::graphics::Matrix> matrix);
	void setMatrix(ref<android::graphics::Matrix> matrix);
	void getMatrix(ref<android::graphics::Matrix> ctm);
	ref<android::graphics::Matrix> getMatrix();
	jboolean clipRect(ref<android::graphics::RectF> rect, ref<android::graphics::Region_Op> op);
	jboolean clipRect(ref<android::graphics::Rect> rect, ref<android::graphics::Region_Op> op);
	jboolean clipRect(ref<android::graphics::RectF> rect);
	jboolean clipOutRect(ref<android::graphics::RectF> rect);
	jboolean clipRect(ref<android::graphics::Rect> rect);
	jboolean clipOutRect(ref<android::graphics::Rect> rect);
	jboolean clipRect(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<android::graphics::Region_Op> op);
	jboolean clipRect(jfloat left, jfloat top, jfloat right, jfloat bottom);
	jboolean clipOutRect(jfloat left, jfloat top, jfloat right, jfloat bottom);
	jboolean clipRect(jint left, jint top, jint right, jint bottom);
	jboolean clipOutRect(jint left, jint top, jint right, jint bottom);
	jboolean clipPath(ref<android::graphics::Path> path, ref<android::graphics::Region_Op> op);
	jboolean clipPath(ref<android::graphics::Path> path);
	jboolean clipOutPath(ref<android::graphics::Path> path);
	ref<android::graphics::DrawFilter> getDrawFilter();
	void setDrawFilter(ref<android::graphics::DrawFilter> filter);
	jboolean quickReject(ref<android::graphics::RectF> rect, ref<android::graphics::Canvas_EdgeType> type);
	jboolean quickReject(ref<android::graphics::Path> path, ref<android::graphics::Canvas_EdgeType> type);
	jboolean quickReject(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<android::graphics::Canvas_EdgeType> type);
	jboolean getClipBounds(ref<android::graphics::Rect> bounds);
	ref<android::graphics::Rect> getClipBounds();
	void drawPicture(ref<android::graphics::Picture> picture);
	void drawPicture(ref<android::graphics::Picture> picture, ref<android::graphics::RectF> dst);
	void drawPicture(ref<android::graphics::Picture> picture, ref<android::graphics::Rect> dst);
	void drawArc(ref<android::graphics::RectF> oval, jfloat startAngle, jfloat sweepAngle, jboolean useCenter, ref<android::graphics::Paint> paint);
	void drawArc(jfloat left, jfloat top, jfloat right, jfloat bottom, jfloat startAngle, jfloat sweepAngle, jboolean useCenter, ref<android::graphics::Paint> paint);
	void drawARGB(jint a, jint r, jint g, jint b);
	void drawBitmap(ref<android::graphics::Bitmap> bitmap, jfloat left, jfloat top, ref<android::graphics::Paint> paint);
	void drawBitmap(ref<android::graphics::Bitmap> bitmap, ref<android::graphics::Rect> src, ref<android::graphics::RectF> dst, ref<android::graphics::Paint> paint);
	void drawBitmap(ref<android::graphics::Bitmap> bitmap, ref<android::graphics::Rect> src, ref<android::graphics::Rect> dst, ref<android::graphics::Paint> paint);
	void drawBitmap(ref<link::java::array<jint>> colors, jint offset, jint stride, jfloat x, jfloat y, jint width, jint height, jboolean hasAlpha, ref<android::graphics::Paint> paint);
	void drawBitmap(ref<link::java::array<jint>> colors, jint offset, jint stride, jint x, jint y, jint width, jint height, jboolean hasAlpha, ref<android::graphics::Paint> paint);
	void drawBitmap(ref<android::graphics::Bitmap> bitmap, ref<android::graphics::Matrix> matrix, ref<android::graphics::Paint> paint);
	void drawBitmapMesh(ref<android::graphics::Bitmap> bitmap, jint meshWidth, jint meshHeight, ref<link::java::array<jfloat>> verts, jint vertOffset, ref<link::java::array<jint>> colors, jint colorOffset, ref<android::graphics::Paint> paint);
	void drawCircle(jfloat cx, jfloat cy, jfloat radius, ref<android::graphics::Paint> paint);
	void drawColor(jint color);
	void drawColor(jint color, ref<android::graphics::PorterDuff_Mode> mode);
	void drawLine(jfloat startX, jfloat startY, jfloat stopX, jfloat stopY, ref<android::graphics::Paint> paint);
	void drawLines(ref<link::java::array<jfloat>> pts, jint offset, jint count, ref<android::graphics::Paint> paint);
	void drawLines(ref<link::java::array<jfloat>> pts, ref<android::graphics::Paint> paint);
	void drawOval(ref<android::graphics::RectF> oval, ref<android::graphics::Paint> paint);
	void drawOval(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<android::graphics::Paint> paint);
	void drawPaint(ref<android::graphics::Paint> paint);
	void drawPath(ref<android::graphics::Path> path, ref<android::graphics::Paint> paint);
	void drawPoint(jfloat x, jfloat y, ref<android::graphics::Paint> paint);
	void drawPoints(ref<link::java::array<jfloat>> pts, jint offset, jint count, ref<android::graphics::Paint> paint);
	void drawPoints(ref<link::java::array<jfloat>> pts, ref<android::graphics::Paint> paint);
	void drawPosText(ref<link::java::array<jchar>> text, jint index, jint count, ref<link::java::array<jfloat>> pos, ref<android::graphics::Paint> paint);
	void drawPosText(ref<java::lang::String> text, ref<link::java::array<jfloat>> pos, ref<android::graphics::Paint> paint);
	void drawRect(ref<android::graphics::RectF> rect, ref<android::graphics::Paint> paint);
	void drawRect(ref<android::graphics::Rect> r, ref<android::graphics::Paint> paint);
	void drawRect(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<android::graphics::Paint> paint);
	void drawRGB(jint r, jint g, jint b);
	void drawRoundRect(ref<android::graphics::RectF> rect, jfloat rx, jfloat ry, ref<android::graphics::Paint> paint);
	void drawRoundRect(jfloat left, jfloat top, jfloat right, jfloat bottom, jfloat rx, jfloat ry, ref<android::graphics::Paint> paint);
	void drawText(ref<link::java::array<jchar>> text, jint index, jint count, jfloat x, jfloat y, ref<android::graphics::Paint> paint);
	void drawText(ref<java::lang::String> text, jfloat x, jfloat y, ref<android::graphics::Paint> paint);
	void drawText(ref<java::lang::String> text, jint start, jint end, jfloat x, jfloat y, ref<android::graphics::Paint> paint);
	void drawText(ref<java::lang::CharSequence> text, jint start, jint end, jfloat x, jfloat y, ref<android::graphics::Paint> paint);
	void drawTextOnPath(ref<link::java::array<jchar>> text, jint index, jint count, ref<android::graphics::Path> path, jfloat hOffset, jfloat vOffset, ref<android::graphics::Paint> paint);
	void drawTextOnPath(ref<java::lang::String> text, ref<android::graphics::Path> path, jfloat hOffset, jfloat vOffset, ref<android::graphics::Paint> paint);
	void drawTextRun(ref<link::java::array<jchar>> text, jint index, jint count, jint contextIndex, jint contextCount, jfloat x, jfloat y, jboolean isRtl, ref<android::graphics::Paint> paint);
	void drawTextRun(ref<java::lang::CharSequence> text, jint start, jint end, jint contextStart, jint contextEnd, jfloat x, jfloat y, jboolean isRtl, ref<android::graphics::Paint> paint);
	void drawVertices(ref<android::graphics::Canvas_VertexMode> mode, jint vertexCount, ref<link::java::array<jfloat>> verts, jint vertOffset, ref<link::java::array<jfloat>> texs, jint texOffset, ref<link::java::array<jint>> colors, jint colorOffset, ref<link::java::array<jshort>> indices, jint indexOffset, jint indexCount, ref<android::graphics::Paint> paint);

protected:

	Canvas(handle_type h) : base_(h) {}

};

} // namespace android::graphics
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/Canvas_EdgeType.h>
#include <scapix/java_api/android/graphics/Canvas_VertexMode.h>
#include <scapix/java_api/android/graphics/DrawFilter.h>
#include <scapix/java_api/android/graphics/Matrix.h>
#include <scapix/java_api/android/graphics/Paint.h>
#include <scapix/java_api/android/graphics/Path.h>
#include <scapix/java_api/android/graphics/Picture.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/RectF.h>
#include <scapix/java_api/android/graphics/Region_Op.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::graphics {

inline jint Canvas::ALL_SAVE_FLAG_() { return get_static_field<SCAPIX_META_STRING("ALL_SAVE_FLAG"), jint>(); }
inline ref<Canvas> Canvas::new_object() { return base_::new_object(); }
inline ref<Canvas> Canvas::new_object(ref<android::graphics::Bitmap> bitmap) { return base_::new_object(bitmap); }
inline jboolean Canvas::isHardwareAccelerated() { return call_method<SCAPIX_META_STRING("isHardwareAccelerated"), jboolean>(); }
inline void Canvas::setBitmap(ref<android::graphics::Bitmap> bitmap) { return call_method<SCAPIX_META_STRING("setBitmap"), void>(bitmap); }
inline jboolean Canvas::isOpaque() { return call_method<SCAPIX_META_STRING("isOpaque"), jboolean>(); }
inline jint Canvas::getWidth() { return call_method<SCAPIX_META_STRING("getWidth"), jint>(); }
inline jint Canvas::getHeight() { return call_method<SCAPIX_META_STRING("getHeight"), jint>(); }
inline jint Canvas::getDensity() { return call_method<SCAPIX_META_STRING("getDensity"), jint>(); }
inline void Canvas::setDensity(jint density) { return call_method<SCAPIX_META_STRING("setDensity"), void>(density); }
inline jint Canvas::getMaximumBitmapWidth() { return call_method<SCAPIX_META_STRING("getMaximumBitmapWidth"), jint>(); }
inline jint Canvas::getMaximumBitmapHeight() { return call_method<SCAPIX_META_STRING("getMaximumBitmapHeight"), jint>(); }
inline jint Canvas::save() { return call_method<SCAPIX_META_STRING("save"), jint>(); }
inline jint Canvas::saveLayer(ref<android::graphics::RectF> bounds, ref<android::graphics::Paint> paint, jint saveFlags) { return call_method<SCAPIX_META_STRING("saveLayer"), jint>(bounds, paint, saveFlags); }
inline jint Canvas::saveLayer(ref<android::graphics::RectF> bounds, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("saveLayer"), jint>(bounds, paint); }
inline jint Canvas::saveLayer(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<android::graphics::Paint> paint, jint saveFlags) { return call_method<SCAPIX_META_STRING("saveLayer"), jint>(left, top, right, bottom, paint, saveFlags); }
inline jint Canvas::saveLayer(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("saveLayer"), jint>(left, top, right, bottom, paint); }
inline jint Canvas::saveLayerAlpha(ref<android::graphics::RectF> bounds, jint alpha, jint saveFlags) { return call_method<SCAPIX_META_STRING("saveLayerAlpha"), jint>(bounds, alpha, saveFlags); }
inline jint Canvas::saveLayerAlpha(ref<android::graphics::RectF> bounds, jint alpha) { return call_method<SCAPIX_META_STRING("saveLayerAlpha"), jint>(bounds, alpha); }
inline jint Canvas::saveLayerAlpha(jfloat left, jfloat top, jfloat right, jfloat bottom, jint alpha, jint saveFlags) { return call_method<SCAPIX_META_STRING("saveLayerAlpha"), jint>(left, top, right, bottom, alpha, saveFlags); }
inline jint Canvas::saveLayerAlpha(jfloat left, jfloat top, jfloat right, jfloat bottom, jint alpha) { return call_method<SCAPIX_META_STRING("saveLayerAlpha"), jint>(left, top, right, bottom, alpha); }
inline void Canvas::restore() { return call_method<SCAPIX_META_STRING("restore"), void>(); }
inline jint Canvas::getSaveCount() { return call_method<SCAPIX_META_STRING("getSaveCount"), jint>(); }
inline void Canvas::restoreToCount(jint saveCount) { return call_method<SCAPIX_META_STRING("restoreToCount"), void>(saveCount); }
inline void Canvas::translate(jfloat dx, jfloat dy) { return call_method<SCAPIX_META_STRING("translate"), void>(dx, dy); }
inline void Canvas::scale(jfloat sx, jfloat sy) { return call_method<SCAPIX_META_STRING("scale"), void>(sx, sy); }
inline void Canvas::scale(jfloat sx, jfloat sy, jfloat px, jfloat py) { return call_method<SCAPIX_META_STRING("scale"), void>(sx, sy, px, py); }
inline void Canvas::rotate(jfloat degrees) { return call_method<SCAPIX_META_STRING("rotate"), void>(degrees); }
inline void Canvas::rotate(jfloat degrees, jfloat px, jfloat py) { return call_method<SCAPIX_META_STRING("rotate"), void>(degrees, px, py); }
inline void Canvas::skew(jfloat sx, jfloat sy) { return call_method<SCAPIX_META_STRING("skew"), void>(sx, sy); }
inline void Canvas::concat(ref<android::graphics::Matrix> matrix) { return call_method<SCAPIX_META_STRING("concat"), void>(matrix); }
inline void Canvas::setMatrix(ref<android::graphics::Matrix> matrix) { return call_method<SCAPIX_META_STRING("setMatrix"), void>(matrix); }
inline void Canvas::getMatrix(ref<android::graphics::Matrix> ctm) { return call_method<SCAPIX_META_STRING("getMatrix"), void>(ctm); }
inline ref<android::graphics::Matrix> Canvas::getMatrix() { return call_method<SCAPIX_META_STRING("getMatrix"), ref<android::graphics::Matrix>>(); }
inline jboolean Canvas::clipRect(ref<android::graphics::RectF> rect, ref<android::graphics::Region_Op> op) { return call_method<SCAPIX_META_STRING("clipRect"), jboolean>(rect, op); }
inline jboolean Canvas::clipRect(ref<android::graphics::Rect> rect, ref<android::graphics::Region_Op> op) { return call_method<SCAPIX_META_STRING("clipRect"), jboolean>(rect, op); }
inline jboolean Canvas::clipRect(ref<android::graphics::RectF> rect) { return call_method<SCAPIX_META_STRING("clipRect"), jboolean>(rect); }
inline jboolean Canvas::clipOutRect(ref<android::graphics::RectF> rect) { return call_method<SCAPIX_META_STRING("clipOutRect"), jboolean>(rect); }
inline jboolean Canvas::clipRect(ref<android::graphics::Rect> rect) { return call_method<SCAPIX_META_STRING("clipRect"), jboolean>(rect); }
inline jboolean Canvas::clipOutRect(ref<android::graphics::Rect> rect) { return call_method<SCAPIX_META_STRING("clipOutRect"), jboolean>(rect); }
inline jboolean Canvas::clipRect(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<android::graphics::Region_Op> op) { return call_method<SCAPIX_META_STRING("clipRect"), jboolean>(left, top, right, bottom, op); }
inline jboolean Canvas::clipRect(jfloat left, jfloat top, jfloat right, jfloat bottom) { return call_method<SCAPIX_META_STRING("clipRect"), jboolean>(left, top, right, bottom); }
inline jboolean Canvas::clipOutRect(jfloat left, jfloat top, jfloat right, jfloat bottom) { return call_method<SCAPIX_META_STRING("clipOutRect"), jboolean>(left, top, right, bottom); }
inline jboolean Canvas::clipRect(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("clipRect"), jboolean>(left, top, right, bottom); }
inline jboolean Canvas::clipOutRect(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("clipOutRect"), jboolean>(left, top, right, bottom); }
inline jboolean Canvas::clipPath(ref<android::graphics::Path> path, ref<android::graphics::Region_Op> op) { return call_method<SCAPIX_META_STRING("clipPath"), jboolean>(path, op); }
inline jboolean Canvas::clipPath(ref<android::graphics::Path> path) { return call_method<SCAPIX_META_STRING("clipPath"), jboolean>(path); }
inline jboolean Canvas::clipOutPath(ref<android::graphics::Path> path) { return call_method<SCAPIX_META_STRING("clipOutPath"), jboolean>(path); }
inline ref<android::graphics::DrawFilter> Canvas::getDrawFilter() { return call_method<SCAPIX_META_STRING("getDrawFilter"), ref<android::graphics::DrawFilter>>(); }
inline void Canvas::setDrawFilter(ref<android::graphics::DrawFilter> filter) { return call_method<SCAPIX_META_STRING("setDrawFilter"), void>(filter); }
inline jboolean Canvas::quickReject(ref<android::graphics::RectF> rect, ref<android::graphics::Canvas_EdgeType> type) { return call_method<SCAPIX_META_STRING("quickReject"), jboolean>(rect, type); }
inline jboolean Canvas::quickReject(ref<android::graphics::Path> path, ref<android::graphics::Canvas_EdgeType> type) { return call_method<SCAPIX_META_STRING("quickReject"), jboolean>(path, type); }
inline jboolean Canvas::quickReject(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<android::graphics::Canvas_EdgeType> type) { return call_method<SCAPIX_META_STRING("quickReject"), jboolean>(left, top, right, bottom, type); }
inline jboolean Canvas::getClipBounds(ref<android::graphics::Rect> bounds) { return call_method<SCAPIX_META_STRING("getClipBounds"), jboolean>(bounds); }
inline ref<android::graphics::Rect> Canvas::getClipBounds() { return call_method<SCAPIX_META_STRING("getClipBounds"), ref<android::graphics::Rect>>(); }
inline void Canvas::drawPicture(ref<android::graphics::Picture> picture) { return call_method<SCAPIX_META_STRING("drawPicture"), void>(picture); }
inline void Canvas::drawPicture(ref<android::graphics::Picture> picture, ref<android::graphics::RectF> dst) { return call_method<SCAPIX_META_STRING("drawPicture"), void>(picture, dst); }
inline void Canvas::drawPicture(ref<android::graphics::Picture> picture, ref<android::graphics::Rect> dst) { return call_method<SCAPIX_META_STRING("drawPicture"), void>(picture, dst); }
inline void Canvas::drawArc(ref<android::graphics::RectF> oval, jfloat startAngle, jfloat sweepAngle, jboolean useCenter, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawArc"), void>(oval, startAngle, sweepAngle, useCenter, paint); }
inline void Canvas::drawArc(jfloat left, jfloat top, jfloat right, jfloat bottom, jfloat startAngle, jfloat sweepAngle, jboolean useCenter, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawArc"), void>(left, top, right, bottom, startAngle, sweepAngle, useCenter, paint); }
inline void Canvas::drawARGB(jint a, jint r, jint g, jint b) { return call_method<SCAPIX_META_STRING("drawARGB"), void>(a, r, g, b); }
inline void Canvas::drawBitmap(ref<android::graphics::Bitmap> bitmap, jfloat left, jfloat top, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawBitmap"), void>(bitmap, left, top, paint); }
inline void Canvas::drawBitmap(ref<android::graphics::Bitmap> bitmap, ref<android::graphics::Rect> src, ref<android::graphics::RectF> dst, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawBitmap"), void>(bitmap, src, dst, paint); }
inline void Canvas::drawBitmap(ref<android::graphics::Bitmap> bitmap, ref<android::graphics::Rect> src, ref<android::graphics::Rect> dst, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawBitmap"), void>(bitmap, src, dst, paint); }
inline void Canvas::drawBitmap(ref<link::java::array<jint>> colors, jint offset, jint stride, jfloat x, jfloat y, jint width, jint height, jboolean hasAlpha, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawBitmap"), void>(colors, offset, stride, x, y, width, height, hasAlpha, paint); }
inline void Canvas::drawBitmap(ref<link::java::array<jint>> colors, jint offset, jint stride, jint x, jint y, jint width, jint height, jboolean hasAlpha, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawBitmap"), void>(colors, offset, stride, x, y, width, height, hasAlpha, paint); }
inline void Canvas::drawBitmap(ref<android::graphics::Bitmap> bitmap, ref<android::graphics::Matrix> matrix, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawBitmap"), void>(bitmap, matrix, paint); }
inline void Canvas::drawBitmapMesh(ref<android::graphics::Bitmap> bitmap, jint meshWidth, jint meshHeight, ref<link::java::array<jfloat>> verts, jint vertOffset, ref<link::java::array<jint>> colors, jint colorOffset, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawBitmapMesh"), void>(bitmap, meshWidth, meshHeight, verts, vertOffset, colors, colorOffset, paint); }
inline void Canvas::drawCircle(jfloat cx, jfloat cy, jfloat radius, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawCircle"), void>(cx, cy, radius, paint); }
inline void Canvas::drawColor(jint color) { return call_method<SCAPIX_META_STRING("drawColor"), void>(color); }
inline void Canvas::drawColor(jint color, ref<android::graphics::PorterDuff_Mode> mode) { return call_method<SCAPIX_META_STRING("drawColor"), void>(color, mode); }
inline void Canvas::drawLine(jfloat startX, jfloat startY, jfloat stopX, jfloat stopY, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawLine"), void>(startX, startY, stopX, stopY, paint); }
inline void Canvas::drawLines(ref<link::java::array<jfloat>> pts, jint offset, jint count, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawLines"), void>(pts, offset, count, paint); }
inline void Canvas::drawLines(ref<link::java::array<jfloat>> pts, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawLines"), void>(pts, paint); }
inline void Canvas::drawOval(ref<android::graphics::RectF> oval, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawOval"), void>(oval, paint); }
inline void Canvas::drawOval(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawOval"), void>(left, top, right, bottom, paint); }
inline void Canvas::drawPaint(ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawPaint"), void>(paint); }
inline void Canvas::drawPath(ref<android::graphics::Path> path, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawPath"), void>(path, paint); }
inline void Canvas::drawPoint(jfloat x, jfloat y, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawPoint"), void>(x, y, paint); }
inline void Canvas::drawPoints(ref<link::java::array<jfloat>> pts, jint offset, jint count, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawPoints"), void>(pts, offset, count, paint); }
inline void Canvas::drawPoints(ref<link::java::array<jfloat>> pts, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawPoints"), void>(pts, paint); }
inline void Canvas::drawPosText(ref<link::java::array<jchar>> text, jint index, jint count, ref<link::java::array<jfloat>> pos, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawPosText"), void>(text, index, count, pos, paint); }
inline void Canvas::drawPosText(ref<java::lang::String> text, ref<link::java::array<jfloat>> pos, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawPosText"), void>(text, pos, paint); }
inline void Canvas::drawRect(ref<android::graphics::RectF> rect, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawRect"), void>(rect, paint); }
inline void Canvas::drawRect(ref<android::graphics::Rect> r, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawRect"), void>(r, paint); }
inline void Canvas::drawRect(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawRect"), void>(left, top, right, bottom, paint); }
inline void Canvas::drawRGB(jint r, jint g, jint b) { return call_method<SCAPIX_META_STRING("drawRGB"), void>(r, g, b); }
inline void Canvas::drawRoundRect(ref<android::graphics::RectF> rect, jfloat rx, jfloat ry, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawRoundRect"), void>(rect, rx, ry, paint); }
inline void Canvas::drawRoundRect(jfloat left, jfloat top, jfloat right, jfloat bottom, jfloat rx, jfloat ry, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawRoundRect"), void>(left, top, right, bottom, rx, ry, paint); }
inline void Canvas::drawText(ref<link::java::array<jchar>> text, jint index, jint count, jfloat x, jfloat y, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawText"), void>(text, index, count, x, y, paint); }
inline void Canvas::drawText(ref<java::lang::String> text, jfloat x, jfloat y, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawText"), void>(text, x, y, paint); }
inline void Canvas::drawText(ref<java::lang::String> text, jint start, jint end, jfloat x, jfloat y, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawText"), void>(text, start, end, x, y, paint); }
inline void Canvas::drawText(ref<java::lang::CharSequence> text, jint start, jint end, jfloat x, jfloat y, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawText"), void>(text, start, end, x, y, paint); }
inline void Canvas::drawTextOnPath(ref<link::java::array<jchar>> text, jint index, jint count, ref<android::graphics::Path> path, jfloat hOffset, jfloat vOffset, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawTextOnPath"), void>(text, index, count, path, hOffset, vOffset, paint); }
inline void Canvas::drawTextOnPath(ref<java::lang::String> text, ref<android::graphics::Path> path, jfloat hOffset, jfloat vOffset, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawTextOnPath"), void>(text, path, hOffset, vOffset, paint); }
inline void Canvas::drawTextRun(ref<link::java::array<jchar>> text, jint index, jint count, jint contextIndex, jint contextCount, jfloat x, jfloat y, jboolean isRtl, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawTextRun"), void>(text, index, count, contextIndex, contextCount, x, y, isRtl, paint); }
inline void Canvas::drawTextRun(ref<java::lang::CharSequence> text, jint start, jint end, jint contextStart, jint contextEnd, jfloat x, jfloat y, jboolean isRtl, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawTextRun"), void>(text, start, end, contextStart, contextEnd, x, y, isRtl, paint); }
inline void Canvas::drawVertices(ref<android::graphics::Canvas_VertexMode> mode, jint vertexCount, ref<link::java::array<jfloat>> verts, jint vertOffset, ref<link::java::array<jfloat>> texs, jint texOffset, ref<link::java::array<jint>> colors, jint colorOffset, ref<link::java::array<jshort>> indices, jint indexOffset, jint indexCount, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("drawVertices"), void>(mode, vertexCount, verts, vertOffset, texs, texOffset, colors, colorOffset, indices, indexOffset, indexCount, paint); }

} // namespace android::graphics
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_CANVAS_H
