// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_COLORMATRIX_H
#define SCAPIX_ANDROID_GRAPHICS_COLORMATRIX_H

namespace scapix::java_api {
namespace android::graphics {

class ColorMatrix : public object_base<SCAPIX_META_STRING("android/graphics/ColorMatrix"),
	java::lang::Object>
{
public:

	static ref<ColorMatrix> new_object();
	static ref<ColorMatrix> new_object(ref<link::java::array<jfloat>> src);
	static ref<ColorMatrix> new_object(ref<android::graphics::ColorMatrix> src);
	ref<link::java::array<jfloat>> getArray();
	void reset();
	void set(ref<android::graphics::ColorMatrix> src);
	void set(ref<link::java::array<jfloat>> src);
	void setScale(jfloat rScale, jfloat gScale, jfloat bScale, jfloat aScale);
	void setRotate(jint axis, jfloat degrees);
	void setConcat(ref<android::graphics::ColorMatrix> matA, ref<android::graphics::ColorMatrix> matB);
	void preConcat(ref<android::graphics::ColorMatrix> prematrix);
	void postConcat(ref<android::graphics::ColorMatrix> postmatrix);
	void setSaturation(jfloat sat);
	void setRGB2YUV();
	void setYUV2RGB();
	jboolean equals(ref<java::lang::Object> obj);

protected:

	ColorMatrix(handle_type h) : base_(h) {}

};

} // namespace android::graphics
} // namespace scapix::java_api


namespace scapix::java_api {
namespace android::graphics {

inline ref<ColorMatrix> ColorMatrix::new_object() { return base_::new_object(); }
inline ref<ColorMatrix> ColorMatrix::new_object(ref<link::java::array<jfloat>> src) { return base_::new_object(src); }
inline ref<ColorMatrix> ColorMatrix::new_object(ref<android::graphics::ColorMatrix> src) { return base_::new_object(src); }
inline ref<link::java::array<jfloat>> ColorMatrix::getArray() { return call_method<SCAPIX_META_STRING("getArray"), ref<link::java::array<jfloat>>>(); }
inline void ColorMatrix::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline void ColorMatrix::set(ref<android::graphics::ColorMatrix> src) { return call_method<SCAPIX_META_STRING("set"), void>(src); }
inline void ColorMatrix::set(ref<link::java::array<jfloat>> src) { return call_method<SCAPIX_META_STRING("set"), void>(src); }
inline void ColorMatrix::setScale(jfloat rScale, jfloat gScale, jfloat bScale, jfloat aScale) { return call_method<SCAPIX_META_STRING("setScale"), void>(rScale, gScale, bScale, aScale); }
inline void ColorMatrix::setRotate(jint axis, jfloat degrees) { return call_method<SCAPIX_META_STRING("setRotate"), void>(axis, degrees); }
inline void ColorMatrix::setConcat(ref<android::graphics::ColorMatrix> matA, ref<android::graphics::ColorMatrix> matB) { return call_method<SCAPIX_META_STRING("setConcat"), void>(matA, matB); }
inline void ColorMatrix::preConcat(ref<android::graphics::ColorMatrix> prematrix) { return call_method<SCAPIX_META_STRING("preConcat"), void>(prematrix); }
inline void ColorMatrix::postConcat(ref<android::graphics::ColorMatrix> postmatrix) { return call_method<SCAPIX_META_STRING("postConcat"), void>(postmatrix); }
inline void ColorMatrix::setSaturation(jfloat sat) { return call_method<SCAPIX_META_STRING("setSaturation"), void>(sat); }
inline void ColorMatrix::setRGB2YUV() { return call_method<SCAPIX_META_STRING("setRGB2YUV"), void>(); }
inline void ColorMatrix::setYUV2RGB() { return call_method<SCAPIX_META_STRING("setYUV2RGB"), void>(); }
inline jboolean ColorMatrix::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }

} // namespace android::graphics
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_COLORMATRIX_H
