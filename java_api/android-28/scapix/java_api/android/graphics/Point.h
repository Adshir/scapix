// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_POINT_H
#define SCAPIX_ANDROID_GRAPHICS_POINT_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::graphics {

class Point : public object_base<SCAPIX_META_STRING("android/graphics/Point"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	jint x();
	void x(jint);
	jint y();
	void y(jint);

	static ref<Point> new_object();
	static ref<Point> new_object(jint x, jint y);
	static ref<Point> new_object(ref<android::graphics::Point> src);
	void set(jint x, jint y);
	void negate();
	void offset(jint dx, jint dy);
	jboolean equals(jint x, jint y);
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint flags);
	void readFromParcel(ref<android::os::Parcel> in);

protected:

	Point(handle_type h) : base_(h) {}

};

} // namespace android::graphics
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::graphics {

inline ref<android::os::Parcelable_Creator> Point::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint Point::x() { return get_field<SCAPIX_META_STRING("x"), jint>(); }
inline void Point::x(jint v) { set_field<SCAPIX_META_STRING("x"), jint>(v); }
inline jint Point::y() { return get_field<SCAPIX_META_STRING("y"), jint>(); }
inline void Point::y(jint v) { set_field<SCAPIX_META_STRING("y"), jint>(v); }
inline ref<Point> Point::new_object() { return base_::new_object(); }
inline ref<Point> Point::new_object(jint x, jint y) { return base_::new_object(x, y); }
inline ref<Point> Point::new_object(ref<android::graphics::Point> src) { return base_::new_object(src); }
inline void Point::set(jint x, jint y) { return call_method<SCAPIX_META_STRING("set"), void>(x, y); }
inline void Point::negate() { return call_method<SCAPIX_META_STRING("negate"), void>(); }
inline void Point::offset(jint dx, jint dy) { return call_method<SCAPIX_META_STRING("offset"), void>(dx, dy); }
inline jboolean Point::equals(jint x, jint y) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(x, y); }
inline jboolean Point::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint Point::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> Point::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint Point::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void Point::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }
inline void Point::readFromParcel(ref<android::os::Parcel> in) { return call_method<SCAPIX_META_STRING("readFromParcel"), void>(in); }

} // namespace android::graphics
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_POINT_H
