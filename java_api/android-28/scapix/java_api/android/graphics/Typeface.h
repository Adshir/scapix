// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_TYPEFACE_H
#define SCAPIX_ANDROID_GRAPHICS_TYPEFACE_H

namespace scapix::java_api {

namespace android::content::res { class AssetManager; }
namespace java::io { class File; }
namespace java::lang { class String; }
namespace android::graphics { class Typeface_Builder; }

namespace android::graphics {

class Typeface : public object_base<SCAPIX_META_STRING("android/graphics/Typeface"),
	java::lang::Object>
{
public:

	using Builder = Typeface_Builder;

	static jint BOLD_();
	static jint BOLD_ITALIC_();
	static ref<android::graphics::Typeface> DEFAULT_();
	static ref<android::graphics::Typeface> DEFAULT_BOLD_();
	static jint ITALIC_();
	static ref<android::graphics::Typeface> MONOSPACE_();
	static jint NORMAL_();
	static ref<android::graphics::Typeface> SANS_SERIF_();
	static ref<android::graphics::Typeface> SERIF_();

	jint getWeight();
	jint getStyle();
	jboolean isBold();
	jboolean isItalic();
	static ref<android::graphics::Typeface> create(ref<java::lang::String> familyName, jint style);
	static ref<android::graphics::Typeface> create(ref<android::graphics::Typeface> family, jint style);
	static ref<android::graphics::Typeface> create(ref<android::graphics::Typeface> family, jint weight, jboolean italic);
	static ref<android::graphics::Typeface> defaultFromStyle(jint style);
	static ref<android::graphics::Typeface> createFromAsset(ref<android::content::res::AssetManager> mgr, ref<java::lang::String> path);
	static ref<android::graphics::Typeface> createFromFile(ref<java::io::File> file);
	static ref<android::graphics::Typeface> createFromFile(ref<java::lang::String> path);
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();

protected:

	Typeface(handle_type h) : base_(h) {}

};

} // namespace android::graphics
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/AssetManager.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::graphics {

inline jint Typeface::BOLD_() { return get_static_field<SCAPIX_META_STRING("BOLD"), jint>(); }
inline jint Typeface::BOLD_ITALIC_() { return get_static_field<SCAPIX_META_STRING("BOLD_ITALIC"), jint>(); }
inline ref<android::graphics::Typeface> Typeface::DEFAULT_() { return get_static_field<SCAPIX_META_STRING("DEFAULT"), ref<android::graphics::Typeface>>(); }
inline ref<android::graphics::Typeface> Typeface::DEFAULT_BOLD_() { return get_static_field<SCAPIX_META_STRING("DEFAULT_BOLD"), ref<android::graphics::Typeface>>(); }
inline jint Typeface::ITALIC_() { return get_static_field<SCAPIX_META_STRING("ITALIC"), jint>(); }
inline ref<android::graphics::Typeface> Typeface::MONOSPACE_() { return get_static_field<SCAPIX_META_STRING("MONOSPACE"), ref<android::graphics::Typeface>>(); }
inline jint Typeface::NORMAL_() { return get_static_field<SCAPIX_META_STRING("NORMAL"), jint>(); }
inline ref<android::graphics::Typeface> Typeface::SANS_SERIF_() { return get_static_field<SCAPIX_META_STRING("SANS_SERIF"), ref<android::graphics::Typeface>>(); }
inline ref<android::graphics::Typeface> Typeface::SERIF_() { return get_static_field<SCAPIX_META_STRING("SERIF"), ref<android::graphics::Typeface>>(); }
inline jint Typeface::getWeight() { return call_method<SCAPIX_META_STRING("getWeight"), jint>(); }
inline jint Typeface::getStyle() { return call_method<SCAPIX_META_STRING("getStyle"), jint>(); }
inline jboolean Typeface::isBold() { return call_method<SCAPIX_META_STRING("isBold"), jboolean>(); }
inline jboolean Typeface::isItalic() { return call_method<SCAPIX_META_STRING("isItalic"), jboolean>(); }
inline ref<android::graphics::Typeface> Typeface::create(ref<java::lang::String> familyName, jint style) { return call_static_method<SCAPIX_META_STRING("create"), ref<android::graphics::Typeface>>(familyName, style); }
inline ref<android::graphics::Typeface> Typeface::create(ref<android::graphics::Typeface> family, jint style) { return call_static_method<SCAPIX_META_STRING("create"), ref<android::graphics::Typeface>>(family, style); }
inline ref<android::graphics::Typeface> Typeface::create(ref<android::graphics::Typeface> family, jint weight, jboolean italic) { return call_static_method<SCAPIX_META_STRING("create"), ref<android::graphics::Typeface>>(family, weight, italic); }
inline ref<android::graphics::Typeface> Typeface::defaultFromStyle(jint style) { return call_static_method<SCAPIX_META_STRING("defaultFromStyle"), ref<android::graphics::Typeface>>(style); }
inline ref<android::graphics::Typeface> Typeface::createFromAsset(ref<android::content::res::AssetManager> mgr, ref<java::lang::String> path) { return call_static_method<SCAPIX_META_STRING("createFromAsset"), ref<android::graphics::Typeface>>(mgr, path); }
inline ref<android::graphics::Typeface> Typeface::createFromFile(ref<java::io::File> file) { return call_static_method<SCAPIX_META_STRING("createFromFile"), ref<android::graphics::Typeface>>(file); }
inline ref<android::graphics::Typeface> Typeface::createFromFile(ref<java::lang::String> path) { return call_static_method<SCAPIX_META_STRING("createFromFile"), ref<android::graphics::Typeface>>(path); }
inline jboolean Typeface::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint Typeface::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }

} // namespace android::graphics
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_TYPEFACE_H
