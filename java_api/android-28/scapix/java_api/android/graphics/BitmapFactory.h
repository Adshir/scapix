// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_BITMAPFACTORY_H
#define SCAPIX_ANDROID_GRAPHICS_BITMAPFACTORY_H

namespace scapix::java_api {

namespace android::content::res { class Resources; }
namespace android::graphics { class Bitmap; }
namespace android::graphics { class BitmapFactory_Options; }
namespace android::graphics { class Rect; }
namespace android::util { class TypedValue; }
namespace java::io { class FileDescriptor; }
namespace java::io { class InputStream; }
namespace java::lang { class String; }

namespace android::graphics {

class BitmapFactory : public object_base<SCAPIX_META_STRING("android/graphics/BitmapFactory"),
	java::lang::Object>
{
public:

	using Options = BitmapFactory_Options;

	static ref<BitmapFactory> new_object();
	static ref<android::graphics::Bitmap> decodeFile(ref<java::lang::String> pathName, ref<android::graphics::BitmapFactory_Options> opts);
	static ref<android::graphics::Bitmap> decodeFile(ref<java::lang::String> pathName);
	static ref<android::graphics::Bitmap> decodeResourceStream(ref<android::content::res::Resources> res, ref<android::util::TypedValue> value, ref<java::io::InputStream> is, ref<android::graphics::Rect> pad, ref<android::graphics::BitmapFactory_Options> opts);
	static ref<android::graphics::Bitmap> decodeResource(ref<android::content::res::Resources> res, jint id, ref<android::graphics::BitmapFactory_Options> opts);
	static ref<android::graphics::Bitmap> decodeResource(ref<android::content::res::Resources> res, jint id);
	static ref<android::graphics::Bitmap> decodeByteArray(ref<link::java::array<jbyte>> data, jint offset, jint length, ref<android::graphics::BitmapFactory_Options> opts);
	static ref<android::graphics::Bitmap> decodeByteArray(ref<link::java::array<jbyte>> data, jint offset, jint length);
	static ref<android::graphics::Bitmap> decodeStream(ref<java::io::InputStream> is, ref<android::graphics::Rect> outPadding, ref<android::graphics::BitmapFactory_Options> opts);
	static ref<android::graphics::Bitmap> decodeStream(ref<java::io::InputStream> is);
	static ref<android::graphics::Bitmap> decodeFileDescriptor(ref<java::io::FileDescriptor> fd, ref<android::graphics::Rect> outPadding, ref<android::graphics::BitmapFactory_Options> opts);
	static ref<android::graphics::Bitmap> decodeFileDescriptor(ref<java::io::FileDescriptor> fd);

protected:

	BitmapFactory(handle_type h) : base_(h) {}

};

} // namespace android::graphics
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/BitmapFactory_Options.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/util/TypedValue.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::graphics {

inline ref<BitmapFactory> BitmapFactory::new_object() { return base_::new_object(); }
inline ref<android::graphics::Bitmap> BitmapFactory::decodeFile(ref<java::lang::String> pathName, ref<android::graphics::BitmapFactory_Options> opts) { return call_static_method<SCAPIX_META_STRING("decodeFile"), ref<android::graphics::Bitmap>>(pathName, opts); }
inline ref<android::graphics::Bitmap> BitmapFactory::decodeFile(ref<java::lang::String> pathName) { return call_static_method<SCAPIX_META_STRING("decodeFile"), ref<android::graphics::Bitmap>>(pathName); }
inline ref<android::graphics::Bitmap> BitmapFactory::decodeResourceStream(ref<android::content::res::Resources> res, ref<android::util::TypedValue> value, ref<java::io::InputStream> is, ref<android::graphics::Rect> pad, ref<android::graphics::BitmapFactory_Options> opts) { return call_static_method<SCAPIX_META_STRING("decodeResourceStream"), ref<android::graphics::Bitmap>>(res, value, is, pad, opts); }
inline ref<android::graphics::Bitmap> BitmapFactory::decodeResource(ref<android::content::res::Resources> res, jint id, ref<android::graphics::BitmapFactory_Options> opts) { return call_static_method<SCAPIX_META_STRING("decodeResource"), ref<android::graphics::Bitmap>>(res, id, opts); }
inline ref<android::graphics::Bitmap> BitmapFactory::decodeResource(ref<android::content::res::Resources> res, jint id) { return call_static_method<SCAPIX_META_STRING("decodeResource"), ref<android::graphics::Bitmap>>(res, id); }
inline ref<android::graphics::Bitmap> BitmapFactory::decodeByteArray(ref<link::java::array<jbyte>> data, jint offset, jint length, ref<android::graphics::BitmapFactory_Options> opts) { return call_static_method<SCAPIX_META_STRING("decodeByteArray"), ref<android::graphics::Bitmap>>(data, offset, length, opts); }
inline ref<android::graphics::Bitmap> BitmapFactory::decodeByteArray(ref<link::java::array<jbyte>> data, jint offset, jint length) { return call_static_method<SCAPIX_META_STRING("decodeByteArray"), ref<android::graphics::Bitmap>>(data, offset, length); }
inline ref<android::graphics::Bitmap> BitmapFactory::decodeStream(ref<java::io::InputStream> is, ref<android::graphics::Rect> outPadding, ref<android::graphics::BitmapFactory_Options> opts) { return call_static_method<SCAPIX_META_STRING("decodeStream"), ref<android::graphics::Bitmap>>(is, outPadding, opts); }
inline ref<android::graphics::Bitmap> BitmapFactory::decodeStream(ref<java::io::InputStream> is) { return call_static_method<SCAPIX_META_STRING("decodeStream"), ref<android::graphics::Bitmap>>(is); }
inline ref<android::graphics::Bitmap> BitmapFactory::decodeFileDescriptor(ref<java::io::FileDescriptor> fd, ref<android::graphics::Rect> outPadding, ref<android::graphics::BitmapFactory_Options> opts) { return call_static_method<SCAPIX_META_STRING("decodeFileDescriptor"), ref<android::graphics::Bitmap>>(fd, outPadding, opts); }
inline ref<android::graphics::Bitmap> BitmapFactory::decodeFileDescriptor(ref<java::io::FileDescriptor> fd) { return call_static_method<SCAPIX_META_STRING("decodeFileDescriptor"), ref<android::graphics::Bitmap>>(fd); }

} // namespace android::graphics
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_BITMAPFACTORY_H
