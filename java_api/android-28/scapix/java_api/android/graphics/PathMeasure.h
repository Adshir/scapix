// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_PATHMEASURE_H
#define SCAPIX_ANDROID_GRAPHICS_PATHMEASURE_H

namespace scapix::java_api {

namespace android::graphics { class Matrix; }
namespace android::graphics { class Path; }

namespace android::graphics {

class PathMeasure : public object_base<SCAPIX_META_STRING("android/graphics/PathMeasure"),
	java::lang::Object>
{
public:

	static jint POSITION_MATRIX_FLAG_();
	static jint TANGENT_MATRIX_FLAG_();

	static ref<PathMeasure> new_object();
	static ref<PathMeasure> new_object(ref<android::graphics::Path> path, jboolean forceClosed);
	void setPath(ref<android::graphics::Path> path, jboolean forceClosed);
	jfloat getLength();
	jboolean getPosTan(jfloat distance, ref<link::java::array<jfloat>> pos, ref<link::java::array<jfloat>> tan);
	jboolean getMatrix(jfloat distance, ref<android::graphics::Matrix> matrix, jint flags);
	jboolean getSegment(jfloat startD, jfloat stopD, ref<android::graphics::Path> dst, jboolean startWithMoveTo);
	jboolean isClosed();
	jboolean nextContour();

protected:

	PathMeasure(handle_type h) : base_(h) {}

};

} // namespace android::graphics
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Matrix.h>
#include <scapix/java_api/android/graphics/Path.h>

namespace scapix::java_api {
namespace android::graphics {

inline jint PathMeasure::POSITION_MATRIX_FLAG_() { return get_static_field<SCAPIX_META_STRING("POSITION_MATRIX_FLAG"), jint>(); }
inline jint PathMeasure::TANGENT_MATRIX_FLAG_() { return get_static_field<SCAPIX_META_STRING("TANGENT_MATRIX_FLAG"), jint>(); }
inline ref<PathMeasure> PathMeasure::new_object() { return base_::new_object(); }
inline ref<PathMeasure> PathMeasure::new_object(ref<android::graphics::Path> path, jboolean forceClosed) { return base_::new_object(path, forceClosed); }
inline void PathMeasure::setPath(ref<android::graphics::Path> path, jboolean forceClosed) { return call_method<SCAPIX_META_STRING("setPath"), void>(path, forceClosed); }
inline jfloat PathMeasure::getLength() { return call_method<SCAPIX_META_STRING("getLength"), jfloat>(); }
inline jboolean PathMeasure::getPosTan(jfloat distance, ref<link::java::array<jfloat>> pos, ref<link::java::array<jfloat>> tan) { return call_method<SCAPIX_META_STRING("getPosTan"), jboolean>(distance, pos, tan); }
inline jboolean PathMeasure::getMatrix(jfloat distance, ref<android::graphics::Matrix> matrix, jint flags) { return call_method<SCAPIX_META_STRING("getMatrix"), jboolean>(distance, matrix, flags); }
inline jboolean PathMeasure::getSegment(jfloat startD, jfloat stopD, ref<android::graphics::Path> dst, jboolean startWithMoveTo) { return call_method<SCAPIX_META_STRING("getSegment"), jboolean>(startD, stopD, dst, startWithMoveTo); }
inline jboolean PathMeasure::isClosed() { return call_method<SCAPIX_META_STRING("isClosed"), jboolean>(); }
inline jboolean PathMeasure::nextContour() { return call_method<SCAPIX_META_STRING("nextContour"), jboolean>(); }

} // namespace android::graphics
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_PATHMEASURE_H
