// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_PICTURE_H
#define SCAPIX_ANDROID_GRAPHICS_PICTURE_H

namespace scapix::java_api {

namespace android::graphics { class Canvas; }
namespace java::io { class InputStream; }
namespace java::io { class OutputStream; }

namespace android::graphics {

class Picture : public object_base<SCAPIX_META_STRING("android/graphics/Picture"),
	java::lang::Object>
{
public:

	static ref<Picture> new_object();
	static ref<Picture> new_object(ref<android::graphics::Picture> src);
	ref<android::graphics::Canvas> beginRecording(jint width, jint height);
	void endRecording();
	jint getWidth();
	jint getHeight();
	jboolean requiresHardwareAcceleration();
	void draw(ref<android::graphics::Canvas> canvas);
	static ref<android::graphics::Picture> createFromStream(ref<java::io::InputStream> stream);
	void writeToStream(ref<java::io::OutputStream> stream);

protected:

	Picture(handle_type h) : base_(h) {}

};

} // namespace android::graphics
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>

namespace scapix::java_api {
namespace android::graphics {

inline ref<Picture> Picture::new_object() { return base_::new_object(); }
inline ref<Picture> Picture::new_object(ref<android::graphics::Picture> src) { return base_::new_object(src); }
inline ref<android::graphics::Canvas> Picture::beginRecording(jint width, jint height) { return call_method<SCAPIX_META_STRING("beginRecording"), ref<android::graphics::Canvas>>(width, height); }
inline void Picture::endRecording() { return call_method<SCAPIX_META_STRING("endRecording"), void>(); }
inline jint Picture::getWidth() { return call_method<SCAPIX_META_STRING("getWidth"), jint>(); }
inline jint Picture::getHeight() { return call_method<SCAPIX_META_STRING("getHeight"), jint>(); }
inline jboolean Picture::requiresHardwareAcceleration() { return call_method<SCAPIX_META_STRING("requiresHardwareAcceleration"), jboolean>(); }
inline void Picture::draw(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("draw"), void>(canvas); }
inline ref<android::graphics::Picture> Picture::createFromStream(ref<java::io::InputStream> stream) { return call_static_method<SCAPIX_META_STRING("createFromStream"), ref<android::graphics::Picture>>(stream); }
inline void Picture::writeToStream(ref<java::io::OutputStream> stream) { return call_method<SCAPIX_META_STRING("writeToStream"), void>(stream); }

} // namespace android::graphics
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_PICTURE_H
