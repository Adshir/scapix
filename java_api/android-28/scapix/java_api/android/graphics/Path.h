// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_PATH_H
#define SCAPIX_ANDROID_GRAPHICS_PATH_H

namespace scapix::java_api {

namespace android::graphics { class Matrix; }
namespace android::graphics { class Path_Direction; }
namespace android::graphics { class Path_FillType; }
namespace android::graphics { class Path_Op; }
namespace android::graphics { class RectF; }

namespace android::graphics {

class Path : public object_base<SCAPIX_META_STRING("android/graphics/Path"),
	java::lang::Object>
{
public:

	using Op = Path_Op;
	using FillType = Path_FillType;
	using Direction = Path_Direction;

	static ref<Path> new_object();
	static ref<Path> new_object(ref<android::graphics::Path> src);
	void reset();
	void rewind();
	void set(ref<android::graphics::Path> src);
	jboolean op(ref<android::graphics::Path> path, ref<android::graphics::Path_Op> op);
	jboolean op(ref<android::graphics::Path> path1, ref<android::graphics::Path> path2, ref<android::graphics::Path_Op> op);
	jboolean isConvex();
	ref<android::graphics::Path_FillType> getFillType();
	void setFillType(ref<android::graphics::Path_FillType> ft);
	jboolean isInverseFillType();
	void toggleInverseFillType();
	jboolean isEmpty();
	jboolean isRect(ref<android::graphics::RectF> rect);
	void computeBounds(ref<android::graphics::RectF> bounds, jboolean exact);
	void incReserve(jint extraPtCount);
	void moveTo(jfloat x, jfloat y);
	void rMoveTo(jfloat dx, jfloat dy);
	void lineTo(jfloat x, jfloat y);
	void rLineTo(jfloat dx, jfloat dy);
	void quadTo(jfloat x1, jfloat y1, jfloat x2, jfloat y2);
	void rQuadTo(jfloat dx1, jfloat dy1, jfloat dx2, jfloat dy2);
	void cubicTo(jfloat x1, jfloat y1, jfloat x2, jfloat y2, jfloat x3, jfloat y3);
	void rCubicTo(jfloat x1, jfloat y1, jfloat x2, jfloat y2, jfloat x3, jfloat y3);
	void arcTo(ref<android::graphics::RectF> oval, jfloat startAngle, jfloat sweepAngle, jboolean forceMoveTo);
	void arcTo(ref<android::graphics::RectF> oval, jfloat startAngle, jfloat sweepAngle);
	void arcTo(jfloat left, jfloat top, jfloat right, jfloat bottom, jfloat startAngle, jfloat sweepAngle, jboolean forceMoveTo);
	void close();
	void addRect(ref<android::graphics::RectF> rect, ref<android::graphics::Path_Direction> dir);
	void addRect(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<android::graphics::Path_Direction> dir);
	void addOval(ref<android::graphics::RectF> oval, ref<android::graphics::Path_Direction> dir);
	void addOval(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<android::graphics::Path_Direction> dir);
	void addCircle(jfloat x, jfloat y, jfloat radius, ref<android::graphics::Path_Direction> dir);
	void addArc(ref<android::graphics::RectF> oval, jfloat startAngle, jfloat sweepAngle);
	void addArc(jfloat left, jfloat top, jfloat right, jfloat bottom, jfloat startAngle, jfloat sweepAngle);
	void addRoundRect(ref<android::graphics::RectF> rect, jfloat rx, jfloat ry, ref<android::graphics::Path_Direction> dir);
	void addRoundRect(jfloat left, jfloat top, jfloat right, jfloat bottom, jfloat rx, jfloat ry, ref<android::graphics::Path_Direction> dir);
	void addRoundRect(ref<android::graphics::RectF> rect, ref<link::java::array<jfloat>> radii, ref<android::graphics::Path_Direction> dir);
	void addRoundRect(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<link::java::array<jfloat>> radii, ref<android::graphics::Path_Direction> dir);
	void addPath(ref<android::graphics::Path> src, jfloat dx, jfloat dy);
	void addPath(ref<android::graphics::Path> src);
	void addPath(ref<android::graphics::Path> src, ref<android::graphics::Matrix> matrix);
	void offset(jfloat dx, jfloat dy, ref<android::graphics::Path> dst);
	void offset(jfloat dx, jfloat dy);
	void setLastPoint(jfloat dx, jfloat dy);
	void transform(ref<android::graphics::Matrix> matrix, ref<android::graphics::Path> dst);
	void transform(ref<android::graphics::Matrix> matrix);
	ref<link::java::array<jfloat>> approximate(jfloat acceptableError);

protected:

	Path(handle_type h) : base_(h) {}

};

} // namespace android::graphics
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Matrix.h>
#include <scapix/java_api/android/graphics/Path_Direction.h>
#include <scapix/java_api/android/graphics/Path_FillType.h>
#include <scapix/java_api/android/graphics/Path_Op.h>
#include <scapix/java_api/android/graphics/RectF.h>

namespace scapix::java_api {
namespace android::graphics {

inline ref<Path> Path::new_object() { return base_::new_object(); }
inline ref<Path> Path::new_object(ref<android::graphics::Path> src) { return base_::new_object(src); }
inline void Path::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline void Path::rewind() { return call_method<SCAPIX_META_STRING("rewind"), void>(); }
inline void Path::set(ref<android::graphics::Path> src) { return call_method<SCAPIX_META_STRING("set"), void>(src); }
inline jboolean Path::op(ref<android::graphics::Path> path, ref<android::graphics::Path_Op> op) { return call_method<SCAPIX_META_STRING("op"), jboolean>(path, op); }
inline jboolean Path::op(ref<android::graphics::Path> path1, ref<android::graphics::Path> path2, ref<android::graphics::Path_Op> op) { return call_method<SCAPIX_META_STRING("op"), jboolean>(path1, path2, op); }
inline jboolean Path::isConvex() { return call_method<SCAPIX_META_STRING("isConvex"), jboolean>(); }
inline ref<android::graphics::Path_FillType> Path::getFillType() { return call_method<SCAPIX_META_STRING("getFillType"), ref<android::graphics::Path_FillType>>(); }
inline void Path::setFillType(ref<android::graphics::Path_FillType> ft) { return call_method<SCAPIX_META_STRING("setFillType"), void>(ft); }
inline jboolean Path::isInverseFillType() { return call_method<SCAPIX_META_STRING("isInverseFillType"), jboolean>(); }
inline void Path::toggleInverseFillType() { return call_method<SCAPIX_META_STRING("toggleInverseFillType"), void>(); }
inline jboolean Path::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline jboolean Path::isRect(ref<android::graphics::RectF> rect) { return call_method<SCAPIX_META_STRING("isRect"), jboolean>(rect); }
inline void Path::computeBounds(ref<android::graphics::RectF> bounds, jboolean exact) { return call_method<SCAPIX_META_STRING("computeBounds"), void>(bounds, exact); }
inline void Path::incReserve(jint extraPtCount) { return call_method<SCAPIX_META_STRING("incReserve"), void>(extraPtCount); }
inline void Path::moveTo(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("moveTo"), void>(x, y); }
inline void Path::rMoveTo(jfloat dx, jfloat dy) { return call_method<SCAPIX_META_STRING("rMoveTo"), void>(dx, dy); }
inline void Path::lineTo(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("lineTo"), void>(x, y); }
inline void Path::rLineTo(jfloat dx, jfloat dy) { return call_method<SCAPIX_META_STRING("rLineTo"), void>(dx, dy); }
inline void Path::quadTo(jfloat x1, jfloat y1, jfloat x2, jfloat y2) { return call_method<SCAPIX_META_STRING("quadTo"), void>(x1, y1, x2, y2); }
inline void Path::rQuadTo(jfloat dx1, jfloat dy1, jfloat dx2, jfloat dy2) { return call_method<SCAPIX_META_STRING("rQuadTo"), void>(dx1, dy1, dx2, dy2); }
inline void Path::cubicTo(jfloat x1, jfloat y1, jfloat x2, jfloat y2, jfloat x3, jfloat y3) { return call_method<SCAPIX_META_STRING("cubicTo"), void>(x1, y1, x2, y2, x3, y3); }
inline void Path::rCubicTo(jfloat x1, jfloat y1, jfloat x2, jfloat y2, jfloat x3, jfloat y3) { return call_method<SCAPIX_META_STRING("rCubicTo"), void>(x1, y1, x2, y2, x3, y3); }
inline void Path::arcTo(ref<android::graphics::RectF> oval, jfloat startAngle, jfloat sweepAngle, jboolean forceMoveTo) { return call_method<SCAPIX_META_STRING("arcTo"), void>(oval, startAngle, sweepAngle, forceMoveTo); }
inline void Path::arcTo(ref<android::graphics::RectF> oval, jfloat startAngle, jfloat sweepAngle) { return call_method<SCAPIX_META_STRING("arcTo"), void>(oval, startAngle, sweepAngle); }
inline void Path::arcTo(jfloat left, jfloat top, jfloat right, jfloat bottom, jfloat startAngle, jfloat sweepAngle, jboolean forceMoveTo) { return call_method<SCAPIX_META_STRING("arcTo"), void>(left, top, right, bottom, startAngle, sweepAngle, forceMoveTo); }
inline void Path::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void Path::addRect(ref<android::graphics::RectF> rect, ref<android::graphics::Path_Direction> dir) { return call_method<SCAPIX_META_STRING("addRect"), void>(rect, dir); }
inline void Path::addRect(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<android::graphics::Path_Direction> dir) { return call_method<SCAPIX_META_STRING("addRect"), void>(left, top, right, bottom, dir); }
inline void Path::addOval(ref<android::graphics::RectF> oval, ref<android::graphics::Path_Direction> dir) { return call_method<SCAPIX_META_STRING("addOval"), void>(oval, dir); }
inline void Path::addOval(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<android::graphics::Path_Direction> dir) { return call_method<SCAPIX_META_STRING("addOval"), void>(left, top, right, bottom, dir); }
inline void Path::addCircle(jfloat x, jfloat y, jfloat radius, ref<android::graphics::Path_Direction> dir) { return call_method<SCAPIX_META_STRING("addCircle"), void>(x, y, radius, dir); }
inline void Path::addArc(ref<android::graphics::RectF> oval, jfloat startAngle, jfloat sweepAngle) { return call_method<SCAPIX_META_STRING("addArc"), void>(oval, startAngle, sweepAngle); }
inline void Path::addArc(jfloat left, jfloat top, jfloat right, jfloat bottom, jfloat startAngle, jfloat sweepAngle) { return call_method<SCAPIX_META_STRING("addArc"), void>(left, top, right, bottom, startAngle, sweepAngle); }
inline void Path::addRoundRect(ref<android::graphics::RectF> rect, jfloat rx, jfloat ry, ref<android::graphics::Path_Direction> dir) { return call_method<SCAPIX_META_STRING("addRoundRect"), void>(rect, rx, ry, dir); }
inline void Path::addRoundRect(jfloat left, jfloat top, jfloat right, jfloat bottom, jfloat rx, jfloat ry, ref<android::graphics::Path_Direction> dir) { return call_method<SCAPIX_META_STRING("addRoundRect"), void>(left, top, right, bottom, rx, ry, dir); }
inline void Path::addRoundRect(ref<android::graphics::RectF> rect, ref<link::java::array<jfloat>> radii, ref<android::graphics::Path_Direction> dir) { return call_method<SCAPIX_META_STRING("addRoundRect"), void>(rect, radii, dir); }
inline void Path::addRoundRect(jfloat left, jfloat top, jfloat right, jfloat bottom, ref<link::java::array<jfloat>> radii, ref<android::graphics::Path_Direction> dir) { return call_method<SCAPIX_META_STRING("addRoundRect"), void>(left, top, right, bottom, radii, dir); }
inline void Path::addPath(ref<android::graphics::Path> src, jfloat dx, jfloat dy) { return call_method<SCAPIX_META_STRING("addPath"), void>(src, dx, dy); }
inline void Path::addPath(ref<android::graphics::Path> src) { return call_method<SCAPIX_META_STRING("addPath"), void>(src); }
inline void Path::addPath(ref<android::graphics::Path> src, ref<android::graphics::Matrix> matrix) { return call_method<SCAPIX_META_STRING("addPath"), void>(src, matrix); }
inline void Path::offset(jfloat dx, jfloat dy, ref<android::graphics::Path> dst) { return call_method<SCAPIX_META_STRING("offset"), void>(dx, dy, dst); }
inline void Path::offset(jfloat dx, jfloat dy) { return call_method<SCAPIX_META_STRING("offset"), void>(dx, dy); }
inline void Path::setLastPoint(jfloat dx, jfloat dy) { return call_method<SCAPIX_META_STRING("setLastPoint"), void>(dx, dy); }
inline void Path::transform(ref<android::graphics::Matrix> matrix, ref<android::graphics::Path> dst) { return call_method<SCAPIX_META_STRING("transform"), void>(matrix, dst); }
inline void Path::transform(ref<android::graphics::Matrix> matrix) { return call_method<SCAPIX_META_STRING("transform"), void>(matrix); }
inline ref<link::java::array<jfloat>> Path::approximate(jfloat acceptableError) { return call_method<SCAPIX_META_STRING("approximate"), ref<link::java::array<jfloat>>>(acceptableError); }

} // namespace android::graphics
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_PATH_H
