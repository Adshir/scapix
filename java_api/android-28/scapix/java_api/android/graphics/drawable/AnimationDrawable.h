// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/graphics/drawable/DrawableContainer.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/android/graphics/drawable/Animatable.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ANIMATIONDRAWABLE_H
#define SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ANIMATIONDRAWABLE_H

namespace scapix::java_api {

namespace android::content::res { class Resources; }
namespace android::content::res { class Resources_Theme; }
namespace android::graphics::drawable { class Drawable; }
namespace android::util { class AttributeSet; }
namespace org::xmlpull::v1 { class XmlPullParser; }

namespace android::graphics::drawable {

class AnimationDrawable : public object_base<SCAPIX_META_STRING("android/graphics/drawable/AnimationDrawable"),
	android::graphics::drawable::DrawableContainer,
	java::lang::Runnable,
	android::graphics::drawable::Animatable>
{
public:

	static ref<AnimationDrawable> new_object();
	jboolean setVisible(jboolean visible, jboolean restart);
	void start();
	void stop();
	jboolean isRunning();
	void run();
	void unscheduleSelf(ref<java::lang::Runnable> what);
	jint getNumberOfFrames();
	ref<android::graphics::drawable::Drawable> getFrame(jint index);
	jint getDuration(jint i);
	jboolean isOneShot();
	void setOneShot(jboolean oneShot);
	void addFrame(ref<android::graphics::drawable::Drawable> frame, jint duration);
	void inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme);
	ref<android::graphics::drawable::Drawable> mutate();

protected:

	AnimationDrawable(handle_type h) : base_(h) {}

};

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>

namespace scapix::java_api {
namespace android::graphics::drawable {

inline ref<AnimationDrawable> AnimationDrawable::new_object() { return base_::new_object(); }
inline jboolean AnimationDrawable::setVisible(jboolean visible, jboolean restart) { return call_method<SCAPIX_META_STRING("setVisible"), jboolean>(visible, restart); }
inline void AnimationDrawable::start() { return call_method<SCAPIX_META_STRING("start"), void>(); }
inline void AnimationDrawable::stop() { return call_method<SCAPIX_META_STRING("stop"), void>(); }
inline jboolean AnimationDrawable::isRunning() { return call_method<SCAPIX_META_STRING("isRunning"), jboolean>(); }
inline void AnimationDrawable::run() { return call_method<SCAPIX_META_STRING("run"), void>(); }
inline void AnimationDrawable::unscheduleSelf(ref<java::lang::Runnable> what) { return call_method<SCAPIX_META_STRING("unscheduleSelf"), void>(what); }
inline jint AnimationDrawable::getNumberOfFrames() { return call_method<SCAPIX_META_STRING("getNumberOfFrames"), jint>(); }
inline ref<android::graphics::drawable::Drawable> AnimationDrawable::getFrame(jint index) { return call_method<SCAPIX_META_STRING("getFrame"), ref<android::graphics::drawable::Drawable>>(index); }
inline jint AnimationDrawable::getDuration(jint i) { return call_method<SCAPIX_META_STRING("getDuration"), jint>(i); }
inline jboolean AnimationDrawable::isOneShot() { return call_method<SCAPIX_META_STRING("isOneShot"), jboolean>(); }
inline void AnimationDrawable::setOneShot(jboolean oneShot) { return call_method<SCAPIX_META_STRING("setOneShot"), void>(oneShot); }
inline void AnimationDrawable::addFrame(ref<android::graphics::drawable::Drawable> frame, jint duration) { return call_method<SCAPIX_META_STRING("addFrame"), void>(frame, duration); }
inline void AnimationDrawable::inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme) { return call_method<SCAPIX_META_STRING("inflate"), void>(r, parser, attrs, theme); }
inline ref<android::graphics::drawable::Drawable> AnimationDrawable::mutate() { return call_method<SCAPIX_META_STRING("mutate"), ref<android::graphics::drawable::Drawable>>(); }

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ANIMATIONDRAWABLE_H
