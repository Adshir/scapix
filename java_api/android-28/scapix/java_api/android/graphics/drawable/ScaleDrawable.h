// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/graphics/drawable/DrawableWrapper.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_DRAWABLE_SCALEDRAWABLE_H
#define SCAPIX_ANDROID_GRAPHICS_DRAWABLE_SCALEDRAWABLE_H

namespace scapix::java_api {

namespace android::content::res { class Resources; }
namespace android::content::res { class Resources_Theme; }
namespace android::graphics { class Canvas; }
namespace android::graphics::drawable { class Drawable; }
namespace android::util { class AttributeSet; }
namespace org::xmlpull::v1 { class XmlPullParser; }

namespace android::graphics::drawable {

class ScaleDrawable : public object_base<SCAPIX_META_STRING("android/graphics/drawable/ScaleDrawable"),
	android::graphics::drawable::DrawableWrapper>
{
public:

	static ref<ScaleDrawable> new_object(ref<android::graphics::drawable::Drawable> drawable, jint gravity, jfloat scaleWidth, jfloat scaleHeight);
	void inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme);
	void applyTheme(ref<android::content::res::Resources_Theme> t);
	void draw(ref<android::graphics::Canvas> canvas);
	jint getOpacity();

protected:

	ScaleDrawable(handle_type h) : base_(h) {}

};

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>

namespace scapix::java_api {
namespace android::graphics::drawable {

inline ref<ScaleDrawable> ScaleDrawable::new_object(ref<android::graphics::drawable::Drawable> drawable, jint gravity, jfloat scaleWidth, jfloat scaleHeight) { return base_::new_object(drawable, gravity, scaleWidth, scaleHeight); }
inline void ScaleDrawable::inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme) { return call_method<SCAPIX_META_STRING("inflate"), void>(r, parser, attrs, theme); }
inline void ScaleDrawable::applyTheme(ref<android::content::res::Resources_Theme> t) { return call_method<SCAPIX_META_STRING("applyTheme"), void>(t); }
inline void ScaleDrawable::draw(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("draw"), void>(canvas); }
inline jint ScaleDrawable::getOpacity() { return call_method<SCAPIX_META_STRING("getOpacity"), jint>(); }

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_DRAWABLE_SCALEDRAWABLE_H
