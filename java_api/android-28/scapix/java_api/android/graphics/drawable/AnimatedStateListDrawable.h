// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/graphics/drawable/StateListDrawable.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ANIMATEDSTATELISTDRAWABLE_H
#define SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ANIMATEDSTATELISTDRAWABLE_H

namespace scapix::java_api {

namespace android::content::res { class Resources; }
namespace android::content::res { class Resources_Theme; }
namespace android::graphics::drawable { class Drawable; }
namespace android::util { class AttributeSet; }
namespace org::xmlpull::v1 { class XmlPullParser; }

namespace android::graphics::drawable {

class AnimatedStateListDrawable : public object_base<SCAPIX_META_STRING("android/graphics/drawable/AnimatedStateListDrawable"),
	android::graphics::drawable::StateListDrawable>
{
public:

	static ref<AnimatedStateListDrawable> new_object();
	jboolean setVisible(jboolean visible, jboolean restart);
	void addState(ref<link::java::array<jint>> stateSet, ref<android::graphics::drawable::Drawable> drawable, jint id);
	void addTransition(jint fromId, jint toId, ref<android::graphics::drawable::Drawable> transition, jboolean reversible);
	jboolean isStateful();
	void jumpToCurrentState();
	void inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme);
	void applyTheme(ref<android::content::res::Resources_Theme> theme);
	ref<android::graphics::drawable::Drawable> mutate();

protected:

	AnimatedStateListDrawable(handle_type h) : base_(h) {}

};

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>

namespace scapix::java_api {
namespace android::graphics::drawable {

inline ref<AnimatedStateListDrawable> AnimatedStateListDrawable::new_object() { return base_::new_object(); }
inline jboolean AnimatedStateListDrawable::setVisible(jboolean visible, jboolean restart) { return call_method<SCAPIX_META_STRING("setVisible"), jboolean>(visible, restart); }
inline void AnimatedStateListDrawable::addState(ref<link::java::array<jint>> stateSet, ref<android::graphics::drawable::Drawable> drawable, jint id) { return call_method<SCAPIX_META_STRING("addState"), void>(stateSet, drawable, id); }
inline void AnimatedStateListDrawable::addTransition(jint fromId, jint toId, ref<android::graphics::drawable::Drawable> transition, jboolean reversible) { return call_method<SCAPIX_META_STRING("addTransition"), void>(fromId, toId, transition, reversible); }
inline jboolean AnimatedStateListDrawable::isStateful() { return call_method<SCAPIX_META_STRING("isStateful"), jboolean>(); }
inline void AnimatedStateListDrawable::jumpToCurrentState() { return call_method<SCAPIX_META_STRING("jumpToCurrentState"), void>(); }
inline void AnimatedStateListDrawable::inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme) { return call_method<SCAPIX_META_STRING("inflate"), void>(r, parser, attrs, theme); }
inline void AnimatedStateListDrawable::applyTheme(ref<android::content::res::Resources_Theme> theme) { return call_method<SCAPIX_META_STRING("applyTheme"), void>(theme); }
inline ref<android::graphics::drawable::Drawable> AnimatedStateListDrawable::mutate() { return call_method<SCAPIX_META_STRING("mutate"), ref<android::graphics::drawable::Drawable>>(); }

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ANIMATEDSTATELISTDRAWABLE_H
