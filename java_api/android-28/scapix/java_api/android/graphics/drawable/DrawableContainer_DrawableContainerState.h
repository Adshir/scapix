// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/graphics/drawable/Drawable_ConstantState.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_DRAWABLE_DRAWABLECONTAINER_DRAWABLECONTAINERSTATE_H
#define SCAPIX_ANDROID_GRAPHICS_DRAWABLE_DRAWABLECONTAINER_DRAWABLECONTAINERSTATE_H

namespace scapix::java_api {

namespace android::graphics { class Rect; }
namespace android::graphics::drawable { class Drawable; }

namespace android::graphics::drawable {

class DrawableContainer_DrawableContainerState : public object_base<SCAPIX_META_STRING("android/graphics/drawable/DrawableContainer$DrawableContainerState"),
	android::graphics::drawable::Drawable_ConstantState>
{
public:

	jint getChangingConfigurations();
	jint addChild(ref<android::graphics::drawable::Drawable> dr);
	jint getChildCount();
	ref<link::java::array<android::graphics::drawable::Drawable>> getChildren();
	ref<android::graphics::drawable::Drawable> getChild(jint index);
	jboolean canApplyTheme();
	void setVariablePadding(jboolean variable);
	ref<android::graphics::Rect> getConstantPadding();
	void setConstantSize(jboolean constant);
	jboolean isConstantSize();
	jint getConstantWidth();
	jint getConstantHeight();
	jint getConstantMinimumWidth();
	jint getConstantMinimumHeight();
	void setEnterFadeDuration(jint duration);
	jint getEnterFadeDuration();
	void setExitFadeDuration(jint duration);
	jint getExitFadeDuration();
	jint getOpacity();
	jboolean isStateful();
	void growArray(jint oldSize, jint newSize);
	jboolean canConstantState();

protected:

	DrawableContainer_DrawableContainerState(handle_type h) : base_(h) {}

};

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>

namespace scapix::java_api {
namespace android::graphics::drawable {

inline jint DrawableContainer_DrawableContainerState::getChangingConfigurations() { return call_method<SCAPIX_META_STRING("getChangingConfigurations"), jint>(); }
inline jint DrawableContainer_DrawableContainerState::addChild(ref<android::graphics::drawable::Drawable> dr) { return call_method<SCAPIX_META_STRING("addChild"), jint>(dr); }
inline jint DrawableContainer_DrawableContainerState::getChildCount() { return call_method<SCAPIX_META_STRING("getChildCount"), jint>(); }
inline ref<link::java::array<android::graphics::drawable::Drawable>> DrawableContainer_DrawableContainerState::getChildren() { return call_method<SCAPIX_META_STRING("getChildren"), ref<link::java::array<android::graphics::drawable::Drawable>>>(); }
inline ref<android::graphics::drawable::Drawable> DrawableContainer_DrawableContainerState::getChild(jint index) { return call_method<SCAPIX_META_STRING("getChild"), ref<android::graphics::drawable::Drawable>>(index); }
inline jboolean DrawableContainer_DrawableContainerState::canApplyTheme() { return call_method<SCAPIX_META_STRING("canApplyTheme"), jboolean>(); }
inline void DrawableContainer_DrawableContainerState::setVariablePadding(jboolean variable) { return call_method<SCAPIX_META_STRING("setVariablePadding"), void>(variable); }
inline ref<android::graphics::Rect> DrawableContainer_DrawableContainerState::getConstantPadding() { return call_method<SCAPIX_META_STRING("getConstantPadding"), ref<android::graphics::Rect>>(); }
inline void DrawableContainer_DrawableContainerState::setConstantSize(jboolean constant) { return call_method<SCAPIX_META_STRING("setConstantSize"), void>(constant); }
inline jboolean DrawableContainer_DrawableContainerState::isConstantSize() { return call_method<SCAPIX_META_STRING("isConstantSize"), jboolean>(); }
inline jint DrawableContainer_DrawableContainerState::getConstantWidth() { return call_method<SCAPIX_META_STRING("getConstantWidth"), jint>(); }
inline jint DrawableContainer_DrawableContainerState::getConstantHeight() { return call_method<SCAPIX_META_STRING("getConstantHeight"), jint>(); }
inline jint DrawableContainer_DrawableContainerState::getConstantMinimumWidth() { return call_method<SCAPIX_META_STRING("getConstantMinimumWidth"), jint>(); }
inline jint DrawableContainer_DrawableContainerState::getConstantMinimumHeight() { return call_method<SCAPIX_META_STRING("getConstantMinimumHeight"), jint>(); }
inline void DrawableContainer_DrawableContainerState::setEnterFadeDuration(jint duration) { return call_method<SCAPIX_META_STRING("setEnterFadeDuration"), void>(duration); }
inline jint DrawableContainer_DrawableContainerState::getEnterFadeDuration() { return call_method<SCAPIX_META_STRING("getEnterFadeDuration"), jint>(); }
inline void DrawableContainer_DrawableContainerState::setExitFadeDuration(jint duration) { return call_method<SCAPIX_META_STRING("setExitFadeDuration"), void>(duration); }
inline jint DrawableContainer_DrawableContainerState::getExitFadeDuration() { return call_method<SCAPIX_META_STRING("getExitFadeDuration"), jint>(); }
inline jint DrawableContainer_DrawableContainerState::getOpacity() { return call_method<SCAPIX_META_STRING("getOpacity"), jint>(); }
inline jboolean DrawableContainer_DrawableContainerState::isStateful() { return call_method<SCAPIX_META_STRING("isStateful"), jboolean>(); }
inline void DrawableContainer_DrawableContainerState::growArray(jint oldSize, jint newSize) { return call_method<SCAPIX_META_STRING("growArray"), void>(oldSize, newSize); }
inline jboolean DrawableContainer_DrawableContainerState::canConstantState() { return call_method<SCAPIX_META_STRING("canConstantState"), jboolean>(); }

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_DRAWABLE_DRAWABLECONTAINER_DRAWABLECONTAINERSTATE_H
