// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/graphics/drawable/Drawable_Callback.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_DRAWABLE_DRAWABLECONTAINER_H
#define SCAPIX_ANDROID_GRAPHICS_DRAWABLE_DRAWABLECONTAINER_H

namespace scapix::java_api {

namespace android::content::res { class ColorStateList; }
namespace android::content::res { class Resources_Theme; }
namespace android::graphics { class Canvas; }
namespace android::graphics { class ColorFilter; }
namespace android::graphics { class Outline; }
namespace android::graphics { class PorterDuff_Mode; }
namespace android::graphics { class Rect; }
namespace android::graphics::drawable { class Drawable_ConstantState; }
namespace java::lang { class Runnable; }
namespace android::graphics::drawable { class DrawableContainer_DrawableContainerState; }

namespace android::graphics::drawable {

class DrawableContainer : public object_base<SCAPIX_META_STRING("android/graphics/drawable/DrawableContainer"),
	android::graphics::drawable::Drawable,
	android::graphics::drawable::Drawable_Callback>
{
public:

	using DrawableContainerState = DrawableContainer_DrawableContainerState;

	static ref<DrawableContainer> new_object();
	void draw(ref<android::graphics::Canvas> canvas);
	jint getChangingConfigurations();
	jboolean getPadding(ref<android::graphics::Rect> padding);
	void getOutline(ref<android::graphics::Outline> outline);
	void setAlpha(jint alpha);
	jint getAlpha();
	void setDither(jboolean dither);
	void setColorFilter(ref<android::graphics::ColorFilter> colorFilter);
	void setTintList(ref<android::content::res::ColorStateList> tint);
	void setTintMode(ref<android::graphics::PorterDuff_Mode> tintMode);
	void setEnterFadeDuration(jint ms);
	void setExitFadeDuration(jint ms);
	jboolean isStateful();
	void setAutoMirrored(jboolean mirrored);
	jboolean isAutoMirrored();
	void jumpToCurrentState();
	void setHotspot(jfloat x, jfloat y);
	void setHotspotBounds(jint left, jint top, jint right, jint bottom);
	void getHotspotBounds(ref<android::graphics::Rect> outRect);
	jboolean onLayoutDirectionChanged(jint layoutDirection);
	jint getIntrinsicWidth();
	jint getIntrinsicHeight();
	jint getMinimumWidth();
	jint getMinimumHeight();
	void invalidateDrawable(ref<android::graphics::drawable::Drawable> who);
	void scheduleDrawable(ref<android::graphics::drawable::Drawable> who, ref<java::lang::Runnable> what, jlong when);
	void unscheduleDrawable(ref<android::graphics::drawable::Drawable> who, ref<java::lang::Runnable> what);
	jboolean setVisible(jboolean visible, jboolean restart);
	jint getOpacity();
	jboolean selectDrawable(jint index);
	ref<android::graphics::drawable::Drawable> getCurrent();
	void applyTheme(ref<android::content::res::Resources_Theme> theme);
	jboolean canApplyTheme();
	ref<android::graphics::drawable::Drawable_ConstantState> getConstantState();
	ref<android::graphics::drawable::Drawable> mutate();

protected:

	DrawableContainer(handle_type h) : base_(h) {}

};

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/ColorFilter.h>
#include <scapix/java_api/android/graphics/Outline.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/drawable/Drawable_ConstantState.h>
#include <scapix/java_api/java/lang/Runnable.h>

namespace scapix::java_api {
namespace android::graphics::drawable {

inline ref<DrawableContainer> DrawableContainer::new_object() { return base_::new_object(); }
inline void DrawableContainer::draw(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("draw"), void>(canvas); }
inline jint DrawableContainer::getChangingConfigurations() { return call_method<SCAPIX_META_STRING("getChangingConfigurations"), jint>(); }
inline jboolean DrawableContainer::getPadding(ref<android::graphics::Rect> padding) { return call_method<SCAPIX_META_STRING("getPadding"), jboolean>(padding); }
inline void DrawableContainer::getOutline(ref<android::graphics::Outline> outline) { return call_method<SCAPIX_META_STRING("getOutline"), void>(outline); }
inline void DrawableContainer::setAlpha(jint alpha) { return call_method<SCAPIX_META_STRING("setAlpha"), void>(alpha); }
inline jint DrawableContainer::getAlpha() { return call_method<SCAPIX_META_STRING("getAlpha"), jint>(); }
inline void DrawableContainer::setDither(jboolean dither) { return call_method<SCAPIX_META_STRING("setDither"), void>(dither); }
inline void DrawableContainer::setColorFilter(ref<android::graphics::ColorFilter> colorFilter) { return call_method<SCAPIX_META_STRING("setColorFilter"), void>(colorFilter); }
inline void DrawableContainer::setTintList(ref<android::content::res::ColorStateList> tint) { return call_method<SCAPIX_META_STRING("setTintList"), void>(tint); }
inline void DrawableContainer::setTintMode(ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<SCAPIX_META_STRING("setTintMode"), void>(tintMode); }
inline void DrawableContainer::setEnterFadeDuration(jint ms) { return call_method<SCAPIX_META_STRING("setEnterFadeDuration"), void>(ms); }
inline void DrawableContainer::setExitFadeDuration(jint ms) { return call_method<SCAPIX_META_STRING("setExitFadeDuration"), void>(ms); }
inline jboolean DrawableContainer::isStateful() { return call_method<SCAPIX_META_STRING("isStateful"), jboolean>(); }
inline void DrawableContainer::setAutoMirrored(jboolean mirrored) { return call_method<SCAPIX_META_STRING("setAutoMirrored"), void>(mirrored); }
inline jboolean DrawableContainer::isAutoMirrored() { return call_method<SCAPIX_META_STRING("isAutoMirrored"), jboolean>(); }
inline void DrawableContainer::jumpToCurrentState() { return call_method<SCAPIX_META_STRING("jumpToCurrentState"), void>(); }
inline void DrawableContainer::setHotspot(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("setHotspot"), void>(x, y); }
inline void DrawableContainer::setHotspotBounds(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("setHotspotBounds"), void>(left, top, right, bottom); }
inline void DrawableContainer::getHotspotBounds(ref<android::graphics::Rect> outRect) { return call_method<SCAPIX_META_STRING("getHotspotBounds"), void>(outRect); }
inline jboolean DrawableContainer::onLayoutDirectionChanged(jint layoutDirection) { return call_method<SCAPIX_META_STRING("onLayoutDirectionChanged"), jboolean>(layoutDirection); }
inline jint DrawableContainer::getIntrinsicWidth() { return call_method<SCAPIX_META_STRING("getIntrinsicWidth"), jint>(); }
inline jint DrawableContainer::getIntrinsicHeight() { return call_method<SCAPIX_META_STRING("getIntrinsicHeight"), jint>(); }
inline jint DrawableContainer::getMinimumWidth() { return call_method<SCAPIX_META_STRING("getMinimumWidth"), jint>(); }
inline jint DrawableContainer::getMinimumHeight() { return call_method<SCAPIX_META_STRING("getMinimumHeight"), jint>(); }
inline void DrawableContainer::invalidateDrawable(ref<android::graphics::drawable::Drawable> who) { return call_method<SCAPIX_META_STRING("invalidateDrawable"), void>(who); }
inline void DrawableContainer::scheduleDrawable(ref<android::graphics::drawable::Drawable> who, ref<java::lang::Runnable> what, jlong when) { return call_method<SCAPIX_META_STRING("scheduleDrawable"), void>(who, what, when); }
inline void DrawableContainer::unscheduleDrawable(ref<android::graphics::drawable::Drawable> who, ref<java::lang::Runnable> what) { return call_method<SCAPIX_META_STRING("unscheduleDrawable"), void>(who, what); }
inline jboolean DrawableContainer::setVisible(jboolean visible, jboolean restart) { return call_method<SCAPIX_META_STRING("setVisible"), jboolean>(visible, restart); }
inline jint DrawableContainer::getOpacity() { return call_method<SCAPIX_META_STRING("getOpacity"), jint>(); }
inline jboolean DrawableContainer::selectDrawable(jint index) { return call_method<SCAPIX_META_STRING("selectDrawable"), jboolean>(index); }
inline ref<android::graphics::drawable::Drawable> DrawableContainer::getCurrent() { return call_method<SCAPIX_META_STRING("getCurrent"), ref<android::graphics::drawable::Drawable>>(); }
inline void DrawableContainer::applyTheme(ref<android::content::res::Resources_Theme> theme) { return call_method<SCAPIX_META_STRING("applyTheme"), void>(theme); }
inline jboolean DrawableContainer::canApplyTheme() { return call_method<SCAPIX_META_STRING("canApplyTheme"), jboolean>(); }
inline ref<android::graphics::drawable::Drawable_ConstantState> DrawableContainer::getConstantState() { return call_method<SCAPIX_META_STRING("getConstantState"), ref<android::graphics::drawable::Drawable_ConstantState>>(); }
inline ref<android::graphics::drawable::Drawable> DrawableContainer::mutate() { return call_method<SCAPIX_META_STRING("mutate"), ref<android::graphics::drawable::Drawable>>(); }

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_DRAWABLE_DRAWABLECONTAINER_H
