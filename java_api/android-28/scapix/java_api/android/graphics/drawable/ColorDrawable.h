// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/graphics/drawable/Drawable.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_DRAWABLE_COLORDRAWABLE_H
#define SCAPIX_ANDROID_GRAPHICS_DRAWABLE_COLORDRAWABLE_H

namespace scapix::java_api {

namespace android::content::res { class ColorStateList; }
namespace android::content::res { class Resources; }
namespace android::content::res { class Resources_Theme; }
namespace android::graphics { class Canvas; }
namespace android::graphics { class ColorFilter; }
namespace android::graphics { class Outline; }
namespace android::graphics { class PorterDuff_Mode; }
namespace android::graphics::drawable { class Drawable_ConstantState; }
namespace android::util { class AttributeSet; }
namespace org::xmlpull::v1 { class XmlPullParser; }

namespace android::graphics::drawable {

class ColorDrawable : public object_base<SCAPIX_META_STRING("android/graphics/drawable/ColorDrawable"),
	android::graphics::drawable::Drawable>
{
public:

	static ref<ColorDrawable> new_object();
	static ref<ColorDrawable> new_object(jint color);
	jint getChangingConfigurations();
	ref<android::graphics::drawable::Drawable> mutate();
	void draw(ref<android::graphics::Canvas> canvas);
	jint getColor();
	void setColor(jint color);
	jint getAlpha();
	void setAlpha(jint alpha);
	void setColorFilter(ref<android::graphics::ColorFilter> colorFilter);
	void setTintList(ref<android::content::res::ColorStateList> tint);
	void setTintMode(ref<android::graphics::PorterDuff_Mode> tintMode);
	jboolean isStateful();
	jint getOpacity();
	void getOutline(ref<android::graphics::Outline> outline);
	void inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme);
	jboolean canApplyTheme();
	void applyTheme(ref<android::content::res::Resources_Theme> t);
	ref<android::graphics::drawable::Drawable_ConstantState> getConstantState();

protected:

	ColorDrawable(handle_type h) : base_(h) {}

};

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/ColorFilter.h>
#include <scapix/java_api/android/graphics/Outline.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/drawable/Drawable_ConstantState.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>

namespace scapix::java_api {
namespace android::graphics::drawable {

inline ref<ColorDrawable> ColorDrawable::new_object() { return base_::new_object(); }
inline ref<ColorDrawable> ColorDrawable::new_object(jint color) { return base_::new_object(color); }
inline jint ColorDrawable::getChangingConfigurations() { return call_method<SCAPIX_META_STRING("getChangingConfigurations"), jint>(); }
inline ref<android::graphics::drawable::Drawable> ColorDrawable::mutate() { return call_method<SCAPIX_META_STRING("mutate"), ref<android::graphics::drawable::Drawable>>(); }
inline void ColorDrawable::draw(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("draw"), void>(canvas); }
inline jint ColorDrawable::getColor() { return call_method<SCAPIX_META_STRING("getColor"), jint>(); }
inline void ColorDrawable::setColor(jint color) { return call_method<SCAPIX_META_STRING("setColor"), void>(color); }
inline jint ColorDrawable::getAlpha() { return call_method<SCAPIX_META_STRING("getAlpha"), jint>(); }
inline void ColorDrawable::setAlpha(jint alpha) { return call_method<SCAPIX_META_STRING("setAlpha"), void>(alpha); }
inline void ColorDrawable::setColorFilter(ref<android::graphics::ColorFilter> colorFilter) { return call_method<SCAPIX_META_STRING("setColorFilter"), void>(colorFilter); }
inline void ColorDrawable::setTintList(ref<android::content::res::ColorStateList> tint) { return call_method<SCAPIX_META_STRING("setTintList"), void>(tint); }
inline void ColorDrawable::setTintMode(ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<SCAPIX_META_STRING("setTintMode"), void>(tintMode); }
inline jboolean ColorDrawable::isStateful() { return call_method<SCAPIX_META_STRING("isStateful"), jboolean>(); }
inline jint ColorDrawable::getOpacity() { return call_method<SCAPIX_META_STRING("getOpacity"), jint>(); }
inline void ColorDrawable::getOutline(ref<android::graphics::Outline> outline) { return call_method<SCAPIX_META_STRING("getOutline"), void>(outline); }
inline void ColorDrawable::inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme) { return call_method<SCAPIX_META_STRING("inflate"), void>(r, parser, attrs, theme); }
inline jboolean ColorDrawable::canApplyTheme() { return call_method<SCAPIX_META_STRING("canApplyTheme"), jboolean>(); }
inline void ColorDrawable::applyTheme(ref<android::content::res::Resources_Theme> t) { return call_method<SCAPIX_META_STRING("applyTheme"), void>(t); }
inline ref<android::graphics::drawable::Drawable_ConstantState> ColorDrawable::getConstantState() { return call_method<SCAPIX_META_STRING("getConstantState"), ref<android::graphics::drawable::Drawable_ConstantState>>(); }

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_DRAWABLE_COLORDRAWABLE_H
