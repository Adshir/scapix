// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_DRAWABLE_DRAWABLE_H
#define SCAPIX_ANDROID_GRAPHICS_DRAWABLE_DRAWABLE_H

namespace scapix::java_api {

namespace android::content::res { class ColorStateList; }
namespace android::content::res { class Resources; }
namespace android::content::res { class Resources_Theme; }
namespace android::graphics { class BitmapFactory_Options; }
namespace android::graphics { class Canvas; }
namespace android::graphics { class ColorFilter; }
namespace android::graphics { class Outline; }
namespace android::graphics { class PorterDuff_Mode; }
namespace android::graphics { class Rect; }
namespace android::graphics { class Region; }
namespace android::graphics::drawable { class Drawable_Callback; }
namespace android::graphics::drawable { class Drawable_ConstantState; }
namespace android::util { class AttributeSet; }
namespace android::util { class TypedValue; }
namespace java::io { class InputStream; }
namespace java::lang { class Runnable; }
namespace java::lang { class String; }
namespace org::xmlpull::v1 { class XmlPullParser; }

namespace android::graphics::drawable {

class Drawable : public object_base<SCAPIX_META_STRING("android/graphics/drawable/Drawable"),
	java::lang::Object>
{
public:

	using ConstantState = Drawable_ConstantState;
	using Callback = Drawable_Callback;

	static ref<Drawable> new_object();
	void draw(ref<android::graphics::Canvas> p1);
	void setBounds(jint left, jint top, jint right, jint bottom);
	void setBounds(ref<android::graphics::Rect> bounds);
	void copyBounds(ref<android::graphics::Rect> bounds);
	ref<android::graphics::Rect> copyBounds();
	ref<android::graphics::Rect> getBounds();
	ref<android::graphics::Rect> getDirtyBounds();
	void setChangingConfigurations(jint configs);
	jint getChangingConfigurations();
	void setDither(jboolean dither);
	void setFilterBitmap(jboolean filter);
	jboolean isFilterBitmap();
	void setCallback(ref<android::graphics::drawable::Drawable_Callback> cb);
	ref<android::graphics::drawable::Drawable_Callback> getCallback();
	void invalidateSelf();
	void scheduleSelf(ref<java::lang::Runnable> what, jlong when);
	void unscheduleSelf(ref<java::lang::Runnable> what);
	jint getLayoutDirection();
	jboolean setLayoutDirection(jint layoutDirection);
	jboolean onLayoutDirectionChanged(jint layoutDirection);
	void setAlpha(jint p1);
	jint getAlpha();
	void setColorFilter(ref<android::graphics::ColorFilter> p1);
	void setColorFilter(jint color, ref<android::graphics::PorterDuff_Mode> mode);
	void setTint(jint tintColor);
	void setTintList(ref<android::content::res::ColorStateList> tint);
	void setTintMode(ref<android::graphics::PorterDuff_Mode> tintMode);
	ref<android::graphics::ColorFilter> getColorFilter();
	void clearColorFilter();
	void setHotspot(jfloat x, jfloat y);
	void setHotspotBounds(jint left, jint top, jint right, jint bottom);
	void getHotspotBounds(ref<android::graphics::Rect> outRect);
	jboolean isStateful();
	jboolean setState(ref<link::java::array<jint>> stateSet);
	ref<link::java::array<jint>> getState();
	void jumpToCurrentState();
	ref<android::graphics::drawable::Drawable> getCurrent();
	jboolean setLevel(jint level);
	jint getLevel();
	jboolean setVisible(jboolean visible, jboolean restart);
	jboolean isVisible();
	void setAutoMirrored(jboolean mirrored);
	jboolean isAutoMirrored();
	void applyTheme(ref<android::content::res::Resources_Theme> t);
	jboolean canApplyTheme();
	jint getOpacity();
	static jint resolveOpacity(jint op1, jint op2);
	ref<android::graphics::Region> getTransparentRegion();
	jint getIntrinsicWidth();
	jint getIntrinsicHeight();
	jint getMinimumWidth();
	jint getMinimumHeight();
	jboolean getPadding(ref<android::graphics::Rect> padding);
	void getOutline(ref<android::graphics::Outline> outline);
	ref<android::graphics::drawable::Drawable> mutate();
	static ref<android::graphics::drawable::Drawable> createFromStream(ref<java::io::InputStream> is, ref<java::lang::String> srcName);
	static ref<android::graphics::drawable::Drawable> createFromResourceStream(ref<android::content::res::Resources> res, ref<android::util::TypedValue> value, ref<java::io::InputStream> is, ref<java::lang::String> srcName);
	static ref<android::graphics::drawable::Drawable> createFromResourceStream(ref<android::content::res::Resources> res, ref<android::util::TypedValue> value, ref<java::io::InputStream> is, ref<java::lang::String> srcName, ref<android::graphics::BitmapFactory_Options> opts);
	static ref<android::graphics::drawable::Drawable> createFromXml(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser);
	static ref<android::graphics::drawable::Drawable> createFromXml(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::content::res::Resources_Theme> theme);
	static ref<android::graphics::drawable::Drawable> createFromXmlInner(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs);
	static ref<android::graphics::drawable::Drawable> createFromXmlInner(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme);
	static ref<android::graphics::drawable::Drawable> createFromPath(ref<java::lang::String> pathName);
	void inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs);
	void inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme);
	ref<android::graphics::drawable::Drawable_ConstantState> getConstantState();

protected:

	Drawable(handle_type h) : base_(h) {}

};

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/graphics/BitmapFactory_Options.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/ColorFilter.h>
#include <scapix/java_api/android/graphics/Outline.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/Region.h>
#include <scapix/java_api/android/graphics/drawable/Drawable_Callback.h>
#include <scapix/java_api/android/graphics/drawable/Drawable_ConstantState.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/util/TypedValue.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>

namespace scapix::java_api {
namespace android::graphics::drawable {

inline ref<Drawable> Drawable::new_object() { return base_::new_object(); }
inline void Drawable::draw(ref<android::graphics::Canvas> p1) { return call_method<SCAPIX_META_STRING("draw"), void>(p1); }
inline void Drawable::setBounds(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("setBounds"), void>(left, top, right, bottom); }
inline void Drawable::setBounds(ref<android::graphics::Rect> bounds) { return call_method<SCAPIX_META_STRING("setBounds"), void>(bounds); }
inline void Drawable::copyBounds(ref<android::graphics::Rect> bounds) { return call_method<SCAPIX_META_STRING("copyBounds"), void>(bounds); }
inline ref<android::graphics::Rect> Drawable::copyBounds() { return call_method<SCAPIX_META_STRING("copyBounds"), ref<android::graphics::Rect>>(); }
inline ref<android::graphics::Rect> Drawable::getBounds() { return call_method<SCAPIX_META_STRING("getBounds"), ref<android::graphics::Rect>>(); }
inline ref<android::graphics::Rect> Drawable::getDirtyBounds() { return call_method<SCAPIX_META_STRING("getDirtyBounds"), ref<android::graphics::Rect>>(); }
inline void Drawable::setChangingConfigurations(jint configs) { return call_method<SCAPIX_META_STRING("setChangingConfigurations"), void>(configs); }
inline jint Drawable::getChangingConfigurations() { return call_method<SCAPIX_META_STRING("getChangingConfigurations"), jint>(); }
inline void Drawable::setDither(jboolean dither) { return call_method<SCAPIX_META_STRING("setDither"), void>(dither); }
inline void Drawable::setFilterBitmap(jboolean filter) { return call_method<SCAPIX_META_STRING("setFilterBitmap"), void>(filter); }
inline jboolean Drawable::isFilterBitmap() { return call_method<SCAPIX_META_STRING("isFilterBitmap"), jboolean>(); }
inline void Drawable::setCallback(ref<android::graphics::drawable::Drawable_Callback> cb) { return call_method<SCAPIX_META_STRING("setCallback"), void>(cb); }
inline ref<android::graphics::drawable::Drawable_Callback> Drawable::getCallback() { return call_method<SCAPIX_META_STRING("getCallback"), ref<android::graphics::drawable::Drawable_Callback>>(); }
inline void Drawable::invalidateSelf() { return call_method<SCAPIX_META_STRING("invalidateSelf"), void>(); }
inline void Drawable::scheduleSelf(ref<java::lang::Runnable> what, jlong when) { return call_method<SCAPIX_META_STRING("scheduleSelf"), void>(what, when); }
inline void Drawable::unscheduleSelf(ref<java::lang::Runnable> what) { return call_method<SCAPIX_META_STRING("unscheduleSelf"), void>(what); }
inline jint Drawable::getLayoutDirection() { return call_method<SCAPIX_META_STRING("getLayoutDirection"), jint>(); }
inline jboolean Drawable::setLayoutDirection(jint layoutDirection) { return call_method<SCAPIX_META_STRING("setLayoutDirection"), jboolean>(layoutDirection); }
inline jboolean Drawable::onLayoutDirectionChanged(jint layoutDirection) { return call_method<SCAPIX_META_STRING("onLayoutDirectionChanged"), jboolean>(layoutDirection); }
inline void Drawable::setAlpha(jint p1) { return call_method<SCAPIX_META_STRING("setAlpha"), void>(p1); }
inline jint Drawable::getAlpha() { return call_method<SCAPIX_META_STRING("getAlpha"), jint>(); }
inline void Drawable::setColorFilter(ref<android::graphics::ColorFilter> p1) { return call_method<SCAPIX_META_STRING("setColorFilter"), void>(p1); }
inline void Drawable::setColorFilter(jint color, ref<android::graphics::PorterDuff_Mode> mode) { return call_method<SCAPIX_META_STRING("setColorFilter"), void>(color, mode); }
inline void Drawable::setTint(jint tintColor) { return call_method<SCAPIX_META_STRING("setTint"), void>(tintColor); }
inline void Drawable::setTintList(ref<android::content::res::ColorStateList> tint) { return call_method<SCAPIX_META_STRING("setTintList"), void>(tint); }
inline void Drawable::setTintMode(ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<SCAPIX_META_STRING("setTintMode"), void>(tintMode); }
inline ref<android::graphics::ColorFilter> Drawable::getColorFilter() { return call_method<SCAPIX_META_STRING("getColorFilter"), ref<android::graphics::ColorFilter>>(); }
inline void Drawable::clearColorFilter() { return call_method<SCAPIX_META_STRING("clearColorFilter"), void>(); }
inline void Drawable::setHotspot(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("setHotspot"), void>(x, y); }
inline void Drawable::setHotspotBounds(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("setHotspotBounds"), void>(left, top, right, bottom); }
inline void Drawable::getHotspotBounds(ref<android::graphics::Rect> outRect) { return call_method<SCAPIX_META_STRING("getHotspotBounds"), void>(outRect); }
inline jboolean Drawable::isStateful() { return call_method<SCAPIX_META_STRING("isStateful"), jboolean>(); }
inline jboolean Drawable::setState(ref<link::java::array<jint>> stateSet) { return call_method<SCAPIX_META_STRING("setState"), jboolean>(stateSet); }
inline ref<link::java::array<jint>> Drawable::getState() { return call_method<SCAPIX_META_STRING("getState"), ref<link::java::array<jint>>>(); }
inline void Drawable::jumpToCurrentState() { return call_method<SCAPIX_META_STRING("jumpToCurrentState"), void>(); }
inline ref<android::graphics::drawable::Drawable> Drawable::getCurrent() { return call_method<SCAPIX_META_STRING("getCurrent"), ref<android::graphics::drawable::Drawable>>(); }
inline jboolean Drawable::setLevel(jint level) { return call_method<SCAPIX_META_STRING("setLevel"), jboolean>(level); }
inline jint Drawable::getLevel() { return call_method<SCAPIX_META_STRING("getLevel"), jint>(); }
inline jboolean Drawable::setVisible(jboolean visible, jboolean restart) { return call_method<SCAPIX_META_STRING("setVisible"), jboolean>(visible, restart); }
inline jboolean Drawable::isVisible() { return call_method<SCAPIX_META_STRING("isVisible"), jboolean>(); }
inline void Drawable::setAutoMirrored(jboolean mirrored) { return call_method<SCAPIX_META_STRING("setAutoMirrored"), void>(mirrored); }
inline jboolean Drawable::isAutoMirrored() { return call_method<SCAPIX_META_STRING("isAutoMirrored"), jboolean>(); }
inline void Drawable::applyTheme(ref<android::content::res::Resources_Theme> t) { return call_method<SCAPIX_META_STRING("applyTheme"), void>(t); }
inline jboolean Drawable::canApplyTheme() { return call_method<SCAPIX_META_STRING("canApplyTheme"), jboolean>(); }
inline jint Drawable::getOpacity() { return call_method<SCAPIX_META_STRING("getOpacity"), jint>(); }
inline jint Drawable::resolveOpacity(jint op1, jint op2) { return call_static_method<SCAPIX_META_STRING("resolveOpacity"), jint>(op1, op2); }
inline ref<android::graphics::Region> Drawable::getTransparentRegion() { return call_method<SCAPIX_META_STRING("getTransparentRegion"), ref<android::graphics::Region>>(); }
inline jint Drawable::getIntrinsicWidth() { return call_method<SCAPIX_META_STRING("getIntrinsicWidth"), jint>(); }
inline jint Drawable::getIntrinsicHeight() { return call_method<SCAPIX_META_STRING("getIntrinsicHeight"), jint>(); }
inline jint Drawable::getMinimumWidth() { return call_method<SCAPIX_META_STRING("getMinimumWidth"), jint>(); }
inline jint Drawable::getMinimumHeight() { return call_method<SCAPIX_META_STRING("getMinimumHeight"), jint>(); }
inline jboolean Drawable::getPadding(ref<android::graphics::Rect> padding) { return call_method<SCAPIX_META_STRING("getPadding"), jboolean>(padding); }
inline void Drawable::getOutline(ref<android::graphics::Outline> outline) { return call_method<SCAPIX_META_STRING("getOutline"), void>(outline); }
inline ref<android::graphics::drawable::Drawable> Drawable::mutate() { return call_method<SCAPIX_META_STRING("mutate"), ref<android::graphics::drawable::Drawable>>(); }
inline ref<android::graphics::drawable::Drawable> Drawable::createFromStream(ref<java::io::InputStream> is, ref<java::lang::String> srcName) { return call_static_method<SCAPIX_META_STRING("createFromStream"), ref<android::graphics::drawable::Drawable>>(is, srcName); }
inline ref<android::graphics::drawable::Drawable> Drawable::createFromResourceStream(ref<android::content::res::Resources> res, ref<android::util::TypedValue> value, ref<java::io::InputStream> is, ref<java::lang::String> srcName) { return call_static_method<SCAPIX_META_STRING("createFromResourceStream"), ref<android::graphics::drawable::Drawable>>(res, value, is, srcName); }
inline ref<android::graphics::drawable::Drawable> Drawable::createFromResourceStream(ref<android::content::res::Resources> res, ref<android::util::TypedValue> value, ref<java::io::InputStream> is, ref<java::lang::String> srcName, ref<android::graphics::BitmapFactory_Options> opts) { return call_static_method<SCAPIX_META_STRING("createFromResourceStream"), ref<android::graphics::drawable::Drawable>>(res, value, is, srcName, opts); }
inline ref<android::graphics::drawable::Drawable> Drawable::createFromXml(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser) { return call_static_method<SCAPIX_META_STRING("createFromXml"), ref<android::graphics::drawable::Drawable>>(r, parser); }
inline ref<android::graphics::drawable::Drawable> Drawable::createFromXml(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::content::res::Resources_Theme> theme) { return call_static_method<SCAPIX_META_STRING("createFromXml"), ref<android::graphics::drawable::Drawable>>(r, parser, theme); }
inline ref<android::graphics::drawable::Drawable> Drawable::createFromXmlInner(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs) { return call_static_method<SCAPIX_META_STRING("createFromXmlInner"), ref<android::graphics::drawable::Drawable>>(r, parser, attrs); }
inline ref<android::graphics::drawable::Drawable> Drawable::createFromXmlInner(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme) { return call_static_method<SCAPIX_META_STRING("createFromXmlInner"), ref<android::graphics::drawable::Drawable>>(r, parser, attrs, theme); }
inline ref<android::graphics::drawable::Drawable> Drawable::createFromPath(ref<java::lang::String> pathName) { return call_static_method<SCAPIX_META_STRING("createFromPath"), ref<android::graphics::drawable::Drawable>>(pathName); }
inline void Drawable::inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs) { return call_method<SCAPIX_META_STRING("inflate"), void>(r, parser, attrs); }
inline void Drawable::inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme) { return call_method<SCAPIX_META_STRING("inflate"), void>(r, parser, attrs, theme); }
inline ref<android::graphics::drawable::Drawable_ConstantState> Drawable::getConstantState() { return call_method<SCAPIX_META_STRING("getConstantState"), ref<android::graphics::drawable::Drawable_ConstantState>>(); }

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_DRAWABLE_DRAWABLE_H
