// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/graphics/drawable/Animatable2.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ANIMATEDVECTORDRAWABLE_H
#define SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ANIMATEDVECTORDRAWABLE_H

namespace scapix::java_api {

namespace android::content::res { class ColorStateList; }
namespace android::content::res { class Resources; }
namespace android::content::res { class Resources_Theme; }
namespace android::graphics { class Canvas; }
namespace android::graphics { class ColorFilter; }
namespace android::graphics { class Outline; }
namespace android::graphics { class PorterDuff_Mode; }
namespace android::graphics::drawable { class Animatable2_AnimationCallback; }
namespace android::graphics::drawable { class Drawable_ConstantState; }
namespace android::util { class AttributeSet; }
namespace org::xmlpull::v1 { class XmlPullParser; }

namespace android::graphics::drawable {

class AnimatedVectorDrawable : public object_base<SCAPIX_META_STRING("android/graphics/drawable/AnimatedVectorDrawable"),
	android::graphics::drawable::Drawable,
	android::graphics::drawable::Animatable2>
{
public:

	static ref<AnimatedVectorDrawable> new_object();
	ref<android::graphics::drawable::Drawable> mutate();
	ref<android::graphics::drawable::Drawable_ConstantState> getConstantState();
	jint getChangingConfigurations();
	void draw(ref<android::graphics::Canvas> canvas);
	jboolean onLayoutDirectionChanged(jint layoutDirection);
	jint getAlpha();
	void setAlpha(jint alpha);
	void setColorFilter(ref<android::graphics::ColorFilter> colorFilter);
	ref<android::graphics::ColorFilter> getColorFilter();
	void setTintList(ref<android::content::res::ColorStateList> tint);
	void setHotspot(jfloat x, jfloat y);
	void setHotspotBounds(jint left, jint top, jint right, jint bottom);
	void setTintMode(ref<android::graphics::PorterDuff_Mode> tintMode);
	jboolean setVisible(jboolean visible, jboolean restart);
	jboolean isStateful();
	jint getOpacity();
	jint getIntrinsicWidth();
	jint getIntrinsicHeight();
	void getOutline(ref<android::graphics::Outline> outline);
	void inflate(ref<android::content::res::Resources> res, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme);
	jboolean canApplyTheme();
	void applyTheme(ref<android::content::res::Resources_Theme> t);
	jboolean isRunning();
	void reset();
	void start();
	void stop();
	void registerAnimationCallback(ref<android::graphics::drawable::Animatable2_AnimationCallback> callback);
	jboolean unregisterAnimationCallback(ref<android::graphics::drawable::Animatable2_AnimationCallback> callback);
	void clearAnimationCallbacks();

protected:

	AnimatedVectorDrawable(handle_type h) : base_(h) {}

};

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/ColorFilter.h>
#include <scapix/java_api/android/graphics/Outline.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/drawable/Animatable2_AnimationCallback.h>
#include <scapix/java_api/android/graphics/drawable/Drawable_ConstantState.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>

namespace scapix::java_api {
namespace android::graphics::drawable {

inline ref<AnimatedVectorDrawable> AnimatedVectorDrawable::new_object() { return base_::new_object(); }
inline ref<android::graphics::drawable::Drawable> AnimatedVectorDrawable::mutate() { return call_method<SCAPIX_META_STRING("mutate"), ref<android::graphics::drawable::Drawable>>(); }
inline ref<android::graphics::drawable::Drawable_ConstantState> AnimatedVectorDrawable::getConstantState() { return call_method<SCAPIX_META_STRING("getConstantState"), ref<android::graphics::drawable::Drawable_ConstantState>>(); }
inline jint AnimatedVectorDrawable::getChangingConfigurations() { return call_method<SCAPIX_META_STRING("getChangingConfigurations"), jint>(); }
inline void AnimatedVectorDrawable::draw(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("draw"), void>(canvas); }
inline jboolean AnimatedVectorDrawable::onLayoutDirectionChanged(jint layoutDirection) { return call_method<SCAPIX_META_STRING("onLayoutDirectionChanged"), jboolean>(layoutDirection); }
inline jint AnimatedVectorDrawable::getAlpha() { return call_method<SCAPIX_META_STRING("getAlpha"), jint>(); }
inline void AnimatedVectorDrawable::setAlpha(jint alpha) { return call_method<SCAPIX_META_STRING("setAlpha"), void>(alpha); }
inline void AnimatedVectorDrawable::setColorFilter(ref<android::graphics::ColorFilter> colorFilter) { return call_method<SCAPIX_META_STRING("setColorFilter"), void>(colorFilter); }
inline ref<android::graphics::ColorFilter> AnimatedVectorDrawable::getColorFilter() { return call_method<SCAPIX_META_STRING("getColorFilter"), ref<android::graphics::ColorFilter>>(); }
inline void AnimatedVectorDrawable::setTintList(ref<android::content::res::ColorStateList> tint) { return call_method<SCAPIX_META_STRING("setTintList"), void>(tint); }
inline void AnimatedVectorDrawable::setHotspot(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("setHotspot"), void>(x, y); }
inline void AnimatedVectorDrawable::setHotspotBounds(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("setHotspotBounds"), void>(left, top, right, bottom); }
inline void AnimatedVectorDrawable::setTintMode(ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<SCAPIX_META_STRING("setTintMode"), void>(tintMode); }
inline jboolean AnimatedVectorDrawable::setVisible(jboolean visible, jboolean restart) { return call_method<SCAPIX_META_STRING("setVisible"), jboolean>(visible, restart); }
inline jboolean AnimatedVectorDrawable::isStateful() { return call_method<SCAPIX_META_STRING("isStateful"), jboolean>(); }
inline jint AnimatedVectorDrawable::getOpacity() { return call_method<SCAPIX_META_STRING("getOpacity"), jint>(); }
inline jint AnimatedVectorDrawable::getIntrinsicWidth() { return call_method<SCAPIX_META_STRING("getIntrinsicWidth"), jint>(); }
inline jint AnimatedVectorDrawable::getIntrinsicHeight() { return call_method<SCAPIX_META_STRING("getIntrinsicHeight"), jint>(); }
inline void AnimatedVectorDrawable::getOutline(ref<android::graphics::Outline> outline) { return call_method<SCAPIX_META_STRING("getOutline"), void>(outline); }
inline void AnimatedVectorDrawable::inflate(ref<android::content::res::Resources> res, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme) { return call_method<SCAPIX_META_STRING("inflate"), void>(res, parser, attrs, theme); }
inline jboolean AnimatedVectorDrawable::canApplyTheme() { return call_method<SCAPIX_META_STRING("canApplyTheme"), jboolean>(); }
inline void AnimatedVectorDrawable::applyTheme(ref<android::content::res::Resources_Theme> t) { return call_method<SCAPIX_META_STRING("applyTheme"), void>(t); }
inline jboolean AnimatedVectorDrawable::isRunning() { return call_method<SCAPIX_META_STRING("isRunning"), jboolean>(); }
inline void AnimatedVectorDrawable::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline void AnimatedVectorDrawable::start() { return call_method<SCAPIX_META_STRING("start"), void>(); }
inline void AnimatedVectorDrawable::stop() { return call_method<SCAPIX_META_STRING("stop"), void>(); }
inline void AnimatedVectorDrawable::registerAnimationCallback(ref<android::graphics::drawable::Animatable2_AnimationCallback> callback) { return call_method<SCAPIX_META_STRING("registerAnimationCallback"), void>(callback); }
inline jboolean AnimatedVectorDrawable::unregisterAnimationCallback(ref<android::graphics::drawable::Animatable2_AnimationCallback> callback) { return call_method<SCAPIX_META_STRING("unregisterAnimationCallback"), jboolean>(callback); }
inline void AnimatedVectorDrawable::clearAnimationCallbacks() { return call_method<SCAPIX_META_STRING("clearAnimationCallbacks"), void>(); }

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ANIMATEDVECTORDRAWABLE_H
