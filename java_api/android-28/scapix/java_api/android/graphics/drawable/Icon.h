// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ICON_H
#define SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ICON_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content::res { class ColorStateList; }
namespace android::graphics { class Bitmap; }
namespace android::graphics { class PorterDuff_Mode; }
namespace android::graphics::drawable { class Drawable; }
namespace android::graphics::drawable { class Icon_OnDrawableLoadedListener; }
namespace android::net { class Uri; }
namespace android::os { class Handler; }
namespace android::os { class Message; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::graphics::drawable {

class Icon : public object_base<SCAPIX_META_STRING("android/graphics/drawable/Icon"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using OnDrawableLoadedListener = Icon_OnDrawableLoadedListener;

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint TYPE_ADAPTIVE_BITMAP_();
	static jint TYPE_BITMAP_();
	static jint TYPE_DATA_();
	static jint TYPE_RESOURCE_();
	static jint TYPE_URI_();

	jint getType();
	ref<java::lang::String> getResPackage();
	jint getResId();
	ref<android::net::Uri> getUri();
	void loadDrawableAsync(ref<android::content::Context> context, ref<android::os::Message> andThen);
	void loadDrawableAsync(ref<android::content::Context> context, ref<android::graphics::drawable::Icon_OnDrawableLoadedListener> listener, ref<android::os::Handler> handler);
	ref<android::graphics::drawable::Drawable> loadDrawable(ref<android::content::Context> context);
	static ref<android::graphics::drawable::Icon> createWithResource(ref<android::content::Context> context, jint resId);
	static ref<android::graphics::drawable::Icon> createWithResource(ref<java::lang::String> resPackage, jint resId);
	static ref<android::graphics::drawable::Icon> createWithBitmap(ref<android::graphics::Bitmap> bits);
	static ref<android::graphics::drawable::Icon> createWithAdaptiveBitmap(ref<android::graphics::Bitmap> bits);
	static ref<android::graphics::drawable::Icon> createWithData(ref<link::java::array<jbyte>> data, jint offset, jint length);
	static ref<android::graphics::drawable::Icon> createWithContentUri(ref<java::lang::String> uri);
	static ref<android::graphics::drawable::Icon> createWithContentUri(ref<android::net::Uri> uri);
	ref<android::graphics::drawable::Icon> setTint(jint tint);
	ref<android::graphics::drawable::Icon> setTintList(ref<android::content::res::ColorStateList> tintList);
	ref<android::graphics::drawable::Icon> setTintMode(ref<android::graphics::PorterDuff_Mode> mode);
	static ref<android::graphics::drawable::Icon> createWithFilePath(ref<java::lang::String> path);
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);

protected:

	Icon(handle_type h) : base_(h) {}

};

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/graphics/drawable/Icon_OnDrawableLoadedListener.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/Message.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::graphics::drawable {

inline ref<android::os::Parcelable_Creator> Icon::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint Icon::TYPE_ADAPTIVE_BITMAP_() { return get_static_field<SCAPIX_META_STRING("TYPE_ADAPTIVE_BITMAP"), jint>(); }
inline jint Icon::TYPE_BITMAP_() { return get_static_field<SCAPIX_META_STRING("TYPE_BITMAP"), jint>(); }
inline jint Icon::TYPE_DATA_() { return get_static_field<SCAPIX_META_STRING("TYPE_DATA"), jint>(); }
inline jint Icon::TYPE_RESOURCE_() { return get_static_field<SCAPIX_META_STRING("TYPE_RESOURCE"), jint>(); }
inline jint Icon::TYPE_URI_() { return get_static_field<SCAPIX_META_STRING("TYPE_URI"), jint>(); }
inline jint Icon::getType() { return call_method<SCAPIX_META_STRING("getType"), jint>(); }
inline ref<java::lang::String> Icon::getResPackage() { return call_method<SCAPIX_META_STRING("getResPackage"), ref<java::lang::String>>(); }
inline jint Icon::getResId() { return call_method<SCAPIX_META_STRING("getResId"), jint>(); }
inline ref<android::net::Uri> Icon::getUri() { return call_method<SCAPIX_META_STRING("getUri"), ref<android::net::Uri>>(); }
inline void Icon::loadDrawableAsync(ref<android::content::Context> context, ref<android::os::Message> andThen) { return call_method<SCAPIX_META_STRING("loadDrawableAsync"), void>(context, andThen); }
inline void Icon::loadDrawableAsync(ref<android::content::Context> context, ref<android::graphics::drawable::Icon_OnDrawableLoadedListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("loadDrawableAsync"), void>(context, listener, handler); }
inline ref<android::graphics::drawable::Drawable> Icon::loadDrawable(ref<android::content::Context> context) { return call_method<SCAPIX_META_STRING("loadDrawable"), ref<android::graphics::drawable::Drawable>>(context); }
inline ref<android::graphics::drawable::Icon> Icon::createWithResource(ref<android::content::Context> context, jint resId) { return call_static_method<SCAPIX_META_STRING("createWithResource"), ref<android::graphics::drawable::Icon>>(context, resId); }
inline ref<android::graphics::drawable::Icon> Icon::createWithResource(ref<java::lang::String> resPackage, jint resId) { return call_static_method<SCAPIX_META_STRING("createWithResource"), ref<android::graphics::drawable::Icon>>(resPackage, resId); }
inline ref<android::graphics::drawable::Icon> Icon::createWithBitmap(ref<android::graphics::Bitmap> bits) { return call_static_method<SCAPIX_META_STRING("createWithBitmap"), ref<android::graphics::drawable::Icon>>(bits); }
inline ref<android::graphics::drawable::Icon> Icon::createWithAdaptiveBitmap(ref<android::graphics::Bitmap> bits) { return call_static_method<SCAPIX_META_STRING("createWithAdaptiveBitmap"), ref<android::graphics::drawable::Icon>>(bits); }
inline ref<android::graphics::drawable::Icon> Icon::createWithData(ref<link::java::array<jbyte>> data, jint offset, jint length) { return call_static_method<SCAPIX_META_STRING("createWithData"), ref<android::graphics::drawable::Icon>>(data, offset, length); }
inline ref<android::graphics::drawable::Icon> Icon::createWithContentUri(ref<java::lang::String> uri) { return call_static_method<SCAPIX_META_STRING("createWithContentUri"), ref<android::graphics::drawable::Icon>>(uri); }
inline ref<android::graphics::drawable::Icon> Icon::createWithContentUri(ref<android::net::Uri> uri) { return call_static_method<SCAPIX_META_STRING("createWithContentUri"), ref<android::graphics::drawable::Icon>>(uri); }
inline ref<android::graphics::drawable::Icon> Icon::setTint(jint tint) { return call_method<SCAPIX_META_STRING("setTint"), ref<android::graphics::drawable::Icon>>(tint); }
inline ref<android::graphics::drawable::Icon> Icon::setTintList(ref<android::content::res::ColorStateList> tintList) { return call_method<SCAPIX_META_STRING("setTintList"), ref<android::graphics::drawable::Icon>>(tintList); }
inline ref<android::graphics::drawable::Icon> Icon::setTintMode(ref<android::graphics::PorterDuff_Mode> mode) { return call_method<SCAPIX_META_STRING("setTintMode"), ref<android::graphics::drawable::Icon>>(mode); }
inline ref<android::graphics::drawable::Icon> Icon::createWithFilePath(ref<java::lang::String> path) { return call_static_method<SCAPIX_META_STRING("createWithFilePath"), ref<android::graphics::drawable::Icon>>(path); }
inline ref<java::lang::String> Icon::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint Icon::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void Icon::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ICON_H
