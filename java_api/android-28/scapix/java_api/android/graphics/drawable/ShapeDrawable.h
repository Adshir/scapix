// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/graphics/drawable/Drawable.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_DRAWABLE_SHAPEDRAWABLE_H
#define SCAPIX_ANDROID_GRAPHICS_DRAWABLE_SHAPEDRAWABLE_H

namespace scapix::java_api {

namespace android::content::res { class ColorStateList; }
namespace android::content::res { class Resources; }
namespace android::content::res { class Resources_Theme; }
namespace android::graphics { class Canvas; }
namespace android::graphics { class ColorFilter; }
namespace android::graphics { class Outline; }
namespace android::graphics { class Paint; }
namespace android::graphics { class PorterDuff_Mode; }
namespace android::graphics { class Rect; }
namespace android::graphics::drawable { class Drawable_ConstantState; }
namespace android::graphics::drawable { class ShapeDrawable_ShaderFactory; }
namespace android::graphics::drawable::shapes { class Shape; }
namespace android::util { class AttributeSet; }
namespace org::xmlpull::v1 { class XmlPullParser; }

namespace android::graphics::drawable {

class ShapeDrawable : public object_base<SCAPIX_META_STRING("android/graphics/drawable/ShapeDrawable"),
	android::graphics::drawable::Drawable>
{
public:

	using ShaderFactory = ShapeDrawable_ShaderFactory;

	static ref<ShapeDrawable> new_object();
	static ref<ShapeDrawable> new_object(ref<android::graphics::drawable::shapes::Shape> s);
	ref<android::graphics::drawable::shapes::Shape> getShape();
	void setShape(ref<android::graphics::drawable::shapes::Shape> s);
	void setShaderFactory(ref<android::graphics::drawable::ShapeDrawable_ShaderFactory> fact);
	ref<android::graphics::drawable::ShapeDrawable_ShaderFactory> getShaderFactory();
	ref<android::graphics::Paint> getPaint();
	void setPadding(jint left, jint top, jint right, jint bottom);
	void setPadding(ref<android::graphics::Rect> padding);
	void setIntrinsicWidth(jint width);
	void setIntrinsicHeight(jint height);
	jint getIntrinsicWidth();
	jint getIntrinsicHeight();
	jboolean getPadding(ref<android::graphics::Rect> padding);
	void draw(ref<android::graphics::Canvas> canvas);
	jint getChangingConfigurations();
	void setAlpha(jint alpha);
	jint getAlpha();
	void setTintList(ref<android::content::res::ColorStateList> tint);
	void setTintMode(ref<android::graphics::PorterDuff_Mode> tintMode);
	void setColorFilter(ref<android::graphics::ColorFilter> colorFilter);
	jint getOpacity();
	void setDither(jboolean dither);
	jboolean isStateful();
	void inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme);
	void applyTheme(ref<android::content::res::Resources_Theme> t);
	void getOutline(ref<android::graphics::Outline> outline);
	ref<android::graphics::drawable::Drawable_ConstantState> getConstantState();
	ref<android::graphics::drawable::Drawable> mutate();

protected:

	ShapeDrawable(handle_type h) : base_(h) {}

};

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/ColorFilter.h>
#include <scapix/java_api/android/graphics/Outline.h>
#include <scapix/java_api/android/graphics/Paint.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/drawable/Drawable_ConstantState.h>
#include <scapix/java_api/android/graphics/drawable/ShapeDrawable_ShaderFactory.h>
#include <scapix/java_api/android/graphics/drawable/shapes/Shape.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>

namespace scapix::java_api {
namespace android::graphics::drawable {

inline ref<ShapeDrawable> ShapeDrawable::new_object() { return base_::new_object(); }
inline ref<ShapeDrawable> ShapeDrawable::new_object(ref<android::graphics::drawable::shapes::Shape> s) { return base_::new_object(s); }
inline ref<android::graphics::drawable::shapes::Shape> ShapeDrawable::getShape() { return call_method<SCAPIX_META_STRING("getShape"), ref<android::graphics::drawable::shapes::Shape>>(); }
inline void ShapeDrawable::setShape(ref<android::graphics::drawable::shapes::Shape> s) { return call_method<SCAPIX_META_STRING("setShape"), void>(s); }
inline void ShapeDrawable::setShaderFactory(ref<android::graphics::drawable::ShapeDrawable_ShaderFactory> fact) { return call_method<SCAPIX_META_STRING("setShaderFactory"), void>(fact); }
inline ref<android::graphics::drawable::ShapeDrawable_ShaderFactory> ShapeDrawable::getShaderFactory() { return call_method<SCAPIX_META_STRING("getShaderFactory"), ref<android::graphics::drawable::ShapeDrawable_ShaderFactory>>(); }
inline ref<android::graphics::Paint> ShapeDrawable::getPaint() { return call_method<SCAPIX_META_STRING("getPaint"), ref<android::graphics::Paint>>(); }
inline void ShapeDrawable::setPadding(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("setPadding"), void>(left, top, right, bottom); }
inline void ShapeDrawable::setPadding(ref<android::graphics::Rect> padding) { return call_method<SCAPIX_META_STRING("setPadding"), void>(padding); }
inline void ShapeDrawable::setIntrinsicWidth(jint width) { return call_method<SCAPIX_META_STRING("setIntrinsicWidth"), void>(width); }
inline void ShapeDrawable::setIntrinsicHeight(jint height) { return call_method<SCAPIX_META_STRING("setIntrinsicHeight"), void>(height); }
inline jint ShapeDrawable::getIntrinsicWidth() { return call_method<SCAPIX_META_STRING("getIntrinsicWidth"), jint>(); }
inline jint ShapeDrawable::getIntrinsicHeight() { return call_method<SCAPIX_META_STRING("getIntrinsicHeight"), jint>(); }
inline jboolean ShapeDrawable::getPadding(ref<android::graphics::Rect> padding) { return call_method<SCAPIX_META_STRING("getPadding"), jboolean>(padding); }
inline void ShapeDrawable::draw(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("draw"), void>(canvas); }
inline jint ShapeDrawable::getChangingConfigurations() { return call_method<SCAPIX_META_STRING("getChangingConfigurations"), jint>(); }
inline void ShapeDrawable::setAlpha(jint alpha) { return call_method<SCAPIX_META_STRING("setAlpha"), void>(alpha); }
inline jint ShapeDrawable::getAlpha() { return call_method<SCAPIX_META_STRING("getAlpha"), jint>(); }
inline void ShapeDrawable::setTintList(ref<android::content::res::ColorStateList> tint) { return call_method<SCAPIX_META_STRING("setTintList"), void>(tint); }
inline void ShapeDrawable::setTintMode(ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<SCAPIX_META_STRING("setTintMode"), void>(tintMode); }
inline void ShapeDrawable::setColorFilter(ref<android::graphics::ColorFilter> colorFilter) { return call_method<SCAPIX_META_STRING("setColorFilter"), void>(colorFilter); }
inline jint ShapeDrawable::getOpacity() { return call_method<SCAPIX_META_STRING("getOpacity"), jint>(); }
inline void ShapeDrawable::setDither(jboolean dither) { return call_method<SCAPIX_META_STRING("setDither"), void>(dither); }
inline jboolean ShapeDrawable::isStateful() { return call_method<SCAPIX_META_STRING("isStateful"), jboolean>(); }
inline void ShapeDrawable::inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme) { return call_method<SCAPIX_META_STRING("inflate"), void>(r, parser, attrs, theme); }
inline void ShapeDrawable::applyTheme(ref<android::content::res::Resources_Theme> t) { return call_method<SCAPIX_META_STRING("applyTheme"), void>(t); }
inline void ShapeDrawable::getOutline(ref<android::graphics::Outline> outline) { return call_method<SCAPIX_META_STRING("getOutline"), void>(outline); }
inline ref<android::graphics::drawable::Drawable_ConstantState> ShapeDrawable::getConstantState() { return call_method<SCAPIX_META_STRING("getConstantState"), ref<android::graphics::drawable::Drawable_ConstantState>>(); }
inline ref<android::graphics::drawable::Drawable> ShapeDrawable::mutate() { return call_method<SCAPIX_META_STRING("mutate"), ref<android::graphics::drawable::Drawable>>(); }

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_DRAWABLE_SHAPEDRAWABLE_H
