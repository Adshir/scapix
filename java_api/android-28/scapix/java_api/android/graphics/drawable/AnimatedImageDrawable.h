// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/graphics/drawable/Animatable2.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ANIMATEDIMAGEDRAWABLE_H
#define SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ANIMATEDIMAGEDRAWABLE_H

namespace scapix::java_api {

namespace android::content::res { class Resources; }
namespace android::content::res { class Resources_Theme; }
namespace android::graphics { class Canvas; }
namespace android::graphics { class ColorFilter; }
namespace android::graphics::drawable { class Animatable2_AnimationCallback; }
namespace android::util { class AttributeSet; }
namespace org::xmlpull::v1 { class XmlPullParser; }

namespace android::graphics::drawable {

class AnimatedImageDrawable : public object_base<SCAPIX_META_STRING("android/graphics/drawable/AnimatedImageDrawable"),
	android::graphics::drawable::Drawable,
	android::graphics::drawable::Animatable2>
{
public:

	static jint REPEAT_INFINITE_();

	static ref<AnimatedImageDrawable> new_object();
	void setRepeatCount(jint repeatCount);
	jint getRepeatCount();
	void inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme);
	jint getIntrinsicWidth();
	jint getIntrinsicHeight();
	void draw(ref<android::graphics::Canvas> canvas);
	void setAlpha(jint alpha);
	jint getAlpha();
	void setColorFilter(ref<android::graphics::ColorFilter> colorFilter);
	ref<android::graphics::ColorFilter> getColorFilter();
	jint getOpacity();
	void setAutoMirrored(jboolean mirrored);
	jboolean onLayoutDirectionChanged(jint layoutDirection);
	jboolean isAutoMirrored();
	jboolean isRunning();
	void start();
	void stop();
	void registerAnimationCallback(ref<android::graphics::drawable::Animatable2_AnimationCallback> callback);
	jboolean unregisterAnimationCallback(ref<android::graphics::drawable::Animatable2_AnimationCallback> callback);
	void clearAnimationCallbacks();

protected:

	AnimatedImageDrawable(handle_type h) : base_(h) {}

};

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/ColorFilter.h>
#include <scapix/java_api/android/graphics/drawable/Animatable2_AnimationCallback.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>

namespace scapix::java_api {
namespace android::graphics::drawable {

inline jint AnimatedImageDrawable::REPEAT_INFINITE_() { return get_static_field<SCAPIX_META_STRING("REPEAT_INFINITE"), jint>(); }
inline ref<AnimatedImageDrawable> AnimatedImageDrawable::new_object() { return base_::new_object(); }
inline void AnimatedImageDrawable::setRepeatCount(jint repeatCount) { return call_method<SCAPIX_META_STRING("setRepeatCount"), void>(repeatCount); }
inline jint AnimatedImageDrawable::getRepeatCount() { return call_method<SCAPIX_META_STRING("getRepeatCount"), jint>(); }
inline void AnimatedImageDrawable::inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme) { return call_method<SCAPIX_META_STRING("inflate"), void>(r, parser, attrs, theme); }
inline jint AnimatedImageDrawable::getIntrinsicWidth() { return call_method<SCAPIX_META_STRING("getIntrinsicWidth"), jint>(); }
inline jint AnimatedImageDrawable::getIntrinsicHeight() { return call_method<SCAPIX_META_STRING("getIntrinsicHeight"), jint>(); }
inline void AnimatedImageDrawable::draw(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("draw"), void>(canvas); }
inline void AnimatedImageDrawable::setAlpha(jint alpha) { return call_method<SCAPIX_META_STRING("setAlpha"), void>(alpha); }
inline jint AnimatedImageDrawable::getAlpha() { return call_method<SCAPIX_META_STRING("getAlpha"), jint>(); }
inline void AnimatedImageDrawable::setColorFilter(ref<android::graphics::ColorFilter> colorFilter) { return call_method<SCAPIX_META_STRING("setColorFilter"), void>(colorFilter); }
inline ref<android::graphics::ColorFilter> AnimatedImageDrawable::getColorFilter() { return call_method<SCAPIX_META_STRING("getColorFilter"), ref<android::graphics::ColorFilter>>(); }
inline jint AnimatedImageDrawable::getOpacity() { return call_method<SCAPIX_META_STRING("getOpacity"), jint>(); }
inline void AnimatedImageDrawable::setAutoMirrored(jboolean mirrored) { return call_method<SCAPIX_META_STRING("setAutoMirrored"), void>(mirrored); }
inline jboolean AnimatedImageDrawable::onLayoutDirectionChanged(jint layoutDirection) { return call_method<SCAPIX_META_STRING("onLayoutDirectionChanged"), jboolean>(layoutDirection); }
inline jboolean AnimatedImageDrawable::isAutoMirrored() { return call_method<SCAPIX_META_STRING("isAutoMirrored"), jboolean>(); }
inline jboolean AnimatedImageDrawable::isRunning() { return call_method<SCAPIX_META_STRING("isRunning"), jboolean>(); }
inline void AnimatedImageDrawable::start() { return call_method<SCAPIX_META_STRING("start"), void>(); }
inline void AnimatedImageDrawable::stop() { return call_method<SCAPIX_META_STRING("stop"), void>(); }
inline void AnimatedImageDrawable::registerAnimationCallback(ref<android::graphics::drawable::Animatable2_AnimationCallback> callback) { return call_method<SCAPIX_META_STRING("registerAnimationCallback"), void>(callback); }
inline jboolean AnimatedImageDrawable::unregisterAnimationCallback(ref<android::graphics::drawable::Animatable2_AnimationCallback> callback) { return call_method<SCAPIX_META_STRING("unregisterAnimationCallback"), jboolean>(callback); }
inline void AnimatedImageDrawable::clearAnimationCallbacks() { return call_method<SCAPIX_META_STRING("clearAnimationCallbacks"), void>(); }

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ANIMATEDIMAGEDRAWABLE_H
