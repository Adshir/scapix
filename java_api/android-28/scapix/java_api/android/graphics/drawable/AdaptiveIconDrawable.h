// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/graphics/drawable/Drawable_Callback.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ADAPTIVEICONDRAWABLE_H
#define SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ADAPTIVEICONDRAWABLE_H

namespace scapix::java_api {

namespace android::content::res { class ColorStateList; }
namespace android::content::res { class Resources; }
namespace android::content::res { class Resources_Theme; }
namespace android::graphics { class Canvas; }
namespace android::graphics { class ColorFilter; }
namespace android::graphics { class Outline; }
namespace android::graphics { class Path; }
namespace android::graphics { class PorterDuff_Mode; }
namespace android::graphics { class Rect; }
namespace android::graphics { class Region; }
namespace android::graphics::drawable { class Drawable_ConstantState; }
namespace android::util { class AttributeSet; }
namespace java::lang { class Runnable; }
namespace org::xmlpull::v1 { class XmlPullParser; }

namespace android::graphics::drawable {

class AdaptiveIconDrawable : public object_base<SCAPIX_META_STRING("android/graphics/drawable/AdaptiveIconDrawable"),
	android::graphics::drawable::Drawable,
	android::graphics::drawable::Drawable_Callback>
{
public:

	static ref<AdaptiveIconDrawable> new_object(ref<android::graphics::drawable::Drawable> backgroundDrawable, ref<android::graphics::drawable::Drawable> foregroundDrawable);
	void inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme);
	static jfloat getExtraInsetFraction();
	ref<android::graphics::Path> getIconMask();
	ref<android::graphics::drawable::Drawable> getForeground();
	ref<android::graphics::drawable::Drawable> getBackground();
	void draw(ref<android::graphics::Canvas> canvas);
	void invalidateSelf();
	void getOutline(ref<android::graphics::Outline> outline);
	ref<android::graphics::Region> getTransparentRegion();
	void applyTheme(ref<android::content::res::Resources_Theme> t);
	jboolean canApplyTheme();
	void invalidateDrawable(ref<android::graphics::drawable::Drawable> who);
	void scheduleDrawable(ref<android::graphics::drawable::Drawable> who, ref<java::lang::Runnable> what, jlong when);
	void unscheduleDrawable(ref<android::graphics::drawable::Drawable> who, ref<java::lang::Runnable> what);
	jint getChangingConfigurations();
	void setHotspot(jfloat x, jfloat y);
	void setHotspotBounds(jint left, jint top, jint right, jint bottom);
	void getHotspotBounds(ref<android::graphics::Rect> outRect);
	jboolean setVisible(jboolean visible, jboolean restart);
	void setDither(jboolean dither);
	void setAlpha(jint alpha);
	jint getAlpha();
	void setColorFilter(ref<android::graphics::ColorFilter> colorFilter);
	void setTintList(ref<android::content::res::ColorStateList> tint);
	void setTintMode(ref<android::graphics::PorterDuff_Mode> tintMode);
	void setOpacity(jint opacity);
	jint getOpacity();
	void setAutoMirrored(jboolean mirrored);
	jboolean isAutoMirrored();
	void jumpToCurrentState();
	jboolean isStateful();
	jint getIntrinsicWidth();
	jint getIntrinsicHeight();
	ref<android::graphics::drawable::Drawable_ConstantState> getConstantState();
	ref<android::graphics::drawable::Drawable> mutate();

protected:

	AdaptiveIconDrawable(handle_type h) : base_(h) {}

};

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/ColorFilter.h>
#include <scapix/java_api/android/graphics/Outline.h>
#include <scapix/java_api/android/graphics/Path.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/Region.h>
#include <scapix/java_api/android/graphics/drawable/Drawable_ConstantState.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>

namespace scapix::java_api {
namespace android::graphics::drawable {

inline ref<AdaptiveIconDrawable> AdaptiveIconDrawable::new_object(ref<android::graphics::drawable::Drawable> backgroundDrawable, ref<android::graphics::drawable::Drawable> foregroundDrawable) { return base_::new_object(backgroundDrawable, foregroundDrawable); }
inline void AdaptiveIconDrawable::inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme) { return call_method<SCAPIX_META_STRING("inflate"), void>(r, parser, attrs, theme); }
inline jfloat AdaptiveIconDrawable::getExtraInsetFraction() { return call_static_method<SCAPIX_META_STRING("getExtraInsetFraction"), jfloat>(); }
inline ref<android::graphics::Path> AdaptiveIconDrawable::getIconMask() { return call_method<SCAPIX_META_STRING("getIconMask"), ref<android::graphics::Path>>(); }
inline ref<android::graphics::drawable::Drawable> AdaptiveIconDrawable::getForeground() { return call_method<SCAPIX_META_STRING("getForeground"), ref<android::graphics::drawable::Drawable>>(); }
inline ref<android::graphics::drawable::Drawable> AdaptiveIconDrawable::getBackground() { return call_method<SCAPIX_META_STRING("getBackground"), ref<android::graphics::drawable::Drawable>>(); }
inline void AdaptiveIconDrawable::draw(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("draw"), void>(canvas); }
inline void AdaptiveIconDrawable::invalidateSelf() { return call_method<SCAPIX_META_STRING("invalidateSelf"), void>(); }
inline void AdaptiveIconDrawable::getOutline(ref<android::graphics::Outline> outline) { return call_method<SCAPIX_META_STRING("getOutline"), void>(outline); }
inline ref<android::graphics::Region> AdaptiveIconDrawable::getTransparentRegion() { return call_method<SCAPIX_META_STRING("getTransparentRegion"), ref<android::graphics::Region>>(); }
inline void AdaptiveIconDrawable::applyTheme(ref<android::content::res::Resources_Theme> t) { return call_method<SCAPIX_META_STRING("applyTheme"), void>(t); }
inline jboolean AdaptiveIconDrawable::canApplyTheme() { return call_method<SCAPIX_META_STRING("canApplyTheme"), jboolean>(); }
inline void AdaptiveIconDrawable::invalidateDrawable(ref<android::graphics::drawable::Drawable> who) { return call_method<SCAPIX_META_STRING("invalidateDrawable"), void>(who); }
inline void AdaptiveIconDrawable::scheduleDrawable(ref<android::graphics::drawable::Drawable> who, ref<java::lang::Runnable> what, jlong when) { return call_method<SCAPIX_META_STRING("scheduleDrawable"), void>(who, what, when); }
inline void AdaptiveIconDrawable::unscheduleDrawable(ref<android::graphics::drawable::Drawable> who, ref<java::lang::Runnable> what) { return call_method<SCAPIX_META_STRING("unscheduleDrawable"), void>(who, what); }
inline jint AdaptiveIconDrawable::getChangingConfigurations() { return call_method<SCAPIX_META_STRING("getChangingConfigurations"), jint>(); }
inline void AdaptiveIconDrawable::setHotspot(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("setHotspot"), void>(x, y); }
inline void AdaptiveIconDrawable::setHotspotBounds(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("setHotspotBounds"), void>(left, top, right, bottom); }
inline void AdaptiveIconDrawable::getHotspotBounds(ref<android::graphics::Rect> outRect) { return call_method<SCAPIX_META_STRING("getHotspotBounds"), void>(outRect); }
inline jboolean AdaptiveIconDrawable::setVisible(jboolean visible, jboolean restart) { return call_method<SCAPIX_META_STRING("setVisible"), jboolean>(visible, restart); }
inline void AdaptiveIconDrawable::setDither(jboolean dither) { return call_method<SCAPIX_META_STRING("setDither"), void>(dither); }
inline void AdaptiveIconDrawable::setAlpha(jint alpha) { return call_method<SCAPIX_META_STRING("setAlpha"), void>(alpha); }
inline jint AdaptiveIconDrawable::getAlpha() { return call_method<SCAPIX_META_STRING("getAlpha"), jint>(); }
inline void AdaptiveIconDrawable::setColorFilter(ref<android::graphics::ColorFilter> colorFilter) { return call_method<SCAPIX_META_STRING("setColorFilter"), void>(colorFilter); }
inline void AdaptiveIconDrawable::setTintList(ref<android::content::res::ColorStateList> tint) { return call_method<SCAPIX_META_STRING("setTintList"), void>(tint); }
inline void AdaptiveIconDrawable::setTintMode(ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<SCAPIX_META_STRING("setTintMode"), void>(tintMode); }
inline void AdaptiveIconDrawable::setOpacity(jint opacity) { return call_method<SCAPIX_META_STRING("setOpacity"), void>(opacity); }
inline jint AdaptiveIconDrawable::getOpacity() { return call_method<SCAPIX_META_STRING("getOpacity"), jint>(); }
inline void AdaptiveIconDrawable::setAutoMirrored(jboolean mirrored) { return call_method<SCAPIX_META_STRING("setAutoMirrored"), void>(mirrored); }
inline jboolean AdaptiveIconDrawable::isAutoMirrored() { return call_method<SCAPIX_META_STRING("isAutoMirrored"), jboolean>(); }
inline void AdaptiveIconDrawable::jumpToCurrentState() { return call_method<SCAPIX_META_STRING("jumpToCurrentState"), void>(); }
inline jboolean AdaptiveIconDrawable::isStateful() { return call_method<SCAPIX_META_STRING("isStateful"), jboolean>(); }
inline jint AdaptiveIconDrawable::getIntrinsicWidth() { return call_method<SCAPIX_META_STRING("getIntrinsicWidth"), jint>(); }
inline jint AdaptiveIconDrawable::getIntrinsicHeight() { return call_method<SCAPIX_META_STRING("getIntrinsicHeight"), jint>(); }
inline ref<android::graphics::drawable::Drawable_ConstantState> AdaptiveIconDrawable::getConstantState() { return call_method<SCAPIX_META_STRING("getConstantState"), ref<android::graphics::drawable::Drawable_ConstantState>>(); }
inline ref<android::graphics::drawable::Drawable> AdaptiveIconDrawable::mutate() { return call_method<SCAPIX_META_STRING("mutate"), ref<android::graphics::drawable::Drawable>>(); }

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_DRAWABLE_ADAPTIVEICONDRAWABLE_H
