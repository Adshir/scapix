// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/graphics/drawable/Drawable_Callback.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_DRAWABLE_LAYERDRAWABLE_H
#define SCAPIX_ANDROID_GRAPHICS_DRAWABLE_LAYERDRAWABLE_H

namespace scapix::java_api {

namespace android::content::res { class ColorStateList; }
namespace android::content::res { class Resources; }
namespace android::content::res { class Resources_Theme; }
namespace android::graphics { class Canvas; }
namespace android::graphics { class ColorFilter; }
namespace android::graphics { class Outline; }
namespace android::graphics { class PorterDuff_Mode; }
namespace android::graphics { class Rect; }
namespace android::graphics::drawable { class Drawable_ConstantState; }
namespace android::util { class AttributeSet; }
namespace java::lang { class Runnable; }
namespace org::xmlpull::v1 { class XmlPullParser; }

namespace android::graphics::drawable {

class LayerDrawable : public object_base<SCAPIX_META_STRING("android/graphics/drawable/LayerDrawable"),
	android::graphics::drawable::Drawable,
	android::graphics::drawable::Drawable_Callback>
{
public:

	static jint INSET_UNDEFINED_();
	static jint PADDING_MODE_NEST_();
	static jint PADDING_MODE_STACK_();

	static ref<LayerDrawable> new_object(ref<link::java::array<android::graphics::drawable::Drawable>> layers);
	void inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme);
	void applyTheme(ref<android::content::res::Resources_Theme> t);
	jboolean canApplyTheme();
	jint addLayer(ref<android::graphics::drawable::Drawable> dr);
	ref<android::graphics::drawable::Drawable> findDrawableByLayerId(jint id);
	void setId(jint index, jint id);
	jint getId(jint index);
	jint getNumberOfLayers();
	jboolean setDrawableByLayerId(jint id, ref<android::graphics::drawable::Drawable> drawable);
	jint findIndexByLayerId(jint id);
	void setDrawable(jint index, ref<android::graphics::drawable::Drawable> drawable);
	ref<android::graphics::drawable::Drawable> getDrawable(jint index);
	void setLayerSize(jint index, jint w, jint h);
	void setLayerWidth(jint index, jint w);
	jint getLayerWidth(jint index);
	void setLayerHeight(jint index, jint h);
	jint getLayerHeight(jint index);
	void setLayerGravity(jint index, jint gravity);
	jint getLayerGravity(jint index);
	void setLayerInset(jint index, jint l, jint t, jint r, jint b);
	void setLayerInsetRelative(jint index, jint s, jint t, jint e, jint b);
	void setLayerInsetLeft(jint index, jint l);
	jint getLayerInsetLeft(jint index);
	void setLayerInsetRight(jint index, jint r);
	jint getLayerInsetRight(jint index);
	void setLayerInsetTop(jint index, jint t);
	jint getLayerInsetTop(jint index);
	void setLayerInsetBottom(jint index, jint b);
	jint getLayerInsetBottom(jint index);
	void setLayerInsetStart(jint index, jint s);
	jint getLayerInsetStart(jint index);
	void setLayerInsetEnd(jint index, jint e);
	jint getLayerInsetEnd(jint index);
	void setPaddingMode(jint mode);
	jint getPaddingMode();
	void invalidateDrawable(ref<android::graphics::drawable::Drawable> who);
	void scheduleDrawable(ref<android::graphics::drawable::Drawable> who, ref<java::lang::Runnable> what, jlong when);
	void unscheduleDrawable(ref<android::graphics::drawable::Drawable> who, ref<java::lang::Runnable> what);
	void draw(ref<android::graphics::Canvas> canvas);
	jint getChangingConfigurations();
	jboolean getPadding(ref<android::graphics::Rect> padding);
	void setPadding(jint left, jint top, jint right, jint bottom);
	void setPaddingRelative(jint start, jint top, jint end, jint bottom);
	jint getLeftPadding();
	jint getRightPadding();
	jint getStartPadding();
	jint getEndPadding();
	jint getTopPadding();
	jint getBottomPadding();
	void getOutline(ref<android::graphics::Outline> outline);
	void setHotspot(jfloat x, jfloat y);
	void setHotspotBounds(jint left, jint top, jint right, jint bottom);
	void getHotspotBounds(ref<android::graphics::Rect> outRect);
	jboolean setVisible(jboolean visible, jboolean restart);
	void setDither(jboolean dither);
	void setAlpha(jint alpha);
	jint getAlpha();
	void setColorFilter(ref<android::graphics::ColorFilter> colorFilter);
	void setTintList(ref<android::content::res::ColorStateList> tint);
	void setTintMode(ref<android::graphics::PorterDuff_Mode> tintMode);
	void setOpacity(jint opacity);
	jint getOpacity();
	void setAutoMirrored(jboolean mirrored);
	jboolean isAutoMirrored();
	void jumpToCurrentState();
	jboolean isStateful();
	jint getIntrinsicWidth();
	jint getIntrinsicHeight();
	ref<android::graphics::drawable::Drawable_ConstantState> getConstantState();
	ref<android::graphics::drawable::Drawable> mutate();
	jboolean onLayoutDirectionChanged(jint layoutDirection);

protected:

	LayerDrawable(handle_type h) : base_(h) {}

};

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/ColorFilter.h>
#include <scapix/java_api/android/graphics/Outline.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/drawable/Drawable_ConstantState.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>

namespace scapix::java_api {
namespace android::graphics::drawable {

inline jint LayerDrawable::INSET_UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("INSET_UNDEFINED"), jint>(); }
inline jint LayerDrawable::PADDING_MODE_NEST_() { return get_static_field<SCAPIX_META_STRING("PADDING_MODE_NEST"), jint>(); }
inline jint LayerDrawable::PADDING_MODE_STACK_() { return get_static_field<SCAPIX_META_STRING("PADDING_MODE_STACK"), jint>(); }
inline ref<LayerDrawable> LayerDrawable::new_object(ref<link::java::array<android::graphics::drawable::Drawable>> layers) { return base_::new_object(layers); }
inline void LayerDrawable::inflate(ref<android::content::res::Resources> r, ref<org::xmlpull::v1::XmlPullParser> parser, ref<android::util::AttributeSet> attrs, ref<android::content::res::Resources_Theme> theme) { return call_method<SCAPIX_META_STRING("inflate"), void>(r, parser, attrs, theme); }
inline void LayerDrawable::applyTheme(ref<android::content::res::Resources_Theme> t) { return call_method<SCAPIX_META_STRING("applyTheme"), void>(t); }
inline jboolean LayerDrawable::canApplyTheme() { return call_method<SCAPIX_META_STRING("canApplyTheme"), jboolean>(); }
inline jint LayerDrawable::addLayer(ref<android::graphics::drawable::Drawable> dr) { return call_method<SCAPIX_META_STRING("addLayer"), jint>(dr); }
inline ref<android::graphics::drawable::Drawable> LayerDrawable::findDrawableByLayerId(jint id) { return call_method<SCAPIX_META_STRING("findDrawableByLayerId"), ref<android::graphics::drawable::Drawable>>(id); }
inline void LayerDrawable::setId(jint index, jint id) { return call_method<SCAPIX_META_STRING("setId"), void>(index, id); }
inline jint LayerDrawable::getId(jint index) { return call_method<SCAPIX_META_STRING("getId"), jint>(index); }
inline jint LayerDrawable::getNumberOfLayers() { return call_method<SCAPIX_META_STRING("getNumberOfLayers"), jint>(); }
inline jboolean LayerDrawable::setDrawableByLayerId(jint id, ref<android::graphics::drawable::Drawable> drawable) { return call_method<SCAPIX_META_STRING("setDrawableByLayerId"), jboolean>(id, drawable); }
inline jint LayerDrawable::findIndexByLayerId(jint id) { return call_method<SCAPIX_META_STRING("findIndexByLayerId"), jint>(id); }
inline void LayerDrawable::setDrawable(jint index, ref<android::graphics::drawable::Drawable> drawable) { return call_method<SCAPIX_META_STRING("setDrawable"), void>(index, drawable); }
inline ref<android::graphics::drawable::Drawable> LayerDrawable::getDrawable(jint index) { return call_method<SCAPIX_META_STRING("getDrawable"), ref<android::graphics::drawable::Drawable>>(index); }
inline void LayerDrawable::setLayerSize(jint index, jint w, jint h) { return call_method<SCAPIX_META_STRING("setLayerSize"), void>(index, w, h); }
inline void LayerDrawable::setLayerWidth(jint index, jint w) { return call_method<SCAPIX_META_STRING("setLayerWidth"), void>(index, w); }
inline jint LayerDrawable::getLayerWidth(jint index) { return call_method<SCAPIX_META_STRING("getLayerWidth"), jint>(index); }
inline void LayerDrawable::setLayerHeight(jint index, jint h) { return call_method<SCAPIX_META_STRING("setLayerHeight"), void>(index, h); }
inline jint LayerDrawable::getLayerHeight(jint index) { return call_method<SCAPIX_META_STRING("getLayerHeight"), jint>(index); }
inline void LayerDrawable::setLayerGravity(jint index, jint gravity) { return call_method<SCAPIX_META_STRING("setLayerGravity"), void>(index, gravity); }
inline jint LayerDrawable::getLayerGravity(jint index) { return call_method<SCAPIX_META_STRING("getLayerGravity"), jint>(index); }
inline void LayerDrawable::setLayerInset(jint index, jint l, jint t, jint r, jint b) { return call_method<SCAPIX_META_STRING("setLayerInset"), void>(index, l, t, r, b); }
inline void LayerDrawable::setLayerInsetRelative(jint index, jint s, jint t, jint e, jint b) { return call_method<SCAPIX_META_STRING("setLayerInsetRelative"), void>(index, s, t, e, b); }
inline void LayerDrawable::setLayerInsetLeft(jint index, jint l) { return call_method<SCAPIX_META_STRING("setLayerInsetLeft"), void>(index, l); }
inline jint LayerDrawable::getLayerInsetLeft(jint index) { return call_method<SCAPIX_META_STRING("getLayerInsetLeft"), jint>(index); }
inline void LayerDrawable::setLayerInsetRight(jint index, jint r) { return call_method<SCAPIX_META_STRING("setLayerInsetRight"), void>(index, r); }
inline jint LayerDrawable::getLayerInsetRight(jint index) { return call_method<SCAPIX_META_STRING("getLayerInsetRight"), jint>(index); }
inline void LayerDrawable::setLayerInsetTop(jint index, jint t) { return call_method<SCAPIX_META_STRING("setLayerInsetTop"), void>(index, t); }
inline jint LayerDrawable::getLayerInsetTop(jint index) { return call_method<SCAPIX_META_STRING("getLayerInsetTop"), jint>(index); }
inline void LayerDrawable::setLayerInsetBottom(jint index, jint b) { return call_method<SCAPIX_META_STRING("setLayerInsetBottom"), void>(index, b); }
inline jint LayerDrawable::getLayerInsetBottom(jint index) { return call_method<SCAPIX_META_STRING("getLayerInsetBottom"), jint>(index); }
inline void LayerDrawable::setLayerInsetStart(jint index, jint s) { return call_method<SCAPIX_META_STRING("setLayerInsetStart"), void>(index, s); }
inline jint LayerDrawable::getLayerInsetStart(jint index) { return call_method<SCAPIX_META_STRING("getLayerInsetStart"), jint>(index); }
inline void LayerDrawable::setLayerInsetEnd(jint index, jint e) { return call_method<SCAPIX_META_STRING("setLayerInsetEnd"), void>(index, e); }
inline jint LayerDrawable::getLayerInsetEnd(jint index) { return call_method<SCAPIX_META_STRING("getLayerInsetEnd"), jint>(index); }
inline void LayerDrawable::setPaddingMode(jint mode) { return call_method<SCAPIX_META_STRING("setPaddingMode"), void>(mode); }
inline jint LayerDrawable::getPaddingMode() { return call_method<SCAPIX_META_STRING("getPaddingMode"), jint>(); }
inline void LayerDrawable::invalidateDrawable(ref<android::graphics::drawable::Drawable> who) { return call_method<SCAPIX_META_STRING("invalidateDrawable"), void>(who); }
inline void LayerDrawable::scheduleDrawable(ref<android::graphics::drawable::Drawable> who, ref<java::lang::Runnable> what, jlong when) { return call_method<SCAPIX_META_STRING("scheduleDrawable"), void>(who, what, when); }
inline void LayerDrawable::unscheduleDrawable(ref<android::graphics::drawable::Drawable> who, ref<java::lang::Runnable> what) { return call_method<SCAPIX_META_STRING("unscheduleDrawable"), void>(who, what); }
inline void LayerDrawable::draw(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("draw"), void>(canvas); }
inline jint LayerDrawable::getChangingConfigurations() { return call_method<SCAPIX_META_STRING("getChangingConfigurations"), jint>(); }
inline jboolean LayerDrawable::getPadding(ref<android::graphics::Rect> padding) { return call_method<SCAPIX_META_STRING("getPadding"), jboolean>(padding); }
inline void LayerDrawable::setPadding(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("setPadding"), void>(left, top, right, bottom); }
inline void LayerDrawable::setPaddingRelative(jint start, jint top, jint end, jint bottom) { return call_method<SCAPIX_META_STRING("setPaddingRelative"), void>(start, top, end, bottom); }
inline jint LayerDrawable::getLeftPadding() { return call_method<SCAPIX_META_STRING("getLeftPadding"), jint>(); }
inline jint LayerDrawable::getRightPadding() { return call_method<SCAPIX_META_STRING("getRightPadding"), jint>(); }
inline jint LayerDrawable::getStartPadding() { return call_method<SCAPIX_META_STRING("getStartPadding"), jint>(); }
inline jint LayerDrawable::getEndPadding() { return call_method<SCAPIX_META_STRING("getEndPadding"), jint>(); }
inline jint LayerDrawable::getTopPadding() { return call_method<SCAPIX_META_STRING("getTopPadding"), jint>(); }
inline jint LayerDrawable::getBottomPadding() { return call_method<SCAPIX_META_STRING("getBottomPadding"), jint>(); }
inline void LayerDrawable::getOutline(ref<android::graphics::Outline> outline) { return call_method<SCAPIX_META_STRING("getOutline"), void>(outline); }
inline void LayerDrawable::setHotspot(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("setHotspot"), void>(x, y); }
inline void LayerDrawable::setHotspotBounds(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("setHotspotBounds"), void>(left, top, right, bottom); }
inline void LayerDrawable::getHotspotBounds(ref<android::graphics::Rect> outRect) { return call_method<SCAPIX_META_STRING("getHotspotBounds"), void>(outRect); }
inline jboolean LayerDrawable::setVisible(jboolean visible, jboolean restart) { return call_method<SCAPIX_META_STRING("setVisible"), jboolean>(visible, restart); }
inline void LayerDrawable::setDither(jboolean dither) { return call_method<SCAPIX_META_STRING("setDither"), void>(dither); }
inline void LayerDrawable::setAlpha(jint alpha) { return call_method<SCAPIX_META_STRING("setAlpha"), void>(alpha); }
inline jint LayerDrawable::getAlpha() { return call_method<SCAPIX_META_STRING("getAlpha"), jint>(); }
inline void LayerDrawable::setColorFilter(ref<android::graphics::ColorFilter> colorFilter) { return call_method<SCAPIX_META_STRING("setColorFilter"), void>(colorFilter); }
inline void LayerDrawable::setTintList(ref<android::content::res::ColorStateList> tint) { return call_method<SCAPIX_META_STRING("setTintList"), void>(tint); }
inline void LayerDrawable::setTintMode(ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<SCAPIX_META_STRING("setTintMode"), void>(tintMode); }
inline void LayerDrawable::setOpacity(jint opacity) { return call_method<SCAPIX_META_STRING("setOpacity"), void>(opacity); }
inline jint LayerDrawable::getOpacity() { return call_method<SCAPIX_META_STRING("getOpacity"), jint>(); }
inline void LayerDrawable::setAutoMirrored(jboolean mirrored) { return call_method<SCAPIX_META_STRING("setAutoMirrored"), void>(mirrored); }
inline jboolean LayerDrawable::isAutoMirrored() { return call_method<SCAPIX_META_STRING("isAutoMirrored"), jboolean>(); }
inline void LayerDrawable::jumpToCurrentState() { return call_method<SCAPIX_META_STRING("jumpToCurrentState"), void>(); }
inline jboolean LayerDrawable::isStateful() { return call_method<SCAPIX_META_STRING("isStateful"), jboolean>(); }
inline jint LayerDrawable::getIntrinsicWidth() { return call_method<SCAPIX_META_STRING("getIntrinsicWidth"), jint>(); }
inline jint LayerDrawable::getIntrinsicHeight() { return call_method<SCAPIX_META_STRING("getIntrinsicHeight"), jint>(); }
inline ref<android::graphics::drawable::Drawable_ConstantState> LayerDrawable::getConstantState() { return call_method<SCAPIX_META_STRING("getConstantState"), ref<android::graphics::drawable::Drawable_ConstantState>>(); }
inline ref<android::graphics::drawable::Drawable> LayerDrawable::mutate() { return call_method<SCAPIX_META_STRING("mutate"), ref<android::graphics::drawable::Drawable>>(); }
inline jboolean LayerDrawable::onLayoutDirectionChanged(jint layoutDirection) { return call_method<SCAPIX_META_STRING("onLayoutDirectionChanged"), jboolean>(layoutDirection); }

} // namespace android::graphics::drawable
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_DRAWABLE_LAYERDRAWABLE_H
