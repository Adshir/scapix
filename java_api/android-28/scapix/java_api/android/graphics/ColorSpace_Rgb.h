// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/graphics/ColorSpace.h>

#ifndef SCAPIX_ANDROID_GRAPHICS_COLORSPACE_RGB_H
#define SCAPIX_ANDROID_GRAPHICS_COLORSPACE_RGB_H

namespace scapix::java_api {

namespace android::graphics { class ColorSpace_Rgb_TransferParameters; }
namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::util::function { class DoubleUnaryOperator; }

namespace android::graphics {

class ColorSpace_Rgb : public object_base<SCAPIX_META_STRING("android/graphics/ColorSpace$Rgb"),
	android::graphics::ColorSpace>
{
public:

	using TransferParameters = ColorSpace_Rgb_TransferParameters;

	static ref<ColorSpace_Rgb> new_object(ref<java::lang::String> name, ref<link::java::array<jfloat>> toXYZ, ref<java::util::function::DoubleUnaryOperator> oetf, ref<java::util::function::DoubleUnaryOperator> eotf);
	static ref<ColorSpace_Rgb> new_object(ref<java::lang::String> name, ref<link::java::array<jfloat>> primaries, ref<link::java::array<jfloat>> whitePoint, ref<java::util::function::DoubleUnaryOperator> oetf, ref<java::util::function::DoubleUnaryOperator> eotf, jfloat min, jfloat max);
	static ref<ColorSpace_Rgb> new_object(ref<java::lang::String> name, ref<link::java::array<jfloat>> toXYZ, ref<android::graphics::ColorSpace_Rgb_TransferParameters> function);
	static ref<ColorSpace_Rgb> new_object(ref<java::lang::String> name, ref<link::java::array<jfloat>> primaries, ref<link::java::array<jfloat>> whitePoint, ref<android::graphics::ColorSpace_Rgb_TransferParameters> function);
	static ref<ColorSpace_Rgb> new_object(ref<java::lang::String> name, ref<link::java::array<jfloat>> toXYZ, jdouble gamma);
	static ref<ColorSpace_Rgb> new_object(ref<java::lang::String> name, ref<link::java::array<jfloat>> primaries, ref<link::java::array<jfloat>> whitePoint, jdouble gamma);
	ref<link::java::array<jfloat>> getWhitePoint(ref<link::java::array<jfloat>> whitePoint);
	ref<link::java::array<jfloat>> getWhitePoint();
	ref<link::java::array<jfloat>> getPrimaries(ref<link::java::array<jfloat>> primaries);
	ref<link::java::array<jfloat>> getPrimaries();
	ref<link::java::array<jfloat>> getTransform(ref<link::java::array<jfloat>> transform);
	ref<link::java::array<jfloat>> getTransform();
	ref<link::java::array<jfloat>> getInverseTransform(ref<link::java::array<jfloat>> inverseTransform);
	ref<link::java::array<jfloat>> getInverseTransform();
	ref<java::util::function::DoubleUnaryOperator> getOetf();
	ref<java::util::function::DoubleUnaryOperator> getEotf();
	ref<android::graphics::ColorSpace_Rgb_TransferParameters> getTransferParameters();
	jboolean isSrgb();
	jboolean isWideGamut();
	jfloat getMinValue(jint component);
	jfloat getMaxValue(jint component);
	ref<link::java::array<jfloat>> toLinear(jfloat r, jfloat g, jfloat b);
	ref<link::java::array<jfloat>> toLinear(ref<link::java::array<jfloat>> v);
	ref<link::java::array<jfloat>> fromLinear(jfloat r, jfloat g, jfloat b);
	ref<link::java::array<jfloat>> fromLinear(ref<link::java::array<jfloat>> v);
	ref<link::java::array<jfloat>> toXyz(ref<link::java::array<jfloat>> v);
	ref<link::java::array<jfloat>> fromXyz(ref<link::java::array<jfloat>> v);
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();

protected:

	ColorSpace_Rgb(handle_type h) : base_(h) {}

};

} // namespace android::graphics
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/ColorSpace_Rgb_TransferParameters.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/DoubleUnaryOperator.h>

namespace scapix::java_api {
namespace android::graphics {

inline ref<ColorSpace_Rgb> ColorSpace_Rgb::new_object(ref<java::lang::String> name, ref<link::java::array<jfloat>> toXYZ, ref<java::util::function::DoubleUnaryOperator> oetf, ref<java::util::function::DoubleUnaryOperator> eotf) { return base_::new_object(name, toXYZ, oetf, eotf); }
inline ref<ColorSpace_Rgb> ColorSpace_Rgb::new_object(ref<java::lang::String> name, ref<link::java::array<jfloat>> primaries, ref<link::java::array<jfloat>> whitePoint, ref<java::util::function::DoubleUnaryOperator> oetf, ref<java::util::function::DoubleUnaryOperator> eotf, jfloat min, jfloat max) { return base_::new_object(name, primaries, whitePoint, oetf, eotf, min, max); }
inline ref<ColorSpace_Rgb> ColorSpace_Rgb::new_object(ref<java::lang::String> name, ref<link::java::array<jfloat>> toXYZ, ref<android::graphics::ColorSpace_Rgb_TransferParameters> function) { return base_::new_object(name, toXYZ, function); }
inline ref<ColorSpace_Rgb> ColorSpace_Rgb::new_object(ref<java::lang::String> name, ref<link::java::array<jfloat>> primaries, ref<link::java::array<jfloat>> whitePoint, ref<android::graphics::ColorSpace_Rgb_TransferParameters> function) { return base_::new_object(name, primaries, whitePoint, function); }
inline ref<ColorSpace_Rgb> ColorSpace_Rgb::new_object(ref<java::lang::String> name, ref<link::java::array<jfloat>> toXYZ, jdouble gamma) { return base_::new_object(name, toXYZ, gamma); }
inline ref<ColorSpace_Rgb> ColorSpace_Rgb::new_object(ref<java::lang::String> name, ref<link::java::array<jfloat>> primaries, ref<link::java::array<jfloat>> whitePoint, jdouble gamma) { return base_::new_object(name, primaries, whitePoint, gamma); }
inline ref<link::java::array<jfloat>> ColorSpace_Rgb::getWhitePoint(ref<link::java::array<jfloat>> whitePoint) { return call_method<SCAPIX_META_STRING("getWhitePoint"), ref<link::java::array<jfloat>>>(whitePoint); }
inline ref<link::java::array<jfloat>> ColorSpace_Rgb::getWhitePoint() { return call_method<SCAPIX_META_STRING("getWhitePoint"), ref<link::java::array<jfloat>>>(); }
inline ref<link::java::array<jfloat>> ColorSpace_Rgb::getPrimaries(ref<link::java::array<jfloat>> primaries) { return call_method<SCAPIX_META_STRING("getPrimaries"), ref<link::java::array<jfloat>>>(primaries); }
inline ref<link::java::array<jfloat>> ColorSpace_Rgb::getPrimaries() { return call_method<SCAPIX_META_STRING("getPrimaries"), ref<link::java::array<jfloat>>>(); }
inline ref<link::java::array<jfloat>> ColorSpace_Rgb::getTransform(ref<link::java::array<jfloat>> transform) { return call_method<SCAPIX_META_STRING("getTransform"), ref<link::java::array<jfloat>>>(transform); }
inline ref<link::java::array<jfloat>> ColorSpace_Rgb::getTransform() { return call_method<SCAPIX_META_STRING("getTransform"), ref<link::java::array<jfloat>>>(); }
inline ref<link::java::array<jfloat>> ColorSpace_Rgb::getInverseTransform(ref<link::java::array<jfloat>> inverseTransform) { return call_method<SCAPIX_META_STRING("getInverseTransform"), ref<link::java::array<jfloat>>>(inverseTransform); }
inline ref<link::java::array<jfloat>> ColorSpace_Rgb::getInverseTransform() { return call_method<SCAPIX_META_STRING("getInverseTransform"), ref<link::java::array<jfloat>>>(); }
inline ref<java::util::function::DoubleUnaryOperator> ColorSpace_Rgb::getOetf() { return call_method<SCAPIX_META_STRING("getOetf"), ref<java::util::function::DoubleUnaryOperator>>(); }
inline ref<java::util::function::DoubleUnaryOperator> ColorSpace_Rgb::getEotf() { return call_method<SCAPIX_META_STRING("getEotf"), ref<java::util::function::DoubleUnaryOperator>>(); }
inline ref<android::graphics::ColorSpace_Rgb_TransferParameters> ColorSpace_Rgb::getTransferParameters() { return call_method<SCAPIX_META_STRING("getTransferParameters"), ref<android::graphics::ColorSpace_Rgb_TransferParameters>>(); }
inline jboolean ColorSpace_Rgb::isSrgb() { return call_method<SCAPIX_META_STRING("isSrgb"), jboolean>(); }
inline jboolean ColorSpace_Rgb::isWideGamut() { return call_method<SCAPIX_META_STRING("isWideGamut"), jboolean>(); }
inline jfloat ColorSpace_Rgb::getMinValue(jint component) { return call_method<SCAPIX_META_STRING("getMinValue"), jfloat>(component); }
inline jfloat ColorSpace_Rgb::getMaxValue(jint component) { return call_method<SCAPIX_META_STRING("getMaxValue"), jfloat>(component); }
inline ref<link::java::array<jfloat>> ColorSpace_Rgb::toLinear(jfloat r, jfloat g, jfloat b) { return call_method<SCAPIX_META_STRING("toLinear"), ref<link::java::array<jfloat>>>(r, g, b); }
inline ref<link::java::array<jfloat>> ColorSpace_Rgb::toLinear(ref<link::java::array<jfloat>> v) { return call_method<SCAPIX_META_STRING("toLinear"), ref<link::java::array<jfloat>>>(v); }
inline ref<link::java::array<jfloat>> ColorSpace_Rgb::fromLinear(jfloat r, jfloat g, jfloat b) { return call_method<SCAPIX_META_STRING("fromLinear"), ref<link::java::array<jfloat>>>(r, g, b); }
inline ref<link::java::array<jfloat>> ColorSpace_Rgb::fromLinear(ref<link::java::array<jfloat>> v) { return call_method<SCAPIX_META_STRING("fromLinear"), ref<link::java::array<jfloat>>>(v); }
inline ref<link::java::array<jfloat>> ColorSpace_Rgb::toXyz(ref<link::java::array<jfloat>> v) { return call_method<SCAPIX_META_STRING("toXyz"), ref<link::java::array<jfloat>>>(v); }
inline ref<link::java::array<jfloat>> ColorSpace_Rgb::fromXyz(ref<link::java::array<jfloat>> v) { return call_method<SCAPIX_META_STRING("fromXyz"), ref<link::java::array<jfloat>>>(v); }
inline jboolean ColorSpace_Rgb::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint ColorSpace_Rgb::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }

} // namespace android::graphics
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GRAPHICS_COLORSPACE_RGB_H
