// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/renderscript/BaseObj.h>

#ifndef SCAPIX_ANDROID_RENDERSCRIPT_TYPE_H
#define SCAPIX_ANDROID_RENDERSCRIPT_TYPE_H

namespace scapix::java_api {

namespace android::renderscript { class Element; }
namespace android::renderscript { class RenderScript; }
namespace android::renderscript { class Type_CubemapFace; }
namespace android::renderscript { class Type_Builder; }

namespace android::renderscript {

class Type : public object_base<SCAPIX_META_STRING("android/renderscript/Type"),
	android::renderscript::BaseObj>
{
public:

	using CubemapFace = Type_CubemapFace;
	using Builder = Type_Builder;

	ref<android::renderscript::Element> getElement();
	jint getX();
	jint getY();
	jint getZ();
	jint getYuv();
	jboolean hasMipmaps();
	jboolean hasFaces();
	jint getCount();
	static ref<android::renderscript::Type> createX(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Element> e, jint dimX);
	static ref<android::renderscript::Type> createXY(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Element> e, jint dimX, jint dimY);
	static ref<android::renderscript::Type> createXYZ(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Element> e, jint dimX, jint dimY, jint dimZ);

protected:

	Type(handle_type h) : base_(h) {}

};

} // namespace android::renderscript
} // namespace scapix::java_api

#include <scapix/java_api/android/renderscript/Element.h>
#include <scapix/java_api/android/renderscript/RenderScript.h>

namespace scapix::java_api {
namespace android::renderscript {

inline ref<android::renderscript::Element> Type::getElement() { return call_method<SCAPIX_META_STRING("getElement"), ref<android::renderscript::Element>>(); }
inline jint Type::getX() { return call_method<SCAPIX_META_STRING("getX"), jint>(); }
inline jint Type::getY() { return call_method<SCAPIX_META_STRING("getY"), jint>(); }
inline jint Type::getZ() { return call_method<SCAPIX_META_STRING("getZ"), jint>(); }
inline jint Type::getYuv() { return call_method<SCAPIX_META_STRING("getYuv"), jint>(); }
inline jboolean Type::hasMipmaps() { return call_method<SCAPIX_META_STRING("hasMipmaps"), jboolean>(); }
inline jboolean Type::hasFaces() { return call_method<SCAPIX_META_STRING("hasFaces"), jboolean>(); }
inline jint Type::getCount() { return call_method<SCAPIX_META_STRING("getCount"), jint>(); }
inline ref<android::renderscript::Type> Type::createX(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Element> e, jint dimX) { return call_static_method<SCAPIX_META_STRING("createX"), ref<android::renderscript::Type>>(rs, e, dimX); }
inline ref<android::renderscript::Type> Type::createXY(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Element> e, jint dimX, jint dimY) { return call_static_method<SCAPIX_META_STRING("createXY"), ref<android::renderscript::Type>>(rs, e, dimX, dimY); }
inline ref<android::renderscript::Type> Type::createXYZ(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Element> e, jint dimX, jint dimY, jint dimZ) { return call_static_method<SCAPIX_META_STRING("createXYZ"), ref<android::renderscript::Type>>(rs, e, dimX, dimY, dimZ); }

} // namespace android::renderscript
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_RENDERSCRIPT_TYPE_H
