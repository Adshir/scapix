// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/renderscript/Allocation.h>

#ifndef SCAPIX_ANDROID_RENDERSCRIPT_ALLOCATIONADAPTER_H
#define SCAPIX_ANDROID_RENDERSCRIPT_ALLOCATIONADAPTER_H

namespace scapix::java_api {

namespace android::renderscript { class RenderScript; }
namespace android::renderscript { class Type; }
namespace android::renderscript { class Type_CubemapFace; }

namespace android::renderscript {

class AllocationAdapter : public object_base<SCAPIX_META_STRING("android/renderscript/AllocationAdapter"),
	android::renderscript::Allocation>
{
public:

	void setLOD(jint lod);
	void setFace(ref<android::renderscript::Type_CubemapFace> cf);
	void setX(jint x);
	void setY(jint y);
	void setZ(jint z);
	static ref<android::renderscript::AllocationAdapter> create1D(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Allocation> a);
	static ref<android::renderscript::AllocationAdapter> create2D(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Allocation> a);
	static ref<android::renderscript::AllocationAdapter> createTyped(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Allocation> a, ref<android::renderscript::Type> t);
	void resize(jint dimX);

protected:

	AllocationAdapter(handle_type h) : base_(h) {}

};

} // namespace android::renderscript
} // namespace scapix::java_api

#include <scapix/java_api/android/renderscript/RenderScript.h>
#include <scapix/java_api/android/renderscript/Type.h>
#include <scapix/java_api/android/renderscript/Type_CubemapFace.h>

namespace scapix::java_api {
namespace android::renderscript {

inline void AllocationAdapter::setLOD(jint lod) { return call_method<SCAPIX_META_STRING("setLOD"), void>(lod); }
inline void AllocationAdapter::setFace(ref<android::renderscript::Type_CubemapFace> cf) { return call_method<SCAPIX_META_STRING("setFace"), void>(cf); }
inline void AllocationAdapter::setX(jint x) { return call_method<SCAPIX_META_STRING("setX"), void>(x); }
inline void AllocationAdapter::setY(jint y) { return call_method<SCAPIX_META_STRING("setY"), void>(y); }
inline void AllocationAdapter::setZ(jint z) { return call_method<SCAPIX_META_STRING("setZ"), void>(z); }
inline ref<android::renderscript::AllocationAdapter> AllocationAdapter::create1D(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Allocation> a) { return call_static_method<SCAPIX_META_STRING("create1D"), ref<android::renderscript::AllocationAdapter>>(rs, a); }
inline ref<android::renderscript::AllocationAdapter> AllocationAdapter::create2D(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Allocation> a) { return call_static_method<SCAPIX_META_STRING("create2D"), ref<android::renderscript::AllocationAdapter>>(rs, a); }
inline ref<android::renderscript::AllocationAdapter> AllocationAdapter::createTyped(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Allocation> a, ref<android::renderscript::Type> t) { return call_static_method<SCAPIX_META_STRING("createTyped"), ref<android::renderscript::AllocationAdapter>>(rs, a, t); }
inline void AllocationAdapter::resize(jint dimX) { return call_method<SCAPIX_META_STRING("resize"), void>(dimX); }

} // namespace android::renderscript
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_RENDERSCRIPT_ALLOCATIONADAPTER_H
