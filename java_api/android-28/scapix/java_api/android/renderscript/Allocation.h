// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/renderscript/BaseObj.h>

#ifndef SCAPIX_ANDROID_RENDERSCRIPT_ALLOCATION_H
#define SCAPIX_ANDROID_RENDERSCRIPT_ALLOCATION_H

namespace scapix::java_api {

namespace android::content::res { class Resources; }
namespace android::graphics { class Bitmap; }
namespace android::renderscript { class Allocation_MipmapControl; }
namespace android::renderscript { class Allocation_OnBufferAvailableListener; }
namespace android::renderscript { class Element; }
namespace android::renderscript { class FieldPacker; }
namespace android::renderscript { class RenderScript; }
namespace android::renderscript { class Type; }
namespace android::view { class Surface; }
namespace java::lang { class Object; }
namespace java::lang { class String; }
namespace java::nio { class ByteBuffer; }

namespace android::renderscript {

class Allocation : public object_base<SCAPIX_META_STRING("android/renderscript/Allocation"),
	android::renderscript::BaseObj>
{
public:

	using OnBufferAvailableListener = Allocation_OnBufferAvailableListener;
	using MipmapControl = Allocation_MipmapControl;

	static jint USAGE_GRAPHICS_CONSTANTS_();
	static jint USAGE_GRAPHICS_RENDER_TARGET_();
	static jint USAGE_GRAPHICS_TEXTURE_();
	static jint USAGE_GRAPHICS_VERTEX_();
	static jint USAGE_IO_INPUT_();
	static jint USAGE_IO_OUTPUT_();
	static jint USAGE_SCRIPT_();
	static jint USAGE_SHARED_();

	ref<android::renderscript::Element> getElement();
	jint getUsage();
	void setAutoPadding(jboolean useAutoPadding);
	jint getBytesSize();
	ref<android::renderscript::Type> getType();
	void syncAll(jint srcLocation);
	void ioSend();
	void ioReceive();
	void copyFrom(ref<link::java::array<android::renderscript::BaseObj>> d);
	void copyFromUnchecked(ref<java::lang::Object> array);
	void copyFromUnchecked(ref<link::java::array<jint>> d);
	void copyFromUnchecked(ref<link::java::array<jshort>> d);
	void copyFromUnchecked(ref<link::java::array<jbyte>> d);
	void copyFromUnchecked(ref<link::java::array<jfloat>> d);
	void copyFrom(ref<java::lang::Object> array);
	void copyFrom(ref<link::java::array<jint>> d);
	void copyFrom(ref<link::java::array<jshort>> d);
	void copyFrom(ref<link::java::array<jbyte>> d);
	void copyFrom(ref<link::java::array<jfloat>> d);
	void copyFrom(ref<android::graphics::Bitmap> b);
	void copyFrom(ref<android::renderscript::Allocation> a);
	void setFromFieldPacker(jint xoff, ref<android::renderscript::FieldPacker> fp);
	void setFromFieldPacker(jint xoff, jint component_number, ref<android::renderscript::FieldPacker> fp);
	void setFromFieldPacker(jint xoff, jint yoff, jint zoff, jint component_number, ref<android::renderscript::FieldPacker> fp);
	void generateMipmaps();
	void copy1DRangeFromUnchecked(jint off, jint count, ref<java::lang::Object> array);
	void copy1DRangeFromUnchecked(jint off, jint count, ref<link::java::array<jint>> d);
	void copy1DRangeFromUnchecked(jint off, jint count, ref<link::java::array<jshort>> d);
	void copy1DRangeFromUnchecked(jint off, jint count, ref<link::java::array<jbyte>> d);
	void copy1DRangeFromUnchecked(jint off, jint count, ref<link::java::array<jfloat>> d);
	void copy1DRangeFrom(jint off, jint count, ref<java::lang::Object> array);
	void copy1DRangeFrom(jint off, jint count, ref<link::java::array<jint>> d);
	void copy1DRangeFrom(jint off, jint count, ref<link::java::array<jshort>> d);
	void copy1DRangeFrom(jint off, jint count, ref<link::java::array<jbyte>> d);
	void copy1DRangeFrom(jint off, jint count, ref<link::java::array<jfloat>> d);
	void copy1DRangeFrom(jint off, jint count, ref<android::renderscript::Allocation> data, jint dataOff);
	void copy2DRangeFrom(jint xoff, jint yoff, jint w, jint h, ref<java::lang::Object> array);
	void copy2DRangeFrom(jint xoff, jint yoff, jint w, jint h, ref<link::java::array<jbyte>> data);
	void copy2DRangeFrom(jint xoff, jint yoff, jint w, jint h, ref<link::java::array<jshort>> data);
	void copy2DRangeFrom(jint xoff, jint yoff, jint w, jint h, ref<link::java::array<jint>> data);
	void copy2DRangeFrom(jint xoff, jint yoff, jint w, jint h, ref<link::java::array<jfloat>> data);
	void copy2DRangeFrom(jint xoff, jint yoff, jint w, jint h, ref<android::renderscript::Allocation> data, jint dataXoff, jint dataYoff);
	void copy2DRangeFrom(jint xoff, jint yoff, ref<android::graphics::Bitmap> data);
	void copy3DRangeFrom(jint xoff, jint yoff, jint zoff, jint w, jint h, jint d, ref<java::lang::Object> array);
	void copy3DRangeFrom(jint xoff, jint yoff, jint zoff, jint w, jint h, jint d, ref<android::renderscript::Allocation> data, jint dataXoff, jint dataYoff, jint dataZoff);
	void copyTo(ref<android::graphics::Bitmap> b);
	void copyTo(ref<java::lang::Object> array);
	void copyTo(ref<link::java::array<jbyte>> d);
	void copyTo(ref<link::java::array<jshort>> d);
	void copyTo(ref<link::java::array<jint>> d);
	void copyTo(ref<link::java::array<jfloat>> d);
	void resize(jint dimX);
	void copy1DRangeToUnchecked(jint off, jint count, ref<java::lang::Object> array);
	void copy1DRangeToUnchecked(jint off, jint count, ref<link::java::array<jint>> d);
	void copy1DRangeToUnchecked(jint off, jint count, ref<link::java::array<jshort>> d);
	void copy1DRangeToUnchecked(jint off, jint count, ref<link::java::array<jbyte>> d);
	void copy1DRangeToUnchecked(jint off, jint count, ref<link::java::array<jfloat>> d);
	void copy1DRangeTo(jint off, jint count, ref<java::lang::Object> array);
	void copy1DRangeTo(jint off, jint count, ref<link::java::array<jint>> d);
	void copy1DRangeTo(jint off, jint count, ref<link::java::array<jshort>> d);
	void copy1DRangeTo(jint off, jint count, ref<link::java::array<jbyte>> d);
	void copy1DRangeTo(jint off, jint count, ref<link::java::array<jfloat>> d);
	void copy2DRangeTo(jint xoff, jint yoff, jint w, jint h, ref<java::lang::Object> array);
	void copy2DRangeTo(jint xoff, jint yoff, jint w, jint h, ref<link::java::array<jbyte>> data);
	void copy2DRangeTo(jint xoff, jint yoff, jint w, jint h, ref<link::java::array<jshort>> data);
	void copy2DRangeTo(jint xoff, jint yoff, jint w, jint h, ref<link::java::array<jint>> data);
	void copy2DRangeTo(jint xoff, jint yoff, jint w, jint h, ref<link::java::array<jfloat>> data);
	void copy3DRangeTo(jint xoff, jint yoff, jint zoff, jint w, jint h, jint d, ref<java::lang::Object> array);
	static ref<android::renderscript::Allocation> createTyped(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Type> type, ref<android::renderscript::Allocation_MipmapControl> mips, jint usage);
	static ref<android::renderscript::Allocation> createTyped(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Type> type, jint usage);
	static ref<android::renderscript::Allocation> createTyped(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Type> type);
	static ref<android::renderscript::Allocation> createSized(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Element> e, jint count, jint usage);
	static ref<android::renderscript::Allocation> createSized(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Element> e, jint count);
	static ref<android::renderscript::Allocation> createFromBitmap(ref<android::renderscript::RenderScript> rs, ref<android::graphics::Bitmap> b, ref<android::renderscript::Allocation_MipmapControl> mips, jint usage);
	ref<java::nio::ByteBuffer> getByteBuffer();
	static ref<link::java::array<android::renderscript::Allocation>> createAllocations(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Type> t, jint usage, jint numAlloc);
	jlong getStride();
	jlong getTimeStamp();
	ref<android::view::Surface> getSurface();
	void setSurface(ref<android::view::Surface> sur);
	static ref<android::renderscript::Allocation> createFromBitmap(ref<android::renderscript::RenderScript> rs, ref<android::graphics::Bitmap> b);
	static ref<android::renderscript::Allocation> createCubemapFromBitmap(ref<android::renderscript::RenderScript> rs, ref<android::graphics::Bitmap> b, ref<android::renderscript::Allocation_MipmapControl> mips, jint usage);
	static ref<android::renderscript::Allocation> createCubemapFromBitmap(ref<android::renderscript::RenderScript> rs, ref<android::graphics::Bitmap> b);
	static ref<android::renderscript::Allocation> createCubemapFromCubeFaces(ref<android::renderscript::RenderScript> rs, ref<android::graphics::Bitmap> xpos, ref<android::graphics::Bitmap> xneg, ref<android::graphics::Bitmap> ypos, ref<android::graphics::Bitmap> yneg, ref<android::graphics::Bitmap> zpos, ref<android::graphics::Bitmap> zneg, ref<android::renderscript::Allocation_MipmapControl> mips, jint usage);
	static ref<android::renderscript::Allocation> createCubemapFromCubeFaces(ref<android::renderscript::RenderScript> rs, ref<android::graphics::Bitmap> xpos, ref<android::graphics::Bitmap> xneg, ref<android::graphics::Bitmap> ypos, ref<android::graphics::Bitmap> yneg, ref<android::graphics::Bitmap> zpos, ref<android::graphics::Bitmap> zneg);
	static ref<android::renderscript::Allocation> createFromBitmapResource(ref<android::renderscript::RenderScript> rs, ref<android::content::res::Resources> res, jint id, ref<android::renderscript::Allocation_MipmapControl> mips, jint usage);
	static ref<android::renderscript::Allocation> createFromBitmapResource(ref<android::renderscript::RenderScript> rs, ref<android::content::res::Resources> res, jint id);
	static ref<android::renderscript::Allocation> createFromString(ref<android::renderscript::RenderScript> rs, ref<java::lang::String> str, jint usage);
	void setOnBufferAvailableListener(ref<android::renderscript::Allocation_OnBufferAvailableListener> callback);
	void destroy();

protected:

	Allocation(handle_type h) : base_(h) {}

};

} // namespace android::renderscript
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/renderscript/Allocation_MipmapControl.h>
#include <scapix/java_api/android/renderscript/Allocation_OnBufferAvailableListener.h>
#include <scapix/java_api/android/renderscript/Element.h>
#include <scapix/java_api/android/renderscript/FieldPacker.h>
#include <scapix/java_api/android/renderscript/RenderScript.h>
#include <scapix/java_api/android/renderscript/Type.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>

namespace scapix::java_api {
namespace android::renderscript {

inline jint Allocation::USAGE_GRAPHICS_CONSTANTS_() { return get_static_field<SCAPIX_META_STRING("USAGE_GRAPHICS_CONSTANTS"), jint>(); }
inline jint Allocation::USAGE_GRAPHICS_RENDER_TARGET_() { return get_static_field<SCAPIX_META_STRING("USAGE_GRAPHICS_RENDER_TARGET"), jint>(); }
inline jint Allocation::USAGE_GRAPHICS_TEXTURE_() { return get_static_field<SCAPIX_META_STRING("USAGE_GRAPHICS_TEXTURE"), jint>(); }
inline jint Allocation::USAGE_GRAPHICS_VERTEX_() { return get_static_field<SCAPIX_META_STRING("USAGE_GRAPHICS_VERTEX"), jint>(); }
inline jint Allocation::USAGE_IO_INPUT_() { return get_static_field<SCAPIX_META_STRING("USAGE_IO_INPUT"), jint>(); }
inline jint Allocation::USAGE_IO_OUTPUT_() { return get_static_field<SCAPIX_META_STRING("USAGE_IO_OUTPUT"), jint>(); }
inline jint Allocation::USAGE_SCRIPT_() { return get_static_field<SCAPIX_META_STRING("USAGE_SCRIPT"), jint>(); }
inline jint Allocation::USAGE_SHARED_() { return get_static_field<SCAPIX_META_STRING("USAGE_SHARED"), jint>(); }
inline ref<android::renderscript::Element> Allocation::getElement() { return call_method<SCAPIX_META_STRING("getElement"), ref<android::renderscript::Element>>(); }
inline jint Allocation::getUsage() { return call_method<SCAPIX_META_STRING("getUsage"), jint>(); }
inline void Allocation::setAutoPadding(jboolean useAutoPadding) { return call_method<SCAPIX_META_STRING("setAutoPadding"), void>(useAutoPadding); }
inline jint Allocation::getBytesSize() { return call_method<SCAPIX_META_STRING("getBytesSize"), jint>(); }
inline ref<android::renderscript::Type> Allocation::getType() { return call_method<SCAPIX_META_STRING("getType"), ref<android::renderscript::Type>>(); }
inline void Allocation::syncAll(jint srcLocation) { return call_method<SCAPIX_META_STRING("syncAll"), void>(srcLocation); }
inline void Allocation::ioSend() { return call_method<SCAPIX_META_STRING("ioSend"), void>(); }
inline void Allocation::ioReceive() { return call_method<SCAPIX_META_STRING("ioReceive"), void>(); }
inline void Allocation::copyFrom(ref<link::java::array<android::renderscript::BaseObj>> d) { return call_method<SCAPIX_META_STRING("copyFrom"), void>(d); }
inline void Allocation::copyFromUnchecked(ref<java::lang::Object> array) { return call_method<SCAPIX_META_STRING("copyFromUnchecked"), void>(array); }
inline void Allocation::copyFromUnchecked(ref<link::java::array<jint>> d) { return call_method<SCAPIX_META_STRING("copyFromUnchecked"), void>(d); }
inline void Allocation::copyFromUnchecked(ref<link::java::array<jshort>> d) { return call_method<SCAPIX_META_STRING("copyFromUnchecked"), void>(d); }
inline void Allocation::copyFromUnchecked(ref<link::java::array<jbyte>> d) { return call_method<SCAPIX_META_STRING("copyFromUnchecked"), void>(d); }
inline void Allocation::copyFromUnchecked(ref<link::java::array<jfloat>> d) { return call_method<SCAPIX_META_STRING("copyFromUnchecked"), void>(d); }
inline void Allocation::copyFrom(ref<java::lang::Object> array) { return call_method<SCAPIX_META_STRING("copyFrom"), void>(array); }
inline void Allocation::copyFrom(ref<link::java::array<jint>> d) { return call_method<SCAPIX_META_STRING("copyFrom"), void>(d); }
inline void Allocation::copyFrom(ref<link::java::array<jshort>> d) { return call_method<SCAPIX_META_STRING("copyFrom"), void>(d); }
inline void Allocation::copyFrom(ref<link::java::array<jbyte>> d) { return call_method<SCAPIX_META_STRING("copyFrom"), void>(d); }
inline void Allocation::copyFrom(ref<link::java::array<jfloat>> d) { return call_method<SCAPIX_META_STRING("copyFrom"), void>(d); }
inline void Allocation::copyFrom(ref<android::graphics::Bitmap> b) { return call_method<SCAPIX_META_STRING("copyFrom"), void>(b); }
inline void Allocation::copyFrom(ref<android::renderscript::Allocation> a) { return call_method<SCAPIX_META_STRING("copyFrom"), void>(a); }
inline void Allocation::setFromFieldPacker(jint xoff, ref<android::renderscript::FieldPacker> fp) { return call_method<SCAPIX_META_STRING("setFromFieldPacker"), void>(xoff, fp); }
inline void Allocation::setFromFieldPacker(jint xoff, jint component_number, ref<android::renderscript::FieldPacker> fp) { return call_method<SCAPIX_META_STRING("setFromFieldPacker"), void>(xoff, component_number, fp); }
inline void Allocation::setFromFieldPacker(jint xoff, jint yoff, jint zoff, jint component_number, ref<android::renderscript::FieldPacker> fp) { return call_method<SCAPIX_META_STRING("setFromFieldPacker"), void>(xoff, yoff, zoff, component_number, fp); }
inline void Allocation::generateMipmaps() { return call_method<SCAPIX_META_STRING("generateMipmaps"), void>(); }
inline void Allocation::copy1DRangeFromUnchecked(jint off, jint count, ref<java::lang::Object> array) { return call_method<SCAPIX_META_STRING("copy1DRangeFromUnchecked"), void>(off, count, array); }
inline void Allocation::copy1DRangeFromUnchecked(jint off, jint count, ref<link::java::array<jint>> d) { return call_method<SCAPIX_META_STRING("copy1DRangeFromUnchecked"), void>(off, count, d); }
inline void Allocation::copy1DRangeFromUnchecked(jint off, jint count, ref<link::java::array<jshort>> d) { return call_method<SCAPIX_META_STRING("copy1DRangeFromUnchecked"), void>(off, count, d); }
inline void Allocation::copy1DRangeFromUnchecked(jint off, jint count, ref<link::java::array<jbyte>> d) { return call_method<SCAPIX_META_STRING("copy1DRangeFromUnchecked"), void>(off, count, d); }
inline void Allocation::copy1DRangeFromUnchecked(jint off, jint count, ref<link::java::array<jfloat>> d) { return call_method<SCAPIX_META_STRING("copy1DRangeFromUnchecked"), void>(off, count, d); }
inline void Allocation::copy1DRangeFrom(jint off, jint count, ref<java::lang::Object> array) { return call_method<SCAPIX_META_STRING("copy1DRangeFrom"), void>(off, count, array); }
inline void Allocation::copy1DRangeFrom(jint off, jint count, ref<link::java::array<jint>> d) { return call_method<SCAPIX_META_STRING("copy1DRangeFrom"), void>(off, count, d); }
inline void Allocation::copy1DRangeFrom(jint off, jint count, ref<link::java::array<jshort>> d) { return call_method<SCAPIX_META_STRING("copy1DRangeFrom"), void>(off, count, d); }
inline void Allocation::copy1DRangeFrom(jint off, jint count, ref<link::java::array<jbyte>> d) { return call_method<SCAPIX_META_STRING("copy1DRangeFrom"), void>(off, count, d); }
inline void Allocation::copy1DRangeFrom(jint off, jint count, ref<link::java::array<jfloat>> d) { return call_method<SCAPIX_META_STRING("copy1DRangeFrom"), void>(off, count, d); }
inline void Allocation::copy1DRangeFrom(jint off, jint count, ref<android::renderscript::Allocation> data, jint dataOff) { return call_method<SCAPIX_META_STRING("copy1DRangeFrom"), void>(off, count, data, dataOff); }
inline void Allocation::copy2DRangeFrom(jint xoff, jint yoff, jint w, jint h, ref<java::lang::Object> array) { return call_method<SCAPIX_META_STRING("copy2DRangeFrom"), void>(xoff, yoff, w, h, array); }
inline void Allocation::copy2DRangeFrom(jint xoff, jint yoff, jint w, jint h, ref<link::java::array<jbyte>> data) { return call_method<SCAPIX_META_STRING("copy2DRangeFrom"), void>(xoff, yoff, w, h, data); }
inline void Allocation::copy2DRangeFrom(jint xoff, jint yoff, jint w, jint h, ref<link::java::array<jshort>> data) { return call_method<SCAPIX_META_STRING("copy2DRangeFrom"), void>(xoff, yoff, w, h, data); }
inline void Allocation::copy2DRangeFrom(jint xoff, jint yoff, jint w, jint h, ref<link::java::array<jint>> data) { return call_method<SCAPIX_META_STRING("copy2DRangeFrom"), void>(xoff, yoff, w, h, data); }
inline void Allocation::copy2DRangeFrom(jint xoff, jint yoff, jint w, jint h, ref<link::java::array<jfloat>> data) { return call_method<SCAPIX_META_STRING("copy2DRangeFrom"), void>(xoff, yoff, w, h, data); }
inline void Allocation::copy2DRangeFrom(jint xoff, jint yoff, jint w, jint h, ref<android::renderscript::Allocation> data, jint dataXoff, jint dataYoff) { return call_method<SCAPIX_META_STRING("copy2DRangeFrom"), void>(xoff, yoff, w, h, data, dataXoff, dataYoff); }
inline void Allocation::copy2DRangeFrom(jint xoff, jint yoff, ref<android::graphics::Bitmap> data) { return call_method<SCAPIX_META_STRING("copy2DRangeFrom"), void>(xoff, yoff, data); }
inline void Allocation::copy3DRangeFrom(jint xoff, jint yoff, jint zoff, jint w, jint h, jint d, ref<java::lang::Object> array) { return call_method<SCAPIX_META_STRING("copy3DRangeFrom"), void>(xoff, yoff, zoff, w, h, d, array); }
inline void Allocation::copy3DRangeFrom(jint xoff, jint yoff, jint zoff, jint w, jint h, jint d, ref<android::renderscript::Allocation> data, jint dataXoff, jint dataYoff, jint dataZoff) { return call_method<SCAPIX_META_STRING("copy3DRangeFrom"), void>(xoff, yoff, zoff, w, h, d, data, dataXoff, dataYoff, dataZoff); }
inline void Allocation::copyTo(ref<android::graphics::Bitmap> b) { return call_method<SCAPIX_META_STRING("copyTo"), void>(b); }
inline void Allocation::copyTo(ref<java::lang::Object> array) { return call_method<SCAPIX_META_STRING("copyTo"), void>(array); }
inline void Allocation::copyTo(ref<link::java::array<jbyte>> d) { return call_method<SCAPIX_META_STRING("copyTo"), void>(d); }
inline void Allocation::copyTo(ref<link::java::array<jshort>> d) { return call_method<SCAPIX_META_STRING("copyTo"), void>(d); }
inline void Allocation::copyTo(ref<link::java::array<jint>> d) { return call_method<SCAPIX_META_STRING("copyTo"), void>(d); }
inline void Allocation::copyTo(ref<link::java::array<jfloat>> d) { return call_method<SCAPIX_META_STRING("copyTo"), void>(d); }
inline void Allocation::resize(jint dimX) { return call_method<SCAPIX_META_STRING("resize"), void>(dimX); }
inline void Allocation::copy1DRangeToUnchecked(jint off, jint count, ref<java::lang::Object> array) { return call_method<SCAPIX_META_STRING("copy1DRangeToUnchecked"), void>(off, count, array); }
inline void Allocation::copy1DRangeToUnchecked(jint off, jint count, ref<link::java::array<jint>> d) { return call_method<SCAPIX_META_STRING("copy1DRangeToUnchecked"), void>(off, count, d); }
inline void Allocation::copy1DRangeToUnchecked(jint off, jint count, ref<link::java::array<jshort>> d) { return call_method<SCAPIX_META_STRING("copy1DRangeToUnchecked"), void>(off, count, d); }
inline void Allocation::copy1DRangeToUnchecked(jint off, jint count, ref<link::java::array<jbyte>> d) { return call_method<SCAPIX_META_STRING("copy1DRangeToUnchecked"), void>(off, count, d); }
inline void Allocation::copy1DRangeToUnchecked(jint off, jint count, ref<link::java::array<jfloat>> d) { return call_method<SCAPIX_META_STRING("copy1DRangeToUnchecked"), void>(off, count, d); }
inline void Allocation::copy1DRangeTo(jint off, jint count, ref<java::lang::Object> array) { return call_method<SCAPIX_META_STRING("copy1DRangeTo"), void>(off, count, array); }
inline void Allocation::copy1DRangeTo(jint off, jint count, ref<link::java::array<jint>> d) { return call_method<SCAPIX_META_STRING("copy1DRangeTo"), void>(off, count, d); }
inline void Allocation::copy1DRangeTo(jint off, jint count, ref<link::java::array<jshort>> d) { return call_method<SCAPIX_META_STRING("copy1DRangeTo"), void>(off, count, d); }
inline void Allocation::copy1DRangeTo(jint off, jint count, ref<link::java::array<jbyte>> d) { return call_method<SCAPIX_META_STRING("copy1DRangeTo"), void>(off, count, d); }
inline void Allocation::copy1DRangeTo(jint off, jint count, ref<link::java::array<jfloat>> d) { return call_method<SCAPIX_META_STRING("copy1DRangeTo"), void>(off, count, d); }
inline void Allocation::copy2DRangeTo(jint xoff, jint yoff, jint w, jint h, ref<java::lang::Object> array) { return call_method<SCAPIX_META_STRING("copy2DRangeTo"), void>(xoff, yoff, w, h, array); }
inline void Allocation::copy2DRangeTo(jint xoff, jint yoff, jint w, jint h, ref<link::java::array<jbyte>> data) { return call_method<SCAPIX_META_STRING("copy2DRangeTo"), void>(xoff, yoff, w, h, data); }
inline void Allocation::copy2DRangeTo(jint xoff, jint yoff, jint w, jint h, ref<link::java::array<jshort>> data) { return call_method<SCAPIX_META_STRING("copy2DRangeTo"), void>(xoff, yoff, w, h, data); }
inline void Allocation::copy2DRangeTo(jint xoff, jint yoff, jint w, jint h, ref<link::java::array<jint>> data) { return call_method<SCAPIX_META_STRING("copy2DRangeTo"), void>(xoff, yoff, w, h, data); }
inline void Allocation::copy2DRangeTo(jint xoff, jint yoff, jint w, jint h, ref<link::java::array<jfloat>> data) { return call_method<SCAPIX_META_STRING("copy2DRangeTo"), void>(xoff, yoff, w, h, data); }
inline void Allocation::copy3DRangeTo(jint xoff, jint yoff, jint zoff, jint w, jint h, jint d, ref<java::lang::Object> array) { return call_method<SCAPIX_META_STRING("copy3DRangeTo"), void>(xoff, yoff, zoff, w, h, d, array); }
inline ref<android::renderscript::Allocation> Allocation::createTyped(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Type> type, ref<android::renderscript::Allocation_MipmapControl> mips, jint usage) { return call_static_method<SCAPIX_META_STRING("createTyped"), ref<android::renderscript::Allocation>>(rs, type, mips, usage); }
inline ref<android::renderscript::Allocation> Allocation::createTyped(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Type> type, jint usage) { return call_static_method<SCAPIX_META_STRING("createTyped"), ref<android::renderscript::Allocation>>(rs, type, usage); }
inline ref<android::renderscript::Allocation> Allocation::createTyped(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Type> type) { return call_static_method<SCAPIX_META_STRING("createTyped"), ref<android::renderscript::Allocation>>(rs, type); }
inline ref<android::renderscript::Allocation> Allocation::createSized(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Element> e, jint count, jint usage) { return call_static_method<SCAPIX_META_STRING("createSized"), ref<android::renderscript::Allocation>>(rs, e, count, usage); }
inline ref<android::renderscript::Allocation> Allocation::createSized(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Element> e, jint count) { return call_static_method<SCAPIX_META_STRING("createSized"), ref<android::renderscript::Allocation>>(rs, e, count); }
inline ref<android::renderscript::Allocation> Allocation::createFromBitmap(ref<android::renderscript::RenderScript> rs, ref<android::graphics::Bitmap> b, ref<android::renderscript::Allocation_MipmapControl> mips, jint usage) { return call_static_method<SCAPIX_META_STRING("createFromBitmap"), ref<android::renderscript::Allocation>>(rs, b, mips, usage); }
inline ref<java::nio::ByteBuffer> Allocation::getByteBuffer() { return call_method<SCAPIX_META_STRING("getByteBuffer"), ref<java::nio::ByteBuffer>>(); }
inline ref<link::java::array<android::renderscript::Allocation>> Allocation::createAllocations(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Type> t, jint usage, jint numAlloc) { return call_static_method<SCAPIX_META_STRING("createAllocations"), ref<link::java::array<android::renderscript::Allocation>>>(rs, t, usage, numAlloc); }
inline jlong Allocation::getStride() { return call_method<SCAPIX_META_STRING("getStride"), jlong>(); }
inline jlong Allocation::getTimeStamp() { return call_method<SCAPIX_META_STRING("getTimeStamp"), jlong>(); }
inline ref<android::view::Surface> Allocation::getSurface() { return call_method<SCAPIX_META_STRING("getSurface"), ref<android::view::Surface>>(); }
inline void Allocation::setSurface(ref<android::view::Surface> sur) { return call_method<SCAPIX_META_STRING("setSurface"), void>(sur); }
inline ref<android::renderscript::Allocation> Allocation::createFromBitmap(ref<android::renderscript::RenderScript> rs, ref<android::graphics::Bitmap> b) { return call_static_method<SCAPIX_META_STRING("createFromBitmap"), ref<android::renderscript::Allocation>>(rs, b); }
inline ref<android::renderscript::Allocation> Allocation::createCubemapFromBitmap(ref<android::renderscript::RenderScript> rs, ref<android::graphics::Bitmap> b, ref<android::renderscript::Allocation_MipmapControl> mips, jint usage) { return call_static_method<SCAPIX_META_STRING("createCubemapFromBitmap"), ref<android::renderscript::Allocation>>(rs, b, mips, usage); }
inline ref<android::renderscript::Allocation> Allocation::createCubemapFromBitmap(ref<android::renderscript::RenderScript> rs, ref<android::graphics::Bitmap> b) { return call_static_method<SCAPIX_META_STRING("createCubemapFromBitmap"), ref<android::renderscript::Allocation>>(rs, b); }
inline ref<android::renderscript::Allocation> Allocation::createCubemapFromCubeFaces(ref<android::renderscript::RenderScript> rs, ref<android::graphics::Bitmap> xpos, ref<android::graphics::Bitmap> xneg, ref<android::graphics::Bitmap> ypos, ref<android::graphics::Bitmap> yneg, ref<android::graphics::Bitmap> zpos, ref<android::graphics::Bitmap> zneg, ref<android::renderscript::Allocation_MipmapControl> mips, jint usage) { return call_static_method<SCAPIX_META_STRING("createCubemapFromCubeFaces"), ref<android::renderscript::Allocation>>(rs, xpos, xneg, ypos, yneg, zpos, zneg, mips, usage); }
inline ref<android::renderscript::Allocation> Allocation::createCubemapFromCubeFaces(ref<android::renderscript::RenderScript> rs, ref<android::graphics::Bitmap> xpos, ref<android::graphics::Bitmap> xneg, ref<android::graphics::Bitmap> ypos, ref<android::graphics::Bitmap> yneg, ref<android::graphics::Bitmap> zpos, ref<android::graphics::Bitmap> zneg) { return call_static_method<SCAPIX_META_STRING("createCubemapFromCubeFaces"), ref<android::renderscript::Allocation>>(rs, xpos, xneg, ypos, yneg, zpos, zneg); }
inline ref<android::renderscript::Allocation> Allocation::createFromBitmapResource(ref<android::renderscript::RenderScript> rs, ref<android::content::res::Resources> res, jint id, ref<android::renderscript::Allocation_MipmapControl> mips, jint usage) { return call_static_method<SCAPIX_META_STRING("createFromBitmapResource"), ref<android::renderscript::Allocation>>(rs, res, id, mips, usage); }
inline ref<android::renderscript::Allocation> Allocation::createFromBitmapResource(ref<android::renderscript::RenderScript> rs, ref<android::content::res::Resources> res, jint id) { return call_static_method<SCAPIX_META_STRING("createFromBitmapResource"), ref<android::renderscript::Allocation>>(rs, res, id); }
inline ref<android::renderscript::Allocation> Allocation::createFromString(ref<android::renderscript::RenderScript> rs, ref<java::lang::String> str, jint usage) { return call_static_method<SCAPIX_META_STRING("createFromString"), ref<android::renderscript::Allocation>>(rs, str, usage); }
inline void Allocation::setOnBufferAvailableListener(ref<android::renderscript::Allocation_OnBufferAvailableListener> callback) { return call_method<SCAPIX_META_STRING("setOnBufferAvailableListener"), void>(callback); }
inline void Allocation::destroy() { return call_method<SCAPIX_META_STRING("destroy"), void>(); }

} // namespace android::renderscript
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_RENDERSCRIPT_ALLOCATION_H
