// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_RENDERSCRIPT_MATRIX4F_H
#define SCAPIX_ANDROID_RENDERSCRIPT_MATRIX4F_H

namespace scapix::java_api {
namespace android::renderscript {

class Matrix4f : public object_base<SCAPIX_META_STRING("android/renderscript/Matrix4f"),
	java::lang::Object>
{
public:

	static ref<Matrix4f> new_object();
	static ref<Matrix4f> new_object(ref<link::java::array<jfloat>> dataArray);
	ref<link::java::array<jfloat>> getArray();
	jfloat get(jint x, jint y);
	void set(jint x, jint y, jfloat v);
	void loadIdentity();
	void load(ref<android::renderscript::Matrix4f> src);
	void loadRotate(jfloat rot, jfloat x, jfloat y, jfloat z);
	void loadScale(jfloat x, jfloat y, jfloat z);
	void loadTranslate(jfloat x, jfloat y, jfloat z);
	void loadMultiply(ref<android::renderscript::Matrix4f> lhs, ref<android::renderscript::Matrix4f> rhs);
	void loadOrtho(jfloat l, jfloat r, jfloat b, jfloat t, jfloat n, jfloat f);
	void loadOrthoWindow(jint w, jint h);
	void loadFrustum(jfloat l, jfloat r, jfloat b, jfloat t, jfloat n, jfloat f);
	void loadPerspective(jfloat fovy, jfloat aspect, jfloat near, jfloat far);
	void loadProjectionNormalized(jint w, jint h);
	void multiply(ref<android::renderscript::Matrix4f> rhs);
	void rotate(jfloat rot, jfloat x, jfloat y, jfloat z);
	void scale(jfloat x, jfloat y, jfloat z);
	void translate(jfloat x, jfloat y, jfloat z);
	jboolean inverse();
	jboolean inverseTranspose();
	void transpose();

protected:

	Matrix4f(handle_type h) : base_(h) {}

};

} // namespace android::renderscript
} // namespace scapix::java_api


namespace scapix::java_api {
namespace android::renderscript {

inline ref<Matrix4f> Matrix4f::new_object() { return base_::new_object(); }
inline ref<Matrix4f> Matrix4f::new_object(ref<link::java::array<jfloat>> dataArray) { return base_::new_object(dataArray); }
inline ref<link::java::array<jfloat>> Matrix4f::getArray() { return call_method<SCAPIX_META_STRING("getArray"), ref<link::java::array<jfloat>>>(); }
inline jfloat Matrix4f::get(jint x, jint y) { return call_method<SCAPIX_META_STRING("get"), jfloat>(x, y); }
inline void Matrix4f::set(jint x, jint y, jfloat v) { return call_method<SCAPIX_META_STRING("set"), void>(x, y, v); }
inline void Matrix4f::loadIdentity() { return call_method<SCAPIX_META_STRING("loadIdentity"), void>(); }
inline void Matrix4f::load(ref<android::renderscript::Matrix4f> src) { return call_method<SCAPIX_META_STRING("load"), void>(src); }
inline void Matrix4f::loadRotate(jfloat rot, jfloat x, jfloat y, jfloat z) { return call_method<SCAPIX_META_STRING("loadRotate"), void>(rot, x, y, z); }
inline void Matrix4f::loadScale(jfloat x, jfloat y, jfloat z) { return call_method<SCAPIX_META_STRING("loadScale"), void>(x, y, z); }
inline void Matrix4f::loadTranslate(jfloat x, jfloat y, jfloat z) { return call_method<SCAPIX_META_STRING("loadTranslate"), void>(x, y, z); }
inline void Matrix4f::loadMultiply(ref<android::renderscript::Matrix4f> lhs, ref<android::renderscript::Matrix4f> rhs) { return call_method<SCAPIX_META_STRING("loadMultiply"), void>(lhs, rhs); }
inline void Matrix4f::loadOrtho(jfloat l, jfloat r, jfloat b, jfloat t, jfloat n, jfloat f) { return call_method<SCAPIX_META_STRING("loadOrtho"), void>(l, r, b, t, n, f); }
inline void Matrix4f::loadOrthoWindow(jint w, jint h) { return call_method<SCAPIX_META_STRING("loadOrthoWindow"), void>(w, h); }
inline void Matrix4f::loadFrustum(jfloat l, jfloat r, jfloat b, jfloat t, jfloat n, jfloat f) { return call_method<SCAPIX_META_STRING("loadFrustum"), void>(l, r, b, t, n, f); }
inline void Matrix4f::loadPerspective(jfloat fovy, jfloat aspect, jfloat near, jfloat far) { return call_method<SCAPIX_META_STRING("loadPerspective"), void>(fovy, aspect, near, far); }
inline void Matrix4f::loadProjectionNormalized(jint w, jint h) { return call_method<SCAPIX_META_STRING("loadProjectionNormalized"), void>(w, h); }
inline void Matrix4f::multiply(ref<android::renderscript::Matrix4f> rhs) { return call_method<SCAPIX_META_STRING("multiply"), void>(rhs); }
inline void Matrix4f::rotate(jfloat rot, jfloat x, jfloat y, jfloat z) { return call_method<SCAPIX_META_STRING("rotate"), void>(rot, x, y, z); }
inline void Matrix4f::scale(jfloat x, jfloat y, jfloat z) { return call_method<SCAPIX_META_STRING("scale"), void>(x, y, z); }
inline void Matrix4f::translate(jfloat x, jfloat y, jfloat z) { return call_method<SCAPIX_META_STRING("translate"), void>(x, y, z); }
inline jboolean Matrix4f::inverse() { return call_method<SCAPIX_META_STRING("inverse"), jboolean>(); }
inline jboolean Matrix4f::inverseTranspose() { return call_method<SCAPIX_META_STRING("inverseTranspose"), jboolean>(); }
inline void Matrix4f::transpose() { return call_method<SCAPIX_META_STRING("transpose"), void>(); }

} // namespace android::renderscript
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_RENDERSCRIPT_MATRIX4F_H
