// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/renderscript/ScriptIntrinsic.h>

#ifndef SCAPIX_ANDROID_RENDERSCRIPT_SCRIPTINTRINSICBLEND_H
#define SCAPIX_ANDROID_RENDERSCRIPT_SCRIPTINTRINSICBLEND_H

namespace scapix::java_api {

namespace android::renderscript { class Allocation; }
namespace android::renderscript { class Element; }
namespace android::renderscript { class RenderScript; }
namespace android::renderscript { class Script_KernelID; }
namespace android::renderscript { class Script_LaunchOptions; }

namespace android::renderscript {

class ScriptIntrinsicBlend : public object_base<SCAPIX_META_STRING("android/renderscript/ScriptIntrinsicBlend"),
	android::renderscript::ScriptIntrinsic>
{
public:

	static ref<android::renderscript::ScriptIntrinsicBlend> create(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Element> e);
	void forEachClear(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout);
	void forEachClear(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt);
	ref<android::renderscript::Script_KernelID> getKernelIDClear();
	void forEachSrc(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout);
	void forEachSrc(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt);
	ref<android::renderscript::Script_KernelID> getKernelIDSrc();
	void forEachDst(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout);
	void forEachDst(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt);
	ref<android::renderscript::Script_KernelID> getKernelIDDst();
	void forEachSrcOver(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout);
	void forEachSrcOver(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt);
	ref<android::renderscript::Script_KernelID> getKernelIDSrcOver();
	void forEachDstOver(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout);
	void forEachDstOver(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt);
	ref<android::renderscript::Script_KernelID> getKernelIDDstOver();
	void forEachSrcIn(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout);
	void forEachSrcIn(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt);
	ref<android::renderscript::Script_KernelID> getKernelIDSrcIn();
	void forEachDstIn(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout);
	void forEachDstIn(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt);
	ref<android::renderscript::Script_KernelID> getKernelIDDstIn();
	void forEachSrcOut(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout);
	void forEachSrcOut(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt);
	ref<android::renderscript::Script_KernelID> getKernelIDSrcOut();
	void forEachDstOut(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout);
	void forEachDstOut(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt);
	ref<android::renderscript::Script_KernelID> getKernelIDDstOut();
	void forEachSrcAtop(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout);
	void forEachSrcAtop(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt);
	ref<android::renderscript::Script_KernelID> getKernelIDSrcAtop();
	void forEachDstAtop(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout);
	void forEachDstAtop(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt);
	ref<android::renderscript::Script_KernelID> getKernelIDDstAtop();
	void forEachXor(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout);
	void forEachXor(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt);
	ref<android::renderscript::Script_KernelID> getKernelIDXor();
	void forEachMultiply(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout);
	void forEachMultiply(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt);
	ref<android::renderscript::Script_KernelID> getKernelIDMultiply();
	void forEachAdd(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout);
	void forEachAdd(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt);
	ref<android::renderscript::Script_KernelID> getKernelIDAdd();
	void forEachSubtract(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout);
	void forEachSubtract(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt);
	ref<android::renderscript::Script_KernelID> getKernelIDSubtract();

protected:

	ScriptIntrinsicBlend(handle_type h) : base_(h) {}

};

} // namespace android::renderscript
} // namespace scapix::java_api

#include <scapix/java_api/android/renderscript/Allocation.h>
#include <scapix/java_api/android/renderscript/Element.h>
#include <scapix/java_api/android/renderscript/RenderScript.h>
#include <scapix/java_api/android/renderscript/Script_KernelID.h>
#include <scapix/java_api/android/renderscript/Script_LaunchOptions.h>

namespace scapix::java_api {
namespace android::renderscript {

inline ref<android::renderscript::ScriptIntrinsicBlend> ScriptIntrinsicBlend::create(ref<android::renderscript::RenderScript> rs, ref<android::renderscript::Element> e) { return call_static_method<SCAPIX_META_STRING("create"), ref<android::renderscript::ScriptIntrinsicBlend>>(rs, e); }
inline void ScriptIntrinsicBlend::forEachClear(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout) { return call_method<SCAPIX_META_STRING("forEachClear"), void>(ain, aout); }
inline void ScriptIntrinsicBlend::forEachClear(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<SCAPIX_META_STRING("forEachClear"), void>(ain, aout, opt); }
inline ref<android::renderscript::Script_KernelID> ScriptIntrinsicBlend::getKernelIDClear() { return call_method<SCAPIX_META_STRING("getKernelIDClear"), ref<android::renderscript::Script_KernelID>>(); }
inline void ScriptIntrinsicBlend::forEachSrc(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout) { return call_method<SCAPIX_META_STRING("forEachSrc"), void>(ain, aout); }
inline void ScriptIntrinsicBlend::forEachSrc(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<SCAPIX_META_STRING("forEachSrc"), void>(ain, aout, opt); }
inline ref<android::renderscript::Script_KernelID> ScriptIntrinsicBlend::getKernelIDSrc() { return call_method<SCAPIX_META_STRING("getKernelIDSrc"), ref<android::renderscript::Script_KernelID>>(); }
inline void ScriptIntrinsicBlend::forEachDst(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout) { return call_method<SCAPIX_META_STRING("forEachDst"), void>(ain, aout); }
inline void ScriptIntrinsicBlend::forEachDst(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<SCAPIX_META_STRING("forEachDst"), void>(ain, aout, opt); }
inline ref<android::renderscript::Script_KernelID> ScriptIntrinsicBlend::getKernelIDDst() { return call_method<SCAPIX_META_STRING("getKernelIDDst"), ref<android::renderscript::Script_KernelID>>(); }
inline void ScriptIntrinsicBlend::forEachSrcOver(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout) { return call_method<SCAPIX_META_STRING("forEachSrcOver"), void>(ain, aout); }
inline void ScriptIntrinsicBlend::forEachSrcOver(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<SCAPIX_META_STRING("forEachSrcOver"), void>(ain, aout, opt); }
inline ref<android::renderscript::Script_KernelID> ScriptIntrinsicBlend::getKernelIDSrcOver() { return call_method<SCAPIX_META_STRING("getKernelIDSrcOver"), ref<android::renderscript::Script_KernelID>>(); }
inline void ScriptIntrinsicBlend::forEachDstOver(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout) { return call_method<SCAPIX_META_STRING("forEachDstOver"), void>(ain, aout); }
inline void ScriptIntrinsicBlend::forEachDstOver(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<SCAPIX_META_STRING("forEachDstOver"), void>(ain, aout, opt); }
inline ref<android::renderscript::Script_KernelID> ScriptIntrinsicBlend::getKernelIDDstOver() { return call_method<SCAPIX_META_STRING("getKernelIDDstOver"), ref<android::renderscript::Script_KernelID>>(); }
inline void ScriptIntrinsicBlend::forEachSrcIn(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout) { return call_method<SCAPIX_META_STRING("forEachSrcIn"), void>(ain, aout); }
inline void ScriptIntrinsicBlend::forEachSrcIn(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<SCAPIX_META_STRING("forEachSrcIn"), void>(ain, aout, opt); }
inline ref<android::renderscript::Script_KernelID> ScriptIntrinsicBlend::getKernelIDSrcIn() { return call_method<SCAPIX_META_STRING("getKernelIDSrcIn"), ref<android::renderscript::Script_KernelID>>(); }
inline void ScriptIntrinsicBlend::forEachDstIn(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout) { return call_method<SCAPIX_META_STRING("forEachDstIn"), void>(ain, aout); }
inline void ScriptIntrinsicBlend::forEachDstIn(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<SCAPIX_META_STRING("forEachDstIn"), void>(ain, aout, opt); }
inline ref<android::renderscript::Script_KernelID> ScriptIntrinsicBlend::getKernelIDDstIn() { return call_method<SCAPIX_META_STRING("getKernelIDDstIn"), ref<android::renderscript::Script_KernelID>>(); }
inline void ScriptIntrinsicBlend::forEachSrcOut(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout) { return call_method<SCAPIX_META_STRING("forEachSrcOut"), void>(ain, aout); }
inline void ScriptIntrinsicBlend::forEachSrcOut(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<SCAPIX_META_STRING("forEachSrcOut"), void>(ain, aout, opt); }
inline ref<android::renderscript::Script_KernelID> ScriptIntrinsicBlend::getKernelIDSrcOut() { return call_method<SCAPIX_META_STRING("getKernelIDSrcOut"), ref<android::renderscript::Script_KernelID>>(); }
inline void ScriptIntrinsicBlend::forEachDstOut(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout) { return call_method<SCAPIX_META_STRING("forEachDstOut"), void>(ain, aout); }
inline void ScriptIntrinsicBlend::forEachDstOut(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<SCAPIX_META_STRING("forEachDstOut"), void>(ain, aout, opt); }
inline ref<android::renderscript::Script_KernelID> ScriptIntrinsicBlend::getKernelIDDstOut() { return call_method<SCAPIX_META_STRING("getKernelIDDstOut"), ref<android::renderscript::Script_KernelID>>(); }
inline void ScriptIntrinsicBlend::forEachSrcAtop(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout) { return call_method<SCAPIX_META_STRING("forEachSrcAtop"), void>(ain, aout); }
inline void ScriptIntrinsicBlend::forEachSrcAtop(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<SCAPIX_META_STRING("forEachSrcAtop"), void>(ain, aout, opt); }
inline ref<android::renderscript::Script_KernelID> ScriptIntrinsicBlend::getKernelIDSrcAtop() { return call_method<SCAPIX_META_STRING("getKernelIDSrcAtop"), ref<android::renderscript::Script_KernelID>>(); }
inline void ScriptIntrinsicBlend::forEachDstAtop(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout) { return call_method<SCAPIX_META_STRING("forEachDstAtop"), void>(ain, aout); }
inline void ScriptIntrinsicBlend::forEachDstAtop(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<SCAPIX_META_STRING("forEachDstAtop"), void>(ain, aout, opt); }
inline ref<android::renderscript::Script_KernelID> ScriptIntrinsicBlend::getKernelIDDstAtop() { return call_method<SCAPIX_META_STRING("getKernelIDDstAtop"), ref<android::renderscript::Script_KernelID>>(); }
inline void ScriptIntrinsicBlend::forEachXor(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout) { return call_method<SCAPIX_META_STRING("forEachXor"), void>(ain, aout); }
inline void ScriptIntrinsicBlend::forEachXor(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<SCAPIX_META_STRING("forEachXor"), void>(ain, aout, opt); }
inline ref<android::renderscript::Script_KernelID> ScriptIntrinsicBlend::getKernelIDXor() { return call_method<SCAPIX_META_STRING("getKernelIDXor"), ref<android::renderscript::Script_KernelID>>(); }
inline void ScriptIntrinsicBlend::forEachMultiply(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout) { return call_method<SCAPIX_META_STRING("forEachMultiply"), void>(ain, aout); }
inline void ScriptIntrinsicBlend::forEachMultiply(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<SCAPIX_META_STRING("forEachMultiply"), void>(ain, aout, opt); }
inline ref<android::renderscript::Script_KernelID> ScriptIntrinsicBlend::getKernelIDMultiply() { return call_method<SCAPIX_META_STRING("getKernelIDMultiply"), ref<android::renderscript::Script_KernelID>>(); }
inline void ScriptIntrinsicBlend::forEachAdd(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout) { return call_method<SCAPIX_META_STRING("forEachAdd"), void>(ain, aout); }
inline void ScriptIntrinsicBlend::forEachAdd(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<SCAPIX_META_STRING("forEachAdd"), void>(ain, aout, opt); }
inline ref<android::renderscript::Script_KernelID> ScriptIntrinsicBlend::getKernelIDAdd() { return call_method<SCAPIX_META_STRING("getKernelIDAdd"), ref<android::renderscript::Script_KernelID>>(); }
inline void ScriptIntrinsicBlend::forEachSubtract(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout) { return call_method<SCAPIX_META_STRING("forEachSubtract"), void>(ain, aout); }
inline void ScriptIntrinsicBlend::forEachSubtract(ref<android::renderscript::Allocation> ain, ref<android::renderscript::Allocation> aout, ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<SCAPIX_META_STRING("forEachSubtract"), void>(ain, aout, opt); }
inline ref<android::renderscript::Script_KernelID> ScriptIntrinsicBlend::getKernelIDSubtract() { return call_method<SCAPIX_META_STRING("getKernelIDSubtract"), ref<android::renderscript::Script_KernelID>>(); }

} // namespace android::renderscript
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_RENDERSCRIPT_SCRIPTINTRINSICBLEND_H
