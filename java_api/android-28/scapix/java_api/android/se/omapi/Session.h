// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_SE_OMAPI_SESSION_H
#define SCAPIX_ANDROID_SE_OMAPI_SESSION_H

namespace scapix::java_api {

namespace android::se::omapi { class Channel; }
namespace android::se::omapi { class Reader; }

namespace android::se::omapi {

class Session : public object_base<SCAPIX_META_STRING("android/se/omapi/Session"),
	java::lang::Object>
{
public:

	ref<android::se::omapi::Reader> getReader();
	ref<link::java::array<jbyte>> getATR();
	void close();
	jboolean isClosed();
	void closeChannels();
	ref<android::se::omapi::Channel> openBasicChannel(ref<link::java::array<jbyte>> aid, jbyte p2);
	ref<android::se::omapi::Channel> openBasicChannel(ref<link::java::array<jbyte>> aid);
	ref<android::se::omapi::Channel> openLogicalChannel(ref<link::java::array<jbyte>> aid, jbyte p2);
	ref<android::se::omapi::Channel> openLogicalChannel(ref<link::java::array<jbyte>> aid);

protected:

	Session(handle_type h) : base_(h) {}

};

} // namespace android::se::omapi
} // namespace scapix::java_api

#include <scapix/java_api/android/se/omapi/Channel.h>
#include <scapix/java_api/android/se/omapi/Reader.h>

namespace scapix::java_api {
namespace android::se::omapi {

inline ref<android::se::omapi::Reader> Session::getReader() { return call_method<SCAPIX_META_STRING("getReader"), ref<android::se::omapi::Reader>>(); }
inline ref<link::java::array<jbyte>> Session::getATR() { return call_method<SCAPIX_META_STRING("getATR"), ref<link::java::array<jbyte>>>(); }
inline void Session::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jboolean Session::isClosed() { return call_method<SCAPIX_META_STRING("isClosed"), jboolean>(); }
inline void Session::closeChannels() { return call_method<SCAPIX_META_STRING("closeChannels"), void>(); }
inline ref<android::se::omapi::Channel> Session::openBasicChannel(ref<link::java::array<jbyte>> aid, jbyte p2) { return call_method<SCAPIX_META_STRING("openBasicChannel"), ref<android::se::omapi::Channel>>(aid, p2); }
inline ref<android::se::omapi::Channel> Session::openBasicChannel(ref<link::java::array<jbyte>> aid) { return call_method<SCAPIX_META_STRING("openBasicChannel"), ref<android::se::omapi::Channel>>(aid); }
inline ref<android::se::omapi::Channel> Session::openLogicalChannel(ref<link::java::array<jbyte>> aid, jbyte p2) { return call_method<SCAPIX_META_STRING("openLogicalChannel"), ref<android::se::omapi::Channel>>(aid, p2); }
inline ref<android::se::omapi::Channel> Session::openLogicalChannel(ref<link::java::array<jbyte>> aid) { return call_method<SCAPIX_META_STRING("openLogicalChannel"), ref<android::se::omapi::Channel>>(aid); }

} // namespace android::se::omapi
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_SE_OMAPI_SESSION_H
