// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_SE_OMAPI_SESERVICE_H
#define SCAPIX_ANDROID_SE_OMAPI_SESERVICE_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::se::omapi { class Reader; }
namespace android::se::omapi { class SEService_OnConnectedListener; }
namespace java::lang { class String; }
namespace java::util::concurrent { class Executor; }

namespace android::se::omapi {

class SEService : public object_base<SCAPIX_META_STRING("android/se/omapi/SEService"),
	java::lang::Object>
{
public:

	using OnConnectedListener = SEService_OnConnectedListener;

	static ref<SEService> new_object(ref<android::content::Context> context, ref<java::util::concurrent::Executor> executor, ref<android::se::omapi::SEService_OnConnectedListener> listener);
	jboolean isConnected();
	ref<link::java::array<android::se::omapi::Reader>> getReaders();
	void shutdown();
	ref<java::lang::String> getVersion();

protected:

	SEService(handle_type h) : base_(h) {}

};

} // namespace android::se::omapi
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/se/omapi/Reader.h>
#include <scapix/java_api/android/se/omapi/SEService_OnConnectedListener.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>

namespace scapix::java_api {
namespace android::se::omapi {

inline ref<SEService> SEService::new_object(ref<android::content::Context> context, ref<java::util::concurrent::Executor> executor, ref<android::se::omapi::SEService_OnConnectedListener> listener) { return base_::new_object(context, executor, listener); }
inline jboolean SEService::isConnected() { return call_method<SCAPIX_META_STRING("isConnected"), jboolean>(); }
inline ref<link::java::array<android::se::omapi::Reader>> SEService::getReaders() { return call_method<SCAPIX_META_STRING("getReaders"), ref<link::java::array<android::se::omapi::Reader>>>(); }
inline void SEService::shutdown() { return call_method<SCAPIX_META_STRING("shutdown"), void>(); }
inline ref<java::lang::String> SEService::getVersion() { return call_method<SCAPIX_META_STRING("getVersion"), ref<java::lang::String>>(); }

} // namespace android::se::omapi
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_SE_OMAPI_SESERVICE_H
