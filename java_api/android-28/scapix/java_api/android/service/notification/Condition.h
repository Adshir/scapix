// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_SERVICE_NOTIFICATION_CONDITION_H
#define SCAPIX_ANDROID_SERVICE_NOTIFICATION_CONDITION_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::net { class Uri; }
namespace android::net { class Uri_Builder; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::service::notification {

class Condition : public object_base<SCAPIX_META_STRING("android/service/notification/Condition"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint FLAG_RELEVANT_ALWAYS_();
	static jint FLAG_RELEVANT_NOW_();
	static ref<java::lang::String> SCHEME_();
	static jint STATE_ERROR_();
	static jint STATE_FALSE_();
	static jint STATE_TRUE_();
	static jint STATE_UNKNOWN_();
	jint flags();
	jint icon();
	ref<android::net::Uri> id();
	ref<java::lang::String> line1();
	ref<java::lang::String> line2();
	jint state();
	ref<java::lang::String> summary();

	static ref<Condition> new_object(ref<android::net::Uri> id, ref<java::lang::String> summary, jint state);
	static ref<Condition> new_object(ref<android::net::Uri> id, ref<java::lang::String> summary, ref<java::lang::String> line1, ref<java::lang::String> line2, jint icon, jint state, jint flags);
	static ref<Condition> new_object(ref<android::os::Parcel> source);
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	ref<java::lang::String> toString();
	static ref<java::lang::String> stateToString(jint state);
	static ref<java::lang::String> relevanceToString(jint flags);
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	jint describeContents();
	ref<android::service::notification::Condition> copy();
	static ref<android::net::Uri_Builder> newId(ref<android::content::Context> context);
	static jboolean isValidId(ref<android::net::Uri> id, ref<java::lang::String> pkg);

protected:

	Condition(handle_type h) : base_(h) {}

};

} // namespace android::service::notification
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/net/Uri_Builder.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::service::notification {

inline ref<android::os::Parcelable_Creator> Condition::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint Condition::FLAG_RELEVANT_ALWAYS_() { return get_static_field<SCAPIX_META_STRING("FLAG_RELEVANT_ALWAYS"), jint>(); }
inline jint Condition::FLAG_RELEVANT_NOW_() { return get_static_field<SCAPIX_META_STRING("FLAG_RELEVANT_NOW"), jint>(); }
inline ref<java::lang::String> Condition::SCHEME_() { return get_static_field<SCAPIX_META_STRING("SCHEME"), ref<java::lang::String>>(); }
inline jint Condition::STATE_ERROR_() { return get_static_field<SCAPIX_META_STRING("STATE_ERROR"), jint>(); }
inline jint Condition::STATE_FALSE_() { return get_static_field<SCAPIX_META_STRING("STATE_FALSE"), jint>(); }
inline jint Condition::STATE_TRUE_() { return get_static_field<SCAPIX_META_STRING("STATE_TRUE"), jint>(); }
inline jint Condition::STATE_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("STATE_UNKNOWN"), jint>(); }
inline jint Condition::flags() { return get_field<SCAPIX_META_STRING("flags"), jint>(); }
inline jint Condition::icon() { return get_field<SCAPIX_META_STRING("icon"), jint>(); }
inline ref<android::net::Uri> Condition::id() { return get_field<SCAPIX_META_STRING("id"), ref<android::net::Uri>>(); }
inline ref<java::lang::String> Condition::line1() { return get_field<SCAPIX_META_STRING("line1"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Condition::line2() { return get_field<SCAPIX_META_STRING("line2"), ref<java::lang::String>>(); }
inline jint Condition::state() { return get_field<SCAPIX_META_STRING("state"), jint>(); }
inline ref<java::lang::String> Condition::summary() { return get_field<SCAPIX_META_STRING("summary"), ref<java::lang::String>>(); }
inline ref<Condition> Condition::new_object(ref<android::net::Uri> id, ref<java::lang::String> summary, jint state) { return base_::new_object(id, summary, state); }
inline ref<Condition> Condition::new_object(ref<android::net::Uri> id, ref<java::lang::String> summary, ref<java::lang::String> line1, ref<java::lang::String> line2, jint icon, jint state, jint flags) { return base_::new_object(id, summary, line1, line2, icon, state, flags); }
inline ref<Condition> Condition::new_object(ref<android::os::Parcel> source) { return base_::new_object(source); }
inline void Condition::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline ref<java::lang::String> Condition::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Condition::stateToString(jint state) { return call_static_method<SCAPIX_META_STRING("stateToString"), ref<java::lang::String>>(state); }
inline ref<java::lang::String> Condition::relevanceToString(jint flags) { return call_static_method<SCAPIX_META_STRING("relevanceToString"), ref<java::lang::String>>(flags); }
inline jboolean Condition::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint Condition::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint Condition::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline ref<android::service::notification::Condition> Condition::copy() { return call_method<SCAPIX_META_STRING("copy"), ref<android::service::notification::Condition>>(); }
inline ref<android::net::Uri_Builder> Condition::newId(ref<android::content::Context> context) { return call_static_method<SCAPIX_META_STRING("newId"), ref<android::net::Uri_Builder>>(context); }
inline jboolean Condition::isValidId(ref<android::net::Uri> id, ref<java::lang::String> pkg) { return call_static_method<SCAPIX_META_STRING("isValidId"), jboolean>(id, pkg); }

} // namespace android::service::notification
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_SERVICE_NOTIFICATION_CONDITION_H
