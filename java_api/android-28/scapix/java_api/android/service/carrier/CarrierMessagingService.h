// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/app/Service.h>

#ifndef SCAPIX_ANDROID_SERVICE_CARRIER_CARRIERMESSAGINGSERVICE_H
#define SCAPIX_ANDROID_SERVICE_CARRIER_CARRIERMESSAGINGSERVICE_H

namespace scapix::java_api {

namespace android::content { class Intent; }
namespace android::net { class Uri; }
namespace android::os { class IBinder; }
namespace android::service::carrier { class CarrierMessagingService_ResultCallback; }
namespace android::service::carrier { class MessagePdu; }
namespace java::lang { class String; }
namespace java::util { class List; }
namespace android::service::carrier { class CarrierMessagingService_SendSmsResult; }
namespace android::service::carrier { class CarrierMessagingService_SendMultipartSmsResult; }
namespace android::service::carrier { class CarrierMessagingService_SendMmsResult; }

namespace android::service::carrier {

class CarrierMessagingService : public object_base<SCAPIX_META_STRING("android/service/carrier/CarrierMessagingService"),
	android::app::Service>
{
public:

	using SendSmsResult = CarrierMessagingService_SendSmsResult;
	using SendMultipartSmsResult = CarrierMessagingService_SendMultipartSmsResult;
	using SendMmsResult = CarrierMessagingService_SendMmsResult;
	using ResultCallback = CarrierMessagingService_ResultCallback;

	static jint DOWNLOAD_STATUS_ERROR_();
	static jint DOWNLOAD_STATUS_OK_();
	static jint DOWNLOAD_STATUS_RETRY_ON_CARRIER_NETWORK_();
	static jint RECEIVE_OPTIONS_DEFAULT_();
	static jint RECEIVE_OPTIONS_DROP_();
	static jint RECEIVE_OPTIONS_SKIP_NOTIFY_WHEN_CREDENTIAL_PROTECTED_STORAGE_UNAVAILABLE_();
	static jint SEND_FLAG_REQUEST_DELIVERY_STATUS_();
	static jint SEND_STATUS_ERROR_();
	static jint SEND_STATUS_OK_();
	static jint SEND_STATUS_RETRY_ON_CARRIER_NETWORK_();
	static ref<java::lang::String> SERVICE_INTERFACE_();

	static ref<CarrierMessagingService> new_object();
	void onFilterSms(ref<android::service::carrier::MessagePdu> pdu, ref<java::lang::String> format, jint destPort, jint subId, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback);
	void onReceiveTextSms(ref<android::service::carrier::MessagePdu> pdu, ref<java::lang::String> format, jint destPort, jint subId, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback);
	void onSendTextSms(ref<java::lang::String> text, jint subId, ref<java::lang::String> destAddress, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback);
	void onSendTextSms(ref<java::lang::String> text, jint subId, ref<java::lang::String> destAddress, jint sendSmsFlag, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback);
	void onSendDataSms(ref<link::java::array<jbyte>> data, jint subId, ref<java::lang::String> destAddress, jint destPort, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback);
	void onSendDataSms(ref<link::java::array<jbyte>> data, jint subId, ref<java::lang::String> destAddress, jint destPort, jint sendSmsFlag, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback);
	void onSendMultipartTextSms(ref<java::util::List> parts, jint subId, ref<java::lang::String> destAddress, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback);
	void onSendMultipartTextSms(ref<java::util::List> parts, jint subId, ref<java::lang::String> destAddress, jint sendSmsFlag, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback);
	void onSendMms(ref<android::net::Uri> pduUri, jint subId, ref<android::net::Uri> location, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback);
	void onDownloadMms(ref<android::net::Uri> contentUri, jint subId, ref<android::net::Uri> location, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback);
	ref<android::os::IBinder> onBind(ref<android::content::Intent> intent);

protected:

	CarrierMessagingService(handle_type h) : base_(h) {}

};

} // namespace android::service::carrier
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/android/service/carrier/CarrierMessagingService_ResultCallback.h>
#include <scapix/java_api/android/service/carrier/MessagePdu.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::service::carrier {

inline jint CarrierMessagingService::DOWNLOAD_STATUS_ERROR_() { return get_static_field<SCAPIX_META_STRING("DOWNLOAD_STATUS_ERROR"), jint>(); }
inline jint CarrierMessagingService::DOWNLOAD_STATUS_OK_() { return get_static_field<SCAPIX_META_STRING("DOWNLOAD_STATUS_OK"), jint>(); }
inline jint CarrierMessagingService::DOWNLOAD_STATUS_RETRY_ON_CARRIER_NETWORK_() { return get_static_field<SCAPIX_META_STRING("DOWNLOAD_STATUS_RETRY_ON_CARRIER_NETWORK"), jint>(); }
inline jint CarrierMessagingService::RECEIVE_OPTIONS_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("RECEIVE_OPTIONS_DEFAULT"), jint>(); }
inline jint CarrierMessagingService::RECEIVE_OPTIONS_DROP_() { return get_static_field<SCAPIX_META_STRING("RECEIVE_OPTIONS_DROP"), jint>(); }
inline jint CarrierMessagingService::RECEIVE_OPTIONS_SKIP_NOTIFY_WHEN_CREDENTIAL_PROTECTED_STORAGE_UNAVAILABLE_() { return get_static_field<SCAPIX_META_STRING("RECEIVE_OPTIONS_SKIP_NOTIFY_WHEN_CREDENTIAL_PROTECTED_STORAGE_UNAVAILABLE"), jint>(); }
inline jint CarrierMessagingService::SEND_FLAG_REQUEST_DELIVERY_STATUS_() { return get_static_field<SCAPIX_META_STRING("SEND_FLAG_REQUEST_DELIVERY_STATUS"), jint>(); }
inline jint CarrierMessagingService::SEND_STATUS_ERROR_() { return get_static_field<SCAPIX_META_STRING("SEND_STATUS_ERROR"), jint>(); }
inline jint CarrierMessagingService::SEND_STATUS_OK_() { return get_static_field<SCAPIX_META_STRING("SEND_STATUS_OK"), jint>(); }
inline jint CarrierMessagingService::SEND_STATUS_RETRY_ON_CARRIER_NETWORK_() { return get_static_field<SCAPIX_META_STRING("SEND_STATUS_RETRY_ON_CARRIER_NETWORK"), jint>(); }
inline ref<java::lang::String> CarrierMessagingService::SERVICE_INTERFACE_() { return get_static_field<SCAPIX_META_STRING("SERVICE_INTERFACE"), ref<java::lang::String>>(); }
inline ref<CarrierMessagingService> CarrierMessagingService::new_object() { return base_::new_object(); }
inline void CarrierMessagingService::onFilterSms(ref<android::service::carrier::MessagePdu> pdu, ref<java::lang::String> format, jint destPort, jint subId, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback) { return call_method<SCAPIX_META_STRING("onFilterSms"), void>(pdu, format, destPort, subId, callback); }
inline void CarrierMessagingService::onReceiveTextSms(ref<android::service::carrier::MessagePdu> pdu, ref<java::lang::String> format, jint destPort, jint subId, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback) { return call_method<SCAPIX_META_STRING("onReceiveTextSms"), void>(pdu, format, destPort, subId, callback); }
inline void CarrierMessagingService::onSendTextSms(ref<java::lang::String> text, jint subId, ref<java::lang::String> destAddress, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback) { return call_method<SCAPIX_META_STRING("onSendTextSms"), void>(text, subId, destAddress, callback); }
inline void CarrierMessagingService::onSendTextSms(ref<java::lang::String> text, jint subId, ref<java::lang::String> destAddress, jint sendSmsFlag, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback) { return call_method<SCAPIX_META_STRING("onSendTextSms"), void>(text, subId, destAddress, sendSmsFlag, callback); }
inline void CarrierMessagingService::onSendDataSms(ref<link::java::array<jbyte>> data, jint subId, ref<java::lang::String> destAddress, jint destPort, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback) { return call_method<SCAPIX_META_STRING("onSendDataSms"), void>(data, subId, destAddress, destPort, callback); }
inline void CarrierMessagingService::onSendDataSms(ref<link::java::array<jbyte>> data, jint subId, ref<java::lang::String> destAddress, jint destPort, jint sendSmsFlag, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback) { return call_method<SCAPIX_META_STRING("onSendDataSms"), void>(data, subId, destAddress, destPort, sendSmsFlag, callback); }
inline void CarrierMessagingService::onSendMultipartTextSms(ref<java::util::List> parts, jint subId, ref<java::lang::String> destAddress, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback) { return call_method<SCAPIX_META_STRING("onSendMultipartTextSms"), void>(parts, subId, destAddress, callback); }
inline void CarrierMessagingService::onSendMultipartTextSms(ref<java::util::List> parts, jint subId, ref<java::lang::String> destAddress, jint sendSmsFlag, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback) { return call_method<SCAPIX_META_STRING("onSendMultipartTextSms"), void>(parts, subId, destAddress, sendSmsFlag, callback); }
inline void CarrierMessagingService::onSendMms(ref<android::net::Uri> pduUri, jint subId, ref<android::net::Uri> location, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback) { return call_method<SCAPIX_META_STRING("onSendMms"), void>(pduUri, subId, location, callback); }
inline void CarrierMessagingService::onDownloadMms(ref<android::net::Uri> contentUri, jint subId, ref<android::net::Uri> location, ref<android::service::carrier::CarrierMessagingService_ResultCallback> callback) { return call_method<SCAPIX_META_STRING("onDownloadMms"), void>(contentUri, subId, location, callback); }
inline ref<android::os::IBinder> CarrierMessagingService::onBind(ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onBind"), ref<android::os::IBinder>>(intent); }

} // namespace android::service::carrier
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_SERVICE_CARRIER_CARRIERMESSAGINGSERVICE_H
