// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_SERVICE_VOICE_ALWAYSONHOTWORDDETECTOR_H
#define SCAPIX_ANDROID_SERVICE_VOICE_ALWAYSONHOTWORDDETECTOR_H

namespace scapix::java_api {

namespace android::content { class Intent; }
namespace android::service::voice { class AlwaysOnHotwordDetector_EventPayload; }
namespace android::service::voice { class AlwaysOnHotwordDetector_Callback; }

namespace android::service::voice {

class AlwaysOnHotwordDetector : public object_base<SCAPIX_META_STRING("android/service/voice/AlwaysOnHotwordDetector"),
	java::lang::Object>
{
public:

	using EventPayload = AlwaysOnHotwordDetector_EventPayload;
	using Callback = AlwaysOnHotwordDetector_Callback;

	static jint RECOGNITION_FLAG_ALLOW_MULTIPLE_TRIGGERS_();
	static jint RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO_();
	static jint RECOGNITION_MODE_USER_IDENTIFICATION_();
	static jint RECOGNITION_MODE_VOICE_TRIGGER_();
	static jint STATE_HARDWARE_UNAVAILABLE_();
	static jint STATE_KEYPHRASE_ENROLLED_();
	static jint STATE_KEYPHRASE_UNENROLLED_();
	static jint STATE_KEYPHRASE_UNSUPPORTED_();

	jint getSupportedRecognitionModes();
	jboolean startRecognition(jint recognitionFlags);
	jboolean stopRecognition();
	ref<android::content::Intent> createEnrollIntent();
	ref<android::content::Intent> createUnEnrollIntent();
	ref<android::content::Intent> createReEnrollIntent();

protected:

	AlwaysOnHotwordDetector(handle_type h) : base_(h) {}

};

} // namespace android::service::voice
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Intent.h>

namespace scapix::java_api {
namespace android::service::voice {

inline jint AlwaysOnHotwordDetector::RECOGNITION_FLAG_ALLOW_MULTIPLE_TRIGGERS_() { return get_static_field<SCAPIX_META_STRING("RECOGNITION_FLAG_ALLOW_MULTIPLE_TRIGGERS"), jint>(); }
inline jint AlwaysOnHotwordDetector::RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO_() { return get_static_field<SCAPIX_META_STRING("RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO"), jint>(); }
inline jint AlwaysOnHotwordDetector::RECOGNITION_MODE_USER_IDENTIFICATION_() { return get_static_field<SCAPIX_META_STRING("RECOGNITION_MODE_USER_IDENTIFICATION"), jint>(); }
inline jint AlwaysOnHotwordDetector::RECOGNITION_MODE_VOICE_TRIGGER_() { return get_static_field<SCAPIX_META_STRING("RECOGNITION_MODE_VOICE_TRIGGER"), jint>(); }
inline jint AlwaysOnHotwordDetector::STATE_HARDWARE_UNAVAILABLE_() { return get_static_field<SCAPIX_META_STRING("STATE_HARDWARE_UNAVAILABLE"), jint>(); }
inline jint AlwaysOnHotwordDetector::STATE_KEYPHRASE_ENROLLED_() { return get_static_field<SCAPIX_META_STRING("STATE_KEYPHRASE_ENROLLED"), jint>(); }
inline jint AlwaysOnHotwordDetector::STATE_KEYPHRASE_UNENROLLED_() { return get_static_field<SCAPIX_META_STRING("STATE_KEYPHRASE_UNENROLLED"), jint>(); }
inline jint AlwaysOnHotwordDetector::STATE_KEYPHRASE_UNSUPPORTED_() { return get_static_field<SCAPIX_META_STRING("STATE_KEYPHRASE_UNSUPPORTED"), jint>(); }
inline jint AlwaysOnHotwordDetector::getSupportedRecognitionModes() { return call_method<SCAPIX_META_STRING("getSupportedRecognitionModes"), jint>(); }
inline jboolean AlwaysOnHotwordDetector::startRecognition(jint recognitionFlags) { return call_method<SCAPIX_META_STRING("startRecognition"), jboolean>(recognitionFlags); }
inline jboolean AlwaysOnHotwordDetector::stopRecognition() { return call_method<SCAPIX_META_STRING("stopRecognition"), jboolean>(); }
inline ref<android::content::Intent> AlwaysOnHotwordDetector::createEnrollIntent() { return call_method<SCAPIX_META_STRING("createEnrollIntent"), ref<android::content::Intent>>(); }
inline ref<android::content::Intent> AlwaysOnHotwordDetector::createUnEnrollIntent() { return call_method<SCAPIX_META_STRING("createUnEnrollIntent"), ref<android::content::Intent>>(); }
inline ref<android::content::Intent> AlwaysOnHotwordDetector::createReEnrollIntent() { return call_method<SCAPIX_META_STRING("createReEnrollIntent"), ref<android::content::Intent>>(); }

} // namespace android::service::voice
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_SERVICE_VOICE_ALWAYSONHOTWORDDETECTOR_H
