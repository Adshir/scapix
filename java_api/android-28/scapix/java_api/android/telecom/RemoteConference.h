// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_TELECOM_REMOTECONFERENCE_H
#define SCAPIX_ANDROID_TELECOM_REMOTECONFERENCE_H

namespace scapix::java_api {

namespace android::os { class Bundle; }
namespace android::os { class Handler; }
namespace android::telecom { class CallAudioState; }
namespace android::telecom { class DisconnectCause; }
namespace android::telecom { class RemoteConference_Callback; }
namespace android::telecom { class RemoteConnection; }
namespace java::util { class List; }

namespace android::telecom {

class RemoteConference : public object_base<SCAPIX_META_STRING("android/telecom/RemoteConference"),
	java::lang::Object>
{
public:

	using Callback = RemoteConference_Callback;

	ref<java::util::List> getConnections();
	jint getState();
	jint getConnectionCapabilities();
	jint getConnectionProperties();
	ref<android::os::Bundle> getExtras();
	void disconnect();
	void separate(ref<android::telecom::RemoteConnection> connection);
	void merge();
	void swap();
	void hold();
	void unhold();
	ref<android::telecom::DisconnectCause> getDisconnectCause();
	void playDtmfTone(jchar digit);
	void stopDtmfTone();
	void setCallAudioState(ref<android::telecom::CallAudioState> state);
	ref<java::util::List> getConferenceableConnections();
	void registerCallback(ref<android::telecom::RemoteConference_Callback> callback);
	void registerCallback(ref<android::telecom::RemoteConference_Callback> callback, ref<android::os::Handler> handler);
	void unregisterCallback(ref<android::telecom::RemoteConference_Callback> callback);

protected:

	RemoteConference(handle_type h) : base_(h) {}

};

} // namespace android::telecom
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/telecom/CallAudioState.h>
#include <scapix/java_api/android/telecom/DisconnectCause.h>
#include <scapix/java_api/android/telecom/RemoteConference_Callback.h>
#include <scapix/java_api/android/telecom/RemoteConnection.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::telecom {

inline ref<java::util::List> RemoteConference::getConnections() { return call_method<SCAPIX_META_STRING("getConnections"), ref<java::util::List>>(); }
inline jint RemoteConference::getState() { return call_method<SCAPIX_META_STRING("getState"), jint>(); }
inline jint RemoteConference::getConnectionCapabilities() { return call_method<SCAPIX_META_STRING("getConnectionCapabilities"), jint>(); }
inline jint RemoteConference::getConnectionProperties() { return call_method<SCAPIX_META_STRING("getConnectionProperties"), jint>(); }
inline ref<android::os::Bundle> RemoteConference::getExtras() { return call_method<SCAPIX_META_STRING("getExtras"), ref<android::os::Bundle>>(); }
inline void RemoteConference::disconnect() { return call_method<SCAPIX_META_STRING("disconnect"), void>(); }
inline void RemoteConference::separate(ref<android::telecom::RemoteConnection> connection) { return call_method<SCAPIX_META_STRING("separate"), void>(connection); }
inline void RemoteConference::merge() { return call_method<SCAPIX_META_STRING("merge"), void>(); }
inline void RemoteConference::swap() { return call_method<SCAPIX_META_STRING("swap"), void>(); }
inline void RemoteConference::hold() { return call_method<SCAPIX_META_STRING("hold"), void>(); }
inline void RemoteConference::unhold() { return call_method<SCAPIX_META_STRING("unhold"), void>(); }
inline ref<android::telecom::DisconnectCause> RemoteConference::getDisconnectCause() { return call_method<SCAPIX_META_STRING("getDisconnectCause"), ref<android::telecom::DisconnectCause>>(); }
inline void RemoteConference::playDtmfTone(jchar digit) { return call_method<SCAPIX_META_STRING("playDtmfTone"), void>(digit); }
inline void RemoteConference::stopDtmfTone() { return call_method<SCAPIX_META_STRING("stopDtmfTone"), void>(); }
inline void RemoteConference::setCallAudioState(ref<android::telecom::CallAudioState> state) { return call_method<SCAPIX_META_STRING("setCallAudioState"), void>(state); }
inline ref<java::util::List> RemoteConference::getConferenceableConnections() { return call_method<SCAPIX_META_STRING("getConferenceableConnections"), ref<java::util::List>>(); }
inline void RemoteConference::registerCallback(ref<android::telecom::RemoteConference_Callback> callback) { return call_method<SCAPIX_META_STRING("registerCallback"), void>(callback); }
inline void RemoteConference::registerCallback(ref<android::telecom::RemoteConference_Callback> callback, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("registerCallback"), void>(callback, handler); }
inline void RemoteConference::unregisterCallback(ref<android::telecom::RemoteConference_Callback> callback) { return call_method<SCAPIX_META_STRING("unregisterCallback"), void>(callback); }

} // namespace android::telecom
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TELECOM_REMOTECONFERENCE_H
