// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_TELECOM_PHONEACCOUNTHANDLE_H
#define SCAPIX_ANDROID_TELECOM_PHONEACCOUNTHANDLE_H

namespace scapix::java_api {

namespace android::content { class ComponentName; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::os { class UserHandle; }
namespace java::lang { class String; }

namespace android::telecom {

class PhoneAccountHandle : public object_base<SCAPIX_META_STRING("android/telecom/PhoneAccountHandle"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();

	static ref<PhoneAccountHandle> new_object(ref<android::content::ComponentName> componentName, ref<java::lang::String> id);
	static ref<PhoneAccountHandle> new_object(ref<android::content::ComponentName> componentName, ref<java::lang::String> id, ref<android::os::UserHandle> userHandle);
	ref<android::content::ComponentName> getComponentName();
	ref<java::lang::String> getId();
	ref<android::os::UserHandle> getUserHandle();
	jint hashCode();
	ref<java::lang::String> toString();
	jboolean equals(ref<java::lang::Object> other);
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint flags);

protected:

	PhoneAccountHandle(handle_type h) : base_(h) {}

};

} // namespace android::telecom
} // namespace scapix::java_api

#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/os/UserHandle.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::telecom {

inline ref<android::os::Parcelable_Creator> PhoneAccountHandle::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<PhoneAccountHandle> PhoneAccountHandle::new_object(ref<android::content::ComponentName> componentName, ref<java::lang::String> id) { return base_::new_object(componentName, id); }
inline ref<PhoneAccountHandle> PhoneAccountHandle::new_object(ref<android::content::ComponentName> componentName, ref<java::lang::String> id, ref<android::os::UserHandle> userHandle) { return base_::new_object(componentName, id, userHandle); }
inline ref<android::content::ComponentName> PhoneAccountHandle::getComponentName() { return call_method<SCAPIX_META_STRING("getComponentName"), ref<android::content::ComponentName>>(); }
inline ref<java::lang::String> PhoneAccountHandle::getId() { return call_method<SCAPIX_META_STRING("getId"), ref<java::lang::String>>(); }
inline ref<android::os::UserHandle> PhoneAccountHandle::getUserHandle() { return call_method<SCAPIX_META_STRING("getUserHandle"), ref<android::os::UserHandle>>(); }
inline jint PhoneAccountHandle::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> PhoneAccountHandle::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean PhoneAccountHandle::equals(ref<java::lang::Object> other) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(other); }
inline jint PhoneAccountHandle::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void PhoneAccountHandle::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }

} // namespace android::telecom
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TELECOM_PHONEACCOUNTHANDLE_H
