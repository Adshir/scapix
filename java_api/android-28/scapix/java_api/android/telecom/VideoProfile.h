// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_TELECOM_VIDEOPROFILE_H
#define SCAPIX_ANDROID_TELECOM_VIDEOPROFILE_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }
namespace android::telecom { class VideoProfile_CameraCapabilities; }

namespace android::telecom {

class VideoProfile : public object_base<SCAPIX_META_STRING("android/telecom/VideoProfile"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using CameraCapabilities = VideoProfile_CameraCapabilities;

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint QUALITY_DEFAULT_();
	static jint QUALITY_HIGH_();
	static jint QUALITY_LOW_();
	static jint QUALITY_MEDIUM_();
	static jint STATE_AUDIO_ONLY_();
	static jint STATE_BIDIRECTIONAL_();
	static jint STATE_PAUSED_();
	static jint STATE_RX_ENABLED_();
	static jint STATE_TX_ENABLED_();

	static ref<VideoProfile> new_object(jint videoState);
	static ref<VideoProfile> new_object(jint videoState, jint quality);
	jint getVideoState();
	jint getQuality();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	ref<java::lang::String> toString();
	static ref<java::lang::String> videoStateToString(jint videoState);
	static jboolean isAudioOnly(jint videoState);
	static jboolean isVideo(jint videoState);
	static jboolean isTransmissionEnabled(jint videoState);
	static jboolean isReceptionEnabled(jint videoState);
	static jboolean isBidirectional(jint videoState);
	static jboolean isPaused(jint videoState);

protected:

	VideoProfile(handle_type h) : base_(h) {}

};

} // namespace android::telecom
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::telecom {

inline ref<android::os::Parcelable_Creator> VideoProfile::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint VideoProfile::QUALITY_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("QUALITY_DEFAULT"), jint>(); }
inline jint VideoProfile::QUALITY_HIGH_() { return get_static_field<SCAPIX_META_STRING("QUALITY_HIGH"), jint>(); }
inline jint VideoProfile::QUALITY_LOW_() { return get_static_field<SCAPIX_META_STRING("QUALITY_LOW"), jint>(); }
inline jint VideoProfile::QUALITY_MEDIUM_() { return get_static_field<SCAPIX_META_STRING("QUALITY_MEDIUM"), jint>(); }
inline jint VideoProfile::STATE_AUDIO_ONLY_() { return get_static_field<SCAPIX_META_STRING("STATE_AUDIO_ONLY"), jint>(); }
inline jint VideoProfile::STATE_BIDIRECTIONAL_() { return get_static_field<SCAPIX_META_STRING("STATE_BIDIRECTIONAL"), jint>(); }
inline jint VideoProfile::STATE_PAUSED_() { return get_static_field<SCAPIX_META_STRING("STATE_PAUSED"), jint>(); }
inline jint VideoProfile::STATE_RX_ENABLED_() { return get_static_field<SCAPIX_META_STRING("STATE_RX_ENABLED"), jint>(); }
inline jint VideoProfile::STATE_TX_ENABLED_() { return get_static_field<SCAPIX_META_STRING("STATE_TX_ENABLED"), jint>(); }
inline ref<VideoProfile> VideoProfile::new_object(jint videoState) { return base_::new_object(videoState); }
inline ref<VideoProfile> VideoProfile::new_object(jint videoState, jint quality) { return base_::new_object(videoState, quality); }
inline jint VideoProfile::getVideoState() { return call_method<SCAPIX_META_STRING("getVideoState"), jint>(); }
inline jint VideoProfile::getQuality() { return call_method<SCAPIX_META_STRING("getQuality"), jint>(); }
inline jint VideoProfile::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void VideoProfile::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline ref<java::lang::String> VideoProfile::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> VideoProfile::videoStateToString(jint videoState) { return call_static_method<SCAPIX_META_STRING("videoStateToString"), ref<java::lang::String>>(videoState); }
inline jboolean VideoProfile::isAudioOnly(jint videoState) { return call_static_method<SCAPIX_META_STRING("isAudioOnly"), jboolean>(videoState); }
inline jboolean VideoProfile::isVideo(jint videoState) { return call_static_method<SCAPIX_META_STRING("isVideo"), jboolean>(videoState); }
inline jboolean VideoProfile::isTransmissionEnabled(jint videoState) { return call_static_method<SCAPIX_META_STRING("isTransmissionEnabled"), jboolean>(videoState); }
inline jboolean VideoProfile::isReceptionEnabled(jint videoState) { return call_static_method<SCAPIX_META_STRING("isReceptionEnabled"), jboolean>(videoState); }
inline jboolean VideoProfile::isBidirectional(jint videoState) { return call_static_method<SCAPIX_META_STRING("isBidirectional"), jboolean>(videoState); }
inline jboolean VideoProfile::isPaused(jint videoState) { return call_static_method<SCAPIX_META_STRING("isPaused"), jboolean>(videoState); }

} // namespace android::telecom
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TELECOM_VIDEOPROFILE_H
