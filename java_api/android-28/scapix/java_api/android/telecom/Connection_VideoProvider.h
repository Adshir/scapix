// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_TELECOM_CONNECTION_VIDEOPROVIDER_H
#define SCAPIX_ANDROID_TELECOM_CONNECTION_VIDEOPROVIDER_H

namespace scapix::java_api {

namespace android::net { class Uri; }
namespace android::telecom { class VideoProfile; }
namespace android::telecom { class VideoProfile_CameraCapabilities; }
namespace android::view { class Surface; }
namespace java::lang { class String; }

namespace android::telecom {

class Connection_VideoProvider : public object_base<SCAPIX_META_STRING("android/telecom/Connection$VideoProvider"),
	java::lang::Object>
{
public:

	static jint SESSION_EVENT_CAMERA_FAILURE_();
	static jint SESSION_EVENT_CAMERA_PERMISSION_ERROR_();
	static jint SESSION_EVENT_CAMERA_READY_();
	static jint SESSION_EVENT_RX_PAUSE_();
	static jint SESSION_EVENT_RX_RESUME_();
	static jint SESSION_EVENT_TX_START_();
	static jint SESSION_EVENT_TX_STOP_();
	static jint SESSION_MODIFY_REQUEST_FAIL_();
	static jint SESSION_MODIFY_REQUEST_INVALID_();
	static jint SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE_();
	static jint SESSION_MODIFY_REQUEST_SUCCESS_();
	static jint SESSION_MODIFY_REQUEST_TIMED_OUT_();

	static ref<Connection_VideoProvider> new_object();
	void onSetCamera(ref<java::lang::String> p1);
	void onSetPreviewSurface(ref<android::view::Surface> p1);
	void onSetDisplaySurface(ref<android::view::Surface> p1);
	void onSetDeviceOrientation(jint p1);
	void onSetZoom(jfloat p1);
	void onSendSessionModifyRequest(ref<android::telecom::VideoProfile> p1, ref<android::telecom::VideoProfile> p2);
	void onSendSessionModifyResponse(ref<android::telecom::VideoProfile> p1);
	void onRequestCameraCapabilities();
	void onRequestConnectionDataUsage();
	void onSetPauseImage(ref<android::net::Uri> p1);
	void receiveSessionModifyRequest(ref<android::telecom::VideoProfile> videoProfile);
	void receiveSessionModifyResponse(jint status, ref<android::telecom::VideoProfile> requestedProfile, ref<android::telecom::VideoProfile> responseProfile);
	void handleCallSessionEvent(jint event);
	void changePeerDimensions(jint width, jint height);
	void setCallDataUsage(jlong dataUsage);
	void changeCameraCapabilities(ref<android::telecom::VideoProfile_CameraCapabilities> cameraCapabilities);
	void changeVideoQuality(jint videoQuality);

protected:

	Connection_VideoProvider(handle_type h) : base_(h) {}

};

} // namespace android::telecom
} // namespace scapix::java_api

#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/telecom/VideoProfile.h>
#include <scapix/java_api/android/telecom/VideoProfile_CameraCapabilities.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::telecom {

inline jint Connection_VideoProvider::SESSION_EVENT_CAMERA_FAILURE_() { return get_static_field<SCAPIX_META_STRING("SESSION_EVENT_CAMERA_FAILURE"), jint>(); }
inline jint Connection_VideoProvider::SESSION_EVENT_CAMERA_PERMISSION_ERROR_() { return get_static_field<SCAPIX_META_STRING("SESSION_EVENT_CAMERA_PERMISSION_ERROR"), jint>(); }
inline jint Connection_VideoProvider::SESSION_EVENT_CAMERA_READY_() { return get_static_field<SCAPIX_META_STRING("SESSION_EVENT_CAMERA_READY"), jint>(); }
inline jint Connection_VideoProvider::SESSION_EVENT_RX_PAUSE_() { return get_static_field<SCAPIX_META_STRING("SESSION_EVENT_RX_PAUSE"), jint>(); }
inline jint Connection_VideoProvider::SESSION_EVENT_RX_RESUME_() { return get_static_field<SCAPIX_META_STRING("SESSION_EVENT_RX_RESUME"), jint>(); }
inline jint Connection_VideoProvider::SESSION_EVENT_TX_START_() { return get_static_field<SCAPIX_META_STRING("SESSION_EVENT_TX_START"), jint>(); }
inline jint Connection_VideoProvider::SESSION_EVENT_TX_STOP_() { return get_static_field<SCAPIX_META_STRING("SESSION_EVENT_TX_STOP"), jint>(); }
inline jint Connection_VideoProvider::SESSION_MODIFY_REQUEST_FAIL_() { return get_static_field<SCAPIX_META_STRING("SESSION_MODIFY_REQUEST_FAIL"), jint>(); }
inline jint Connection_VideoProvider::SESSION_MODIFY_REQUEST_INVALID_() { return get_static_field<SCAPIX_META_STRING("SESSION_MODIFY_REQUEST_INVALID"), jint>(); }
inline jint Connection_VideoProvider::SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE_() { return get_static_field<SCAPIX_META_STRING("SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE"), jint>(); }
inline jint Connection_VideoProvider::SESSION_MODIFY_REQUEST_SUCCESS_() { return get_static_field<SCAPIX_META_STRING("SESSION_MODIFY_REQUEST_SUCCESS"), jint>(); }
inline jint Connection_VideoProvider::SESSION_MODIFY_REQUEST_TIMED_OUT_() { return get_static_field<SCAPIX_META_STRING("SESSION_MODIFY_REQUEST_TIMED_OUT"), jint>(); }
inline ref<Connection_VideoProvider> Connection_VideoProvider::new_object() { return base_::new_object(); }
inline void Connection_VideoProvider::onSetCamera(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("onSetCamera"), void>(p1); }
inline void Connection_VideoProvider::onSetPreviewSurface(ref<android::view::Surface> p1) { return call_method<SCAPIX_META_STRING("onSetPreviewSurface"), void>(p1); }
inline void Connection_VideoProvider::onSetDisplaySurface(ref<android::view::Surface> p1) { return call_method<SCAPIX_META_STRING("onSetDisplaySurface"), void>(p1); }
inline void Connection_VideoProvider::onSetDeviceOrientation(jint p1) { return call_method<SCAPIX_META_STRING("onSetDeviceOrientation"), void>(p1); }
inline void Connection_VideoProvider::onSetZoom(jfloat p1) { return call_method<SCAPIX_META_STRING("onSetZoom"), void>(p1); }
inline void Connection_VideoProvider::onSendSessionModifyRequest(ref<android::telecom::VideoProfile> p1, ref<android::telecom::VideoProfile> p2) { return call_method<SCAPIX_META_STRING("onSendSessionModifyRequest"), void>(p1, p2); }
inline void Connection_VideoProvider::onSendSessionModifyResponse(ref<android::telecom::VideoProfile> p1) { return call_method<SCAPIX_META_STRING("onSendSessionModifyResponse"), void>(p1); }
inline void Connection_VideoProvider::onRequestCameraCapabilities() { return call_method<SCAPIX_META_STRING("onRequestCameraCapabilities"), void>(); }
inline void Connection_VideoProvider::onRequestConnectionDataUsage() { return call_method<SCAPIX_META_STRING("onRequestConnectionDataUsage"), void>(); }
inline void Connection_VideoProvider::onSetPauseImage(ref<android::net::Uri> p1) { return call_method<SCAPIX_META_STRING("onSetPauseImage"), void>(p1); }
inline void Connection_VideoProvider::receiveSessionModifyRequest(ref<android::telecom::VideoProfile> videoProfile) { return call_method<SCAPIX_META_STRING("receiveSessionModifyRequest"), void>(videoProfile); }
inline void Connection_VideoProvider::receiveSessionModifyResponse(jint status, ref<android::telecom::VideoProfile> requestedProfile, ref<android::telecom::VideoProfile> responseProfile) { return call_method<SCAPIX_META_STRING("receiveSessionModifyResponse"), void>(status, requestedProfile, responseProfile); }
inline void Connection_VideoProvider::handleCallSessionEvent(jint event) { return call_method<SCAPIX_META_STRING("handleCallSessionEvent"), void>(event); }
inline void Connection_VideoProvider::changePeerDimensions(jint width, jint height) { return call_method<SCAPIX_META_STRING("changePeerDimensions"), void>(width, height); }
inline void Connection_VideoProvider::setCallDataUsage(jlong dataUsage) { return call_method<SCAPIX_META_STRING("setCallDataUsage"), void>(dataUsage); }
inline void Connection_VideoProvider::changeCameraCapabilities(ref<android::telecom::VideoProfile_CameraCapabilities> cameraCapabilities) { return call_method<SCAPIX_META_STRING("changeCameraCapabilities"), void>(cameraCapabilities); }
inline void Connection_VideoProvider::changeVideoQuality(jint videoQuality) { return call_method<SCAPIX_META_STRING("changeVideoQuality"), void>(videoQuality); }

} // namespace android::telecom
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TELECOM_CONNECTION_VIDEOPROVIDER_H
