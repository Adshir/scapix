// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_TELECOM_REMOTECONNECTION_H
#define SCAPIX_ANDROID_TELECOM_REMOTECONNECTION_H

namespace scapix::java_api {

namespace android::net { class Uri; }
namespace android::os { class Bundle; }
namespace android::os { class Handler; }
namespace android::telecom { class CallAudioState; }
namespace android::telecom { class DisconnectCause; }
namespace android::telecom { class RemoteConference; }
namespace android::telecom { class RemoteConnection_Callback; }
namespace android::telecom { class RemoteConnection_VideoProvider; }
namespace android::telecom { class StatusHints; }
namespace java::lang { class CharSequence; }
namespace java::util { class List; }

namespace android::telecom {

class RemoteConnection : public object_base<SCAPIX_META_STRING("android/telecom/RemoteConnection"),
	java::lang::Object>
{
public:

	using VideoProvider = RemoteConnection_VideoProvider;
	using Callback = RemoteConnection_Callback;

	void registerCallback(ref<android::telecom::RemoteConnection_Callback> callback);
	void registerCallback(ref<android::telecom::RemoteConnection_Callback> callback, ref<android::os::Handler> handler);
	void unregisterCallback(ref<android::telecom::RemoteConnection_Callback> callback);
	jint getState();
	ref<android::telecom::DisconnectCause> getDisconnectCause();
	jint getConnectionCapabilities();
	jint getConnectionProperties();
	jboolean isVoipAudioMode();
	ref<android::telecom::StatusHints> getStatusHints();
	ref<android::net::Uri> getAddress();
	jint getAddressPresentation();
	ref<java::lang::CharSequence> getCallerDisplayName();
	jint getCallerDisplayNamePresentation();
	jint getVideoState();
	ref<android::telecom::RemoteConnection_VideoProvider> getVideoProvider();
	ref<android::os::Bundle> getExtras();
	jboolean isRingbackRequested();
	void abort();
	void answer();
	void reject();
	void hold();
	void unhold();
	void disconnect();
	void playDtmfTone(jchar digit);
	void stopDtmfTone();
	void postDialContinue(jboolean proceed);
	void pullExternalCall();
	void setCallAudioState(ref<android::telecom::CallAudioState> state);
	ref<java::util::List> getConferenceableConnections();
	ref<android::telecom::RemoteConference> getConference();

protected:

	RemoteConnection(handle_type h) : base_(h) {}

};

} // namespace android::telecom
} // namespace scapix::java_api

#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/telecom/CallAudioState.h>
#include <scapix/java_api/android/telecom/DisconnectCause.h>
#include <scapix/java_api/android/telecom/RemoteConference.h>
#include <scapix/java_api/android/telecom/RemoteConnection_Callback.h>
#include <scapix/java_api/android/telecom/RemoteConnection_VideoProvider.h>
#include <scapix/java_api/android/telecom/StatusHints.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::telecom {

inline void RemoteConnection::registerCallback(ref<android::telecom::RemoteConnection_Callback> callback) { return call_method<SCAPIX_META_STRING("registerCallback"), void>(callback); }
inline void RemoteConnection::registerCallback(ref<android::telecom::RemoteConnection_Callback> callback, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("registerCallback"), void>(callback, handler); }
inline void RemoteConnection::unregisterCallback(ref<android::telecom::RemoteConnection_Callback> callback) { return call_method<SCAPIX_META_STRING("unregisterCallback"), void>(callback); }
inline jint RemoteConnection::getState() { return call_method<SCAPIX_META_STRING("getState"), jint>(); }
inline ref<android::telecom::DisconnectCause> RemoteConnection::getDisconnectCause() { return call_method<SCAPIX_META_STRING("getDisconnectCause"), ref<android::telecom::DisconnectCause>>(); }
inline jint RemoteConnection::getConnectionCapabilities() { return call_method<SCAPIX_META_STRING("getConnectionCapabilities"), jint>(); }
inline jint RemoteConnection::getConnectionProperties() { return call_method<SCAPIX_META_STRING("getConnectionProperties"), jint>(); }
inline jboolean RemoteConnection::isVoipAudioMode() { return call_method<SCAPIX_META_STRING("isVoipAudioMode"), jboolean>(); }
inline ref<android::telecom::StatusHints> RemoteConnection::getStatusHints() { return call_method<SCAPIX_META_STRING("getStatusHints"), ref<android::telecom::StatusHints>>(); }
inline ref<android::net::Uri> RemoteConnection::getAddress() { return call_method<SCAPIX_META_STRING("getAddress"), ref<android::net::Uri>>(); }
inline jint RemoteConnection::getAddressPresentation() { return call_method<SCAPIX_META_STRING("getAddressPresentation"), jint>(); }
inline ref<java::lang::CharSequence> RemoteConnection::getCallerDisplayName() { return call_method<SCAPIX_META_STRING("getCallerDisplayName"), ref<java::lang::CharSequence>>(); }
inline jint RemoteConnection::getCallerDisplayNamePresentation() { return call_method<SCAPIX_META_STRING("getCallerDisplayNamePresentation"), jint>(); }
inline jint RemoteConnection::getVideoState() { return call_method<SCAPIX_META_STRING("getVideoState"), jint>(); }
inline ref<android::telecom::RemoteConnection_VideoProvider> RemoteConnection::getVideoProvider() { return call_method<SCAPIX_META_STRING("getVideoProvider"), ref<android::telecom::RemoteConnection_VideoProvider>>(); }
inline ref<android::os::Bundle> RemoteConnection::getExtras() { return call_method<SCAPIX_META_STRING("getExtras"), ref<android::os::Bundle>>(); }
inline jboolean RemoteConnection::isRingbackRequested() { return call_method<SCAPIX_META_STRING("isRingbackRequested"), jboolean>(); }
inline void RemoteConnection::abort() { return call_method<SCAPIX_META_STRING("abort"), void>(); }
inline void RemoteConnection::answer() { return call_method<SCAPIX_META_STRING("answer"), void>(); }
inline void RemoteConnection::reject() { return call_method<SCAPIX_META_STRING("reject"), void>(); }
inline void RemoteConnection::hold() { return call_method<SCAPIX_META_STRING("hold"), void>(); }
inline void RemoteConnection::unhold() { return call_method<SCAPIX_META_STRING("unhold"), void>(); }
inline void RemoteConnection::disconnect() { return call_method<SCAPIX_META_STRING("disconnect"), void>(); }
inline void RemoteConnection::playDtmfTone(jchar digit) { return call_method<SCAPIX_META_STRING("playDtmfTone"), void>(digit); }
inline void RemoteConnection::stopDtmfTone() { return call_method<SCAPIX_META_STRING("stopDtmfTone"), void>(); }
inline void RemoteConnection::postDialContinue(jboolean proceed) { return call_method<SCAPIX_META_STRING("postDialContinue"), void>(proceed); }
inline void RemoteConnection::pullExternalCall() { return call_method<SCAPIX_META_STRING("pullExternalCall"), void>(); }
inline void RemoteConnection::setCallAudioState(ref<android::telecom::CallAudioState> state) { return call_method<SCAPIX_META_STRING("setCallAudioState"), void>(state); }
inline ref<java::util::List> RemoteConnection::getConferenceableConnections() { return call_method<SCAPIX_META_STRING("getConferenceableConnections"), ref<java::util::List>>(); }
inline ref<android::telecom::RemoteConference> RemoteConnection::getConference() { return call_method<SCAPIX_META_STRING("getConference"), ref<android::telecom::RemoteConference>>(); }

} // namespace android::telecom
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TELECOM_REMOTECONNECTION_H
