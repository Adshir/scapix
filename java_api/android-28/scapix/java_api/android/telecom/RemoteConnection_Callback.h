// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_TELECOM_REMOTECONNECTION_CALLBACK_H
#define SCAPIX_ANDROID_TELECOM_REMOTECONNECTION_CALLBACK_H

namespace scapix::java_api {

namespace android::net { class Uri; }
namespace android::os { class Bundle; }
namespace android::telecom { class DisconnectCause; }
namespace android::telecom { class RemoteConference; }
namespace android::telecom { class RemoteConnection; }
namespace android::telecom { class RemoteConnection_VideoProvider; }
namespace android::telecom { class StatusHints; }
namespace java::lang { class String; }
namespace java::util { class List; }

namespace android::telecom {

class RemoteConnection_Callback : public object_base<SCAPIX_META_STRING("android/telecom/RemoteConnection$Callback"),
	java::lang::Object>
{
public:

	static ref<RemoteConnection_Callback> new_object();
	void onStateChanged(ref<android::telecom::RemoteConnection> connection, jint state);
	void onDisconnected(ref<android::telecom::RemoteConnection> connection, ref<android::telecom::DisconnectCause> disconnectCause);
	void onRingbackRequested(ref<android::telecom::RemoteConnection> connection, jboolean ringback);
	void onConnectionCapabilitiesChanged(ref<android::telecom::RemoteConnection> connection, jint connectionCapabilities);
	void onConnectionPropertiesChanged(ref<android::telecom::RemoteConnection> connection, jint connectionProperties);
	void onPostDialWait(ref<android::telecom::RemoteConnection> connection, ref<java::lang::String> remainingPostDialSequence);
	void onPostDialChar(ref<android::telecom::RemoteConnection> connection, jchar nextChar);
	void onVoipAudioChanged(ref<android::telecom::RemoteConnection> connection, jboolean isVoip);
	void onStatusHintsChanged(ref<android::telecom::RemoteConnection> connection, ref<android::telecom::StatusHints> statusHints);
	void onAddressChanged(ref<android::telecom::RemoteConnection> connection, ref<android::net::Uri> address, jint presentation);
	void onCallerDisplayNameChanged(ref<android::telecom::RemoteConnection> connection, ref<java::lang::String> callerDisplayName, jint presentation);
	void onVideoStateChanged(ref<android::telecom::RemoteConnection> connection, jint videoState);
	void onDestroyed(ref<android::telecom::RemoteConnection> connection);
	void onConferenceableConnectionsChanged(ref<android::telecom::RemoteConnection> connection, ref<java::util::List> conferenceableConnections);
	void onVideoProviderChanged(ref<android::telecom::RemoteConnection> connection, ref<android::telecom::RemoteConnection_VideoProvider> videoProvider);
	void onConferenceChanged(ref<android::telecom::RemoteConnection> connection, ref<android::telecom::RemoteConference> conference);
	void onExtrasChanged(ref<android::telecom::RemoteConnection> connection, ref<android::os::Bundle> extras);
	void onConnectionEvent(ref<android::telecom::RemoteConnection> connection, ref<java::lang::String> event, ref<android::os::Bundle> extras);

protected:

	RemoteConnection_Callback(handle_type h) : base_(h) {}

};

} // namespace android::telecom
} // namespace scapix::java_api

#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/telecom/DisconnectCause.h>
#include <scapix/java_api/android/telecom/RemoteConference.h>
#include <scapix/java_api/android/telecom/RemoteConnection.h>
#include <scapix/java_api/android/telecom/RemoteConnection_VideoProvider.h>
#include <scapix/java_api/android/telecom/StatusHints.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::telecom {

inline ref<RemoteConnection_Callback> RemoteConnection_Callback::new_object() { return base_::new_object(); }
inline void RemoteConnection_Callback::onStateChanged(ref<android::telecom::RemoteConnection> connection, jint state) { return call_method<SCAPIX_META_STRING("onStateChanged"), void>(connection, state); }
inline void RemoteConnection_Callback::onDisconnected(ref<android::telecom::RemoteConnection> connection, ref<android::telecom::DisconnectCause> disconnectCause) { return call_method<SCAPIX_META_STRING("onDisconnected"), void>(connection, disconnectCause); }
inline void RemoteConnection_Callback::onRingbackRequested(ref<android::telecom::RemoteConnection> connection, jboolean ringback) { return call_method<SCAPIX_META_STRING("onRingbackRequested"), void>(connection, ringback); }
inline void RemoteConnection_Callback::onConnectionCapabilitiesChanged(ref<android::telecom::RemoteConnection> connection, jint connectionCapabilities) { return call_method<SCAPIX_META_STRING("onConnectionCapabilitiesChanged"), void>(connection, connectionCapabilities); }
inline void RemoteConnection_Callback::onConnectionPropertiesChanged(ref<android::telecom::RemoteConnection> connection, jint connectionProperties) { return call_method<SCAPIX_META_STRING("onConnectionPropertiesChanged"), void>(connection, connectionProperties); }
inline void RemoteConnection_Callback::onPostDialWait(ref<android::telecom::RemoteConnection> connection, ref<java::lang::String> remainingPostDialSequence) { return call_method<SCAPIX_META_STRING("onPostDialWait"), void>(connection, remainingPostDialSequence); }
inline void RemoteConnection_Callback::onPostDialChar(ref<android::telecom::RemoteConnection> connection, jchar nextChar) { return call_method<SCAPIX_META_STRING("onPostDialChar"), void>(connection, nextChar); }
inline void RemoteConnection_Callback::onVoipAudioChanged(ref<android::telecom::RemoteConnection> connection, jboolean isVoip) { return call_method<SCAPIX_META_STRING("onVoipAudioChanged"), void>(connection, isVoip); }
inline void RemoteConnection_Callback::onStatusHintsChanged(ref<android::telecom::RemoteConnection> connection, ref<android::telecom::StatusHints> statusHints) { return call_method<SCAPIX_META_STRING("onStatusHintsChanged"), void>(connection, statusHints); }
inline void RemoteConnection_Callback::onAddressChanged(ref<android::telecom::RemoteConnection> connection, ref<android::net::Uri> address, jint presentation) { return call_method<SCAPIX_META_STRING("onAddressChanged"), void>(connection, address, presentation); }
inline void RemoteConnection_Callback::onCallerDisplayNameChanged(ref<android::telecom::RemoteConnection> connection, ref<java::lang::String> callerDisplayName, jint presentation) { return call_method<SCAPIX_META_STRING("onCallerDisplayNameChanged"), void>(connection, callerDisplayName, presentation); }
inline void RemoteConnection_Callback::onVideoStateChanged(ref<android::telecom::RemoteConnection> connection, jint videoState) { return call_method<SCAPIX_META_STRING("onVideoStateChanged"), void>(connection, videoState); }
inline void RemoteConnection_Callback::onDestroyed(ref<android::telecom::RemoteConnection> connection) { return call_method<SCAPIX_META_STRING("onDestroyed"), void>(connection); }
inline void RemoteConnection_Callback::onConferenceableConnectionsChanged(ref<android::telecom::RemoteConnection> connection, ref<java::util::List> conferenceableConnections) { return call_method<SCAPIX_META_STRING("onConferenceableConnectionsChanged"), void>(connection, conferenceableConnections); }
inline void RemoteConnection_Callback::onVideoProviderChanged(ref<android::telecom::RemoteConnection> connection, ref<android::telecom::RemoteConnection_VideoProvider> videoProvider) { return call_method<SCAPIX_META_STRING("onVideoProviderChanged"), void>(connection, videoProvider); }
inline void RemoteConnection_Callback::onConferenceChanged(ref<android::telecom::RemoteConnection> connection, ref<android::telecom::RemoteConference> conference) { return call_method<SCAPIX_META_STRING("onConferenceChanged"), void>(connection, conference); }
inline void RemoteConnection_Callback::onExtrasChanged(ref<android::telecom::RemoteConnection> connection, ref<android::os::Bundle> extras) { return call_method<SCAPIX_META_STRING("onExtrasChanged"), void>(connection, extras); }
inline void RemoteConnection_Callback::onConnectionEvent(ref<android::telecom::RemoteConnection> connection, ref<java::lang::String> event, ref<android::os::Bundle> extras) { return call_method<SCAPIX_META_STRING("onConnectionEvent"), void>(connection, event, extras); }

} // namespace android::telecom
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TELECOM_REMOTECONNECTION_CALLBACK_H
