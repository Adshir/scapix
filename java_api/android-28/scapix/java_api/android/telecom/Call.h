// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_TELECOM_CALL_H
#define SCAPIX_ANDROID_TELECOM_CALL_H

namespace scapix::java_api {

namespace android::net { class Uri; }
namespace android::os { class Bundle; }
namespace android::os { class Handler; }
namespace android::telecom { class Call_Callback; }
namespace android::telecom { class Call_Details; }
namespace android::telecom { class Call_RttCall; }
namespace android::telecom { class InCallService_VideoCall; }
namespace android::telecom { class PhoneAccountHandle; }
namespace java::lang { class String; }
namespace java::util { class List; }

namespace android::telecom {

class Call : public object_base<SCAPIX_META_STRING("android/telecom/Call"),
	java::lang::Object>
{
public:

	using RttCall = Call_RttCall;
	using Details = Call_Details;
	using Callback = Call_Callback;

	static ref<java::lang::String> AVAILABLE_PHONE_ACCOUNTS_();
	static ref<java::lang::String> EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLIS_();
	static jint STATE_ACTIVE_();
	static jint STATE_CONNECTING_();
	static jint STATE_DIALING_();
	static jint STATE_DISCONNECTED_();
	static jint STATE_DISCONNECTING_();
	static jint STATE_HOLDING_();
	static jint STATE_NEW_();
	static jint STATE_PULLING_CALL_();
	static jint STATE_RINGING_();
	static jint STATE_SELECT_PHONE_ACCOUNT_();

	ref<java::lang::String> getRemainingPostDialSequence();
	void answer(jint videoState);
	void deflect(ref<android::net::Uri> address);
	void reject(jboolean rejectWithMessage, ref<java::lang::String> textMessage);
	void disconnect();
	void hold();
	void unhold();
	void playDtmfTone(jchar digit);
	void stopDtmfTone();
	void postDialContinue(jboolean proceed);
	void phoneAccountSelected(ref<android::telecom::PhoneAccountHandle> accountHandle, jboolean setDefault);
	void conference(ref<android::telecom::Call> callToConferenceWith);
	void splitFromConference();
	void mergeConference();
	void swapConference();
	void pullExternalCall();
	void sendCallEvent(ref<java::lang::String> event, ref<android::os::Bundle> extras);
	void sendRttRequest();
	void respondToRttRequest(jint id, jboolean accept);
	void handoverTo(ref<android::telecom::PhoneAccountHandle> toHandle, jint videoState, ref<android::os::Bundle> extras);
	void stopRtt();
	void putExtras(ref<android::os::Bundle> extras);
	void removeExtras(ref<java::util::List> keys);
	void removeExtras(ref<link::java::array<java::lang::String>> keys);
	ref<android::telecom::Call> getParent();
	ref<java::util::List> getChildren();
	ref<java::util::List> getConferenceableCalls();
	jint getState();
	ref<java::util::List> getCannedTextResponses();
	ref<android::telecom::InCallService_VideoCall> getVideoCall();
	ref<android::telecom::Call_Details> getDetails();
	ref<android::telecom::Call_RttCall> getRttCall();
	jboolean isRttActive();
	void registerCallback(ref<android::telecom::Call_Callback> callback);
	void registerCallback(ref<android::telecom::Call_Callback> callback, ref<android::os::Handler> handler);
	void unregisterCallback(ref<android::telecom::Call_Callback> callback);
	ref<java::lang::String> toString();

protected:

	Call(handle_type h) : base_(h) {}

};

} // namespace android::telecom
} // namespace scapix::java_api

#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/telecom/Call_Callback.h>
#include <scapix/java_api/android/telecom/Call_Details.h>
#include <scapix/java_api/android/telecom/Call_RttCall.h>
#include <scapix/java_api/android/telecom/InCallService_VideoCall.h>
#include <scapix/java_api/android/telecom/PhoneAccountHandle.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::telecom {

inline ref<java::lang::String> Call::AVAILABLE_PHONE_ACCOUNTS_() { return get_static_field<SCAPIX_META_STRING("AVAILABLE_PHONE_ACCOUNTS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Call::EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLIS_() { return get_static_field<SCAPIX_META_STRING("EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLIS"), ref<java::lang::String>>(); }
inline jint Call::STATE_ACTIVE_() { return get_static_field<SCAPIX_META_STRING("STATE_ACTIVE"), jint>(); }
inline jint Call::STATE_CONNECTING_() { return get_static_field<SCAPIX_META_STRING("STATE_CONNECTING"), jint>(); }
inline jint Call::STATE_DIALING_() { return get_static_field<SCAPIX_META_STRING("STATE_DIALING"), jint>(); }
inline jint Call::STATE_DISCONNECTED_() { return get_static_field<SCAPIX_META_STRING("STATE_DISCONNECTED"), jint>(); }
inline jint Call::STATE_DISCONNECTING_() { return get_static_field<SCAPIX_META_STRING("STATE_DISCONNECTING"), jint>(); }
inline jint Call::STATE_HOLDING_() { return get_static_field<SCAPIX_META_STRING("STATE_HOLDING"), jint>(); }
inline jint Call::STATE_NEW_() { return get_static_field<SCAPIX_META_STRING("STATE_NEW"), jint>(); }
inline jint Call::STATE_PULLING_CALL_() { return get_static_field<SCAPIX_META_STRING("STATE_PULLING_CALL"), jint>(); }
inline jint Call::STATE_RINGING_() { return get_static_field<SCAPIX_META_STRING("STATE_RINGING"), jint>(); }
inline jint Call::STATE_SELECT_PHONE_ACCOUNT_() { return get_static_field<SCAPIX_META_STRING("STATE_SELECT_PHONE_ACCOUNT"), jint>(); }
inline ref<java::lang::String> Call::getRemainingPostDialSequence() { return call_method<SCAPIX_META_STRING("getRemainingPostDialSequence"), ref<java::lang::String>>(); }
inline void Call::answer(jint videoState) { return call_method<SCAPIX_META_STRING("answer"), void>(videoState); }
inline void Call::deflect(ref<android::net::Uri> address) { return call_method<SCAPIX_META_STRING("deflect"), void>(address); }
inline void Call::reject(jboolean rejectWithMessage, ref<java::lang::String> textMessage) { return call_method<SCAPIX_META_STRING("reject"), void>(rejectWithMessage, textMessage); }
inline void Call::disconnect() { return call_method<SCAPIX_META_STRING("disconnect"), void>(); }
inline void Call::hold() { return call_method<SCAPIX_META_STRING("hold"), void>(); }
inline void Call::unhold() { return call_method<SCAPIX_META_STRING("unhold"), void>(); }
inline void Call::playDtmfTone(jchar digit) { return call_method<SCAPIX_META_STRING("playDtmfTone"), void>(digit); }
inline void Call::stopDtmfTone() { return call_method<SCAPIX_META_STRING("stopDtmfTone"), void>(); }
inline void Call::postDialContinue(jboolean proceed) { return call_method<SCAPIX_META_STRING("postDialContinue"), void>(proceed); }
inline void Call::phoneAccountSelected(ref<android::telecom::PhoneAccountHandle> accountHandle, jboolean setDefault) { return call_method<SCAPIX_META_STRING("phoneAccountSelected"), void>(accountHandle, setDefault); }
inline void Call::conference(ref<android::telecom::Call> callToConferenceWith) { return call_method<SCAPIX_META_STRING("conference"), void>(callToConferenceWith); }
inline void Call::splitFromConference() { return call_method<SCAPIX_META_STRING("splitFromConference"), void>(); }
inline void Call::mergeConference() { return call_method<SCAPIX_META_STRING("mergeConference"), void>(); }
inline void Call::swapConference() { return call_method<SCAPIX_META_STRING("swapConference"), void>(); }
inline void Call::pullExternalCall() { return call_method<SCAPIX_META_STRING("pullExternalCall"), void>(); }
inline void Call::sendCallEvent(ref<java::lang::String> event, ref<android::os::Bundle> extras) { return call_method<SCAPIX_META_STRING("sendCallEvent"), void>(event, extras); }
inline void Call::sendRttRequest() { return call_method<SCAPIX_META_STRING("sendRttRequest"), void>(); }
inline void Call::respondToRttRequest(jint id, jboolean accept) { return call_method<SCAPIX_META_STRING("respondToRttRequest"), void>(id, accept); }
inline void Call::handoverTo(ref<android::telecom::PhoneAccountHandle> toHandle, jint videoState, ref<android::os::Bundle> extras) { return call_method<SCAPIX_META_STRING("handoverTo"), void>(toHandle, videoState, extras); }
inline void Call::stopRtt() { return call_method<SCAPIX_META_STRING("stopRtt"), void>(); }
inline void Call::putExtras(ref<android::os::Bundle> extras) { return call_method<SCAPIX_META_STRING("putExtras"), void>(extras); }
inline void Call::removeExtras(ref<java::util::List> keys) { return call_method<SCAPIX_META_STRING("removeExtras"), void>(keys); }
inline void Call::removeExtras(ref<link::java::array<java::lang::String>> keys) { return call_method<SCAPIX_META_STRING("removeExtras"), void>(keys); }
inline ref<android::telecom::Call> Call::getParent() { return call_method<SCAPIX_META_STRING("getParent"), ref<android::telecom::Call>>(); }
inline ref<java::util::List> Call::getChildren() { return call_method<SCAPIX_META_STRING("getChildren"), ref<java::util::List>>(); }
inline ref<java::util::List> Call::getConferenceableCalls() { return call_method<SCAPIX_META_STRING("getConferenceableCalls"), ref<java::util::List>>(); }
inline jint Call::getState() { return call_method<SCAPIX_META_STRING("getState"), jint>(); }
inline ref<java::util::List> Call::getCannedTextResponses() { return call_method<SCAPIX_META_STRING("getCannedTextResponses"), ref<java::util::List>>(); }
inline ref<android::telecom::InCallService_VideoCall> Call::getVideoCall() { return call_method<SCAPIX_META_STRING("getVideoCall"), ref<android::telecom::InCallService_VideoCall>>(); }
inline ref<android::telecom::Call_Details> Call::getDetails() { return call_method<SCAPIX_META_STRING("getDetails"), ref<android::telecom::Call_Details>>(); }
inline ref<android::telecom::Call_RttCall> Call::getRttCall() { return call_method<SCAPIX_META_STRING("getRttCall"), ref<android::telecom::Call_RttCall>>(); }
inline jboolean Call::isRttActive() { return call_method<SCAPIX_META_STRING("isRttActive"), jboolean>(); }
inline void Call::registerCallback(ref<android::telecom::Call_Callback> callback) { return call_method<SCAPIX_META_STRING("registerCallback"), void>(callback); }
inline void Call::registerCallback(ref<android::telecom::Call_Callback> callback, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("registerCallback"), void>(callback, handler); }
inline void Call::unregisterCallback(ref<android::telecom::Call_Callback> callback) { return call_method<SCAPIX_META_STRING("unregisterCallback"), void>(callback); }
inline ref<java::lang::String> Call::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::telecom
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TELECOM_CALL_H
