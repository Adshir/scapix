// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/app/Service.h>

#ifndef SCAPIX_ANDROID_TELECOM_CONNECTIONSERVICE_H
#define SCAPIX_ANDROID_TELECOM_CONNECTIONSERVICE_H

namespace scapix::java_api {

namespace android::content { class Intent; }
namespace android::os { class IBinder; }
namespace android::telecom { class Conference; }
namespace android::telecom { class Connection; }
namespace android::telecom { class ConnectionRequest; }
namespace android::telecom { class PhoneAccountHandle; }
namespace android::telecom { class RemoteConference; }
namespace android::telecom { class RemoteConnection; }
namespace java::lang { class String; }
namespace java::util { class Collection; }

namespace android::telecom {

class ConnectionService : public object_base<SCAPIX_META_STRING("android/telecom/ConnectionService"),
	android::app::Service>
{
public:

	static ref<java::lang::String> SERVICE_INTERFACE_();

	static ref<ConnectionService> new_object();
	ref<android::os::IBinder> onBind(ref<android::content::Intent> intent);
	jboolean onUnbind(ref<android::content::Intent> intent);
	ref<android::telecom::RemoteConnection> createRemoteIncomingConnection(ref<android::telecom::PhoneAccountHandle> connectionManagerPhoneAccount, ref<android::telecom::ConnectionRequest> request);
	ref<android::telecom::RemoteConnection> createRemoteOutgoingConnection(ref<android::telecom::PhoneAccountHandle> connectionManagerPhoneAccount, ref<android::telecom::ConnectionRequest> request);
	void conferenceRemoteConnections(ref<android::telecom::RemoteConnection> remoteConnection1, ref<android::telecom::RemoteConnection> remoteConnection2);
	void addConference(ref<android::telecom::Conference> conference);
	void addExistingConnection(ref<android::telecom::PhoneAccountHandle> phoneAccountHandle, ref<android::telecom::Connection> connection);
	void connectionServiceFocusReleased();
	ref<java::util::Collection> getAllConnections();
	ref<java::util::Collection> getAllConferences();
	ref<android::telecom::Connection> onCreateIncomingConnection(ref<android::telecom::PhoneAccountHandle> connectionManagerPhoneAccount, ref<android::telecom::ConnectionRequest> request);
	void onCreateIncomingConnectionFailed(ref<android::telecom::PhoneAccountHandle> connectionManagerPhoneAccount, ref<android::telecom::ConnectionRequest> request);
	void onCreateOutgoingConnectionFailed(ref<android::telecom::PhoneAccountHandle> connectionManagerPhoneAccount, ref<android::telecom::ConnectionRequest> request);
	ref<android::telecom::Connection> onCreateOutgoingConnection(ref<android::telecom::PhoneAccountHandle> connectionManagerPhoneAccount, ref<android::telecom::ConnectionRequest> request);
	ref<android::telecom::Connection> onCreateOutgoingHandoverConnection(ref<android::telecom::PhoneAccountHandle> fromPhoneAccountHandle, ref<android::telecom::ConnectionRequest> request);
	ref<android::telecom::Connection> onCreateIncomingHandoverConnection(ref<android::telecom::PhoneAccountHandle> fromPhoneAccountHandle, ref<android::telecom::ConnectionRequest> request);
	void onHandoverFailed(ref<android::telecom::ConnectionRequest> request, jint error);
	void onConference(ref<android::telecom::Connection> connection1, ref<android::telecom::Connection> connection2);
	void onRemoteConferenceAdded(ref<android::telecom::RemoteConference> conference);
	void onRemoteExistingConnectionAdded(ref<android::telecom::RemoteConnection> connection);
	void onConnectionServiceFocusLost();
	void onConnectionServiceFocusGained();

protected:

	ConnectionService(handle_type h) : base_(h) {}

};

} // namespace android::telecom
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/android/telecom/Conference.h>
#include <scapix/java_api/android/telecom/Connection.h>
#include <scapix/java_api/android/telecom/ConnectionRequest.h>
#include <scapix/java_api/android/telecom/PhoneAccountHandle.h>
#include <scapix/java_api/android/telecom/RemoteConference.h>
#include <scapix/java_api/android/telecom/RemoteConnection.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>

namespace scapix::java_api {
namespace android::telecom {

inline ref<java::lang::String> ConnectionService::SERVICE_INTERFACE_() { return get_static_field<SCAPIX_META_STRING("SERVICE_INTERFACE"), ref<java::lang::String>>(); }
inline ref<ConnectionService> ConnectionService::new_object() { return base_::new_object(); }
inline ref<android::os::IBinder> ConnectionService::onBind(ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onBind"), ref<android::os::IBinder>>(intent); }
inline jboolean ConnectionService::onUnbind(ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("onUnbind"), jboolean>(intent); }
inline ref<android::telecom::RemoteConnection> ConnectionService::createRemoteIncomingConnection(ref<android::telecom::PhoneAccountHandle> connectionManagerPhoneAccount, ref<android::telecom::ConnectionRequest> request) { return call_method<SCAPIX_META_STRING("createRemoteIncomingConnection"), ref<android::telecom::RemoteConnection>>(connectionManagerPhoneAccount, request); }
inline ref<android::telecom::RemoteConnection> ConnectionService::createRemoteOutgoingConnection(ref<android::telecom::PhoneAccountHandle> connectionManagerPhoneAccount, ref<android::telecom::ConnectionRequest> request) { return call_method<SCAPIX_META_STRING("createRemoteOutgoingConnection"), ref<android::telecom::RemoteConnection>>(connectionManagerPhoneAccount, request); }
inline void ConnectionService::conferenceRemoteConnections(ref<android::telecom::RemoteConnection> remoteConnection1, ref<android::telecom::RemoteConnection> remoteConnection2) { return call_method<SCAPIX_META_STRING("conferenceRemoteConnections"), void>(remoteConnection1, remoteConnection2); }
inline void ConnectionService::addConference(ref<android::telecom::Conference> conference) { return call_method<SCAPIX_META_STRING("addConference"), void>(conference); }
inline void ConnectionService::addExistingConnection(ref<android::telecom::PhoneAccountHandle> phoneAccountHandle, ref<android::telecom::Connection> connection) { return call_method<SCAPIX_META_STRING("addExistingConnection"), void>(phoneAccountHandle, connection); }
inline void ConnectionService::connectionServiceFocusReleased() { return call_method<SCAPIX_META_STRING("connectionServiceFocusReleased"), void>(); }
inline ref<java::util::Collection> ConnectionService::getAllConnections() { return call_method<SCAPIX_META_STRING("getAllConnections"), ref<java::util::Collection>>(); }
inline ref<java::util::Collection> ConnectionService::getAllConferences() { return call_method<SCAPIX_META_STRING("getAllConferences"), ref<java::util::Collection>>(); }
inline ref<android::telecom::Connection> ConnectionService::onCreateIncomingConnection(ref<android::telecom::PhoneAccountHandle> connectionManagerPhoneAccount, ref<android::telecom::ConnectionRequest> request) { return call_method<SCAPIX_META_STRING("onCreateIncomingConnection"), ref<android::telecom::Connection>>(connectionManagerPhoneAccount, request); }
inline void ConnectionService::onCreateIncomingConnectionFailed(ref<android::telecom::PhoneAccountHandle> connectionManagerPhoneAccount, ref<android::telecom::ConnectionRequest> request) { return call_method<SCAPIX_META_STRING("onCreateIncomingConnectionFailed"), void>(connectionManagerPhoneAccount, request); }
inline void ConnectionService::onCreateOutgoingConnectionFailed(ref<android::telecom::PhoneAccountHandle> connectionManagerPhoneAccount, ref<android::telecom::ConnectionRequest> request) { return call_method<SCAPIX_META_STRING("onCreateOutgoingConnectionFailed"), void>(connectionManagerPhoneAccount, request); }
inline ref<android::telecom::Connection> ConnectionService::onCreateOutgoingConnection(ref<android::telecom::PhoneAccountHandle> connectionManagerPhoneAccount, ref<android::telecom::ConnectionRequest> request) { return call_method<SCAPIX_META_STRING("onCreateOutgoingConnection"), ref<android::telecom::Connection>>(connectionManagerPhoneAccount, request); }
inline ref<android::telecom::Connection> ConnectionService::onCreateOutgoingHandoverConnection(ref<android::telecom::PhoneAccountHandle> fromPhoneAccountHandle, ref<android::telecom::ConnectionRequest> request) { return call_method<SCAPIX_META_STRING("onCreateOutgoingHandoverConnection"), ref<android::telecom::Connection>>(fromPhoneAccountHandle, request); }
inline ref<android::telecom::Connection> ConnectionService::onCreateIncomingHandoverConnection(ref<android::telecom::PhoneAccountHandle> fromPhoneAccountHandle, ref<android::telecom::ConnectionRequest> request) { return call_method<SCAPIX_META_STRING("onCreateIncomingHandoverConnection"), ref<android::telecom::Connection>>(fromPhoneAccountHandle, request); }
inline void ConnectionService::onHandoverFailed(ref<android::telecom::ConnectionRequest> request, jint error) { return call_method<SCAPIX_META_STRING("onHandoverFailed"), void>(request, error); }
inline void ConnectionService::onConference(ref<android::telecom::Connection> connection1, ref<android::telecom::Connection> connection2) { return call_method<SCAPIX_META_STRING("onConference"), void>(connection1, connection2); }
inline void ConnectionService::onRemoteConferenceAdded(ref<android::telecom::RemoteConference> conference) { return call_method<SCAPIX_META_STRING("onRemoteConferenceAdded"), void>(conference); }
inline void ConnectionService::onRemoteExistingConnectionAdded(ref<android::telecom::RemoteConnection> connection) { return call_method<SCAPIX_META_STRING("onRemoteExistingConnectionAdded"), void>(connection); }
inline void ConnectionService::onConnectionServiceFocusLost() { return call_method<SCAPIX_META_STRING("onConnectionServiceFocusLost"), void>(); }
inline void ConnectionService::onConnectionServiceFocusGained() { return call_method<SCAPIX_META_STRING("onConnectionServiceFocusGained"), void>(); }

} // namespace android::telecom
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TELECOM_CONNECTIONSERVICE_H
