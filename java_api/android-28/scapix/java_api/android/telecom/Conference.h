// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/telecom/Conferenceable.h>

#ifndef SCAPIX_ANDROID_TELECOM_CONFERENCE_H
#define SCAPIX_ANDROID_TELECOM_CONFERENCE_H

namespace scapix::java_api {

namespace android::os { class Bundle; }
namespace android::telecom { class CallAudioState; }
namespace android::telecom { class Connection; }
namespace android::telecom { class Connection_VideoProvider; }
namespace android::telecom { class DisconnectCause; }
namespace android::telecom { class PhoneAccountHandle; }
namespace android::telecom { class StatusHints; }
namespace java::lang { class String; }
namespace java::util { class List; }

namespace android::telecom {

class Conference : public object_base<SCAPIX_META_STRING("android/telecom/Conference"),
	android::telecom::Conferenceable>
{
public:

	static jlong CONNECT_TIME_NOT_SPECIFIED_();

	static ref<Conference> new_object(ref<android::telecom::PhoneAccountHandle> phoneAccount);
	ref<android::telecom::PhoneAccountHandle> getPhoneAccountHandle();
	ref<java::util::List> getConnections();
	jint getState();
	jint getConnectionCapabilities();
	jint getConnectionProperties();
	ref<android::telecom::CallAudioState> getCallAudioState();
	ref<android::telecom::Connection_VideoProvider> getVideoProvider();
	jint getVideoState();
	void onDisconnect();
	void onSeparate(ref<android::telecom::Connection> connection);
	void onMerge(ref<android::telecom::Connection> connection);
	void onHold();
	void onUnhold();
	void onMerge();
	void onSwap();
	void onPlayDtmfTone(jchar c);
	void onStopDtmfTone();
	void onCallAudioStateChanged(ref<android::telecom::CallAudioState> state);
	void onConnectionAdded(ref<android::telecom::Connection> connection);
	void setOnHold();
	void setDialing();
	void setActive();
	void setDisconnected(ref<android::telecom::DisconnectCause> disconnectCause);
	ref<android::telecom::DisconnectCause> getDisconnectCause();
	void setConnectionCapabilities(jint connectionCapabilities);
	void setConnectionProperties(jint connectionProperties);
	jboolean addConnection(ref<android::telecom::Connection> connection);
	void removeConnection(ref<android::telecom::Connection> connection);
	void setConferenceableConnections(ref<java::util::List> conferenceableConnections);
	void setVideoState(ref<android::telecom::Connection> c, jint videoState);
	void setVideoProvider(ref<android::telecom::Connection> c, ref<android::telecom::Connection_VideoProvider> videoProvider);
	ref<java::util::List> getConferenceableConnections();
	void destroy();
	void setConnectionTime(jlong connectionTimeMillis);
	void setConnectionStartElapsedRealTime(jlong connectionStartElapsedRealTime);
	jlong getConnectionTime();
	ref<java::lang::String> toString();
	void setStatusHints(ref<android::telecom::StatusHints> statusHints);
	ref<android::telecom::StatusHints> getStatusHints();
	void setExtras(ref<android::os::Bundle> extras);
	void putExtras(ref<android::os::Bundle> extras);
	void removeExtras(ref<java::util::List> keys);
	void removeExtras(ref<link::java::array<java::lang::String>> keys);
	ref<android::os::Bundle> getExtras();
	void onExtrasChanged(ref<android::os::Bundle> extras);

protected:

	Conference(handle_type h) : base_(h) {}

};

} // namespace android::telecom
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/telecom/CallAudioState.h>
#include <scapix/java_api/android/telecom/Connection.h>
#include <scapix/java_api/android/telecom/Connection_VideoProvider.h>
#include <scapix/java_api/android/telecom/DisconnectCause.h>
#include <scapix/java_api/android/telecom/PhoneAccountHandle.h>
#include <scapix/java_api/android/telecom/StatusHints.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::telecom {

inline jlong Conference::CONNECT_TIME_NOT_SPECIFIED_() { return get_static_field<SCAPIX_META_STRING("CONNECT_TIME_NOT_SPECIFIED"), jlong>(); }
inline ref<Conference> Conference::new_object(ref<android::telecom::PhoneAccountHandle> phoneAccount) { return base_::new_object(phoneAccount); }
inline ref<android::telecom::PhoneAccountHandle> Conference::getPhoneAccountHandle() { return call_method<SCAPIX_META_STRING("getPhoneAccountHandle"), ref<android::telecom::PhoneAccountHandle>>(); }
inline ref<java::util::List> Conference::getConnections() { return call_method<SCAPIX_META_STRING("getConnections"), ref<java::util::List>>(); }
inline jint Conference::getState() { return call_method<SCAPIX_META_STRING("getState"), jint>(); }
inline jint Conference::getConnectionCapabilities() { return call_method<SCAPIX_META_STRING("getConnectionCapabilities"), jint>(); }
inline jint Conference::getConnectionProperties() { return call_method<SCAPIX_META_STRING("getConnectionProperties"), jint>(); }
inline ref<android::telecom::CallAudioState> Conference::getCallAudioState() { return call_method<SCAPIX_META_STRING("getCallAudioState"), ref<android::telecom::CallAudioState>>(); }
inline ref<android::telecom::Connection_VideoProvider> Conference::getVideoProvider() { return call_method<SCAPIX_META_STRING("getVideoProvider"), ref<android::telecom::Connection_VideoProvider>>(); }
inline jint Conference::getVideoState() { return call_method<SCAPIX_META_STRING("getVideoState"), jint>(); }
inline void Conference::onDisconnect() { return call_method<SCAPIX_META_STRING("onDisconnect"), void>(); }
inline void Conference::onSeparate(ref<android::telecom::Connection> connection) { return call_method<SCAPIX_META_STRING("onSeparate"), void>(connection); }
inline void Conference::onMerge(ref<android::telecom::Connection> connection) { return call_method<SCAPIX_META_STRING("onMerge"), void>(connection); }
inline void Conference::onHold() { return call_method<SCAPIX_META_STRING("onHold"), void>(); }
inline void Conference::onUnhold() { return call_method<SCAPIX_META_STRING("onUnhold"), void>(); }
inline void Conference::onMerge() { return call_method<SCAPIX_META_STRING("onMerge"), void>(); }
inline void Conference::onSwap() { return call_method<SCAPIX_META_STRING("onSwap"), void>(); }
inline void Conference::onPlayDtmfTone(jchar c) { return call_method<SCAPIX_META_STRING("onPlayDtmfTone"), void>(c); }
inline void Conference::onStopDtmfTone() { return call_method<SCAPIX_META_STRING("onStopDtmfTone"), void>(); }
inline void Conference::onCallAudioStateChanged(ref<android::telecom::CallAudioState> state) { return call_method<SCAPIX_META_STRING("onCallAudioStateChanged"), void>(state); }
inline void Conference::onConnectionAdded(ref<android::telecom::Connection> connection) { return call_method<SCAPIX_META_STRING("onConnectionAdded"), void>(connection); }
inline void Conference::setOnHold() { return call_method<SCAPIX_META_STRING("setOnHold"), void>(); }
inline void Conference::setDialing() { return call_method<SCAPIX_META_STRING("setDialing"), void>(); }
inline void Conference::setActive() { return call_method<SCAPIX_META_STRING("setActive"), void>(); }
inline void Conference::setDisconnected(ref<android::telecom::DisconnectCause> disconnectCause) { return call_method<SCAPIX_META_STRING("setDisconnected"), void>(disconnectCause); }
inline ref<android::telecom::DisconnectCause> Conference::getDisconnectCause() { return call_method<SCAPIX_META_STRING("getDisconnectCause"), ref<android::telecom::DisconnectCause>>(); }
inline void Conference::setConnectionCapabilities(jint connectionCapabilities) { return call_method<SCAPIX_META_STRING("setConnectionCapabilities"), void>(connectionCapabilities); }
inline void Conference::setConnectionProperties(jint connectionProperties) { return call_method<SCAPIX_META_STRING("setConnectionProperties"), void>(connectionProperties); }
inline jboolean Conference::addConnection(ref<android::telecom::Connection> connection) { return call_method<SCAPIX_META_STRING("addConnection"), jboolean>(connection); }
inline void Conference::removeConnection(ref<android::telecom::Connection> connection) { return call_method<SCAPIX_META_STRING("removeConnection"), void>(connection); }
inline void Conference::setConferenceableConnections(ref<java::util::List> conferenceableConnections) { return call_method<SCAPIX_META_STRING("setConferenceableConnections"), void>(conferenceableConnections); }
inline void Conference::setVideoState(ref<android::telecom::Connection> c, jint videoState) { return call_method<SCAPIX_META_STRING("setVideoState"), void>(c, videoState); }
inline void Conference::setVideoProvider(ref<android::telecom::Connection> c, ref<android::telecom::Connection_VideoProvider> videoProvider) { return call_method<SCAPIX_META_STRING("setVideoProvider"), void>(c, videoProvider); }
inline ref<java::util::List> Conference::getConferenceableConnections() { return call_method<SCAPIX_META_STRING("getConferenceableConnections"), ref<java::util::List>>(); }
inline void Conference::destroy() { return call_method<SCAPIX_META_STRING("destroy"), void>(); }
inline void Conference::setConnectionTime(jlong connectionTimeMillis) { return call_method<SCAPIX_META_STRING("setConnectionTime"), void>(connectionTimeMillis); }
inline void Conference::setConnectionStartElapsedRealTime(jlong connectionStartElapsedRealTime) { return call_method<SCAPIX_META_STRING("setConnectionStartElapsedRealTime"), void>(connectionStartElapsedRealTime); }
inline jlong Conference::getConnectionTime() { return call_method<SCAPIX_META_STRING("getConnectionTime"), jlong>(); }
inline ref<java::lang::String> Conference::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline void Conference::setStatusHints(ref<android::telecom::StatusHints> statusHints) { return call_method<SCAPIX_META_STRING("setStatusHints"), void>(statusHints); }
inline ref<android::telecom::StatusHints> Conference::getStatusHints() { return call_method<SCAPIX_META_STRING("getStatusHints"), ref<android::telecom::StatusHints>>(); }
inline void Conference::setExtras(ref<android::os::Bundle> extras) { return call_method<SCAPIX_META_STRING("setExtras"), void>(extras); }
inline void Conference::putExtras(ref<android::os::Bundle> extras) { return call_method<SCAPIX_META_STRING("putExtras"), void>(extras); }
inline void Conference::removeExtras(ref<java::util::List> keys) { return call_method<SCAPIX_META_STRING("removeExtras"), void>(keys); }
inline void Conference::removeExtras(ref<link::java::array<java::lang::String>> keys) { return call_method<SCAPIX_META_STRING("removeExtras"), void>(keys); }
inline ref<android::os::Bundle> Conference::getExtras() { return call_method<SCAPIX_META_STRING("getExtras"), ref<android::os::Bundle>>(); }
inline void Conference::onExtrasChanged(ref<android::os::Bundle> extras) { return call_method<SCAPIX_META_STRING("onExtrasChanged"), void>(extras); }

} // namespace android::telecom
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TELECOM_CONFERENCE_H
