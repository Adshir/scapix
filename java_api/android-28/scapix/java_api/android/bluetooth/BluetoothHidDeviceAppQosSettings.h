// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHHIDDEVICEAPPQOSSETTINGS_H
#define SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHHIDDEVICEAPPQOSSETTINGS_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }

namespace android::bluetooth {

class BluetoothHidDeviceAppQosSettings : public object_base<SCAPIX_META_STRING("android/bluetooth/BluetoothHidDeviceAppQosSettings"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint MAX_();
	static jint SERVICE_BEST_EFFORT_();
	static jint SERVICE_GUARANTEED_();
	static jint SERVICE_NO_TRAFFIC_();

	static ref<BluetoothHidDeviceAppQosSettings> new_object(jint serviceType, jint tokenRate, jint tokenBucketSize, jint peakBandwidth, jint latency, jint delayVariation);
	jint getServiceType();
	jint getTokenRate();
	jint getTokenBucketSize();
	jint getPeakBandwidth();
	jint getLatency();
	jint getDelayVariation();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint flags);

protected:

	BluetoothHidDeviceAppQosSettings(handle_type h) : base_(h) {}

};

} // namespace android::bluetooth
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>

namespace scapix::java_api {
namespace android::bluetooth {

inline ref<android::os::Parcelable_Creator> BluetoothHidDeviceAppQosSettings::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint BluetoothHidDeviceAppQosSettings::MAX_() { return get_static_field<SCAPIX_META_STRING("MAX"), jint>(); }
inline jint BluetoothHidDeviceAppQosSettings::SERVICE_BEST_EFFORT_() { return get_static_field<SCAPIX_META_STRING("SERVICE_BEST_EFFORT"), jint>(); }
inline jint BluetoothHidDeviceAppQosSettings::SERVICE_GUARANTEED_() { return get_static_field<SCAPIX_META_STRING("SERVICE_GUARANTEED"), jint>(); }
inline jint BluetoothHidDeviceAppQosSettings::SERVICE_NO_TRAFFIC_() { return get_static_field<SCAPIX_META_STRING("SERVICE_NO_TRAFFIC"), jint>(); }
inline ref<BluetoothHidDeviceAppQosSettings> BluetoothHidDeviceAppQosSettings::new_object(jint serviceType, jint tokenRate, jint tokenBucketSize, jint peakBandwidth, jint latency, jint delayVariation) { return base_::new_object(serviceType, tokenRate, tokenBucketSize, peakBandwidth, latency, delayVariation); }
inline jint BluetoothHidDeviceAppQosSettings::getServiceType() { return call_method<SCAPIX_META_STRING("getServiceType"), jint>(); }
inline jint BluetoothHidDeviceAppQosSettings::getTokenRate() { return call_method<SCAPIX_META_STRING("getTokenRate"), jint>(); }
inline jint BluetoothHidDeviceAppQosSettings::getTokenBucketSize() { return call_method<SCAPIX_META_STRING("getTokenBucketSize"), jint>(); }
inline jint BluetoothHidDeviceAppQosSettings::getPeakBandwidth() { return call_method<SCAPIX_META_STRING("getPeakBandwidth"), jint>(); }
inline jint BluetoothHidDeviceAppQosSettings::getLatency() { return call_method<SCAPIX_META_STRING("getLatency"), jint>(); }
inline jint BluetoothHidDeviceAppQosSettings::getDelayVariation() { return call_method<SCAPIX_META_STRING("getDelayVariation"), jint>(); }
inline jint BluetoothHidDeviceAppQosSettings::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void BluetoothHidDeviceAppQosSettings::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }

} // namespace android::bluetooth
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHHIDDEVICEAPPQOSSETTINGS_H
