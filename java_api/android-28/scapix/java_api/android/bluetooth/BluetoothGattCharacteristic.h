// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHGATTCHARACTERISTIC_H
#define SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHGATTCHARACTERISTIC_H

namespace scapix::java_api {

namespace android::bluetooth { class BluetoothGattDescriptor; }
namespace android::bluetooth { class BluetoothGattService; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class Float; }
namespace java::lang { class Integer; }
namespace java::lang { class String; }
namespace java::util { class List; }
namespace java::util { class UUID; }

namespace android::bluetooth {

class BluetoothGattCharacteristic : public object_base<SCAPIX_META_STRING("android/bluetooth/BluetoothGattCharacteristic"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint FORMAT_FLOAT_();
	static jint FORMAT_SFLOAT_();
	static jint FORMAT_SINT16_();
	static jint FORMAT_SINT32_();
	static jint FORMAT_SINT8_();
	static jint FORMAT_UINT16_();
	static jint FORMAT_UINT32_();
	static jint FORMAT_UINT8_();
	static jint PERMISSION_READ_();
	static jint PERMISSION_READ_ENCRYPTED_();
	static jint PERMISSION_READ_ENCRYPTED_MITM_();
	static jint PERMISSION_WRITE_();
	static jint PERMISSION_WRITE_ENCRYPTED_();
	static jint PERMISSION_WRITE_ENCRYPTED_MITM_();
	static jint PERMISSION_WRITE_SIGNED_();
	static jint PERMISSION_WRITE_SIGNED_MITM_();
	static jint PROPERTY_BROADCAST_();
	static jint PROPERTY_EXTENDED_PROPS_();
	static jint PROPERTY_INDICATE_();
	static jint PROPERTY_NOTIFY_();
	static jint PROPERTY_READ_();
	static jint PROPERTY_SIGNED_WRITE_();
	static jint PROPERTY_WRITE_();
	static jint PROPERTY_WRITE_NO_RESPONSE_();
	static jint WRITE_TYPE_DEFAULT_();
	static jint WRITE_TYPE_NO_RESPONSE_();
	static jint WRITE_TYPE_SIGNED_();

	static ref<BluetoothGattCharacteristic> new_object(ref<java::util::UUID> uuid, jint properties, jint permissions);
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint flags);
	jboolean addDescriptor(ref<android::bluetooth::BluetoothGattDescriptor> descriptor);
	ref<android::bluetooth::BluetoothGattService> getService();
	ref<java::util::UUID> getUuid();
	jint getInstanceId();
	jint getProperties();
	jint getPermissions();
	jint getWriteType();
	void setWriteType(jint writeType);
	ref<java::util::List> getDescriptors();
	ref<android::bluetooth::BluetoothGattDescriptor> getDescriptor(ref<java::util::UUID> uuid);
	ref<link::java::array<jbyte>> getValue();
	ref<java::lang::Integer> getIntValue(jint formatType, jint offset);
	ref<java::lang::Float> getFloatValue(jint formatType, jint offset);
	ref<java::lang::String> getStringValue(jint offset);
	jboolean setValue(ref<link::java::array<jbyte>> value);
	jboolean setValue(jint value, jint formatType, jint offset);
	jboolean setValue(jint mantissa, jint exponent, jint formatType, jint offset);
	jboolean setValue(ref<java::lang::String> value);

protected:

	BluetoothGattCharacteristic(handle_type h) : base_(h) {}

};

} // namespace android::bluetooth
} // namespace scapix::java_api

#include <scapix/java_api/android/bluetooth/BluetoothGattDescriptor.h>
#include <scapix/java_api/android/bluetooth/BluetoothGattService.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/Float.h>
#include <scapix/java_api/java/lang/Integer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/UUID.h>

namespace scapix::java_api {
namespace android::bluetooth {

inline ref<android::os::Parcelable_Creator> BluetoothGattCharacteristic::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint BluetoothGattCharacteristic::FORMAT_FLOAT_() { return get_static_field<SCAPIX_META_STRING("FORMAT_FLOAT"), jint>(); }
inline jint BluetoothGattCharacteristic::FORMAT_SFLOAT_() { return get_static_field<SCAPIX_META_STRING("FORMAT_SFLOAT"), jint>(); }
inline jint BluetoothGattCharacteristic::FORMAT_SINT16_() { return get_static_field<SCAPIX_META_STRING("FORMAT_SINT16"), jint>(); }
inline jint BluetoothGattCharacteristic::FORMAT_SINT32_() { return get_static_field<SCAPIX_META_STRING("FORMAT_SINT32"), jint>(); }
inline jint BluetoothGattCharacteristic::FORMAT_SINT8_() { return get_static_field<SCAPIX_META_STRING("FORMAT_SINT8"), jint>(); }
inline jint BluetoothGattCharacteristic::FORMAT_UINT16_() { return get_static_field<SCAPIX_META_STRING("FORMAT_UINT16"), jint>(); }
inline jint BluetoothGattCharacteristic::FORMAT_UINT32_() { return get_static_field<SCAPIX_META_STRING("FORMAT_UINT32"), jint>(); }
inline jint BluetoothGattCharacteristic::FORMAT_UINT8_() { return get_static_field<SCAPIX_META_STRING("FORMAT_UINT8"), jint>(); }
inline jint BluetoothGattCharacteristic::PERMISSION_READ_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_READ"), jint>(); }
inline jint BluetoothGattCharacteristic::PERMISSION_READ_ENCRYPTED_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_READ_ENCRYPTED"), jint>(); }
inline jint BluetoothGattCharacteristic::PERMISSION_READ_ENCRYPTED_MITM_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_READ_ENCRYPTED_MITM"), jint>(); }
inline jint BluetoothGattCharacteristic::PERMISSION_WRITE_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_WRITE"), jint>(); }
inline jint BluetoothGattCharacteristic::PERMISSION_WRITE_ENCRYPTED_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_WRITE_ENCRYPTED"), jint>(); }
inline jint BluetoothGattCharacteristic::PERMISSION_WRITE_ENCRYPTED_MITM_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_WRITE_ENCRYPTED_MITM"), jint>(); }
inline jint BluetoothGattCharacteristic::PERMISSION_WRITE_SIGNED_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_WRITE_SIGNED"), jint>(); }
inline jint BluetoothGattCharacteristic::PERMISSION_WRITE_SIGNED_MITM_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_WRITE_SIGNED_MITM"), jint>(); }
inline jint BluetoothGattCharacteristic::PROPERTY_BROADCAST_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_BROADCAST"), jint>(); }
inline jint BluetoothGattCharacteristic::PROPERTY_EXTENDED_PROPS_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_EXTENDED_PROPS"), jint>(); }
inline jint BluetoothGattCharacteristic::PROPERTY_INDICATE_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_INDICATE"), jint>(); }
inline jint BluetoothGattCharacteristic::PROPERTY_NOTIFY_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_NOTIFY"), jint>(); }
inline jint BluetoothGattCharacteristic::PROPERTY_READ_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_READ"), jint>(); }
inline jint BluetoothGattCharacteristic::PROPERTY_SIGNED_WRITE_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_SIGNED_WRITE"), jint>(); }
inline jint BluetoothGattCharacteristic::PROPERTY_WRITE_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_WRITE"), jint>(); }
inline jint BluetoothGattCharacteristic::PROPERTY_WRITE_NO_RESPONSE_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_WRITE_NO_RESPONSE"), jint>(); }
inline jint BluetoothGattCharacteristic::WRITE_TYPE_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("WRITE_TYPE_DEFAULT"), jint>(); }
inline jint BluetoothGattCharacteristic::WRITE_TYPE_NO_RESPONSE_() { return get_static_field<SCAPIX_META_STRING("WRITE_TYPE_NO_RESPONSE"), jint>(); }
inline jint BluetoothGattCharacteristic::WRITE_TYPE_SIGNED_() { return get_static_field<SCAPIX_META_STRING("WRITE_TYPE_SIGNED"), jint>(); }
inline ref<BluetoothGattCharacteristic> BluetoothGattCharacteristic::new_object(ref<java::util::UUID> uuid, jint properties, jint permissions) { return base_::new_object(uuid, properties, permissions); }
inline jint BluetoothGattCharacteristic::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void BluetoothGattCharacteristic::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }
inline jboolean BluetoothGattCharacteristic::addDescriptor(ref<android::bluetooth::BluetoothGattDescriptor> descriptor) { return call_method<SCAPIX_META_STRING("addDescriptor"), jboolean>(descriptor); }
inline ref<android::bluetooth::BluetoothGattService> BluetoothGattCharacteristic::getService() { return call_method<SCAPIX_META_STRING("getService"), ref<android::bluetooth::BluetoothGattService>>(); }
inline ref<java::util::UUID> BluetoothGattCharacteristic::getUuid() { return call_method<SCAPIX_META_STRING("getUuid"), ref<java::util::UUID>>(); }
inline jint BluetoothGattCharacteristic::getInstanceId() { return call_method<SCAPIX_META_STRING("getInstanceId"), jint>(); }
inline jint BluetoothGattCharacteristic::getProperties() { return call_method<SCAPIX_META_STRING("getProperties"), jint>(); }
inline jint BluetoothGattCharacteristic::getPermissions() { return call_method<SCAPIX_META_STRING("getPermissions"), jint>(); }
inline jint BluetoothGattCharacteristic::getWriteType() { return call_method<SCAPIX_META_STRING("getWriteType"), jint>(); }
inline void BluetoothGattCharacteristic::setWriteType(jint writeType) { return call_method<SCAPIX_META_STRING("setWriteType"), void>(writeType); }
inline ref<java::util::List> BluetoothGattCharacteristic::getDescriptors() { return call_method<SCAPIX_META_STRING("getDescriptors"), ref<java::util::List>>(); }
inline ref<android::bluetooth::BluetoothGattDescriptor> BluetoothGattCharacteristic::getDescriptor(ref<java::util::UUID> uuid) { return call_method<SCAPIX_META_STRING("getDescriptor"), ref<android::bluetooth::BluetoothGattDescriptor>>(uuid); }
inline ref<link::java::array<jbyte>> BluetoothGattCharacteristic::getValue() { return call_method<SCAPIX_META_STRING("getValue"), ref<link::java::array<jbyte>>>(); }
inline ref<java::lang::Integer> BluetoothGattCharacteristic::getIntValue(jint formatType, jint offset) { return call_method<SCAPIX_META_STRING("getIntValue"), ref<java::lang::Integer>>(formatType, offset); }
inline ref<java::lang::Float> BluetoothGattCharacteristic::getFloatValue(jint formatType, jint offset) { return call_method<SCAPIX_META_STRING("getFloatValue"), ref<java::lang::Float>>(formatType, offset); }
inline ref<java::lang::String> BluetoothGattCharacteristic::getStringValue(jint offset) { return call_method<SCAPIX_META_STRING("getStringValue"), ref<java::lang::String>>(offset); }
inline jboolean BluetoothGattCharacteristic::setValue(ref<link::java::array<jbyte>> value) { return call_method<SCAPIX_META_STRING("setValue"), jboolean>(value); }
inline jboolean BluetoothGattCharacteristic::setValue(jint value, jint formatType, jint offset) { return call_method<SCAPIX_META_STRING("setValue"), jboolean>(value, formatType, offset); }
inline jboolean BluetoothGattCharacteristic::setValue(jint mantissa, jint exponent, jint formatType, jint offset) { return call_method<SCAPIX_META_STRING("setValue"), jboolean>(mantissa, exponent, formatType, offset); }
inline jboolean BluetoothGattCharacteristic::setValue(ref<java::lang::String> value) { return call_method<SCAPIX_META_STRING("setValue"), jboolean>(value); }

} // namespace android::bluetooth
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHGATTCHARACTERISTIC_H
