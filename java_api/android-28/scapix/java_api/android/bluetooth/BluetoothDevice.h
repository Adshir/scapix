// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHDEVICE_H
#define SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHDEVICE_H

namespace scapix::java_api {

namespace android::bluetooth { class BluetoothClass; }
namespace android::bluetooth { class BluetoothGatt; }
namespace android::bluetooth { class BluetoothGattCallback; }
namespace android::bluetooth { class BluetoothSocket; }
namespace android::content { class Context; }
namespace android::os { class Handler; }
namespace android::os { class Parcel; }
namespace android::os { class ParcelUuid; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }
namespace java::util { class UUID; }

namespace android::bluetooth {

class BluetoothDevice : public object_base<SCAPIX_META_STRING("android/bluetooth/BluetoothDevice"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<java::lang::String> ACTION_ACL_CONNECTED_();
	static ref<java::lang::String> ACTION_ACL_DISCONNECTED_();
	static ref<java::lang::String> ACTION_ACL_DISCONNECT_REQUESTED_();
	static ref<java::lang::String> ACTION_BOND_STATE_CHANGED_();
	static ref<java::lang::String> ACTION_CLASS_CHANGED_();
	static ref<java::lang::String> ACTION_FOUND_();
	static ref<java::lang::String> ACTION_NAME_CHANGED_();
	static ref<java::lang::String> ACTION_PAIRING_REQUEST_();
	static ref<java::lang::String> ACTION_UUID_();
	static jint BOND_BONDED_();
	static jint BOND_BONDING_();
	static jint BOND_NONE_();
	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint DEVICE_TYPE_CLASSIC_();
	static jint DEVICE_TYPE_DUAL_();
	static jint DEVICE_TYPE_LE_();
	static jint DEVICE_TYPE_UNKNOWN_();
	static jint ERROR_();
	static ref<java::lang::String> EXTRA_BOND_STATE_();
	static ref<java::lang::String> EXTRA_CLASS_();
	static ref<java::lang::String> EXTRA_DEVICE_();
	static ref<java::lang::String> EXTRA_NAME_();
	static ref<java::lang::String> EXTRA_PAIRING_KEY_();
	static ref<java::lang::String> EXTRA_PAIRING_VARIANT_();
	static ref<java::lang::String> EXTRA_PREVIOUS_BOND_STATE_();
	static ref<java::lang::String> EXTRA_RSSI_();
	static ref<java::lang::String> EXTRA_UUID_();
	static jint PAIRING_VARIANT_PASSKEY_CONFIRMATION_();
	static jint PAIRING_VARIANT_PIN_();
	static jint PHY_LE_1M_();
	static jint PHY_LE_1M_MASK_();
	static jint PHY_LE_2M_();
	static jint PHY_LE_2M_MASK_();
	static jint PHY_LE_CODED_();
	static jint PHY_LE_CODED_MASK_();
	static jint PHY_OPTION_NO_PREFERRED_();
	static jint PHY_OPTION_S2_();
	static jint PHY_OPTION_S8_();
	static jint TRANSPORT_AUTO_();
	static jint TRANSPORT_BREDR_();
	static jint TRANSPORT_LE_();

	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint flags);
	ref<java::lang::String> getAddress();
	ref<java::lang::String> getName();
	jint getType();
	jboolean createBond();
	jint getBondState();
	ref<android::bluetooth::BluetoothClass> getBluetoothClass();
	ref<link::java::array<android::os::ParcelUuid>> getUuids();
	jboolean fetchUuidsWithSdp();
	jboolean setPin(ref<link::java::array<jbyte>> pin);
	jboolean setPairingConfirmation(jboolean confirm);
	ref<android::bluetooth::BluetoothSocket> createRfcommSocketToServiceRecord(ref<java::util::UUID> uuid);
	ref<android::bluetooth::BluetoothSocket> createInsecureRfcommSocketToServiceRecord(ref<java::util::UUID> uuid);
	ref<android::bluetooth::BluetoothGatt> connectGatt(ref<android::content::Context> context, jboolean autoConnect, ref<android::bluetooth::BluetoothGattCallback> callback);
	ref<android::bluetooth::BluetoothGatt> connectGatt(ref<android::content::Context> context, jboolean autoConnect, ref<android::bluetooth::BluetoothGattCallback> callback, jint transport);
	ref<android::bluetooth::BluetoothGatt> connectGatt(ref<android::content::Context> context, jboolean autoConnect, ref<android::bluetooth::BluetoothGattCallback> callback, jint transport, jint phy);
	ref<android::bluetooth::BluetoothGatt> connectGatt(ref<android::content::Context> context, jboolean autoConnect, ref<android::bluetooth::BluetoothGattCallback> callback, jint transport, jint phy, ref<android::os::Handler> handler);

protected:

	BluetoothDevice(handle_type h) : base_(h) {}

};

} // namespace android::bluetooth
} // namespace scapix::java_api

#include <scapix/java_api/android/bluetooth/BluetoothClass.h>
#include <scapix/java_api/android/bluetooth/BluetoothGatt.h>
#include <scapix/java_api/android/bluetooth/BluetoothGattCallback.h>
#include <scapix/java_api/android/bluetooth/BluetoothSocket.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/ParcelUuid.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/UUID.h>

namespace scapix::java_api {
namespace android::bluetooth {

inline ref<java::lang::String> BluetoothDevice::ACTION_ACL_CONNECTED_() { return get_static_field<SCAPIX_META_STRING("ACTION_ACL_CONNECTED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::ACTION_ACL_DISCONNECTED_() { return get_static_field<SCAPIX_META_STRING("ACTION_ACL_DISCONNECTED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::ACTION_ACL_DISCONNECT_REQUESTED_() { return get_static_field<SCAPIX_META_STRING("ACTION_ACL_DISCONNECT_REQUESTED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::ACTION_BOND_STATE_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_BOND_STATE_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::ACTION_CLASS_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_CLASS_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::ACTION_FOUND_() { return get_static_field<SCAPIX_META_STRING("ACTION_FOUND"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::ACTION_NAME_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_NAME_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::ACTION_PAIRING_REQUEST_() { return get_static_field<SCAPIX_META_STRING("ACTION_PAIRING_REQUEST"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::ACTION_UUID_() { return get_static_field<SCAPIX_META_STRING("ACTION_UUID"), ref<java::lang::String>>(); }
inline jint BluetoothDevice::BOND_BONDED_() { return get_static_field<SCAPIX_META_STRING("BOND_BONDED"), jint>(); }
inline jint BluetoothDevice::BOND_BONDING_() { return get_static_field<SCAPIX_META_STRING("BOND_BONDING"), jint>(); }
inline jint BluetoothDevice::BOND_NONE_() { return get_static_field<SCAPIX_META_STRING("BOND_NONE"), jint>(); }
inline ref<android::os::Parcelable_Creator> BluetoothDevice::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint BluetoothDevice::DEVICE_TYPE_CLASSIC_() { return get_static_field<SCAPIX_META_STRING("DEVICE_TYPE_CLASSIC"), jint>(); }
inline jint BluetoothDevice::DEVICE_TYPE_DUAL_() { return get_static_field<SCAPIX_META_STRING("DEVICE_TYPE_DUAL"), jint>(); }
inline jint BluetoothDevice::DEVICE_TYPE_LE_() { return get_static_field<SCAPIX_META_STRING("DEVICE_TYPE_LE"), jint>(); }
inline jint BluetoothDevice::DEVICE_TYPE_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("DEVICE_TYPE_UNKNOWN"), jint>(); }
inline jint BluetoothDevice::ERROR_() { return get_static_field<SCAPIX_META_STRING("ERROR"), jint>(); }
inline ref<java::lang::String> BluetoothDevice::EXTRA_BOND_STATE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_BOND_STATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::EXTRA_CLASS_() { return get_static_field<SCAPIX_META_STRING("EXTRA_CLASS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::EXTRA_DEVICE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_DEVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::EXTRA_NAME_() { return get_static_field<SCAPIX_META_STRING("EXTRA_NAME"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::EXTRA_PAIRING_KEY_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PAIRING_KEY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::EXTRA_PAIRING_VARIANT_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PAIRING_VARIANT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::EXTRA_PREVIOUS_BOND_STATE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PREVIOUS_BOND_STATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::EXTRA_RSSI_() { return get_static_field<SCAPIX_META_STRING("EXTRA_RSSI"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::EXTRA_UUID_() { return get_static_field<SCAPIX_META_STRING("EXTRA_UUID"), ref<java::lang::String>>(); }
inline jint BluetoothDevice::PAIRING_VARIANT_PASSKEY_CONFIRMATION_() { return get_static_field<SCAPIX_META_STRING("PAIRING_VARIANT_PASSKEY_CONFIRMATION"), jint>(); }
inline jint BluetoothDevice::PAIRING_VARIANT_PIN_() { return get_static_field<SCAPIX_META_STRING("PAIRING_VARIANT_PIN"), jint>(); }
inline jint BluetoothDevice::PHY_LE_1M_() { return get_static_field<SCAPIX_META_STRING("PHY_LE_1M"), jint>(); }
inline jint BluetoothDevice::PHY_LE_1M_MASK_() { return get_static_field<SCAPIX_META_STRING("PHY_LE_1M_MASK"), jint>(); }
inline jint BluetoothDevice::PHY_LE_2M_() { return get_static_field<SCAPIX_META_STRING("PHY_LE_2M"), jint>(); }
inline jint BluetoothDevice::PHY_LE_2M_MASK_() { return get_static_field<SCAPIX_META_STRING("PHY_LE_2M_MASK"), jint>(); }
inline jint BluetoothDevice::PHY_LE_CODED_() { return get_static_field<SCAPIX_META_STRING("PHY_LE_CODED"), jint>(); }
inline jint BluetoothDevice::PHY_LE_CODED_MASK_() { return get_static_field<SCAPIX_META_STRING("PHY_LE_CODED_MASK"), jint>(); }
inline jint BluetoothDevice::PHY_OPTION_NO_PREFERRED_() { return get_static_field<SCAPIX_META_STRING("PHY_OPTION_NO_PREFERRED"), jint>(); }
inline jint BluetoothDevice::PHY_OPTION_S2_() { return get_static_field<SCAPIX_META_STRING("PHY_OPTION_S2"), jint>(); }
inline jint BluetoothDevice::PHY_OPTION_S8_() { return get_static_field<SCAPIX_META_STRING("PHY_OPTION_S8"), jint>(); }
inline jint BluetoothDevice::TRANSPORT_AUTO_() { return get_static_field<SCAPIX_META_STRING("TRANSPORT_AUTO"), jint>(); }
inline jint BluetoothDevice::TRANSPORT_BREDR_() { return get_static_field<SCAPIX_META_STRING("TRANSPORT_BREDR"), jint>(); }
inline jint BluetoothDevice::TRANSPORT_LE_() { return get_static_field<SCAPIX_META_STRING("TRANSPORT_LE"), jint>(); }
inline jboolean BluetoothDevice::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint BluetoothDevice::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> BluetoothDevice::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint BluetoothDevice::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void BluetoothDevice::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }
inline ref<java::lang::String> BluetoothDevice::getAddress() { return call_method<SCAPIX_META_STRING("getAddress"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothDevice::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline jint BluetoothDevice::getType() { return call_method<SCAPIX_META_STRING("getType"), jint>(); }
inline jboolean BluetoothDevice::createBond() { return call_method<SCAPIX_META_STRING("createBond"), jboolean>(); }
inline jint BluetoothDevice::getBondState() { return call_method<SCAPIX_META_STRING("getBondState"), jint>(); }
inline ref<android::bluetooth::BluetoothClass> BluetoothDevice::getBluetoothClass() { return call_method<SCAPIX_META_STRING("getBluetoothClass"), ref<android::bluetooth::BluetoothClass>>(); }
inline ref<link::java::array<android::os::ParcelUuid>> BluetoothDevice::getUuids() { return call_method<SCAPIX_META_STRING("getUuids"), ref<link::java::array<android::os::ParcelUuid>>>(); }
inline jboolean BluetoothDevice::fetchUuidsWithSdp() { return call_method<SCAPIX_META_STRING("fetchUuidsWithSdp"), jboolean>(); }
inline jboolean BluetoothDevice::setPin(ref<link::java::array<jbyte>> pin) { return call_method<SCAPIX_META_STRING("setPin"), jboolean>(pin); }
inline jboolean BluetoothDevice::setPairingConfirmation(jboolean confirm) { return call_method<SCAPIX_META_STRING("setPairingConfirmation"), jboolean>(confirm); }
inline ref<android::bluetooth::BluetoothSocket> BluetoothDevice::createRfcommSocketToServiceRecord(ref<java::util::UUID> uuid) { return call_method<SCAPIX_META_STRING("createRfcommSocketToServiceRecord"), ref<android::bluetooth::BluetoothSocket>>(uuid); }
inline ref<android::bluetooth::BluetoothSocket> BluetoothDevice::createInsecureRfcommSocketToServiceRecord(ref<java::util::UUID> uuid) { return call_method<SCAPIX_META_STRING("createInsecureRfcommSocketToServiceRecord"), ref<android::bluetooth::BluetoothSocket>>(uuid); }
inline ref<android::bluetooth::BluetoothGatt> BluetoothDevice::connectGatt(ref<android::content::Context> context, jboolean autoConnect, ref<android::bluetooth::BluetoothGattCallback> callback) { return call_method<SCAPIX_META_STRING("connectGatt"), ref<android::bluetooth::BluetoothGatt>>(context, autoConnect, callback); }
inline ref<android::bluetooth::BluetoothGatt> BluetoothDevice::connectGatt(ref<android::content::Context> context, jboolean autoConnect, ref<android::bluetooth::BluetoothGattCallback> callback, jint transport) { return call_method<SCAPIX_META_STRING("connectGatt"), ref<android::bluetooth::BluetoothGatt>>(context, autoConnect, callback, transport); }
inline ref<android::bluetooth::BluetoothGatt> BluetoothDevice::connectGatt(ref<android::content::Context> context, jboolean autoConnect, ref<android::bluetooth::BluetoothGattCallback> callback, jint transport, jint phy) { return call_method<SCAPIX_META_STRING("connectGatt"), ref<android::bluetooth::BluetoothGatt>>(context, autoConnect, callback, transport, phy); }
inline ref<android::bluetooth::BluetoothGatt> BluetoothDevice::connectGatt(ref<android::content::Context> context, jboolean autoConnect, ref<android::bluetooth::BluetoothGattCallback> callback, jint transport, jint phy, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("connectGatt"), ref<android::bluetooth::BluetoothGatt>>(context, autoConnect, callback, transport, phy, handler); }

} // namespace android::bluetooth
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHDEVICE_H
