// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_BLUETOOTH_LE_SCANSETTINGS_H
#define SCAPIX_ANDROID_BLUETOOTH_LE_SCANSETTINGS_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::bluetooth::le { class ScanSettings_Builder; }

namespace android::bluetooth::le {

class ScanSettings : public object_base<SCAPIX_META_STRING("android/bluetooth/le/ScanSettings"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = ScanSettings_Builder;

	static jint CALLBACK_TYPE_ALL_MATCHES_();
	static jint CALLBACK_TYPE_FIRST_MATCH_();
	static jint CALLBACK_TYPE_MATCH_LOST_();
	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint MATCH_MODE_AGGRESSIVE_();
	static jint MATCH_MODE_STICKY_();
	static jint MATCH_NUM_FEW_ADVERTISEMENT_();
	static jint MATCH_NUM_MAX_ADVERTISEMENT_();
	static jint MATCH_NUM_ONE_ADVERTISEMENT_();
	static jint PHY_LE_ALL_SUPPORTED_();
	static jint SCAN_MODE_BALANCED_();
	static jint SCAN_MODE_LOW_LATENCY_();
	static jint SCAN_MODE_LOW_POWER_();
	static jint SCAN_MODE_OPPORTUNISTIC_();

	jint getScanMode();
	jint getCallbackType();
	jint getScanResultType();
	jboolean getLegacy();
	jint getPhy();
	jlong getReportDelayMillis();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	jint describeContents();

protected:

	ScanSettings(handle_type h) : base_(h) {}

};

} // namespace android::bluetooth::le
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>

namespace scapix::java_api {
namespace android::bluetooth::le {

inline jint ScanSettings::CALLBACK_TYPE_ALL_MATCHES_() { return get_static_field<SCAPIX_META_STRING("CALLBACK_TYPE_ALL_MATCHES"), jint>(); }
inline jint ScanSettings::CALLBACK_TYPE_FIRST_MATCH_() { return get_static_field<SCAPIX_META_STRING("CALLBACK_TYPE_FIRST_MATCH"), jint>(); }
inline jint ScanSettings::CALLBACK_TYPE_MATCH_LOST_() { return get_static_field<SCAPIX_META_STRING("CALLBACK_TYPE_MATCH_LOST"), jint>(); }
inline ref<android::os::Parcelable_Creator> ScanSettings::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint ScanSettings::MATCH_MODE_AGGRESSIVE_() { return get_static_field<SCAPIX_META_STRING("MATCH_MODE_AGGRESSIVE"), jint>(); }
inline jint ScanSettings::MATCH_MODE_STICKY_() { return get_static_field<SCAPIX_META_STRING("MATCH_MODE_STICKY"), jint>(); }
inline jint ScanSettings::MATCH_NUM_FEW_ADVERTISEMENT_() { return get_static_field<SCAPIX_META_STRING("MATCH_NUM_FEW_ADVERTISEMENT"), jint>(); }
inline jint ScanSettings::MATCH_NUM_MAX_ADVERTISEMENT_() { return get_static_field<SCAPIX_META_STRING("MATCH_NUM_MAX_ADVERTISEMENT"), jint>(); }
inline jint ScanSettings::MATCH_NUM_ONE_ADVERTISEMENT_() { return get_static_field<SCAPIX_META_STRING("MATCH_NUM_ONE_ADVERTISEMENT"), jint>(); }
inline jint ScanSettings::PHY_LE_ALL_SUPPORTED_() { return get_static_field<SCAPIX_META_STRING("PHY_LE_ALL_SUPPORTED"), jint>(); }
inline jint ScanSettings::SCAN_MODE_BALANCED_() { return get_static_field<SCAPIX_META_STRING("SCAN_MODE_BALANCED"), jint>(); }
inline jint ScanSettings::SCAN_MODE_LOW_LATENCY_() { return get_static_field<SCAPIX_META_STRING("SCAN_MODE_LOW_LATENCY"), jint>(); }
inline jint ScanSettings::SCAN_MODE_LOW_POWER_() { return get_static_field<SCAPIX_META_STRING("SCAN_MODE_LOW_POWER"), jint>(); }
inline jint ScanSettings::SCAN_MODE_OPPORTUNISTIC_() { return get_static_field<SCAPIX_META_STRING("SCAN_MODE_OPPORTUNISTIC"), jint>(); }
inline jint ScanSettings::getScanMode() { return call_method<SCAPIX_META_STRING("getScanMode"), jint>(); }
inline jint ScanSettings::getCallbackType() { return call_method<SCAPIX_META_STRING("getCallbackType"), jint>(); }
inline jint ScanSettings::getScanResultType() { return call_method<SCAPIX_META_STRING("getScanResultType"), jint>(); }
inline jboolean ScanSettings::getLegacy() { return call_method<SCAPIX_META_STRING("getLegacy"), jboolean>(); }
inline jint ScanSettings::getPhy() { return call_method<SCAPIX_META_STRING("getPhy"), jint>(); }
inline jlong ScanSettings::getReportDelayMillis() { return call_method<SCAPIX_META_STRING("getReportDelayMillis"), jlong>(); }
inline void ScanSettings::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline jint ScanSettings::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }

} // namespace android::bluetooth::le
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_BLUETOOTH_LE_SCANSETTINGS_H
