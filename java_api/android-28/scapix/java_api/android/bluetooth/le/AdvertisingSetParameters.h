// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_BLUETOOTH_LE_ADVERTISINGSETPARAMETERS_H
#define SCAPIX_ANDROID_BLUETOOTH_LE_ADVERTISINGSETPARAMETERS_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }
namespace android::bluetooth::le { class AdvertisingSetParameters_Builder; }

namespace android::bluetooth::le {

class AdvertisingSetParameters : public object_base<SCAPIX_META_STRING("android/bluetooth/le/AdvertisingSetParameters"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = AdvertisingSetParameters_Builder;

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint INTERVAL_HIGH_();
	static jint INTERVAL_LOW_();
	static jint INTERVAL_MAX_();
	static jint INTERVAL_MEDIUM_();
	static jint INTERVAL_MIN_();
	static jint TX_POWER_HIGH_();
	static jint TX_POWER_LOW_();
	static jint TX_POWER_MAX_();
	static jint TX_POWER_MEDIUM_();
	static jint TX_POWER_MIN_();
	static jint TX_POWER_ULTRA_LOW_();

	jboolean isConnectable();
	jboolean isScannable();
	jboolean isLegacy();
	jboolean isAnonymous();
	jboolean includeTxPower();
	jint getPrimaryPhy();
	jint getSecondaryPhy();
	jint getInterval();
	jint getTxPowerLevel();
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);

protected:

	AdvertisingSetParameters(handle_type h) : base_(h) {}

};

} // namespace android::bluetooth::le
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::bluetooth::le {

inline ref<android::os::Parcelable_Creator> AdvertisingSetParameters::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint AdvertisingSetParameters::INTERVAL_HIGH_() { return get_static_field<SCAPIX_META_STRING("INTERVAL_HIGH"), jint>(); }
inline jint AdvertisingSetParameters::INTERVAL_LOW_() { return get_static_field<SCAPIX_META_STRING("INTERVAL_LOW"), jint>(); }
inline jint AdvertisingSetParameters::INTERVAL_MAX_() { return get_static_field<SCAPIX_META_STRING("INTERVAL_MAX"), jint>(); }
inline jint AdvertisingSetParameters::INTERVAL_MEDIUM_() { return get_static_field<SCAPIX_META_STRING("INTERVAL_MEDIUM"), jint>(); }
inline jint AdvertisingSetParameters::INTERVAL_MIN_() { return get_static_field<SCAPIX_META_STRING("INTERVAL_MIN"), jint>(); }
inline jint AdvertisingSetParameters::TX_POWER_HIGH_() { return get_static_field<SCAPIX_META_STRING("TX_POWER_HIGH"), jint>(); }
inline jint AdvertisingSetParameters::TX_POWER_LOW_() { return get_static_field<SCAPIX_META_STRING("TX_POWER_LOW"), jint>(); }
inline jint AdvertisingSetParameters::TX_POWER_MAX_() { return get_static_field<SCAPIX_META_STRING("TX_POWER_MAX"), jint>(); }
inline jint AdvertisingSetParameters::TX_POWER_MEDIUM_() { return get_static_field<SCAPIX_META_STRING("TX_POWER_MEDIUM"), jint>(); }
inline jint AdvertisingSetParameters::TX_POWER_MIN_() { return get_static_field<SCAPIX_META_STRING("TX_POWER_MIN"), jint>(); }
inline jint AdvertisingSetParameters::TX_POWER_ULTRA_LOW_() { return get_static_field<SCAPIX_META_STRING("TX_POWER_ULTRA_LOW"), jint>(); }
inline jboolean AdvertisingSetParameters::isConnectable() { return call_method<SCAPIX_META_STRING("isConnectable"), jboolean>(); }
inline jboolean AdvertisingSetParameters::isScannable() { return call_method<SCAPIX_META_STRING("isScannable"), jboolean>(); }
inline jboolean AdvertisingSetParameters::isLegacy() { return call_method<SCAPIX_META_STRING("isLegacy"), jboolean>(); }
inline jboolean AdvertisingSetParameters::isAnonymous() { return call_method<SCAPIX_META_STRING("isAnonymous"), jboolean>(); }
inline jboolean AdvertisingSetParameters::includeTxPower() { return call_method<SCAPIX_META_STRING("includeTxPower"), jboolean>(); }
inline jint AdvertisingSetParameters::getPrimaryPhy() { return call_method<SCAPIX_META_STRING("getPrimaryPhy"), jint>(); }
inline jint AdvertisingSetParameters::getSecondaryPhy() { return call_method<SCAPIX_META_STRING("getSecondaryPhy"), jint>(); }
inline jint AdvertisingSetParameters::getInterval() { return call_method<SCAPIX_META_STRING("getInterval"), jint>(); }
inline jint AdvertisingSetParameters::getTxPowerLevel() { return call_method<SCAPIX_META_STRING("getTxPowerLevel"), jint>(); }
inline ref<java::lang::String> AdvertisingSetParameters::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint AdvertisingSetParameters::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void AdvertisingSetParameters::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }

} // namespace android::bluetooth::le
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_BLUETOOTH_LE_ADVERTISINGSETPARAMETERS_H
