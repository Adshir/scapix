// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_BLUETOOTH_LE_SCANFILTER_BUILDER_H
#define SCAPIX_ANDROID_BLUETOOTH_LE_SCANFILTER_BUILDER_H

namespace scapix::java_api {

namespace android::bluetooth::le { class ScanFilter; }
namespace android::os { class ParcelUuid; }
namespace java::lang { class String; }

namespace android::bluetooth::le {

class ScanFilter_Builder : public object_base<SCAPIX_META_STRING("android/bluetooth/le/ScanFilter$Builder"),
	java::lang::Object>
{
public:

	static ref<ScanFilter_Builder> new_object();
	ref<android::bluetooth::le::ScanFilter_Builder> setDeviceName(ref<java::lang::String> deviceName);
	ref<android::bluetooth::le::ScanFilter_Builder> setDeviceAddress(ref<java::lang::String> deviceAddress);
	ref<android::bluetooth::le::ScanFilter_Builder> setServiceUuid(ref<android::os::ParcelUuid> serviceUuid);
	ref<android::bluetooth::le::ScanFilter_Builder> setServiceUuid(ref<android::os::ParcelUuid> serviceUuid, ref<android::os::ParcelUuid> uuidMask);
	ref<android::bluetooth::le::ScanFilter_Builder> setServiceData(ref<android::os::ParcelUuid> serviceDataUuid, ref<link::java::array<jbyte>> serviceData);
	ref<android::bluetooth::le::ScanFilter_Builder> setServiceData(ref<android::os::ParcelUuid> serviceDataUuid, ref<link::java::array<jbyte>> serviceData, ref<link::java::array<jbyte>> serviceDataMask);
	ref<android::bluetooth::le::ScanFilter_Builder> setManufacturerData(jint manufacturerId, ref<link::java::array<jbyte>> manufacturerData);
	ref<android::bluetooth::le::ScanFilter_Builder> setManufacturerData(jint manufacturerId, ref<link::java::array<jbyte>> manufacturerData, ref<link::java::array<jbyte>> manufacturerDataMask);
	ref<android::bluetooth::le::ScanFilter> build();

protected:

	ScanFilter_Builder(handle_type h) : base_(h) {}

};

} // namespace android::bluetooth::le
} // namespace scapix::java_api

#include <scapix/java_api/android/bluetooth/le/ScanFilter.h>
#include <scapix/java_api/android/os/ParcelUuid.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::bluetooth::le {

inline ref<ScanFilter_Builder> ScanFilter_Builder::new_object() { return base_::new_object(); }
inline ref<android::bluetooth::le::ScanFilter_Builder> ScanFilter_Builder::setDeviceName(ref<java::lang::String> deviceName) { return call_method<SCAPIX_META_STRING("setDeviceName"), ref<android::bluetooth::le::ScanFilter_Builder>>(deviceName); }
inline ref<android::bluetooth::le::ScanFilter_Builder> ScanFilter_Builder::setDeviceAddress(ref<java::lang::String> deviceAddress) { return call_method<SCAPIX_META_STRING("setDeviceAddress"), ref<android::bluetooth::le::ScanFilter_Builder>>(deviceAddress); }
inline ref<android::bluetooth::le::ScanFilter_Builder> ScanFilter_Builder::setServiceUuid(ref<android::os::ParcelUuid> serviceUuid) { return call_method<SCAPIX_META_STRING("setServiceUuid"), ref<android::bluetooth::le::ScanFilter_Builder>>(serviceUuid); }
inline ref<android::bluetooth::le::ScanFilter_Builder> ScanFilter_Builder::setServiceUuid(ref<android::os::ParcelUuid> serviceUuid, ref<android::os::ParcelUuid> uuidMask) { return call_method<SCAPIX_META_STRING("setServiceUuid"), ref<android::bluetooth::le::ScanFilter_Builder>>(serviceUuid, uuidMask); }
inline ref<android::bluetooth::le::ScanFilter_Builder> ScanFilter_Builder::setServiceData(ref<android::os::ParcelUuid> serviceDataUuid, ref<link::java::array<jbyte>> serviceData) { return call_method<SCAPIX_META_STRING("setServiceData"), ref<android::bluetooth::le::ScanFilter_Builder>>(serviceDataUuid, serviceData); }
inline ref<android::bluetooth::le::ScanFilter_Builder> ScanFilter_Builder::setServiceData(ref<android::os::ParcelUuid> serviceDataUuid, ref<link::java::array<jbyte>> serviceData, ref<link::java::array<jbyte>> serviceDataMask) { return call_method<SCAPIX_META_STRING("setServiceData"), ref<android::bluetooth::le::ScanFilter_Builder>>(serviceDataUuid, serviceData, serviceDataMask); }
inline ref<android::bluetooth::le::ScanFilter_Builder> ScanFilter_Builder::setManufacturerData(jint manufacturerId, ref<link::java::array<jbyte>> manufacturerData) { return call_method<SCAPIX_META_STRING("setManufacturerData"), ref<android::bluetooth::le::ScanFilter_Builder>>(manufacturerId, manufacturerData); }
inline ref<android::bluetooth::le::ScanFilter_Builder> ScanFilter_Builder::setManufacturerData(jint manufacturerId, ref<link::java::array<jbyte>> manufacturerData, ref<link::java::array<jbyte>> manufacturerDataMask) { return call_method<SCAPIX_META_STRING("setManufacturerData"), ref<android::bluetooth::le::ScanFilter_Builder>>(manufacturerId, manufacturerData, manufacturerDataMask); }
inline ref<android::bluetooth::le::ScanFilter> ScanFilter_Builder::build() { return call_method<SCAPIX_META_STRING("build"), ref<android::bluetooth::le::ScanFilter>>(); }

} // namespace android::bluetooth::le
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_BLUETOOTH_LE_SCANFILTER_BUILDER_H
