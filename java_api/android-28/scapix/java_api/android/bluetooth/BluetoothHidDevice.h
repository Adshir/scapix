// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/bluetooth/BluetoothProfile.h>

#ifndef SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHHIDDEVICE_H
#define SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHHIDDEVICE_H

namespace scapix::java_api {

namespace android::bluetooth { class BluetoothDevice; }
namespace android::bluetooth { class BluetoothHidDevice_Callback; }
namespace android::bluetooth { class BluetoothHidDeviceAppQosSettings; }
namespace android::bluetooth { class BluetoothHidDeviceAppSdpSettings; }
namespace java::lang { class String; }
namespace java::util { class List; }
namespace java::util::concurrent { class Executor; }

namespace android::bluetooth {

class BluetoothHidDevice : public object_base<SCAPIX_META_STRING("android/bluetooth/BluetoothHidDevice"),
	java::lang::Object,
	android::bluetooth::BluetoothProfile>
{
public:

	using Callback = BluetoothHidDevice_Callback;

	static ref<java::lang::String> ACTION_CONNECTION_STATE_CHANGED_();
	static jbyte ERROR_RSP_INVALID_PARAM_();
	static jbyte ERROR_RSP_INVALID_RPT_ID_();
	static jbyte ERROR_RSP_NOT_READY_();
	static jbyte ERROR_RSP_SUCCESS_();
	static jbyte ERROR_RSP_UNKNOWN_();
	static jbyte ERROR_RSP_UNSUPPORTED_REQ_();
	static jbyte PROTOCOL_BOOT_MODE_();
	static jbyte PROTOCOL_REPORT_MODE_();
	static jbyte REPORT_TYPE_FEATURE_();
	static jbyte REPORT_TYPE_INPUT_();
	static jbyte REPORT_TYPE_OUTPUT_();
	static jbyte SUBCLASS1_COMBO_();
	static jbyte SUBCLASS1_KEYBOARD_();
	static jbyte SUBCLASS1_MOUSE_();
	static jbyte SUBCLASS1_NONE_();
	static jbyte SUBCLASS2_CARD_READER_();
	static jbyte SUBCLASS2_DIGITIZER_TABLET_();
	static jbyte SUBCLASS2_GAMEPAD_();
	static jbyte SUBCLASS2_JOYSTICK_();
	static jbyte SUBCLASS2_REMOTE_CONTROL_();
	static jbyte SUBCLASS2_SENSING_DEVICE_();
	static jbyte SUBCLASS2_UNCATEGORIZED_();

	ref<java::util::List> getConnectedDevices();
	ref<java::util::List> getDevicesMatchingConnectionStates(ref<link::java::array<jint>> states);
	jint getConnectionState(ref<android::bluetooth::BluetoothDevice> device);
	jboolean registerApp(ref<android::bluetooth::BluetoothHidDeviceAppSdpSettings> sdp, ref<android::bluetooth::BluetoothHidDeviceAppQosSettings> inQos, ref<android::bluetooth::BluetoothHidDeviceAppQosSettings> outQos, ref<java::util::concurrent::Executor> executor, ref<android::bluetooth::BluetoothHidDevice_Callback> callback);
	jboolean unregisterApp();
	jboolean sendReport(ref<android::bluetooth::BluetoothDevice> device, jint id, ref<link::java::array<jbyte>> data);
	jboolean replyReport(ref<android::bluetooth::BluetoothDevice> device, jbyte type, jbyte id, ref<link::java::array<jbyte>> data);
	jboolean reportError(ref<android::bluetooth::BluetoothDevice> device, jbyte error);
	jboolean connect(ref<android::bluetooth::BluetoothDevice> device);
	jboolean disconnect(ref<android::bluetooth::BluetoothDevice> device);

protected:

	BluetoothHidDevice(handle_type h) : base_(h) {}

};

} // namespace android::bluetooth
} // namespace scapix::java_api

#include <scapix/java_api/android/bluetooth/BluetoothDevice.h>
#include <scapix/java_api/android/bluetooth/BluetoothHidDevice_Callback.h>
#include <scapix/java_api/android/bluetooth/BluetoothHidDeviceAppQosSettings.h>
#include <scapix/java_api/android/bluetooth/BluetoothHidDeviceAppSdpSettings.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>

namespace scapix::java_api {
namespace android::bluetooth {

inline ref<java::lang::String> BluetoothHidDevice::ACTION_CONNECTION_STATE_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_CONNECTION_STATE_CHANGED"), ref<java::lang::String>>(); }
inline jbyte BluetoothHidDevice::ERROR_RSP_INVALID_PARAM_() { return get_static_field<SCAPIX_META_STRING("ERROR_RSP_INVALID_PARAM"), jbyte>(); }
inline jbyte BluetoothHidDevice::ERROR_RSP_INVALID_RPT_ID_() { return get_static_field<SCAPIX_META_STRING("ERROR_RSP_INVALID_RPT_ID"), jbyte>(); }
inline jbyte BluetoothHidDevice::ERROR_RSP_NOT_READY_() { return get_static_field<SCAPIX_META_STRING("ERROR_RSP_NOT_READY"), jbyte>(); }
inline jbyte BluetoothHidDevice::ERROR_RSP_SUCCESS_() { return get_static_field<SCAPIX_META_STRING("ERROR_RSP_SUCCESS"), jbyte>(); }
inline jbyte BluetoothHidDevice::ERROR_RSP_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("ERROR_RSP_UNKNOWN"), jbyte>(); }
inline jbyte BluetoothHidDevice::ERROR_RSP_UNSUPPORTED_REQ_() { return get_static_field<SCAPIX_META_STRING("ERROR_RSP_UNSUPPORTED_REQ"), jbyte>(); }
inline jbyte BluetoothHidDevice::PROTOCOL_BOOT_MODE_() { return get_static_field<SCAPIX_META_STRING("PROTOCOL_BOOT_MODE"), jbyte>(); }
inline jbyte BluetoothHidDevice::PROTOCOL_REPORT_MODE_() { return get_static_field<SCAPIX_META_STRING("PROTOCOL_REPORT_MODE"), jbyte>(); }
inline jbyte BluetoothHidDevice::REPORT_TYPE_FEATURE_() { return get_static_field<SCAPIX_META_STRING("REPORT_TYPE_FEATURE"), jbyte>(); }
inline jbyte BluetoothHidDevice::REPORT_TYPE_INPUT_() { return get_static_field<SCAPIX_META_STRING("REPORT_TYPE_INPUT"), jbyte>(); }
inline jbyte BluetoothHidDevice::REPORT_TYPE_OUTPUT_() { return get_static_field<SCAPIX_META_STRING("REPORT_TYPE_OUTPUT"), jbyte>(); }
inline jbyte BluetoothHidDevice::SUBCLASS1_COMBO_() { return get_static_field<SCAPIX_META_STRING("SUBCLASS1_COMBO"), jbyte>(); }
inline jbyte BluetoothHidDevice::SUBCLASS1_KEYBOARD_() { return get_static_field<SCAPIX_META_STRING("SUBCLASS1_KEYBOARD"), jbyte>(); }
inline jbyte BluetoothHidDevice::SUBCLASS1_MOUSE_() { return get_static_field<SCAPIX_META_STRING("SUBCLASS1_MOUSE"), jbyte>(); }
inline jbyte BluetoothHidDevice::SUBCLASS1_NONE_() { return get_static_field<SCAPIX_META_STRING("SUBCLASS1_NONE"), jbyte>(); }
inline jbyte BluetoothHidDevice::SUBCLASS2_CARD_READER_() { return get_static_field<SCAPIX_META_STRING("SUBCLASS2_CARD_READER"), jbyte>(); }
inline jbyte BluetoothHidDevice::SUBCLASS2_DIGITIZER_TABLET_() { return get_static_field<SCAPIX_META_STRING("SUBCLASS2_DIGITIZER_TABLET"), jbyte>(); }
inline jbyte BluetoothHidDevice::SUBCLASS2_GAMEPAD_() { return get_static_field<SCAPIX_META_STRING("SUBCLASS2_GAMEPAD"), jbyte>(); }
inline jbyte BluetoothHidDevice::SUBCLASS2_JOYSTICK_() { return get_static_field<SCAPIX_META_STRING("SUBCLASS2_JOYSTICK"), jbyte>(); }
inline jbyte BluetoothHidDevice::SUBCLASS2_REMOTE_CONTROL_() { return get_static_field<SCAPIX_META_STRING("SUBCLASS2_REMOTE_CONTROL"), jbyte>(); }
inline jbyte BluetoothHidDevice::SUBCLASS2_SENSING_DEVICE_() { return get_static_field<SCAPIX_META_STRING("SUBCLASS2_SENSING_DEVICE"), jbyte>(); }
inline jbyte BluetoothHidDevice::SUBCLASS2_UNCATEGORIZED_() { return get_static_field<SCAPIX_META_STRING("SUBCLASS2_UNCATEGORIZED"), jbyte>(); }
inline ref<java::util::List> BluetoothHidDevice::getConnectedDevices() { return call_method<SCAPIX_META_STRING("getConnectedDevices"), ref<java::util::List>>(); }
inline ref<java::util::List> BluetoothHidDevice::getDevicesMatchingConnectionStates(ref<link::java::array<jint>> states) { return call_method<SCAPIX_META_STRING("getDevicesMatchingConnectionStates"), ref<java::util::List>>(states); }
inline jint BluetoothHidDevice::getConnectionState(ref<android::bluetooth::BluetoothDevice> device) { return call_method<SCAPIX_META_STRING("getConnectionState"), jint>(device); }
inline jboolean BluetoothHidDevice::registerApp(ref<android::bluetooth::BluetoothHidDeviceAppSdpSettings> sdp, ref<android::bluetooth::BluetoothHidDeviceAppQosSettings> inQos, ref<android::bluetooth::BluetoothHidDeviceAppQosSettings> outQos, ref<java::util::concurrent::Executor> executor, ref<android::bluetooth::BluetoothHidDevice_Callback> callback) { return call_method<SCAPIX_META_STRING("registerApp"), jboolean>(sdp, inQos, outQos, executor, callback); }
inline jboolean BluetoothHidDevice::unregisterApp() { return call_method<SCAPIX_META_STRING("unregisterApp"), jboolean>(); }
inline jboolean BluetoothHidDevice::sendReport(ref<android::bluetooth::BluetoothDevice> device, jint id, ref<link::java::array<jbyte>> data) { return call_method<SCAPIX_META_STRING("sendReport"), jboolean>(device, id, data); }
inline jboolean BluetoothHidDevice::replyReport(ref<android::bluetooth::BluetoothDevice> device, jbyte type, jbyte id, ref<link::java::array<jbyte>> data) { return call_method<SCAPIX_META_STRING("replyReport"), jboolean>(device, type, id, data); }
inline jboolean BluetoothHidDevice::reportError(ref<android::bluetooth::BluetoothDevice> device, jbyte error) { return call_method<SCAPIX_META_STRING("reportError"), jboolean>(device, error); }
inline jboolean BluetoothHidDevice::connect(ref<android::bluetooth::BluetoothDevice> device) { return call_method<SCAPIX_META_STRING("connect"), jboolean>(device); }
inline jboolean BluetoothHidDevice::disconnect(ref<android::bluetooth::BluetoothDevice> device) { return call_method<SCAPIX_META_STRING("disconnect"), jboolean>(device); }

} // namespace android::bluetooth
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHHIDDEVICE_H
