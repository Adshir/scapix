// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/bluetooth/BluetoothProfile.h>

#ifndef SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHGATTSERVER_H
#define SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHGATTSERVER_H

namespace scapix::java_api {

namespace android::bluetooth { class BluetoothDevice; }
namespace android::bluetooth { class BluetoothGattCharacteristic; }
namespace android::bluetooth { class BluetoothGattService; }
namespace java::util { class List; }
namespace java::util { class UUID; }

namespace android::bluetooth {

class BluetoothGattServer : public object_base<SCAPIX_META_STRING("android/bluetooth/BluetoothGattServer"),
	java::lang::Object,
	android::bluetooth::BluetoothProfile>
{
public:

	void close();
	jboolean connect(ref<android::bluetooth::BluetoothDevice> device, jboolean autoConnect);
	void cancelConnection(ref<android::bluetooth::BluetoothDevice> device);
	void setPreferredPhy(ref<android::bluetooth::BluetoothDevice> device, jint txPhy, jint rxPhy, jint phyOptions);
	void readPhy(ref<android::bluetooth::BluetoothDevice> device);
	jboolean sendResponse(ref<android::bluetooth::BluetoothDevice> device, jint requestId, jint status, jint offset, ref<link::java::array<jbyte>> value);
	jboolean notifyCharacteristicChanged(ref<android::bluetooth::BluetoothDevice> device, ref<android::bluetooth::BluetoothGattCharacteristic> characteristic, jboolean confirm);
	jboolean addService(ref<android::bluetooth::BluetoothGattService> service);
	jboolean removeService(ref<android::bluetooth::BluetoothGattService> service);
	void clearServices();
	ref<java::util::List> getServices();
	ref<android::bluetooth::BluetoothGattService> getService(ref<java::util::UUID> uuid);
	jint getConnectionState(ref<android::bluetooth::BluetoothDevice> device);
	ref<java::util::List> getConnectedDevices();
	ref<java::util::List> getDevicesMatchingConnectionStates(ref<link::java::array<jint>> states);

protected:

	BluetoothGattServer(handle_type h) : base_(h) {}

};

} // namespace android::bluetooth
} // namespace scapix::java_api

#include <scapix/java_api/android/bluetooth/BluetoothDevice.h>
#include <scapix/java_api/android/bluetooth/BluetoothGattCharacteristic.h>
#include <scapix/java_api/android/bluetooth/BluetoothGattService.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/UUID.h>

namespace scapix::java_api {
namespace android::bluetooth {

inline void BluetoothGattServer::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jboolean BluetoothGattServer::connect(ref<android::bluetooth::BluetoothDevice> device, jboolean autoConnect) { return call_method<SCAPIX_META_STRING("connect"), jboolean>(device, autoConnect); }
inline void BluetoothGattServer::cancelConnection(ref<android::bluetooth::BluetoothDevice> device) { return call_method<SCAPIX_META_STRING("cancelConnection"), void>(device); }
inline void BluetoothGattServer::setPreferredPhy(ref<android::bluetooth::BluetoothDevice> device, jint txPhy, jint rxPhy, jint phyOptions) { return call_method<SCAPIX_META_STRING("setPreferredPhy"), void>(device, txPhy, rxPhy, phyOptions); }
inline void BluetoothGattServer::readPhy(ref<android::bluetooth::BluetoothDevice> device) { return call_method<SCAPIX_META_STRING("readPhy"), void>(device); }
inline jboolean BluetoothGattServer::sendResponse(ref<android::bluetooth::BluetoothDevice> device, jint requestId, jint status, jint offset, ref<link::java::array<jbyte>> value) { return call_method<SCAPIX_META_STRING("sendResponse"), jboolean>(device, requestId, status, offset, value); }
inline jboolean BluetoothGattServer::notifyCharacteristicChanged(ref<android::bluetooth::BluetoothDevice> device, ref<android::bluetooth::BluetoothGattCharacteristic> characteristic, jboolean confirm) { return call_method<SCAPIX_META_STRING("notifyCharacteristicChanged"), jboolean>(device, characteristic, confirm); }
inline jboolean BluetoothGattServer::addService(ref<android::bluetooth::BluetoothGattService> service) { return call_method<SCAPIX_META_STRING("addService"), jboolean>(service); }
inline jboolean BluetoothGattServer::removeService(ref<android::bluetooth::BluetoothGattService> service) { return call_method<SCAPIX_META_STRING("removeService"), jboolean>(service); }
inline void BluetoothGattServer::clearServices() { return call_method<SCAPIX_META_STRING("clearServices"), void>(); }
inline ref<java::util::List> BluetoothGattServer::getServices() { return call_method<SCAPIX_META_STRING("getServices"), ref<java::util::List>>(); }
inline ref<android::bluetooth::BluetoothGattService> BluetoothGattServer::getService(ref<java::util::UUID> uuid) { return call_method<SCAPIX_META_STRING("getService"), ref<android::bluetooth::BluetoothGattService>>(uuid); }
inline jint BluetoothGattServer::getConnectionState(ref<android::bluetooth::BluetoothDevice> device) { return call_method<SCAPIX_META_STRING("getConnectionState"), jint>(device); }
inline ref<java::util::List> BluetoothGattServer::getConnectedDevices() { return call_method<SCAPIX_META_STRING("getConnectedDevices"), ref<java::util::List>>(); }
inline ref<java::util::List> BluetoothGattServer::getDevicesMatchingConnectionStates(ref<link::java::array<jint>> states) { return call_method<SCAPIX_META_STRING("getDevicesMatchingConnectionStates"), ref<java::util::List>>(states); }

} // namespace android::bluetooth
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHGATTSERVER_H
