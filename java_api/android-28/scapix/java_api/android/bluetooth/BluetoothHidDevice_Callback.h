// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHHIDDEVICE_CALLBACK_H
#define SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHHIDDEVICE_CALLBACK_H

namespace scapix::java_api {

namespace android::bluetooth { class BluetoothDevice; }

namespace android::bluetooth {

class BluetoothHidDevice_Callback : public object_base<SCAPIX_META_STRING("android/bluetooth/BluetoothHidDevice$Callback"),
	java::lang::Object>
{
public:

	static ref<BluetoothHidDevice_Callback> new_object();
	void onAppStatusChanged(ref<android::bluetooth::BluetoothDevice> pluggedDevice, jboolean registered);
	void onConnectionStateChanged(ref<android::bluetooth::BluetoothDevice> device, jint state);
	void onGetReport(ref<android::bluetooth::BluetoothDevice> device, jbyte type, jbyte id, jint bufferSize);
	void onSetReport(ref<android::bluetooth::BluetoothDevice> device, jbyte type, jbyte id, ref<link::java::array<jbyte>> data);
	void onSetProtocol(ref<android::bluetooth::BluetoothDevice> device, jbyte protocol);
	void onInterruptData(ref<android::bluetooth::BluetoothDevice> device, jbyte reportId, ref<link::java::array<jbyte>> data);
	void onVirtualCableUnplug(ref<android::bluetooth::BluetoothDevice> device);

protected:

	BluetoothHidDevice_Callback(handle_type h) : base_(h) {}

};

} // namespace android::bluetooth
} // namespace scapix::java_api

#include <scapix/java_api/android/bluetooth/BluetoothDevice.h>

namespace scapix::java_api {
namespace android::bluetooth {

inline ref<BluetoothHidDevice_Callback> BluetoothHidDevice_Callback::new_object() { return base_::new_object(); }
inline void BluetoothHidDevice_Callback::onAppStatusChanged(ref<android::bluetooth::BluetoothDevice> pluggedDevice, jboolean registered) { return call_method<SCAPIX_META_STRING("onAppStatusChanged"), void>(pluggedDevice, registered); }
inline void BluetoothHidDevice_Callback::onConnectionStateChanged(ref<android::bluetooth::BluetoothDevice> device, jint state) { return call_method<SCAPIX_META_STRING("onConnectionStateChanged"), void>(device, state); }
inline void BluetoothHidDevice_Callback::onGetReport(ref<android::bluetooth::BluetoothDevice> device, jbyte type, jbyte id, jint bufferSize) { return call_method<SCAPIX_META_STRING("onGetReport"), void>(device, type, id, bufferSize); }
inline void BluetoothHidDevice_Callback::onSetReport(ref<android::bluetooth::BluetoothDevice> device, jbyte type, jbyte id, ref<link::java::array<jbyte>> data) { return call_method<SCAPIX_META_STRING("onSetReport"), void>(device, type, id, data); }
inline void BluetoothHidDevice_Callback::onSetProtocol(ref<android::bluetooth::BluetoothDevice> device, jbyte protocol) { return call_method<SCAPIX_META_STRING("onSetProtocol"), void>(device, protocol); }
inline void BluetoothHidDevice_Callback::onInterruptData(ref<android::bluetooth::BluetoothDevice> device, jbyte reportId, ref<link::java::array<jbyte>> data) { return call_method<SCAPIX_META_STRING("onInterruptData"), void>(device, reportId, data); }
inline void BluetoothHidDevice_Callback::onVirtualCableUnplug(ref<android::bluetooth::BluetoothDevice> device) { return call_method<SCAPIX_META_STRING("onVirtualCableUnplug"), void>(device); }

} // namespace android::bluetooth
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHHIDDEVICE_CALLBACK_H
