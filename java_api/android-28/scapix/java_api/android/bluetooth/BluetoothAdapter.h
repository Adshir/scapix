// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHADAPTER_H
#define SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHADAPTER_H

namespace scapix::java_api {

namespace android::bluetooth { class BluetoothAdapter_LeScanCallback; }
namespace android::bluetooth { class BluetoothDevice; }
namespace android::bluetooth { class BluetoothProfile; }
namespace android::bluetooth { class BluetoothProfile_ServiceListener; }
namespace android::bluetooth { class BluetoothServerSocket; }
namespace android::bluetooth::le { class BluetoothLeAdvertiser; }
namespace android::bluetooth::le { class BluetoothLeScanner; }
namespace android::content { class Context; }
namespace java::lang { class String; }
namespace java::util { class Set; }
namespace java::util { class UUID; }

namespace android::bluetooth {

class BluetoothAdapter : public object_base<SCAPIX_META_STRING("android/bluetooth/BluetoothAdapter"),
	java::lang::Object>
{
public:

	using LeScanCallback = BluetoothAdapter_LeScanCallback;

	static ref<java::lang::String> ACTION_CONNECTION_STATE_CHANGED_();
	static ref<java::lang::String> ACTION_DISCOVERY_FINISHED_();
	static ref<java::lang::String> ACTION_DISCOVERY_STARTED_();
	static ref<java::lang::String> ACTION_LOCAL_NAME_CHANGED_();
	static ref<java::lang::String> ACTION_REQUEST_DISCOVERABLE_();
	static ref<java::lang::String> ACTION_REQUEST_ENABLE_();
	static ref<java::lang::String> ACTION_SCAN_MODE_CHANGED_();
	static ref<java::lang::String> ACTION_STATE_CHANGED_();
	static jint ERROR_();
	static ref<java::lang::String> EXTRA_CONNECTION_STATE_();
	static ref<java::lang::String> EXTRA_DISCOVERABLE_DURATION_();
	static ref<java::lang::String> EXTRA_LOCAL_NAME_();
	static ref<java::lang::String> EXTRA_PREVIOUS_CONNECTION_STATE_();
	static ref<java::lang::String> EXTRA_PREVIOUS_SCAN_MODE_();
	static ref<java::lang::String> EXTRA_PREVIOUS_STATE_();
	static ref<java::lang::String> EXTRA_SCAN_MODE_();
	static ref<java::lang::String> EXTRA_STATE_();
	static jint SCAN_MODE_CONNECTABLE_();
	static jint SCAN_MODE_CONNECTABLE_DISCOVERABLE_();
	static jint SCAN_MODE_NONE_();
	static jint STATE_CONNECTED_();
	static jint STATE_CONNECTING_();
	static jint STATE_DISCONNECTED_();
	static jint STATE_DISCONNECTING_();
	static jint STATE_OFF_();
	static jint STATE_ON_();
	static jint STATE_TURNING_OFF_();
	static jint STATE_TURNING_ON_();

	static ref<android::bluetooth::BluetoothAdapter> getDefaultAdapter();
	ref<android::bluetooth::BluetoothDevice> getRemoteDevice(ref<java::lang::String> address);
	ref<android::bluetooth::BluetoothDevice> getRemoteDevice(ref<link::java::array<jbyte>> address);
	ref<android::bluetooth::le::BluetoothLeAdvertiser> getBluetoothLeAdvertiser();
	ref<android::bluetooth::le::BluetoothLeScanner> getBluetoothLeScanner();
	jboolean isEnabled();
	jint getState();
	jboolean enable();
	jboolean disable();
	ref<java::lang::String> getAddress();
	ref<java::lang::String> getName();
	jboolean setName(ref<java::lang::String> name);
	jint getScanMode();
	jboolean startDiscovery();
	jboolean cancelDiscovery();
	jboolean isDiscovering();
	jboolean isMultipleAdvertisementSupported();
	jboolean isOffloadedFilteringSupported();
	jboolean isOffloadedScanBatchingSupported();
	jboolean isLe2MPhySupported();
	jboolean isLeCodedPhySupported();
	jboolean isLeExtendedAdvertisingSupported();
	jboolean isLePeriodicAdvertisingSupported();
	jint getLeMaximumAdvertisingDataLength();
	ref<java::util::Set> getBondedDevices();
	jint getProfileConnectionState(jint profile);
	ref<android::bluetooth::BluetoothServerSocket> listenUsingRfcommWithServiceRecord(ref<java::lang::String> name, ref<java::util::UUID> uuid);
	ref<android::bluetooth::BluetoothServerSocket> listenUsingInsecureRfcommWithServiceRecord(ref<java::lang::String> name, ref<java::util::UUID> uuid);
	jboolean getProfileProxy(ref<android::content::Context> context, ref<android::bluetooth::BluetoothProfile_ServiceListener> listener, jint profile);
	void closeProfileProxy(jint profile, ref<android::bluetooth::BluetoothProfile> proxy);
	static jboolean checkBluetoothAddress(ref<java::lang::String> address);
	jboolean startLeScan(ref<android::bluetooth::BluetoothAdapter_LeScanCallback> callback);
	jboolean startLeScan(ref<link::java::array<java::util::UUID>> serviceUuids, ref<android::bluetooth::BluetoothAdapter_LeScanCallback> callback);
	void stopLeScan(ref<android::bluetooth::BluetoothAdapter_LeScanCallback> callback);

protected:

	BluetoothAdapter(handle_type h) : base_(h) {}

};

} // namespace android::bluetooth
} // namespace scapix::java_api

#include <scapix/java_api/android/bluetooth/BluetoothAdapter_LeScanCallback.h>
#include <scapix/java_api/android/bluetooth/BluetoothDevice.h>
#include <scapix/java_api/android/bluetooth/BluetoothProfile.h>
#include <scapix/java_api/android/bluetooth/BluetoothProfile_ServiceListener.h>
#include <scapix/java_api/android/bluetooth/BluetoothServerSocket.h>
#include <scapix/java_api/android/bluetooth/le/BluetoothLeAdvertiser.h>
#include <scapix/java_api/android/bluetooth/le/BluetoothLeScanner.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/UUID.h>

namespace scapix::java_api {
namespace android::bluetooth {

inline ref<java::lang::String> BluetoothAdapter::ACTION_CONNECTION_STATE_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_CONNECTION_STATE_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothAdapter::ACTION_DISCOVERY_FINISHED_() { return get_static_field<SCAPIX_META_STRING("ACTION_DISCOVERY_FINISHED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothAdapter::ACTION_DISCOVERY_STARTED_() { return get_static_field<SCAPIX_META_STRING("ACTION_DISCOVERY_STARTED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothAdapter::ACTION_LOCAL_NAME_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_LOCAL_NAME_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothAdapter::ACTION_REQUEST_DISCOVERABLE_() { return get_static_field<SCAPIX_META_STRING("ACTION_REQUEST_DISCOVERABLE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothAdapter::ACTION_REQUEST_ENABLE_() { return get_static_field<SCAPIX_META_STRING("ACTION_REQUEST_ENABLE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothAdapter::ACTION_SCAN_MODE_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_SCAN_MODE_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothAdapter::ACTION_STATE_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_STATE_CHANGED"), ref<java::lang::String>>(); }
inline jint BluetoothAdapter::ERROR_() { return get_static_field<SCAPIX_META_STRING("ERROR"), jint>(); }
inline ref<java::lang::String> BluetoothAdapter::EXTRA_CONNECTION_STATE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_CONNECTION_STATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothAdapter::EXTRA_DISCOVERABLE_DURATION_() { return get_static_field<SCAPIX_META_STRING("EXTRA_DISCOVERABLE_DURATION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothAdapter::EXTRA_LOCAL_NAME_() { return get_static_field<SCAPIX_META_STRING("EXTRA_LOCAL_NAME"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothAdapter::EXTRA_PREVIOUS_CONNECTION_STATE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PREVIOUS_CONNECTION_STATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothAdapter::EXTRA_PREVIOUS_SCAN_MODE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PREVIOUS_SCAN_MODE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothAdapter::EXTRA_PREVIOUS_STATE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_PREVIOUS_STATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothAdapter::EXTRA_SCAN_MODE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_SCAN_MODE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothAdapter::EXTRA_STATE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_STATE"), ref<java::lang::String>>(); }
inline jint BluetoothAdapter::SCAN_MODE_CONNECTABLE_() { return get_static_field<SCAPIX_META_STRING("SCAN_MODE_CONNECTABLE"), jint>(); }
inline jint BluetoothAdapter::SCAN_MODE_CONNECTABLE_DISCOVERABLE_() { return get_static_field<SCAPIX_META_STRING("SCAN_MODE_CONNECTABLE_DISCOVERABLE"), jint>(); }
inline jint BluetoothAdapter::SCAN_MODE_NONE_() { return get_static_field<SCAPIX_META_STRING("SCAN_MODE_NONE"), jint>(); }
inline jint BluetoothAdapter::STATE_CONNECTED_() { return get_static_field<SCAPIX_META_STRING("STATE_CONNECTED"), jint>(); }
inline jint BluetoothAdapter::STATE_CONNECTING_() { return get_static_field<SCAPIX_META_STRING("STATE_CONNECTING"), jint>(); }
inline jint BluetoothAdapter::STATE_DISCONNECTED_() { return get_static_field<SCAPIX_META_STRING("STATE_DISCONNECTED"), jint>(); }
inline jint BluetoothAdapter::STATE_DISCONNECTING_() { return get_static_field<SCAPIX_META_STRING("STATE_DISCONNECTING"), jint>(); }
inline jint BluetoothAdapter::STATE_OFF_() { return get_static_field<SCAPIX_META_STRING("STATE_OFF"), jint>(); }
inline jint BluetoothAdapter::STATE_ON_() { return get_static_field<SCAPIX_META_STRING("STATE_ON"), jint>(); }
inline jint BluetoothAdapter::STATE_TURNING_OFF_() { return get_static_field<SCAPIX_META_STRING("STATE_TURNING_OFF"), jint>(); }
inline jint BluetoothAdapter::STATE_TURNING_ON_() { return get_static_field<SCAPIX_META_STRING("STATE_TURNING_ON"), jint>(); }
inline ref<android::bluetooth::BluetoothAdapter> BluetoothAdapter::getDefaultAdapter() { return call_static_method<SCAPIX_META_STRING("getDefaultAdapter"), ref<android::bluetooth::BluetoothAdapter>>(); }
inline ref<android::bluetooth::BluetoothDevice> BluetoothAdapter::getRemoteDevice(ref<java::lang::String> address) { return call_method<SCAPIX_META_STRING("getRemoteDevice"), ref<android::bluetooth::BluetoothDevice>>(address); }
inline ref<android::bluetooth::BluetoothDevice> BluetoothAdapter::getRemoteDevice(ref<link::java::array<jbyte>> address) { return call_method<SCAPIX_META_STRING("getRemoteDevice"), ref<android::bluetooth::BluetoothDevice>>(address); }
inline ref<android::bluetooth::le::BluetoothLeAdvertiser> BluetoothAdapter::getBluetoothLeAdvertiser() { return call_method<SCAPIX_META_STRING("getBluetoothLeAdvertiser"), ref<android::bluetooth::le::BluetoothLeAdvertiser>>(); }
inline ref<android::bluetooth::le::BluetoothLeScanner> BluetoothAdapter::getBluetoothLeScanner() { return call_method<SCAPIX_META_STRING("getBluetoothLeScanner"), ref<android::bluetooth::le::BluetoothLeScanner>>(); }
inline jboolean BluetoothAdapter::isEnabled() { return call_method<SCAPIX_META_STRING("isEnabled"), jboolean>(); }
inline jint BluetoothAdapter::getState() { return call_method<SCAPIX_META_STRING("getState"), jint>(); }
inline jboolean BluetoothAdapter::enable() { return call_method<SCAPIX_META_STRING("enable"), jboolean>(); }
inline jboolean BluetoothAdapter::disable() { return call_method<SCAPIX_META_STRING("disable"), jboolean>(); }
inline ref<java::lang::String> BluetoothAdapter::getAddress() { return call_method<SCAPIX_META_STRING("getAddress"), ref<java::lang::String>>(); }
inline ref<java::lang::String> BluetoothAdapter::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline jboolean BluetoothAdapter::setName(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("setName"), jboolean>(name); }
inline jint BluetoothAdapter::getScanMode() { return call_method<SCAPIX_META_STRING("getScanMode"), jint>(); }
inline jboolean BluetoothAdapter::startDiscovery() { return call_method<SCAPIX_META_STRING("startDiscovery"), jboolean>(); }
inline jboolean BluetoothAdapter::cancelDiscovery() { return call_method<SCAPIX_META_STRING("cancelDiscovery"), jboolean>(); }
inline jboolean BluetoothAdapter::isDiscovering() { return call_method<SCAPIX_META_STRING("isDiscovering"), jboolean>(); }
inline jboolean BluetoothAdapter::isMultipleAdvertisementSupported() { return call_method<SCAPIX_META_STRING("isMultipleAdvertisementSupported"), jboolean>(); }
inline jboolean BluetoothAdapter::isOffloadedFilteringSupported() { return call_method<SCAPIX_META_STRING("isOffloadedFilteringSupported"), jboolean>(); }
inline jboolean BluetoothAdapter::isOffloadedScanBatchingSupported() { return call_method<SCAPIX_META_STRING("isOffloadedScanBatchingSupported"), jboolean>(); }
inline jboolean BluetoothAdapter::isLe2MPhySupported() { return call_method<SCAPIX_META_STRING("isLe2MPhySupported"), jboolean>(); }
inline jboolean BluetoothAdapter::isLeCodedPhySupported() { return call_method<SCAPIX_META_STRING("isLeCodedPhySupported"), jboolean>(); }
inline jboolean BluetoothAdapter::isLeExtendedAdvertisingSupported() { return call_method<SCAPIX_META_STRING("isLeExtendedAdvertisingSupported"), jboolean>(); }
inline jboolean BluetoothAdapter::isLePeriodicAdvertisingSupported() { return call_method<SCAPIX_META_STRING("isLePeriodicAdvertisingSupported"), jboolean>(); }
inline jint BluetoothAdapter::getLeMaximumAdvertisingDataLength() { return call_method<SCAPIX_META_STRING("getLeMaximumAdvertisingDataLength"), jint>(); }
inline ref<java::util::Set> BluetoothAdapter::getBondedDevices() { return call_method<SCAPIX_META_STRING("getBondedDevices"), ref<java::util::Set>>(); }
inline jint BluetoothAdapter::getProfileConnectionState(jint profile) { return call_method<SCAPIX_META_STRING("getProfileConnectionState"), jint>(profile); }
inline ref<android::bluetooth::BluetoothServerSocket> BluetoothAdapter::listenUsingRfcommWithServiceRecord(ref<java::lang::String> name, ref<java::util::UUID> uuid) { return call_method<SCAPIX_META_STRING("listenUsingRfcommWithServiceRecord"), ref<android::bluetooth::BluetoothServerSocket>>(name, uuid); }
inline ref<android::bluetooth::BluetoothServerSocket> BluetoothAdapter::listenUsingInsecureRfcommWithServiceRecord(ref<java::lang::String> name, ref<java::util::UUID> uuid) { return call_method<SCAPIX_META_STRING("listenUsingInsecureRfcommWithServiceRecord"), ref<android::bluetooth::BluetoothServerSocket>>(name, uuid); }
inline jboolean BluetoothAdapter::getProfileProxy(ref<android::content::Context> context, ref<android::bluetooth::BluetoothProfile_ServiceListener> listener, jint profile) { return call_method<SCAPIX_META_STRING("getProfileProxy"), jboolean>(context, listener, profile); }
inline void BluetoothAdapter::closeProfileProxy(jint profile, ref<android::bluetooth::BluetoothProfile> proxy) { return call_method<SCAPIX_META_STRING("closeProfileProxy"), void>(profile, proxy); }
inline jboolean BluetoothAdapter::checkBluetoothAddress(ref<java::lang::String> address) { return call_static_method<SCAPIX_META_STRING("checkBluetoothAddress"), jboolean>(address); }
inline jboolean BluetoothAdapter::startLeScan(ref<android::bluetooth::BluetoothAdapter_LeScanCallback> callback) { return call_method<SCAPIX_META_STRING("startLeScan"), jboolean>(callback); }
inline jboolean BluetoothAdapter::startLeScan(ref<link::java::array<java::util::UUID>> serviceUuids, ref<android::bluetooth::BluetoothAdapter_LeScanCallback> callback) { return call_method<SCAPIX_META_STRING("startLeScan"), jboolean>(serviceUuids, callback); }
inline void BluetoothAdapter::stopLeScan(ref<android::bluetooth::BluetoothAdapter_LeScanCallback> callback) { return call_method<SCAPIX_META_STRING("stopLeScan"), void>(callback); }

} // namespace android::bluetooth
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHADAPTER_H
