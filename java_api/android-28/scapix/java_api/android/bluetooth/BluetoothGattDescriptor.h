// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHGATTDESCRIPTOR_H
#define SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHGATTDESCRIPTOR_H

namespace scapix::java_api {

namespace android::bluetooth { class BluetoothGattCharacteristic; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::util { class UUID; }

namespace android::bluetooth {

class BluetoothGattDescriptor : public object_base<SCAPIX_META_STRING("android/bluetooth/BluetoothGattDescriptor"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static ref<link::java::array<jbyte>> DISABLE_NOTIFICATION_VALUE_();
	static ref<link::java::array<jbyte>> ENABLE_INDICATION_VALUE_();
	static ref<link::java::array<jbyte>> ENABLE_NOTIFICATION_VALUE_();
	static jint PERMISSION_READ_();
	static jint PERMISSION_READ_ENCRYPTED_();
	static jint PERMISSION_READ_ENCRYPTED_MITM_();
	static jint PERMISSION_WRITE_();
	static jint PERMISSION_WRITE_ENCRYPTED_();
	static jint PERMISSION_WRITE_ENCRYPTED_MITM_();
	static jint PERMISSION_WRITE_SIGNED_();
	static jint PERMISSION_WRITE_SIGNED_MITM_();

	static ref<BluetoothGattDescriptor> new_object(ref<java::util::UUID> uuid, jint permissions);
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint flags);
	ref<android::bluetooth::BluetoothGattCharacteristic> getCharacteristic();
	ref<java::util::UUID> getUuid();
	jint getPermissions();
	ref<link::java::array<jbyte>> getValue();
	jboolean setValue(ref<link::java::array<jbyte>> value);

protected:

	BluetoothGattDescriptor(handle_type h) : base_(h) {}

};

} // namespace android::bluetooth
} // namespace scapix::java_api

#include <scapix/java_api/android/bluetooth/BluetoothGattCharacteristic.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/util/UUID.h>

namespace scapix::java_api {
namespace android::bluetooth {

inline ref<android::os::Parcelable_Creator> BluetoothGattDescriptor::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<link::java::array<jbyte>> BluetoothGattDescriptor::DISABLE_NOTIFICATION_VALUE_() { return get_static_field<SCAPIX_META_STRING("DISABLE_NOTIFICATION_VALUE"), ref<link::java::array<jbyte>>>(); }
inline ref<link::java::array<jbyte>> BluetoothGattDescriptor::ENABLE_INDICATION_VALUE_() { return get_static_field<SCAPIX_META_STRING("ENABLE_INDICATION_VALUE"), ref<link::java::array<jbyte>>>(); }
inline ref<link::java::array<jbyte>> BluetoothGattDescriptor::ENABLE_NOTIFICATION_VALUE_() { return get_static_field<SCAPIX_META_STRING("ENABLE_NOTIFICATION_VALUE"), ref<link::java::array<jbyte>>>(); }
inline jint BluetoothGattDescriptor::PERMISSION_READ_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_READ"), jint>(); }
inline jint BluetoothGattDescriptor::PERMISSION_READ_ENCRYPTED_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_READ_ENCRYPTED"), jint>(); }
inline jint BluetoothGattDescriptor::PERMISSION_READ_ENCRYPTED_MITM_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_READ_ENCRYPTED_MITM"), jint>(); }
inline jint BluetoothGattDescriptor::PERMISSION_WRITE_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_WRITE"), jint>(); }
inline jint BluetoothGattDescriptor::PERMISSION_WRITE_ENCRYPTED_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_WRITE_ENCRYPTED"), jint>(); }
inline jint BluetoothGattDescriptor::PERMISSION_WRITE_ENCRYPTED_MITM_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_WRITE_ENCRYPTED_MITM"), jint>(); }
inline jint BluetoothGattDescriptor::PERMISSION_WRITE_SIGNED_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_WRITE_SIGNED"), jint>(); }
inline jint BluetoothGattDescriptor::PERMISSION_WRITE_SIGNED_MITM_() { return get_static_field<SCAPIX_META_STRING("PERMISSION_WRITE_SIGNED_MITM"), jint>(); }
inline ref<BluetoothGattDescriptor> BluetoothGattDescriptor::new_object(ref<java::util::UUID> uuid, jint permissions) { return base_::new_object(uuid, permissions); }
inline jint BluetoothGattDescriptor::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void BluetoothGattDescriptor::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }
inline ref<android::bluetooth::BluetoothGattCharacteristic> BluetoothGattDescriptor::getCharacteristic() { return call_method<SCAPIX_META_STRING("getCharacteristic"), ref<android::bluetooth::BluetoothGattCharacteristic>>(); }
inline ref<java::util::UUID> BluetoothGattDescriptor::getUuid() { return call_method<SCAPIX_META_STRING("getUuid"), ref<java::util::UUID>>(); }
inline jint BluetoothGattDescriptor::getPermissions() { return call_method<SCAPIX_META_STRING("getPermissions"), jint>(); }
inline ref<link::java::array<jbyte>> BluetoothGattDescriptor::getValue() { return call_method<SCAPIX_META_STRING("getValue"), ref<link::java::array<jbyte>>>(); }
inline jboolean BluetoothGattDescriptor::setValue(ref<link::java::array<jbyte>> value) { return call_method<SCAPIX_META_STRING("setValue"), jboolean>(value); }

} // namespace android::bluetooth
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHGATTDESCRIPTOR_H
