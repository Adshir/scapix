// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHSOCKET_H
#define SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHSOCKET_H

namespace scapix::java_api {

namespace android::bluetooth { class BluetoothDevice; }
namespace java::io { class InputStream; }
namespace java::io { class OutputStream; }

namespace android::bluetooth {

class BluetoothSocket : public object_base<SCAPIX_META_STRING("android/bluetooth/BluetoothSocket"),
	java::lang::Object,
	java::io::Closeable>
{
public:

	static jint TYPE_L2CAP_();
	static jint TYPE_RFCOMM_();
	static jint TYPE_SCO_();

	ref<android::bluetooth::BluetoothDevice> getRemoteDevice();
	ref<java::io::InputStream> getInputStream();
	ref<java::io::OutputStream> getOutputStream();
	jboolean isConnected();
	void connect();
	void close();
	jint getMaxTransmitPacketSize();
	jint getMaxReceivePacketSize();
	jint getConnectionType();

protected:

	BluetoothSocket(handle_type h) : base_(h) {}

};

} // namespace android::bluetooth
} // namespace scapix::java_api

#include <scapix/java_api/android/bluetooth/BluetoothDevice.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>

namespace scapix::java_api {
namespace android::bluetooth {

inline jint BluetoothSocket::TYPE_L2CAP_() { return get_static_field<SCAPIX_META_STRING("TYPE_L2CAP"), jint>(); }
inline jint BluetoothSocket::TYPE_RFCOMM_() { return get_static_field<SCAPIX_META_STRING("TYPE_RFCOMM"), jint>(); }
inline jint BluetoothSocket::TYPE_SCO_() { return get_static_field<SCAPIX_META_STRING("TYPE_SCO"), jint>(); }
inline ref<android::bluetooth::BluetoothDevice> BluetoothSocket::getRemoteDevice() { return call_method<SCAPIX_META_STRING("getRemoteDevice"), ref<android::bluetooth::BluetoothDevice>>(); }
inline ref<java::io::InputStream> BluetoothSocket::getInputStream() { return call_method<SCAPIX_META_STRING("getInputStream"), ref<java::io::InputStream>>(); }
inline ref<java::io::OutputStream> BluetoothSocket::getOutputStream() { return call_method<SCAPIX_META_STRING("getOutputStream"), ref<java::io::OutputStream>>(); }
inline jboolean BluetoothSocket::isConnected() { return call_method<SCAPIX_META_STRING("isConnected"), jboolean>(); }
inline void BluetoothSocket::connect() { return call_method<SCAPIX_META_STRING("connect"), void>(); }
inline void BluetoothSocket::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jint BluetoothSocket::getMaxTransmitPacketSize() { return call_method<SCAPIX_META_STRING("getMaxTransmitPacketSize"), jint>(); }
inline jint BluetoothSocket::getMaxReceivePacketSize() { return call_method<SCAPIX_META_STRING("getMaxReceivePacketSize"), jint>(); }
inline jint BluetoothSocket::getConnectionType() { return call_method<SCAPIX_META_STRING("getConnectionType"), jint>(); }

} // namespace android::bluetooth
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_BLUETOOTH_BLUETOOTHSOCKET_H
