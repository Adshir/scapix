// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_OPENGL_GLES20_H
#define SCAPIX_ANDROID_OPENGL_GLES20_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::nio { class Buffer; }
namespace java::nio { class FloatBuffer; }
namespace java::nio { class IntBuffer; }

namespace android::opengl {

class GLES20 : public object_base<SCAPIX_META_STRING("android/opengl/GLES20"),
	java::lang::Object>
{
public:

	static jint GL_ACTIVE_ATTRIBUTES_();
	static jint GL_ACTIVE_ATTRIBUTE_MAX_LENGTH_();
	static jint GL_ACTIVE_TEXTURE_();
	static jint GL_ACTIVE_UNIFORMS_();
	static jint GL_ACTIVE_UNIFORM_MAX_LENGTH_();
	static jint GL_ALIASED_LINE_WIDTH_RANGE_();
	static jint GL_ALIASED_POINT_SIZE_RANGE_();
	static jint GL_ALPHA_();
	static jint GL_ALPHA_BITS_();
	static jint GL_ALWAYS_();
	static jint GL_ARRAY_BUFFER_();
	static jint GL_ARRAY_BUFFER_BINDING_();
	static jint GL_ATTACHED_SHADERS_();
	static jint GL_BACK_();
	static jint GL_BLEND_();
	static jint GL_BLEND_COLOR_();
	static jint GL_BLEND_DST_ALPHA_();
	static jint GL_BLEND_DST_RGB_();
	static jint GL_BLEND_EQUATION_();
	static jint GL_BLEND_EQUATION_ALPHA_();
	static jint GL_BLEND_EQUATION_RGB_();
	static jint GL_BLEND_SRC_ALPHA_();
	static jint GL_BLEND_SRC_RGB_();
	static jint GL_BLUE_BITS_();
	static jint GL_BOOL_();
	static jint GL_BOOL_VEC2_();
	static jint GL_BOOL_VEC3_();
	static jint GL_BOOL_VEC4_();
	static jint GL_BUFFER_SIZE_();
	static jint GL_BUFFER_USAGE_();
	static jint GL_BYTE_();
	static jint GL_CCW_();
	static jint GL_CLAMP_TO_EDGE_();
	static jint GL_COLOR_ATTACHMENT0_();
	static jint GL_COLOR_BUFFER_BIT_();
	static jint GL_COLOR_CLEAR_VALUE_();
	static jint GL_COLOR_WRITEMASK_();
	static jint GL_COMPILE_STATUS_();
	static jint GL_COMPRESSED_TEXTURE_FORMATS_();
	static jint GL_CONSTANT_ALPHA_();
	static jint GL_CONSTANT_COLOR_();
	static jint GL_CULL_FACE_();
	static jint GL_CULL_FACE_MODE_();
	static jint GL_CURRENT_PROGRAM_();
	static jint GL_CURRENT_VERTEX_ATTRIB_();
	static jint GL_CW_();
	static jint GL_DECR_();
	static jint GL_DECR_WRAP_();
	static jint GL_DELETE_STATUS_();
	static jint GL_DEPTH_ATTACHMENT_();
	static jint GL_DEPTH_BITS_();
	static jint GL_DEPTH_BUFFER_BIT_();
	static jint GL_DEPTH_CLEAR_VALUE_();
	static jint GL_DEPTH_COMPONENT_();
	static jint GL_DEPTH_COMPONENT16_();
	static jint GL_DEPTH_FUNC_();
	static jint GL_DEPTH_RANGE_();
	static jint GL_DEPTH_TEST_();
	static jint GL_DEPTH_WRITEMASK_();
	static jint GL_DITHER_();
	static jint GL_DONT_CARE_();
	static jint GL_DST_ALPHA_();
	static jint GL_DST_COLOR_();
	static jint GL_DYNAMIC_DRAW_();
	static jint GL_ELEMENT_ARRAY_BUFFER_();
	static jint GL_ELEMENT_ARRAY_BUFFER_BINDING_();
	static jint GL_EQUAL_();
	static jint GL_EXTENSIONS_();
	static jint GL_FALSE_();
	static jint GL_FASTEST_();
	static jint GL_FIXED_();
	static jint GL_FLOAT_();
	static jint GL_FLOAT_MAT2_();
	static jint GL_FLOAT_MAT3_();
	static jint GL_FLOAT_MAT4_();
	static jint GL_FLOAT_VEC2_();
	static jint GL_FLOAT_VEC3_();
	static jint GL_FLOAT_VEC4_();
	static jint GL_FRAGMENT_SHADER_();
	static jint GL_FRAMEBUFFER_();
	static jint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_();
	static jint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_();
	static jint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_();
	static jint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_();
	static jint GL_FRAMEBUFFER_BINDING_();
	static jint GL_FRAMEBUFFER_COMPLETE_();
	static jint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_();
	static jint GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_();
	static jint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_();
	static jint GL_FRAMEBUFFER_UNSUPPORTED_();
	static jint GL_FRONT_();
	static jint GL_FRONT_AND_BACK_();
	static jint GL_FRONT_FACE_();
	static jint GL_FUNC_ADD_();
	static jint GL_FUNC_REVERSE_SUBTRACT_();
	static jint GL_FUNC_SUBTRACT_();
	static jint GL_GENERATE_MIPMAP_HINT_();
	static jint GL_GEQUAL_();
	static jint GL_GREATER_();
	static jint GL_GREEN_BITS_();
	static jint GL_HIGH_FLOAT_();
	static jint GL_HIGH_INT_();
	static jint GL_IMPLEMENTATION_COLOR_READ_FORMAT_();
	static jint GL_IMPLEMENTATION_COLOR_READ_TYPE_();
	static jint GL_INCR_();
	static jint GL_INCR_WRAP_();
	static jint GL_INFO_LOG_LENGTH_();
	static jint GL_INT_();
	static jint GL_INT_VEC2_();
	static jint GL_INT_VEC3_();
	static jint GL_INT_VEC4_();
	static jint GL_INVALID_ENUM_();
	static jint GL_INVALID_FRAMEBUFFER_OPERATION_();
	static jint GL_INVALID_OPERATION_();
	static jint GL_INVALID_VALUE_();
	static jint GL_INVERT_();
	static jint GL_KEEP_();
	static jint GL_LEQUAL_();
	static jint GL_LESS_();
	static jint GL_LINEAR_();
	static jint GL_LINEAR_MIPMAP_LINEAR_();
	static jint GL_LINEAR_MIPMAP_NEAREST_();
	static jint GL_LINES_();
	static jint GL_LINE_LOOP_();
	static jint GL_LINE_STRIP_();
	static jint GL_LINE_WIDTH_();
	static jint GL_LINK_STATUS_();
	static jint GL_LOW_FLOAT_();
	static jint GL_LOW_INT_();
	static jint GL_LUMINANCE_();
	static jint GL_LUMINANCE_ALPHA_();
	static jint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_();
	static jint GL_MAX_CUBE_MAP_TEXTURE_SIZE_();
	static jint GL_MAX_FRAGMENT_UNIFORM_VECTORS_();
	static jint GL_MAX_RENDERBUFFER_SIZE_();
	static jint GL_MAX_TEXTURE_IMAGE_UNITS_();
	static jint GL_MAX_TEXTURE_SIZE_();
	static jint GL_MAX_VARYING_VECTORS_();
	static jint GL_MAX_VERTEX_ATTRIBS_();
	static jint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_();
	static jint GL_MAX_VERTEX_UNIFORM_VECTORS_();
	static jint GL_MAX_VIEWPORT_DIMS_();
	static jint GL_MEDIUM_FLOAT_();
	static jint GL_MEDIUM_INT_();
	static jint GL_MIRRORED_REPEAT_();
	static jint GL_NEAREST_();
	static jint GL_NEAREST_MIPMAP_LINEAR_();
	static jint GL_NEAREST_MIPMAP_NEAREST_();
	static jint GL_NEVER_();
	static jint GL_NICEST_();
	static jint GL_NONE_();
	static jint GL_NOTEQUAL_();
	static jint GL_NO_ERROR_();
	static jint GL_NUM_COMPRESSED_TEXTURE_FORMATS_();
	static jint GL_NUM_SHADER_BINARY_FORMATS_();
	static jint GL_ONE_();
	static jint GL_ONE_MINUS_CONSTANT_ALPHA_();
	static jint GL_ONE_MINUS_CONSTANT_COLOR_();
	static jint GL_ONE_MINUS_DST_ALPHA_();
	static jint GL_ONE_MINUS_DST_COLOR_();
	static jint GL_ONE_MINUS_SRC_ALPHA_();
	static jint GL_ONE_MINUS_SRC_COLOR_();
	static jint GL_OUT_OF_MEMORY_();
	static jint GL_PACK_ALIGNMENT_();
	static jint GL_POINTS_();
	static jint GL_POLYGON_OFFSET_FACTOR_();
	static jint GL_POLYGON_OFFSET_FILL_();
	static jint GL_POLYGON_OFFSET_UNITS_();
	static jint GL_RED_BITS_();
	static jint GL_RENDERBUFFER_();
	static jint GL_RENDERBUFFER_ALPHA_SIZE_();
	static jint GL_RENDERBUFFER_BINDING_();
	static jint GL_RENDERBUFFER_BLUE_SIZE_();
	static jint GL_RENDERBUFFER_DEPTH_SIZE_();
	static jint GL_RENDERBUFFER_GREEN_SIZE_();
	static jint GL_RENDERBUFFER_HEIGHT_();
	static jint GL_RENDERBUFFER_INTERNAL_FORMAT_();
	static jint GL_RENDERBUFFER_RED_SIZE_();
	static jint GL_RENDERBUFFER_STENCIL_SIZE_();
	static jint GL_RENDERBUFFER_WIDTH_();
	static jint GL_RENDERER_();
	static jint GL_REPEAT_();
	static jint GL_REPLACE_();
	static jint GL_RGB_();
	static jint GL_RGB565_();
	static jint GL_RGB5_A1_();
	static jint GL_RGBA_();
	static jint GL_RGBA4_();
	static jint GL_SAMPLER_2D_();
	static jint GL_SAMPLER_CUBE_();
	static jint GL_SAMPLES_();
	static jint GL_SAMPLE_ALPHA_TO_COVERAGE_();
	static jint GL_SAMPLE_BUFFERS_();
	static jint GL_SAMPLE_COVERAGE_();
	static jint GL_SAMPLE_COVERAGE_INVERT_();
	static jint GL_SAMPLE_COVERAGE_VALUE_();
	static jint GL_SCISSOR_BOX_();
	static jint GL_SCISSOR_TEST_();
	static jint GL_SHADER_BINARY_FORMATS_();
	static jint GL_SHADER_COMPILER_();
	static jint GL_SHADER_SOURCE_LENGTH_();
	static jint GL_SHADER_TYPE_();
	static jint GL_SHADING_LANGUAGE_VERSION_();
	static jint GL_SHORT_();
	static jint GL_SRC_ALPHA_();
	static jint GL_SRC_ALPHA_SATURATE_();
	static jint GL_SRC_COLOR_();
	static jint GL_STATIC_DRAW_();
	static jint GL_STENCIL_ATTACHMENT_();
	static jint GL_STENCIL_BACK_FAIL_();
	static jint GL_STENCIL_BACK_FUNC_();
	static jint GL_STENCIL_BACK_PASS_DEPTH_FAIL_();
	static jint GL_STENCIL_BACK_PASS_DEPTH_PASS_();
	static jint GL_STENCIL_BACK_REF_();
	static jint GL_STENCIL_BACK_VALUE_MASK_();
	static jint GL_STENCIL_BACK_WRITEMASK_();
	static jint GL_STENCIL_BITS_();
	static jint GL_STENCIL_BUFFER_BIT_();
	static jint GL_STENCIL_CLEAR_VALUE_();
	static jint GL_STENCIL_FAIL_();
	static jint GL_STENCIL_FUNC_();
	static jint GL_STENCIL_INDEX_();
	static jint GL_STENCIL_INDEX8_();
	static jint GL_STENCIL_PASS_DEPTH_FAIL_();
	static jint GL_STENCIL_PASS_DEPTH_PASS_();
	static jint GL_STENCIL_REF_();
	static jint GL_STENCIL_TEST_();
	static jint GL_STENCIL_VALUE_MASK_();
	static jint GL_STENCIL_WRITEMASK_();
	static jint GL_STREAM_DRAW_();
	static jint GL_SUBPIXEL_BITS_();
	static jint GL_TEXTURE_();
	static jint GL_TEXTURE0_();
	static jint GL_TEXTURE1_();
	static jint GL_TEXTURE10_();
	static jint GL_TEXTURE11_();
	static jint GL_TEXTURE12_();
	static jint GL_TEXTURE13_();
	static jint GL_TEXTURE14_();
	static jint GL_TEXTURE15_();
	static jint GL_TEXTURE16_();
	static jint GL_TEXTURE17_();
	static jint GL_TEXTURE18_();
	static jint GL_TEXTURE19_();
	static jint GL_TEXTURE2_();
	static jint GL_TEXTURE20_();
	static jint GL_TEXTURE21_();
	static jint GL_TEXTURE22_();
	static jint GL_TEXTURE23_();
	static jint GL_TEXTURE24_();
	static jint GL_TEXTURE25_();
	static jint GL_TEXTURE26_();
	static jint GL_TEXTURE27_();
	static jint GL_TEXTURE28_();
	static jint GL_TEXTURE29_();
	static jint GL_TEXTURE3_();
	static jint GL_TEXTURE30_();
	static jint GL_TEXTURE31_();
	static jint GL_TEXTURE4_();
	static jint GL_TEXTURE5_();
	static jint GL_TEXTURE6_();
	static jint GL_TEXTURE7_();
	static jint GL_TEXTURE8_();
	static jint GL_TEXTURE9_();
	static jint GL_TEXTURE_2D_();
	static jint GL_TEXTURE_BINDING_2D_();
	static jint GL_TEXTURE_BINDING_CUBE_MAP_();
	static jint GL_TEXTURE_CUBE_MAP_();
	static jint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_();
	static jint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_();
	static jint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_();
	static jint GL_TEXTURE_CUBE_MAP_POSITIVE_X_();
	static jint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_();
	static jint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_();
	static jint GL_TEXTURE_MAG_FILTER_();
	static jint GL_TEXTURE_MIN_FILTER_();
	static jint GL_TEXTURE_WRAP_S_();
	static jint GL_TEXTURE_WRAP_T_();
	static jint GL_TRIANGLES_();
	static jint GL_TRIANGLE_FAN_();
	static jint GL_TRIANGLE_STRIP_();
	static jint GL_TRUE_();
	static jint GL_UNPACK_ALIGNMENT_();
	static jint GL_UNSIGNED_BYTE_();
	static jint GL_UNSIGNED_INT_();
	static jint GL_UNSIGNED_SHORT_();
	static jint GL_UNSIGNED_SHORT_4_4_4_4_();
	static jint GL_UNSIGNED_SHORT_5_5_5_1_();
	static jint GL_UNSIGNED_SHORT_5_6_5_();
	static jint GL_VALIDATE_STATUS_();
	static jint GL_VENDOR_();
	static jint GL_VERSION_();
	static jint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_();
	static jint GL_VERTEX_ATTRIB_ARRAY_ENABLED_();
	static jint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_();
	static jint GL_VERTEX_ATTRIB_ARRAY_POINTER_();
	static jint GL_VERTEX_ATTRIB_ARRAY_SIZE_();
	static jint GL_VERTEX_ATTRIB_ARRAY_STRIDE_();
	static jint GL_VERTEX_ATTRIB_ARRAY_TYPE_();
	static jint GL_VERTEX_SHADER_();
	static jint GL_VIEWPORT_();
	static jint GL_ZERO_();

	static ref<GLES20> new_object();
	static void glActiveTexture(jint p1);
	static void glAttachShader(jint p1, jint p2);
	static void glBindAttribLocation(jint p1, jint p2, ref<java::lang::String> p3);
	static void glBindBuffer(jint p1, jint p2);
	static void glBindFramebuffer(jint p1, jint p2);
	static void glBindRenderbuffer(jint p1, jint p2);
	static void glBindTexture(jint p1, jint p2);
	static void glBlendColor(jfloat p1, jfloat p2, jfloat p3, jfloat p4);
	static void glBlendEquation(jint p1);
	static void glBlendEquationSeparate(jint p1, jint p2);
	static void glBlendFunc(jint p1, jint p2);
	static void glBlendFuncSeparate(jint p1, jint p2, jint p3, jint p4);
	static void glBufferData(jint p1, jint p2, ref<java::nio::Buffer> p3, jint p4);
	static void glBufferSubData(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4);
	static jint glCheckFramebufferStatus(jint p1);
	static void glClear(jint p1);
	static void glClearColor(jfloat p1, jfloat p2, jfloat p3, jfloat p4);
	static void glClearDepthf(jfloat p1);
	static void glClearStencil(jint p1);
	static void glColorMask(jboolean p1, jboolean p2, jboolean p3, jboolean p4);
	static void glCompileShader(jint p1);
	static void glCompressedTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, ref<java::nio::Buffer> p8);
	static void glCompressedTexSubImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, ref<java::nio::Buffer> p9);
	static void glCopyTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8);
	static void glCopyTexSubImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8);
	static jint glCreateProgram();
	static jint glCreateShader(jint p1);
	static void glCullFace(jint p1);
	static void glDeleteBuffers(jint p1, ref<link::java::array<jint>> p2, jint p3);
	static void glDeleteBuffers(jint p1, ref<java::nio::IntBuffer> p2);
	static void glDeleteFramebuffers(jint p1, ref<link::java::array<jint>> p2, jint p3);
	static void glDeleteFramebuffers(jint p1, ref<java::nio::IntBuffer> p2);
	static void glDeleteProgram(jint p1);
	static void glDeleteRenderbuffers(jint p1, ref<link::java::array<jint>> p2, jint p3);
	static void glDeleteRenderbuffers(jint p1, ref<java::nio::IntBuffer> p2);
	static void glDeleteShader(jint p1);
	static void glDeleteTextures(jint p1, ref<link::java::array<jint>> p2, jint p3);
	static void glDeleteTextures(jint p1, ref<java::nio::IntBuffer> p2);
	static void glDepthFunc(jint p1);
	static void glDepthMask(jboolean p1);
	static void glDepthRangef(jfloat p1, jfloat p2);
	static void glDetachShader(jint p1, jint p2);
	static void glDisable(jint p1);
	static void glDisableVertexAttribArray(jint p1);
	static void glDrawArrays(jint p1, jint p2, jint p3);
	static void glDrawElements(jint p1, jint p2, jint p3, jint p4);
	static void glDrawElements(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4);
	static void glEnable(jint p1);
	static void glEnableVertexAttribArray(jint p1);
	static void glFinish();
	static void glFlush();
	static void glFramebufferRenderbuffer(jint p1, jint p2, jint p3, jint p4);
	static void glFramebufferTexture2D(jint p1, jint p2, jint p3, jint p4, jint p5);
	static void glFrontFace(jint p1);
	static void glGenBuffers(jint p1, ref<link::java::array<jint>> p2, jint p3);
	static void glGenBuffers(jint p1, ref<java::nio::IntBuffer> p2);
	static void glGenerateMipmap(jint p1);
	static void glGenFramebuffers(jint p1, ref<link::java::array<jint>> p2, jint p3);
	static void glGenFramebuffers(jint p1, ref<java::nio::IntBuffer> p2);
	static void glGenRenderbuffers(jint p1, ref<link::java::array<jint>> p2, jint p3);
	static void glGenRenderbuffers(jint p1, ref<java::nio::IntBuffer> p2);
	static void glGenTextures(jint p1, ref<link::java::array<jint>> p2, jint p3);
	static void glGenTextures(jint p1, ref<java::nio::IntBuffer> p2);
	static void glGetActiveAttrib(jint p1, jint p2, jint p3, ref<link::java::array<jint>> p4, jint p5, ref<link::java::array<jint>> p6, jint p7, ref<link::java::array<jint>> p8, jint p9, ref<link::java::array<jbyte>> p10, jint p11);
	static ref<java::lang::String> glGetActiveAttrib(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4, ref<link::java::array<jint>> p5, jint p6);
	static ref<java::lang::String> glGetActiveAttrib(jint p1, jint p2, ref<java::nio::IntBuffer> p3, ref<java::nio::IntBuffer> p4);
	static void glGetActiveUniform(jint p1, jint p2, jint p3, ref<link::java::array<jint>> p4, jint p5, ref<link::java::array<jint>> p6, jint p7, ref<link::java::array<jint>> p8, jint p9, ref<link::java::array<jbyte>> p10, jint p11);
	static ref<java::lang::String> glGetActiveUniform(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4, ref<link::java::array<jint>> p5, jint p6);
	static ref<java::lang::String> glGetActiveUniform(jint p1, jint p2, ref<java::nio::IntBuffer> p3, ref<java::nio::IntBuffer> p4);
	static void glGetAttachedShaders(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4, ref<link::java::array<jint>> p5, jint p6);
	static void glGetAttachedShaders(jint p1, jint p2, ref<java::nio::IntBuffer> p3, ref<java::nio::IntBuffer> p4);
	static jint glGetAttribLocation(jint p1, ref<java::lang::String> p2);
	static void glGetBooleanv(jint p1, ref<link::java::array<jboolean>> p2, jint p3);
	static void glGetBooleanv(jint p1, ref<java::nio::IntBuffer> p2);
	static void glGetBufferParameteriv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetBufferParameteriv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static jint glGetError();
	static void glGetFloatv(jint p1, ref<link::java::array<jfloat>> p2, jint p3);
	static void glGetFloatv(jint p1, ref<java::nio::FloatBuffer> p2);
	static void glGetFramebufferAttachmentParameteriv(jint p1, jint p2, jint p3, ref<link::java::array<jint>> p4, jint p5);
	static void glGetFramebufferAttachmentParameteriv(jint p1, jint p2, jint p3, ref<java::nio::IntBuffer> p4);
	static void glGetIntegerv(jint p1, ref<link::java::array<jint>> p2, jint p3);
	static void glGetIntegerv(jint p1, ref<java::nio::IntBuffer> p2);
	static void glGetProgramiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetProgramiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static ref<java::lang::String> glGetProgramInfoLog(jint p1);
	static void glGetRenderbufferParameteriv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetRenderbufferParameteriv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glGetShaderiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetShaderiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static ref<java::lang::String> glGetShaderInfoLog(jint p1);
	static void glGetShaderPrecisionFormat(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4, ref<link::java::array<jint>> p5, jint p6);
	static void glGetShaderPrecisionFormat(jint p1, jint p2, ref<java::nio::IntBuffer> p3, ref<java::nio::IntBuffer> p4);
	static void glGetShaderSource(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4, ref<link::java::array<jbyte>> p5, jint p6);
	static ref<java::lang::String> glGetShaderSource(jint p1);
	static ref<java::lang::String> glGetString(jint p1);
	static void glGetTexParameterfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4);
	static void glGetTexParameterfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3);
	static void glGetTexParameteriv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetTexParameteriv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glGetUniformfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4);
	static void glGetUniformfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3);
	static void glGetUniformiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetUniformiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static jint glGetUniformLocation(jint p1, ref<java::lang::String> p2);
	static void glGetVertexAttribfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4);
	static void glGetVertexAttribfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3);
	static void glGetVertexAttribiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetVertexAttribiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glHint(jint p1, jint p2);
	static jboolean glIsBuffer(jint p1);
	static jboolean glIsEnabled(jint p1);
	static jboolean glIsFramebuffer(jint p1);
	static jboolean glIsProgram(jint p1);
	static jboolean glIsRenderbuffer(jint p1);
	static jboolean glIsShader(jint p1);
	static jboolean glIsTexture(jint p1);
	static void glLineWidth(jfloat p1);
	static void glLinkProgram(jint p1);
	static void glPixelStorei(jint p1, jint p2);
	static void glPolygonOffset(jfloat p1, jfloat p2);
	static void glReadPixels(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, ref<java::nio::Buffer> p7);
	static void glReleaseShaderCompiler();
	static void glRenderbufferStorage(jint p1, jint p2, jint p3, jint p4);
	static void glSampleCoverage(jfloat p1, jboolean p2);
	static void glScissor(jint p1, jint p2, jint p3, jint p4);
	static void glShaderBinary(jint p1, ref<link::java::array<jint>> p2, jint p3, jint p4, ref<java::nio::Buffer> p5, jint p6);
	static void glShaderBinary(jint p1, ref<java::nio::IntBuffer> p2, jint p3, ref<java::nio::Buffer> p4, jint p5);
	static void glShaderSource(jint p1, ref<java::lang::String> p2);
	static void glStencilFunc(jint p1, jint p2, jint p3);
	static void glStencilFuncSeparate(jint p1, jint p2, jint p3, jint p4);
	static void glStencilMask(jint p1);
	static void glStencilMaskSeparate(jint p1, jint p2);
	static void glStencilOp(jint p1, jint p2, jint p3);
	static void glStencilOpSeparate(jint p1, jint p2, jint p3, jint p4);
	static void glTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, ref<java::nio::Buffer> p9);
	static void glTexParameterf(jint p1, jint p2, jfloat p3);
	static void glTexParameterfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4);
	static void glTexParameterfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3);
	static void glTexParameteri(jint p1, jint p2, jint p3);
	static void glTexParameteriv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glTexParameteriv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glTexSubImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, ref<java::nio::Buffer> p9);
	static void glUniform1f(jint p1, jfloat p2);
	static void glUniform1fv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4);
	static void glUniform1fv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3);
	static void glUniform1i(jint p1, jint p2);
	static void glUniform1iv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glUniform1iv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glUniform2f(jint p1, jfloat p2, jfloat p3);
	static void glUniform2fv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4);
	static void glUniform2fv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3);
	static void glUniform2i(jint p1, jint p2, jint p3);
	static void glUniform2iv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glUniform2iv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glUniform3f(jint p1, jfloat p2, jfloat p3, jfloat p4);
	static void glUniform3fv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4);
	static void glUniform3fv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3);
	static void glUniform3i(jint p1, jint p2, jint p3, jint p4);
	static void glUniform3iv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glUniform3iv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glUniform4f(jint p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5);
	static void glUniform4fv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4);
	static void glUniform4fv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3);
	static void glUniform4i(jint p1, jint p2, jint p3, jint p4, jint p5);
	static void glUniform4iv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glUniform4iv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glUniformMatrix2fv(jint p1, jint p2, jboolean p3, ref<link::java::array<jfloat>> p4, jint p5);
	static void glUniformMatrix2fv(jint p1, jint p2, jboolean p3, ref<java::nio::FloatBuffer> p4);
	static void glUniformMatrix3fv(jint p1, jint p2, jboolean p3, ref<link::java::array<jfloat>> p4, jint p5);
	static void glUniformMatrix3fv(jint p1, jint p2, jboolean p3, ref<java::nio::FloatBuffer> p4);
	static void glUniformMatrix4fv(jint p1, jint p2, jboolean p3, ref<link::java::array<jfloat>> p4, jint p5);
	static void glUniformMatrix4fv(jint p1, jint p2, jboolean p3, ref<java::nio::FloatBuffer> p4);
	static void glUseProgram(jint p1);
	static void glValidateProgram(jint p1);
	static void glVertexAttrib1f(jint p1, jfloat p2);
	static void glVertexAttrib1fv(jint p1, ref<link::java::array<jfloat>> p2, jint p3);
	static void glVertexAttrib1fv(jint p1, ref<java::nio::FloatBuffer> p2);
	static void glVertexAttrib2f(jint p1, jfloat p2, jfloat p3);
	static void glVertexAttrib2fv(jint p1, ref<link::java::array<jfloat>> p2, jint p3);
	static void glVertexAttrib2fv(jint p1, ref<java::nio::FloatBuffer> p2);
	static void glVertexAttrib3f(jint p1, jfloat p2, jfloat p3, jfloat p4);
	static void glVertexAttrib3fv(jint p1, ref<link::java::array<jfloat>> p2, jint p3);
	static void glVertexAttrib3fv(jint p1, ref<java::nio::FloatBuffer> p2);
	static void glVertexAttrib4f(jint p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5);
	static void glVertexAttrib4fv(jint p1, ref<link::java::array<jfloat>> p2, jint p3);
	static void glVertexAttrib4fv(jint p1, ref<java::nio::FloatBuffer> p2);
	static void glVertexAttribPointer(jint p1, jint p2, jint p3, jboolean p4, jint p5, jint p6);
	static void glVertexAttribPointer(jint indx, jint size, jint type, jboolean normalized, jint stride, ref<java::nio::Buffer> ptr);
	static void glViewport(jint p1, jint p2, jint p3, jint p4);

protected:

	GLES20(handle_type h) : base_(h) {}

};

} // namespace android::opengl
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/nio/FloatBuffer.h>
#include <scapix/java_api/java/nio/IntBuffer.h>

namespace scapix::java_api {
namespace android::opengl {

inline jint GLES20::GL_ACTIVE_ATTRIBUTES_() { return get_static_field<SCAPIX_META_STRING("GL_ACTIVE_ATTRIBUTES"), jint>(); }
inline jint GLES20::GL_ACTIVE_ATTRIBUTE_MAX_LENGTH_() { return get_static_field<SCAPIX_META_STRING("GL_ACTIVE_ATTRIBUTE_MAX_LENGTH"), jint>(); }
inline jint GLES20::GL_ACTIVE_TEXTURE_() { return get_static_field<SCAPIX_META_STRING("GL_ACTIVE_TEXTURE"), jint>(); }
inline jint GLES20::GL_ACTIVE_UNIFORMS_() { return get_static_field<SCAPIX_META_STRING("GL_ACTIVE_UNIFORMS"), jint>(); }
inline jint GLES20::GL_ACTIVE_UNIFORM_MAX_LENGTH_() { return get_static_field<SCAPIX_META_STRING("GL_ACTIVE_UNIFORM_MAX_LENGTH"), jint>(); }
inline jint GLES20::GL_ALIASED_LINE_WIDTH_RANGE_() { return get_static_field<SCAPIX_META_STRING("GL_ALIASED_LINE_WIDTH_RANGE"), jint>(); }
inline jint GLES20::GL_ALIASED_POINT_SIZE_RANGE_() { return get_static_field<SCAPIX_META_STRING("GL_ALIASED_POINT_SIZE_RANGE"), jint>(); }
inline jint GLES20::GL_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_ALPHA"), jint>(); }
inline jint GLES20::GL_ALPHA_BITS_() { return get_static_field<SCAPIX_META_STRING("GL_ALPHA_BITS"), jint>(); }
inline jint GLES20::GL_ALWAYS_() { return get_static_field<SCAPIX_META_STRING("GL_ALWAYS"), jint>(); }
inline jint GLES20::GL_ARRAY_BUFFER_() { return get_static_field<SCAPIX_META_STRING("GL_ARRAY_BUFFER"), jint>(); }
inline jint GLES20::GL_ARRAY_BUFFER_BINDING_() { return get_static_field<SCAPIX_META_STRING("GL_ARRAY_BUFFER_BINDING"), jint>(); }
inline jint GLES20::GL_ATTACHED_SHADERS_() { return get_static_field<SCAPIX_META_STRING("GL_ATTACHED_SHADERS"), jint>(); }
inline jint GLES20::GL_BACK_() { return get_static_field<SCAPIX_META_STRING("GL_BACK"), jint>(); }
inline jint GLES20::GL_BLEND_() { return get_static_field<SCAPIX_META_STRING("GL_BLEND"), jint>(); }
inline jint GLES20::GL_BLEND_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_BLEND_COLOR"), jint>(); }
inline jint GLES20::GL_BLEND_DST_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_BLEND_DST_ALPHA"), jint>(); }
inline jint GLES20::GL_BLEND_DST_RGB_() { return get_static_field<SCAPIX_META_STRING("GL_BLEND_DST_RGB"), jint>(); }
inline jint GLES20::GL_BLEND_EQUATION_() { return get_static_field<SCAPIX_META_STRING("GL_BLEND_EQUATION"), jint>(); }
inline jint GLES20::GL_BLEND_EQUATION_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_BLEND_EQUATION_ALPHA"), jint>(); }
inline jint GLES20::GL_BLEND_EQUATION_RGB_() { return get_static_field<SCAPIX_META_STRING("GL_BLEND_EQUATION_RGB"), jint>(); }
inline jint GLES20::GL_BLEND_SRC_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_BLEND_SRC_ALPHA"), jint>(); }
inline jint GLES20::GL_BLEND_SRC_RGB_() { return get_static_field<SCAPIX_META_STRING("GL_BLEND_SRC_RGB"), jint>(); }
inline jint GLES20::GL_BLUE_BITS_() { return get_static_field<SCAPIX_META_STRING("GL_BLUE_BITS"), jint>(); }
inline jint GLES20::GL_BOOL_() { return get_static_field<SCAPIX_META_STRING("GL_BOOL"), jint>(); }
inline jint GLES20::GL_BOOL_VEC2_() { return get_static_field<SCAPIX_META_STRING("GL_BOOL_VEC2"), jint>(); }
inline jint GLES20::GL_BOOL_VEC3_() { return get_static_field<SCAPIX_META_STRING("GL_BOOL_VEC3"), jint>(); }
inline jint GLES20::GL_BOOL_VEC4_() { return get_static_field<SCAPIX_META_STRING("GL_BOOL_VEC4"), jint>(); }
inline jint GLES20::GL_BUFFER_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_BUFFER_SIZE"), jint>(); }
inline jint GLES20::GL_BUFFER_USAGE_() { return get_static_field<SCAPIX_META_STRING("GL_BUFFER_USAGE"), jint>(); }
inline jint GLES20::GL_BYTE_() { return get_static_field<SCAPIX_META_STRING("GL_BYTE"), jint>(); }
inline jint GLES20::GL_CCW_() { return get_static_field<SCAPIX_META_STRING("GL_CCW"), jint>(); }
inline jint GLES20::GL_CLAMP_TO_EDGE_() { return get_static_field<SCAPIX_META_STRING("GL_CLAMP_TO_EDGE"), jint>(); }
inline jint GLES20::GL_COLOR_ATTACHMENT0_() { return get_static_field<SCAPIX_META_STRING("GL_COLOR_ATTACHMENT0"), jint>(); }
inline jint GLES20::GL_COLOR_BUFFER_BIT_() { return get_static_field<SCAPIX_META_STRING("GL_COLOR_BUFFER_BIT"), jint>(); }
inline jint GLES20::GL_COLOR_CLEAR_VALUE_() { return get_static_field<SCAPIX_META_STRING("GL_COLOR_CLEAR_VALUE"), jint>(); }
inline jint GLES20::GL_COLOR_WRITEMASK_() { return get_static_field<SCAPIX_META_STRING("GL_COLOR_WRITEMASK"), jint>(); }
inline jint GLES20::GL_COMPILE_STATUS_() { return get_static_field<SCAPIX_META_STRING("GL_COMPILE_STATUS"), jint>(); }
inline jint GLES20::GL_COMPRESSED_TEXTURE_FORMATS_() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_TEXTURE_FORMATS"), jint>(); }
inline jint GLES20::GL_CONSTANT_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_CONSTANT_ALPHA"), jint>(); }
inline jint GLES20::GL_CONSTANT_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_CONSTANT_COLOR"), jint>(); }
inline jint GLES20::GL_CULL_FACE_() { return get_static_field<SCAPIX_META_STRING("GL_CULL_FACE"), jint>(); }
inline jint GLES20::GL_CULL_FACE_MODE_() { return get_static_field<SCAPIX_META_STRING("GL_CULL_FACE_MODE"), jint>(); }
inline jint GLES20::GL_CURRENT_PROGRAM_() { return get_static_field<SCAPIX_META_STRING("GL_CURRENT_PROGRAM"), jint>(); }
inline jint GLES20::GL_CURRENT_VERTEX_ATTRIB_() { return get_static_field<SCAPIX_META_STRING("GL_CURRENT_VERTEX_ATTRIB"), jint>(); }
inline jint GLES20::GL_CW_() { return get_static_field<SCAPIX_META_STRING("GL_CW"), jint>(); }
inline jint GLES20::GL_DECR_() { return get_static_field<SCAPIX_META_STRING("GL_DECR"), jint>(); }
inline jint GLES20::GL_DECR_WRAP_() { return get_static_field<SCAPIX_META_STRING("GL_DECR_WRAP"), jint>(); }
inline jint GLES20::GL_DELETE_STATUS_() { return get_static_field<SCAPIX_META_STRING("GL_DELETE_STATUS"), jint>(); }
inline jint GLES20::GL_DEPTH_ATTACHMENT_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_ATTACHMENT"), jint>(); }
inline jint GLES20::GL_DEPTH_BITS_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_BITS"), jint>(); }
inline jint GLES20::GL_DEPTH_BUFFER_BIT_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_BUFFER_BIT"), jint>(); }
inline jint GLES20::GL_DEPTH_CLEAR_VALUE_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_CLEAR_VALUE"), jint>(); }
inline jint GLES20::GL_DEPTH_COMPONENT_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_COMPONENT"), jint>(); }
inline jint GLES20::GL_DEPTH_COMPONENT16_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_COMPONENT16"), jint>(); }
inline jint GLES20::GL_DEPTH_FUNC_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_FUNC"), jint>(); }
inline jint GLES20::GL_DEPTH_RANGE_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_RANGE"), jint>(); }
inline jint GLES20::GL_DEPTH_TEST_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_TEST"), jint>(); }
inline jint GLES20::GL_DEPTH_WRITEMASK_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_WRITEMASK"), jint>(); }
inline jint GLES20::GL_DITHER_() { return get_static_field<SCAPIX_META_STRING("GL_DITHER"), jint>(); }
inline jint GLES20::GL_DONT_CARE_() { return get_static_field<SCAPIX_META_STRING("GL_DONT_CARE"), jint>(); }
inline jint GLES20::GL_DST_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_DST_ALPHA"), jint>(); }
inline jint GLES20::GL_DST_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_DST_COLOR"), jint>(); }
inline jint GLES20::GL_DYNAMIC_DRAW_() { return get_static_field<SCAPIX_META_STRING("GL_DYNAMIC_DRAW"), jint>(); }
inline jint GLES20::GL_ELEMENT_ARRAY_BUFFER_() { return get_static_field<SCAPIX_META_STRING("GL_ELEMENT_ARRAY_BUFFER"), jint>(); }
inline jint GLES20::GL_ELEMENT_ARRAY_BUFFER_BINDING_() { return get_static_field<SCAPIX_META_STRING("GL_ELEMENT_ARRAY_BUFFER_BINDING"), jint>(); }
inline jint GLES20::GL_EQUAL_() { return get_static_field<SCAPIX_META_STRING("GL_EQUAL"), jint>(); }
inline jint GLES20::GL_EXTENSIONS_() { return get_static_field<SCAPIX_META_STRING("GL_EXTENSIONS"), jint>(); }
inline jint GLES20::GL_FALSE_() { return get_static_field<SCAPIX_META_STRING("GL_FALSE"), jint>(); }
inline jint GLES20::GL_FASTEST_() { return get_static_field<SCAPIX_META_STRING("GL_FASTEST"), jint>(); }
inline jint GLES20::GL_FIXED_() { return get_static_field<SCAPIX_META_STRING("GL_FIXED"), jint>(); }
inline jint GLES20::GL_FLOAT_() { return get_static_field<SCAPIX_META_STRING("GL_FLOAT"), jint>(); }
inline jint GLES20::GL_FLOAT_MAT2_() { return get_static_field<SCAPIX_META_STRING("GL_FLOAT_MAT2"), jint>(); }
inline jint GLES20::GL_FLOAT_MAT3_() { return get_static_field<SCAPIX_META_STRING("GL_FLOAT_MAT3"), jint>(); }
inline jint GLES20::GL_FLOAT_MAT4_() { return get_static_field<SCAPIX_META_STRING("GL_FLOAT_MAT4"), jint>(); }
inline jint GLES20::GL_FLOAT_VEC2_() { return get_static_field<SCAPIX_META_STRING("GL_FLOAT_VEC2"), jint>(); }
inline jint GLES20::GL_FLOAT_VEC3_() { return get_static_field<SCAPIX_META_STRING("GL_FLOAT_VEC3"), jint>(); }
inline jint GLES20::GL_FLOAT_VEC4_() { return get_static_field<SCAPIX_META_STRING("GL_FLOAT_VEC4"), jint>(); }
inline jint GLES20::GL_FRAGMENT_SHADER_() { return get_static_field<SCAPIX_META_STRING("GL_FRAGMENT_SHADER"), jint>(); }
inline jint GLES20::GL_FRAMEBUFFER_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER"), jint>(); }
inline jint GLES20::GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"), jint>(); }
inline jint GLES20::GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"), jint>(); }
inline jint GLES20::GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"), jint>(); }
inline jint GLES20::GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"), jint>(); }
inline jint GLES20::GL_FRAMEBUFFER_BINDING_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER_BINDING"), jint>(); }
inline jint GLES20::GL_FRAMEBUFFER_COMPLETE_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER_COMPLETE"), jint>(); }
inline jint GLES20::GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT"), jint>(); }
inline jint GLES20::GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS"), jint>(); }
inline jint GLES20::GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"), jint>(); }
inline jint GLES20::GL_FRAMEBUFFER_UNSUPPORTED_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER_UNSUPPORTED"), jint>(); }
inline jint GLES20::GL_FRONT_() { return get_static_field<SCAPIX_META_STRING("GL_FRONT"), jint>(); }
inline jint GLES20::GL_FRONT_AND_BACK_() { return get_static_field<SCAPIX_META_STRING("GL_FRONT_AND_BACK"), jint>(); }
inline jint GLES20::GL_FRONT_FACE_() { return get_static_field<SCAPIX_META_STRING("GL_FRONT_FACE"), jint>(); }
inline jint GLES20::GL_FUNC_ADD_() { return get_static_field<SCAPIX_META_STRING("GL_FUNC_ADD"), jint>(); }
inline jint GLES20::GL_FUNC_REVERSE_SUBTRACT_() { return get_static_field<SCAPIX_META_STRING("GL_FUNC_REVERSE_SUBTRACT"), jint>(); }
inline jint GLES20::GL_FUNC_SUBTRACT_() { return get_static_field<SCAPIX_META_STRING("GL_FUNC_SUBTRACT"), jint>(); }
inline jint GLES20::GL_GENERATE_MIPMAP_HINT_() { return get_static_field<SCAPIX_META_STRING("GL_GENERATE_MIPMAP_HINT"), jint>(); }
inline jint GLES20::GL_GEQUAL_() { return get_static_field<SCAPIX_META_STRING("GL_GEQUAL"), jint>(); }
inline jint GLES20::GL_GREATER_() { return get_static_field<SCAPIX_META_STRING("GL_GREATER"), jint>(); }
inline jint GLES20::GL_GREEN_BITS_() { return get_static_field<SCAPIX_META_STRING("GL_GREEN_BITS"), jint>(); }
inline jint GLES20::GL_HIGH_FLOAT_() { return get_static_field<SCAPIX_META_STRING("GL_HIGH_FLOAT"), jint>(); }
inline jint GLES20::GL_HIGH_INT_() { return get_static_field<SCAPIX_META_STRING("GL_HIGH_INT"), jint>(); }
inline jint GLES20::GL_IMPLEMENTATION_COLOR_READ_FORMAT_() { return get_static_field<SCAPIX_META_STRING("GL_IMPLEMENTATION_COLOR_READ_FORMAT"), jint>(); }
inline jint GLES20::GL_IMPLEMENTATION_COLOR_READ_TYPE_() { return get_static_field<SCAPIX_META_STRING("GL_IMPLEMENTATION_COLOR_READ_TYPE"), jint>(); }
inline jint GLES20::GL_INCR_() { return get_static_field<SCAPIX_META_STRING("GL_INCR"), jint>(); }
inline jint GLES20::GL_INCR_WRAP_() { return get_static_field<SCAPIX_META_STRING("GL_INCR_WRAP"), jint>(); }
inline jint GLES20::GL_INFO_LOG_LENGTH_() { return get_static_field<SCAPIX_META_STRING("GL_INFO_LOG_LENGTH"), jint>(); }
inline jint GLES20::GL_INT_() { return get_static_field<SCAPIX_META_STRING("GL_INT"), jint>(); }
inline jint GLES20::GL_INT_VEC2_() { return get_static_field<SCAPIX_META_STRING("GL_INT_VEC2"), jint>(); }
inline jint GLES20::GL_INT_VEC3_() { return get_static_field<SCAPIX_META_STRING("GL_INT_VEC3"), jint>(); }
inline jint GLES20::GL_INT_VEC4_() { return get_static_field<SCAPIX_META_STRING("GL_INT_VEC4"), jint>(); }
inline jint GLES20::GL_INVALID_ENUM_() { return get_static_field<SCAPIX_META_STRING("GL_INVALID_ENUM"), jint>(); }
inline jint GLES20::GL_INVALID_FRAMEBUFFER_OPERATION_() { return get_static_field<SCAPIX_META_STRING("GL_INVALID_FRAMEBUFFER_OPERATION"), jint>(); }
inline jint GLES20::GL_INVALID_OPERATION_() { return get_static_field<SCAPIX_META_STRING("GL_INVALID_OPERATION"), jint>(); }
inline jint GLES20::GL_INVALID_VALUE_() { return get_static_field<SCAPIX_META_STRING("GL_INVALID_VALUE"), jint>(); }
inline jint GLES20::GL_INVERT_() { return get_static_field<SCAPIX_META_STRING("GL_INVERT"), jint>(); }
inline jint GLES20::GL_KEEP_() { return get_static_field<SCAPIX_META_STRING("GL_KEEP"), jint>(); }
inline jint GLES20::GL_LEQUAL_() { return get_static_field<SCAPIX_META_STRING("GL_LEQUAL"), jint>(); }
inline jint GLES20::GL_LESS_() { return get_static_field<SCAPIX_META_STRING("GL_LESS"), jint>(); }
inline jint GLES20::GL_LINEAR_() { return get_static_field<SCAPIX_META_STRING("GL_LINEAR"), jint>(); }
inline jint GLES20::GL_LINEAR_MIPMAP_LINEAR_() { return get_static_field<SCAPIX_META_STRING("GL_LINEAR_MIPMAP_LINEAR"), jint>(); }
inline jint GLES20::GL_LINEAR_MIPMAP_NEAREST_() { return get_static_field<SCAPIX_META_STRING("GL_LINEAR_MIPMAP_NEAREST"), jint>(); }
inline jint GLES20::GL_LINES_() { return get_static_field<SCAPIX_META_STRING("GL_LINES"), jint>(); }
inline jint GLES20::GL_LINE_LOOP_() { return get_static_field<SCAPIX_META_STRING("GL_LINE_LOOP"), jint>(); }
inline jint GLES20::GL_LINE_STRIP_() { return get_static_field<SCAPIX_META_STRING("GL_LINE_STRIP"), jint>(); }
inline jint GLES20::GL_LINE_WIDTH_() { return get_static_field<SCAPIX_META_STRING("GL_LINE_WIDTH"), jint>(); }
inline jint GLES20::GL_LINK_STATUS_() { return get_static_field<SCAPIX_META_STRING("GL_LINK_STATUS"), jint>(); }
inline jint GLES20::GL_LOW_FLOAT_() { return get_static_field<SCAPIX_META_STRING("GL_LOW_FLOAT"), jint>(); }
inline jint GLES20::GL_LOW_INT_() { return get_static_field<SCAPIX_META_STRING("GL_LOW_INT"), jint>(); }
inline jint GLES20::GL_LUMINANCE_() { return get_static_field<SCAPIX_META_STRING("GL_LUMINANCE"), jint>(); }
inline jint GLES20::GL_LUMINANCE_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_LUMINANCE_ALPHA"), jint>(); }
inline jint GLES20::GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS"), jint>(); }
inline jint GLES20::GL_MAX_CUBE_MAP_TEXTURE_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_CUBE_MAP_TEXTURE_SIZE"), jint>(); }
inline jint GLES20::GL_MAX_FRAGMENT_UNIFORM_VECTORS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_FRAGMENT_UNIFORM_VECTORS"), jint>(); }
inline jint GLES20::GL_MAX_RENDERBUFFER_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_RENDERBUFFER_SIZE"), jint>(); }
inline jint GLES20::GL_MAX_TEXTURE_IMAGE_UNITS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TEXTURE_IMAGE_UNITS"), jint>(); }
inline jint GLES20::GL_MAX_TEXTURE_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TEXTURE_SIZE"), jint>(); }
inline jint GLES20::GL_MAX_VARYING_VECTORS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_VARYING_VECTORS"), jint>(); }
inline jint GLES20::GL_MAX_VERTEX_ATTRIBS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_VERTEX_ATTRIBS"), jint>(); }
inline jint GLES20::GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS"), jint>(); }
inline jint GLES20::GL_MAX_VERTEX_UNIFORM_VECTORS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_VERTEX_UNIFORM_VECTORS"), jint>(); }
inline jint GLES20::GL_MAX_VIEWPORT_DIMS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_VIEWPORT_DIMS"), jint>(); }
inline jint GLES20::GL_MEDIUM_FLOAT_() { return get_static_field<SCAPIX_META_STRING("GL_MEDIUM_FLOAT"), jint>(); }
inline jint GLES20::GL_MEDIUM_INT_() { return get_static_field<SCAPIX_META_STRING("GL_MEDIUM_INT"), jint>(); }
inline jint GLES20::GL_MIRRORED_REPEAT_() { return get_static_field<SCAPIX_META_STRING("GL_MIRRORED_REPEAT"), jint>(); }
inline jint GLES20::GL_NEAREST_() { return get_static_field<SCAPIX_META_STRING("GL_NEAREST"), jint>(); }
inline jint GLES20::GL_NEAREST_MIPMAP_LINEAR_() { return get_static_field<SCAPIX_META_STRING("GL_NEAREST_MIPMAP_LINEAR"), jint>(); }
inline jint GLES20::GL_NEAREST_MIPMAP_NEAREST_() { return get_static_field<SCAPIX_META_STRING("GL_NEAREST_MIPMAP_NEAREST"), jint>(); }
inline jint GLES20::GL_NEVER_() { return get_static_field<SCAPIX_META_STRING("GL_NEVER"), jint>(); }
inline jint GLES20::GL_NICEST_() { return get_static_field<SCAPIX_META_STRING("GL_NICEST"), jint>(); }
inline jint GLES20::GL_NONE_() { return get_static_field<SCAPIX_META_STRING("GL_NONE"), jint>(); }
inline jint GLES20::GL_NOTEQUAL_() { return get_static_field<SCAPIX_META_STRING("GL_NOTEQUAL"), jint>(); }
inline jint GLES20::GL_NO_ERROR_() { return get_static_field<SCAPIX_META_STRING("GL_NO_ERROR"), jint>(); }
inline jint GLES20::GL_NUM_COMPRESSED_TEXTURE_FORMATS_() { return get_static_field<SCAPIX_META_STRING("GL_NUM_COMPRESSED_TEXTURE_FORMATS"), jint>(); }
inline jint GLES20::GL_NUM_SHADER_BINARY_FORMATS_() { return get_static_field<SCAPIX_META_STRING("GL_NUM_SHADER_BINARY_FORMATS"), jint>(); }
inline jint GLES20::GL_ONE_() { return get_static_field<SCAPIX_META_STRING("GL_ONE"), jint>(); }
inline jint GLES20::GL_ONE_MINUS_CONSTANT_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_ONE_MINUS_CONSTANT_ALPHA"), jint>(); }
inline jint GLES20::GL_ONE_MINUS_CONSTANT_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_ONE_MINUS_CONSTANT_COLOR"), jint>(); }
inline jint GLES20::GL_ONE_MINUS_DST_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_ONE_MINUS_DST_ALPHA"), jint>(); }
inline jint GLES20::GL_ONE_MINUS_DST_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_ONE_MINUS_DST_COLOR"), jint>(); }
inline jint GLES20::GL_ONE_MINUS_SRC_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_ONE_MINUS_SRC_ALPHA"), jint>(); }
inline jint GLES20::GL_ONE_MINUS_SRC_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_ONE_MINUS_SRC_COLOR"), jint>(); }
inline jint GLES20::GL_OUT_OF_MEMORY_() { return get_static_field<SCAPIX_META_STRING("GL_OUT_OF_MEMORY"), jint>(); }
inline jint GLES20::GL_PACK_ALIGNMENT_() { return get_static_field<SCAPIX_META_STRING("GL_PACK_ALIGNMENT"), jint>(); }
inline jint GLES20::GL_POINTS_() { return get_static_field<SCAPIX_META_STRING("GL_POINTS"), jint>(); }
inline jint GLES20::GL_POLYGON_OFFSET_FACTOR_() { return get_static_field<SCAPIX_META_STRING("GL_POLYGON_OFFSET_FACTOR"), jint>(); }
inline jint GLES20::GL_POLYGON_OFFSET_FILL_() { return get_static_field<SCAPIX_META_STRING("GL_POLYGON_OFFSET_FILL"), jint>(); }
inline jint GLES20::GL_POLYGON_OFFSET_UNITS_() { return get_static_field<SCAPIX_META_STRING("GL_POLYGON_OFFSET_UNITS"), jint>(); }
inline jint GLES20::GL_RED_BITS_() { return get_static_field<SCAPIX_META_STRING("GL_RED_BITS"), jint>(); }
inline jint GLES20::GL_RENDERBUFFER_() { return get_static_field<SCAPIX_META_STRING("GL_RENDERBUFFER"), jint>(); }
inline jint GLES20::GL_RENDERBUFFER_ALPHA_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_RENDERBUFFER_ALPHA_SIZE"), jint>(); }
inline jint GLES20::GL_RENDERBUFFER_BINDING_() { return get_static_field<SCAPIX_META_STRING("GL_RENDERBUFFER_BINDING"), jint>(); }
inline jint GLES20::GL_RENDERBUFFER_BLUE_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_RENDERBUFFER_BLUE_SIZE"), jint>(); }
inline jint GLES20::GL_RENDERBUFFER_DEPTH_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_RENDERBUFFER_DEPTH_SIZE"), jint>(); }
inline jint GLES20::GL_RENDERBUFFER_GREEN_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_RENDERBUFFER_GREEN_SIZE"), jint>(); }
inline jint GLES20::GL_RENDERBUFFER_HEIGHT_() { return get_static_field<SCAPIX_META_STRING("GL_RENDERBUFFER_HEIGHT"), jint>(); }
inline jint GLES20::GL_RENDERBUFFER_INTERNAL_FORMAT_() { return get_static_field<SCAPIX_META_STRING("GL_RENDERBUFFER_INTERNAL_FORMAT"), jint>(); }
inline jint GLES20::GL_RENDERBUFFER_RED_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_RENDERBUFFER_RED_SIZE"), jint>(); }
inline jint GLES20::GL_RENDERBUFFER_STENCIL_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_RENDERBUFFER_STENCIL_SIZE"), jint>(); }
inline jint GLES20::GL_RENDERBUFFER_WIDTH_() { return get_static_field<SCAPIX_META_STRING("GL_RENDERBUFFER_WIDTH"), jint>(); }
inline jint GLES20::GL_RENDERER_() { return get_static_field<SCAPIX_META_STRING("GL_RENDERER"), jint>(); }
inline jint GLES20::GL_REPEAT_() { return get_static_field<SCAPIX_META_STRING("GL_REPEAT"), jint>(); }
inline jint GLES20::GL_REPLACE_() { return get_static_field<SCAPIX_META_STRING("GL_REPLACE"), jint>(); }
inline jint GLES20::GL_RGB_() { return get_static_field<SCAPIX_META_STRING("GL_RGB"), jint>(); }
inline jint GLES20::GL_RGB565_() { return get_static_field<SCAPIX_META_STRING("GL_RGB565"), jint>(); }
inline jint GLES20::GL_RGB5_A1_() { return get_static_field<SCAPIX_META_STRING("GL_RGB5_A1"), jint>(); }
inline jint GLES20::GL_RGBA_() { return get_static_field<SCAPIX_META_STRING("GL_RGBA"), jint>(); }
inline jint GLES20::GL_RGBA4_() { return get_static_field<SCAPIX_META_STRING("GL_RGBA4"), jint>(); }
inline jint GLES20::GL_SAMPLER_2D_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLER_2D"), jint>(); }
inline jint GLES20::GL_SAMPLER_CUBE_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLER_CUBE"), jint>(); }
inline jint GLES20::GL_SAMPLES_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLES"), jint>(); }
inline jint GLES20::GL_SAMPLE_ALPHA_TO_COVERAGE_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLE_ALPHA_TO_COVERAGE"), jint>(); }
inline jint GLES20::GL_SAMPLE_BUFFERS_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLE_BUFFERS"), jint>(); }
inline jint GLES20::GL_SAMPLE_COVERAGE_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLE_COVERAGE"), jint>(); }
inline jint GLES20::GL_SAMPLE_COVERAGE_INVERT_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLE_COVERAGE_INVERT"), jint>(); }
inline jint GLES20::GL_SAMPLE_COVERAGE_VALUE_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLE_COVERAGE_VALUE"), jint>(); }
inline jint GLES20::GL_SCISSOR_BOX_() { return get_static_field<SCAPIX_META_STRING("GL_SCISSOR_BOX"), jint>(); }
inline jint GLES20::GL_SCISSOR_TEST_() { return get_static_field<SCAPIX_META_STRING("GL_SCISSOR_TEST"), jint>(); }
inline jint GLES20::GL_SHADER_BINARY_FORMATS_() { return get_static_field<SCAPIX_META_STRING("GL_SHADER_BINARY_FORMATS"), jint>(); }
inline jint GLES20::GL_SHADER_COMPILER_() { return get_static_field<SCAPIX_META_STRING("GL_SHADER_COMPILER"), jint>(); }
inline jint GLES20::GL_SHADER_SOURCE_LENGTH_() { return get_static_field<SCAPIX_META_STRING("GL_SHADER_SOURCE_LENGTH"), jint>(); }
inline jint GLES20::GL_SHADER_TYPE_() { return get_static_field<SCAPIX_META_STRING("GL_SHADER_TYPE"), jint>(); }
inline jint GLES20::GL_SHADING_LANGUAGE_VERSION_() { return get_static_field<SCAPIX_META_STRING("GL_SHADING_LANGUAGE_VERSION"), jint>(); }
inline jint GLES20::GL_SHORT_() { return get_static_field<SCAPIX_META_STRING("GL_SHORT"), jint>(); }
inline jint GLES20::GL_SRC_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_SRC_ALPHA"), jint>(); }
inline jint GLES20::GL_SRC_ALPHA_SATURATE_() { return get_static_field<SCAPIX_META_STRING("GL_SRC_ALPHA_SATURATE"), jint>(); }
inline jint GLES20::GL_SRC_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_SRC_COLOR"), jint>(); }
inline jint GLES20::GL_STATIC_DRAW_() { return get_static_field<SCAPIX_META_STRING("GL_STATIC_DRAW"), jint>(); }
inline jint GLES20::GL_STENCIL_ATTACHMENT_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_ATTACHMENT"), jint>(); }
inline jint GLES20::GL_STENCIL_BACK_FAIL_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_BACK_FAIL"), jint>(); }
inline jint GLES20::GL_STENCIL_BACK_FUNC_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_BACK_FUNC"), jint>(); }
inline jint GLES20::GL_STENCIL_BACK_PASS_DEPTH_FAIL_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_BACK_PASS_DEPTH_FAIL"), jint>(); }
inline jint GLES20::GL_STENCIL_BACK_PASS_DEPTH_PASS_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_BACK_PASS_DEPTH_PASS"), jint>(); }
inline jint GLES20::GL_STENCIL_BACK_REF_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_BACK_REF"), jint>(); }
inline jint GLES20::GL_STENCIL_BACK_VALUE_MASK_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_BACK_VALUE_MASK"), jint>(); }
inline jint GLES20::GL_STENCIL_BACK_WRITEMASK_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_BACK_WRITEMASK"), jint>(); }
inline jint GLES20::GL_STENCIL_BITS_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_BITS"), jint>(); }
inline jint GLES20::GL_STENCIL_BUFFER_BIT_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_BUFFER_BIT"), jint>(); }
inline jint GLES20::GL_STENCIL_CLEAR_VALUE_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_CLEAR_VALUE"), jint>(); }
inline jint GLES20::GL_STENCIL_FAIL_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_FAIL"), jint>(); }
inline jint GLES20::GL_STENCIL_FUNC_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_FUNC"), jint>(); }
inline jint GLES20::GL_STENCIL_INDEX_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_INDEX"), jint>(); }
inline jint GLES20::GL_STENCIL_INDEX8_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_INDEX8"), jint>(); }
inline jint GLES20::GL_STENCIL_PASS_DEPTH_FAIL_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_PASS_DEPTH_FAIL"), jint>(); }
inline jint GLES20::GL_STENCIL_PASS_DEPTH_PASS_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_PASS_DEPTH_PASS"), jint>(); }
inline jint GLES20::GL_STENCIL_REF_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_REF"), jint>(); }
inline jint GLES20::GL_STENCIL_TEST_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_TEST"), jint>(); }
inline jint GLES20::GL_STENCIL_VALUE_MASK_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_VALUE_MASK"), jint>(); }
inline jint GLES20::GL_STENCIL_WRITEMASK_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_WRITEMASK"), jint>(); }
inline jint GLES20::GL_STREAM_DRAW_() { return get_static_field<SCAPIX_META_STRING("GL_STREAM_DRAW"), jint>(); }
inline jint GLES20::GL_SUBPIXEL_BITS_() { return get_static_field<SCAPIX_META_STRING("GL_SUBPIXEL_BITS"), jint>(); }
inline jint GLES20::GL_TEXTURE_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE"), jint>(); }
inline jint GLES20::GL_TEXTURE0_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE0"), jint>(); }
inline jint GLES20::GL_TEXTURE1_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE1"), jint>(); }
inline jint GLES20::GL_TEXTURE10_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE10"), jint>(); }
inline jint GLES20::GL_TEXTURE11_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE11"), jint>(); }
inline jint GLES20::GL_TEXTURE12_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE12"), jint>(); }
inline jint GLES20::GL_TEXTURE13_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE13"), jint>(); }
inline jint GLES20::GL_TEXTURE14_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE14"), jint>(); }
inline jint GLES20::GL_TEXTURE15_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE15"), jint>(); }
inline jint GLES20::GL_TEXTURE16_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE16"), jint>(); }
inline jint GLES20::GL_TEXTURE17_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE17"), jint>(); }
inline jint GLES20::GL_TEXTURE18_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE18"), jint>(); }
inline jint GLES20::GL_TEXTURE19_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE19"), jint>(); }
inline jint GLES20::GL_TEXTURE2_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE2"), jint>(); }
inline jint GLES20::GL_TEXTURE20_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE20"), jint>(); }
inline jint GLES20::GL_TEXTURE21_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE21"), jint>(); }
inline jint GLES20::GL_TEXTURE22_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE22"), jint>(); }
inline jint GLES20::GL_TEXTURE23_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE23"), jint>(); }
inline jint GLES20::GL_TEXTURE24_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE24"), jint>(); }
inline jint GLES20::GL_TEXTURE25_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE25"), jint>(); }
inline jint GLES20::GL_TEXTURE26_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE26"), jint>(); }
inline jint GLES20::GL_TEXTURE27_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE27"), jint>(); }
inline jint GLES20::GL_TEXTURE28_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE28"), jint>(); }
inline jint GLES20::GL_TEXTURE29_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE29"), jint>(); }
inline jint GLES20::GL_TEXTURE3_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE3"), jint>(); }
inline jint GLES20::GL_TEXTURE30_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE30"), jint>(); }
inline jint GLES20::GL_TEXTURE31_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE31"), jint>(); }
inline jint GLES20::GL_TEXTURE4_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE4"), jint>(); }
inline jint GLES20::GL_TEXTURE5_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE5"), jint>(); }
inline jint GLES20::GL_TEXTURE6_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE6"), jint>(); }
inline jint GLES20::GL_TEXTURE7_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE7"), jint>(); }
inline jint GLES20::GL_TEXTURE8_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE8"), jint>(); }
inline jint GLES20::GL_TEXTURE9_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE9"), jint>(); }
inline jint GLES20::GL_TEXTURE_2D_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_2D"), jint>(); }
inline jint GLES20::GL_TEXTURE_BINDING_2D_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BINDING_2D"), jint>(); }
inline jint GLES20::GL_TEXTURE_BINDING_CUBE_MAP_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BINDING_CUBE_MAP"), jint>(); }
inline jint GLES20::GL_TEXTURE_CUBE_MAP_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_CUBE_MAP"), jint>(); }
inline jint GLES20::GL_TEXTURE_CUBE_MAP_NEGATIVE_X_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_CUBE_MAP_NEGATIVE_X"), jint>(); }
inline jint GLES20::GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_CUBE_MAP_NEGATIVE_Y"), jint>(); }
inline jint GLES20::GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_CUBE_MAP_NEGATIVE_Z"), jint>(); }
inline jint GLES20::GL_TEXTURE_CUBE_MAP_POSITIVE_X_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_CUBE_MAP_POSITIVE_X"), jint>(); }
inline jint GLES20::GL_TEXTURE_CUBE_MAP_POSITIVE_Y_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_CUBE_MAP_POSITIVE_Y"), jint>(); }
inline jint GLES20::GL_TEXTURE_CUBE_MAP_POSITIVE_Z_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_CUBE_MAP_POSITIVE_Z"), jint>(); }
inline jint GLES20::GL_TEXTURE_MAG_FILTER_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_MAG_FILTER"), jint>(); }
inline jint GLES20::GL_TEXTURE_MIN_FILTER_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_MIN_FILTER"), jint>(); }
inline jint GLES20::GL_TEXTURE_WRAP_S_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_WRAP_S"), jint>(); }
inline jint GLES20::GL_TEXTURE_WRAP_T_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_WRAP_T"), jint>(); }
inline jint GLES20::GL_TRIANGLES_() { return get_static_field<SCAPIX_META_STRING("GL_TRIANGLES"), jint>(); }
inline jint GLES20::GL_TRIANGLE_FAN_() { return get_static_field<SCAPIX_META_STRING("GL_TRIANGLE_FAN"), jint>(); }
inline jint GLES20::GL_TRIANGLE_STRIP_() { return get_static_field<SCAPIX_META_STRING("GL_TRIANGLE_STRIP"), jint>(); }
inline jint GLES20::GL_TRUE_() { return get_static_field<SCAPIX_META_STRING("GL_TRUE"), jint>(); }
inline jint GLES20::GL_UNPACK_ALIGNMENT_() { return get_static_field<SCAPIX_META_STRING("GL_UNPACK_ALIGNMENT"), jint>(); }
inline jint GLES20::GL_UNSIGNED_BYTE_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_BYTE"), jint>(); }
inline jint GLES20::GL_UNSIGNED_INT_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_INT"), jint>(); }
inline jint GLES20::GL_UNSIGNED_SHORT_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_SHORT"), jint>(); }
inline jint GLES20::GL_UNSIGNED_SHORT_4_4_4_4_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_SHORT_4_4_4_4"), jint>(); }
inline jint GLES20::GL_UNSIGNED_SHORT_5_5_5_1_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_SHORT_5_5_5_1"), jint>(); }
inline jint GLES20::GL_UNSIGNED_SHORT_5_6_5_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_SHORT_5_6_5"), jint>(); }
inline jint GLES20::GL_VALIDATE_STATUS_() { return get_static_field<SCAPIX_META_STRING("GL_VALIDATE_STATUS"), jint>(); }
inline jint GLES20::GL_VENDOR_() { return get_static_field<SCAPIX_META_STRING("GL_VENDOR"), jint>(); }
inline jint GLES20::GL_VERSION_() { return get_static_field<SCAPIX_META_STRING("GL_VERSION"), jint>(); }
inline jint GLES20::GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_() { return get_static_field<SCAPIX_META_STRING("GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"), jint>(); }
inline jint GLES20::GL_VERTEX_ATTRIB_ARRAY_ENABLED_() { return get_static_field<SCAPIX_META_STRING("GL_VERTEX_ATTRIB_ARRAY_ENABLED"), jint>(); }
inline jint GLES20::GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_() { return get_static_field<SCAPIX_META_STRING("GL_VERTEX_ATTRIB_ARRAY_NORMALIZED"), jint>(); }
inline jint GLES20::GL_VERTEX_ATTRIB_ARRAY_POINTER_() { return get_static_field<SCAPIX_META_STRING("GL_VERTEX_ATTRIB_ARRAY_POINTER"), jint>(); }
inline jint GLES20::GL_VERTEX_ATTRIB_ARRAY_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_VERTEX_ATTRIB_ARRAY_SIZE"), jint>(); }
inline jint GLES20::GL_VERTEX_ATTRIB_ARRAY_STRIDE_() { return get_static_field<SCAPIX_META_STRING("GL_VERTEX_ATTRIB_ARRAY_STRIDE"), jint>(); }
inline jint GLES20::GL_VERTEX_ATTRIB_ARRAY_TYPE_() { return get_static_field<SCAPIX_META_STRING("GL_VERTEX_ATTRIB_ARRAY_TYPE"), jint>(); }
inline jint GLES20::GL_VERTEX_SHADER_() { return get_static_field<SCAPIX_META_STRING("GL_VERTEX_SHADER"), jint>(); }
inline jint GLES20::GL_VIEWPORT_() { return get_static_field<SCAPIX_META_STRING("GL_VIEWPORT"), jint>(); }
inline jint GLES20::GL_ZERO_() { return get_static_field<SCAPIX_META_STRING("GL_ZERO"), jint>(); }
inline ref<GLES20> GLES20::new_object() { return base_::new_object(); }
inline void GLES20::glActiveTexture(jint p1) { return call_static_method<SCAPIX_META_STRING("glActiveTexture"), void>(p1); }
inline void GLES20::glAttachShader(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glAttachShader"), void>(p1, p2); }
inline void GLES20::glBindAttribLocation(jint p1, jint p2, ref<java::lang::String> p3) { return call_static_method<SCAPIX_META_STRING("glBindAttribLocation"), void>(p1, p2, p3); }
inline void GLES20::glBindBuffer(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glBindBuffer"), void>(p1, p2); }
inline void GLES20::glBindFramebuffer(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glBindFramebuffer"), void>(p1, p2); }
inline void GLES20::glBindRenderbuffer(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glBindRenderbuffer"), void>(p1, p2); }
inline void GLES20::glBindTexture(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glBindTexture"), void>(p1, p2); }
inline void GLES20::glBlendColor(jfloat p1, jfloat p2, jfloat p3, jfloat p4) { return call_static_method<SCAPIX_META_STRING("glBlendColor"), void>(p1, p2, p3, p4); }
inline void GLES20::glBlendEquation(jint p1) { return call_static_method<SCAPIX_META_STRING("glBlendEquation"), void>(p1); }
inline void GLES20::glBlendEquationSeparate(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glBlendEquationSeparate"), void>(p1, p2); }
inline void GLES20::glBlendFunc(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glBlendFunc"), void>(p1, p2); }
inline void GLES20::glBlendFuncSeparate(jint p1, jint p2, jint p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glBlendFuncSeparate"), void>(p1, p2, p3, p4); }
inline void GLES20::glBufferData(jint p1, jint p2, ref<java::nio::Buffer> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glBufferData"), void>(p1, p2, p3, p4); }
inline void GLES20::glBufferSubData(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4) { return call_static_method<SCAPIX_META_STRING("glBufferSubData"), void>(p1, p2, p3, p4); }
inline jint GLES20::glCheckFramebufferStatus(jint p1) { return call_static_method<SCAPIX_META_STRING("glCheckFramebufferStatus"), jint>(p1); }
inline void GLES20::glClear(jint p1) { return call_static_method<SCAPIX_META_STRING("glClear"), void>(p1); }
inline void GLES20::glClearColor(jfloat p1, jfloat p2, jfloat p3, jfloat p4) { return call_static_method<SCAPIX_META_STRING("glClearColor"), void>(p1, p2, p3, p4); }
inline void GLES20::glClearDepthf(jfloat p1) { return call_static_method<SCAPIX_META_STRING("glClearDepthf"), void>(p1); }
inline void GLES20::glClearStencil(jint p1) { return call_static_method<SCAPIX_META_STRING("glClearStencil"), void>(p1); }
inline void GLES20::glColorMask(jboolean p1, jboolean p2, jboolean p3, jboolean p4) { return call_static_method<SCAPIX_META_STRING("glColorMask"), void>(p1, p2, p3, p4); }
inline void GLES20::glCompileShader(jint p1) { return call_static_method<SCAPIX_META_STRING("glCompileShader"), void>(p1); }
inline void GLES20::glCompressedTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, ref<java::nio::Buffer> p8) { return call_static_method<SCAPIX_META_STRING("glCompressedTexImage2D"), void>(p1, p2, p3, p4, p5, p6, p7, p8); }
inline void GLES20::glCompressedTexSubImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, ref<java::nio::Buffer> p9) { return call_static_method<SCAPIX_META_STRING("glCompressedTexSubImage2D"), void>(p1, p2, p3, p4, p5, p6, p7, p8, p9); }
inline void GLES20::glCopyTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8) { return call_static_method<SCAPIX_META_STRING("glCopyTexImage2D"), void>(p1, p2, p3, p4, p5, p6, p7, p8); }
inline void GLES20::glCopyTexSubImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8) { return call_static_method<SCAPIX_META_STRING("glCopyTexSubImage2D"), void>(p1, p2, p3, p4, p5, p6, p7, p8); }
inline jint GLES20::glCreateProgram() { return call_static_method<SCAPIX_META_STRING("glCreateProgram"), jint>(); }
inline jint GLES20::glCreateShader(jint p1) { return call_static_method<SCAPIX_META_STRING("glCreateShader"), jint>(p1); }
inline void GLES20::glCullFace(jint p1) { return call_static_method<SCAPIX_META_STRING("glCullFace"), void>(p1); }
inline void GLES20::glDeleteBuffers(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glDeleteBuffers"), void>(p1, p2, p3); }
inline void GLES20::glDeleteBuffers(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glDeleteBuffers"), void>(p1, p2); }
inline void GLES20::glDeleteFramebuffers(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glDeleteFramebuffers"), void>(p1, p2, p3); }
inline void GLES20::glDeleteFramebuffers(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glDeleteFramebuffers"), void>(p1, p2); }
inline void GLES20::glDeleteProgram(jint p1) { return call_static_method<SCAPIX_META_STRING("glDeleteProgram"), void>(p1); }
inline void GLES20::glDeleteRenderbuffers(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glDeleteRenderbuffers"), void>(p1, p2, p3); }
inline void GLES20::glDeleteRenderbuffers(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glDeleteRenderbuffers"), void>(p1, p2); }
inline void GLES20::glDeleteShader(jint p1) { return call_static_method<SCAPIX_META_STRING("glDeleteShader"), void>(p1); }
inline void GLES20::glDeleteTextures(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glDeleteTextures"), void>(p1, p2, p3); }
inline void GLES20::glDeleteTextures(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glDeleteTextures"), void>(p1, p2); }
inline void GLES20::glDepthFunc(jint p1) { return call_static_method<SCAPIX_META_STRING("glDepthFunc"), void>(p1); }
inline void GLES20::glDepthMask(jboolean p1) { return call_static_method<SCAPIX_META_STRING("glDepthMask"), void>(p1); }
inline void GLES20::glDepthRangef(jfloat p1, jfloat p2) { return call_static_method<SCAPIX_META_STRING("glDepthRangef"), void>(p1, p2); }
inline void GLES20::glDetachShader(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glDetachShader"), void>(p1, p2); }
inline void GLES20::glDisable(jint p1) { return call_static_method<SCAPIX_META_STRING("glDisable"), void>(p1); }
inline void GLES20::glDisableVertexAttribArray(jint p1) { return call_static_method<SCAPIX_META_STRING("glDisableVertexAttribArray"), void>(p1); }
inline void GLES20::glDrawArrays(jint p1, jint p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glDrawArrays"), void>(p1, p2, p3); }
inline void GLES20::glDrawElements(jint p1, jint p2, jint p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glDrawElements"), void>(p1, p2, p3, p4); }
inline void GLES20::glDrawElements(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4) { return call_static_method<SCAPIX_META_STRING("glDrawElements"), void>(p1, p2, p3, p4); }
inline void GLES20::glEnable(jint p1) { return call_static_method<SCAPIX_META_STRING("glEnable"), void>(p1); }
inline void GLES20::glEnableVertexAttribArray(jint p1) { return call_static_method<SCAPIX_META_STRING("glEnableVertexAttribArray"), void>(p1); }
inline void GLES20::glFinish() { return call_static_method<SCAPIX_META_STRING("glFinish"), void>(); }
inline void GLES20::glFlush() { return call_static_method<SCAPIX_META_STRING("glFlush"), void>(); }
inline void GLES20::glFramebufferRenderbuffer(jint p1, jint p2, jint p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glFramebufferRenderbuffer"), void>(p1, p2, p3, p4); }
inline void GLES20::glFramebufferTexture2D(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_static_method<SCAPIX_META_STRING("glFramebufferTexture2D"), void>(p1, p2, p3, p4, p5); }
inline void GLES20::glFrontFace(jint p1) { return call_static_method<SCAPIX_META_STRING("glFrontFace"), void>(p1); }
inline void GLES20::glGenBuffers(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glGenBuffers"), void>(p1, p2, p3); }
inline void GLES20::glGenBuffers(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glGenBuffers"), void>(p1, p2); }
inline void GLES20::glGenerateMipmap(jint p1) { return call_static_method<SCAPIX_META_STRING("glGenerateMipmap"), void>(p1); }
inline void GLES20::glGenFramebuffers(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glGenFramebuffers"), void>(p1, p2, p3); }
inline void GLES20::glGenFramebuffers(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glGenFramebuffers"), void>(p1, p2); }
inline void GLES20::glGenRenderbuffers(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glGenRenderbuffers"), void>(p1, p2, p3); }
inline void GLES20::glGenRenderbuffers(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glGenRenderbuffers"), void>(p1, p2); }
inline void GLES20::glGenTextures(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glGenTextures"), void>(p1, p2, p3); }
inline void GLES20::glGenTextures(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glGenTextures"), void>(p1, p2); }
inline void GLES20::glGetActiveAttrib(jint p1, jint p2, jint p3, ref<link::java::array<jint>> p4, jint p5, ref<link::java::array<jint>> p6, jint p7, ref<link::java::array<jint>> p8, jint p9, ref<link::java::array<jbyte>> p10, jint p11) { return call_static_method<SCAPIX_META_STRING("glGetActiveAttrib"), void>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
inline ref<java::lang::String> GLES20::glGetActiveAttrib(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4, ref<link::java::array<jint>> p5, jint p6) { return call_static_method<SCAPIX_META_STRING("glGetActiveAttrib"), ref<java::lang::String>>(p1, p2, p3, p4, p5, p6); }
inline ref<java::lang::String> GLES20::glGetActiveAttrib(jint p1, jint p2, ref<java::nio::IntBuffer> p3, ref<java::nio::IntBuffer> p4) { return call_static_method<SCAPIX_META_STRING("glGetActiveAttrib"), ref<java::lang::String>>(p1, p2, p3, p4); }
inline void GLES20::glGetActiveUniform(jint p1, jint p2, jint p3, ref<link::java::array<jint>> p4, jint p5, ref<link::java::array<jint>> p6, jint p7, ref<link::java::array<jint>> p8, jint p9, ref<link::java::array<jbyte>> p10, jint p11) { return call_static_method<SCAPIX_META_STRING("glGetActiveUniform"), void>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
inline ref<java::lang::String> GLES20::glGetActiveUniform(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4, ref<link::java::array<jint>> p5, jint p6) { return call_static_method<SCAPIX_META_STRING("glGetActiveUniform"), ref<java::lang::String>>(p1, p2, p3, p4, p5, p6); }
inline ref<java::lang::String> GLES20::glGetActiveUniform(jint p1, jint p2, ref<java::nio::IntBuffer> p3, ref<java::nio::IntBuffer> p4) { return call_static_method<SCAPIX_META_STRING("glGetActiveUniform"), ref<java::lang::String>>(p1, p2, p3, p4); }
inline void GLES20::glGetAttachedShaders(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4, ref<link::java::array<jint>> p5, jint p6) { return call_static_method<SCAPIX_META_STRING("glGetAttachedShaders"), void>(p1, p2, p3, p4, p5, p6); }
inline void GLES20::glGetAttachedShaders(jint p1, jint p2, ref<java::nio::IntBuffer> p3, ref<java::nio::IntBuffer> p4) { return call_static_method<SCAPIX_META_STRING("glGetAttachedShaders"), void>(p1, p2, p3, p4); }
inline jint GLES20::glGetAttribLocation(jint p1, ref<java::lang::String> p2) { return call_static_method<SCAPIX_META_STRING("glGetAttribLocation"), jint>(p1, p2); }
inline void GLES20::glGetBooleanv(jint p1, ref<link::java::array<jboolean>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glGetBooleanv"), void>(p1, p2, p3); }
inline void GLES20::glGetBooleanv(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glGetBooleanv"), void>(p1, p2); }
inline void GLES20::glGetBufferParameteriv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetBufferParameteriv"), void>(p1, p2, p3, p4); }
inline void GLES20::glGetBufferParameteriv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetBufferParameteriv"), void>(p1, p2, p3); }
inline jint GLES20::glGetError() { return call_static_method<SCAPIX_META_STRING("glGetError"), jint>(); }
inline void GLES20::glGetFloatv(jint p1, ref<link::java::array<jfloat>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glGetFloatv"), void>(p1, p2, p3); }
inline void GLES20::glGetFloatv(jint p1, ref<java::nio::FloatBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glGetFloatv"), void>(p1, p2); }
inline void GLES20::glGetFramebufferAttachmentParameteriv(jint p1, jint p2, jint p3, ref<link::java::array<jint>> p4, jint p5) { return call_static_method<SCAPIX_META_STRING("glGetFramebufferAttachmentParameteriv"), void>(p1, p2, p3, p4, p5); }
inline void GLES20::glGetFramebufferAttachmentParameteriv(jint p1, jint p2, jint p3, ref<java::nio::IntBuffer> p4) { return call_static_method<SCAPIX_META_STRING("glGetFramebufferAttachmentParameteriv"), void>(p1, p2, p3, p4); }
inline void GLES20::glGetIntegerv(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glGetIntegerv"), void>(p1, p2, p3); }
inline void GLES20::glGetIntegerv(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glGetIntegerv"), void>(p1, p2); }
inline void GLES20::glGetProgramiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetProgramiv"), void>(p1, p2, p3, p4); }
inline void GLES20::glGetProgramiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetProgramiv"), void>(p1, p2, p3); }
inline ref<java::lang::String> GLES20::glGetProgramInfoLog(jint p1) { return call_static_method<SCAPIX_META_STRING("glGetProgramInfoLog"), ref<java::lang::String>>(p1); }
inline void GLES20::glGetRenderbufferParameteriv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetRenderbufferParameteriv"), void>(p1, p2, p3, p4); }
inline void GLES20::glGetRenderbufferParameteriv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetRenderbufferParameteriv"), void>(p1, p2, p3); }
inline void GLES20::glGetShaderiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetShaderiv"), void>(p1, p2, p3, p4); }
inline void GLES20::glGetShaderiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetShaderiv"), void>(p1, p2, p3); }
inline ref<java::lang::String> GLES20::glGetShaderInfoLog(jint p1) { return call_static_method<SCAPIX_META_STRING("glGetShaderInfoLog"), ref<java::lang::String>>(p1); }
inline void GLES20::glGetShaderPrecisionFormat(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4, ref<link::java::array<jint>> p5, jint p6) { return call_static_method<SCAPIX_META_STRING("glGetShaderPrecisionFormat"), void>(p1, p2, p3, p4, p5, p6); }
inline void GLES20::glGetShaderPrecisionFormat(jint p1, jint p2, ref<java::nio::IntBuffer> p3, ref<java::nio::IntBuffer> p4) { return call_static_method<SCAPIX_META_STRING("glGetShaderPrecisionFormat"), void>(p1, p2, p3, p4); }
inline void GLES20::glGetShaderSource(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4, ref<link::java::array<jbyte>> p5, jint p6) { return call_static_method<SCAPIX_META_STRING("glGetShaderSource"), void>(p1, p2, p3, p4, p5, p6); }
inline ref<java::lang::String> GLES20::glGetShaderSource(jint p1) { return call_static_method<SCAPIX_META_STRING("glGetShaderSource"), ref<java::lang::String>>(p1); }
inline ref<java::lang::String> GLES20::glGetString(jint p1) { return call_static_method<SCAPIX_META_STRING("glGetString"), ref<java::lang::String>>(p1); }
inline void GLES20::glGetTexParameterfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetTexParameterfv"), void>(p1, p2, p3, p4); }
inline void GLES20::glGetTexParameterfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetTexParameterfv"), void>(p1, p2, p3); }
inline void GLES20::glGetTexParameteriv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetTexParameteriv"), void>(p1, p2, p3, p4); }
inline void GLES20::glGetTexParameteriv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetTexParameteriv"), void>(p1, p2, p3); }
inline void GLES20::glGetUniformfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetUniformfv"), void>(p1, p2, p3, p4); }
inline void GLES20::glGetUniformfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetUniformfv"), void>(p1, p2, p3); }
inline void GLES20::glGetUniformiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetUniformiv"), void>(p1, p2, p3, p4); }
inline void GLES20::glGetUniformiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetUniformiv"), void>(p1, p2, p3); }
inline jint GLES20::glGetUniformLocation(jint p1, ref<java::lang::String> p2) { return call_static_method<SCAPIX_META_STRING("glGetUniformLocation"), jint>(p1, p2); }
inline void GLES20::glGetVertexAttribfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetVertexAttribfv"), void>(p1, p2, p3, p4); }
inline void GLES20::glGetVertexAttribfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetVertexAttribfv"), void>(p1, p2, p3); }
inline void GLES20::glGetVertexAttribiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetVertexAttribiv"), void>(p1, p2, p3, p4); }
inline void GLES20::glGetVertexAttribiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetVertexAttribiv"), void>(p1, p2, p3); }
inline void GLES20::glHint(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glHint"), void>(p1, p2); }
inline jboolean GLES20::glIsBuffer(jint p1) { return call_static_method<SCAPIX_META_STRING("glIsBuffer"), jboolean>(p1); }
inline jboolean GLES20::glIsEnabled(jint p1) { return call_static_method<SCAPIX_META_STRING("glIsEnabled"), jboolean>(p1); }
inline jboolean GLES20::glIsFramebuffer(jint p1) { return call_static_method<SCAPIX_META_STRING("glIsFramebuffer"), jboolean>(p1); }
inline jboolean GLES20::glIsProgram(jint p1) { return call_static_method<SCAPIX_META_STRING("glIsProgram"), jboolean>(p1); }
inline jboolean GLES20::glIsRenderbuffer(jint p1) { return call_static_method<SCAPIX_META_STRING("glIsRenderbuffer"), jboolean>(p1); }
inline jboolean GLES20::glIsShader(jint p1) { return call_static_method<SCAPIX_META_STRING("glIsShader"), jboolean>(p1); }
inline jboolean GLES20::glIsTexture(jint p1) { return call_static_method<SCAPIX_META_STRING("glIsTexture"), jboolean>(p1); }
inline void GLES20::glLineWidth(jfloat p1) { return call_static_method<SCAPIX_META_STRING("glLineWidth"), void>(p1); }
inline void GLES20::glLinkProgram(jint p1) { return call_static_method<SCAPIX_META_STRING("glLinkProgram"), void>(p1); }
inline void GLES20::glPixelStorei(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glPixelStorei"), void>(p1, p2); }
inline void GLES20::glPolygonOffset(jfloat p1, jfloat p2) { return call_static_method<SCAPIX_META_STRING("glPolygonOffset"), void>(p1, p2); }
inline void GLES20::glReadPixels(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, ref<java::nio::Buffer> p7) { return call_static_method<SCAPIX_META_STRING("glReadPixels"), void>(p1, p2, p3, p4, p5, p6, p7); }
inline void GLES20::glReleaseShaderCompiler() { return call_static_method<SCAPIX_META_STRING("glReleaseShaderCompiler"), void>(); }
inline void GLES20::glRenderbufferStorage(jint p1, jint p2, jint p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glRenderbufferStorage"), void>(p1, p2, p3, p4); }
inline void GLES20::glSampleCoverage(jfloat p1, jboolean p2) { return call_static_method<SCAPIX_META_STRING("glSampleCoverage"), void>(p1, p2); }
inline void GLES20::glScissor(jint p1, jint p2, jint p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glScissor"), void>(p1, p2, p3, p4); }
inline void GLES20::glShaderBinary(jint p1, ref<link::java::array<jint>> p2, jint p3, jint p4, ref<java::nio::Buffer> p5, jint p6) { return call_static_method<SCAPIX_META_STRING("glShaderBinary"), void>(p1, p2, p3, p4, p5, p6); }
inline void GLES20::glShaderBinary(jint p1, ref<java::nio::IntBuffer> p2, jint p3, ref<java::nio::Buffer> p4, jint p5) { return call_static_method<SCAPIX_META_STRING("glShaderBinary"), void>(p1, p2, p3, p4, p5); }
inline void GLES20::glShaderSource(jint p1, ref<java::lang::String> p2) { return call_static_method<SCAPIX_META_STRING("glShaderSource"), void>(p1, p2); }
inline void GLES20::glStencilFunc(jint p1, jint p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glStencilFunc"), void>(p1, p2, p3); }
inline void GLES20::glStencilFuncSeparate(jint p1, jint p2, jint p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glStencilFuncSeparate"), void>(p1, p2, p3, p4); }
inline void GLES20::glStencilMask(jint p1) { return call_static_method<SCAPIX_META_STRING("glStencilMask"), void>(p1); }
inline void GLES20::glStencilMaskSeparate(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glStencilMaskSeparate"), void>(p1, p2); }
inline void GLES20::glStencilOp(jint p1, jint p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glStencilOp"), void>(p1, p2, p3); }
inline void GLES20::glStencilOpSeparate(jint p1, jint p2, jint p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glStencilOpSeparate"), void>(p1, p2, p3, p4); }
inline void GLES20::glTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, ref<java::nio::Buffer> p9) { return call_static_method<SCAPIX_META_STRING("glTexImage2D"), void>(p1, p2, p3, p4, p5, p6, p7, p8, p9); }
inline void GLES20::glTexParameterf(jint p1, jint p2, jfloat p3) { return call_static_method<SCAPIX_META_STRING("glTexParameterf"), void>(p1, p2, p3); }
inline void GLES20::glTexParameterfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glTexParameterfv"), void>(p1, p2, p3, p4); }
inline void GLES20::glTexParameterfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glTexParameterfv"), void>(p1, p2, p3); }
inline void GLES20::glTexParameteri(jint p1, jint p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glTexParameteri"), void>(p1, p2, p3); }
inline void GLES20::glTexParameteriv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glTexParameteriv"), void>(p1, p2, p3, p4); }
inline void GLES20::glTexParameteriv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glTexParameteriv"), void>(p1, p2, p3); }
inline void GLES20::glTexSubImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, ref<java::nio::Buffer> p9) { return call_static_method<SCAPIX_META_STRING("glTexSubImage2D"), void>(p1, p2, p3, p4, p5, p6, p7, p8, p9); }
inline void GLES20::glUniform1f(jint p1, jfloat p2) { return call_static_method<SCAPIX_META_STRING("glUniform1f"), void>(p1, p2); }
inline void GLES20::glUniform1fv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glUniform1fv"), void>(p1, p2, p3, p4); }
inline void GLES20::glUniform1fv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glUniform1fv"), void>(p1, p2, p3); }
inline void GLES20::glUniform1i(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glUniform1i"), void>(p1, p2); }
inline void GLES20::glUniform1iv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glUniform1iv"), void>(p1, p2, p3, p4); }
inline void GLES20::glUniform1iv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glUniform1iv"), void>(p1, p2, p3); }
inline void GLES20::glUniform2f(jint p1, jfloat p2, jfloat p3) { return call_static_method<SCAPIX_META_STRING("glUniform2f"), void>(p1, p2, p3); }
inline void GLES20::glUniform2fv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glUniform2fv"), void>(p1, p2, p3, p4); }
inline void GLES20::glUniform2fv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glUniform2fv"), void>(p1, p2, p3); }
inline void GLES20::glUniform2i(jint p1, jint p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glUniform2i"), void>(p1, p2, p3); }
inline void GLES20::glUniform2iv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glUniform2iv"), void>(p1, p2, p3, p4); }
inline void GLES20::glUniform2iv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glUniform2iv"), void>(p1, p2, p3); }
inline void GLES20::glUniform3f(jint p1, jfloat p2, jfloat p3, jfloat p4) { return call_static_method<SCAPIX_META_STRING("glUniform3f"), void>(p1, p2, p3, p4); }
inline void GLES20::glUniform3fv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glUniform3fv"), void>(p1, p2, p3, p4); }
inline void GLES20::glUniform3fv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glUniform3fv"), void>(p1, p2, p3); }
inline void GLES20::glUniform3i(jint p1, jint p2, jint p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glUniform3i"), void>(p1, p2, p3, p4); }
inline void GLES20::glUniform3iv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glUniform3iv"), void>(p1, p2, p3, p4); }
inline void GLES20::glUniform3iv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glUniform3iv"), void>(p1, p2, p3); }
inline void GLES20::glUniform4f(jint p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) { return call_static_method<SCAPIX_META_STRING("glUniform4f"), void>(p1, p2, p3, p4, p5); }
inline void GLES20::glUniform4fv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glUniform4fv"), void>(p1, p2, p3, p4); }
inline void GLES20::glUniform4fv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glUniform4fv"), void>(p1, p2, p3); }
inline void GLES20::glUniform4i(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_static_method<SCAPIX_META_STRING("glUniform4i"), void>(p1, p2, p3, p4, p5); }
inline void GLES20::glUniform4iv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glUniform4iv"), void>(p1, p2, p3, p4); }
inline void GLES20::glUniform4iv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glUniform4iv"), void>(p1, p2, p3); }
inline void GLES20::glUniformMatrix2fv(jint p1, jint p2, jboolean p3, ref<link::java::array<jfloat>> p4, jint p5) { return call_static_method<SCAPIX_META_STRING("glUniformMatrix2fv"), void>(p1, p2, p3, p4, p5); }
inline void GLES20::glUniformMatrix2fv(jint p1, jint p2, jboolean p3, ref<java::nio::FloatBuffer> p4) { return call_static_method<SCAPIX_META_STRING("glUniformMatrix2fv"), void>(p1, p2, p3, p4); }
inline void GLES20::glUniformMatrix3fv(jint p1, jint p2, jboolean p3, ref<link::java::array<jfloat>> p4, jint p5) { return call_static_method<SCAPIX_META_STRING("glUniformMatrix3fv"), void>(p1, p2, p3, p4, p5); }
inline void GLES20::glUniformMatrix3fv(jint p1, jint p2, jboolean p3, ref<java::nio::FloatBuffer> p4) { return call_static_method<SCAPIX_META_STRING("glUniformMatrix3fv"), void>(p1, p2, p3, p4); }
inline void GLES20::glUniformMatrix4fv(jint p1, jint p2, jboolean p3, ref<link::java::array<jfloat>> p4, jint p5) { return call_static_method<SCAPIX_META_STRING("glUniformMatrix4fv"), void>(p1, p2, p3, p4, p5); }
inline void GLES20::glUniformMatrix4fv(jint p1, jint p2, jboolean p3, ref<java::nio::FloatBuffer> p4) { return call_static_method<SCAPIX_META_STRING("glUniformMatrix4fv"), void>(p1, p2, p3, p4); }
inline void GLES20::glUseProgram(jint p1) { return call_static_method<SCAPIX_META_STRING("glUseProgram"), void>(p1); }
inline void GLES20::glValidateProgram(jint p1) { return call_static_method<SCAPIX_META_STRING("glValidateProgram"), void>(p1); }
inline void GLES20::glVertexAttrib1f(jint p1, jfloat p2) { return call_static_method<SCAPIX_META_STRING("glVertexAttrib1f"), void>(p1, p2); }
inline void GLES20::glVertexAttrib1fv(jint p1, ref<link::java::array<jfloat>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glVertexAttrib1fv"), void>(p1, p2, p3); }
inline void GLES20::glVertexAttrib1fv(jint p1, ref<java::nio::FloatBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glVertexAttrib1fv"), void>(p1, p2); }
inline void GLES20::glVertexAttrib2f(jint p1, jfloat p2, jfloat p3) { return call_static_method<SCAPIX_META_STRING("glVertexAttrib2f"), void>(p1, p2, p3); }
inline void GLES20::glVertexAttrib2fv(jint p1, ref<link::java::array<jfloat>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glVertexAttrib2fv"), void>(p1, p2, p3); }
inline void GLES20::glVertexAttrib2fv(jint p1, ref<java::nio::FloatBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glVertexAttrib2fv"), void>(p1, p2); }
inline void GLES20::glVertexAttrib3f(jint p1, jfloat p2, jfloat p3, jfloat p4) { return call_static_method<SCAPIX_META_STRING("glVertexAttrib3f"), void>(p1, p2, p3, p4); }
inline void GLES20::glVertexAttrib3fv(jint p1, ref<link::java::array<jfloat>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glVertexAttrib3fv"), void>(p1, p2, p3); }
inline void GLES20::glVertexAttrib3fv(jint p1, ref<java::nio::FloatBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glVertexAttrib3fv"), void>(p1, p2); }
inline void GLES20::glVertexAttrib4f(jint p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) { return call_static_method<SCAPIX_META_STRING("glVertexAttrib4f"), void>(p1, p2, p3, p4, p5); }
inline void GLES20::glVertexAttrib4fv(jint p1, ref<link::java::array<jfloat>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glVertexAttrib4fv"), void>(p1, p2, p3); }
inline void GLES20::glVertexAttrib4fv(jint p1, ref<java::nio::FloatBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glVertexAttrib4fv"), void>(p1, p2); }
inline void GLES20::glVertexAttribPointer(jint p1, jint p2, jint p3, jboolean p4, jint p5, jint p6) { return call_static_method<SCAPIX_META_STRING("glVertexAttribPointer"), void>(p1, p2, p3, p4, p5, p6); }
inline void GLES20::glVertexAttribPointer(jint indx, jint size, jint type, jboolean normalized, jint stride, ref<java::nio::Buffer> ptr) { return call_static_method<SCAPIX_META_STRING("glVertexAttribPointer"), void>(indx, size, type, normalized, stride, ptr); }
inline void GLES20::glViewport(jint p1, jint p2, jint p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glViewport"), void>(p1, p2, p3, p4); }

} // namespace android::opengl
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OPENGL_GLES20_H
