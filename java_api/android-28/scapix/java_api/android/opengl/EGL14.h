// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_OPENGL_EGL14_H
#define SCAPIX_ANDROID_OPENGL_EGL14_H

namespace scapix::java_api {

namespace android::opengl { class EGLConfig; }
namespace android::opengl { class EGLContext; }
namespace android::opengl { class EGLDisplay; }
namespace android::opengl { class EGLSurface; }
namespace java::lang { class String; }

namespace android::opengl {

class EGL14 : public object_base<SCAPIX_META_STRING("android/opengl/EGL14"),
	java::lang::Object>
{
public:

	static jint EGL_ALPHA_MASK_SIZE_();
	static jint EGL_ALPHA_SIZE_();
	static jint EGL_BACK_BUFFER_();
	static jint EGL_BAD_ACCESS_();
	static jint EGL_BAD_ALLOC_();
	static jint EGL_BAD_ATTRIBUTE_();
	static jint EGL_BAD_CONFIG_();
	static jint EGL_BAD_CONTEXT_();
	static jint EGL_BAD_CURRENT_SURFACE_();
	static jint EGL_BAD_DISPLAY_();
	static jint EGL_BAD_MATCH_();
	static jint EGL_BAD_NATIVE_PIXMAP_();
	static jint EGL_BAD_NATIVE_WINDOW_();
	static jint EGL_BAD_PARAMETER_();
	static jint EGL_BAD_SURFACE_();
	static jint EGL_BIND_TO_TEXTURE_RGB_();
	static jint EGL_BIND_TO_TEXTURE_RGBA_();
	static jint EGL_BLUE_SIZE_();
	static jint EGL_BUFFER_DESTROYED_();
	static jint EGL_BUFFER_PRESERVED_();
	static jint EGL_BUFFER_SIZE_();
	static jint EGL_CLIENT_APIS_();
	static jint EGL_COLOR_BUFFER_TYPE_();
	static jint EGL_CONFIG_CAVEAT_();
	static jint EGL_CONFIG_ID_();
	static jint EGL_CONFORMANT_();
	static jint EGL_CONTEXT_CLIENT_TYPE_();
	static jint EGL_CONTEXT_CLIENT_VERSION_();
	static jint EGL_CONTEXT_LOST_();
	static jint EGL_CORE_NATIVE_ENGINE_();
	static jint EGL_DEFAULT_DISPLAY_();
	static jint EGL_DEPTH_SIZE_();
	static jint EGL_DISPLAY_SCALING_();
	static jint EGL_DRAW_();
	static jint EGL_EXTENSIONS_();
	static jint EGL_FALSE_();
	static jint EGL_GREEN_SIZE_();
	static jint EGL_HEIGHT_();
	static jint EGL_HORIZONTAL_RESOLUTION_();
	static jint EGL_LARGEST_PBUFFER_();
	static jint EGL_LEVEL_();
	static jint EGL_LUMINANCE_BUFFER_();
	static jint EGL_LUMINANCE_SIZE_();
	static jint EGL_MATCH_NATIVE_PIXMAP_();
	static jint EGL_MAX_PBUFFER_HEIGHT_();
	static jint EGL_MAX_PBUFFER_PIXELS_();
	static jint EGL_MAX_PBUFFER_WIDTH_();
	static jint EGL_MAX_SWAP_INTERVAL_();
	static jint EGL_MIN_SWAP_INTERVAL_();
	static jint EGL_MIPMAP_LEVEL_();
	static jint EGL_MIPMAP_TEXTURE_();
	static jint EGL_MULTISAMPLE_RESOLVE_();
	static jint EGL_MULTISAMPLE_RESOLVE_BOX_();
	static jint EGL_MULTISAMPLE_RESOLVE_BOX_BIT_();
	static jint EGL_MULTISAMPLE_RESOLVE_DEFAULT_();
	static jint EGL_NATIVE_RENDERABLE_();
	static jint EGL_NATIVE_VISUAL_ID_();
	static jint EGL_NATIVE_VISUAL_TYPE_();
	static jint EGL_NONE_();
	static jint EGL_NON_CONFORMANT_CONFIG_();
	static jint EGL_NOT_INITIALIZED_();
	static ref<android::opengl::EGLContext> EGL_NO_CONTEXT_();
	static void EGL_NO_CONTEXT_(ref<android::opengl::EGLContext>);
	static ref<android::opengl::EGLDisplay> EGL_NO_DISPLAY_();
	static void EGL_NO_DISPLAY_(ref<android::opengl::EGLDisplay>);
	static ref<android::opengl::EGLSurface> EGL_NO_SURFACE_();
	static void EGL_NO_SURFACE_(ref<android::opengl::EGLSurface>);
	static jint EGL_NO_TEXTURE_();
	static jint EGL_OPENGL_API_();
	static jint EGL_OPENGL_BIT_();
	static jint EGL_OPENGL_ES2_BIT_();
	static jint EGL_OPENGL_ES_API_();
	static jint EGL_OPENGL_ES_BIT_();
	static jint EGL_OPENVG_API_();
	static jint EGL_OPENVG_BIT_();
	static jint EGL_OPENVG_IMAGE_();
	static jint EGL_PBUFFER_BIT_();
	static jint EGL_PIXEL_ASPECT_RATIO_();
	static jint EGL_PIXMAP_BIT_();
	static jint EGL_READ_();
	static jint EGL_RED_SIZE_();
	static jint EGL_RENDERABLE_TYPE_();
	static jint EGL_RENDER_BUFFER_();
	static jint EGL_RGB_BUFFER_();
	static jint EGL_SAMPLES_();
	static jint EGL_SAMPLE_BUFFERS_();
	static jint EGL_SINGLE_BUFFER_();
	static jint EGL_SLOW_CONFIG_();
	static jint EGL_STENCIL_SIZE_();
	static jint EGL_SUCCESS_();
	static jint EGL_SURFACE_TYPE_();
	static jint EGL_SWAP_BEHAVIOR_();
	static jint EGL_SWAP_BEHAVIOR_PRESERVED_BIT_();
	static jint EGL_TEXTURE_2D_();
	static jint EGL_TEXTURE_FORMAT_();
	static jint EGL_TEXTURE_RGB_();
	static jint EGL_TEXTURE_RGBA_();
	static jint EGL_TEXTURE_TARGET_();
	static jint EGL_TRANSPARENT_BLUE_VALUE_();
	static jint EGL_TRANSPARENT_GREEN_VALUE_();
	static jint EGL_TRANSPARENT_RED_VALUE_();
	static jint EGL_TRANSPARENT_RGB_();
	static jint EGL_TRANSPARENT_TYPE_();
	static jint EGL_TRUE_();
	static jint EGL_VENDOR_();
	static jint EGL_VERSION_();
	static jint EGL_VERTICAL_RESOLUTION_();
	static jint EGL_VG_ALPHA_FORMAT_();
	static jint EGL_VG_ALPHA_FORMAT_NONPRE_();
	static jint EGL_VG_ALPHA_FORMAT_PRE_();
	static jint EGL_VG_ALPHA_FORMAT_PRE_BIT_();
	static jint EGL_VG_COLORSPACE_();
	static jint EGL_VG_COLORSPACE_LINEAR_();
	static jint EGL_VG_COLORSPACE_LINEAR_BIT_();
	static jint EGL_VG_COLORSPACE_sRGB();
	static jint EGL_WIDTH_();
	static jint EGL_WINDOW_BIT_();

	static ref<EGL14> new_object();
	static jint eglGetError();
	static ref<android::opengl::EGLDisplay> eglGetDisplay(jint p1);
	static jboolean eglInitialize(ref<android::opengl::EGLDisplay> p1, ref<link::java::array<jint>> p2, jint p3, ref<link::java::array<jint>> p4, jint p5);
	static jboolean eglTerminate(ref<android::opengl::EGLDisplay> p1);
	static ref<java::lang::String> eglQueryString(ref<android::opengl::EGLDisplay> p1, jint p2);
	static jboolean eglGetConfigs(ref<android::opengl::EGLDisplay> p1, ref<link::java::array<android::opengl::EGLConfig>> p2, jint p3, jint p4, ref<link::java::array<jint>> p5, jint p6);
	static jboolean eglChooseConfig(ref<android::opengl::EGLDisplay> p1, ref<link::java::array<jint>> p2, jint p3, ref<link::java::array<android::opengl::EGLConfig>> p4, jint p5, jint p6, ref<link::java::array<jint>> p7, jint p8);
	static jboolean eglGetConfigAttrib(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLConfig> p2, jint p3, ref<link::java::array<jint>> p4, jint p5);
	static ref<android::opengl::EGLSurface> eglCreateWindowSurface(ref<android::opengl::EGLDisplay> dpy, ref<android::opengl::EGLConfig> config, ref<java::lang::Object> win, ref<link::java::array<jint>> attrib_list, jint offset);
	static ref<android::opengl::EGLSurface> eglCreatePbufferSurface(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLConfig> p2, ref<link::java::array<jint>> p3, jint p4);
	static ref<android::opengl::EGLSurface> eglCreatePixmapSurface(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLConfig> p2, jint p3, ref<link::java::array<jint>> p4, jint p5);
	static jboolean eglDestroySurface(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLSurface> p2);
	static jboolean eglQuerySurface(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLSurface> p2, jint p3, ref<link::java::array<jint>> p4, jint p5);
	static jboolean eglBindAPI(jint p1);
	static jint eglQueryAPI();
	static jboolean eglWaitClient();
	static jboolean eglReleaseThread();
	static ref<android::opengl::EGLSurface> eglCreatePbufferFromClientBuffer(ref<android::opengl::EGLDisplay> p1, jint p2, jint p3, ref<android::opengl::EGLConfig> p4, ref<link::java::array<jint>> p5, jint p6);
	static jboolean eglSurfaceAttrib(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLSurface> p2, jint p3, jint p4);
	static jboolean eglBindTexImage(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLSurface> p2, jint p3);
	static jboolean eglReleaseTexImage(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLSurface> p2, jint p3);
	static jboolean eglSwapInterval(ref<android::opengl::EGLDisplay> p1, jint p2);
	static ref<android::opengl::EGLContext> eglCreateContext(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLConfig> p2, ref<android::opengl::EGLContext> p3, ref<link::java::array<jint>> p4, jint p5);
	static jboolean eglDestroyContext(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLContext> p2);
	static jboolean eglMakeCurrent(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLSurface> p2, ref<android::opengl::EGLSurface> p3, ref<android::opengl::EGLContext> p4);
	static ref<android::opengl::EGLContext> eglGetCurrentContext();
	static ref<android::opengl::EGLSurface> eglGetCurrentSurface(jint p1);
	static ref<android::opengl::EGLDisplay> eglGetCurrentDisplay();
	static jboolean eglQueryContext(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLContext> p2, jint p3, ref<link::java::array<jint>> p4, jint p5);
	static jboolean eglWaitGL();
	static jboolean eglWaitNative(jint p1);
	static jboolean eglSwapBuffers(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLSurface> p2);
	static jboolean eglCopyBuffers(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLSurface> p2, jint p3);

protected:

	EGL14(handle_type h) : base_(h) {}

};

} // namespace android::opengl
} // namespace scapix::java_api

#include <scapix/java_api/android/opengl/EGLConfig.h>
#include <scapix/java_api/android/opengl/EGLContext.h>
#include <scapix/java_api/android/opengl/EGLDisplay.h>
#include <scapix/java_api/android/opengl/EGLSurface.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::opengl {

inline jint EGL14::EGL_ALPHA_MASK_SIZE_() { return get_static_field<SCAPIX_META_STRING("EGL_ALPHA_MASK_SIZE"), jint>(); }
inline jint EGL14::EGL_ALPHA_SIZE_() { return get_static_field<SCAPIX_META_STRING("EGL_ALPHA_SIZE"), jint>(); }
inline jint EGL14::EGL_BACK_BUFFER_() { return get_static_field<SCAPIX_META_STRING("EGL_BACK_BUFFER"), jint>(); }
inline jint EGL14::EGL_BAD_ACCESS_() { return get_static_field<SCAPIX_META_STRING("EGL_BAD_ACCESS"), jint>(); }
inline jint EGL14::EGL_BAD_ALLOC_() { return get_static_field<SCAPIX_META_STRING("EGL_BAD_ALLOC"), jint>(); }
inline jint EGL14::EGL_BAD_ATTRIBUTE_() { return get_static_field<SCAPIX_META_STRING("EGL_BAD_ATTRIBUTE"), jint>(); }
inline jint EGL14::EGL_BAD_CONFIG_() { return get_static_field<SCAPIX_META_STRING("EGL_BAD_CONFIG"), jint>(); }
inline jint EGL14::EGL_BAD_CONTEXT_() { return get_static_field<SCAPIX_META_STRING("EGL_BAD_CONTEXT"), jint>(); }
inline jint EGL14::EGL_BAD_CURRENT_SURFACE_() { return get_static_field<SCAPIX_META_STRING("EGL_BAD_CURRENT_SURFACE"), jint>(); }
inline jint EGL14::EGL_BAD_DISPLAY_() { return get_static_field<SCAPIX_META_STRING("EGL_BAD_DISPLAY"), jint>(); }
inline jint EGL14::EGL_BAD_MATCH_() { return get_static_field<SCAPIX_META_STRING("EGL_BAD_MATCH"), jint>(); }
inline jint EGL14::EGL_BAD_NATIVE_PIXMAP_() { return get_static_field<SCAPIX_META_STRING("EGL_BAD_NATIVE_PIXMAP"), jint>(); }
inline jint EGL14::EGL_BAD_NATIVE_WINDOW_() { return get_static_field<SCAPIX_META_STRING("EGL_BAD_NATIVE_WINDOW"), jint>(); }
inline jint EGL14::EGL_BAD_PARAMETER_() { return get_static_field<SCAPIX_META_STRING("EGL_BAD_PARAMETER"), jint>(); }
inline jint EGL14::EGL_BAD_SURFACE_() { return get_static_field<SCAPIX_META_STRING("EGL_BAD_SURFACE"), jint>(); }
inline jint EGL14::EGL_BIND_TO_TEXTURE_RGB_() { return get_static_field<SCAPIX_META_STRING("EGL_BIND_TO_TEXTURE_RGB"), jint>(); }
inline jint EGL14::EGL_BIND_TO_TEXTURE_RGBA_() { return get_static_field<SCAPIX_META_STRING("EGL_BIND_TO_TEXTURE_RGBA"), jint>(); }
inline jint EGL14::EGL_BLUE_SIZE_() { return get_static_field<SCAPIX_META_STRING("EGL_BLUE_SIZE"), jint>(); }
inline jint EGL14::EGL_BUFFER_DESTROYED_() { return get_static_field<SCAPIX_META_STRING("EGL_BUFFER_DESTROYED"), jint>(); }
inline jint EGL14::EGL_BUFFER_PRESERVED_() { return get_static_field<SCAPIX_META_STRING("EGL_BUFFER_PRESERVED"), jint>(); }
inline jint EGL14::EGL_BUFFER_SIZE_() { return get_static_field<SCAPIX_META_STRING("EGL_BUFFER_SIZE"), jint>(); }
inline jint EGL14::EGL_CLIENT_APIS_() { return get_static_field<SCAPIX_META_STRING("EGL_CLIENT_APIS"), jint>(); }
inline jint EGL14::EGL_COLOR_BUFFER_TYPE_() { return get_static_field<SCAPIX_META_STRING("EGL_COLOR_BUFFER_TYPE"), jint>(); }
inline jint EGL14::EGL_CONFIG_CAVEAT_() { return get_static_field<SCAPIX_META_STRING("EGL_CONFIG_CAVEAT"), jint>(); }
inline jint EGL14::EGL_CONFIG_ID_() { return get_static_field<SCAPIX_META_STRING("EGL_CONFIG_ID"), jint>(); }
inline jint EGL14::EGL_CONFORMANT_() { return get_static_field<SCAPIX_META_STRING("EGL_CONFORMANT"), jint>(); }
inline jint EGL14::EGL_CONTEXT_CLIENT_TYPE_() { return get_static_field<SCAPIX_META_STRING("EGL_CONTEXT_CLIENT_TYPE"), jint>(); }
inline jint EGL14::EGL_CONTEXT_CLIENT_VERSION_() { return get_static_field<SCAPIX_META_STRING("EGL_CONTEXT_CLIENT_VERSION"), jint>(); }
inline jint EGL14::EGL_CONTEXT_LOST_() { return get_static_field<SCAPIX_META_STRING("EGL_CONTEXT_LOST"), jint>(); }
inline jint EGL14::EGL_CORE_NATIVE_ENGINE_() { return get_static_field<SCAPIX_META_STRING("EGL_CORE_NATIVE_ENGINE"), jint>(); }
inline jint EGL14::EGL_DEFAULT_DISPLAY_() { return get_static_field<SCAPIX_META_STRING("EGL_DEFAULT_DISPLAY"), jint>(); }
inline jint EGL14::EGL_DEPTH_SIZE_() { return get_static_field<SCAPIX_META_STRING("EGL_DEPTH_SIZE"), jint>(); }
inline jint EGL14::EGL_DISPLAY_SCALING_() { return get_static_field<SCAPIX_META_STRING("EGL_DISPLAY_SCALING"), jint>(); }
inline jint EGL14::EGL_DRAW_() { return get_static_field<SCAPIX_META_STRING("EGL_DRAW"), jint>(); }
inline jint EGL14::EGL_EXTENSIONS_() { return get_static_field<SCAPIX_META_STRING("EGL_EXTENSIONS"), jint>(); }
inline jint EGL14::EGL_FALSE_() { return get_static_field<SCAPIX_META_STRING("EGL_FALSE"), jint>(); }
inline jint EGL14::EGL_GREEN_SIZE_() { return get_static_field<SCAPIX_META_STRING("EGL_GREEN_SIZE"), jint>(); }
inline jint EGL14::EGL_HEIGHT_() { return get_static_field<SCAPIX_META_STRING("EGL_HEIGHT"), jint>(); }
inline jint EGL14::EGL_HORIZONTAL_RESOLUTION_() { return get_static_field<SCAPIX_META_STRING("EGL_HORIZONTAL_RESOLUTION"), jint>(); }
inline jint EGL14::EGL_LARGEST_PBUFFER_() { return get_static_field<SCAPIX_META_STRING("EGL_LARGEST_PBUFFER"), jint>(); }
inline jint EGL14::EGL_LEVEL_() { return get_static_field<SCAPIX_META_STRING("EGL_LEVEL"), jint>(); }
inline jint EGL14::EGL_LUMINANCE_BUFFER_() { return get_static_field<SCAPIX_META_STRING("EGL_LUMINANCE_BUFFER"), jint>(); }
inline jint EGL14::EGL_LUMINANCE_SIZE_() { return get_static_field<SCAPIX_META_STRING("EGL_LUMINANCE_SIZE"), jint>(); }
inline jint EGL14::EGL_MATCH_NATIVE_PIXMAP_() { return get_static_field<SCAPIX_META_STRING("EGL_MATCH_NATIVE_PIXMAP"), jint>(); }
inline jint EGL14::EGL_MAX_PBUFFER_HEIGHT_() { return get_static_field<SCAPIX_META_STRING("EGL_MAX_PBUFFER_HEIGHT"), jint>(); }
inline jint EGL14::EGL_MAX_PBUFFER_PIXELS_() { return get_static_field<SCAPIX_META_STRING("EGL_MAX_PBUFFER_PIXELS"), jint>(); }
inline jint EGL14::EGL_MAX_PBUFFER_WIDTH_() { return get_static_field<SCAPIX_META_STRING("EGL_MAX_PBUFFER_WIDTH"), jint>(); }
inline jint EGL14::EGL_MAX_SWAP_INTERVAL_() { return get_static_field<SCAPIX_META_STRING("EGL_MAX_SWAP_INTERVAL"), jint>(); }
inline jint EGL14::EGL_MIN_SWAP_INTERVAL_() { return get_static_field<SCAPIX_META_STRING("EGL_MIN_SWAP_INTERVAL"), jint>(); }
inline jint EGL14::EGL_MIPMAP_LEVEL_() { return get_static_field<SCAPIX_META_STRING("EGL_MIPMAP_LEVEL"), jint>(); }
inline jint EGL14::EGL_MIPMAP_TEXTURE_() { return get_static_field<SCAPIX_META_STRING("EGL_MIPMAP_TEXTURE"), jint>(); }
inline jint EGL14::EGL_MULTISAMPLE_RESOLVE_() { return get_static_field<SCAPIX_META_STRING("EGL_MULTISAMPLE_RESOLVE"), jint>(); }
inline jint EGL14::EGL_MULTISAMPLE_RESOLVE_BOX_() { return get_static_field<SCAPIX_META_STRING("EGL_MULTISAMPLE_RESOLVE_BOX"), jint>(); }
inline jint EGL14::EGL_MULTISAMPLE_RESOLVE_BOX_BIT_() { return get_static_field<SCAPIX_META_STRING("EGL_MULTISAMPLE_RESOLVE_BOX_BIT"), jint>(); }
inline jint EGL14::EGL_MULTISAMPLE_RESOLVE_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("EGL_MULTISAMPLE_RESOLVE_DEFAULT"), jint>(); }
inline jint EGL14::EGL_NATIVE_RENDERABLE_() { return get_static_field<SCAPIX_META_STRING("EGL_NATIVE_RENDERABLE"), jint>(); }
inline jint EGL14::EGL_NATIVE_VISUAL_ID_() { return get_static_field<SCAPIX_META_STRING("EGL_NATIVE_VISUAL_ID"), jint>(); }
inline jint EGL14::EGL_NATIVE_VISUAL_TYPE_() { return get_static_field<SCAPIX_META_STRING("EGL_NATIVE_VISUAL_TYPE"), jint>(); }
inline jint EGL14::EGL_NONE_() { return get_static_field<SCAPIX_META_STRING("EGL_NONE"), jint>(); }
inline jint EGL14::EGL_NON_CONFORMANT_CONFIG_() { return get_static_field<SCAPIX_META_STRING("EGL_NON_CONFORMANT_CONFIG"), jint>(); }
inline jint EGL14::EGL_NOT_INITIALIZED_() { return get_static_field<SCAPIX_META_STRING("EGL_NOT_INITIALIZED"), jint>(); }
inline ref<android::opengl::EGLContext> EGL14::EGL_NO_CONTEXT_() { return get_static_field<SCAPIX_META_STRING("EGL_NO_CONTEXT"), ref<android::opengl::EGLContext>>(); }
inline void EGL14::EGL_NO_CONTEXT_(ref<android::opengl::EGLContext> v) { set_static_field<SCAPIX_META_STRING("EGL_NO_CONTEXT"), ref<android::opengl::EGLContext>>(v); }
inline ref<android::opengl::EGLDisplay> EGL14::EGL_NO_DISPLAY_() { return get_static_field<SCAPIX_META_STRING("EGL_NO_DISPLAY"), ref<android::opengl::EGLDisplay>>(); }
inline void EGL14::EGL_NO_DISPLAY_(ref<android::opengl::EGLDisplay> v) { set_static_field<SCAPIX_META_STRING("EGL_NO_DISPLAY"), ref<android::opengl::EGLDisplay>>(v); }
inline ref<android::opengl::EGLSurface> EGL14::EGL_NO_SURFACE_() { return get_static_field<SCAPIX_META_STRING("EGL_NO_SURFACE"), ref<android::opengl::EGLSurface>>(); }
inline void EGL14::EGL_NO_SURFACE_(ref<android::opengl::EGLSurface> v) { set_static_field<SCAPIX_META_STRING("EGL_NO_SURFACE"), ref<android::opengl::EGLSurface>>(v); }
inline jint EGL14::EGL_NO_TEXTURE_() { return get_static_field<SCAPIX_META_STRING("EGL_NO_TEXTURE"), jint>(); }
inline jint EGL14::EGL_OPENGL_API_() { return get_static_field<SCAPIX_META_STRING("EGL_OPENGL_API"), jint>(); }
inline jint EGL14::EGL_OPENGL_BIT_() { return get_static_field<SCAPIX_META_STRING("EGL_OPENGL_BIT"), jint>(); }
inline jint EGL14::EGL_OPENGL_ES2_BIT_() { return get_static_field<SCAPIX_META_STRING("EGL_OPENGL_ES2_BIT"), jint>(); }
inline jint EGL14::EGL_OPENGL_ES_API_() { return get_static_field<SCAPIX_META_STRING("EGL_OPENGL_ES_API"), jint>(); }
inline jint EGL14::EGL_OPENGL_ES_BIT_() { return get_static_field<SCAPIX_META_STRING("EGL_OPENGL_ES_BIT"), jint>(); }
inline jint EGL14::EGL_OPENVG_API_() { return get_static_field<SCAPIX_META_STRING("EGL_OPENVG_API"), jint>(); }
inline jint EGL14::EGL_OPENVG_BIT_() { return get_static_field<SCAPIX_META_STRING("EGL_OPENVG_BIT"), jint>(); }
inline jint EGL14::EGL_OPENVG_IMAGE_() { return get_static_field<SCAPIX_META_STRING("EGL_OPENVG_IMAGE"), jint>(); }
inline jint EGL14::EGL_PBUFFER_BIT_() { return get_static_field<SCAPIX_META_STRING("EGL_PBUFFER_BIT"), jint>(); }
inline jint EGL14::EGL_PIXEL_ASPECT_RATIO_() { return get_static_field<SCAPIX_META_STRING("EGL_PIXEL_ASPECT_RATIO"), jint>(); }
inline jint EGL14::EGL_PIXMAP_BIT_() { return get_static_field<SCAPIX_META_STRING("EGL_PIXMAP_BIT"), jint>(); }
inline jint EGL14::EGL_READ_() { return get_static_field<SCAPIX_META_STRING("EGL_READ"), jint>(); }
inline jint EGL14::EGL_RED_SIZE_() { return get_static_field<SCAPIX_META_STRING("EGL_RED_SIZE"), jint>(); }
inline jint EGL14::EGL_RENDERABLE_TYPE_() { return get_static_field<SCAPIX_META_STRING("EGL_RENDERABLE_TYPE"), jint>(); }
inline jint EGL14::EGL_RENDER_BUFFER_() { return get_static_field<SCAPIX_META_STRING("EGL_RENDER_BUFFER"), jint>(); }
inline jint EGL14::EGL_RGB_BUFFER_() { return get_static_field<SCAPIX_META_STRING("EGL_RGB_BUFFER"), jint>(); }
inline jint EGL14::EGL_SAMPLES_() { return get_static_field<SCAPIX_META_STRING("EGL_SAMPLES"), jint>(); }
inline jint EGL14::EGL_SAMPLE_BUFFERS_() { return get_static_field<SCAPIX_META_STRING("EGL_SAMPLE_BUFFERS"), jint>(); }
inline jint EGL14::EGL_SINGLE_BUFFER_() { return get_static_field<SCAPIX_META_STRING("EGL_SINGLE_BUFFER"), jint>(); }
inline jint EGL14::EGL_SLOW_CONFIG_() { return get_static_field<SCAPIX_META_STRING("EGL_SLOW_CONFIG"), jint>(); }
inline jint EGL14::EGL_STENCIL_SIZE_() { return get_static_field<SCAPIX_META_STRING("EGL_STENCIL_SIZE"), jint>(); }
inline jint EGL14::EGL_SUCCESS_() { return get_static_field<SCAPIX_META_STRING("EGL_SUCCESS"), jint>(); }
inline jint EGL14::EGL_SURFACE_TYPE_() { return get_static_field<SCAPIX_META_STRING("EGL_SURFACE_TYPE"), jint>(); }
inline jint EGL14::EGL_SWAP_BEHAVIOR_() { return get_static_field<SCAPIX_META_STRING("EGL_SWAP_BEHAVIOR"), jint>(); }
inline jint EGL14::EGL_SWAP_BEHAVIOR_PRESERVED_BIT_() { return get_static_field<SCAPIX_META_STRING("EGL_SWAP_BEHAVIOR_PRESERVED_BIT"), jint>(); }
inline jint EGL14::EGL_TEXTURE_2D_() { return get_static_field<SCAPIX_META_STRING("EGL_TEXTURE_2D"), jint>(); }
inline jint EGL14::EGL_TEXTURE_FORMAT_() { return get_static_field<SCAPIX_META_STRING("EGL_TEXTURE_FORMAT"), jint>(); }
inline jint EGL14::EGL_TEXTURE_RGB_() { return get_static_field<SCAPIX_META_STRING("EGL_TEXTURE_RGB"), jint>(); }
inline jint EGL14::EGL_TEXTURE_RGBA_() { return get_static_field<SCAPIX_META_STRING("EGL_TEXTURE_RGBA"), jint>(); }
inline jint EGL14::EGL_TEXTURE_TARGET_() { return get_static_field<SCAPIX_META_STRING("EGL_TEXTURE_TARGET"), jint>(); }
inline jint EGL14::EGL_TRANSPARENT_BLUE_VALUE_() { return get_static_field<SCAPIX_META_STRING("EGL_TRANSPARENT_BLUE_VALUE"), jint>(); }
inline jint EGL14::EGL_TRANSPARENT_GREEN_VALUE_() { return get_static_field<SCAPIX_META_STRING("EGL_TRANSPARENT_GREEN_VALUE"), jint>(); }
inline jint EGL14::EGL_TRANSPARENT_RED_VALUE_() { return get_static_field<SCAPIX_META_STRING("EGL_TRANSPARENT_RED_VALUE"), jint>(); }
inline jint EGL14::EGL_TRANSPARENT_RGB_() { return get_static_field<SCAPIX_META_STRING("EGL_TRANSPARENT_RGB"), jint>(); }
inline jint EGL14::EGL_TRANSPARENT_TYPE_() { return get_static_field<SCAPIX_META_STRING("EGL_TRANSPARENT_TYPE"), jint>(); }
inline jint EGL14::EGL_TRUE_() { return get_static_field<SCAPIX_META_STRING("EGL_TRUE"), jint>(); }
inline jint EGL14::EGL_VENDOR_() { return get_static_field<SCAPIX_META_STRING("EGL_VENDOR"), jint>(); }
inline jint EGL14::EGL_VERSION_() { return get_static_field<SCAPIX_META_STRING("EGL_VERSION"), jint>(); }
inline jint EGL14::EGL_VERTICAL_RESOLUTION_() { return get_static_field<SCAPIX_META_STRING("EGL_VERTICAL_RESOLUTION"), jint>(); }
inline jint EGL14::EGL_VG_ALPHA_FORMAT_() { return get_static_field<SCAPIX_META_STRING("EGL_VG_ALPHA_FORMAT"), jint>(); }
inline jint EGL14::EGL_VG_ALPHA_FORMAT_NONPRE_() { return get_static_field<SCAPIX_META_STRING("EGL_VG_ALPHA_FORMAT_NONPRE"), jint>(); }
inline jint EGL14::EGL_VG_ALPHA_FORMAT_PRE_() { return get_static_field<SCAPIX_META_STRING("EGL_VG_ALPHA_FORMAT_PRE"), jint>(); }
inline jint EGL14::EGL_VG_ALPHA_FORMAT_PRE_BIT_() { return get_static_field<SCAPIX_META_STRING("EGL_VG_ALPHA_FORMAT_PRE_BIT"), jint>(); }
inline jint EGL14::EGL_VG_COLORSPACE_() { return get_static_field<SCAPIX_META_STRING("EGL_VG_COLORSPACE"), jint>(); }
inline jint EGL14::EGL_VG_COLORSPACE_LINEAR_() { return get_static_field<SCAPIX_META_STRING("EGL_VG_COLORSPACE_LINEAR"), jint>(); }
inline jint EGL14::EGL_VG_COLORSPACE_LINEAR_BIT_() { return get_static_field<SCAPIX_META_STRING("EGL_VG_COLORSPACE_LINEAR_BIT"), jint>(); }
inline jint EGL14::EGL_VG_COLORSPACE_sRGB() { return get_static_field<SCAPIX_META_STRING("EGL_VG_COLORSPACE_sRGB"), jint>(); }
inline jint EGL14::EGL_WIDTH_() { return get_static_field<SCAPIX_META_STRING("EGL_WIDTH"), jint>(); }
inline jint EGL14::EGL_WINDOW_BIT_() { return get_static_field<SCAPIX_META_STRING("EGL_WINDOW_BIT"), jint>(); }
inline ref<EGL14> EGL14::new_object() { return base_::new_object(); }
inline jint EGL14::eglGetError() { return call_static_method<SCAPIX_META_STRING("eglGetError"), jint>(); }
inline ref<android::opengl::EGLDisplay> EGL14::eglGetDisplay(jint p1) { return call_static_method<SCAPIX_META_STRING("eglGetDisplay"), ref<android::opengl::EGLDisplay>>(p1); }
inline jboolean EGL14::eglInitialize(ref<android::opengl::EGLDisplay> p1, ref<link::java::array<jint>> p2, jint p3, ref<link::java::array<jint>> p4, jint p5) { return call_static_method<SCAPIX_META_STRING("eglInitialize"), jboolean>(p1, p2, p3, p4, p5); }
inline jboolean EGL14::eglTerminate(ref<android::opengl::EGLDisplay> p1) { return call_static_method<SCAPIX_META_STRING("eglTerminate"), jboolean>(p1); }
inline ref<java::lang::String> EGL14::eglQueryString(ref<android::opengl::EGLDisplay> p1, jint p2) { return call_static_method<SCAPIX_META_STRING("eglQueryString"), ref<java::lang::String>>(p1, p2); }
inline jboolean EGL14::eglGetConfigs(ref<android::opengl::EGLDisplay> p1, ref<link::java::array<android::opengl::EGLConfig>> p2, jint p3, jint p4, ref<link::java::array<jint>> p5, jint p6) { return call_static_method<SCAPIX_META_STRING("eglGetConfigs"), jboolean>(p1, p2, p3, p4, p5, p6); }
inline jboolean EGL14::eglChooseConfig(ref<android::opengl::EGLDisplay> p1, ref<link::java::array<jint>> p2, jint p3, ref<link::java::array<android::opengl::EGLConfig>> p4, jint p5, jint p6, ref<link::java::array<jint>> p7, jint p8) { return call_static_method<SCAPIX_META_STRING("eglChooseConfig"), jboolean>(p1, p2, p3, p4, p5, p6, p7, p8); }
inline jboolean EGL14::eglGetConfigAttrib(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLConfig> p2, jint p3, ref<link::java::array<jint>> p4, jint p5) { return call_static_method<SCAPIX_META_STRING("eglGetConfigAttrib"), jboolean>(p1, p2, p3, p4, p5); }
inline ref<android::opengl::EGLSurface> EGL14::eglCreateWindowSurface(ref<android::opengl::EGLDisplay> dpy, ref<android::opengl::EGLConfig> config, ref<java::lang::Object> win, ref<link::java::array<jint>> attrib_list, jint offset) { return call_static_method<SCAPIX_META_STRING("eglCreateWindowSurface"), ref<android::opengl::EGLSurface>>(dpy, config, win, attrib_list, offset); }
inline ref<android::opengl::EGLSurface> EGL14::eglCreatePbufferSurface(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLConfig> p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("eglCreatePbufferSurface"), ref<android::opengl::EGLSurface>>(p1, p2, p3, p4); }
inline ref<android::opengl::EGLSurface> EGL14::eglCreatePixmapSurface(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLConfig> p2, jint p3, ref<link::java::array<jint>> p4, jint p5) { return call_static_method<SCAPIX_META_STRING("eglCreatePixmapSurface"), ref<android::opengl::EGLSurface>>(p1, p2, p3, p4, p5); }
inline jboolean EGL14::eglDestroySurface(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLSurface> p2) { return call_static_method<SCAPIX_META_STRING("eglDestroySurface"), jboolean>(p1, p2); }
inline jboolean EGL14::eglQuerySurface(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLSurface> p2, jint p3, ref<link::java::array<jint>> p4, jint p5) { return call_static_method<SCAPIX_META_STRING("eglQuerySurface"), jboolean>(p1, p2, p3, p4, p5); }
inline jboolean EGL14::eglBindAPI(jint p1) { return call_static_method<SCAPIX_META_STRING("eglBindAPI"), jboolean>(p1); }
inline jint EGL14::eglQueryAPI() { return call_static_method<SCAPIX_META_STRING("eglQueryAPI"), jint>(); }
inline jboolean EGL14::eglWaitClient() { return call_static_method<SCAPIX_META_STRING("eglWaitClient"), jboolean>(); }
inline jboolean EGL14::eglReleaseThread() { return call_static_method<SCAPIX_META_STRING("eglReleaseThread"), jboolean>(); }
inline ref<android::opengl::EGLSurface> EGL14::eglCreatePbufferFromClientBuffer(ref<android::opengl::EGLDisplay> p1, jint p2, jint p3, ref<android::opengl::EGLConfig> p4, ref<link::java::array<jint>> p5, jint p6) { return call_static_method<SCAPIX_META_STRING("eglCreatePbufferFromClientBuffer"), ref<android::opengl::EGLSurface>>(p1, p2, p3, p4, p5, p6); }
inline jboolean EGL14::eglSurfaceAttrib(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLSurface> p2, jint p3, jint p4) { return call_static_method<SCAPIX_META_STRING("eglSurfaceAttrib"), jboolean>(p1, p2, p3, p4); }
inline jboolean EGL14::eglBindTexImage(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLSurface> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("eglBindTexImage"), jboolean>(p1, p2, p3); }
inline jboolean EGL14::eglReleaseTexImage(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLSurface> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("eglReleaseTexImage"), jboolean>(p1, p2, p3); }
inline jboolean EGL14::eglSwapInterval(ref<android::opengl::EGLDisplay> p1, jint p2) { return call_static_method<SCAPIX_META_STRING("eglSwapInterval"), jboolean>(p1, p2); }
inline ref<android::opengl::EGLContext> EGL14::eglCreateContext(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLConfig> p2, ref<android::opengl::EGLContext> p3, ref<link::java::array<jint>> p4, jint p5) { return call_static_method<SCAPIX_META_STRING("eglCreateContext"), ref<android::opengl::EGLContext>>(p1, p2, p3, p4, p5); }
inline jboolean EGL14::eglDestroyContext(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLContext> p2) { return call_static_method<SCAPIX_META_STRING("eglDestroyContext"), jboolean>(p1, p2); }
inline jboolean EGL14::eglMakeCurrent(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLSurface> p2, ref<android::opengl::EGLSurface> p3, ref<android::opengl::EGLContext> p4) { return call_static_method<SCAPIX_META_STRING("eglMakeCurrent"), jboolean>(p1, p2, p3, p4); }
inline ref<android::opengl::EGLContext> EGL14::eglGetCurrentContext() { return call_static_method<SCAPIX_META_STRING("eglGetCurrentContext"), ref<android::opengl::EGLContext>>(); }
inline ref<android::opengl::EGLSurface> EGL14::eglGetCurrentSurface(jint p1) { return call_static_method<SCAPIX_META_STRING("eglGetCurrentSurface"), ref<android::opengl::EGLSurface>>(p1); }
inline ref<android::opengl::EGLDisplay> EGL14::eglGetCurrentDisplay() { return call_static_method<SCAPIX_META_STRING("eglGetCurrentDisplay"), ref<android::opengl::EGLDisplay>>(); }
inline jboolean EGL14::eglQueryContext(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLContext> p2, jint p3, ref<link::java::array<jint>> p4, jint p5) { return call_static_method<SCAPIX_META_STRING("eglQueryContext"), jboolean>(p1, p2, p3, p4, p5); }
inline jboolean EGL14::eglWaitGL() { return call_static_method<SCAPIX_META_STRING("eglWaitGL"), jboolean>(); }
inline jboolean EGL14::eglWaitNative(jint p1) { return call_static_method<SCAPIX_META_STRING("eglWaitNative"), jboolean>(p1); }
inline jboolean EGL14::eglSwapBuffers(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLSurface> p2) { return call_static_method<SCAPIX_META_STRING("eglSwapBuffers"), jboolean>(p1, p2); }
inline jboolean EGL14::eglCopyBuffers(ref<android::opengl::EGLDisplay> p1, ref<android::opengl::EGLSurface> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("eglCopyBuffers"), jboolean>(p1, p2, p3); }

} // namespace android::opengl
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OPENGL_EGL14_H
