// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/view/SurfaceView.h>
#include <scapix/java_api/android/view/SurfaceHolder_Callback2.h>

#ifndef SCAPIX_ANDROID_OPENGL_GLSURFACEVIEW_H
#define SCAPIX_ANDROID_OPENGL_GLSURFACEVIEW_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::opengl { class GLSurfaceView_EGLConfigChooser; }
namespace android::opengl { class GLSurfaceView_EGLContextFactory; }
namespace android::opengl { class GLSurfaceView_EGLWindowSurfaceFactory; }
namespace android::opengl { class GLSurfaceView_GLWrapper; }
namespace android::opengl { class GLSurfaceView_Renderer; }
namespace android::util { class AttributeSet; }
namespace android::view { class SurfaceHolder; }
namespace java::lang { class Runnable; }

namespace android::opengl {

class GLSurfaceView : public object_base<SCAPIX_META_STRING("android/opengl/GLSurfaceView"),
	android::view::SurfaceView,
	android::view::SurfaceHolder_Callback2>
{
public:

	using Renderer = GLSurfaceView_Renderer;
	using GLWrapper = GLSurfaceView_GLWrapper;
	using EGLWindowSurfaceFactory = GLSurfaceView_EGLWindowSurfaceFactory;
	using EGLContextFactory = GLSurfaceView_EGLContextFactory;
	using EGLConfigChooser = GLSurfaceView_EGLConfigChooser;

	static jint DEBUG_CHECK_GL_ERROR_();
	static jint DEBUG_LOG_GL_CALLS_();
	static jint RENDERMODE_CONTINUOUSLY_();
	static jint RENDERMODE_WHEN_DIRTY_();

	static ref<GLSurfaceView> new_object(ref<android::content::Context> context);
	static ref<GLSurfaceView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	void setGLWrapper(ref<android::opengl::GLSurfaceView_GLWrapper> glWrapper);
	void setDebugFlags(jint debugFlags);
	jint getDebugFlags();
	void setPreserveEGLContextOnPause(jboolean preserveOnPause);
	jboolean getPreserveEGLContextOnPause();
	void setRenderer(ref<android::opengl::GLSurfaceView_Renderer> renderer);
	void setEGLContextFactory(ref<android::opengl::GLSurfaceView_EGLContextFactory> factory);
	void setEGLWindowSurfaceFactory(ref<android::opengl::GLSurfaceView_EGLWindowSurfaceFactory> factory);
	void setEGLConfigChooser(ref<android::opengl::GLSurfaceView_EGLConfigChooser> configChooser);
	void setEGLConfigChooser(jboolean needDepth);
	void setEGLConfigChooser(jint redSize, jint greenSize, jint blueSize, jint alphaSize, jint depthSize, jint stencilSize);
	void setEGLContextClientVersion(jint version);
	void setRenderMode(jint renderMode);
	jint getRenderMode();
	void requestRender();
	void surfaceCreated(ref<android::view::SurfaceHolder> holder);
	void surfaceDestroyed(ref<android::view::SurfaceHolder> holder);
	void surfaceChanged(ref<android::view::SurfaceHolder> holder, jint format, jint w, jint h);
	void surfaceRedrawNeededAsync(ref<android::view::SurfaceHolder> holder, ref<java::lang::Runnable> finishDrawing);
	void surfaceRedrawNeeded(ref<android::view::SurfaceHolder> holder);
	void onPause();
	void onResume();
	void queueEvent(ref<java::lang::Runnable> r);

protected:

	GLSurfaceView(handle_type h) : base_(h) {}

};

} // namespace android::opengl
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/opengl/GLSurfaceView_EGLConfigChooser.h>
#include <scapix/java_api/android/opengl/GLSurfaceView_EGLContextFactory.h>
#include <scapix/java_api/android/opengl/GLSurfaceView_EGLWindowSurfaceFactory.h>
#include <scapix/java_api/android/opengl/GLSurfaceView_GLWrapper.h>
#include <scapix/java_api/android/opengl/GLSurfaceView_Renderer.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/SurfaceHolder.h>
#include <scapix/java_api/java/lang/Runnable.h>

namespace scapix::java_api {
namespace android::opengl {

inline jint GLSurfaceView::DEBUG_CHECK_GL_ERROR_() { return get_static_field<SCAPIX_META_STRING("DEBUG_CHECK_GL_ERROR"), jint>(); }
inline jint GLSurfaceView::DEBUG_LOG_GL_CALLS_() { return get_static_field<SCAPIX_META_STRING("DEBUG_LOG_GL_CALLS"), jint>(); }
inline jint GLSurfaceView::RENDERMODE_CONTINUOUSLY_() { return get_static_field<SCAPIX_META_STRING("RENDERMODE_CONTINUOUSLY"), jint>(); }
inline jint GLSurfaceView::RENDERMODE_WHEN_DIRTY_() { return get_static_field<SCAPIX_META_STRING("RENDERMODE_WHEN_DIRTY"), jint>(); }
inline ref<GLSurfaceView> GLSurfaceView::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<GLSurfaceView> GLSurfaceView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline void GLSurfaceView::setGLWrapper(ref<android::opengl::GLSurfaceView_GLWrapper> glWrapper) { return call_method<SCAPIX_META_STRING("setGLWrapper"), void>(glWrapper); }
inline void GLSurfaceView::setDebugFlags(jint debugFlags) { return call_method<SCAPIX_META_STRING("setDebugFlags"), void>(debugFlags); }
inline jint GLSurfaceView::getDebugFlags() { return call_method<SCAPIX_META_STRING("getDebugFlags"), jint>(); }
inline void GLSurfaceView::setPreserveEGLContextOnPause(jboolean preserveOnPause) { return call_method<SCAPIX_META_STRING("setPreserveEGLContextOnPause"), void>(preserveOnPause); }
inline jboolean GLSurfaceView::getPreserveEGLContextOnPause() { return call_method<SCAPIX_META_STRING("getPreserveEGLContextOnPause"), jboolean>(); }
inline void GLSurfaceView::setRenderer(ref<android::opengl::GLSurfaceView_Renderer> renderer) { return call_method<SCAPIX_META_STRING("setRenderer"), void>(renderer); }
inline void GLSurfaceView::setEGLContextFactory(ref<android::opengl::GLSurfaceView_EGLContextFactory> factory) { return call_method<SCAPIX_META_STRING("setEGLContextFactory"), void>(factory); }
inline void GLSurfaceView::setEGLWindowSurfaceFactory(ref<android::opengl::GLSurfaceView_EGLWindowSurfaceFactory> factory) { return call_method<SCAPIX_META_STRING("setEGLWindowSurfaceFactory"), void>(factory); }
inline void GLSurfaceView::setEGLConfigChooser(ref<android::opengl::GLSurfaceView_EGLConfigChooser> configChooser) { return call_method<SCAPIX_META_STRING("setEGLConfigChooser"), void>(configChooser); }
inline void GLSurfaceView::setEGLConfigChooser(jboolean needDepth) { return call_method<SCAPIX_META_STRING("setEGLConfigChooser"), void>(needDepth); }
inline void GLSurfaceView::setEGLConfigChooser(jint redSize, jint greenSize, jint blueSize, jint alphaSize, jint depthSize, jint stencilSize) { return call_method<SCAPIX_META_STRING("setEGLConfigChooser"), void>(redSize, greenSize, blueSize, alphaSize, depthSize, stencilSize); }
inline void GLSurfaceView::setEGLContextClientVersion(jint version) { return call_method<SCAPIX_META_STRING("setEGLContextClientVersion"), void>(version); }
inline void GLSurfaceView::setRenderMode(jint renderMode) { return call_method<SCAPIX_META_STRING("setRenderMode"), void>(renderMode); }
inline jint GLSurfaceView::getRenderMode() { return call_method<SCAPIX_META_STRING("getRenderMode"), jint>(); }
inline void GLSurfaceView::requestRender() { return call_method<SCAPIX_META_STRING("requestRender"), void>(); }
inline void GLSurfaceView::surfaceCreated(ref<android::view::SurfaceHolder> holder) { return call_method<SCAPIX_META_STRING("surfaceCreated"), void>(holder); }
inline void GLSurfaceView::surfaceDestroyed(ref<android::view::SurfaceHolder> holder) { return call_method<SCAPIX_META_STRING("surfaceDestroyed"), void>(holder); }
inline void GLSurfaceView::surfaceChanged(ref<android::view::SurfaceHolder> holder, jint format, jint w, jint h) { return call_method<SCAPIX_META_STRING("surfaceChanged"), void>(holder, format, w, h); }
inline void GLSurfaceView::surfaceRedrawNeededAsync(ref<android::view::SurfaceHolder> holder, ref<java::lang::Runnable> finishDrawing) { return call_method<SCAPIX_META_STRING("surfaceRedrawNeededAsync"), void>(holder, finishDrawing); }
inline void GLSurfaceView::surfaceRedrawNeeded(ref<android::view::SurfaceHolder> holder) { return call_method<SCAPIX_META_STRING("surfaceRedrawNeeded"), void>(holder); }
inline void GLSurfaceView::onPause() { return call_method<SCAPIX_META_STRING("onPause"), void>(); }
inline void GLSurfaceView::onResume() { return call_method<SCAPIX_META_STRING("onResume"), void>(); }
inline void GLSurfaceView::queueEvent(ref<java::lang::Runnable> r) { return call_method<SCAPIX_META_STRING("queueEvent"), void>(r); }

} // namespace android::opengl
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OPENGL_GLSURFACEVIEW_H
