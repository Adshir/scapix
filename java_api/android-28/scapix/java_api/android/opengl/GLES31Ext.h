// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_OPENGL_GLES31EXT_H
#define SCAPIX_ANDROID_OPENGL_GLES31EXT_H

namespace scapix::java_api {

namespace android::opengl { class GLES31Ext_DebugProcKHR; }
namespace java::lang { class String; }
namespace java::nio { class ByteBuffer; }
namespace java::nio { class IntBuffer; }

namespace android::opengl {

class GLES31Ext : public object_base<SCAPIX_META_STRING("android/opengl/GLES31Ext"),
	java::lang::Object>
{
public:

	using DebugProcKHR = GLES31Ext_DebugProcKHR;

	static jint GL_BLEND_ADVANCED_COHERENT_KHR_();
	static jint GL_BUFFER_KHR_();
	static jint GL_CLAMP_TO_BORDER_EXT_();
	static jint GL_COLORBURN_KHR_();
	static jint GL_COLORDODGE_KHR_();
	static jint GL_COMPRESSED_RGBA_ASTC_10x10_KHR();
	static jint GL_COMPRESSED_RGBA_ASTC_10x5_KHR();
	static jint GL_COMPRESSED_RGBA_ASTC_10x6_KHR();
	static jint GL_COMPRESSED_RGBA_ASTC_10x8_KHR();
	static jint GL_COMPRESSED_RGBA_ASTC_12x10_KHR();
	static jint GL_COMPRESSED_RGBA_ASTC_12x12_KHR();
	static jint GL_COMPRESSED_RGBA_ASTC_4x4_KHR();
	static jint GL_COMPRESSED_RGBA_ASTC_5x4_KHR();
	static jint GL_COMPRESSED_RGBA_ASTC_5x5_KHR();
	static jint GL_COMPRESSED_RGBA_ASTC_6x5_KHR();
	static jint GL_COMPRESSED_RGBA_ASTC_6x6_KHR();
	static jint GL_COMPRESSED_RGBA_ASTC_8x5_KHR();
	static jint GL_COMPRESSED_RGBA_ASTC_8x6_KHR();
	static jint GL_COMPRESSED_RGBA_ASTC_8x8_KHR();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR();
	static jint GL_CONTEXT_FLAG_DEBUG_BIT_KHR_();
	static jint GL_DARKEN_KHR_();
	static jint GL_DEBUG_CALLBACK_FUNCTION_KHR_();
	static jint GL_DEBUG_CALLBACK_USER_PARAM_KHR_();
	static jint GL_DEBUG_GROUP_STACK_DEPTH_KHR_();
	static jint GL_DEBUG_LOGGED_MESSAGES_KHR_();
	static jint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR_();
	static jint GL_DEBUG_OUTPUT_KHR_();
	static jint GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR_();
	static jint GL_DEBUG_SEVERITY_HIGH_KHR_();
	static jint GL_DEBUG_SEVERITY_LOW_KHR_();
	static jint GL_DEBUG_SEVERITY_MEDIUM_KHR_();
	static jint GL_DEBUG_SEVERITY_NOTIFICATION_KHR_();
	static jint GL_DEBUG_SOURCE_API_KHR_();
	static jint GL_DEBUG_SOURCE_APPLICATION_KHR_();
	static jint GL_DEBUG_SOURCE_OTHER_KHR_();
	static jint GL_DEBUG_SOURCE_SHADER_COMPILER_KHR_();
	static jint GL_DEBUG_SOURCE_THIRD_PARTY_KHR_();
	static jint GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR_();
	static jint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR_();
	static jint GL_DEBUG_TYPE_ERROR_KHR_();
	static jint GL_DEBUG_TYPE_MARKER_KHR_();
	static jint GL_DEBUG_TYPE_OTHER_KHR_();
	static jint GL_DEBUG_TYPE_PERFORMANCE_KHR_();
	static jint GL_DEBUG_TYPE_POP_GROUP_KHR_();
	static jint GL_DEBUG_TYPE_PORTABILITY_KHR_();
	static jint GL_DEBUG_TYPE_PUSH_GROUP_KHR_();
	static jint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR_();
	static jint GL_DECODE_EXT_();
	static jint GL_DIFFERENCE_KHR_();
	static jint GL_EXCLUSION_KHR_();
	static jint GL_FIRST_VERTEX_CONVENTION_EXT_();
	static jint GL_FRACTIONAL_EVEN_EXT_();
	static jint GL_FRACTIONAL_ODD_EXT_();
	static jint GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES_();
	static jint GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT_();
	static jint GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT_();
	static jint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT_();
	static jint GL_GEOMETRY_LINKED_INPUT_TYPE_EXT_();
	static jint GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT_();
	static jint GL_GEOMETRY_LINKED_VERTICES_OUT_EXT_();
	static jint GL_GEOMETRY_SHADER_BIT_EXT_();
	static jint GL_GEOMETRY_SHADER_EXT_();
	static jint GL_GEOMETRY_SHADER_INVOCATIONS_EXT_();
	static jint GL_HARDLIGHT_KHR_();
	static jint GL_HSL_COLOR_KHR_();
	static jint GL_HSL_HUE_KHR_();
	static jint GL_HSL_LUMINOSITY_KHR_();
	static jint GL_HSL_SATURATION_KHR_();
	static jint GL_IMAGE_BUFFER_EXT_();
	static jint GL_IMAGE_CUBE_MAP_ARRAY_EXT_();
	static jint GL_INT_IMAGE_BUFFER_EXT_();
	static jint GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT_();
	static jint GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES_();
	static jint GL_INT_SAMPLER_BUFFER_EXT_();
	static jint GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT_();
	static jint GL_ISOLINES_EXT_();
	static jint GL_IS_PER_PATCH_EXT_();
	static jint GL_LAST_VERTEX_CONVENTION_EXT_();
	static jint GL_LAYER_PROVOKING_VERTEX_EXT_();
	static jint GL_LIGHTEN_KHR_();
	static jint GL_LINES_ADJACENCY_EXT_();
	static jint GL_LINE_STRIP_ADJACENCY_EXT_();
	static jint GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT_();
	static jint GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT_();
	static jint GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT_();
	static jint GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR_();
	static jint GL_MAX_DEBUG_LOGGED_MESSAGES_KHR_();
	static jint GL_MAX_DEBUG_MESSAGE_LENGTH_KHR_();
	static jint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES_();
	static jint GL_MAX_FRAMEBUFFER_LAYERS_EXT_();
	static jint GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT_();
	static jint GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT_();
	static jint GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT_();
	static jint GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT_();
	static jint GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT_();
	static jint GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT_();
	static jint GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT_();
	static jint GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT_();
	static jint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT_();
	static jint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT_();
	static jint GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT_();
	static jint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT_();
	static jint GL_MAX_LABEL_LENGTH_KHR_();
	static jint GL_MAX_PATCH_VERTICES_EXT_();
	static jint GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT_();
	static jint GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT_();
	static jint GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT_();
	static jint GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT_();
	static jint GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT_();
	static jint GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT_();
	static jint GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT_();
	static jint GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT_();
	static jint GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT_();
	static jint GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT_();
	static jint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT_();
	static jint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT_();
	static jint GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT_();
	static jint GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT_();
	static jint GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT_();
	static jint GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT_();
	static jint GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT_();
	static jint GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT_();
	static jint GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT_();
	static jint GL_MAX_TESS_GEN_LEVEL_EXT_();
	static jint GL_MAX_TESS_PATCH_COMPONENTS_EXT_();
	static jint GL_MAX_TEXTURE_BUFFER_SIZE_EXT_();
	static jint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES_();
	static jint GL_MIN_SAMPLE_SHADING_VALUE_OES_();
	static jint GL_MULTIPLY_KHR_();
	static jint GL_OVERLAY_KHR_();
	static jint GL_PATCHES_EXT_();
	static jint GL_PATCH_VERTICES_EXT_();
	static jint GL_PRIMITIVES_GENERATED_EXT_();
	static jint GL_PRIMITIVE_BOUNDING_BOX_EXT_();
	static jint GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_();
	static jint GL_PROGRAM_KHR_();
	static jint GL_QUADS_EXT_();
	static jint GL_QUERY_KHR_();
	static jint GL_REFERENCED_BY_GEOMETRY_SHADER_EXT_();
	static jint GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT_();
	static jint GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT_();
	static jint GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES_();
	static jint GL_SAMPLER_BUFFER_EXT_();
	static jint GL_SAMPLER_CUBE_MAP_ARRAY_EXT_();
	static jint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT_();
	static jint GL_SAMPLER_KHR_();
	static jint GL_SAMPLE_SHADING_OES_();
	static jint GL_SCREEN_KHR_();
	static jint GL_SHADER_KHR_();
	static jint GL_SKIP_DECODE_EXT_();
	static jint GL_SOFTLIGHT_KHR_();
	static jint GL_STACK_OVERFLOW_KHR_();
	static jint GL_STACK_UNDERFLOW_KHR_();
	static jint GL_STENCIL_INDEX8_OES_();
	static jint GL_STENCIL_INDEX_OES_();
	static jint GL_TESS_CONTROL_OUTPUT_VERTICES_EXT_();
	static jint GL_TESS_CONTROL_SHADER_BIT_EXT_();
	static jint GL_TESS_CONTROL_SHADER_EXT_();
	static jint GL_TESS_EVALUATION_SHADER_BIT_EXT_();
	static jint GL_TESS_EVALUATION_SHADER_EXT_();
	static jint GL_TESS_GEN_MODE_EXT_();
	static jint GL_TESS_GEN_POINT_MODE_EXT_();
	static jint GL_TESS_GEN_SPACING_EXT_();
	static jint GL_TESS_GEN_VERTEX_ORDER_EXT_();
	static jint GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES_();
	static jint GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES_();
	static jint GL_TEXTURE_BINDING_BUFFER_EXT_();
	static jint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT_();
	static jint GL_TEXTURE_BORDER_COLOR_EXT_();
	static jint GL_TEXTURE_BUFFER_BINDING_EXT_();
	static jint GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT_();
	static jint GL_TEXTURE_BUFFER_EXT_();
	static jint GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT_();
	static jint GL_TEXTURE_BUFFER_OFFSET_EXT_();
	static jint GL_TEXTURE_BUFFER_SIZE_EXT_();
	static jint GL_TEXTURE_CUBE_MAP_ARRAY_EXT_();
	static jint GL_TEXTURE_SRGB_DECODE_EXT_();
	static jint GL_TRIANGLES_ADJACENCY_EXT_();
	static jint GL_TRIANGLE_STRIP_ADJACENCY_EXT_();
	static jint GL_UNDEFINED_VERTEX_EXT_();
	static jint GL_UNSIGNED_INT_IMAGE_BUFFER_EXT_();
	static jint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT_();
	static jint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES_();
	static jint GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT_();
	static jint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT_();
	static jint GL_VERTEX_ARRAY_KHR_();

	static void glBlendBarrierKHR();
	static void glDebugMessageControlKHR(jint p1, jint p2, jint p3, jint p4, ref<link::java::array<jint>> p5, jint p6, jboolean p7);
	static void glDebugMessageControlKHR(jint p1, jint p2, jint p3, jint p4, ref<java::nio::IntBuffer> p5, jboolean p6);
	static void glDebugMessageInsertKHR(jint p1, jint p2, jint p3, jint p4, ref<java::lang::String> p5);
	static void glDebugMessageCallbackKHR(ref<android::opengl::GLES31Ext_DebugProcKHR> p1);
	static jint glGetDebugMessageLogKHR(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4, ref<link::java::array<jint>> p5, jint p6, ref<link::java::array<jint>> p7, jint p8, ref<link::java::array<jint>> p9, jint p10, ref<link::java::array<jint>> p11, jint p12, ref<link::java::array<jbyte>> p13, jint p14);
	static jint glGetDebugMessageLogKHR(jint p1, ref<java::nio::IntBuffer> p2, ref<java::nio::IntBuffer> p3, ref<java::nio::IntBuffer> p4, ref<java::nio::IntBuffer> p5, ref<java::nio::IntBuffer> p6, ref<java::nio::ByteBuffer> p7);
	static ref<link::java::array<java::lang::String>> glGetDebugMessageLogKHR(jint p1, ref<link::java::array<jint>> p2, jint p3, ref<link::java::array<jint>> p4, jint p5, ref<link::java::array<jint>> p6, jint p7, ref<link::java::array<jint>> p8, jint p9);
	static ref<link::java::array<java::lang::String>> glGetDebugMessageLogKHR(jint p1, ref<java::nio::IntBuffer> p2, ref<java::nio::IntBuffer> p3, ref<java::nio::IntBuffer> p4, ref<java::nio::IntBuffer> p5);
	static void glPushDebugGroupKHR(jint p1, jint p2, jint p3, ref<java::lang::String> p4);
	static void glPopDebugGroupKHR();
	static void glObjectLabelKHR(jint p1, jint p2, jint p3, ref<java::lang::String> p4);
	static ref<java::lang::String> glGetObjectLabelKHR(jint p1, jint p2);
	static void glObjectPtrLabelKHR(jlong p1, ref<java::lang::String> p2);
	static ref<java::lang::String> glGetObjectPtrLabelKHR(jlong p1);
	static ref<android::opengl::GLES31Ext_DebugProcKHR> glGetDebugMessageCallbackKHR();
	static void glMinSampleShadingOES(jfloat p1);
	static void glTexStorage3DMultisampleOES(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jboolean p7);
	static void glCopyImageSubDataEXT(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jint p9, jint p10, jint p11, jint p12, jint p13, jint p14, jint p15);
	static void glEnableiEXT(jint p1, jint p2);
	static void glDisableiEXT(jint p1, jint p2);
	static void glBlendEquationiEXT(jint p1, jint p2);
	static void glBlendEquationSeparateiEXT(jint p1, jint p2, jint p3);
	static void glBlendFunciEXT(jint p1, jint p2, jint p3);
	static void glBlendFuncSeparateiEXT(jint p1, jint p2, jint p3, jint p4, jint p5);
	static void glColorMaskiEXT(jint p1, jboolean p2, jboolean p3, jboolean p4, jboolean p5);
	static jboolean glIsEnablediEXT(jint p1, jint p2);
	static void glFramebufferTextureEXT(jint p1, jint p2, jint p3, jint p4);
	static void glPrimitiveBoundingBoxEXT(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6, jfloat p7, jfloat p8);
	static void glPatchParameteriEXT(jint p1, jint p2);
	static void glTexParameterIivEXT(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glTexParameterIivEXT(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glTexParameterIuivEXT(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glTexParameterIuivEXT(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glGetTexParameterIivEXT(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetTexParameterIivEXT(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glGetTexParameterIuivEXT(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetTexParameterIuivEXT(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glSamplerParameterIivEXT(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glSamplerParameterIivEXT(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glSamplerParameterIuivEXT(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glSamplerParameterIuivEXT(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glGetSamplerParameterIivEXT(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetSamplerParameterIivEXT(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glGetSamplerParameterIuivEXT(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetSamplerParameterIuivEXT(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glTexBufferEXT(jint p1, jint p2, jint p3);
	static void glTexBufferRangeEXT(jint p1, jint p2, jint p3, jint p4, jint p5);

protected:

	GLES31Ext(handle_type h) : base_(h) {}

};

} // namespace android::opengl
} // namespace scapix::java_api

#include <scapix/java_api/android/opengl/GLES31Ext_DebugProcKHR.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/IntBuffer.h>

namespace scapix::java_api {
namespace android::opengl {

inline jint GLES31Ext::GL_BLEND_ADVANCED_COHERENT_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_BLEND_ADVANCED_COHERENT_KHR"), jint>(); }
inline jint GLES31Ext::GL_BUFFER_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_BUFFER_KHR"), jint>(); }
inline jint GLES31Ext::GL_CLAMP_TO_BORDER_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_CLAMP_TO_BORDER_EXT"), jint>(); }
inline jint GLES31Ext::GL_COLORBURN_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_COLORBURN_KHR"), jint>(); }
inline jint GLES31Ext::GL_COLORDODGE_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_COLORDODGE_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_RGBA_ASTC_10x10_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_10x10_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_RGBA_ASTC_10x5_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_10x5_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_RGBA_ASTC_10x6_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_10x6_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_RGBA_ASTC_10x8_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_10x8_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_RGBA_ASTC_12x10_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_12x10_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_RGBA_ASTC_12x12_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_12x12_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_RGBA_ASTC_4x4_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_4x4_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_RGBA_ASTC_5x4_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_5x4_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_RGBA_ASTC_5x5_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_5x5_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_RGBA_ASTC_6x5_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_6x5_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_RGBA_ASTC_6x6_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_6x6_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_RGBA_ASTC_8x5_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_8x5_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_RGBA_ASTC_8x6_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_8x6_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_RGBA_ASTC_8x8_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_8x8_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR"), jint>(); }
inline jint GLES31Ext::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR"), jint>(); }
inline jint GLES31Ext::GL_CONTEXT_FLAG_DEBUG_BIT_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_CONTEXT_FLAG_DEBUG_BIT_KHR"), jint>(); }
inline jint GLES31Ext::GL_DARKEN_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DARKEN_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_CALLBACK_FUNCTION_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_CALLBACK_FUNCTION_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_CALLBACK_USER_PARAM_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_CALLBACK_USER_PARAM_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_GROUP_STACK_DEPTH_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_GROUP_STACK_DEPTH_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_LOGGED_MESSAGES_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_LOGGED_MESSAGES_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_OUTPUT_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_OUTPUT_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_SEVERITY_HIGH_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SEVERITY_HIGH_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_SEVERITY_LOW_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SEVERITY_LOW_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_SEVERITY_MEDIUM_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SEVERITY_MEDIUM_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_SEVERITY_NOTIFICATION_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SEVERITY_NOTIFICATION_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_SOURCE_API_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SOURCE_API_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_SOURCE_APPLICATION_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SOURCE_APPLICATION_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_SOURCE_OTHER_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SOURCE_OTHER_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_SOURCE_SHADER_COMPILER_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SOURCE_SHADER_COMPILER_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_SOURCE_THIRD_PARTY_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SOURCE_THIRD_PARTY_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_TYPE_ERROR_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_ERROR_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_TYPE_MARKER_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_MARKER_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_TYPE_OTHER_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_OTHER_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_TYPE_PERFORMANCE_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_PERFORMANCE_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_TYPE_POP_GROUP_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_POP_GROUP_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_TYPE_PORTABILITY_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_PORTABILITY_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_TYPE_PUSH_GROUP_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_PUSH_GROUP_KHR"), jint>(); }
inline jint GLES31Ext::GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR"), jint>(); }
inline jint GLES31Ext::GL_DECODE_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_DECODE_EXT"), jint>(); }
inline jint GLES31Ext::GL_DIFFERENCE_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_DIFFERENCE_KHR"), jint>(); }
inline jint GLES31Ext::GL_EXCLUSION_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_EXCLUSION_KHR"), jint>(); }
inline jint GLES31Ext::GL_FIRST_VERTEX_CONVENTION_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_FIRST_VERTEX_CONVENTION_EXT"), jint>(); }
inline jint GLES31Ext::GL_FRACTIONAL_EVEN_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_FRACTIONAL_EVEN_EXT"), jint>(); }
inline jint GLES31Ext::GL_FRACTIONAL_ODD_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_FRACTIONAL_ODD_EXT"), jint>(); }
inline jint GLES31Ext::GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES_() { return get_static_field<SCAPIX_META_STRING("GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES"), jint>(); }
inline jint GLES31Ext::GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT"), jint>(); }
inline jint GLES31Ext::GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT"), jint>(); }
inline jint GLES31Ext::GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT"), jint>(); }
inline jint GLES31Ext::GL_GEOMETRY_LINKED_INPUT_TYPE_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_GEOMETRY_LINKED_INPUT_TYPE_EXT"), jint>(); }
inline jint GLES31Ext::GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT"), jint>(); }
inline jint GLES31Ext::GL_GEOMETRY_LINKED_VERTICES_OUT_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_GEOMETRY_LINKED_VERTICES_OUT_EXT"), jint>(); }
inline jint GLES31Ext::GL_GEOMETRY_SHADER_BIT_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_GEOMETRY_SHADER_BIT_EXT"), jint>(); }
inline jint GLES31Ext::GL_GEOMETRY_SHADER_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_GEOMETRY_SHADER_EXT"), jint>(); }
inline jint GLES31Ext::GL_GEOMETRY_SHADER_INVOCATIONS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_GEOMETRY_SHADER_INVOCATIONS_EXT"), jint>(); }
inline jint GLES31Ext::GL_HARDLIGHT_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_HARDLIGHT_KHR"), jint>(); }
inline jint GLES31Ext::GL_HSL_COLOR_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_HSL_COLOR_KHR"), jint>(); }
inline jint GLES31Ext::GL_HSL_HUE_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_HSL_HUE_KHR"), jint>(); }
inline jint GLES31Ext::GL_HSL_LUMINOSITY_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_HSL_LUMINOSITY_KHR"), jint>(); }
inline jint GLES31Ext::GL_HSL_SATURATION_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_HSL_SATURATION_KHR"), jint>(); }
inline jint GLES31Ext::GL_IMAGE_BUFFER_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_IMAGE_BUFFER_EXT"), jint>(); }
inline jint GLES31Ext::GL_IMAGE_CUBE_MAP_ARRAY_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_IMAGE_CUBE_MAP_ARRAY_EXT"), jint>(); }
inline jint GLES31Ext::GL_INT_IMAGE_BUFFER_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_INT_IMAGE_BUFFER_EXT"), jint>(); }
inline jint GLES31Ext::GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT"), jint>(); }
inline jint GLES31Ext::GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES_() { return get_static_field<SCAPIX_META_STRING("GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES"), jint>(); }
inline jint GLES31Ext::GL_INT_SAMPLER_BUFFER_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_INT_SAMPLER_BUFFER_EXT"), jint>(); }
inline jint GLES31Ext::GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT"), jint>(); }
inline jint GLES31Ext::GL_ISOLINES_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_ISOLINES_EXT"), jint>(); }
inline jint GLES31Ext::GL_IS_PER_PATCH_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_IS_PER_PATCH_EXT"), jint>(); }
inline jint GLES31Ext::GL_LAST_VERTEX_CONVENTION_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_LAST_VERTEX_CONVENTION_EXT"), jint>(); }
inline jint GLES31Ext::GL_LAYER_PROVOKING_VERTEX_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_LAYER_PROVOKING_VERTEX_EXT"), jint>(); }
inline jint GLES31Ext::GL_LIGHTEN_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_LIGHTEN_KHR"), jint>(); }
inline jint GLES31Ext::GL_LINES_ADJACENCY_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_LINES_ADJACENCY_EXT"), jint>(); }
inline jint GLES31Ext::GL_LINE_STRIP_ADJACENCY_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_LINE_STRIP_ADJACENCY_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR"), jint>(); }
inline jint GLES31Ext::GL_MAX_DEBUG_LOGGED_MESSAGES_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_DEBUG_LOGGED_MESSAGES_KHR"), jint>(); }
inline jint GLES31Ext::GL_MAX_DEBUG_MESSAGE_LENGTH_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_DEBUG_MESSAGE_LENGTH_KHR"), jint>(); }
inline jint GLES31Ext::GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES"), jint>(); }
inline jint GLES31Ext::GL_MAX_FRAMEBUFFER_LAYERS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_FRAMEBUFFER_LAYERS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_LABEL_LENGTH_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_LABEL_LENGTH_KHR"), jint>(); }
inline jint GLES31Ext::GL_MAX_PATCH_VERTICES_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_PATCH_VERTICES_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_GEN_LEVEL_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_GEN_LEVEL_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TESS_PATCH_COMPONENTS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_PATCH_COMPONENTS_EXT"), jint>(); }
inline jint GLES31Ext::GL_MAX_TEXTURE_BUFFER_SIZE_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TEXTURE_BUFFER_SIZE_EXT"), jint>(); }
inline jint GLES31Ext::GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES_() { return get_static_field<SCAPIX_META_STRING("GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES"), jint>(); }
inline jint GLES31Ext::GL_MIN_SAMPLE_SHADING_VALUE_OES_() { return get_static_field<SCAPIX_META_STRING("GL_MIN_SAMPLE_SHADING_VALUE_OES"), jint>(); }
inline jint GLES31Ext::GL_MULTIPLY_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_MULTIPLY_KHR"), jint>(); }
inline jint GLES31Ext::GL_OVERLAY_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_OVERLAY_KHR"), jint>(); }
inline jint GLES31Ext::GL_PATCHES_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_PATCHES_EXT"), jint>(); }
inline jint GLES31Ext::GL_PATCH_VERTICES_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_PATCH_VERTICES_EXT"), jint>(); }
inline jint GLES31Ext::GL_PRIMITIVES_GENERATED_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_PRIMITIVES_GENERATED_EXT"), jint>(); }
inline jint GLES31Ext::GL_PRIMITIVE_BOUNDING_BOX_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_PRIMITIVE_BOUNDING_BOX_EXT"), jint>(); }
inline jint GLES31Ext::GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_() { return get_static_field<SCAPIX_META_STRING("GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED"), jint>(); }
inline jint GLES31Ext::GL_PROGRAM_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_PROGRAM_KHR"), jint>(); }
inline jint GLES31Ext::GL_QUADS_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_QUADS_EXT"), jint>(); }
inline jint GLES31Ext::GL_QUERY_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_QUERY_KHR"), jint>(); }
inline jint GLES31Ext::GL_REFERENCED_BY_GEOMETRY_SHADER_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_REFERENCED_BY_GEOMETRY_SHADER_EXT"), jint>(); }
inline jint GLES31Ext::GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT"), jint>(); }
inline jint GLES31Ext::GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT"), jint>(); }
inline jint GLES31Ext::GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES"), jint>(); }
inline jint GLES31Ext::GL_SAMPLER_BUFFER_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLER_BUFFER_EXT"), jint>(); }
inline jint GLES31Ext::GL_SAMPLER_CUBE_MAP_ARRAY_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLER_CUBE_MAP_ARRAY_EXT"), jint>(); }
inline jint GLES31Ext::GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT"), jint>(); }
inline jint GLES31Ext::GL_SAMPLER_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLER_KHR"), jint>(); }
inline jint GLES31Ext::GL_SAMPLE_SHADING_OES_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLE_SHADING_OES"), jint>(); }
inline jint GLES31Ext::GL_SCREEN_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_SCREEN_KHR"), jint>(); }
inline jint GLES31Ext::GL_SHADER_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_SHADER_KHR"), jint>(); }
inline jint GLES31Ext::GL_SKIP_DECODE_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_SKIP_DECODE_EXT"), jint>(); }
inline jint GLES31Ext::GL_SOFTLIGHT_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_SOFTLIGHT_KHR"), jint>(); }
inline jint GLES31Ext::GL_STACK_OVERFLOW_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_STACK_OVERFLOW_KHR"), jint>(); }
inline jint GLES31Ext::GL_STACK_UNDERFLOW_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_STACK_UNDERFLOW_KHR"), jint>(); }
inline jint GLES31Ext::GL_STENCIL_INDEX8_OES_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_INDEX8_OES"), jint>(); }
inline jint GLES31Ext::GL_STENCIL_INDEX_OES_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_INDEX_OES"), jint>(); }
inline jint GLES31Ext::GL_TESS_CONTROL_OUTPUT_VERTICES_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_CONTROL_OUTPUT_VERTICES_EXT"), jint>(); }
inline jint GLES31Ext::GL_TESS_CONTROL_SHADER_BIT_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_CONTROL_SHADER_BIT_EXT"), jint>(); }
inline jint GLES31Ext::GL_TESS_CONTROL_SHADER_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_CONTROL_SHADER_EXT"), jint>(); }
inline jint GLES31Ext::GL_TESS_EVALUATION_SHADER_BIT_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_EVALUATION_SHADER_BIT_EXT"), jint>(); }
inline jint GLES31Ext::GL_TESS_EVALUATION_SHADER_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_EVALUATION_SHADER_EXT"), jint>(); }
inline jint GLES31Ext::GL_TESS_GEN_MODE_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_GEN_MODE_EXT"), jint>(); }
inline jint GLES31Ext::GL_TESS_GEN_POINT_MODE_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_GEN_POINT_MODE_EXT"), jint>(); }
inline jint GLES31Ext::GL_TESS_GEN_SPACING_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_GEN_SPACING_EXT"), jint>(); }
inline jint GLES31Ext::GL_TESS_GEN_VERTEX_ORDER_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_GEN_VERTEX_ORDER_EXT"), jint>(); }
inline jint GLES31Ext::GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES"), jint>(); }
inline jint GLES31Ext::GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES"), jint>(); }
inline jint GLES31Ext::GL_TEXTURE_BINDING_BUFFER_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BINDING_BUFFER_EXT"), jint>(); }
inline jint GLES31Ext::GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT"), jint>(); }
inline jint GLES31Ext::GL_TEXTURE_BORDER_COLOR_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BORDER_COLOR_EXT"), jint>(); }
inline jint GLES31Ext::GL_TEXTURE_BUFFER_BINDING_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BUFFER_BINDING_EXT"), jint>(); }
inline jint GLES31Ext::GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT"), jint>(); }
inline jint GLES31Ext::GL_TEXTURE_BUFFER_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BUFFER_EXT"), jint>(); }
inline jint GLES31Ext::GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT"), jint>(); }
inline jint GLES31Ext::GL_TEXTURE_BUFFER_OFFSET_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BUFFER_OFFSET_EXT"), jint>(); }
inline jint GLES31Ext::GL_TEXTURE_BUFFER_SIZE_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BUFFER_SIZE_EXT"), jint>(); }
inline jint GLES31Ext::GL_TEXTURE_CUBE_MAP_ARRAY_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_CUBE_MAP_ARRAY_EXT"), jint>(); }
inline jint GLES31Ext::GL_TEXTURE_SRGB_DECODE_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_SRGB_DECODE_EXT"), jint>(); }
inline jint GLES31Ext::GL_TRIANGLES_ADJACENCY_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TRIANGLES_ADJACENCY_EXT"), jint>(); }
inline jint GLES31Ext::GL_TRIANGLE_STRIP_ADJACENCY_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_TRIANGLE_STRIP_ADJACENCY_EXT"), jint>(); }
inline jint GLES31Ext::GL_UNDEFINED_VERTEX_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_UNDEFINED_VERTEX_EXT"), jint>(); }
inline jint GLES31Ext::GL_UNSIGNED_INT_IMAGE_BUFFER_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_INT_IMAGE_BUFFER_EXT"), jint>(); }
inline jint GLES31Ext::GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT"), jint>(); }
inline jint GLES31Ext::GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES"), jint>(); }
inline jint GLES31Ext::GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT"), jint>(); }
inline jint GLES31Ext::GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT"), jint>(); }
inline jint GLES31Ext::GL_VERTEX_ARRAY_KHR_() { return get_static_field<SCAPIX_META_STRING("GL_VERTEX_ARRAY_KHR"), jint>(); }
inline void GLES31Ext::glBlendBarrierKHR() { return call_static_method<SCAPIX_META_STRING("glBlendBarrierKHR"), void>(); }
inline void GLES31Ext::glDebugMessageControlKHR(jint p1, jint p2, jint p3, jint p4, ref<link::java::array<jint>> p5, jint p6, jboolean p7) { return call_static_method<SCAPIX_META_STRING("glDebugMessageControlKHR"), void>(p1, p2, p3, p4, p5, p6, p7); }
inline void GLES31Ext::glDebugMessageControlKHR(jint p1, jint p2, jint p3, jint p4, ref<java::nio::IntBuffer> p5, jboolean p6) { return call_static_method<SCAPIX_META_STRING("glDebugMessageControlKHR"), void>(p1, p2, p3, p4, p5, p6); }
inline void GLES31Ext::glDebugMessageInsertKHR(jint p1, jint p2, jint p3, jint p4, ref<java::lang::String> p5) { return call_static_method<SCAPIX_META_STRING("glDebugMessageInsertKHR"), void>(p1, p2, p3, p4, p5); }
inline void GLES31Ext::glDebugMessageCallbackKHR(ref<android::opengl::GLES31Ext_DebugProcKHR> p1) { return call_static_method<SCAPIX_META_STRING("glDebugMessageCallbackKHR"), void>(p1); }
inline jint GLES31Ext::glGetDebugMessageLogKHR(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4, ref<link::java::array<jint>> p5, jint p6, ref<link::java::array<jint>> p7, jint p8, ref<link::java::array<jint>> p9, jint p10, ref<link::java::array<jint>> p11, jint p12, ref<link::java::array<jbyte>> p13, jint p14) { return call_static_method<SCAPIX_META_STRING("glGetDebugMessageLogKHR"), jint>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14); }
inline jint GLES31Ext::glGetDebugMessageLogKHR(jint p1, ref<java::nio::IntBuffer> p2, ref<java::nio::IntBuffer> p3, ref<java::nio::IntBuffer> p4, ref<java::nio::IntBuffer> p5, ref<java::nio::IntBuffer> p6, ref<java::nio::ByteBuffer> p7) { return call_static_method<SCAPIX_META_STRING("glGetDebugMessageLogKHR"), jint>(p1, p2, p3, p4, p5, p6, p7); }
inline ref<link::java::array<java::lang::String>> GLES31Ext::glGetDebugMessageLogKHR(jint p1, ref<link::java::array<jint>> p2, jint p3, ref<link::java::array<jint>> p4, jint p5, ref<link::java::array<jint>> p6, jint p7, ref<link::java::array<jint>> p8, jint p9) { return call_static_method<SCAPIX_META_STRING("glGetDebugMessageLogKHR"), ref<link::java::array<java::lang::String>>>(p1, p2, p3, p4, p5, p6, p7, p8, p9); }
inline ref<link::java::array<java::lang::String>> GLES31Ext::glGetDebugMessageLogKHR(jint p1, ref<java::nio::IntBuffer> p2, ref<java::nio::IntBuffer> p3, ref<java::nio::IntBuffer> p4, ref<java::nio::IntBuffer> p5) { return call_static_method<SCAPIX_META_STRING("glGetDebugMessageLogKHR"), ref<link::java::array<java::lang::String>>>(p1, p2, p3, p4, p5); }
inline void GLES31Ext::glPushDebugGroupKHR(jint p1, jint p2, jint p3, ref<java::lang::String> p4) { return call_static_method<SCAPIX_META_STRING("glPushDebugGroupKHR"), void>(p1, p2, p3, p4); }
inline void GLES31Ext::glPopDebugGroupKHR() { return call_static_method<SCAPIX_META_STRING("glPopDebugGroupKHR"), void>(); }
inline void GLES31Ext::glObjectLabelKHR(jint p1, jint p2, jint p3, ref<java::lang::String> p4) { return call_static_method<SCAPIX_META_STRING("glObjectLabelKHR"), void>(p1, p2, p3, p4); }
inline ref<java::lang::String> GLES31Ext::glGetObjectLabelKHR(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glGetObjectLabelKHR"), ref<java::lang::String>>(p1, p2); }
inline void GLES31Ext::glObjectPtrLabelKHR(jlong p1, ref<java::lang::String> p2) { return call_static_method<SCAPIX_META_STRING("glObjectPtrLabelKHR"), void>(p1, p2); }
inline ref<java::lang::String> GLES31Ext::glGetObjectPtrLabelKHR(jlong p1) { return call_static_method<SCAPIX_META_STRING("glGetObjectPtrLabelKHR"), ref<java::lang::String>>(p1); }
inline ref<android::opengl::GLES31Ext_DebugProcKHR> GLES31Ext::glGetDebugMessageCallbackKHR() { return call_static_method<SCAPIX_META_STRING("glGetDebugMessageCallbackKHR"), ref<android::opengl::GLES31Ext_DebugProcKHR>>(); }
inline void GLES31Ext::glMinSampleShadingOES(jfloat p1) { return call_static_method<SCAPIX_META_STRING("glMinSampleShadingOES"), void>(p1); }
inline void GLES31Ext::glTexStorage3DMultisampleOES(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jboolean p7) { return call_static_method<SCAPIX_META_STRING("glTexStorage3DMultisampleOES"), void>(p1, p2, p3, p4, p5, p6, p7); }
inline void GLES31Ext::glCopyImageSubDataEXT(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jint p9, jint p10, jint p11, jint p12, jint p13, jint p14, jint p15) { return call_static_method<SCAPIX_META_STRING("glCopyImageSubDataEXT"), void>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15); }
inline void GLES31Ext::glEnableiEXT(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glEnableiEXT"), void>(p1, p2); }
inline void GLES31Ext::glDisableiEXT(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glDisableiEXT"), void>(p1, p2); }
inline void GLES31Ext::glBlendEquationiEXT(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glBlendEquationiEXT"), void>(p1, p2); }
inline void GLES31Ext::glBlendEquationSeparateiEXT(jint p1, jint p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glBlendEquationSeparateiEXT"), void>(p1, p2, p3); }
inline void GLES31Ext::glBlendFunciEXT(jint p1, jint p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glBlendFunciEXT"), void>(p1, p2, p3); }
inline void GLES31Ext::glBlendFuncSeparateiEXT(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_static_method<SCAPIX_META_STRING("glBlendFuncSeparateiEXT"), void>(p1, p2, p3, p4, p5); }
inline void GLES31Ext::glColorMaskiEXT(jint p1, jboolean p2, jboolean p3, jboolean p4, jboolean p5) { return call_static_method<SCAPIX_META_STRING("glColorMaskiEXT"), void>(p1, p2, p3, p4, p5); }
inline jboolean GLES31Ext::glIsEnablediEXT(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glIsEnablediEXT"), jboolean>(p1, p2); }
inline void GLES31Ext::glFramebufferTextureEXT(jint p1, jint p2, jint p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glFramebufferTextureEXT"), void>(p1, p2, p3, p4); }
inline void GLES31Ext::glPrimitiveBoundingBoxEXT(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6, jfloat p7, jfloat p8) { return call_static_method<SCAPIX_META_STRING("glPrimitiveBoundingBoxEXT"), void>(p1, p2, p3, p4, p5, p6, p7, p8); }
inline void GLES31Ext::glPatchParameteriEXT(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glPatchParameteriEXT"), void>(p1, p2); }
inline void GLES31Ext::glTexParameterIivEXT(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glTexParameterIivEXT"), void>(p1, p2, p3, p4); }
inline void GLES31Ext::glTexParameterIivEXT(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glTexParameterIivEXT"), void>(p1, p2, p3); }
inline void GLES31Ext::glTexParameterIuivEXT(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glTexParameterIuivEXT"), void>(p1, p2, p3, p4); }
inline void GLES31Ext::glTexParameterIuivEXT(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glTexParameterIuivEXT"), void>(p1, p2, p3); }
inline void GLES31Ext::glGetTexParameterIivEXT(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetTexParameterIivEXT"), void>(p1, p2, p3, p4); }
inline void GLES31Ext::glGetTexParameterIivEXT(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetTexParameterIivEXT"), void>(p1, p2, p3); }
inline void GLES31Ext::glGetTexParameterIuivEXT(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetTexParameterIuivEXT"), void>(p1, p2, p3, p4); }
inline void GLES31Ext::glGetTexParameterIuivEXT(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetTexParameterIuivEXT"), void>(p1, p2, p3); }
inline void GLES31Ext::glSamplerParameterIivEXT(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glSamplerParameterIivEXT"), void>(p1, p2, p3, p4); }
inline void GLES31Ext::glSamplerParameterIivEXT(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glSamplerParameterIivEXT"), void>(p1, p2, p3); }
inline void GLES31Ext::glSamplerParameterIuivEXT(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glSamplerParameterIuivEXT"), void>(p1, p2, p3, p4); }
inline void GLES31Ext::glSamplerParameterIuivEXT(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glSamplerParameterIuivEXT"), void>(p1, p2, p3); }
inline void GLES31Ext::glGetSamplerParameterIivEXT(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetSamplerParameterIivEXT"), void>(p1, p2, p3, p4); }
inline void GLES31Ext::glGetSamplerParameterIivEXT(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetSamplerParameterIivEXT"), void>(p1, p2, p3); }
inline void GLES31Ext::glGetSamplerParameterIuivEXT(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetSamplerParameterIuivEXT"), void>(p1, p2, p3, p4); }
inline void GLES31Ext::glGetSamplerParameterIuivEXT(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetSamplerParameterIuivEXT"), void>(p1, p2, p3); }
inline void GLES31Ext::glTexBufferEXT(jint p1, jint p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glTexBufferEXT"), void>(p1, p2, p3); }
inline void GLES31Ext::glTexBufferRangeEXT(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_static_method<SCAPIX_META_STRING("glTexBufferRangeEXT"), void>(p1, p2, p3, p4, p5); }

} // namespace android::opengl
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OPENGL_GLES31EXT_H
