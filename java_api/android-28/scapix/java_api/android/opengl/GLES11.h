// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/opengl/GLES10.h>

#ifndef SCAPIX_ANDROID_OPENGL_GLES11_H
#define SCAPIX_ANDROID_OPENGL_GLES11_H

namespace scapix::java_api {

namespace java::nio { class Buffer; }
namespace java::nio { class FloatBuffer; }
namespace java::nio { class IntBuffer; }

namespace android::opengl {

class GLES11 : public object_base<SCAPIX_META_STRING("android/opengl/GLES11"),
	android::opengl::GLES10>
{
public:

	static jint GL_ACTIVE_TEXTURE_();
	static jint GL_ADD_SIGNED_();
	static jint GL_ALPHA_SCALE_();
	static jint GL_ALPHA_TEST_FUNC_();
	static jint GL_ALPHA_TEST_REF_();
	static jint GL_ARRAY_BUFFER_();
	static jint GL_ARRAY_BUFFER_BINDING_();
	static jint GL_BLEND_DST_();
	static jint GL_BLEND_SRC_();
	static jint GL_BUFFER_ACCESS_();
	static jint GL_BUFFER_SIZE_();
	static jint GL_BUFFER_USAGE_();
	static jint GL_CLIENT_ACTIVE_TEXTURE_();
	static jint GL_CLIP_PLANE0_();
	static jint GL_CLIP_PLANE1_();
	static jint GL_CLIP_PLANE2_();
	static jint GL_CLIP_PLANE3_();
	static jint GL_CLIP_PLANE4_();
	static jint GL_CLIP_PLANE5_();
	static jint GL_COLOR_ARRAY_BUFFER_BINDING_();
	static jint GL_COLOR_ARRAY_POINTER_();
	static jint GL_COLOR_ARRAY_SIZE_();
	static jint GL_COLOR_ARRAY_STRIDE_();
	static jint GL_COLOR_ARRAY_TYPE_();
	static jint GL_COLOR_CLEAR_VALUE_();
	static jint GL_COLOR_WRITEMASK_();
	static jint GL_COMBINE_();
	static jint GL_COMBINE_ALPHA_();
	static jint GL_COMBINE_RGB_();
	static jint GL_CONSTANT_();
	static jint GL_COORD_REPLACE_OES_();
	static jint GL_CULL_FACE_MODE_();
	static jint GL_CURRENT_COLOR_();
	static jint GL_CURRENT_NORMAL_();
	static jint GL_CURRENT_TEXTURE_COORDS_();
	static jint GL_DEPTH_CLEAR_VALUE_();
	static jint GL_DEPTH_FUNC_();
	static jint GL_DEPTH_RANGE_();
	static jint GL_DEPTH_WRITEMASK_();
	static jint GL_DOT3_RGB_();
	static jint GL_DOT3_RGBA_();
	static jint GL_DYNAMIC_DRAW_();
	static jint GL_ELEMENT_ARRAY_BUFFER_();
	static jint GL_ELEMENT_ARRAY_BUFFER_BINDING_();
	static jint GL_FRONT_FACE_();
	static jint GL_GENERATE_MIPMAP_();
	static jint GL_GENERATE_MIPMAP_HINT_();
	static jint GL_INTERPOLATE_();
	static jint GL_LINE_WIDTH_();
	static jint GL_LOGIC_OP_MODE_();
	static jint GL_MATRIX_MODE_();
	static jint GL_MAX_CLIP_PLANES_();
	static jint GL_MODELVIEW_MATRIX_();
	static jint GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES_();
	static jint GL_MODELVIEW_STACK_DEPTH_();
	static jint GL_NORMAL_ARRAY_BUFFER_BINDING_();
	static jint GL_NORMAL_ARRAY_POINTER_();
	static jint GL_NORMAL_ARRAY_STRIDE_();
	static jint GL_NORMAL_ARRAY_TYPE_();
	static jint GL_OPERAND0_ALPHA_();
	static jint GL_OPERAND0_RGB_();
	static jint GL_OPERAND1_ALPHA_();
	static jint GL_OPERAND1_RGB_();
	static jint GL_OPERAND2_ALPHA_();
	static jint GL_OPERAND2_RGB_();
	static jint GL_POINT_DISTANCE_ATTENUATION_();
	static jint GL_POINT_FADE_THRESHOLD_SIZE_();
	static jint GL_POINT_SIZE_();
	static jint GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES_();
	static jint GL_POINT_SIZE_ARRAY_OES_();
	static jint GL_POINT_SIZE_ARRAY_POINTER_OES_();
	static jint GL_POINT_SIZE_ARRAY_STRIDE_OES_();
	static jint GL_POINT_SIZE_ARRAY_TYPE_OES_();
	static jint GL_POINT_SIZE_MAX_();
	static jint GL_POINT_SIZE_MIN_();
	static jint GL_POINT_SPRITE_OES_();
	static jint GL_POLYGON_OFFSET_FACTOR_();
	static jint GL_POLYGON_OFFSET_UNITS_();
	static jint GL_PREVIOUS_();
	static jint GL_PRIMARY_COLOR_();
	static jint GL_PROJECTION_MATRIX_();
	static jint GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES_();
	static jint GL_PROJECTION_STACK_DEPTH_();
	static jint GL_RGB_SCALE_();
	static jint GL_SAMPLES_();
	static jint GL_SAMPLE_BUFFERS_();
	static jint GL_SAMPLE_COVERAGE_INVERT_();
	static jint GL_SAMPLE_COVERAGE_VALUE_();
	static jint GL_SCISSOR_BOX_();
	static jint GL_SHADE_MODEL_();
	static jint GL_SRC0_ALPHA_();
	static jint GL_SRC0_RGB_();
	static jint GL_SRC1_ALPHA_();
	static jint GL_SRC1_RGB_();
	static jint GL_SRC2_ALPHA_();
	static jint GL_SRC2_RGB_();
	static jint GL_STATIC_DRAW_();
	static jint GL_STENCIL_CLEAR_VALUE_();
	static jint GL_STENCIL_FAIL_();
	static jint GL_STENCIL_FUNC_();
	static jint GL_STENCIL_PASS_DEPTH_FAIL_();
	static jint GL_STENCIL_PASS_DEPTH_PASS_();
	static jint GL_STENCIL_REF_();
	static jint GL_STENCIL_VALUE_MASK_();
	static jint GL_STENCIL_WRITEMASK_();
	static jint GL_SUBTRACT_();
	static jint GL_TEXTURE_BINDING_2D_();
	static jint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_();
	static jint GL_TEXTURE_COORD_ARRAY_POINTER_();
	static jint GL_TEXTURE_COORD_ARRAY_SIZE_();
	static jint GL_TEXTURE_COORD_ARRAY_STRIDE_();
	static jint GL_TEXTURE_COORD_ARRAY_TYPE_();
	static jint GL_TEXTURE_MATRIX_();
	static jint GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES_();
	static jint GL_TEXTURE_STACK_DEPTH_();
	static jint GL_VERTEX_ARRAY_BUFFER_BINDING_();
	static jint GL_VERTEX_ARRAY_POINTER_();
	static jint GL_VERTEX_ARRAY_SIZE_();
	static jint GL_VERTEX_ARRAY_STRIDE_();
	static jint GL_VERTEX_ARRAY_TYPE_();
	static jint GL_VIEWPORT_();
	static jint GL_WRITE_ONLY_();

	static ref<GLES11> new_object();
	static void glBindBuffer(jint p1, jint p2);
	static void glBufferData(jint p1, jint p2, ref<java::nio::Buffer> p3, jint p4);
	static void glBufferSubData(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4);
	static void glClipPlanef(jint p1, ref<link::java::array<jfloat>> p2, jint p3);
	static void glClipPlanef(jint p1, ref<java::nio::FloatBuffer> p2);
	static void glClipPlanex(jint p1, ref<link::java::array<jint>> p2, jint p3);
	static void glClipPlanex(jint p1, ref<java::nio::IntBuffer> p2);
	static void glColor4ub(jbyte p1, jbyte p2, jbyte p3, jbyte p4);
	static void glColorPointer(jint p1, jint p2, jint p3, jint p4);
	static void glDeleteBuffers(jint p1, ref<link::java::array<jint>> p2, jint p3);
	static void glDeleteBuffers(jint p1, ref<java::nio::IntBuffer> p2);
	static void glDrawElements(jint p1, jint p2, jint p3, jint p4);
	static void glGenBuffers(jint p1, ref<link::java::array<jint>> p2, jint p3);
	static void glGenBuffers(jint p1, ref<java::nio::IntBuffer> p2);
	static void glGetBooleanv(jint p1, ref<link::java::array<jboolean>> p2, jint p3);
	static void glGetBooleanv(jint p1, ref<java::nio::IntBuffer> p2);
	static void glGetBufferParameteriv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetBufferParameteriv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glGetClipPlanef(jint p1, ref<link::java::array<jfloat>> p2, jint p3);
	static void glGetClipPlanef(jint p1, ref<java::nio::FloatBuffer> p2);
	static void glGetClipPlanex(jint p1, ref<link::java::array<jint>> p2, jint p3);
	static void glGetClipPlanex(jint p1, ref<java::nio::IntBuffer> p2);
	static void glGetFixedv(jint p1, ref<link::java::array<jint>> p2, jint p3);
	static void glGetFixedv(jint p1, ref<java::nio::IntBuffer> p2);
	static void glGetFloatv(jint p1, ref<link::java::array<jfloat>> p2, jint p3);
	static void glGetFloatv(jint p1, ref<java::nio::FloatBuffer> p2);
	static void glGetLightfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4);
	static void glGetLightfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3);
	static void glGetLightxv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetLightxv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glGetMaterialfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4);
	static void glGetMaterialfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3);
	static void glGetMaterialxv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetMaterialxv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glGetTexEnvfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4);
	static void glGetTexEnvfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3);
	static void glGetTexEnviv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetTexEnviv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glGetTexEnvxv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetTexEnvxv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glGetTexParameterfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4);
	static void glGetTexParameterfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3);
	static void glGetTexParameteriv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetTexParameteriv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glGetTexParameterxv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetTexParameterxv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static jboolean glIsBuffer(jint p1);
	static jboolean glIsEnabled(jint p1);
	static jboolean glIsTexture(jint p1);
	static void glNormalPointer(jint p1, jint p2, jint p3);
	static void glPointParameterf(jint p1, jfloat p2);
	static void glPointParameterfv(jint p1, ref<link::java::array<jfloat>> p2, jint p3);
	static void glPointParameterfv(jint p1, ref<java::nio::FloatBuffer> p2);
	static void glPointParameterx(jint p1, jint p2);
	static void glPointParameterxv(jint p1, ref<link::java::array<jint>> p2, jint p3);
	static void glPointParameterxv(jint p1, ref<java::nio::IntBuffer> p2);
	static void glPointSizePointerOES(jint type, jint stride, ref<java::nio::Buffer> pointer);
	static void glTexCoordPointer(jint p1, jint p2, jint p3, jint p4);
	static void glTexEnvi(jint p1, jint p2, jint p3);
	static void glTexEnviv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glTexEnviv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glTexParameterfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4);
	static void glTexParameterfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3);
	static void glTexParameteri(jint p1, jint p2, jint p3);
	static void glTexParameteriv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glTexParameteriv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glTexParameterxv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glTexParameterxv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glVertexPointer(jint p1, jint p2, jint p3, jint p4);

protected:

	GLES11(handle_type h) : base_(h) {}

};

} // namespace android::opengl
} // namespace scapix::java_api

#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/nio/FloatBuffer.h>
#include <scapix/java_api/java/nio/IntBuffer.h>

namespace scapix::java_api {
namespace android::opengl {

inline jint GLES11::GL_ACTIVE_TEXTURE_() { return get_static_field<SCAPIX_META_STRING("GL_ACTIVE_TEXTURE"), jint>(); }
inline jint GLES11::GL_ADD_SIGNED_() { return get_static_field<SCAPIX_META_STRING("GL_ADD_SIGNED"), jint>(); }
inline jint GLES11::GL_ALPHA_SCALE_() { return get_static_field<SCAPIX_META_STRING("GL_ALPHA_SCALE"), jint>(); }
inline jint GLES11::GL_ALPHA_TEST_FUNC_() { return get_static_field<SCAPIX_META_STRING("GL_ALPHA_TEST_FUNC"), jint>(); }
inline jint GLES11::GL_ALPHA_TEST_REF_() { return get_static_field<SCAPIX_META_STRING("GL_ALPHA_TEST_REF"), jint>(); }
inline jint GLES11::GL_ARRAY_BUFFER_() { return get_static_field<SCAPIX_META_STRING("GL_ARRAY_BUFFER"), jint>(); }
inline jint GLES11::GL_ARRAY_BUFFER_BINDING_() { return get_static_field<SCAPIX_META_STRING("GL_ARRAY_BUFFER_BINDING"), jint>(); }
inline jint GLES11::GL_BLEND_DST_() { return get_static_field<SCAPIX_META_STRING("GL_BLEND_DST"), jint>(); }
inline jint GLES11::GL_BLEND_SRC_() { return get_static_field<SCAPIX_META_STRING("GL_BLEND_SRC"), jint>(); }
inline jint GLES11::GL_BUFFER_ACCESS_() { return get_static_field<SCAPIX_META_STRING("GL_BUFFER_ACCESS"), jint>(); }
inline jint GLES11::GL_BUFFER_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_BUFFER_SIZE"), jint>(); }
inline jint GLES11::GL_BUFFER_USAGE_() { return get_static_field<SCAPIX_META_STRING("GL_BUFFER_USAGE"), jint>(); }
inline jint GLES11::GL_CLIENT_ACTIVE_TEXTURE_() { return get_static_field<SCAPIX_META_STRING("GL_CLIENT_ACTIVE_TEXTURE"), jint>(); }
inline jint GLES11::GL_CLIP_PLANE0_() { return get_static_field<SCAPIX_META_STRING("GL_CLIP_PLANE0"), jint>(); }
inline jint GLES11::GL_CLIP_PLANE1_() { return get_static_field<SCAPIX_META_STRING("GL_CLIP_PLANE1"), jint>(); }
inline jint GLES11::GL_CLIP_PLANE2_() { return get_static_field<SCAPIX_META_STRING("GL_CLIP_PLANE2"), jint>(); }
inline jint GLES11::GL_CLIP_PLANE3_() { return get_static_field<SCAPIX_META_STRING("GL_CLIP_PLANE3"), jint>(); }
inline jint GLES11::GL_CLIP_PLANE4_() { return get_static_field<SCAPIX_META_STRING("GL_CLIP_PLANE4"), jint>(); }
inline jint GLES11::GL_CLIP_PLANE5_() { return get_static_field<SCAPIX_META_STRING("GL_CLIP_PLANE5"), jint>(); }
inline jint GLES11::GL_COLOR_ARRAY_BUFFER_BINDING_() { return get_static_field<SCAPIX_META_STRING("GL_COLOR_ARRAY_BUFFER_BINDING"), jint>(); }
inline jint GLES11::GL_COLOR_ARRAY_POINTER_() { return get_static_field<SCAPIX_META_STRING("GL_COLOR_ARRAY_POINTER"), jint>(); }
inline jint GLES11::GL_COLOR_ARRAY_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_COLOR_ARRAY_SIZE"), jint>(); }
inline jint GLES11::GL_COLOR_ARRAY_STRIDE_() { return get_static_field<SCAPIX_META_STRING("GL_COLOR_ARRAY_STRIDE"), jint>(); }
inline jint GLES11::GL_COLOR_ARRAY_TYPE_() { return get_static_field<SCAPIX_META_STRING("GL_COLOR_ARRAY_TYPE"), jint>(); }
inline jint GLES11::GL_COLOR_CLEAR_VALUE_() { return get_static_field<SCAPIX_META_STRING("GL_COLOR_CLEAR_VALUE"), jint>(); }
inline jint GLES11::GL_COLOR_WRITEMASK_() { return get_static_field<SCAPIX_META_STRING("GL_COLOR_WRITEMASK"), jint>(); }
inline jint GLES11::GL_COMBINE_() { return get_static_field<SCAPIX_META_STRING("GL_COMBINE"), jint>(); }
inline jint GLES11::GL_COMBINE_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_COMBINE_ALPHA"), jint>(); }
inline jint GLES11::GL_COMBINE_RGB_() { return get_static_field<SCAPIX_META_STRING("GL_COMBINE_RGB"), jint>(); }
inline jint GLES11::GL_CONSTANT_() { return get_static_field<SCAPIX_META_STRING("GL_CONSTANT"), jint>(); }
inline jint GLES11::GL_COORD_REPLACE_OES_() { return get_static_field<SCAPIX_META_STRING("GL_COORD_REPLACE_OES"), jint>(); }
inline jint GLES11::GL_CULL_FACE_MODE_() { return get_static_field<SCAPIX_META_STRING("GL_CULL_FACE_MODE"), jint>(); }
inline jint GLES11::GL_CURRENT_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_CURRENT_COLOR"), jint>(); }
inline jint GLES11::GL_CURRENT_NORMAL_() { return get_static_field<SCAPIX_META_STRING("GL_CURRENT_NORMAL"), jint>(); }
inline jint GLES11::GL_CURRENT_TEXTURE_COORDS_() { return get_static_field<SCAPIX_META_STRING("GL_CURRENT_TEXTURE_COORDS"), jint>(); }
inline jint GLES11::GL_DEPTH_CLEAR_VALUE_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_CLEAR_VALUE"), jint>(); }
inline jint GLES11::GL_DEPTH_FUNC_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_FUNC"), jint>(); }
inline jint GLES11::GL_DEPTH_RANGE_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_RANGE"), jint>(); }
inline jint GLES11::GL_DEPTH_WRITEMASK_() { return get_static_field<SCAPIX_META_STRING("GL_DEPTH_WRITEMASK"), jint>(); }
inline jint GLES11::GL_DOT3_RGB_() { return get_static_field<SCAPIX_META_STRING("GL_DOT3_RGB"), jint>(); }
inline jint GLES11::GL_DOT3_RGBA_() { return get_static_field<SCAPIX_META_STRING("GL_DOT3_RGBA"), jint>(); }
inline jint GLES11::GL_DYNAMIC_DRAW_() { return get_static_field<SCAPIX_META_STRING("GL_DYNAMIC_DRAW"), jint>(); }
inline jint GLES11::GL_ELEMENT_ARRAY_BUFFER_() { return get_static_field<SCAPIX_META_STRING("GL_ELEMENT_ARRAY_BUFFER"), jint>(); }
inline jint GLES11::GL_ELEMENT_ARRAY_BUFFER_BINDING_() { return get_static_field<SCAPIX_META_STRING("GL_ELEMENT_ARRAY_BUFFER_BINDING"), jint>(); }
inline jint GLES11::GL_FRONT_FACE_() { return get_static_field<SCAPIX_META_STRING("GL_FRONT_FACE"), jint>(); }
inline jint GLES11::GL_GENERATE_MIPMAP_() { return get_static_field<SCAPIX_META_STRING("GL_GENERATE_MIPMAP"), jint>(); }
inline jint GLES11::GL_GENERATE_MIPMAP_HINT_() { return get_static_field<SCAPIX_META_STRING("GL_GENERATE_MIPMAP_HINT"), jint>(); }
inline jint GLES11::GL_INTERPOLATE_() { return get_static_field<SCAPIX_META_STRING("GL_INTERPOLATE"), jint>(); }
inline jint GLES11::GL_LINE_WIDTH_() { return get_static_field<SCAPIX_META_STRING("GL_LINE_WIDTH"), jint>(); }
inline jint GLES11::GL_LOGIC_OP_MODE_() { return get_static_field<SCAPIX_META_STRING("GL_LOGIC_OP_MODE"), jint>(); }
inline jint GLES11::GL_MATRIX_MODE_() { return get_static_field<SCAPIX_META_STRING("GL_MATRIX_MODE"), jint>(); }
inline jint GLES11::GL_MAX_CLIP_PLANES_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_CLIP_PLANES"), jint>(); }
inline jint GLES11::GL_MODELVIEW_MATRIX_() { return get_static_field<SCAPIX_META_STRING("GL_MODELVIEW_MATRIX"), jint>(); }
inline jint GLES11::GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES_() { return get_static_field<SCAPIX_META_STRING("GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES"), jint>(); }
inline jint GLES11::GL_MODELVIEW_STACK_DEPTH_() { return get_static_field<SCAPIX_META_STRING("GL_MODELVIEW_STACK_DEPTH"), jint>(); }
inline jint GLES11::GL_NORMAL_ARRAY_BUFFER_BINDING_() { return get_static_field<SCAPIX_META_STRING("GL_NORMAL_ARRAY_BUFFER_BINDING"), jint>(); }
inline jint GLES11::GL_NORMAL_ARRAY_POINTER_() { return get_static_field<SCAPIX_META_STRING("GL_NORMAL_ARRAY_POINTER"), jint>(); }
inline jint GLES11::GL_NORMAL_ARRAY_STRIDE_() { return get_static_field<SCAPIX_META_STRING("GL_NORMAL_ARRAY_STRIDE"), jint>(); }
inline jint GLES11::GL_NORMAL_ARRAY_TYPE_() { return get_static_field<SCAPIX_META_STRING("GL_NORMAL_ARRAY_TYPE"), jint>(); }
inline jint GLES11::GL_OPERAND0_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_OPERAND0_ALPHA"), jint>(); }
inline jint GLES11::GL_OPERAND0_RGB_() { return get_static_field<SCAPIX_META_STRING("GL_OPERAND0_RGB"), jint>(); }
inline jint GLES11::GL_OPERAND1_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_OPERAND1_ALPHA"), jint>(); }
inline jint GLES11::GL_OPERAND1_RGB_() { return get_static_field<SCAPIX_META_STRING("GL_OPERAND1_RGB"), jint>(); }
inline jint GLES11::GL_OPERAND2_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_OPERAND2_ALPHA"), jint>(); }
inline jint GLES11::GL_OPERAND2_RGB_() { return get_static_field<SCAPIX_META_STRING("GL_OPERAND2_RGB"), jint>(); }
inline jint GLES11::GL_POINT_DISTANCE_ATTENUATION_() { return get_static_field<SCAPIX_META_STRING("GL_POINT_DISTANCE_ATTENUATION"), jint>(); }
inline jint GLES11::GL_POINT_FADE_THRESHOLD_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_POINT_FADE_THRESHOLD_SIZE"), jint>(); }
inline jint GLES11::GL_POINT_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_POINT_SIZE"), jint>(); }
inline jint GLES11::GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES_() { return get_static_field<SCAPIX_META_STRING("GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES"), jint>(); }
inline jint GLES11::GL_POINT_SIZE_ARRAY_OES_() { return get_static_field<SCAPIX_META_STRING("GL_POINT_SIZE_ARRAY_OES"), jint>(); }
inline jint GLES11::GL_POINT_SIZE_ARRAY_POINTER_OES_() { return get_static_field<SCAPIX_META_STRING("GL_POINT_SIZE_ARRAY_POINTER_OES"), jint>(); }
inline jint GLES11::GL_POINT_SIZE_ARRAY_STRIDE_OES_() { return get_static_field<SCAPIX_META_STRING("GL_POINT_SIZE_ARRAY_STRIDE_OES"), jint>(); }
inline jint GLES11::GL_POINT_SIZE_ARRAY_TYPE_OES_() { return get_static_field<SCAPIX_META_STRING("GL_POINT_SIZE_ARRAY_TYPE_OES"), jint>(); }
inline jint GLES11::GL_POINT_SIZE_MAX_() { return get_static_field<SCAPIX_META_STRING("GL_POINT_SIZE_MAX"), jint>(); }
inline jint GLES11::GL_POINT_SIZE_MIN_() { return get_static_field<SCAPIX_META_STRING("GL_POINT_SIZE_MIN"), jint>(); }
inline jint GLES11::GL_POINT_SPRITE_OES_() { return get_static_field<SCAPIX_META_STRING("GL_POINT_SPRITE_OES"), jint>(); }
inline jint GLES11::GL_POLYGON_OFFSET_FACTOR_() { return get_static_field<SCAPIX_META_STRING("GL_POLYGON_OFFSET_FACTOR"), jint>(); }
inline jint GLES11::GL_POLYGON_OFFSET_UNITS_() { return get_static_field<SCAPIX_META_STRING("GL_POLYGON_OFFSET_UNITS"), jint>(); }
inline jint GLES11::GL_PREVIOUS_() { return get_static_field<SCAPIX_META_STRING("GL_PREVIOUS"), jint>(); }
inline jint GLES11::GL_PRIMARY_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_PRIMARY_COLOR"), jint>(); }
inline jint GLES11::GL_PROJECTION_MATRIX_() { return get_static_field<SCAPIX_META_STRING("GL_PROJECTION_MATRIX"), jint>(); }
inline jint GLES11::GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES_() { return get_static_field<SCAPIX_META_STRING("GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES"), jint>(); }
inline jint GLES11::GL_PROJECTION_STACK_DEPTH_() { return get_static_field<SCAPIX_META_STRING("GL_PROJECTION_STACK_DEPTH"), jint>(); }
inline jint GLES11::GL_RGB_SCALE_() { return get_static_field<SCAPIX_META_STRING("GL_RGB_SCALE"), jint>(); }
inline jint GLES11::GL_SAMPLES_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLES"), jint>(); }
inline jint GLES11::GL_SAMPLE_BUFFERS_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLE_BUFFERS"), jint>(); }
inline jint GLES11::GL_SAMPLE_COVERAGE_INVERT_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLE_COVERAGE_INVERT"), jint>(); }
inline jint GLES11::GL_SAMPLE_COVERAGE_VALUE_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLE_COVERAGE_VALUE"), jint>(); }
inline jint GLES11::GL_SCISSOR_BOX_() { return get_static_field<SCAPIX_META_STRING("GL_SCISSOR_BOX"), jint>(); }
inline jint GLES11::GL_SHADE_MODEL_() { return get_static_field<SCAPIX_META_STRING("GL_SHADE_MODEL"), jint>(); }
inline jint GLES11::GL_SRC0_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_SRC0_ALPHA"), jint>(); }
inline jint GLES11::GL_SRC0_RGB_() { return get_static_field<SCAPIX_META_STRING("GL_SRC0_RGB"), jint>(); }
inline jint GLES11::GL_SRC1_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_SRC1_ALPHA"), jint>(); }
inline jint GLES11::GL_SRC1_RGB_() { return get_static_field<SCAPIX_META_STRING("GL_SRC1_RGB"), jint>(); }
inline jint GLES11::GL_SRC2_ALPHA_() { return get_static_field<SCAPIX_META_STRING("GL_SRC2_ALPHA"), jint>(); }
inline jint GLES11::GL_SRC2_RGB_() { return get_static_field<SCAPIX_META_STRING("GL_SRC2_RGB"), jint>(); }
inline jint GLES11::GL_STATIC_DRAW_() { return get_static_field<SCAPIX_META_STRING("GL_STATIC_DRAW"), jint>(); }
inline jint GLES11::GL_STENCIL_CLEAR_VALUE_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_CLEAR_VALUE"), jint>(); }
inline jint GLES11::GL_STENCIL_FAIL_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_FAIL"), jint>(); }
inline jint GLES11::GL_STENCIL_FUNC_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_FUNC"), jint>(); }
inline jint GLES11::GL_STENCIL_PASS_DEPTH_FAIL_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_PASS_DEPTH_FAIL"), jint>(); }
inline jint GLES11::GL_STENCIL_PASS_DEPTH_PASS_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_PASS_DEPTH_PASS"), jint>(); }
inline jint GLES11::GL_STENCIL_REF_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_REF"), jint>(); }
inline jint GLES11::GL_STENCIL_VALUE_MASK_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_VALUE_MASK"), jint>(); }
inline jint GLES11::GL_STENCIL_WRITEMASK_() { return get_static_field<SCAPIX_META_STRING("GL_STENCIL_WRITEMASK"), jint>(); }
inline jint GLES11::GL_SUBTRACT_() { return get_static_field<SCAPIX_META_STRING("GL_SUBTRACT"), jint>(); }
inline jint GLES11::GL_TEXTURE_BINDING_2D_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BINDING_2D"), jint>(); }
inline jint GLES11::GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING"), jint>(); }
inline jint GLES11::GL_TEXTURE_COORD_ARRAY_POINTER_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_COORD_ARRAY_POINTER"), jint>(); }
inline jint GLES11::GL_TEXTURE_COORD_ARRAY_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_COORD_ARRAY_SIZE"), jint>(); }
inline jint GLES11::GL_TEXTURE_COORD_ARRAY_STRIDE_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_COORD_ARRAY_STRIDE"), jint>(); }
inline jint GLES11::GL_TEXTURE_COORD_ARRAY_TYPE_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_COORD_ARRAY_TYPE"), jint>(); }
inline jint GLES11::GL_TEXTURE_MATRIX_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_MATRIX"), jint>(); }
inline jint GLES11::GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES"), jint>(); }
inline jint GLES11::GL_TEXTURE_STACK_DEPTH_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_STACK_DEPTH"), jint>(); }
inline jint GLES11::GL_VERTEX_ARRAY_BUFFER_BINDING_() { return get_static_field<SCAPIX_META_STRING("GL_VERTEX_ARRAY_BUFFER_BINDING"), jint>(); }
inline jint GLES11::GL_VERTEX_ARRAY_POINTER_() { return get_static_field<SCAPIX_META_STRING("GL_VERTEX_ARRAY_POINTER"), jint>(); }
inline jint GLES11::GL_VERTEX_ARRAY_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_VERTEX_ARRAY_SIZE"), jint>(); }
inline jint GLES11::GL_VERTEX_ARRAY_STRIDE_() { return get_static_field<SCAPIX_META_STRING("GL_VERTEX_ARRAY_STRIDE"), jint>(); }
inline jint GLES11::GL_VERTEX_ARRAY_TYPE_() { return get_static_field<SCAPIX_META_STRING("GL_VERTEX_ARRAY_TYPE"), jint>(); }
inline jint GLES11::GL_VIEWPORT_() { return get_static_field<SCAPIX_META_STRING("GL_VIEWPORT"), jint>(); }
inline jint GLES11::GL_WRITE_ONLY_() { return get_static_field<SCAPIX_META_STRING("GL_WRITE_ONLY"), jint>(); }
inline ref<GLES11> GLES11::new_object() { return base_::new_object(); }
inline void GLES11::glBindBuffer(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glBindBuffer"), void>(p1, p2); }
inline void GLES11::glBufferData(jint p1, jint p2, ref<java::nio::Buffer> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glBufferData"), void>(p1, p2, p3, p4); }
inline void GLES11::glBufferSubData(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4) { return call_static_method<SCAPIX_META_STRING("glBufferSubData"), void>(p1, p2, p3, p4); }
inline void GLES11::glClipPlanef(jint p1, ref<link::java::array<jfloat>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glClipPlanef"), void>(p1, p2, p3); }
inline void GLES11::glClipPlanef(jint p1, ref<java::nio::FloatBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glClipPlanef"), void>(p1, p2); }
inline void GLES11::glClipPlanex(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glClipPlanex"), void>(p1, p2, p3); }
inline void GLES11::glClipPlanex(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glClipPlanex"), void>(p1, p2); }
inline void GLES11::glColor4ub(jbyte p1, jbyte p2, jbyte p3, jbyte p4) { return call_static_method<SCAPIX_META_STRING("glColor4ub"), void>(p1, p2, p3, p4); }
inline void GLES11::glColorPointer(jint p1, jint p2, jint p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glColorPointer"), void>(p1, p2, p3, p4); }
inline void GLES11::glDeleteBuffers(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glDeleteBuffers"), void>(p1, p2, p3); }
inline void GLES11::glDeleteBuffers(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glDeleteBuffers"), void>(p1, p2); }
inline void GLES11::glDrawElements(jint p1, jint p2, jint p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glDrawElements"), void>(p1, p2, p3, p4); }
inline void GLES11::glGenBuffers(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glGenBuffers"), void>(p1, p2, p3); }
inline void GLES11::glGenBuffers(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glGenBuffers"), void>(p1, p2); }
inline void GLES11::glGetBooleanv(jint p1, ref<link::java::array<jboolean>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glGetBooleanv"), void>(p1, p2, p3); }
inline void GLES11::glGetBooleanv(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glGetBooleanv"), void>(p1, p2); }
inline void GLES11::glGetBufferParameteriv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetBufferParameteriv"), void>(p1, p2, p3, p4); }
inline void GLES11::glGetBufferParameteriv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetBufferParameteriv"), void>(p1, p2, p3); }
inline void GLES11::glGetClipPlanef(jint p1, ref<link::java::array<jfloat>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glGetClipPlanef"), void>(p1, p2, p3); }
inline void GLES11::glGetClipPlanef(jint p1, ref<java::nio::FloatBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glGetClipPlanef"), void>(p1, p2); }
inline void GLES11::glGetClipPlanex(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glGetClipPlanex"), void>(p1, p2, p3); }
inline void GLES11::glGetClipPlanex(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glGetClipPlanex"), void>(p1, p2); }
inline void GLES11::glGetFixedv(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glGetFixedv"), void>(p1, p2, p3); }
inline void GLES11::glGetFixedv(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glGetFixedv"), void>(p1, p2); }
inline void GLES11::glGetFloatv(jint p1, ref<link::java::array<jfloat>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glGetFloatv"), void>(p1, p2, p3); }
inline void GLES11::glGetFloatv(jint p1, ref<java::nio::FloatBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glGetFloatv"), void>(p1, p2); }
inline void GLES11::glGetLightfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetLightfv"), void>(p1, p2, p3, p4); }
inline void GLES11::glGetLightfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetLightfv"), void>(p1, p2, p3); }
inline void GLES11::glGetLightxv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetLightxv"), void>(p1, p2, p3, p4); }
inline void GLES11::glGetLightxv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetLightxv"), void>(p1, p2, p3); }
inline void GLES11::glGetMaterialfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetMaterialfv"), void>(p1, p2, p3, p4); }
inline void GLES11::glGetMaterialfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetMaterialfv"), void>(p1, p2, p3); }
inline void GLES11::glGetMaterialxv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetMaterialxv"), void>(p1, p2, p3, p4); }
inline void GLES11::glGetMaterialxv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetMaterialxv"), void>(p1, p2, p3); }
inline void GLES11::glGetTexEnvfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetTexEnvfv"), void>(p1, p2, p3, p4); }
inline void GLES11::glGetTexEnvfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetTexEnvfv"), void>(p1, p2, p3); }
inline void GLES11::glGetTexEnviv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetTexEnviv"), void>(p1, p2, p3, p4); }
inline void GLES11::glGetTexEnviv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetTexEnviv"), void>(p1, p2, p3); }
inline void GLES11::glGetTexEnvxv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetTexEnvxv"), void>(p1, p2, p3, p4); }
inline void GLES11::glGetTexEnvxv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetTexEnvxv"), void>(p1, p2, p3); }
inline void GLES11::glGetTexParameterfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetTexParameterfv"), void>(p1, p2, p3, p4); }
inline void GLES11::glGetTexParameterfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetTexParameterfv"), void>(p1, p2, p3); }
inline void GLES11::glGetTexParameteriv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetTexParameteriv"), void>(p1, p2, p3, p4); }
inline void GLES11::glGetTexParameteriv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetTexParameteriv"), void>(p1, p2, p3); }
inline void GLES11::glGetTexParameterxv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetTexParameterxv"), void>(p1, p2, p3, p4); }
inline void GLES11::glGetTexParameterxv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetTexParameterxv"), void>(p1, p2, p3); }
inline jboolean GLES11::glIsBuffer(jint p1) { return call_static_method<SCAPIX_META_STRING("glIsBuffer"), jboolean>(p1); }
inline jboolean GLES11::glIsEnabled(jint p1) { return call_static_method<SCAPIX_META_STRING("glIsEnabled"), jboolean>(p1); }
inline jboolean GLES11::glIsTexture(jint p1) { return call_static_method<SCAPIX_META_STRING("glIsTexture"), jboolean>(p1); }
inline void GLES11::glNormalPointer(jint p1, jint p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glNormalPointer"), void>(p1, p2, p3); }
inline void GLES11::glPointParameterf(jint p1, jfloat p2) { return call_static_method<SCAPIX_META_STRING("glPointParameterf"), void>(p1, p2); }
inline void GLES11::glPointParameterfv(jint p1, ref<link::java::array<jfloat>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glPointParameterfv"), void>(p1, p2, p3); }
inline void GLES11::glPointParameterfv(jint p1, ref<java::nio::FloatBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glPointParameterfv"), void>(p1, p2); }
inline void GLES11::glPointParameterx(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glPointParameterx"), void>(p1, p2); }
inline void GLES11::glPointParameterxv(jint p1, ref<link::java::array<jint>> p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glPointParameterxv"), void>(p1, p2, p3); }
inline void GLES11::glPointParameterxv(jint p1, ref<java::nio::IntBuffer> p2) { return call_static_method<SCAPIX_META_STRING("glPointParameterxv"), void>(p1, p2); }
inline void GLES11::glPointSizePointerOES(jint type, jint stride, ref<java::nio::Buffer> pointer) { return call_static_method<SCAPIX_META_STRING("glPointSizePointerOES"), void>(type, stride, pointer); }
inline void GLES11::glTexCoordPointer(jint p1, jint p2, jint p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glTexCoordPointer"), void>(p1, p2, p3, p4); }
inline void GLES11::glTexEnvi(jint p1, jint p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glTexEnvi"), void>(p1, p2, p3); }
inline void GLES11::glTexEnviv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glTexEnviv"), void>(p1, p2, p3, p4); }
inline void GLES11::glTexEnviv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glTexEnviv"), void>(p1, p2, p3); }
inline void GLES11::glTexParameterfv(jint p1, jint p2, ref<link::java::array<jfloat>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glTexParameterfv"), void>(p1, p2, p3, p4); }
inline void GLES11::glTexParameterfv(jint p1, jint p2, ref<java::nio::FloatBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glTexParameterfv"), void>(p1, p2, p3); }
inline void GLES11::glTexParameteri(jint p1, jint p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glTexParameteri"), void>(p1, p2, p3); }
inline void GLES11::glTexParameteriv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glTexParameteriv"), void>(p1, p2, p3, p4); }
inline void GLES11::glTexParameteriv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glTexParameteriv"), void>(p1, p2, p3); }
inline void GLES11::glTexParameterxv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glTexParameterxv"), void>(p1, p2, p3, p4); }
inline void GLES11::glTexParameterxv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glTexParameterxv"), void>(p1, p2, p3); }
inline void GLES11::glVertexPointer(jint p1, jint p2, jint p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glVertexPointer"), void>(p1, p2, p3, p4); }

} // namespace android::opengl
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OPENGL_GLES11_H
