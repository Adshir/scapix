// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/opengl/GLES31.h>

#ifndef SCAPIX_ANDROID_OPENGL_GLES32_H
#define SCAPIX_ANDROID_OPENGL_GLES32_H

namespace scapix::java_api {

namespace android::opengl { class GLES32_DebugProc; }
namespace java::lang { class String; }
namespace java::nio { class Buffer; }
namespace java::nio { class ByteBuffer; }
namespace java::nio { class FloatBuffer; }
namespace java::nio { class IntBuffer; }

namespace android::opengl {

class GLES32 : public object_base<SCAPIX_META_STRING("android/opengl/GLES32"),
	android::opengl::GLES31>
{
public:

	using DebugProc = GLES32_DebugProc;

	static jint GL_BUFFER_();
	static jint GL_CLAMP_TO_BORDER_();
	static jint GL_COLORBURN_();
	static jint GL_COLORDODGE_();
	static jint GL_COMPRESSED_RGBA_ASTC_10x10();
	static jint GL_COMPRESSED_RGBA_ASTC_10x5();
	static jint GL_COMPRESSED_RGBA_ASTC_10x6();
	static jint GL_COMPRESSED_RGBA_ASTC_10x8();
	static jint GL_COMPRESSED_RGBA_ASTC_12x10();
	static jint GL_COMPRESSED_RGBA_ASTC_12x12();
	static jint GL_COMPRESSED_RGBA_ASTC_4x4();
	static jint GL_COMPRESSED_RGBA_ASTC_5x4();
	static jint GL_COMPRESSED_RGBA_ASTC_5x5();
	static jint GL_COMPRESSED_RGBA_ASTC_6x5();
	static jint GL_COMPRESSED_RGBA_ASTC_6x6();
	static jint GL_COMPRESSED_RGBA_ASTC_8x5();
	static jint GL_COMPRESSED_RGBA_ASTC_8x6();
	static jint GL_COMPRESSED_RGBA_ASTC_8x8();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6();
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8();
	static jint GL_CONTEXT_FLAGS_();
	static jint GL_CONTEXT_FLAG_DEBUG_BIT_();
	static jint GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_();
	static jint GL_CONTEXT_LOST_();
	static jint GL_DARKEN_();
	static jint GL_DEBUG_CALLBACK_FUNCTION_();
	static jint GL_DEBUG_CALLBACK_USER_PARAM_();
	static jint GL_DEBUG_GROUP_STACK_DEPTH_();
	static jint GL_DEBUG_LOGGED_MESSAGES_();
	static jint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_();
	static jint GL_DEBUG_OUTPUT_();
	static jint GL_DEBUG_OUTPUT_SYNCHRONOUS_();
	static jint GL_DEBUG_SEVERITY_HIGH_();
	static jint GL_DEBUG_SEVERITY_LOW_();
	static jint GL_DEBUG_SEVERITY_MEDIUM_();
	static jint GL_DEBUG_SEVERITY_NOTIFICATION_();
	static jint GL_DEBUG_SOURCE_API_();
	static jint GL_DEBUG_SOURCE_APPLICATION_();
	static jint GL_DEBUG_SOURCE_OTHER_();
	static jint GL_DEBUG_SOURCE_SHADER_COMPILER_();
	static jint GL_DEBUG_SOURCE_THIRD_PARTY_();
	static jint GL_DEBUG_SOURCE_WINDOW_SYSTEM_();
	static jint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_();
	static jint GL_DEBUG_TYPE_ERROR_();
	static jint GL_DEBUG_TYPE_MARKER_();
	static jint GL_DEBUG_TYPE_OTHER_();
	static jint GL_DEBUG_TYPE_PERFORMANCE_();
	static jint GL_DEBUG_TYPE_POP_GROUP_();
	static jint GL_DEBUG_TYPE_PORTABILITY_();
	static jint GL_DEBUG_TYPE_PUSH_GROUP_();
	static jint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_();
	static jint GL_DIFFERENCE_();
	static jint GL_EXCLUSION_();
	static jint GL_FIRST_VERTEX_CONVENTION_();
	static jint GL_FRACTIONAL_EVEN_();
	static jint GL_FRACTIONAL_ODD_();
	static jint GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_();
	static jint GL_FRAMEBUFFER_ATTACHMENT_LAYERED_();
	static jint GL_FRAMEBUFFER_DEFAULT_LAYERS_();
	static jint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_();
	static jint GL_GEOMETRY_INPUT_TYPE_();
	static jint GL_GEOMETRY_OUTPUT_TYPE_();
	static jint GL_GEOMETRY_SHADER_();
	static jint GL_GEOMETRY_SHADER_BIT_();
	static jint GL_GEOMETRY_SHADER_INVOCATIONS_();
	static jint GL_GEOMETRY_VERTICES_OUT_();
	static jint GL_GUILTY_CONTEXT_RESET_();
	static jint GL_HARDLIGHT_();
	static jint GL_HSL_COLOR_();
	static jint GL_HSL_HUE_();
	static jint GL_HSL_LUMINOSITY_();
	static jint GL_HSL_SATURATION_();
	static jint GL_IMAGE_BUFFER_();
	static jint GL_IMAGE_CUBE_MAP_ARRAY_();
	static jint GL_INNOCENT_CONTEXT_RESET_();
	static jint GL_INT_IMAGE_BUFFER_();
	static jint GL_INT_IMAGE_CUBE_MAP_ARRAY_();
	static jint GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_();
	static jint GL_INT_SAMPLER_BUFFER_();
	static jint GL_INT_SAMPLER_CUBE_MAP_ARRAY_();
	static jint GL_ISOLINES_();
	static jint GL_IS_PER_PATCH_();
	static jint GL_LAST_VERTEX_CONVENTION_();
	static jint GL_LAYER_PROVOKING_VERTEX_();
	static jint GL_LIGHTEN_();
	static jint GL_LINES_ADJACENCY_();
	static jint GL_LINE_STRIP_ADJACENCY_();
	static jint GL_LOSE_CONTEXT_ON_RESET_();
	static jint GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_();
	static jint GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_();
	static jint GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_();
	static jint GL_MAX_DEBUG_GROUP_STACK_DEPTH_();
	static jint GL_MAX_DEBUG_LOGGED_MESSAGES_();
	static jint GL_MAX_DEBUG_MESSAGE_LENGTH_();
	static jint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_();
	static jint GL_MAX_FRAMEBUFFER_LAYERS_();
	static jint GL_MAX_GEOMETRY_ATOMIC_COUNTERS_();
	static jint GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_();
	static jint GL_MAX_GEOMETRY_IMAGE_UNIFORMS_();
	static jint GL_MAX_GEOMETRY_INPUT_COMPONENTS_();
	static jint GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_();
	static jint GL_MAX_GEOMETRY_OUTPUT_VERTICES_();
	static jint GL_MAX_GEOMETRY_SHADER_INVOCATIONS_();
	static jint GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_();
	static jint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_();
	static jint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_();
	static jint GL_MAX_GEOMETRY_UNIFORM_BLOCKS_();
	static jint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_();
	static jint GL_MAX_LABEL_LENGTH_();
	static jint GL_MAX_PATCH_VERTICES_();
	static jint GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_();
	static jint GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_();
	static jint GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_();
	static jint GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_();
	static jint GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_();
	static jint GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_();
	static jint GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_();
	static jint GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_();
	static jint GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_();
	static jint GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_();
	static jint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_();
	static jint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_();
	static jint GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_();
	static jint GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_();
	static jint GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_();
	static jint GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_();
	static jint GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_();
	static jint GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_();
	static jint GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_();
	static jint GL_MAX_TESS_GEN_LEVEL_();
	static jint GL_MAX_TESS_PATCH_COMPONENTS_();
	static jint GL_MAX_TEXTURE_BUFFER_SIZE_();
	static jint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_();
	static jint GL_MIN_SAMPLE_SHADING_VALUE_();
	static jint GL_MULTIPLY_();
	static jint GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_();
	static jint GL_MULTISAMPLE_LINE_WIDTH_RANGE_();
	static jint GL_NO_RESET_NOTIFICATION_();
	static jint GL_OVERLAY_();
	static jint GL_PATCHES_();
	static jint GL_PATCH_VERTICES_();
	static jint GL_PRIMITIVES_GENERATED_();
	static jint GL_PRIMITIVE_BOUNDING_BOX_();
	static jint GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_();
	static jint GL_PROGRAM_();
	static jint GL_PROGRAM_PIPELINE_();
	static jint GL_QUADS_();
	static jint GL_QUERY_();
	static jint GL_REFERENCED_BY_GEOMETRY_SHADER_();
	static jint GL_REFERENCED_BY_TESS_CONTROL_SHADER_();
	static jint GL_REFERENCED_BY_TESS_EVALUATION_SHADER_();
	static jint GL_RESET_NOTIFICATION_STRATEGY_();
	static jint GL_SAMPLER_();
	static jint GL_SAMPLER_2D_MULTISAMPLE_ARRAY_();
	static jint GL_SAMPLER_BUFFER_();
	static jint GL_SAMPLER_CUBE_MAP_ARRAY_();
	static jint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_();
	static jint GL_SAMPLE_SHADING_();
	static jint GL_SCREEN_();
	static jint GL_SHADER_();
	static jint GL_SOFTLIGHT_();
	static jint GL_STACK_OVERFLOW_();
	static jint GL_STACK_UNDERFLOW_();
	static jint GL_TESS_CONTROL_OUTPUT_VERTICES_();
	static jint GL_TESS_CONTROL_SHADER_();
	static jint GL_TESS_CONTROL_SHADER_BIT_();
	static jint GL_TESS_EVALUATION_SHADER_();
	static jint GL_TESS_EVALUATION_SHADER_BIT_();
	static jint GL_TESS_GEN_MODE_();
	static jint GL_TESS_GEN_POINT_MODE_();
	static jint GL_TESS_GEN_SPACING_();
	static jint GL_TESS_GEN_VERTEX_ORDER_();
	static jint GL_TEXTURE_2D_MULTISAMPLE_ARRAY_();
	static jint GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_();
	static jint GL_TEXTURE_BINDING_BUFFER_();
	static jint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_();
	static jint GL_TEXTURE_BORDER_COLOR_();
	static jint GL_TEXTURE_BUFFER_();
	static jint GL_TEXTURE_BUFFER_BINDING_();
	static jint GL_TEXTURE_BUFFER_DATA_STORE_BINDING_();
	static jint GL_TEXTURE_BUFFER_OFFSET_();
	static jint GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_();
	static jint GL_TEXTURE_BUFFER_SIZE_();
	static jint GL_TEXTURE_CUBE_MAP_ARRAY_();
	static jint GL_TRIANGLES_ADJACENCY_();
	static jint GL_TRIANGLE_STRIP_ADJACENCY_();
	static jint GL_UNDEFINED_VERTEX_();
	static jint GL_UNKNOWN_CONTEXT_RESET_();
	static jint GL_UNSIGNED_INT_IMAGE_BUFFER_();
	static jint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_();
	static jint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_();
	static jint GL_UNSIGNED_INT_SAMPLER_BUFFER_();
	static jint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_();
	static jint GL_VERTEX_ARRAY_();

	static void glBlendBarrier();
	static void glCopyImageSubData(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jint p9, jint p10, jint p11, jint p12, jint p13, jint p14, jint p15);
	static void glDebugMessageControl(jint p1, jint p2, jint p3, jint p4, ref<link::java::array<jint>> p5, jint p6, jboolean p7);
	static void glDebugMessageControl(jint p1, jint p2, jint p3, jint p4, ref<java::nio::IntBuffer> p5, jboolean p6);
	static void glDebugMessageInsert(jint p1, jint p2, jint p3, jint p4, jint p5, ref<java::lang::String> p6);
	static void glDebugMessageCallback(ref<android::opengl::GLES32_DebugProc> p1);
	static jint glGetDebugMessageLog(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4, ref<link::java::array<jint>> p5, jint p6, ref<link::java::array<jint>> p7, jint p8, ref<link::java::array<jint>> p9, jint p10, ref<link::java::array<jint>> p11, jint p12, ref<link::java::array<jbyte>> p13, jint p14);
	static jint glGetDebugMessageLog(jint p1, ref<java::nio::IntBuffer> p2, ref<java::nio::IntBuffer> p3, ref<java::nio::IntBuffer> p4, ref<java::nio::IntBuffer> p5, ref<java::nio::IntBuffer> p6, ref<java::nio::ByteBuffer> p7);
	static ref<link::java::array<java::lang::String>> glGetDebugMessageLog(jint p1, ref<link::java::array<jint>> p2, jint p3, ref<link::java::array<jint>> p4, jint p5, ref<link::java::array<jint>> p6, jint p7, ref<link::java::array<jint>> p8, jint p9);
	static ref<link::java::array<java::lang::String>> glGetDebugMessageLog(jint p1, ref<java::nio::IntBuffer> p2, ref<java::nio::IntBuffer> p3, ref<java::nio::IntBuffer> p4, ref<java::nio::IntBuffer> p5);
	static void glPushDebugGroup(jint p1, jint p2, jint p3, ref<java::lang::String> p4);
	static void glPopDebugGroup();
	static void glObjectLabel(jint p1, jint p2, jint p3, ref<java::lang::String> p4);
	static ref<java::lang::String> glGetObjectLabel(jint p1, jint p2);
	static void glObjectPtrLabel(jlong p1, ref<java::lang::String> p2);
	static ref<java::lang::String> glGetObjectPtrLabel(jlong p1);
	static jlong glGetPointerv(jint p1);
	static void glEnablei(jint p1, jint p2);
	static void glDisablei(jint p1, jint p2);
	static void glBlendEquationi(jint p1, jint p2);
	static void glBlendEquationSeparatei(jint p1, jint p2, jint p3);
	static void glBlendFunci(jint p1, jint p2, jint p3);
	static void glBlendFuncSeparatei(jint p1, jint p2, jint p3, jint p4, jint p5);
	static void glColorMaski(jint p1, jboolean p2, jboolean p3, jboolean p4, jboolean p5);
	static jboolean glIsEnabledi(jint p1, jint p2);
	static void glDrawElementsBaseVertex(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4, jint p5);
	static void glDrawRangeElementsBaseVertex(jint p1, jint p2, jint p3, jint p4, jint p5, ref<java::nio::Buffer> p6, jint p7);
	static void glDrawElementsInstancedBaseVertex(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4, jint p5, jint p6);
	static void glDrawElementsInstancedBaseVertex(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6);
	static void glFramebufferTexture(jint p1, jint p2, jint p3, jint p4);
	static void glPrimitiveBoundingBox(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6, jfloat p7, jfloat p8);
	static jint glGetGraphicsResetStatus();
	static void glReadnPixels(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, ref<java::nio::Buffer> p8);
	static void glGetnUniformfv(jint p1, jint p2, jint p3, ref<link::java::array<jfloat>> p4, jint p5);
	static void glGetnUniformfv(jint p1, jint p2, jint p3, ref<java::nio::FloatBuffer> p4);
	static void glGetnUniformiv(jint p1, jint p2, jint p3, ref<link::java::array<jint>> p4, jint p5);
	static void glGetnUniformiv(jint p1, jint p2, jint p3, ref<java::nio::IntBuffer> p4);
	static void glGetnUniformuiv(jint p1, jint p2, jint p3, ref<link::java::array<jint>> p4, jint p5);
	static void glGetnUniformuiv(jint p1, jint p2, jint p3, ref<java::nio::IntBuffer> p4);
	static void glMinSampleShading(jfloat p1);
	static void glPatchParameteri(jint p1, jint p2);
	static void glTexParameterIiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glTexParameterIiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glTexParameterIuiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glTexParameterIuiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glGetTexParameterIiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetTexParameterIiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glGetTexParameterIuiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetTexParameterIuiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glSamplerParameterIiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glSamplerParameterIiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glSamplerParameterIuiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glSamplerParameterIuiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glGetSamplerParameterIiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetSamplerParameterIiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glGetSamplerParameterIuiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4);
	static void glGetSamplerParameterIuiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3);
	static void glTexBuffer(jint p1, jint p2, jint p3);
	static void glTexBufferRange(jint p1, jint p2, jint p3, jint p4, jint p5);
	static void glTexStorage3DMultisample(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jboolean p7);

protected:

	GLES32(handle_type h) : base_(h) {}

};

} // namespace android::opengl
} // namespace scapix::java_api

#include <scapix/java_api/android/opengl/GLES32_DebugProc.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/FloatBuffer.h>
#include <scapix/java_api/java/nio/IntBuffer.h>

namespace scapix::java_api {
namespace android::opengl {

inline jint GLES32::GL_BUFFER_() { return get_static_field<SCAPIX_META_STRING("GL_BUFFER"), jint>(); }
inline jint GLES32::GL_CLAMP_TO_BORDER_() { return get_static_field<SCAPIX_META_STRING("GL_CLAMP_TO_BORDER"), jint>(); }
inline jint GLES32::GL_COLORBURN_() { return get_static_field<SCAPIX_META_STRING("GL_COLORBURN"), jint>(); }
inline jint GLES32::GL_COLORDODGE_() { return get_static_field<SCAPIX_META_STRING("GL_COLORDODGE"), jint>(); }
inline jint GLES32::GL_COMPRESSED_RGBA_ASTC_10x10() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_10x10"), jint>(); }
inline jint GLES32::GL_COMPRESSED_RGBA_ASTC_10x5() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_10x5"), jint>(); }
inline jint GLES32::GL_COMPRESSED_RGBA_ASTC_10x6() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_10x6"), jint>(); }
inline jint GLES32::GL_COMPRESSED_RGBA_ASTC_10x8() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_10x8"), jint>(); }
inline jint GLES32::GL_COMPRESSED_RGBA_ASTC_12x10() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_12x10"), jint>(); }
inline jint GLES32::GL_COMPRESSED_RGBA_ASTC_12x12() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_12x12"), jint>(); }
inline jint GLES32::GL_COMPRESSED_RGBA_ASTC_4x4() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_4x4"), jint>(); }
inline jint GLES32::GL_COMPRESSED_RGBA_ASTC_5x4() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_5x4"), jint>(); }
inline jint GLES32::GL_COMPRESSED_RGBA_ASTC_5x5() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_5x5"), jint>(); }
inline jint GLES32::GL_COMPRESSED_RGBA_ASTC_6x5() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_6x5"), jint>(); }
inline jint GLES32::GL_COMPRESSED_RGBA_ASTC_6x6() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_6x6"), jint>(); }
inline jint GLES32::GL_COMPRESSED_RGBA_ASTC_8x5() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_8x5"), jint>(); }
inline jint GLES32::GL_COMPRESSED_RGBA_ASTC_8x6() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_8x6"), jint>(); }
inline jint GLES32::GL_COMPRESSED_RGBA_ASTC_8x8() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_RGBA_ASTC_8x8"), jint>(); }
inline jint GLES32::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10"), jint>(); }
inline jint GLES32::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5"), jint>(); }
inline jint GLES32::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6"), jint>(); }
inline jint GLES32::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8"), jint>(); }
inline jint GLES32::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10"), jint>(); }
inline jint GLES32::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12"), jint>(); }
inline jint GLES32::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4"), jint>(); }
inline jint GLES32::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4"), jint>(); }
inline jint GLES32::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5"), jint>(); }
inline jint GLES32::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5"), jint>(); }
inline jint GLES32::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6"), jint>(); }
inline jint GLES32::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5"), jint>(); }
inline jint GLES32::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6"), jint>(); }
inline jint GLES32::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8() { return get_static_field<SCAPIX_META_STRING("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8"), jint>(); }
inline jint GLES32::GL_CONTEXT_FLAGS_() { return get_static_field<SCAPIX_META_STRING("GL_CONTEXT_FLAGS"), jint>(); }
inline jint GLES32::GL_CONTEXT_FLAG_DEBUG_BIT_() { return get_static_field<SCAPIX_META_STRING("GL_CONTEXT_FLAG_DEBUG_BIT"), jint>(); }
inline jint GLES32::GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_() { return get_static_field<SCAPIX_META_STRING("GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT"), jint>(); }
inline jint GLES32::GL_CONTEXT_LOST_() { return get_static_field<SCAPIX_META_STRING("GL_CONTEXT_LOST"), jint>(); }
inline jint GLES32::GL_DARKEN_() { return get_static_field<SCAPIX_META_STRING("GL_DARKEN"), jint>(); }
inline jint GLES32::GL_DEBUG_CALLBACK_FUNCTION_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_CALLBACK_FUNCTION"), jint>(); }
inline jint GLES32::GL_DEBUG_CALLBACK_USER_PARAM_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_CALLBACK_USER_PARAM"), jint>(); }
inline jint GLES32::GL_DEBUG_GROUP_STACK_DEPTH_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_GROUP_STACK_DEPTH"), jint>(); }
inline jint GLES32::GL_DEBUG_LOGGED_MESSAGES_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_LOGGED_MESSAGES"), jint>(); }
inline jint GLES32::GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH"), jint>(); }
inline jint GLES32::GL_DEBUG_OUTPUT_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_OUTPUT"), jint>(); }
inline jint GLES32::GL_DEBUG_OUTPUT_SYNCHRONOUS_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_OUTPUT_SYNCHRONOUS"), jint>(); }
inline jint GLES32::GL_DEBUG_SEVERITY_HIGH_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SEVERITY_HIGH"), jint>(); }
inline jint GLES32::GL_DEBUG_SEVERITY_LOW_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SEVERITY_LOW"), jint>(); }
inline jint GLES32::GL_DEBUG_SEVERITY_MEDIUM_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SEVERITY_MEDIUM"), jint>(); }
inline jint GLES32::GL_DEBUG_SEVERITY_NOTIFICATION_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SEVERITY_NOTIFICATION"), jint>(); }
inline jint GLES32::GL_DEBUG_SOURCE_API_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SOURCE_API"), jint>(); }
inline jint GLES32::GL_DEBUG_SOURCE_APPLICATION_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SOURCE_APPLICATION"), jint>(); }
inline jint GLES32::GL_DEBUG_SOURCE_OTHER_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SOURCE_OTHER"), jint>(); }
inline jint GLES32::GL_DEBUG_SOURCE_SHADER_COMPILER_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SOURCE_SHADER_COMPILER"), jint>(); }
inline jint GLES32::GL_DEBUG_SOURCE_THIRD_PARTY_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SOURCE_THIRD_PARTY"), jint>(); }
inline jint GLES32::GL_DEBUG_SOURCE_WINDOW_SYSTEM_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_SOURCE_WINDOW_SYSTEM"), jint>(); }
inline jint GLES32::GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR"), jint>(); }
inline jint GLES32::GL_DEBUG_TYPE_ERROR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_ERROR"), jint>(); }
inline jint GLES32::GL_DEBUG_TYPE_MARKER_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_MARKER"), jint>(); }
inline jint GLES32::GL_DEBUG_TYPE_OTHER_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_OTHER"), jint>(); }
inline jint GLES32::GL_DEBUG_TYPE_PERFORMANCE_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_PERFORMANCE"), jint>(); }
inline jint GLES32::GL_DEBUG_TYPE_POP_GROUP_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_POP_GROUP"), jint>(); }
inline jint GLES32::GL_DEBUG_TYPE_PORTABILITY_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_PORTABILITY"), jint>(); }
inline jint GLES32::GL_DEBUG_TYPE_PUSH_GROUP_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_PUSH_GROUP"), jint>(); }
inline jint GLES32::GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_() { return get_static_field<SCAPIX_META_STRING("GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR"), jint>(); }
inline jint GLES32::GL_DIFFERENCE_() { return get_static_field<SCAPIX_META_STRING("GL_DIFFERENCE"), jint>(); }
inline jint GLES32::GL_EXCLUSION_() { return get_static_field<SCAPIX_META_STRING("GL_EXCLUSION"), jint>(); }
inline jint GLES32::GL_FIRST_VERTEX_CONVENTION_() { return get_static_field<SCAPIX_META_STRING("GL_FIRST_VERTEX_CONVENTION"), jint>(); }
inline jint GLES32::GL_FRACTIONAL_EVEN_() { return get_static_field<SCAPIX_META_STRING("GL_FRACTIONAL_EVEN"), jint>(); }
inline jint GLES32::GL_FRACTIONAL_ODD_() { return get_static_field<SCAPIX_META_STRING("GL_FRACTIONAL_ODD"), jint>(); }
inline jint GLES32::GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_() { return get_static_field<SCAPIX_META_STRING("GL_FRAGMENT_INTERPOLATION_OFFSET_BITS"), jint>(); }
inline jint GLES32::GL_FRAMEBUFFER_ATTACHMENT_LAYERED_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER_ATTACHMENT_LAYERED"), jint>(); }
inline jint GLES32::GL_FRAMEBUFFER_DEFAULT_LAYERS_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER_DEFAULT_LAYERS"), jint>(); }
inline jint GLES32::GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_() { return get_static_field<SCAPIX_META_STRING("GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS"), jint>(); }
inline jint GLES32::GL_GEOMETRY_INPUT_TYPE_() { return get_static_field<SCAPIX_META_STRING("GL_GEOMETRY_INPUT_TYPE"), jint>(); }
inline jint GLES32::GL_GEOMETRY_OUTPUT_TYPE_() { return get_static_field<SCAPIX_META_STRING("GL_GEOMETRY_OUTPUT_TYPE"), jint>(); }
inline jint GLES32::GL_GEOMETRY_SHADER_() { return get_static_field<SCAPIX_META_STRING("GL_GEOMETRY_SHADER"), jint>(); }
inline jint GLES32::GL_GEOMETRY_SHADER_BIT_() { return get_static_field<SCAPIX_META_STRING("GL_GEOMETRY_SHADER_BIT"), jint>(); }
inline jint GLES32::GL_GEOMETRY_SHADER_INVOCATIONS_() { return get_static_field<SCAPIX_META_STRING("GL_GEOMETRY_SHADER_INVOCATIONS"), jint>(); }
inline jint GLES32::GL_GEOMETRY_VERTICES_OUT_() { return get_static_field<SCAPIX_META_STRING("GL_GEOMETRY_VERTICES_OUT"), jint>(); }
inline jint GLES32::GL_GUILTY_CONTEXT_RESET_() { return get_static_field<SCAPIX_META_STRING("GL_GUILTY_CONTEXT_RESET"), jint>(); }
inline jint GLES32::GL_HARDLIGHT_() { return get_static_field<SCAPIX_META_STRING("GL_HARDLIGHT"), jint>(); }
inline jint GLES32::GL_HSL_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_HSL_COLOR"), jint>(); }
inline jint GLES32::GL_HSL_HUE_() { return get_static_field<SCAPIX_META_STRING("GL_HSL_HUE"), jint>(); }
inline jint GLES32::GL_HSL_LUMINOSITY_() { return get_static_field<SCAPIX_META_STRING("GL_HSL_LUMINOSITY"), jint>(); }
inline jint GLES32::GL_HSL_SATURATION_() { return get_static_field<SCAPIX_META_STRING("GL_HSL_SATURATION"), jint>(); }
inline jint GLES32::GL_IMAGE_BUFFER_() { return get_static_field<SCAPIX_META_STRING("GL_IMAGE_BUFFER"), jint>(); }
inline jint GLES32::GL_IMAGE_CUBE_MAP_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_IMAGE_CUBE_MAP_ARRAY"), jint>(); }
inline jint GLES32::GL_INNOCENT_CONTEXT_RESET_() { return get_static_field<SCAPIX_META_STRING("GL_INNOCENT_CONTEXT_RESET"), jint>(); }
inline jint GLES32::GL_INT_IMAGE_BUFFER_() { return get_static_field<SCAPIX_META_STRING("GL_INT_IMAGE_BUFFER"), jint>(); }
inline jint GLES32::GL_INT_IMAGE_CUBE_MAP_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_INT_IMAGE_CUBE_MAP_ARRAY"), jint>(); }
inline jint GLES32::GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY"), jint>(); }
inline jint GLES32::GL_INT_SAMPLER_BUFFER_() { return get_static_field<SCAPIX_META_STRING("GL_INT_SAMPLER_BUFFER"), jint>(); }
inline jint GLES32::GL_INT_SAMPLER_CUBE_MAP_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_INT_SAMPLER_CUBE_MAP_ARRAY"), jint>(); }
inline jint GLES32::GL_ISOLINES_() { return get_static_field<SCAPIX_META_STRING("GL_ISOLINES"), jint>(); }
inline jint GLES32::GL_IS_PER_PATCH_() { return get_static_field<SCAPIX_META_STRING("GL_IS_PER_PATCH"), jint>(); }
inline jint GLES32::GL_LAST_VERTEX_CONVENTION_() { return get_static_field<SCAPIX_META_STRING("GL_LAST_VERTEX_CONVENTION"), jint>(); }
inline jint GLES32::GL_LAYER_PROVOKING_VERTEX_() { return get_static_field<SCAPIX_META_STRING("GL_LAYER_PROVOKING_VERTEX"), jint>(); }
inline jint GLES32::GL_LIGHTEN_() { return get_static_field<SCAPIX_META_STRING("GL_LIGHTEN"), jint>(); }
inline jint GLES32::GL_LINES_ADJACENCY_() { return get_static_field<SCAPIX_META_STRING("GL_LINES_ADJACENCY"), jint>(); }
inline jint GLES32::GL_LINE_STRIP_ADJACENCY_() { return get_static_field<SCAPIX_META_STRING("GL_LINE_STRIP_ADJACENCY"), jint>(); }
inline jint GLES32::GL_LOSE_CONTEXT_ON_RESET_() { return get_static_field<SCAPIX_META_STRING("GL_LOSE_CONTEXT_ON_RESET"), jint>(); }
inline jint GLES32::GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS"), jint>(); }
inline jint GLES32::GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS"), jint>(); }
inline jint GLES32::GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS"), jint>(); }
inline jint GLES32::GL_MAX_DEBUG_GROUP_STACK_DEPTH_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_DEBUG_GROUP_STACK_DEPTH"), jint>(); }
inline jint GLES32::GL_MAX_DEBUG_LOGGED_MESSAGES_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_DEBUG_LOGGED_MESSAGES"), jint>(); }
inline jint GLES32::GL_MAX_DEBUG_MESSAGE_LENGTH_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_DEBUG_MESSAGE_LENGTH"), jint>(); }
inline jint GLES32::GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_FRAGMENT_INTERPOLATION_OFFSET"), jint>(); }
inline jint GLES32::GL_MAX_FRAMEBUFFER_LAYERS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_FRAMEBUFFER_LAYERS"), jint>(); }
inline jint GLES32::GL_MAX_GEOMETRY_ATOMIC_COUNTERS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_ATOMIC_COUNTERS"), jint>(); }
inline jint GLES32::GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS"), jint>(); }
inline jint GLES32::GL_MAX_GEOMETRY_IMAGE_UNIFORMS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_IMAGE_UNIFORMS"), jint>(); }
inline jint GLES32::GL_MAX_GEOMETRY_INPUT_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_INPUT_COMPONENTS"), jint>(); }
inline jint GLES32::GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_OUTPUT_COMPONENTS"), jint>(); }
inline jint GLES32::GL_MAX_GEOMETRY_OUTPUT_VERTICES_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_OUTPUT_VERTICES"), jint>(); }
inline jint GLES32::GL_MAX_GEOMETRY_SHADER_INVOCATIONS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_SHADER_INVOCATIONS"), jint>(); }
inline jint GLES32::GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS"), jint>(); }
inline jint GLES32::GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS"), jint>(); }
inline jint GLES32::GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS"), jint>(); }
inline jint GLES32::GL_MAX_GEOMETRY_UNIFORM_BLOCKS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_UNIFORM_BLOCKS"), jint>(); }
inline jint GLES32::GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_GEOMETRY_UNIFORM_COMPONENTS"), jint>(); }
inline jint GLES32::GL_MAX_LABEL_LENGTH_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_LABEL_LENGTH"), jint>(); }
inline jint GLES32::GL_MAX_PATCH_VERTICES_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_PATCH_VERTICES"), jint>(); }
inline jint GLES32::GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_INPUT_COMPONENTS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS"), jint>(); }
inline jint GLES32::GL_MAX_TESS_GEN_LEVEL_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_GEN_LEVEL"), jint>(); }
inline jint GLES32::GL_MAX_TESS_PATCH_COMPONENTS_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TESS_PATCH_COMPONENTS"), jint>(); }
inline jint GLES32::GL_MAX_TEXTURE_BUFFER_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_MAX_TEXTURE_BUFFER_SIZE"), jint>(); }
inline jint GLES32::GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_() { return get_static_field<SCAPIX_META_STRING("GL_MIN_FRAGMENT_INTERPOLATION_OFFSET"), jint>(); }
inline jint GLES32::GL_MIN_SAMPLE_SHADING_VALUE_() { return get_static_field<SCAPIX_META_STRING("GL_MIN_SAMPLE_SHADING_VALUE"), jint>(); }
inline jint GLES32::GL_MULTIPLY_() { return get_static_field<SCAPIX_META_STRING("GL_MULTIPLY"), jint>(); }
inline jint GLES32::GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_() { return get_static_field<SCAPIX_META_STRING("GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY"), jint>(); }
inline jint GLES32::GL_MULTISAMPLE_LINE_WIDTH_RANGE_() { return get_static_field<SCAPIX_META_STRING("GL_MULTISAMPLE_LINE_WIDTH_RANGE"), jint>(); }
inline jint GLES32::GL_NO_RESET_NOTIFICATION_() { return get_static_field<SCAPIX_META_STRING("GL_NO_RESET_NOTIFICATION"), jint>(); }
inline jint GLES32::GL_OVERLAY_() { return get_static_field<SCAPIX_META_STRING("GL_OVERLAY"), jint>(); }
inline jint GLES32::GL_PATCHES_() { return get_static_field<SCAPIX_META_STRING("GL_PATCHES"), jint>(); }
inline jint GLES32::GL_PATCH_VERTICES_() { return get_static_field<SCAPIX_META_STRING("GL_PATCH_VERTICES"), jint>(); }
inline jint GLES32::GL_PRIMITIVES_GENERATED_() { return get_static_field<SCAPIX_META_STRING("GL_PRIMITIVES_GENERATED"), jint>(); }
inline jint GLES32::GL_PRIMITIVE_BOUNDING_BOX_() { return get_static_field<SCAPIX_META_STRING("GL_PRIMITIVE_BOUNDING_BOX"), jint>(); }
inline jint GLES32::GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_() { return get_static_field<SCAPIX_META_STRING("GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED"), jint>(); }
inline jint GLES32::GL_PROGRAM_() { return get_static_field<SCAPIX_META_STRING("GL_PROGRAM"), jint>(); }
inline jint GLES32::GL_PROGRAM_PIPELINE_() { return get_static_field<SCAPIX_META_STRING("GL_PROGRAM_PIPELINE"), jint>(); }
inline jint GLES32::GL_QUADS_() { return get_static_field<SCAPIX_META_STRING("GL_QUADS"), jint>(); }
inline jint GLES32::GL_QUERY_() { return get_static_field<SCAPIX_META_STRING("GL_QUERY"), jint>(); }
inline jint GLES32::GL_REFERENCED_BY_GEOMETRY_SHADER_() { return get_static_field<SCAPIX_META_STRING("GL_REFERENCED_BY_GEOMETRY_SHADER"), jint>(); }
inline jint GLES32::GL_REFERENCED_BY_TESS_CONTROL_SHADER_() { return get_static_field<SCAPIX_META_STRING("GL_REFERENCED_BY_TESS_CONTROL_SHADER"), jint>(); }
inline jint GLES32::GL_REFERENCED_BY_TESS_EVALUATION_SHADER_() { return get_static_field<SCAPIX_META_STRING("GL_REFERENCED_BY_TESS_EVALUATION_SHADER"), jint>(); }
inline jint GLES32::GL_RESET_NOTIFICATION_STRATEGY_() { return get_static_field<SCAPIX_META_STRING("GL_RESET_NOTIFICATION_STRATEGY"), jint>(); }
inline jint GLES32::GL_SAMPLER_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLER"), jint>(); }
inline jint GLES32::GL_SAMPLER_2D_MULTISAMPLE_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLER_2D_MULTISAMPLE_ARRAY"), jint>(); }
inline jint GLES32::GL_SAMPLER_BUFFER_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLER_BUFFER"), jint>(); }
inline jint GLES32::GL_SAMPLER_CUBE_MAP_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLER_CUBE_MAP_ARRAY"), jint>(); }
inline jint GLES32::GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW"), jint>(); }
inline jint GLES32::GL_SAMPLE_SHADING_() { return get_static_field<SCAPIX_META_STRING("GL_SAMPLE_SHADING"), jint>(); }
inline jint GLES32::GL_SCREEN_() { return get_static_field<SCAPIX_META_STRING("GL_SCREEN"), jint>(); }
inline jint GLES32::GL_SHADER_() { return get_static_field<SCAPIX_META_STRING("GL_SHADER"), jint>(); }
inline jint GLES32::GL_SOFTLIGHT_() { return get_static_field<SCAPIX_META_STRING("GL_SOFTLIGHT"), jint>(); }
inline jint GLES32::GL_STACK_OVERFLOW_() { return get_static_field<SCAPIX_META_STRING("GL_STACK_OVERFLOW"), jint>(); }
inline jint GLES32::GL_STACK_UNDERFLOW_() { return get_static_field<SCAPIX_META_STRING("GL_STACK_UNDERFLOW"), jint>(); }
inline jint GLES32::GL_TESS_CONTROL_OUTPUT_VERTICES_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_CONTROL_OUTPUT_VERTICES"), jint>(); }
inline jint GLES32::GL_TESS_CONTROL_SHADER_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_CONTROL_SHADER"), jint>(); }
inline jint GLES32::GL_TESS_CONTROL_SHADER_BIT_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_CONTROL_SHADER_BIT"), jint>(); }
inline jint GLES32::GL_TESS_EVALUATION_SHADER_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_EVALUATION_SHADER"), jint>(); }
inline jint GLES32::GL_TESS_EVALUATION_SHADER_BIT_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_EVALUATION_SHADER_BIT"), jint>(); }
inline jint GLES32::GL_TESS_GEN_MODE_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_GEN_MODE"), jint>(); }
inline jint GLES32::GL_TESS_GEN_POINT_MODE_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_GEN_POINT_MODE"), jint>(); }
inline jint GLES32::GL_TESS_GEN_SPACING_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_GEN_SPACING"), jint>(); }
inline jint GLES32::GL_TESS_GEN_VERTEX_ORDER_() { return get_static_field<SCAPIX_META_STRING("GL_TESS_GEN_VERTEX_ORDER"), jint>(); }
inline jint GLES32::GL_TEXTURE_2D_MULTISAMPLE_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_2D_MULTISAMPLE_ARRAY"), jint>(); }
inline jint GLES32::GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY"), jint>(); }
inline jint GLES32::GL_TEXTURE_BINDING_BUFFER_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BINDING_BUFFER"), jint>(); }
inline jint GLES32::GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BINDING_CUBE_MAP_ARRAY"), jint>(); }
inline jint GLES32::GL_TEXTURE_BORDER_COLOR_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BORDER_COLOR"), jint>(); }
inline jint GLES32::GL_TEXTURE_BUFFER_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BUFFER"), jint>(); }
inline jint GLES32::GL_TEXTURE_BUFFER_BINDING_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BUFFER_BINDING"), jint>(); }
inline jint GLES32::GL_TEXTURE_BUFFER_DATA_STORE_BINDING_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BUFFER_DATA_STORE_BINDING"), jint>(); }
inline jint GLES32::GL_TEXTURE_BUFFER_OFFSET_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BUFFER_OFFSET"), jint>(); }
inline jint GLES32::GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT"), jint>(); }
inline jint GLES32::GL_TEXTURE_BUFFER_SIZE_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_BUFFER_SIZE"), jint>(); }
inline jint GLES32::GL_TEXTURE_CUBE_MAP_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_TEXTURE_CUBE_MAP_ARRAY"), jint>(); }
inline jint GLES32::GL_TRIANGLES_ADJACENCY_() { return get_static_field<SCAPIX_META_STRING("GL_TRIANGLES_ADJACENCY"), jint>(); }
inline jint GLES32::GL_TRIANGLE_STRIP_ADJACENCY_() { return get_static_field<SCAPIX_META_STRING("GL_TRIANGLE_STRIP_ADJACENCY"), jint>(); }
inline jint GLES32::GL_UNDEFINED_VERTEX_() { return get_static_field<SCAPIX_META_STRING("GL_UNDEFINED_VERTEX"), jint>(); }
inline jint GLES32::GL_UNKNOWN_CONTEXT_RESET_() { return get_static_field<SCAPIX_META_STRING("GL_UNKNOWN_CONTEXT_RESET"), jint>(); }
inline jint GLES32::GL_UNSIGNED_INT_IMAGE_BUFFER_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_INT_IMAGE_BUFFER"), jint>(); }
inline jint GLES32::GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY"), jint>(); }
inline jint GLES32::GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY"), jint>(); }
inline jint GLES32::GL_UNSIGNED_INT_SAMPLER_BUFFER_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_INT_SAMPLER_BUFFER"), jint>(); }
inline jint GLES32::GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY"), jint>(); }
inline jint GLES32::GL_VERTEX_ARRAY_() { return get_static_field<SCAPIX_META_STRING("GL_VERTEX_ARRAY"), jint>(); }
inline void GLES32::glBlendBarrier() { return call_static_method<SCAPIX_META_STRING("glBlendBarrier"), void>(); }
inline void GLES32::glCopyImageSubData(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jint p9, jint p10, jint p11, jint p12, jint p13, jint p14, jint p15) { return call_static_method<SCAPIX_META_STRING("glCopyImageSubData"), void>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15); }
inline void GLES32::glDebugMessageControl(jint p1, jint p2, jint p3, jint p4, ref<link::java::array<jint>> p5, jint p6, jboolean p7) { return call_static_method<SCAPIX_META_STRING("glDebugMessageControl"), void>(p1, p2, p3, p4, p5, p6, p7); }
inline void GLES32::glDebugMessageControl(jint p1, jint p2, jint p3, jint p4, ref<java::nio::IntBuffer> p5, jboolean p6) { return call_static_method<SCAPIX_META_STRING("glDebugMessageControl"), void>(p1, p2, p3, p4, p5, p6); }
inline void GLES32::glDebugMessageInsert(jint p1, jint p2, jint p3, jint p4, jint p5, ref<java::lang::String> p6) { return call_static_method<SCAPIX_META_STRING("glDebugMessageInsert"), void>(p1, p2, p3, p4, p5, p6); }
inline void GLES32::glDebugMessageCallback(ref<android::opengl::GLES32_DebugProc> p1) { return call_static_method<SCAPIX_META_STRING("glDebugMessageCallback"), void>(p1); }
inline jint GLES32::glGetDebugMessageLog(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4, ref<link::java::array<jint>> p5, jint p6, ref<link::java::array<jint>> p7, jint p8, ref<link::java::array<jint>> p9, jint p10, ref<link::java::array<jint>> p11, jint p12, ref<link::java::array<jbyte>> p13, jint p14) { return call_static_method<SCAPIX_META_STRING("glGetDebugMessageLog"), jint>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14); }
inline jint GLES32::glGetDebugMessageLog(jint p1, ref<java::nio::IntBuffer> p2, ref<java::nio::IntBuffer> p3, ref<java::nio::IntBuffer> p4, ref<java::nio::IntBuffer> p5, ref<java::nio::IntBuffer> p6, ref<java::nio::ByteBuffer> p7) { return call_static_method<SCAPIX_META_STRING("glGetDebugMessageLog"), jint>(p1, p2, p3, p4, p5, p6, p7); }
inline ref<link::java::array<java::lang::String>> GLES32::glGetDebugMessageLog(jint p1, ref<link::java::array<jint>> p2, jint p3, ref<link::java::array<jint>> p4, jint p5, ref<link::java::array<jint>> p6, jint p7, ref<link::java::array<jint>> p8, jint p9) { return call_static_method<SCAPIX_META_STRING("glGetDebugMessageLog"), ref<link::java::array<java::lang::String>>>(p1, p2, p3, p4, p5, p6, p7, p8, p9); }
inline ref<link::java::array<java::lang::String>> GLES32::glGetDebugMessageLog(jint p1, ref<java::nio::IntBuffer> p2, ref<java::nio::IntBuffer> p3, ref<java::nio::IntBuffer> p4, ref<java::nio::IntBuffer> p5) { return call_static_method<SCAPIX_META_STRING("glGetDebugMessageLog"), ref<link::java::array<java::lang::String>>>(p1, p2, p3, p4, p5); }
inline void GLES32::glPushDebugGroup(jint p1, jint p2, jint p3, ref<java::lang::String> p4) { return call_static_method<SCAPIX_META_STRING("glPushDebugGroup"), void>(p1, p2, p3, p4); }
inline void GLES32::glPopDebugGroup() { return call_static_method<SCAPIX_META_STRING("glPopDebugGroup"), void>(); }
inline void GLES32::glObjectLabel(jint p1, jint p2, jint p3, ref<java::lang::String> p4) { return call_static_method<SCAPIX_META_STRING("glObjectLabel"), void>(p1, p2, p3, p4); }
inline ref<java::lang::String> GLES32::glGetObjectLabel(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glGetObjectLabel"), ref<java::lang::String>>(p1, p2); }
inline void GLES32::glObjectPtrLabel(jlong p1, ref<java::lang::String> p2) { return call_static_method<SCAPIX_META_STRING("glObjectPtrLabel"), void>(p1, p2); }
inline ref<java::lang::String> GLES32::glGetObjectPtrLabel(jlong p1) { return call_static_method<SCAPIX_META_STRING("glGetObjectPtrLabel"), ref<java::lang::String>>(p1); }
inline jlong GLES32::glGetPointerv(jint p1) { return call_static_method<SCAPIX_META_STRING("glGetPointerv"), jlong>(p1); }
inline void GLES32::glEnablei(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glEnablei"), void>(p1, p2); }
inline void GLES32::glDisablei(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glDisablei"), void>(p1, p2); }
inline void GLES32::glBlendEquationi(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glBlendEquationi"), void>(p1, p2); }
inline void GLES32::glBlendEquationSeparatei(jint p1, jint p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glBlendEquationSeparatei"), void>(p1, p2, p3); }
inline void GLES32::glBlendFunci(jint p1, jint p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glBlendFunci"), void>(p1, p2, p3); }
inline void GLES32::glBlendFuncSeparatei(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_static_method<SCAPIX_META_STRING("glBlendFuncSeparatei"), void>(p1, p2, p3, p4, p5); }
inline void GLES32::glColorMaski(jint p1, jboolean p2, jboolean p3, jboolean p4, jboolean p5) { return call_static_method<SCAPIX_META_STRING("glColorMaski"), void>(p1, p2, p3, p4, p5); }
inline jboolean GLES32::glIsEnabledi(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glIsEnabledi"), jboolean>(p1, p2); }
inline void GLES32::glDrawElementsBaseVertex(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4, jint p5) { return call_static_method<SCAPIX_META_STRING("glDrawElementsBaseVertex"), void>(p1, p2, p3, p4, p5); }
inline void GLES32::glDrawRangeElementsBaseVertex(jint p1, jint p2, jint p3, jint p4, jint p5, ref<java::nio::Buffer> p6, jint p7) { return call_static_method<SCAPIX_META_STRING("glDrawRangeElementsBaseVertex"), void>(p1, p2, p3, p4, p5, p6, p7); }
inline void GLES32::glDrawElementsInstancedBaseVertex(jint p1, jint p2, jint p3, ref<java::nio::Buffer> p4, jint p5, jint p6) { return call_static_method<SCAPIX_META_STRING("glDrawElementsInstancedBaseVertex"), void>(p1, p2, p3, p4, p5, p6); }
inline void GLES32::glDrawElementsInstancedBaseVertex(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_static_method<SCAPIX_META_STRING("glDrawElementsInstancedBaseVertex"), void>(p1, p2, p3, p4, p5, p6); }
inline void GLES32::glFramebufferTexture(jint p1, jint p2, jint p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glFramebufferTexture"), void>(p1, p2, p3, p4); }
inline void GLES32::glPrimitiveBoundingBox(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6, jfloat p7, jfloat p8) { return call_static_method<SCAPIX_META_STRING("glPrimitiveBoundingBox"), void>(p1, p2, p3, p4, p5, p6, p7, p8); }
inline jint GLES32::glGetGraphicsResetStatus() { return call_static_method<SCAPIX_META_STRING("glGetGraphicsResetStatus"), jint>(); }
inline void GLES32::glReadnPixels(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, ref<java::nio::Buffer> p8) { return call_static_method<SCAPIX_META_STRING("glReadnPixels"), void>(p1, p2, p3, p4, p5, p6, p7, p8); }
inline void GLES32::glGetnUniformfv(jint p1, jint p2, jint p3, ref<link::java::array<jfloat>> p4, jint p5) { return call_static_method<SCAPIX_META_STRING("glGetnUniformfv"), void>(p1, p2, p3, p4, p5); }
inline void GLES32::glGetnUniformfv(jint p1, jint p2, jint p3, ref<java::nio::FloatBuffer> p4) { return call_static_method<SCAPIX_META_STRING("glGetnUniformfv"), void>(p1, p2, p3, p4); }
inline void GLES32::glGetnUniformiv(jint p1, jint p2, jint p3, ref<link::java::array<jint>> p4, jint p5) { return call_static_method<SCAPIX_META_STRING("glGetnUniformiv"), void>(p1, p2, p3, p4, p5); }
inline void GLES32::glGetnUniformiv(jint p1, jint p2, jint p3, ref<java::nio::IntBuffer> p4) { return call_static_method<SCAPIX_META_STRING("glGetnUniformiv"), void>(p1, p2, p3, p4); }
inline void GLES32::glGetnUniformuiv(jint p1, jint p2, jint p3, ref<link::java::array<jint>> p4, jint p5) { return call_static_method<SCAPIX_META_STRING("glGetnUniformuiv"), void>(p1, p2, p3, p4, p5); }
inline void GLES32::glGetnUniformuiv(jint p1, jint p2, jint p3, ref<java::nio::IntBuffer> p4) { return call_static_method<SCAPIX_META_STRING("glGetnUniformuiv"), void>(p1, p2, p3, p4); }
inline void GLES32::glMinSampleShading(jfloat p1) { return call_static_method<SCAPIX_META_STRING("glMinSampleShading"), void>(p1); }
inline void GLES32::glPatchParameteri(jint p1, jint p2) { return call_static_method<SCAPIX_META_STRING("glPatchParameteri"), void>(p1, p2); }
inline void GLES32::glTexParameterIiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glTexParameterIiv"), void>(p1, p2, p3, p4); }
inline void GLES32::glTexParameterIiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glTexParameterIiv"), void>(p1, p2, p3); }
inline void GLES32::glTexParameterIuiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glTexParameterIuiv"), void>(p1, p2, p3, p4); }
inline void GLES32::glTexParameterIuiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glTexParameterIuiv"), void>(p1, p2, p3); }
inline void GLES32::glGetTexParameterIiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetTexParameterIiv"), void>(p1, p2, p3, p4); }
inline void GLES32::glGetTexParameterIiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetTexParameterIiv"), void>(p1, p2, p3); }
inline void GLES32::glGetTexParameterIuiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetTexParameterIuiv"), void>(p1, p2, p3, p4); }
inline void GLES32::glGetTexParameterIuiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetTexParameterIuiv"), void>(p1, p2, p3); }
inline void GLES32::glSamplerParameterIiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glSamplerParameterIiv"), void>(p1, p2, p3, p4); }
inline void GLES32::glSamplerParameterIiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glSamplerParameterIiv"), void>(p1, p2, p3); }
inline void GLES32::glSamplerParameterIuiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glSamplerParameterIuiv"), void>(p1, p2, p3, p4); }
inline void GLES32::glSamplerParameterIuiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glSamplerParameterIuiv"), void>(p1, p2, p3); }
inline void GLES32::glGetSamplerParameterIiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetSamplerParameterIiv"), void>(p1, p2, p3, p4); }
inline void GLES32::glGetSamplerParameterIiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetSamplerParameterIiv"), void>(p1, p2, p3); }
inline void GLES32::glGetSamplerParameterIuiv(jint p1, jint p2, ref<link::java::array<jint>> p3, jint p4) { return call_static_method<SCAPIX_META_STRING("glGetSamplerParameterIuiv"), void>(p1, p2, p3, p4); }
inline void GLES32::glGetSamplerParameterIuiv(jint p1, jint p2, ref<java::nio::IntBuffer> p3) { return call_static_method<SCAPIX_META_STRING("glGetSamplerParameterIuiv"), void>(p1, p2, p3); }
inline void GLES32::glTexBuffer(jint p1, jint p2, jint p3) { return call_static_method<SCAPIX_META_STRING("glTexBuffer"), void>(p1, p2, p3); }
inline void GLES32::glTexBufferRange(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_static_method<SCAPIX_META_STRING("glTexBufferRange"), void>(p1, p2, p3, p4, p5); }
inline void GLES32::glTexStorage3DMultisample(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jboolean p7) { return call_static_method<SCAPIX_META_STRING("glTexStorage3DMultisample"), void>(p1, p2, p3, p4, p5, p6, p7); }

} // namespace android::opengl
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OPENGL_GLES32_H
