// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_OPENGL_ETC1UTIL_H
#define SCAPIX_ANDROID_OPENGL_ETC1UTIL_H

namespace scapix::java_api {

namespace android::opengl { class ETC1Util_ETC1Texture; }
namespace java::io { class InputStream; }
namespace java::io { class OutputStream; }
namespace java::nio { class Buffer; }

namespace android::opengl {

class ETC1Util : public object_base<SCAPIX_META_STRING("android/opengl/ETC1Util"),
	java::lang::Object>
{
public:

	using ETC1Texture = ETC1Util_ETC1Texture;

	static ref<ETC1Util> new_object();
	static void loadTexture(jint target, jint level, jint border, jint fallbackFormat, jint fallbackType, ref<java::io::InputStream> input);
	static void loadTexture(jint target, jint level, jint border, jint fallbackFormat, jint fallbackType, ref<android::opengl::ETC1Util_ETC1Texture> texture);
	static jboolean isETC1Supported();
	static ref<android::opengl::ETC1Util_ETC1Texture> createTexture(ref<java::io::InputStream> input);
	static ref<android::opengl::ETC1Util_ETC1Texture> compressTexture(ref<java::nio::Buffer> input, jint width, jint height, jint pixelSize, jint stride);
	static void writeTexture(ref<android::opengl::ETC1Util_ETC1Texture> texture, ref<java::io::OutputStream> output);

protected:

	ETC1Util(handle_type h) : base_(h) {}

};

} // namespace android::opengl
} // namespace scapix::java_api

#include <scapix/java_api/android/opengl/ETC1Util_ETC1Texture.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/nio/Buffer.h>

namespace scapix::java_api {
namespace android::opengl {

inline ref<ETC1Util> ETC1Util::new_object() { return base_::new_object(); }
inline void ETC1Util::loadTexture(jint target, jint level, jint border, jint fallbackFormat, jint fallbackType, ref<java::io::InputStream> input) { return call_static_method<SCAPIX_META_STRING("loadTexture"), void>(target, level, border, fallbackFormat, fallbackType, input); }
inline void ETC1Util::loadTexture(jint target, jint level, jint border, jint fallbackFormat, jint fallbackType, ref<android::opengl::ETC1Util_ETC1Texture> texture) { return call_static_method<SCAPIX_META_STRING("loadTexture"), void>(target, level, border, fallbackFormat, fallbackType, texture); }
inline jboolean ETC1Util::isETC1Supported() { return call_static_method<SCAPIX_META_STRING("isETC1Supported"), jboolean>(); }
inline ref<android::opengl::ETC1Util_ETC1Texture> ETC1Util::createTexture(ref<java::io::InputStream> input) { return call_static_method<SCAPIX_META_STRING("createTexture"), ref<android::opengl::ETC1Util_ETC1Texture>>(input); }
inline ref<android::opengl::ETC1Util_ETC1Texture> ETC1Util::compressTexture(ref<java::nio::Buffer> input, jint width, jint height, jint pixelSize, jint stride) { return call_static_method<SCAPIX_META_STRING("compressTexture"), ref<android::opengl::ETC1Util_ETC1Texture>>(input, width, height, pixelSize, stride); }
inline void ETC1Util::writeTexture(ref<android::opengl::ETC1Util_ETC1Texture> texture, ref<java::io::OutputStream> output) { return call_static_method<SCAPIX_META_STRING("writeTexture"), void>(texture, output); }

} // namespace android::opengl
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_OPENGL_ETC1UTIL_H
