// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_MTP_MTPDEVICE_H
#define SCAPIX_ANDROID_MTP_MTPDEVICE_H

namespace scapix::java_api {

namespace android::hardware::usb { class UsbDevice; }
namespace android::hardware::usb { class UsbDeviceConnection; }
namespace android::mtp { class MtpDeviceInfo; }
namespace android::mtp { class MtpEvent; }
namespace android::mtp { class MtpObjectInfo; }
namespace android::mtp { class MtpStorageInfo; }
namespace android::os { class CancellationSignal; }
namespace android::os { class ParcelFileDescriptor; }
namespace java::lang { class String; }

namespace android::mtp {

class MtpDevice : public object_base<SCAPIX_META_STRING("android/mtp/MtpDevice"),
	java::lang::Object>
{
public:

	static ref<MtpDevice> new_object(ref<android::hardware::usb::UsbDevice> device);
	jboolean open(ref<android::hardware::usb::UsbDeviceConnection> connection);
	void close();
	ref<java::lang::String> getDeviceName();
	jint getDeviceId();
	ref<java::lang::String> toString();
	ref<android::mtp::MtpDeviceInfo> getDeviceInfo();
	ref<link::java::array<jint>> getStorageIds();
	ref<link::java::array<jint>> getObjectHandles(jint storageId, jint format, jint objectHandle);
	ref<link::java::array<jbyte>> getObject(jint objectHandle, jint objectSize);
	jlong getPartialObject(jint objectHandle, jlong offset, jlong p3, ref<link::java::array<jbyte>> size);
	jlong getPartialObject64(jint objectHandle, jlong offset, jlong p3, ref<link::java::array<jbyte>> size);
	ref<link::java::array<jbyte>> getThumbnail(jint objectHandle);
	ref<android::mtp::MtpStorageInfo> getStorageInfo(jint storageId);
	ref<android::mtp::MtpObjectInfo> getObjectInfo(jint objectHandle);
	jboolean deleteObject(jint objectHandle);
	jlong getParent(jint objectHandle);
	jlong getStorageId(jint objectHandle);
	jboolean importFile(jint objectHandle, ref<java::lang::String> destPath);
	jboolean importFile(jint objectHandle, ref<android::os::ParcelFileDescriptor> descriptor);
	jboolean sendObject(jint objectHandle, jlong size, ref<android::os::ParcelFileDescriptor> p3);
	ref<android::mtp::MtpObjectInfo> sendObjectInfo(ref<android::mtp::MtpObjectInfo> info);
	ref<android::mtp::MtpEvent> readEvent(ref<android::os::CancellationSignal> signal);

protected:

	MtpDevice(handle_type h) : base_(h) {}

};

} // namespace android::mtp
} // namespace scapix::java_api

#include <scapix/java_api/android/hardware/usb/UsbDevice.h>
#include <scapix/java_api/android/hardware/usb/UsbDeviceConnection.h>
#include <scapix/java_api/android/mtp/MtpDeviceInfo.h>
#include <scapix/java_api/android/mtp/MtpEvent.h>
#include <scapix/java_api/android/mtp/MtpObjectInfo.h>
#include <scapix/java_api/android/mtp/MtpStorageInfo.h>
#include <scapix/java_api/android/os/CancellationSignal.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::mtp {

inline ref<MtpDevice> MtpDevice::new_object(ref<android::hardware::usb::UsbDevice> device) { return base_::new_object(device); }
inline jboolean MtpDevice::open(ref<android::hardware::usb::UsbDeviceConnection> connection) { return call_method<SCAPIX_META_STRING("open"), jboolean>(connection); }
inline void MtpDevice::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline ref<java::lang::String> MtpDevice::getDeviceName() { return call_method<SCAPIX_META_STRING("getDeviceName"), ref<java::lang::String>>(); }
inline jint MtpDevice::getDeviceId() { return call_method<SCAPIX_META_STRING("getDeviceId"), jint>(); }
inline ref<java::lang::String> MtpDevice::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<android::mtp::MtpDeviceInfo> MtpDevice::getDeviceInfo() { return call_method<SCAPIX_META_STRING("getDeviceInfo"), ref<android::mtp::MtpDeviceInfo>>(); }
inline ref<link::java::array<jint>> MtpDevice::getStorageIds() { return call_method<SCAPIX_META_STRING("getStorageIds"), ref<link::java::array<jint>>>(); }
inline ref<link::java::array<jint>> MtpDevice::getObjectHandles(jint storageId, jint format, jint objectHandle) { return call_method<SCAPIX_META_STRING("getObjectHandles"), ref<link::java::array<jint>>>(storageId, format, objectHandle); }
inline ref<link::java::array<jbyte>> MtpDevice::getObject(jint objectHandle, jint objectSize) { return call_method<SCAPIX_META_STRING("getObject"), ref<link::java::array<jbyte>>>(objectHandle, objectSize); }
inline jlong MtpDevice::getPartialObject(jint objectHandle, jlong offset, jlong p3, ref<link::java::array<jbyte>> size) { return call_method<SCAPIX_META_STRING("getPartialObject"), jlong>(objectHandle, offset, p3, size); }
inline jlong MtpDevice::getPartialObject64(jint objectHandle, jlong offset, jlong p3, ref<link::java::array<jbyte>> size) { return call_method<SCAPIX_META_STRING("getPartialObject64"), jlong>(objectHandle, offset, p3, size); }
inline ref<link::java::array<jbyte>> MtpDevice::getThumbnail(jint objectHandle) { return call_method<SCAPIX_META_STRING("getThumbnail"), ref<link::java::array<jbyte>>>(objectHandle); }
inline ref<android::mtp::MtpStorageInfo> MtpDevice::getStorageInfo(jint storageId) { return call_method<SCAPIX_META_STRING("getStorageInfo"), ref<android::mtp::MtpStorageInfo>>(storageId); }
inline ref<android::mtp::MtpObjectInfo> MtpDevice::getObjectInfo(jint objectHandle) { return call_method<SCAPIX_META_STRING("getObjectInfo"), ref<android::mtp::MtpObjectInfo>>(objectHandle); }
inline jboolean MtpDevice::deleteObject(jint objectHandle) { return call_method<SCAPIX_META_STRING("deleteObject"), jboolean>(objectHandle); }
inline jlong MtpDevice::getParent(jint objectHandle) { return call_method<SCAPIX_META_STRING("getParent"), jlong>(objectHandle); }
inline jlong MtpDevice::getStorageId(jint objectHandle) { return call_method<SCAPIX_META_STRING("getStorageId"), jlong>(objectHandle); }
inline jboolean MtpDevice::importFile(jint objectHandle, ref<java::lang::String> destPath) { return call_method<SCAPIX_META_STRING("importFile"), jboolean>(objectHandle, destPath); }
inline jboolean MtpDevice::importFile(jint objectHandle, ref<android::os::ParcelFileDescriptor> descriptor) { return call_method<SCAPIX_META_STRING("importFile"), jboolean>(objectHandle, descriptor); }
inline jboolean MtpDevice::sendObject(jint objectHandle, jlong size, ref<android::os::ParcelFileDescriptor> p3) { return call_method<SCAPIX_META_STRING("sendObject"), jboolean>(objectHandle, size, p3); }
inline ref<android::mtp::MtpObjectInfo> MtpDevice::sendObjectInfo(ref<android::mtp::MtpObjectInfo> info) { return call_method<SCAPIX_META_STRING("sendObjectInfo"), ref<android::mtp::MtpObjectInfo>>(info); }
inline ref<android::mtp::MtpEvent> MtpDevice::readEvent(ref<android::os::CancellationSignal> signal) { return call_method<SCAPIX_META_STRING("readEvent"), ref<android::mtp::MtpEvent>>(signal); }

} // namespace android::mtp
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MTP_MTPDEVICE_H
