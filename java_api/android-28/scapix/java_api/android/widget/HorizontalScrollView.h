// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/widget/FrameLayout.h>

#ifndef SCAPIX_ANDROID_WIDGET_HORIZONTALSCROLLVIEW_H
#define SCAPIX_ANDROID_WIDGET_HORIZONTALSCROLLVIEW_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::graphics { class Canvas; }
namespace android::graphics { class Rect; }
namespace android::util { class AttributeSet; }
namespace android::view { class KeyEvent; }
namespace android::view { class MotionEvent; }
namespace android::view { class View; }
namespace android::view { class ViewGroup_LayoutParams; }
namespace java::lang { class CharSequence; }

namespace android::widget {

class HorizontalScrollView : public object_base<SCAPIX_META_STRING("android/widget/HorizontalScrollView"),
	android::widget::FrameLayout>
{
public:

	static ref<HorizontalScrollView> new_object(ref<android::content::Context> context);
	static ref<HorizontalScrollView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<HorizontalScrollView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<HorizontalScrollView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	jint getMaxScrollAmount();
	void addView(ref<android::view::View> child);
	void addView(ref<android::view::View> child, jint index);
	void addView(ref<android::view::View> child, ref<android::view::ViewGroup_LayoutParams> params);
	void addView(ref<android::view::View> child, jint index, ref<android::view::ViewGroup_LayoutParams> params);
	jboolean isFillViewport();
	void setFillViewport(jboolean fillViewport);
	jboolean isSmoothScrollingEnabled();
	void setSmoothScrollingEnabled(jboolean smoothScrollingEnabled);
	jboolean dispatchKeyEvent(ref<android::view::KeyEvent> event);
	jboolean executeKeyEvent(ref<android::view::KeyEvent> event);
	void requestDisallowInterceptTouchEvent(jboolean disallowIntercept);
	jboolean onInterceptTouchEvent(ref<android::view::MotionEvent> ev);
	jboolean onTouchEvent(ref<android::view::MotionEvent> ev);
	jboolean onGenericMotionEvent(ref<android::view::MotionEvent> event);
	jboolean shouldDelayChildPressedState();
	ref<java::lang::CharSequence> getAccessibilityClassName();
	jboolean pageScroll(jint direction);
	jboolean fullScroll(jint direction);
	jboolean arrowScroll(jint direction);
	void smoothScrollBy(jint dx, jint dy);
	void smoothScrollTo(jint x, jint y);
	void computeScroll();
	void requestChildFocus(ref<android::view::View> child, ref<android::view::View> focused);
	jboolean requestChildRectangleOnScreen(ref<android::view::View> child, ref<android::graphics::Rect> rectangle, jboolean immediate);
	void requestLayout();
	void fling(jint velocityX);
	void scrollTo(jint x, jint y);
	void setOverScrollMode(jint mode);
	void draw(ref<android::graphics::Canvas> canvas);

protected:

	HorizontalScrollView(handle_type h) : base_(h) {}

};

} // namespace android::widget
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup_LayoutParams.h>
#include <scapix/java_api/java/lang/CharSequence.h>

namespace scapix::java_api {
namespace android::widget {

inline ref<HorizontalScrollView> HorizontalScrollView::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<HorizontalScrollView> HorizontalScrollView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<HorizontalScrollView> HorizontalScrollView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<HorizontalScrollView> HorizontalScrollView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline jint HorizontalScrollView::getMaxScrollAmount() { return call_method<SCAPIX_META_STRING("getMaxScrollAmount"), jint>(); }
inline void HorizontalScrollView::addView(ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("addView"), void>(child); }
inline void HorizontalScrollView::addView(ref<android::view::View> child, jint index) { return call_method<SCAPIX_META_STRING("addView"), void>(child, index); }
inline void HorizontalScrollView::addView(ref<android::view::View> child, ref<android::view::ViewGroup_LayoutParams> params) { return call_method<SCAPIX_META_STRING("addView"), void>(child, params); }
inline void HorizontalScrollView::addView(ref<android::view::View> child, jint index, ref<android::view::ViewGroup_LayoutParams> params) { return call_method<SCAPIX_META_STRING("addView"), void>(child, index, params); }
inline jboolean HorizontalScrollView::isFillViewport() { return call_method<SCAPIX_META_STRING("isFillViewport"), jboolean>(); }
inline void HorizontalScrollView::setFillViewport(jboolean fillViewport) { return call_method<SCAPIX_META_STRING("setFillViewport"), void>(fillViewport); }
inline jboolean HorizontalScrollView::isSmoothScrollingEnabled() { return call_method<SCAPIX_META_STRING("isSmoothScrollingEnabled"), jboolean>(); }
inline void HorizontalScrollView::setSmoothScrollingEnabled(jboolean smoothScrollingEnabled) { return call_method<SCAPIX_META_STRING("setSmoothScrollingEnabled"), void>(smoothScrollingEnabled); }
inline jboolean HorizontalScrollView::dispatchKeyEvent(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("dispatchKeyEvent"), jboolean>(event); }
inline jboolean HorizontalScrollView::executeKeyEvent(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("executeKeyEvent"), jboolean>(event); }
inline void HorizontalScrollView::requestDisallowInterceptTouchEvent(jboolean disallowIntercept) { return call_method<SCAPIX_META_STRING("requestDisallowInterceptTouchEvent"), void>(disallowIntercept); }
inline jboolean HorizontalScrollView::onInterceptTouchEvent(ref<android::view::MotionEvent> ev) { return call_method<SCAPIX_META_STRING("onInterceptTouchEvent"), jboolean>(ev); }
inline jboolean HorizontalScrollView::onTouchEvent(ref<android::view::MotionEvent> ev) { return call_method<SCAPIX_META_STRING("onTouchEvent"), jboolean>(ev); }
inline jboolean HorizontalScrollView::onGenericMotionEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onGenericMotionEvent"), jboolean>(event); }
inline jboolean HorizontalScrollView::shouldDelayChildPressedState() { return call_method<SCAPIX_META_STRING("shouldDelayChildPressedState"), jboolean>(); }
inline ref<java::lang::CharSequence> HorizontalScrollView::getAccessibilityClassName() { return call_method<SCAPIX_META_STRING("getAccessibilityClassName"), ref<java::lang::CharSequence>>(); }
inline jboolean HorizontalScrollView::pageScroll(jint direction) { return call_method<SCAPIX_META_STRING("pageScroll"), jboolean>(direction); }
inline jboolean HorizontalScrollView::fullScroll(jint direction) { return call_method<SCAPIX_META_STRING("fullScroll"), jboolean>(direction); }
inline jboolean HorizontalScrollView::arrowScroll(jint direction) { return call_method<SCAPIX_META_STRING("arrowScroll"), jboolean>(direction); }
inline void HorizontalScrollView::smoothScrollBy(jint dx, jint dy) { return call_method<SCAPIX_META_STRING("smoothScrollBy"), void>(dx, dy); }
inline void HorizontalScrollView::smoothScrollTo(jint x, jint y) { return call_method<SCAPIX_META_STRING("smoothScrollTo"), void>(x, y); }
inline void HorizontalScrollView::computeScroll() { return call_method<SCAPIX_META_STRING("computeScroll"), void>(); }
inline void HorizontalScrollView::requestChildFocus(ref<android::view::View> child, ref<android::view::View> focused) { return call_method<SCAPIX_META_STRING("requestChildFocus"), void>(child, focused); }
inline jboolean HorizontalScrollView::requestChildRectangleOnScreen(ref<android::view::View> child, ref<android::graphics::Rect> rectangle, jboolean immediate) { return call_method<SCAPIX_META_STRING("requestChildRectangleOnScreen"), jboolean>(child, rectangle, immediate); }
inline void HorizontalScrollView::requestLayout() { return call_method<SCAPIX_META_STRING("requestLayout"), void>(); }
inline void HorizontalScrollView::fling(jint velocityX) { return call_method<SCAPIX_META_STRING("fling"), void>(velocityX); }
inline void HorizontalScrollView::scrollTo(jint x, jint y) { return call_method<SCAPIX_META_STRING("scrollTo"), void>(x, y); }
inline void HorizontalScrollView::setOverScrollMode(jint mode) { return call_method<SCAPIX_META_STRING("setOverScrollMode"), void>(mode); }
inline void HorizontalScrollView::draw(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("draw"), void>(canvas); }

} // namespace android::widget
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WIDGET_HORIZONTALSCROLLVIEW_H
