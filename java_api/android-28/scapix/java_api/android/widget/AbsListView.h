// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/widget/AdapterView.h>
#include <scapix/java_api/android/text/TextWatcher.h>
#include <scapix/java_api/android/view/ViewTreeObserver_OnGlobalLayoutListener.h>
#include <scapix/java_api/android/widget/Filter_FilterListener.h>
#include <scapix/java_api/android/view/ViewTreeObserver_OnTouchModeChangeListener.h>

#ifndef SCAPIX_ANDROID_WIDGET_ABSLISTVIEW_H
#define SCAPIX_ANDROID_WIDGET_ABSLISTVIEW_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content { class Intent; }
namespace android::graphics { class Canvas; }
namespace android::graphics { class Rect; }
namespace android::graphics::drawable { class Drawable; }
namespace android::os { class Parcelable; }
namespace android::text { class Editable; }
namespace android::util { class AttributeSet; }
namespace android::util { class SparseBooleanArray; }
namespace android::view { class KeyEvent; }
namespace android::view { class MotionEvent; }
namespace android::view { class PointerIcon; }
namespace android::view { class View; }
namespace android::view::accessibility { class AccessibilityEvent; }
namespace android::view::accessibility { class AccessibilityNodeInfo; }
namespace android::view::inputmethod { class EditorInfo; }
namespace android::view::inputmethod { class InputConnection; }
namespace android::widget { class AbsListView_LayoutParams; }
namespace android::widget { class AbsListView_MultiChoiceModeListener; }
namespace android::widget { class AbsListView_OnScrollListener; }
namespace android::widget { class AbsListView_RecyclerListener; }
namespace android::widget { class ListAdapter; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::util { class ArrayList; }
namespace java::util { class List; }
namespace android::widget { class AbsListView_SelectionBoundsAdjuster; }

namespace android::widget {

class AbsListView : public object_base<SCAPIX_META_STRING("android/widget/AbsListView"),
	android::widget::AdapterView,
	android::text::TextWatcher,
	android::view::ViewTreeObserver_OnGlobalLayoutListener,
	android::widget::Filter_FilterListener,
	android::view::ViewTreeObserver_OnTouchModeChangeListener>
{
public:

	using SelectionBoundsAdjuster = AbsListView_SelectionBoundsAdjuster;
	using RecyclerListener = AbsListView_RecyclerListener;
	using OnScrollListener = AbsListView_OnScrollListener;
	using MultiChoiceModeListener = AbsListView_MultiChoiceModeListener;
	using LayoutParams = AbsListView_LayoutParams;

	static jint CHOICE_MODE_MULTIPLE_();
	static jint CHOICE_MODE_MULTIPLE_MODAL_();
	static jint CHOICE_MODE_NONE_();
	static jint CHOICE_MODE_SINGLE_();
	static jint TRANSCRIPT_MODE_ALWAYS_SCROLL_();
	static jint TRANSCRIPT_MODE_DISABLED_();
	static jint TRANSCRIPT_MODE_NORMAL_();

	static ref<AbsListView> new_object(ref<android::content::Context> context);
	static ref<AbsListView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<AbsListView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<AbsListView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	void setOverScrollMode(jint mode);
	void setAdapter(ref<android::widget::ListAdapter> adapter);
	jint getCheckedItemCount();
	jboolean isItemChecked(jint position);
	jint getCheckedItemPosition();
	ref<android::util::SparseBooleanArray> getCheckedItemPositions();
	ref<link::java::array<jlong>> getCheckedItemIds();
	void clearChoices();
	void setItemChecked(jint position, jboolean value);
	jboolean performItemClick(ref<android::view::View> view, jint position, jlong id);
	jint getChoiceMode();
	void setChoiceMode(jint choiceMode);
	void setMultiChoiceModeListener(ref<android::widget::AbsListView_MultiChoiceModeListener> listener);
	void setFastScrollEnabled(jboolean enabled);
	void setFastScrollStyle(jint styleResId);
	void setFastScrollAlwaysVisible(jboolean alwaysShow);
	jboolean isFastScrollAlwaysVisible();
	jint getVerticalScrollbarWidth();
	jboolean isFastScrollEnabled();
	void setVerticalScrollbarPosition(jint position);
	void setScrollBarStyle(jint style);
	void setSmoothScrollbarEnabled(jboolean enabled);
	jboolean isSmoothScrollbarEnabled();
	void setOnScrollListener(ref<android::widget::AbsListView_OnScrollListener> l);
	void sendAccessibilityEventUnchecked(ref<android::view::accessibility::AccessibilityEvent> event);
	ref<java::lang::CharSequence> getAccessibilityClassName();
	jboolean isScrollingCacheEnabled();
	void setScrollingCacheEnabled(jboolean enabled);
	void setTextFilterEnabled(jboolean textFilterEnabled);
	jboolean isTextFilterEnabled();
	void getFocusedRect(ref<android::graphics::Rect> r);
	jboolean isStackFromBottom();
	void setStackFromBottom(jboolean stackFromBottom);
	ref<android::os::Parcelable> onSaveInstanceState();
	void onRestoreInstanceState(ref<android::os::Parcelable> state);
	void setFilterText(ref<java::lang::String> filterText);
	ref<java::lang::CharSequence> getTextFilter();
	void requestLayout();
	ref<android::view::View> getSelectedView();
	jint getListPaddingTop();
	jint getListPaddingBottom();
	jint getListPaddingLeft();
	jint getListPaddingRight();
	void onInitializeAccessibilityNodeInfoForItem(ref<android::view::View> view, jint position, ref<android::view::accessibility::AccessibilityNodeInfo> info);
	void setDrawSelectorOnTop(jboolean onTop);
	void setSelector(jint resID);
	void setSelector(ref<android::graphics::drawable::Drawable> sel);
	ref<android::graphics::drawable::Drawable> getSelector();
	void setScrollIndicators(ref<android::view::View> up, ref<android::view::View> down);
	jboolean verifyDrawable(ref<android::graphics::drawable::Drawable> dr);
	void jumpDrawablesToCurrentState();
	void onWindowFocusChanged(jboolean hasWindowFocus);
	void onRtlPropertiesChanged(jint layoutDirection);
	void onCancelPendingInputEvents();
	jboolean showContextMenu();
	jboolean showContextMenu(jfloat x, jfloat y);
	jboolean showContextMenuForChild(ref<android::view::View> originalView);
	jboolean showContextMenuForChild(ref<android::view::View> originalView, jfloat x, jfloat y);
	jboolean onKeyDown(jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onKeyUp(jint keyCode, ref<android::view::KeyEvent> event);
	void dispatchDrawableHotspotChanged(jfloat x, jfloat y);
	jint pointToPosition(jint x, jint y);
	jlong pointToRowId(jint x, jint y);
	void onTouchModeChanged(jboolean isInTouchMode);
	jboolean onTouchEvent(ref<android::view::MotionEvent> ev);
	jboolean onGenericMotionEvent(ref<android::view::MotionEvent> event);
	void fling(jint velocityY);
	jboolean onStartNestedScroll(ref<android::view::View> child, ref<android::view::View> target, jint nestedScrollAxes);
	void onNestedScrollAccepted(ref<android::view::View> child, ref<android::view::View> target, jint axes);
	void onNestedScroll(ref<android::view::View> target, jint dxConsumed, jint dyConsumed, jint dxUnconsumed, jint dyUnconsumed);
	jboolean onNestedFling(ref<android::view::View> target, jfloat velocityX, jfloat velocityY, jboolean consumed);
	void draw(ref<android::graphics::Canvas> canvas);
	void requestDisallowInterceptTouchEvent(jboolean disallowIntercept);
	jboolean onInterceptHoverEvent(ref<android::view::MotionEvent> event);
	ref<android::view::PointerIcon> onResolvePointerIcon(ref<android::view::MotionEvent> event, jint pointerIndex);
	jboolean onInterceptTouchEvent(ref<android::view::MotionEvent> ev);
	void addTouchables(ref<java::util::ArrayList> views);
	void setFriction(jfloat friction);
	void setVelocityScale(jfloat scale);
	void smoothScrollToPosition(jint position);
	void smoothScrollToPositionFromTop(jint position, jint offset, jint duration);
	void smoothScrollToPositionFromTop(jint position, jint offset);
	void smoothScrollToPosition(jint position, jint boundPosition);
	void smoothScrollBy(jint distance, jint duration);
	void scrollListBy(jint y);
	jboolean canScrollList(jint direction);
	void invalidateViews();
	ref<android::view::inputmethod::InputConnection> onCreateInputConnection(ref<android::view::inputmethod::EditorInfo> outAttrs);
	jboolean checkInputConnectionProxy(ref<android::view::View> view);
	void clearTextFilter();
	jboolean hasTextFilter();
	void onGlobalLayout();
	void beforeTextChanged(ref<java::lang::CharSequence> s, jint start, jint count, jint after);
	void onTextChanged(ref<java::lang::CharSequence> s, jint start, jint before, jint count);
	void afterTextChanged(ref<android::text::Editable> s);
	void onFilterComplete(jint count);
	ref<android::widget::AbsListView_LayoutParams> generateLayoutParams(ref<android::util::AttributeSet> attrs);
	void setTranscriptMode(jint mode);
	jint getTranscriptMode();
	jint getSolidColor();
	void setCacheColorHint(jint color);
	jint getCacheColorHint();
	void reclaimViews(ref<java::util::List> views);
	void setRemoteViewsAdapter(ref<android::content::Intent> intent);
	void deferNotifyDataSetChanged();
	jboolean onRemoteAdapterConnected();
	void onRemoteAdapterDisconnected();
	void setRecyclerListener(ref<android::widget::AbsListView_RecyclerListener> listener);
	void setSelectionFromTop(jint position, jint y);

protected:

	AbsListView(handle_type h) : base_(h) {}

};

} // namespace android::widget
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/android/text/Editable.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/util/SparseBooleanArray.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/PointerIcon.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo.h>
#include <scapix/java_api/android/view/inputmethod/EditorInfo.h>
#include <scapix/java_api/android/view/inputmethod/InputConnection.h>
#include <scapix/java_api/android/widget/AbsListView_LayoutParams.h>
#include <scapix/java_api/android/widget/AbsListView_MultiChoiceModeListener.h>
#include <scapix/java_api/android/widget/AbsListView_OnScrollListener.h>
#include <scapix/java_api/android/widget/AbsListView_RecyclerListener.h>
#include <scapix/java_api/android/widget/ListAdapter.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/ArrayList.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::widget {

inline jint AbsListView::CHOICE_MODE_MULTIPLE_() { return get_static_field<SCAPIX_META_STRING("CHOICE_MODE_MULTIPLE"), jint>(); }
inline jint AbsListView::CHOICE_MODE_MULTIPLE_MODAL_() { return get_static_field<SCAPIX_META_STRING("CHOICE_MODE_MULTIPLE_MODAL"), jint>(); }
inline jint AbsListView::CHOICE_MODE_NONE_() { return get_static_field<SCAPIX_META_STRING("CHOICE_MODE_NONE"), jint>(); }
inline jint AbsListView::CHOICE_MODE_SINGLE_() { return get_static_field<SCAPIX_META_STRING("CHOICE_MODE_SINGLE"), jint>(); }
inline jint AbsListView::TRANSCRIPT_MODE_ALWAYS_SCROLL_() { return get_static_field<SCAPIX_META_STRING("TRANSCRIPT_MODE_ALWAYS_SCROLL"), jint>(); }
inline jint AbsListView::TRANSCRIPT_MODE_DISABLED_() { return get_static_field<SCAPIX_META_STRING("TRANSCRIPT_MODE_DISABLED"), jint>(); }
inline jint AbsListView::TRANSCRIPT_MODE_NORMAL_() { return get_static_field<SCAPIX_META_STRING("TRANSCRIPT_MODE_NORMAL"), jint>(); }
inline ref<AbsListView> AbsListView::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<AbsListView> AbsListView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<AbsListView> AbsListView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<AbsListView> AbsListView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline void AbsListView::setOverScrollMode(jint mode) { return call_method<SCAPIX_META_STRING("setOverScrollMode"), void>(mode); }
inline void AbsListView::setAdapter(ref<android::widget::ListAdapter> adapter) { return call_method<SCAPIX_META_STRING("setAdapter"), void>(adapter); }
inline jint AbsListView::getCheckedItemCount() { return call_method<SCAPIX_META_STRING("getCheckedItemCount"), jint>(); }
inline jboolean AbsListView::isItemChecked(jint position) { return call_method<SCAPIX_META_STRING("isItemChecked"), jboolean>(position); }
inline jint AbsListView::getCheckedItemPosition() { return call_method<SCAPIX_META_STRING("getCheckedItemPosition"), jint>(); }
inline ref<android::util::SparseBooleanArray> AbsListView::getCheckedItemPositions() { return call_method<SCAPIX_META_STRING("getCheckedItemPositions"), ref<android::util::SparseBooleanArray>>(); }
inline ref<link::java::array<jlong>> AbsListView::getCheckedItemIds() { return call_method<SCAPIX_META_STRING("getCheckedItemIds"), ref<link::java::array<jlong>>>(); }
inline void AbsListView::clearChoices() { return call_method<SCAPIX_META_STRING("clearChoices"), void>(); }
inline void AbsListView::setItemChecked(jint position, jboolean value) { return call_method<SCAPIX_META_STRING("setItemChecked"), void>(position, value); }
inline jboolean AbsListView::performItemClick(ref<android::view::View> view, jint position, jlong id) { return call_method<SCAPIX_META_STRING("performItemClick"), jboolean>(view, position, id); }
inline jint AbsListView::getChoiceMode() { return call_method<SCAPIX_META_STRING("getChoiceMode"), jint>(); }
inline void AbsListView::setChoiceMode(jint choiceMode) { return call_method<SCAPIX_META_STRING("setChoiceMode"), void>(choiceMode); }
inline void AbsListView::setMultiChoiceModeListener(ref<android::widget::AbsListView_MultiChoiceModeListener> listener) { return call_method<SCAPIX_META_STRING("setMultiChoiceModeListener"), void>(listener); }
inline void AbsListView::setFastScrollEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setFastScrollEnabled"), void>(enabled); }
inline void AbsListView::setFastScrollStyle(jint styleResId) { return call_method<SCAPIX_META_STRING("setFastScrollStyle"), void>(styleResId); }
inline void AbsListView::setFastScrollAlwaysVisible(jboolean alwaysShow) { return call_method<SCAPIX_META_STRING("setFastScrollAlwaysVisible"), void>(alwaysShow); }
inline jboolean AbsListView::isFastScrollAlwaysVisible() { return call_method<SCAPIX_META_STRING("isFastScrollAlwaysVisible"), jboolean>(); }
inline jint AbsListView::getVerticalScrollbarWidth() { return call_method<SCAPIX_META_STRING("getVerticalScrollbarWidth"), jint>(); }
inline jboolean AbsListView::isFastScrollEnabled() { return call_method<SCAPIX_META_STRING("isFastScrollEnabled"), jboolean>(); }
inline void AbsListView::setVerticalScrollbarPosition(jint position) { return call_method<SCAPIX_META_STRING("setVerticalScrollbarPosition"), void>(position); }
inline void AbsListView::setScrollBarStyle(jint style) { return call_method<SCAPIX_META_STRING("setScrollBarStyle"), void>(style); }
inline void AbsListView::setSmoothScrollbarEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setSmoothScrollbarEnabled"), void>(enabled); }
inline jboolean AbsListView::isSmoothScrollbarEnabled() { return call_method<SCAPIX_META_STRING("isSmoothScrollbarEnabled"), jboolean>(); }
inline void AbsListView::setOnScrollListener(ref<android::widget::AbsListView_OnScrollListener> l) { return call_method<SCAPIX_META_STRING("setOnScrollListener"), void>(l); }
inline void AbsListView::sendAccessibilityEventUnchecked(ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<SCAPIX_META_STRING("sendAccessibilityEventUnchecked"), void>(event); }
inline ref<java::lang::CharSequence> AbsListView::getAccessibilityClassName() { return call_method<SCAPIX_META_STRING("getAccessibilityClassName"), ref<java::lang::CharSequence>>(); }
inline jboolean AbsListView::isScrollingCacheEnabled() { return call_method<SCAPIX_META_STRING("isScrollingCacheEnabled"), jboolean>(); }
inline void AbsListView::setScrollingCacheEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setScrollingCacheEnabled"), void>(enabled); }
inline void AbsListView::setTextFilterEnabled(jboolean textFilterEnabled) { return call_method<SCAPIX_META_STRING("setTextFilterEnabled"), void>(textFilterEnabled); }
inline jboolean AbsListView::isTextFilterEnabled() { return call_method<SCAPIX_META_STRING("isTextFilterEnabled"), jboolean>(); }
inline void AbsListView::getFocusedRect(ref<android::graphics::Rect> r) { return call_method<SCAPIX_META_STRING("getFocusedRect"), void>(r); }
inline jboolean AbsListView::isStackFromBottom() { return call_method<SCAPIX_META_STRING("isStackFromBottom"), jboolean>(); }
inline void AbsListView::setStackFromBottom(jboolean stackFromBottom) { return call_method<SCAPIX_META_STRING("setStackFromBottom"), void>(stackFromBottom); }
inline ref<android::os::Parcelable> AbsListView::onSaveInstanceState() { return call_method<SCAPIX_META_STRING("onSaveInstanceState"), ref<android::os::Parcelable>>(); }
inline void AbsListView::onRestoreInstanceState(ref<android::os::Parcelable> state) { return call_method<SCAPIX_META_STRING("onRestoreInstanceState"), void>(state); }
inline void AbsListView::setFilterText(ref<java::lang::String> filterText) { return call_method<SCAPIX_META_STRING("setFilterText"), void>(filterText); }
inline ref<java::lang::CharSequence> AbsListView::getTextFilter() { return call_method<SCAPIX_META_STRING("getTextFilter"), ref<java::lang::CharSequence>>(); }
inline void AbsListView::requestLayout() { return call_method<SCAPIX_META_STRING("requestLayout"), void>(); }
inline ref<android::view::View> AbsListView::getSelectedView() { return call_method<SCAPIX_META_STRING("getSelectedView"), ref<android::view::View>>(); }
inline jint AbsListView::getListPaddingTop() { return call_method<SCAPIX_META_STRING("getListPaddingTop"), jint>(); }
inline jint AbsListView::getListPaddingBottom() { return call_method<SCAPIX_META_STRING("getListPaddingBottom"), jint>(); }
inline jint AbsListView::getListPaddingLeft() { return call_method<SCAPIX_META_STRING("getListPaddingLeft"), jint>(); }
inline jint AbsListView::getListPaddingRight() { return call_method<SCAPIX_META_STRING("getListPaddingRight"), jint>(); }
inline void AbsListView::onInitializeAccessibilityNodeInfoForItem(ref<android::view::View> view, jint position, ref<android::view::accessibility::AccessibilityNodeInfo> info) { return call_method<SCAPIX_META_STRING("onInitializeAccessibilityNodeInfoForItem"), void>(view, position, info); }
inline void AbsListView::setDrawSelectorOnTop(jboolean onTop) { return call_method<SCAPIX_META_STRING("setDrawSelectorOnTop"), void>(onTop); }
inline void AbsListView::setSelector(jint resID) { return call_method<SCAPIX_META_STRING("setSelector"), void>(resID); }
inline void AbsListView::setSelector(ref<android::graphics::drawable::Drawable> sel) { return call_method<SCAPIX_META_STRING("setSelector"), void>(sel); }
inline ref<android::graphics::drawable::Drawable> AbsListView::getSelector() { return call_method<SCAPIX_META_STRING("getSelector"), ref<android::graphics::drawable::Drawable>>(); }
inline void AbsListView::setScrollIndicators(ref<android::view::View> up, ref<android::view::View> down) { return call_method<SCAPIX_META_STRING("setScrollIndicators"), void>(up, down); }
inline jboolean AbsListView::verifyDrawable(ref<android::graphics::drawable::Drawable> dr) { return call_method<SCAPIX_META_STRING("verifyDrawable"), jboolean>(dr); }
inline void AbsListView::jumpDrawablesToCurrentState() { return call_method<SCAPIX_META_STRING("jumpDrawablesToCurrentState"), void>(); }
inline void AbsListView::onWindowFocusChanged(jboolean hasWindowFocus) { return call_method<SCAPIX_META_STRING("onWindowFocusChanged"), void>(hasWindowFocus); }
inline void AbsListView::onRtlPropertiesChanged(jint layoutDirection) { return call_method<SCAPIX_META_STRING("onRtlPropertiesChanged"), void>(layoutDirection); }
inline void AbsListView::onCancelPendingInputEvents() { return call_method<SCAPIX_META_STRING("onCancelPendingInputEvents"), void>(); }
inline jboolean AbsListView::showContextMenu() { return call_method<SCAPIX_META_STRING("showContextMenu"), jboolean>(); }
inline jboolean AbsListView::showContextMenu(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("showContextMenu"), jboolean>(x, y); }
inline jboolean AbsListView::showContextMenuForChild(ref<android::view::View> originalView) { return call_method<SCAPIX_META_STRING("showContextMenuForChild"), jboolean>(originalView); }
inline jboolean AbsListView::showContextMenuForChild(ref<android::view::View> originalView, jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("showContextMenuForChild"), jboolean>(originalView, x, y); }
inline jboolean AbsListView::onKeyDown(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyDown"), jboolean>(keyCode, event); }
inline jboolean AbsListView::onKeyUp(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyUp"), jboolean>(keyCode, event); }
inline void AbsListView::dispatchDrawableHotspotChanged(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("dispatchDrawableHotspotChanged"), void>(x, y); }
inline jint AbsListView::pointToPosition(jint x, jint y) { return call_method<SCAPIX_META_STRING("pointToPosition"), jint>(x, y); }
inline jlong AbsListView::pointToRowId(jint x, jint y) { return call_method<SCAPIX_META_STRING("pointToRowId"), jlong>(x, y); }
inline void AbsListView::onTouchModeChanged(jboolean isInTouchMode) { return call_method<SCAPIX_META_STRING("onTouchModeChanged"), void>(isInTouchMode); }
inline jboolean AbsListView::onTouchEvent(ref<android::view::MotionEvent> ev) { return call_method<SCAPIX_META_STRING("onTouchEvent"), jboolean>(ev); }
inline jboolean AbsListView::onGenericMotionEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onGenericMotionEvent"), jboolean>(event); }
inline void AbsListView::fling(jint velocityY) { return call_method<SCAPIX_META_STRING("fling"), void>(velocityY); }
inline jboolean AbsListView::onStartNestedScroll(ref<android::view::View> child, ref<android::view::View> target, jint nestedScrollAxes) { return call_method<SCAPIX_META_STRING("onStartNestedScroll"), jboolean>(child, target, nestedScrollAxes); }
inline void AbsListView::onNestedScrollAccepted(ref<android::view::View> child, ref<android::view::View> target, jint axes) { return call_method<SCAPIX_META_STRING("onNestedScrollAccepted"), void>(child, target, axes); }
inline void AbsListView::onNestedScroll(ref<android::view::View> target, jint dxConsumed, jint dyConsumed, jint dxUnconsumed, jint dyUnconsumed) { return call_method<SCAPIX_META_STRING("onNestedScroll"), void>(target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed); }
inline jboolean AbsListView::onNestedFling(ref<android::view::View> target, jfloat velocityX, jfloat velocityY, jboolean consumed) { return call_method<SCAPIX_META_STRING("onNestedFling"), jboolean>(target, velocityX, velocityY, consumed); }
inline void AbsListView::draw(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("draw"), void>(canvas); }
inline void AbsListView::requestDisallowInterceptTouchEvent(jboolean disallowIntercept) { return call_method<SCAPIX_META_STRING("requestDisallowInterceptTouchEvent"), void>(disallowIntercept); }
inline jboolean AbsListView::onInterceptHoverEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onInterceptHoverEvent"), jboolean>(event); }
inline ref<android::view::PointerIcon> AbsListView::onResolvePointerIcon(ref<android::view::MotionEvent> event, jint pointerIndex) { return call_method<SCAPIX_META_STRING("onResolvePointerIcon"), ref<android::view::PointerIcon>>(event, pointerIndex); }
inline jboolean AbsListView::onInterceptTouchEvent(ref<android::view::MotionEvent> ev) { return call_method<SCAPIX_META_STRING("onInterceptTouchEvent"), jboolean>(ev); }
inline void AbsListView::addTouchables(ref<java::util::ArrayList> views) { return call_method<SCAPIX_META_STRING("addTouchables"), void>(views); }
inline void AbsListView::setFriction(jfloat friction) { return call_method<SCAPIX_META_STRING("setFriction"), void>(friction); }
inline void AbsListView::setVelocityScale(jfloat scale) { return call_method<SCAPIX_META_STRING("setVelocityScale"), void>(scale); }
inline void AbsListView::smoothScrollToPosition(jint position) { return call_method<SCAPIX_META_STRING("smoothScrollToPosition"), void>(position); }
inline void AbsListView::smoothScrollToPositionFromTop(jint position, jint offset, jint duration) { return call_method<SCAPIX_META_STRING("smoothScrollToPositionFromTop"), void>(position, offset, duration); }
inline void AbsListView::smoothScrollToPositionFromTop(jint position, jint offset) { return call_method<SCAPIX_META_STRING("smoothScrollToPositionFromTop"), void>(position, offset); }
inline void AbsListView::smoothScrollToPosition(jint position, jint boundPosition) { return call_method<SCAPIX_META_STRING("smoothScrollToPosition"), void>(position, boundPosition); }
inline void AbsListView::smoothScrollBy(jint distance, jint duration) { return call_method<SCAPIX_META_STRING("smoothScrollBy"), void>(distance, duration); }
inline void AbsListView::scrollListBy(jint y) { return call_method<SCAPIX_META_STRING("scrollListBy"), void>(y); }
inline jboolean AbsListView::canScrollList(jint direction) { return call_method<SCAPIX_META_STRING("canScrollList"), jboolean>(direction); }
inline void AbsListView::invalidateViews() { return call_method<SCAPIX_META_STRING("invalidateViews"), void>(); }
inline ref<android::view::inputmethod::InputConnection> AbsListView::onCreateInputConnection(ref<android::view::inputmethod::EditorInfo> outAttrs) { return call_method<SCAPIX_META_STRING("onCreateInputConnection"), ref<android::view::inputmethod::InputConnection>>(outAttrs); }
inline jboolean AbsListView::checkInputConnectionProxy(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("checkInputConnectionProxy"), jboolean>(view); }
inline void AbsListView::clearTextFilter() { return call_method<SCAPIX_META_STRING("clearTextFilter"), void>(); }
inline jboolean AbsListView::hasTextFilter() { return call_method<SCAPIX_META_STRING("hasTextFilter"), jboolean>(); }
inline void AbsListView::onGlobalLayout() { return call_method<SCAPIX_META_STRING("onGlobalLayout"), void>(); }
inline void AbsListView::beforeTextChanged(ref<java::lang::CharSequence> s, jint start, jint count, jint after) { return call_method<SCAPIX_META_STRING("beforeTextChanged"), void>(s, start, count, after); }
inline void AbsListView::onTextChanged(ref<java::lang::CharSequence> s, jint start, jint before, jint count) { return call_method<SCAPIX_META_STRING("onTextChanged"), void>(s, start, before, count); }
inline void AbsListView::afterTextChanged(ref<android::text::Editable> s) { return call_method<SCAPIX_META_STRING("afterTextChanged"), void>(s); }
inline void AbsListView::onFilterComplete(jint count) { return call_method<SCAPIX_META_STRING("onFilterComplete"), void>(count); }
inline ref<android::widget::AbsListView_LayoutParams> AbsListView::generateLayoutParams(ref<android::util::AttributeSet> attrs) { return call_method<SCAPIX_META_STRING("generateLayoutParams"), ref<android::widget::AbsListView_LayoutParams>>(attrs); }
inline void AbsListView::setTranscriptMode(jint mode) { return call_method<SCAPIX_META_STRING("setTranscriptMode"), void>(mode); }
inline jint AbsListView::getTranscriptMode() { return call_method<SCAPIX_META_STRING("getTranscriptMode"), jint>(); }
inline jint AbsListView::getSolidColor() { return call_method<SCAPIX_META_STRING("getSolidColor"), jint>(); }
inline void AbsListView::setCacheColorHint(jint color) { return call_method<SCAPIX_META_STRING("setCacheColorHint"), void>(color); }
inline jint AbsListView::getCacheColorHint() { return call_method<SCAPIX_META_STRING("getCacheColorHint"), jint>(); }
inline void AbsListView::reclaimViews(ref<java::util::List> views) { return call_method<SCAPIX_META_STRING("reclaimViews"), void>(views); }
inline void AbsListView::setRemoteViewsAdapter(ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("setRemoteViewsAdapter"), void>(intent); }
inline void AbsListView::deferNotifyDataSetChanged() { return call_method<SCAPIX_META_STRING("deferNotifyDataSetChanged"), void>(); }
inline jboolean AbsListView::onRemoteAdapterConnected() { return call_method<SCAPIX_META_STRING("onRemoteAdapterConnected"), jboolean>(); }
inline void AbsListView::onRemoteAdapterDisconnected() { return call_method<SCAPIX_META_STRING("onRemoteAdapterDisconnected"), void>(); }
inline void AbsListView::setRecyclerListener(ref<android::widget::AbsListView_RecyclerListener> listener) { return call_method<SCAPIX_META_STRING("setRecyclerListener"), void>(listener); }
inline void AbsListView::setSelectionFromTop(jint position, jint y) { return call_method<SCAPIX_META_STRING("setSelectionFromTop"), void>(position, y); }

} // namespace android::widget
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WIDGET_ABSLISTVIEW_H
