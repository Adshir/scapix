// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/widget/CompoundButton.h>

#ifndef SCAPIX_ANDROID_WIDGET_SWITCH_H
#define SCAPIX_ANDROID_WIDGET_SWITCH_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content::res { class ColorStateList; }
namespace android::graphics { class Canvas; }
namespace android::graphics { class PorterDuff_Mode; }
namespace android::graphics { class Typeface; }
namespace android::graphics::drawable { class Drawable; }
namespace android::util { class AttributeSet; }
namespace android::view { class MotionEvent; }
namespace android::view { class ViewStructure; }
namespace java::lang { class CharSequence; }

namespace android::widget {

class Switch : public object_base<SCAPIX_META_STRING("android/widget/Switch"),
	android::widget::CompoundButton>
{
public:

	static ref<Switch> new_object(ref<android::content::Context> context);
	static ref<Switch> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<Switch> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<Switch> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	void setSwitchTextAppearance(ref<android::content::Context> context, jint resid);
	void setSwitchTypeface(ref<android::graphics::Typeface> tf, jint style);
	void setSwitchTypeface(ref<android::graphics::Typeface> tf);
	void setSwitchPadding(jint pixels);
	jint getSwitchPadding();
	void setSwitchMinWidth(jint pixels);
	jint getSwitchMinWidth();
	void setThumbTextPadding(jint pixels);
	jint getThumbTextPadding();
	void setTrackDrawable(ref<android::graphics::drawable::Drawable> track);
	void setTrackResource(jint resId);
	ref<android::graphics::drawable::Drawable> getTrackDrawable();
	void setTrackTintList(ref<android::content::res::ColorStateList> tint);
	ref<android::content::res::ColorStateList> getTrackTintList();
	void setTrackTintMode(ref<android::graphics::PorterDuff_Mode> tintMode);
	ref<android::graphics::PorterDuff_Mode> getTrackTintMode();
	void setThumbDrawable(ref<android::graphics::drawable::Drawable> thumb);
	void setThumbResource(jint resId);
	ref<android::graphics::drawable::Drawable> getThumbDrawable();
	void setThumbTintList(ref<android::content::res::ColorStateList> tint);
	ref<android::content::res::ColorStateList> getThumbTintList();
	void setThumbTintMode(ref<android::graphics::PorterDuff_Mode> tintMode);
	ref<android::graphics::PorterDuff_Mode> getThumbTintMode();
	void setSplitTrack(jboolean splitTrack);
	jboolean getSplitTrack();
	ref<java::lang::CharSequence> getTextOn();
	void setTextOn(ref<java::lang::CharSequence> textOn);
	ref<java::lang::CharSequence> getTextOff();
	void setTextOff(ref<java::lang::CharSequence> textOff);
	void setShowText(jboolean showText);
	jboolean getShowText();
	void onMeasure(jint widthMeasureSpec, jint heightMeasureSpec);
	jboolean onTouchEvent(ref<android::view::MotionEvent> ev);
	void toggle();
	void setChecked(jboolean checked);
	void draw(ref<android::graphics::Canvas> c);
	jint getCompoundPaddingLeft();
	jint getCompoundPaddingRight();
	void drawableHotspotChanged(jfloat x, jfloat y);
	void jumpDrawablesToCurrentState();
	ref<java::lang::CharSequence> getAccessibilityClassName();
	void onProvideStructure(ref<android::view::ViewStructure> structure);
	void onProvideAutofillStructure(ref<android::view::ViewStructure> structure, jint flags);

protected:

	Switch(handle_type h) : base_(h) {}

};

} // namespace android::widget
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/Typeface.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/ViewStructure.h>
#include <scapix/java_api/java/lang/CharSequence.h>

namespace scapix::java_api {
namespace android::widget {

inline ref<Switch> Switch::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<Switch> Switch::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<Switch> Switch::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<Switch> Switch::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline void Switch::setSwitchTextAppearance(ref<android::content::Context> context, jint resid) { return call_method<SCAPIX_META_STRING("setSwitchTextAppearance"), void>(context, resid); }
inline void Switch::setSwitchTypeface(ref<android::graphics::Typeface> tf, jint style) { return call_method<SCAPIX_META_STRING("setSwitchTypeface"), void>(tf, style); }
inline void Switch::setSwitchTypeface(ref<android::graphics::Typeface> tf) { return call_method<SCAPIX_META_STRING("setSwitchTypeface"), void>(tf); }
inline void Switch::setSwitchPadding(jint pixels) { return call_method<SCAPIX_META_STRING("setSwitchPadding"), void>(pixels); }
inline jint Switch::getSwitchPadding() { return call_method<SCAPIX_META_STRING("getSwitchPadding"), jint>(); }
inline void Switch::setSwitchMinWidth(jint pixels) { return call_method<SCAPIX_META_STRING("setSwitchMinWidth"), void>(pixels); }
inline jint Switch::getSwitchMinWidth() { return call_method<SCAPIX_META_STRING("getSwitchMinWidth"), jint>(); }
inline void Switch::setThumbTextPadding(jint pixels) { return call_method<SCAPIX_META_STRING("setThumbTextPadding"), void>(pixels); }
inline jint Switch::getThumbTextPadding() { return call_method<SCAPIX_META_STRING("getThumbTextPadding"), jint>(); }
inline void Switch::setTrackDrawable(ref<android::graphics::drawable::Drawable> track) { return call_method<SCAPIX_META_STRING("setTrackDrawable"), void>(track); }
inline void Switch::setTrackResource(jint resId) { return call_method<SCAPIX_META_STRING("setTrackResource"), void>(resId); }
inline ref<android::graphics::drawable::Drawable> Switch::getTrackDrawable() { return call_method<SCAPIX_META_STRING("getTrackDrawable"), ref<android::graphics::drawable::Drawable>>(); }
inline void Switch::setTrackTintList(ref<android::content::res::ColorStateList> tint) { return call_method<SCAPIX_META_STRING("setTrackTintList"), void>(tint); }
inline ref<android::content::res::ColorStateList> Switch::getTrackTintList() { return call_method<SCAPIX_META_STRING("getTrackTintList"), ref<android::content::res::ColorStateList>>(); }
inline void Switch::setTrackTintMode(ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<SCAPIX_META_STRING("setTrackTintMode"), void>(tintMode); }
inline ref<android::graphics::PorterDuff_Mode> Switch::getTrackTintMode() { return call_method<SCAPIX_META_STRING("getTrackTintMode"), ref<android::graphics::PorterDuff_Mode>>(); }
inline void Switch::setThumbDrawable(ref<android::graphics::drawable::Drawable> thumb) { return call_method<SCAPIX_META_STRING("setThumbDrawable"), void>(thumb); }
inline void Switch::setThumbResource(jint resId) { return call_method<SCAPIX_META_STRING("setThumbResource"), void>(resId); }
inline ref<android::graphics::drawable::Drawable> Switch::getThumbDrawable() { return call_method<SCAPIX_META_STRING("getThumbDrawable"), ref<android::graphics::drawable::Drawable>>(); }
inline void Switch::setThumbTintList(ref<android::content::res::ColorStateList> tint) { return call_method<SCAPIX_META_STRING("setThumbTintList"), void>(tint); }
inline ref<android::content::res::ColorStateList> Switch::getThumbTintList() { return call_method<SCAPIX_META_STRING("getThumbTintList"), ref<android::content::res::ColorStateList>>(); }
inline void Switch::setThumbTintMode(ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<SCAPIX_META_STRING("setThumbTintMode"), void>(tintMode); }
inline ref<android::graphics::PorterDuff_Mode> Switch::getThumbTintMode() { return call_method<SCAPIX_META_STRING("getThumbTintMode"), ref<android::graphics::PorterDuff_Mode>>(); }
inline void Switch::setSplitTrack(jboolean splitTrack) { return call_method<SCAPIX_META_STRING("setSplitTrack"), void>(splitTrack); }
inline jboolean Switch::getSplitTrack() { return call_method<SCAPIX_META_STRING("getSplitTrack"), jboolean>(); }
inline ref<java::lang::CharSequence> Switch::getTextOn() { return call_method<SCAPIX_META_STRING("getTextOn"), ref<java::lang::CharSequence>>(); }
inline void Switch::setTextOn(ref<java::lang::CharSequence> textOn) { return call_method<SCAPIX_META_STRING("setTextOn"), void>(textOn); }
inline ref<java::lang::CharSequence> Switch::getTextOff() { return call_method<SCAPIX_META_STRING("getTextOff"), ref<java::lang::CharSequence>>(); }
inline void Switch::setTextOff(ref<java::lang::CharSequence> textOff) { return call_method<SCAPIX_META_STRING("setTextOff"), void>(textOff); }
inline void Switch::setShowText(jboolean showText) { return call_method<SCAPIX_META_STRING("setShowText"), void>(showText); }
inline jboolean Switch::getShowText() { return call_method<SCAPIX_META_STRING("getShowText"), jboolean>(); }
inline void Switch::onMeasure(jint widthMeasureSpec, jint heightMeasureSpec) { return call_method<SCAPIX_META_STRING("onMeasure"), void>(widthMeasureSpec, heightMeasureSpec); }
inline jboolean Switch::onTouchEvent(ref<android::view::MotionEvent> ev) { return call_method<SCAPIX_META_STRING("onTouchEvent"), jboolean>(ev); }
inline void Switch::toggle() { return call_method<SCAPIX_META_STRING("toggle"), void>(); }
inline void Switch::setChecked(jboolean checked) { return call_method<SCAPIX_META_STRING("setChecked"), void>(checked); }
inline void Switch::draw(ref<android::graphics::Canvas> c) { return call_method<SCAPIX_META_STRING("draw"), void>(c); }
inline jint Switch::getCompoundPaddingLeft() { return call_method<SCAPIX_META_STRING("getCompoundPaddingLeft"), jint>(); }
inline jint Switch::getCompoundPaddingRight() { return call_method<SCAPIX_META_STRING("getCompoundPaddingRight"), jint>(); }
inline void Switch::drawableHotspotChanged(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("drawableHotspotChanged"), void>(x, y); }
inline void Switch::jumpDrawablesToCurrentState() { return call_method<SCAPIX_META_STRING("jumpDrawablesToCurrentState"), void>(); }
inline ref<java::lang::CharSequence> Switch::getAccessibilityClassName() { return call_method<SCAPIX_META_STRING("getAccessibilityClassName"), ref<java::lang::CharSequence>>(); }
inline void Switch::onProvideStructure(ref<android::view::ViewStructure> structure) { return call_method<SCAPIX_META_STRING("onProvideStructure"), void>(structure); }
inline void Switch::onProvideAutofillStructure(ref<android::view::ViewStructure> structure, jint flags) { return call_method<SCAPIX_META_STRING("onProvideAutofillStructure"), void>(structure, flags); }

} // namespace android::widget
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WIDGET_SWITCH_H
