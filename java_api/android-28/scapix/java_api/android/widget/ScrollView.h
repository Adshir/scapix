// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/widget/FrameLayout.h>

#ifndef SCAPIX_ANDROID_WIDGET_SCROLLVIEW_H
#define SCAPIX_ANDROID_WIDGET_SCROLLVIEW_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::graphics { class Canvas; }
namespace android::graphics { class Rect; }
namespace android::util { class AttributeSet; }
namespace android::view { class KeyEvent; }
namespace android::view { class MotionEvent; }
namespace android::view { class View; }
namespace android::view { class ViewGroup_LayoutParams; }
namespace java::lang { class CharSequence; }

namespace android::widget {

class ScrollView : public object_base<SCAPIX_META_STRING("android/widget/ScrollView"),
	android::widget::FrameLayout>
{
public:

	static ref<ScrollView> new_object(ref<android::content::Context> context);
	static ref<ScrollView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<ScrollView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<ScrollView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	jboolean shouldDelayChildPressedState();
	jint getMaxScrollAmount();
	void addView(ref<android::view::View> child);
	void addView(ref<android::view::View> child, jint index);
	void addView(ref<android::view::View> child, ref<android::view::ViewGroup_LayoutParams> params);
	void addView(ref<android::view::View> child, jint index, ref<android::view::ViewGroup_LayoutParams> params);
	jboolean isFillViewport();
	void setFillViewport(jboolean fillViewport);
	jboolean isSmoothScrollingEnabled();
	void setSmoothScrollingEnabled(jboolean smoothScrollingEnabled);
	jboolean dispatchKeyEvent(ref<android::view::KeyEvent> event);
	jboolean executeKeyEvent(ref<android::view::KeyEvent> event);
	void requestDisallowInterceptTouchEvent(jboolean disallowIntercept);
	jboolean onInterceptTouchEvent(ref<android::view::MotionEvent> ev);
	jboolean onTouchEvent(ref<android::view::MotionEvent> ev);
	jboolean onGenericMotionEvent(ref<android::view::MotionEvent> event);
	ref<java::lang::CharSequence> getAccessibilityClassName();
	jboolean pageScroll(jint direction);
	jboolean fullScroll(jint direction);
	jboolean arrowScroll(jint direction);
	void smoothScrollBy(jint dx, jint dy);
	void smoothScrollTo(jint x, jint y);
	void computeScroll();
	void requestChildFocus(ref<android::view::View> child, ref<android::view::View> focused);
	jboolean requestChildRectangleOnScreen(ref<android::view::View> child, ref<android::graphics::Rect> rectangle, jboolean immediate);
	void requestLayout();
	void fling(jint velocityY);
	void scrollTo(jint x, jint y);
	void setOverScrollMode(jint mode);
	jboolean onStartNestedScroll(ref<android::view::View> child, ref<android::view::View> target, jint nestedScrollAxes);
	void onNestedScrollAccepted(ref<android::view::View> child, ref<android::view::View> target, jint axes);
	void onStopNestedScroll(ref<android::view::View> target);
	void onNestedScroll(ref<android::view::View> target, jint dxConsumed, jint dyConsumed, jint dxUnconsumed, jint dyUnconsumed);
	jboolean onNestedFling(ref<android::view::View> target, jfloat velocityX, jfloat velocityY, jboolean consumed);
	void draw(ref<android::graphics::Canvas> canvas);

protected:

	ScrollView(handle_type h) : base_(h) {}

};

} // namespace android::widget
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup_LayoutParams.h>
#include <scapix/java_api/java/lang/CharSequence.h>

namespace scapix::java_api {
namespace android::widget {

inline ref<ScrollView> ScrollView::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<ScrollView> ScrollView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<ScrollView> ScrollView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<ScrollView> ScrollView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline jboolean ScrollView::shouldDelayChildPressedState() { return call_method<SCAPIX_META_STRING("shouldDelayChildPressedState"), jboolean>(); }
inline jint ScrollView::getMaxScrollAmount() { return call_method<SCAPIX_META_STRING("getMaxScrollAmount"), jint>(); }
inline void ScrollView::addView(ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("addView"), void>(child); }
inline void ScrollView::addView(ref<android::view::View> child, jint index) { return call_method<SCAPIX_META_STRING("addView"), void>(child, index); }
inline void ScrollView::addView(ref<android::view::View> child, ref<android::view::ViewGroup_LayoutParams> params) { return call_method<SCAPIX_META_STRING("addView"), void>(child, params); }
inline void ScrollView::addView(ref<android::view::View> child, jint index, ref<android::view::ViewGroup_LayoutParams> params) { return call_method<SCAPIX_META_STRING("addView"), void>(child, index, params); }
inline jboolean ScrollView::isFillViewport() { return call_method<SCAPIX_META_STRING("isFillViewport"), jboolean>(); }
inline void ScrollView::setFillViewport(jboolean fillViewport) { return call_method<SCAPIX_META_STRING("setFillViewport"), void>(fillViewport); }
inline jboolean ScrollView::isSmoothScrollingEnabled() { return call_method<SCAPIX_META_STRING("isSmoothScrollingEnabled"), jboolean>(); }
inline void ScrollView::setSmoothScrollingEnabled(jboolean smoothScrollingEnabled) { return call_method<SCAPIX_META_STRING("setSmoothScrollingEnabled"), void>(smoothScrollingEnabled); }
inline jboolean ScrollView::dispatchKeyEvent(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("dispatchKeyEvent"), jboolean>(event); }
inline jboolean ScrollView::executeKeyEvent(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("executeKeyEvent"), jboolean>(event); }
inline void ScrollView::requestDisallowInterceptTouchEvent(jboolean disallowIntercept) { return call_method<SCAPIX_META_STRING("requestDisallowInterceptTouchEvent"), void>(disallowIntercept); }
inline jboolean ScrollView::onInterceptTouchEvent(ref<android::view::MotionEvent> ev) { return call_method<SCAPIX_META_STRING("onInterceptTouchEvent"), jboolean>(ev); }
inline jboolean ScrollView::onTouchEvent(ref<android::view::MotionEvent> ev) { return call_method<SCAPIX_META_STRING("onTouchEvent"), jboolean>(ev); }
inline jboolean ScrollView::onGenericMotionEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onGenericMotionEvent"), jboolean>(event); }
inline ref<java::lang::CharSequence> ScrollView::getAccessibilityClassName() { return call_method<SCAPIX_META_STRING("getAccessibilityClassName"), ref<java::lang::CharSequence>>(); }
inline jboolean ScrollView::pageScroll(jint direction) { return call_method<SCAPIX_META_STRING("pageScroll"), jboolean>(direction); }
inline jboolean ScrollView::fullScroll(jint direction) { return call_method<SCAPIX_META_STRING("fullScroll"), jboolean>(direction); }
inline jboolean ScrollView::arrowScroll(jint direction) { return call_method<SCAPIX_META_STRING("arrowScroll"), jboolean>(direction); }
inline void ScrollView::smoothScrollBy(jint dx, jint dy) { return call_method<SCAPIX_META_STRING("smoothScrollBy"), void>(dx, dy); }
inline void ScrollView::smoothScrollTo(jint x, jint y) { return call_method<SCAPIX_META_STRING("smoothScrollTo"), void>(x, y); }
inline void ScrollView::computeScroll() { return call_method<SCAPIX_META_STRING("computeScroll"), void>(); }
inline void ScrollView::requestChildFocus(ref<android::view::View> child, ref<android::view::View> focused) { return call_method<SCAPIX_META_STRING("requestChildFocus"), void>(child, focused); }
inline jboolean ScrollView::requestChildRectangleOnScreen(ref<android::view::View> child, ref<android::graphics::Rect> rectangle, jboolean immediate) { return call_method<SCAPIX_META_STRING("requestChildRectangleOnScreen"), jboolean>(child, rectangle, immediate); }
inline void ScrollView::requestLayout() { return call_method<SCAPIX_META_STRING("requestLayout"), void>(); }
inline void ScrollView::fling(jint velocityY) { return call_method<SCAPIX_META_STRING("fling"), void>(velocityY); }
inline void ScrollView::scrollTo(jint x, jint y) { return call_method<SCAPIX_META_STRING("scrollTo"), void>(x, y); }
inline void ScrollView::setOverScrollMode(jint mode) { return call_method<SCAPIX_META_STRING("setOverScrollMode"), void>(mode); }
inline jboolean ScrollView::onStartNestedScroll(ref<android::view::View> child, ref<android::view::View> target, jint nestedScrollAxes) { return call_method<SCAPIX_META_STRING("onStartNestedScroll"), jboolean>(child, target, nestedScrollAxes); }
inline void ScrollView::onNestedScrollAccepted(ref<android::view::View> child, ref<android::view::View> target, jint axes) { return call_method<SCAPIX_META_STRING("onNestedScrollAccepted"), void>(child, target, axes); }
inline void ScrollView::onStopNestedScroll(ref<android::view::View> target) { return call_method<SCAPIX_META_STRING("onStopNestedScroll"), void>(target); }
inline void ScrollView::onNestedScroll(ref<android::view::View> target, jint dxConsumed, jint dyConsumed, jint dxUnconsumed, jint dyUnconsumed) { return call_method<SCAPIX_META_STRING("onNestedScroll"), void>(target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed); }
inline jboolean ScrollView::onNestedFling(ref<android::view::View> target, jfloat velocityX, jfloat velocityY, jboolean consumed) { return call_method<SCAPIX_META_STRING("onNestedFling"), jboolean>(target, velocityX, velocityY, consumed); }
inline void ScrollView::draw(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("draw"), void>(canvas); }

} // namespace android::widget
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WIDGET_SCROLLVIEW_H
