// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_WIDGET_POPUPWINDOW_H
#define SCAPIX_ANDROID_WIDGET_POPUPWINDOW_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::graphics::drawable { class Drawable; }
namespace android::transition { class Transition; }
namespace android::util { class AttributeSet; }
namespace android::view { class View; }
namespace android::view { class View_OnTouchListener; }
namespace android::widget { class PopupWindow_OnDismissListener; }

namespace android::widget {

class PopupWindow : public object_base<SCAPIX_META_STRING("android/widget/PopupWindow"),
	java::lang::Object>
{
public:

	using OnDismissListener = PopupWindow_OnDismissListener;

	static jint INPUT_METHOD_FROM_FOCUSABLE_();
	static jint INPUT_METHOD_NEEDED_();
	static jint INPUT_METHOD_NOT_NEEDED_();

	static ref<PopupWindow> new_object(ref<android::content::Context> context);
	static ref<PopupWindow> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<PopupWindow> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<PopupWindow> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	static ref<PopupWindow> new_object();
	static ref<PopupWindow> new_object(ref<android::view::View> contentView);
	static ref<PopupWindow> new_object(jint width, jint height);
	static ref<PopupWindow> new_object(ref<android::view::View> contentView, jint width, jint height);
	static ref<PopupWindow> new_object(ref<android::view::View> contentView, jint width, jint height, jboolean focusable);
	void setEnterTransition(ref<android::transition::Transition> enterTransition);
	ref<android::transition::Transition> getEnterTransition();
	void setExitTransition(ref<android::transition::Transition> exitTransition);
	ref<android::transition::Transition> getExitTransition();
	ref<android::graphics::drawable::Drawable> getBackground();
	void setBackgroundDrawable(ref<android::graphics::drawable::Drawable> background);
	jfloat getElevation();
	void setElevation(jfloat elevation);
	jint getAnimationStyle();
	void setIgnoreCheekPress();
	void setAnimationStyle(jint animationStyle);
	ref<android::view::View> getContentView();
	void setContentView(ref<android::view::View> contentView);
	void setTouchInterceptor(ref<android::view::View_OnTouchListener> l);
	jboolean isFocusable();
	void setFocusable(jboolean focusable);
	jint getInputMethodMode();
	void setInputMethodMode(jint mode);
	void setSoftInputMode(jint mode);
	jint getSoftInputMode();
	jboolean isTouchable();
	void setTouchable(jboolean touchable);
	jboolean isOutsideTouchable();
	void setOutsideTouchable(jboolean touchable);
	jboolean isClippingEnabled();
	void setClippingEnabled(jboolean enabled);
	jboolean isSplitTouchEnabled();
	void setSplitTouchEnabled(jboolean enabled);
	jboolean isAttachedInDecor();
	void setAttachedInDecor(jboolean enabled);
	void setWindowLayoutType(jint layoutType);
	jint getWindowLayoutType();
	void setWindowLayoutMode(jint widthSpec, jint heightSpec);
	jint getHeight();
	void setHeight(jint height);
	jint getWidth();
	void setWidth(jint width);
	void setOverlapAnchor(jboolean overlapAnchor);
	jboolean getOverlapAnchor();
	jboolean isShowing();
	void showAtLocation(ref<android::view::View> parent, jint gravity, jint x, jint y);
	void showAsDropDown(ref<android::view::View> anchor);
	void showAsDropDown(ref<android::view::View> anchor, jint xoff, jint yoff);
	void showAsDropDown(ref<android::view::View> anchor, jint xoff, jint yoff, jint gravity);
	jboolean isAboveAnchor();
	jint getMaxAvailableHeight(ref<android::view::View> anchor);
	jint getMaxAvailableHeight(ref<android::view::View> anchor, jint yOffset);
	jint getMaxAvailableHeight(ref<android::view::View> anchor, jint yOffset, jboolean ignoreBottomDecorations);
	void dismiss();
	void setOnDismissListener(ref<android::widget::PopupWindow_OnDismissListener> onDismissListener);
	void update();
	void update(jint width, jint height);
	void update(jint x, jint y, jint width, jint height);
	void update(jint x, jint y, jint width, jint height, jboolean force);
	void update(ref<android::view::View> anchor, jint width, jint height);
	void update(ref<android::view::View> anchor, jint xoff, jint yoff, jint width, jint height);

protected:

	PopupWindow(handle_type h) : base_(h) {}

};

} // namespace android::widget
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/transition/Transition.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/View_OnTouchListener.h>
#include <scapix/java_api/android/widget/PopupWindow_OnDismissListener.h>

namespace scapix::java_api {
namespace android::widget {

inline jint PopupWindow::INPUT_METHOD_FROM_FOCUSABLE_() { return get_static_field<SCAPIX_META_STRING("INPUT_METHOD_FROM_FOCUSABLE"), jint>(); }
inline jint PopupWindow::INPUT_METHOD_NEEDED_() { return get_static_field<SCAPIX_META_STRING("INPUT_METHOD_NEEDED"), jint>(); }
inline jint PopupWindow::INPUT_METHOD_NOT_NEEDED_() { return get_static_field<SCAPIX_META_STRING("INPUT_METHOD_NOT_NEEDED"), jint>(); }
inline ref<PopupWindow> PopupWindow::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<PopupWindow> PopupWindow::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<PopupWindow> PopupWindow::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<PopupWindow> PopupWindow::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline ref<PopupWindow> PopupWindow::new_object() { return base_::new_object(); }
inline ref<PopupWindow> PopupWindow::new_object(ref<android::view::View> contentView) { return base_::new_object(contentView); }
inline ref<PopupWindow> PopupWindow::new_object(jint width, jint height) { return base_::new_object(width, height); }
inline ref<PopupWindow> PopupWindow::new_object(ref<android::view::View> contentView, jint width, jint height) { return base_::new_object(contentView, width, height); }
inline ref<PopupWindow> PopupWindow::new_object(ref<android::view::View> contentView, jint width, jint height, jboolean focusable) { return base_::new_object(contentView, width, height, focusable); }
inline void PopupWindow::setEnterTransition(ref<android::transition::Transition> enterTransition) { return call_method<SCAPIX_META_STRING("setEnterTransition"), void>(enterTransition); }
inline ref<android::transition::Transition> PopupWindow::getEnterTransition() { return call_method<SCAPIX_META_STRING("getEnterTransition"), ref<android::transition::Transition>>(); }
inline void PopupWindow::setExitTransition(ref<android::transition::Transition> exitTransition) { return call_method<SCAPIX_META_STRING("setExitTransition"), void>(exitTransition); }
inline ref<android::transition::Transition> PopupWindow::getExitTransition() { return call_method<SCAPIX_META_STRING("getExitTransition"), ref<android::transition::Transition>>(); }
inline ref<android::graphics::drawable::Drawable> PopupWindow::getBackground() { return call_method<SCAPIX_META_STRING("getBackground"), ref<android::graphics::drawable::Drawable>>(); }
inline void PopupWindow::setBackgroundDrawable(ref<android::graphics::drawable::Drawable> background) { return call_method<SCAPIX_META_STRING("setBackgroundDrawable"), void>(background); }
inline jfloat PopupWindow::getElevation() { return call_method<SCAPIX_META_STRING("getElevation"), jfloat>(); }
inline void PopupWindow::setElevation(jfloat elevation) { return call_method<SCAPIX_META_STRING("setElevation"), void>(elevation); }
inline jint PopupWindow::getAnimationStyle() { return call_method<SCAPIX_META_STRING("getAnimationStyle"), jint>(); }
inline void PopupWindow::setIgnoreCheekPress() { return call_method<SCAPIX_META_STRING("setIgnoreCheekPress"), void>(); }
inline void PopupWindow::setAnimationStyle(jint animationStyle) { return call_method<SCAPIX_META_STRING("setAnimationStyle"), void>(animationStyle); }
inline ref<android::view::View> PopupWindow::getContentView() { return call_method<SCAPIX_META_STRING("getContentView"), ref<android::view::View>>(); }
inline void PopupWindow::setContentView(ref<android::view::View> contentView) { return call_method<SCAPIX_META_STRING("setContentView"), void>(contentView); }
inline void PopupWindow::setTouchInterceptor(ref<android::view::View_OnTouchListener> l) { return call_method<SCAPIX_META_STRING("setTouchInterceptor"), void>(l); }
inline jboolean PopupWindow::isFocusable() { return call_method<SCAPIX_META_STRING("isFocusable"), jboolean>(); }
inline void PopupWindow::setFocusable(jboolean focusable) { return call_method<SCAPIX_META_STRING("setFocusable"), void>(focusable); }
inline jint PopupWindow::getInputMethodMode() { return call_method<SCAPIX_META_STRING("getInputMethodMode"), jint>(); }
inline void PopupWindow::setInputMethodMode(jint mode) { return call_method<SCAPIX_META_STRING("setInputMethodMode"), void>(mode); }
inline void PopupWindow::setSoftInputMode(jint mode) { return call_method<SCAPIX_META_STRING("setSoftInputMode"), void>(mode); }
inline jint PopupWindow::getSoftInputMode() { return call_method<SCAPIX_META_STRING("getSoftInputMode"), jint>(); }
inline jboolean PopupWindow::isTouchable() { return call_method<SCAPIX_META_STRING("isTouchable"), jboolean>(); }
inline void PopupWindow::setTouchable(jboolean touchable) { return call_method<SCAPIX_META_STRING("setTouchable"), void>(touchable); }
inline jboolean PopupWindow::isOutsideTouchable() { return call_method<SCAPIX_META_STRING("isOutsideTouchable"), jboolean>(); }
inline void PopupWindow::setOutsideTouchable(jboolean touchable) { return call_method<SCAPIX_META_STRING("setOutsideTouchable"), void>(touchable); }
inline jboolean PopupWindow::isClippingEnabled() { return call_method<SCAPIX_META_STRING("isClippingEnabled"), jboolean>(); }
inline void PopupWindow::setClippingEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setClippingEnabled"), void>(enabled); }
inline jboolean PopupWindow::isSplitTouchEnabled() { return call_method<SCAPIX_META_STRING("isSplitTouchEnabled"), jboolean>(); }
inline void PopupWindow::setSplitTouchEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setSplitTouchEnabled"), void>(enabled); }
inline jboolean PopupWindow::isAttachedInDecor() { return call_method<SCAPIX_META_STRING("isAttachedInDecor"), jboolean>(); }
inline void PopupWindow::setAttachedInDecor(jboolean enabled) { return call_method<SCAPIX_META_STRING("setAttachedInDecor"), void>(enabled); }
inline void PopupWindow::setWindowLayoutType(jint layoutType) { return call_method<SCAPIX_META_STRING("setWindowLayoutType"), void>(layoutType); }
inline jint PopupWindow::getWindowLayoutType() { return call_method<SCAPIX_META_STRING("getWindowLayoutType"), jint>(); }
inline void PopupWindow::setWindowLayoutMode(jint widthSpec, jint heightSpec) { return call_method<SCAPIX_META_STRING("setWindowLayoutMode"), void>(widthSpec, heightSpec); }
inline jint PopupWindow::getHeight() { return call_method<SCAPIX_META_STRING("getHeight"), jint>(); }
inline void PopupWindow::setHeight(jint height) { return call_method<SCAPIX_META_STRING("setHeight"), void>(height); }
inline jint PopupWindow::getWidth() { return call_method<SCAPIX_META_STRING("getWidth"), jint>(); }
inline void PopupWindow::setWidth(jint width) { return call_method<SCAPIX_META_STRING("setWidth"), void>(width); }
inline void PopupWindow::setOverlapAnchor(jboolean overlapAnchor) { return call_method<SCAPIX_META_STRING("setOverlapAnchor"), void>(overlapAnchor); }
inline jboolean PopupWindow::getOverlapAnchor() { return call_method<SCAPIX_META_STRING("getOverlapAnchor"), jboolean>(); }
inline jboolean PopupWindow::isShowing() { return call_method<SCAPIX_META_STRING("isShowing"), jboolean>(); }
inline void PopupWindow::showAtLocation(ref<android::view::View> parent, jint gravity, jint x, jint y) { return call_method<SCAPIX_META_STRING("showAtLocation"), void>(parent, gravity, x, y); }
inline void PopupWindow::showAsDropDown(ref<android::view::View> anchor) { return call_method<SCAPIX_META_STRING("showAsDropDown"), void>(anchor); }
inline void PopupWindow::showAsDropDown(ref<android::view::View> anchor, jint xoff, jint yoff) { return call_method<SCAPIX_META_STRING("showAsDropDown"), void>(anchor, xoff, yoff); }
inline void PopupWindow::showAsDropDown(ref<android::view::View> anchor, jint xoff, jint yoff, jint gravity) { return call_method<SCAPIX_META_STRING("showAsDropDown"), void>(anchor, xoff, yoff, gravity); }
inline jboolean PopupWindow::isAboveAnchor() { return call_method<SCAPIX_META_STRING("isAboveAnchor"), jboolean>(); }
inline jint PopupWindow::getMaxAvailableHeight(ref<android::view::View> anchor) { return call_method<SCAPIX_META_STRING("getMaxAvailableHeight"), jint>(anchor); }
inline jint PopupWindow::getMaxAvailableHeight(ref<android::view::View> anchor, jint yOffset) { return call_method<SCAPIX_META_STRING("getMaxAvailableHeight"), jint>(anchor, yOffset); }
inline jint PopupWindow::getMaxAvailableHeight(ref<android::view::View> anchor, jint yOffset, jboolean ignoreBottomDecorations) { return call_method<SCAPIX_META_STRING("getMaxAvailableHeight"), jint>(anchor, yOffset, ignoreBottomDecorations); }
inline void PopupWindow::dismiss() { return call_method<SCAPIX_META_STRING("dismiss"), void>(); }
inline void PopupWindow::setOnDismissListener(ref<android::widget::PopupWindow_OnDismissListener> onDismissListener) { return call_method<SCAPIX_META_STRING("setOnDismissListener"), void>(onDismissListener); }
inline void PopupWindow::update() { return call_method<SCAPIX_META_STRING("update"), void>(); }
inline void PopupWindow::update(jint width, jint height) { return call_method<SCAPIX_META_STRING("update"), void>(width, height); }
inline void PopupWindow::update(jint x, jint y, jint width, jint height) { return call_method<SCAPIX_META_STRING("update"), void>(x, y, width, height); }
inline void PopupWindow::update(jint x, jint y, jint width, jint height, jboolean force) { return call_method<SCAPIX_META_STRING("update"), void>(x, y, width, height, force); }
inline void PopupWindow::update(ref<android::view::View> anchor, jint width, jint height) { return call_method<SCAPIX_META_STRING("update"), void>(anchor, width, height); }
inline void PopupWindow::update(ref<android::view::View> anchor, jint xoff, jint yoff, jint width, jint height) { return call_method<SCAPIX_META_STRING("update"), void>(anchor, xoff, yoff, width, height); }

} // namespace android::widget
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WIDGET_POPUPWINDOW_H
