// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/widget/FrameLayout.h>

#ifndef SCAPIX_ANDROID_WIDGET_DATEPICKER_H
#define SCAPIX_ANDROID_WIDGET_DATEPICKER_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::util { class AttributeSet; }
namespace android::view { class ViewStructure; }
namespace android::view::autofill { class AutofillValue; }
namespace android::widget { class CalendarView; }
namespace android::widget { class DatePicker_OnDateChangedListener; }
namespace java::lang { class CharSequence; }

namespace android::widget {

class DatePicker : public object_base<SCAPIX_META_STRING("android/widget/DatePicker"),
	android::widget::FrameLayout>
{
public:

	using OnDateChangedListener = DatePicker_OnDateChangedListener;

	static ref<DatePicker> new_object(ref<android::content::Context> context);
	static ref<DatePicker> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<DatePicker> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<DatePicker> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	void init(jint year, jint monthOfYear, jint dayOfMonth, ref<android::widget::DatePicker_OnDateChangedListener> onDateChangedListener);
	void setOnDateChangedListener(ref<android::widget::DatePicker_OnDateChangedListener> onDateChangedListener);
	void updateDate(jint year, jint month, jint dayOfMonth);
	jint getYear();
	jint getMonth();
	jint getDayOfMonth();
	jlong getMinDate();
	void setMinDate(jlong minDate);
	jlong getMaxDate();
	void setMaxDate(jlong maxDate);
	void setEnabled(jboolean enabled);
	jboolean isEnabled();
	ref<java::lang::CharSequence> getAccessibilityClassName();
	void setFirstDayOfWeek(jint firstDayOfWeek);
	jint getFirstDayOfWeek();
	jboolean getCalendarViewShown();
	ref<android::widget::CalendarView> getCalendarView();
	void setCalendarViewShown(jboolean shown);
	jboolean getSpinnersShown();
	void setSpinnersShown(jboolean shown);
	void dispatchProvideAutofillStructure(ref<android::view::ViewStructure> structure, jint flags);
	void autofill(ref<android::view::autofill::AutofillValue> value);
	jint getAutofillType();
	ref<android::view::autofill::AutofillValue> getAutofillValue();

protected:

	DatePicker(handle_type h) : base_(h) {}

};

} // namespace android::widget
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/ViewStructure.h>
#include <scapix/java_api/android/view/autofill/AutofillValue.h>
#include <scapix/java_api/android/widget/CalendarView.h>
#include <scapix/java_api/android/widget/DatePicker_OnDateChangedListener.h>
#include <scapix/java_api/java/lang/CharSequence.h>

namespace scapix::java_api {
namespace android::widget {

inline ref<DatePicker> DatePicker::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<DatePicker> DatePicker::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<DatePicker> DatePicker::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<DatePicker> DatePicker::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline void DatePicker::init(jint year, jint monthOfYear, jint dayOfMonth, ref<android::widget::DatePicker_OnDateChangedListener> onDateChangedListener) { return call_method<SCAPIX_META_STRING("init"), void>(year, monthOfYear, dayOfMonth, onDateChangedListener); }
inline void DatePicker::setOnDateChangedListener(ref<android::widget::DatePicker_OnDateChangedListener> onDateChangedListener) { return call_method<SCAPIX_META_STRING("setOnDateChangedListener"), void>(onDateChangedListener); }
inline void DatePicker::updateDate(jint year, jint month, jint dayOfMonth) { return call_method<SCAPIX_META_STRING("updateDate"), void>(year, month, dayOfMonth); }
inline jint DatePicker::getYear() { return call_method<SCAPIX_META_STRING("getYear"), jint>(); }
inline jint DatePicker::getMonth() { return call_method<SCAPIX_META_STRING("getMonth"), jint>(); }
inline jint DatePicker::getDayOfMonth() { return call_method<SCAPIX_META_STRING("getDayOfMonth"), jint>(); }
inline jlong DatePicker::getMinDate() { return call_method<SCAPIX_META_STRING("getMinDate"), jlong>(); }
inline void DatePicker::setMinDate(jlong minDate) { return call_method<SCAPIX_META_STRING("setMinDate"), void>(minDate); }
inline jlong DatePicker::getMaxDate() { return call_method<SCAPIX_META_STRING("getMaxDate"), jlong>(); }
inline void DatePicker::setMaxDate(jlong maxDate) { return call_method<SCAPIX_META_STRING("setMaxDate"), void>(maxDate); }
inline void DatePicker::setEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setEnabled"), void>(enabled); }
inline jboolean DatePicker::isEnabled() { return call_method<SCAPIX_META_STRING("isEnabled"), jboolean>(); }
inline ref<java::lang::CharSequence> DatePicker::getAccessibilityClassName() { return call_method<SCAPIX_META_STRING("getAccessibilityClassName"), ref<java::lang::CharSequence>>(); }
inline void DatePicker::setFirstDayOfWeek(jint firstDayOfWeek) { return call_method<SCAPIX_META_STRING("setFirstDayOfWeek"), void>(firstDayOfWeek); }
inline jint DatePicker::getFirstDayOfWeek() { return call_method<SCAPIX_META_STRING("getFirstDayOfWeek"), jint>(); }
inline jboolean DatePicker::getCalendarViewShown() { return call_method<SCAPIX_META_STRING("getCalendarViewShown"), jboolean>(); }
inline ref<android::widget::CalendarView> DatePicker::getCalendarView() { return call_method<SCAPIX_META_STRING("getCalendarView"), ref<android::widget::CalendarView>>(); }
inline void DatePicker::setCalendarViewShown(jboolean shown) { return call_method<SCAPIX_META_STRING("setCalendarViewShown"), void>(shown); }
inline jboolean DatePicker::getSpinnersShown() { return call_method<SCAPIX_META_STRING("getSpinnersShown"), jboolean>(); }
inline void DatePicker::setSpinnersShown(jboolean shown) { return call_method<SCAPIX_META_STRING("setSpinnersShown"), void>(shown); }
inline void DatePicker::dispatchProvideAutofillStructure(ref<android::view::ViewStructure> structure, jint flags) { return call_method<SCAPIX_META_STRING("dispatchProvideAutofillStructure"), void>(structure, flags); }
inline void DatePicker::autofill(ref<android::view::autofill::AutofillValue> value) { return call_method<SCAPIX_META_STRING("autofill"), void>(value); }
inline jint DatePicker::getAutofillType() { return call_method<SCAPIX_META_STRING("getAutofillType"), jint>(); }
inline ref<android::view::autofill::AutofillValue> DatePicker::getAutofillValue() { return call_method<SCAPIX_META_STRING("getAutofillValue"), ref<android::view::autofill::AutofillValue>>(); }

} // namespace android::widget
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WIDGET_DATEPICKER_H
