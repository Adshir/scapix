// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/view/View.h>

#ifndef SCAPIX_ANDROID_WIDGET_IMAGEVIEW_H
#define SCAPIX_ANDROID_WIDGET_IMAGEVIEW_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content::res { class ColorStateList; }
namespace android::graphics { class Bitmap; }
namespace android::graphics { class ColorFilter; }
namespace android::graphics { class Matrix; }
namespace android::graphics { class PorterDuff_Mode; }
namespace android::graphics::drawable { class Drawable; }
namespace android::graphics::drawable { class Icon; }
namespace android::net { class Uri; }
namespace android::util { class AttributeSet; }
namespace android::widget { class ImageView_ScaleType; }
namespace java::lang { class CharSequence; }

namespace android::widget {

class ImageView : public object_base<SCAPIX_META_STRING("android/widget/ImageView"),
	android::view::View>
{
public:

	using ScaleType = ImageView_ScaleType;

	static ref<ImageView> new_object(ref<android::content::Context> context);
	static ref<ImageView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<ImageView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<ImageView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	void jumpDrawablesToCurrentState();
	void invalidateDrawable(ref<android::graphics::drawable::Drawable> dr);
	jboolean hasOverlappingRendering();
	jboolean getAdjustViewBounds();
	void setAdjustViewBounds(jboolean adjustViewBounds);
	jint getMaxWidth();
	void setMaxWidth(jint maxWidth);
	jint getMaxHeight();
	void setMaxHeight(jint maxHeight);
	ref<android::graphics::drawable::Drawable> getDrawable();
	void setImageResource(jint resId);
	void setImageURI(ref<android::net::Uri> uri);
	void setImageDrawable(ref<android::graphics::drawable::Drawable> drawable);
	void setImageIcon(ref<android::graphics::drawable::Icon> icon);
	void setImageTintList(ref<android::content::res::ColorStateList> tint);
	ref<android::content::res::ColorStateList> getImageTintList();
	void setImageTintMode(ref<android::graphics::PorterDuff_Mode> tintMode);
	ref<android::graphics::PorterDuff_Mode> getImageTintMode();
	void setImageBitmap(ref<android::graphics::Bitmap> bm);
	void setImageState(ref<link::java::array<jint>> state, jboolean merge);
	void setSelected(jboolean selected);
	void setImageLevel(jint level);
	void setScaleType(ref<android::widget::ImageView_ScaleType> scaleType);
	ref<android::widget::ImageView_ScaleType> getScaleType();
	ref<android::graphics::Matrix> getImageMatrix();
	void setImageMatrix(ref<android::graphics::Matrix> matrix);
	jboolean getCropToPadding();
	void setCropToPadding(jboolean cropToPadding);
	ref<link::java::array<jint>> onCreateDrawableState(jint extraSpace);
	void onRtlPropertiesChanged(jint layoutDirection);
	void drawableHotspotChanged(jfloat x, jfloat y);
	jint getBaseline();
	void setBaseline(jint baseline);
	void setBaselineAlignBottom(jboolean aligned);
	jboolean getBaselineAlignBottom();
	void setColorFilter(jint color, ref<android::graphics::PorterDuff_Mode> mode);
	void setColorFilter(jint color);
	void clearColorFilter();
	ref<android::graphics::ColorFilter> getColorFilter();
	void setColorFilter(ref<android::graphics::ColorFilter> cf);
	jint getImageAlpha();
	void setImageAlpha(jint alpha);
	void setAlpha(jint alpha);
	jboolean isOpaque();
	void onVisibilityAggregated(jboolean isVisible);
	void setVisibility(jint visibility);
	ref<java::lang::CharSequence> getAccessibilityClassName();

protected:

	ImageView(handle_type h) : base_(h) {}

};

} // namespace android::widget
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/ColorFilter.h>
#include <scapix/java_api/android/graphics/Matrix.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/graphics/drawable/Icon.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/widget/ImageView_ScaleType.h>
#include <scapix/java_api/java/lang/CharSequence.h>

namespace scapix::java_api {
namespace android::widget {

inline ref<ImageView> ImageView::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<ImageView> ImageView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<ImageView> ImageView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<ImageView> ImageView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline void ImageView::jumpDrawablesToCurrentState() { return call_method<SCAPIX_META_STRING("jumpDrawablesToCurrentState"), void>(); }
inline void ImageView::invalidateDrawable(ref<android::graphics::drawable::Drawable> dr) { return call_method<SCAPIX_META_STRING("invalidateDrawable"), void>(dr); }
inline jboolean ImageView::hasOverlappingRendering() { return call_method<SCAPIX_META_STRING("hasOverlappingRendering"), jboolean>(); }
inline jboolean ImageView::getAdjustViewBounds() { return call_method<SCAPIX_META_STRING("getAdjustViewBounds"), jboolean>(); }
inline void ImageView::setAdjustViewBounds(jboolean adjustViewBounds) { return call_method<SCAPIX_META_STRING("setAdjustViewBounds"), void>(adjustViewBounds); }
inline jint ImageView::getMaxWidth() { return call_method<SCAPIX_META_STRING("getMaxWidth"), jint>(); }
inline void ImageView::setMaxWidth(jint maxWidth) { return call_method<SCAPIX_META_STRING("setMaxWidth"), void>(maxWidth); }
inline jint ImageView::getMaxHeight() { return call_method<SCAPIX_META_STRING("getMaxHeight"), jint>(); }
inline void ImageView::setMaxHeight(jint maxHeight) { return call_method<SCAPIX_META_STRING("setMaxHeight"), void>(maxHeight); }
inline ref<android::graphics::drawable::Drawable> ImageView::getDrawable() { return call_method<SCAPIX_META_STRING("getDrawable"), ref<android::graphics::drawable::Drawable>>(); }
inline void ImageView::setImageResource(jint resId) { return call_method<SCAPIX_META_STRING("setImageResource"), void>(resId); }
inline void ImageView::setImageURI(ref<android::net::Uri> uri) { return call_method<SCAPIX_META_STRING("setImageURI"), void>(uri); }
inline void ImageView::setImageDrawable(ref<android::graphics::drawable::Drawable> drawable) { return call_method<SCAPIX_META_STRING("setImageDrawable"), void>(drawable); }
inline void ImageView::setImageIcon(ref<android::graphics::drawable::Icon> icon) { return call_method<SCAPIX_META_STRING("setImageIcon"), void>(icon); }
inline void ImageView::setImageTintList(ref<android::content::res::ColorStateList> tint) { return call_method<SCAPIX_META_STRING("setImageTintList"), void>(tint); }
inline ref<android::content::res::ColorStateList> ImageView::getImageTintList() { return call_method<SCAPIX_META_STRING("getImageTintList"), ref<android::content::res::ColorStateList>>(); }
inline void ImageView::setImageTintMode(ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<SCAPIX_META_STRING("setImageTintMode"), void>(tintMode); }
inline ref<android::graphics::PorterDuff_Mode> ImageView::getImageTintMode() { return call_method<SCAPIX_META_STRING("getImageTintMode"), ref<android::graphics::PorterDuff_Mode>>(); }
inline void ImageView::setImageBitmap(ref<android::graphics::Bitmap> bm) { return call_method<SCAPIX_META_STRING("setImageBitmap"), void>(bm); }
inline void ImageView::setImageState(ref<link::java::array<jint>> state, jboolean merge) { return call_method<SCAPIX_META_STRING("setImageState"), void>(state, merge); }
inline void ImageView::setSelected(jboolean selected) { return call_method<SCAPIX_META_STRING("setSelected"), void>(selected); }
inline void ImageView::setImageLevel(jint level) { return call_method<SCAPIX_META_STRING("setImageLevel"), void>(level); }
inline void ImageView::setScaleType(ref<android::widget::ImageView_ScaleType> scaleType) { return call_method<SCAPIX_META_STRING("setScaleType"), void>(scaleType); }
inline ref<android::widget::ImageView_ScaleType> ImageView::getScaleType() { return call_method<SCAPIX_META_STRING("getScaleType"), ref<android::widget::ImageView_ScaleType>>(); }
inline ref<android::graphics::Matrix> ImageView::getImageMatrix() { return call_method<SCAPIX_META_STRING("getImageMatrix"), ref<android::graphics::Matrix>>(); }
inline void ImageView::setImageMatrix(ref<android::graphics::Matrix> matrix) { return call_method<SCAPIX_META_STRING("setImageMatrix"), void>(matrix); }
inline jboolean ImageView::getCropToPadding() { return call_method<SCAPIX_META_STRING("getCropToPadding"), jboolean>(); }
inline void ImageView::setCropToPadding(jboolean cropToPadding) { return call_method<SCAPIX_META_STRING("setCropToPadding"), void>(cropToPadding); }
inline ref<link::java::array<jint>> ImageView::onCreateDrawableState(jint extraSpace) { return call_method<SCAPIX_META_STRING("onCreateDrawableState"), ref<link::java::array<jint>>>(extraSpace); }
inline void ImageView::onRtlPropertiesChanged(jint layoutDirection) { return call_method<SCAPIX_META_STRING("onRtlPropertiesChanged"), void>(layoutDirection); }
inline void ImageView::drawableHotspotChanged(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("drawableHotspotChanged"), void>(x, y); }
inline jint ImageView::getBaseline() { return call_method<SCAPIX_META_STRING("getBaseline"), jint>(); }
inline void ImageView::setBaseline(jint baseline) { return call_method<SCAPIX_META_STRING("setBaseline"), void>(baseline); }
inline void ImageView::setBaselineAlignBottom(jboolean aligned) { return call_method<SCAPIX_META_STRING("setBaselineAlignBottom"), void>(aligned); }
inline jboolean ImageView::getBaselineAlignBottom() { return call_method<SCAPIX_META_STRING("getBaselineAlignBottom"), jboolean>(); }
inline void ImageView::setColorFilter(jint color, ref<android::graphics::PorterDuff_Mode> mode) { return call_method<SCAPIX_META_STRING("setColorFilter"), void>(color, mode); }
inline void ImageView::setColorFilter(jint color) { return call_method<SCAPIX_META_STRING("setColorFilter"), void>(color); }
inline void ImageView::clearColorFilter() { return call_method<SCAPIX_META_STRING("clearColorFilter"), void>(); }
inline ref<android::graphics::ColorFilter> ImageView::getColorFilter() { return call_method<SCAPIX_META_STRING("getColorFilter"), ref<android::graphics::ColorFilter>>(); }
inline void ImageView::setColorFilter(ref<android::graphics::ColorFilter> cf) { return call_method<SCAPIX_META_STRING("setColorFilter"), void>(cf); }
inline jint ImageView::getImageAlpha() { return call_method<SCAPIX_META_STRING("getImageAlpha"), jint>(); }
inline void ImageView::setImageAlpha(jint alpha) { return call_method<SCAPIX_META_STRING("setImageAlpha"), void>(alpha); }
inline void ImageView::setAlpha(jint alpha) { return call_method<SCAPIX_META_STRING("setAlpha"), void>(alpha); }
inline jboolean ImageView::isOpaque() { return call_method<SCAPIX_META_STRING("isOpaque"), jboolean>(); }
inline void ImageView::onVisibilityAggregated(jboolean isVisible) { return call_method<SCAPIX_META_STRING("onVisibilityAggregated"), void>(isVisible); }
inline void ImageView::setVisibility(jint visibility) { return call_method<SCAPIX_META_STRING("setVisibility"), void>(visibility); }
inline ref<java::lang::CharSequence> ImageView::getAccessibilityClassName() { return call_method<SCAPIX_META_STRING("getAccessibilityClassName"), ref<java::lang::CharSequence>>(); }

} // namespace android::widget
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WIDGET_IMAGEVIEW_H
