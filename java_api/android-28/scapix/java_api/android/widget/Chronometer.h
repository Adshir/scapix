// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/widget/TextView.h>

#ifndef SCAPIX_ANDROID_WIDGET_CHRONOMETER_H
#define SCAPIX_ANDROID_WIDGET_CHRONOMETER_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::util { class AttributeSet; }
namespace android::widget { class Chronometer_OnChronometerTickListener; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::widget {

class Chronometer : public object_base<SCAPIX_META_STRING("android/widget/Chronometer"),
	android::widget::TextView>
{
public:

	using OnChronometerTickListener = Chronometer_OnChronometerTickListener;

	static ref<Chronometer> new_object(ref<android::content::Context> context);
	static ref<Chronometer> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<Chronometer> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<Chronometer> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	void setCountDown(jboolean countDown);
	jboolean isCountDown();
	jboolean isTheFinalCountDown();
	void setBase(jlong base);
	jlong getBase();
	void setFormat(ref<java::lang::String> format);
	ref<java::lang::String> getFormat();
	void setOnChronometerTickListener(ref<android::widget::Chronometer_OnChronometerTickListener> listener);
	ref<android::widget::Chronometer_OnChronometerTickListener> getOnChronometerTickListener();
	void start();
	void stop();
	ref<java::lang::CharSequence> getContentDescription();
	ref<java::lang::CharSequence> getAccessibilityClassName();

protected:

	Chronometer(handle_type h) : base_(h) {}

};

} // namespace android::widget
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/widget/Chronometer_OnChronometerTickListener.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::widget {

inline ref<Chronometer> Chronometer::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<Chronometer> Chronometer::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<Chronometer> Chronometer::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<Chronometer> Chronometer::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline void Chronometer::setCountDown(jboolean countDown) { return call_method<SCAPIX_META_STRING("setCountDown"), void>(countDown); }
inline jboolean Chronometer::isCountDown() { return call_method<SCAPIX_META_STRING("isCountDown"), jboolean>(); }
inline jboolean Chronometer::isTheFinalCountDown() { return call_method<SCAPIX_META_STRING("isTheFinalCountDown"), jboolean>(); }
inline void Chronometer::setBase(jlong base) { return call_method<SCAPIX_META_STRING("setBase"), void>(base); }
inline jlong Chronometer::getBase() { return call_method<SCAPIX_META_STRING("getBase"), jlong>(); }
inline void Chronometer::setFormat(ref<java::lang::String> format) { return call_method<SCAPIX_META_STRING("setFormat"), void>(format); }
inline ref<java::lang::String> Chronometer::getFormat() { return call_method<SCAPIX_META_STRING("getFormat"), ref<java::lang::String>>(); }
inline void Chronometer::setOnChronometerTickListener(ref<android::widget::Chronometer_OnChronometerTickListener> listener) { return call_method<SCAPIX_META_STRING("setOnChronometerTickListener"), void>(listener); }
inline ref<android::widget::Chronometer_OnChronometerTickListener> Chronometer::getOnChronometerTickListener() { return call_method<SCAPIX_META_STRING("getOnChronometerTickListener"), ref<android::widget::Chronometer_OnChronometerTickListener>>(); }
inline void Chronometer::start() { return call_method<SCAPIX_META_STRING("start"), void>(); }
inline void Chronometer::stop() { return call_method<SCAPIX_META_STRING("stop"), void>(); }
inline ref<java::lang::CharSequence> Chronometer::getContentDescription() { return call_method<SCAPIX_META_STRING("getContentDescription"), ref<java::lang::CharSequence>>(); }
inline ref<java::lang::CharSequence> Chronometer::getAccessibilityClassName() { return call_method<SCAPIX_META_STRING("getAccessibilityClassName"), ref<java::lang::CharSequence>>(); }

} // namespace android::widget
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WIDGET_CHRONOMETER_H
