// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/widget/AbsListView.h>

#ifndef SCAPIX_ANDROID_WIDGET_LISTVIEW_H
#define SCAPIX_ANDROID_WIDGET_LISTVIEW_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content { class Intent; }
namespace android::graphics { class Rect; }
namespace android::graphics::drawable { class Drawable; }
namespace android::util { class AttributeSet; }
namespace android::view { class KeyEvent; }
namespace android::view { class View; }
namespace android::view::accessibility { class AccessibilityNodeInfo; }
namespace android::widget { class ListAdapter; }
namespace java::lang { class CharSequence; }
namespace java::lang { class Object; }
namespace android::widget { class ListView_FixedViewInfo; }

namespace android::widget {

class ListView : public object_base<SCAPIX_META_STRING("android/widget/ListView"),
	android::widget::AbsListView>
{
public:

	using FixedViewInfo = ListView_FixedViewInfo;

	static ref<ListView> new_object(ref<android::content::Context> context);
	static ref<ListView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<ListView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<ListView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	jint getMaxScrollAmount();
	void addHeaderView(ref<android::view::View> v, ref<java::lang::Object> data, jboolean isSelectable);
	void addHeaderView(ref<android::view::View> v);
	jint getHeaderViewsCount();
	jboolean removeHeaderView(ref<android::view::View> v);
	void addFooterView(ref<android::view::View> v, ref<java::lang::Object> data, jboolean isSelectable);
	void addFooterView(ref<android::view::View> v);
	jint getFooterViewsCount();
	jboolean removeFooterView(ref<android::view::View> v);
	ref<android::widget::ListAdapter> getAdapter();
	void setRemoteViewsAdapter(ref<android::content::Intent> intent);
	void setAdapter(ref<android::widget::ListAdapter> adapter);
	jboolean requestChildRectangleOnScreen(ref<android::view::View> child, ref<android::graphics::Rect> rect, jboolean immediate);
	void smoothScrollToPosition(jint position);
	void smoothScrollByOffset(jint offset);
	void setSelection(jint position);
	void setSelectionAfterHeaderView();
	jboolean dispatchKeyEvent(ref<android::view::KeyEvent> event);
	jboolean onKeyDown(jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onKeyMultiple(jint keyCode, jint repeatCount, ref<android::view::KeyEvent> event);
	jboolean onKeyUp(jint keyCode, ref<android::view::KeyEvent> event);
	void setItemsCanFocus(jboolean itemsCanFocus);
	jboolean getItemsCanFocus();
	jboolean isOpaque();
	void setCacheColorHint(jint color);
	ref<android::graphics::drawable::Drawable> getDivider();
	void setDivider(ref<android::graphics::drawable::Drawable> divider);
	jint getDividerHeight();
	void setDividerHeight(jint height);
	void setHeaderDividersEnabled(jboolean headerDividersEnabled);
	jboolean areHeaderDividersEnabled();
	void setFooterDividersEnabled(jboolean footerDividersEnabled);
	jboolean areFooterDividersEnabled();
	void setOverscrollHeader(ref<android::graphics::drawable::Drawable> header);
	ref<android::graphics::drawable::Drawable> getOverscrollHeader();
	void setOverscrollFooter(ref<android::graphics::drawable::Drawable> footer);
	ref<android::graphics::drawable::Drawable> getOverscrollFooter();
	ref<link::java::array<jlong>> getCheckItemIds();
	ref<java::lang::CharSequence> getAccessibilityClassName();
	void onInitializeAccessibilityNodeInfoForItem(ref<android::view::View> view, jint position, ref<android::view::accessibility::AccessibilityNodeInfo> info);

protected:

	ListView(handle_type h) : base_(h) {}

};

} // namespace android::widget
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo.h>
#include <scapix/java_api/android/widget/ListAdapter.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Object.h>

namespace scapix::java_api {
namespace android::widget {

inline ref<ListView> ListView::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<ListView> ListView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<ListView> ListView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<ListView> ListView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline jint ListView::getMaxScrollAmount() { return call_method<SCAPIX_META_STRING("getMaxScrollAmount"), jint>(); }
inline void ListView::addHeaderView(ref<android::view::View> v, ref<java::lang::Object> data, jboolean isSelectable) { return call_method<SCAPIX_META_STRING("addHeaderView"), void>(v, data, isSelectable); }
inline void ListView::addHeaderView(ref<android::view::View> v) { return call_method<SCAPIX_META_STRING("addHeaderView"), void>(v); }
inline jint ListView::getHeaderViewsCount() { return call_method<SCAPIX_META_STRING("getHeaderViewsCount"), jint>(); }
inline jboolean ListView::removeHeaderView(ref<android::view::View> v) { return call_method<SCAPIX_META_STRING("removeHeaderView"), jboolean>(v); }
inline void ListView::addFooterView(ref<android::view::View> v, ref<java::lang::Object> data, jboolean isSelectable) { return call_method<SCAPIX_META_STRING("addFooterView"), void>(v, data, isSelectable); }
inline void ListView::addFooterView(ref<android::view::View> v) { return call_method<SCAPIX_META_STRING("addFooterView"), void>(v); }
inline jint ListView::getFooterViewsCount() { return call_method<SCAPIX_META_STRING("getFooterViewsCount"), jint>(); }
inline jboolean ListView::removeFooterView(ref<android::view::View> v) { return call_method<SCAPIX_META_STRING("removeFooterView"), jboolean>(v); }
inline ref<android::widget::ListAdapter> ListView::getAdapter() { return call_method<SCAPIX_META_STRING("getAdapter"), ref<android::widget::ListAdapter>>(); }
inline void ListView::setRemoteViewsAdapter(ref<android::content::Intent> intent) { return call_method<SCAPIX_META_STRING("setRemoteViewsAdapter"), void>(intent); }
inline void ListView::setAdapter(ref<android::widget::ListAdapter> adapter) { return call_method<SCAPIX_META_STRING("setAdapter"), void>(adapter); }
inline jboolean ListView::requestChildRectangleOnScreen(ref<android::view::View> child, ref<android::graphics::Rect> rect, jboolean immediate) { return call_method<SCAPIX_META_STRING("requestChildRectangleOnScreen"), jboolean>(child, rect, immediate); }
inline void ListView::smoothScrollToPosition(jint position) { return call_method<SCAPIX_META_STRING("smoothScrollToPosition"), void>(position); }
inline void ListView::smoothScrollByOffset(jint offset) { return call_method<SCAPIX_META_STRING("smoothScrollByOffset"), void>(offset); }
inline void ListView::setSelection(jint position) { return call_method<SCAPIX_META_STRING("setSelection"), void>(position); }
inline void ListView::setSelectionAfterHeaderView() { return call_method<SCAPIX_META_STRING("setSelectionAfterHeaderView"), void>(); }
inline jboolean ListView::dispatchKeyEvent(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("dispatchKeyEvent"), jboolean>(event); }
inline jboolean ListView::onKeyDown(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyDown"), jboolean>(keyCode, event); }
inline jboolean ListView::onKeyMultiple(jint keyCode, jint repeatCount, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyMultiple"), jboolean>(keyCode, repeatCount, event); }
inline jboolean ListView::onKeyUp(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyUp"), jboolean>(keyCode, event); }
inline void ListView::setItemsCanFocus(jboolean itemsCanFocus) { return call_method<SCAPIX_META_STRING("setItemsCanFocus"), void>(itemsCanFocus); }
inline jboolean ListView::getItemsCanFocus() { return call_method<SCAPIX_META_STRING("getItemsCanFocus"), jboolean>(); }
inline jboolean ListView::isOpaque() { return call_method<SCAPIX_META_STRING("isOpaque"), jboolean>(); }
inline void ListView::setCacheColorHint(jint color) { return call_method<SCAPIX_META_STRING("setCacheColorHint"), void>(color); }
inline ref<android::graphics::drawable::Drawable> ListView::getDivider() { return call_method<SCAPIX_META_STRING("getDivider"), ref<android::graphics::drawable::Drawable>>(); }
inline void ListView::setDivider(ref<android::graphics::drawable::Drawable> divider) { return call_method<SCAPIX_META_STRING("setDivider"), void>(divider); }
inline jint ListView::getDividerHeight() { return call_method<SCAPIX_META_STRING("getDividerHeight"), jint>(); }
inline void ListView::setDividerHeight(jint height) { return call_method<SCAPIX_META_STRING("setDividerHeight"), void>(height); }
inline void ListView::setHeaderDividersEnabled(jboolean headerDividersEnabled) { return call_method<SCAPIX_META_STRING("setHeaderDividersEnabled"), void>(headerDividersEnabled); }
inline jboolean ListView::areHeaderDividersEnabled() { return call_method<SCAPIX_META_STRING("areHeaderDividersEnabled"), jboolean>(); }
inline void ListView::setFooterDividersEnabled(jboolean footerDividersEnabled) { return call_method<SCAPIX_META_STRING("setFooterDividersEnabled"), void>(footerDividersEnabled); }
inline jboolean ListView::areFooterDividersEnabled() { return call_method<SCAPIX_META_STRING("areFooterDividersEnabled"), jboolean>(); }
inline void ListView::setOverscrollHeader(ref<android::graphics::drawable::Drawable> header) { return call_method<SCAPIX_META_STRING("setOverscrollHeader"), void>(header); }
inline ref<android::graphics::drawable::Drawable> ListView::getOverscrollHeader() { return call_method<SCAPIX_META_STRING("getOverscrollHeader"), ref<android::graphics::drawable::Drawable>>(); }
inline void ListView::setOverscrollFooter(ref<android::graphics::drawable::Drawable> footer) { return call_method<SCAPIX_META_STRING("setOverscrollFooter"), void>(footer); }
inline ref<android::graphics::drawable::Drawable> ListView::getOverscrollFooter() { return call_method<SCAPIX_META_STRING("getOverscrollFooter"), ref<android::graphics::drawable::Drawable>>(); }
inline ref<link::java::array<jlong>> ListView::getCheckItemIds() { return call_method<SCAPIX_META_STRING("getCheckItemIds"), ref<link::java::array<jlong>>>(); }
inline ref<java::lang::CharSequence> ListView::getAccessibilityClassName() { return call_method<SCAPIX_META_STRING("getAccessibilityClassName"), ref<java::lang::CharSequence>>(); }
inline void ListView::onInitializeAccessibilityNodeInfoForItem(ref<android::view::View> view, jint position, ref<android::view::accessibility::AccessibilityNodeInfo> info) { return call_method<SCAPIX_META_STRING("onInitializeAccessibilityNodeInfoForItem"), void>(view, position, info); }

} // namespace android::widget
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WIDGET_LISTVIEW_H
