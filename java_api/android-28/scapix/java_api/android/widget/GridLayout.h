// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/view/ViewGroup.h>

#ifndef SCAPIX_ANDROID_WIDGET_GRIDLAYOUT_H
#define SCAPIX_ANDROID_WIDGET_GRIDLAYOUT_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::util { class AttributeSet; }
namespace android::view { class View; }
namespace android::widget { class GridLayout_Alignment; }
namespace android::widget { class GridLayout_LayoutParams; }
namespace android::widget { class GridLayout_Spec; }
namespace java::lang { class CharSequence; }

namespace android::widget {

class GridLayout : public object_base<SCAPIX_META_STRING("android/widget/GridLayout"),
	android::view::ViewGroup>
{
public:

	using Spec = GridLayout_Spec;
	using LayoutParams = GridLayout_LayoutParams;
	using Alignment = GridLayout_Alignment;

	static jint ALIGN_BOUNDS_();
	static jint ALIGN_MARGINS_();
	static ref<android::widget::GridLayout_Alignment> BASELINE_();
	static ref<android::widget::GridLayout_Alignment> BOTTOM_();
	static ref<android::widget::GridLayout_Alignment> CENTER_();
	static ref<android::widget::GridLayout_Alignment> END_();
	static ref<android::widget::GridLayout_Alignment> FILL_();
	static jint HORIZONTAL_();
	static ref<android::widget::GridLayout_Alignment> LEFT_();
	static ref<android::widget::GridLayout_Alignment> RIGHT_();
	static ref<android::widget::GridLayout_Alignment> START_();
	static ref<android::widget::GridLayout_Alignment> TOP_();
	static jint UNDEFINED_();
	static jint VERTICAL_();

	static ref<GridLayout> new_object(ref<android::content::Context> context);
	static ref<GridLayout> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<GridLayout> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<GridLayout> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	jint getOrientation();
	void setOrientation(jint orientation);
	jint getRowCount();
	void setRowCount(jint rowCount);
	jint getColumnCount();
	void setColumnCount(jint columnCount);
	jboolean getUseDefaultMargins();
	void setUseDefaultMargins(jboolean useDefaultMargins);
	jint getAlignmentMode();
	void setAlignmentMode(jint alignmentMode);
	jboolean isRowOrderPreserved();
	void setRowOrderPreserved(jboolean rowOrderPreserved);
	jboolean isColumnOrderPreserved();
	void setColumnOrderPreserved(jboolean columnOrderPreserved);
	ref<android::widget::GridLayout_LayoutParams> generateLayoutParams(ref<android::util::AttributeSet> attrs);
	void onViewAdded(ref<android::view::View> child);
	void onViewRemoved(ref<android::view::View> child);
	void requestLayout();
	ref<java::lang::CharSequence> getAccessibilityClassName();
	static ref<android::widget::GridLayout_Spec> spec(jint start, jint size, ref<android::widget::GridLayout_Alignment> alignment, jfloat weight);
	static ref<android::widget::GridLayout_Spec> spec(jint start, ref<android::widget::GridLayout_Alignment> alignment, jfloat weight);
	static ref<android::widget::GridLayout_Spec> spec(jint start, jint size, jfloat weight);
	static ref<android::widget::GridLayout_Spec> spec(jint start, jfloat weight);
	static ref<android::widget::GridLayout_Spec> spec(jint start, jint size, ref<android::widget::GridLayout_Alignment> alignment);
	static ref<android::widget::GridLayout_Spec> spec(jint start, ref<android::widget::GridLayout_Alignment> alignment);
	static ref<android::widget::GridLayout_Spec> spec(jint start, jint size);
	static ref<android::widget::GridLayout_Spec> spec(jint start);

protected:

	GridLayout(handle_type h) : base_(h) {}

};

} // namespace android::widget
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/widget/GridLayout_Alignment.h>
#include <scapix/java_api/android/widget/GridLayout_LayoutParams.h>
#include <scapix/java_api/android/widget/GridLayout_Spec.h>
#include <scapix/java_api/java/lang/CharSequence.h>

namespace scapix::java_api {
namespace android::widget {

inline jint GridLayout::ALIGN_BOUNDS_() { return get_static_field<SCAPIX_META_STRING("ALIGN_BOUNDS"), jint>(); }
inline jint GridLayout::ALIGN_MARGINS_() { return get_static_field<SCAPIX_META_STRING("ALIGN_MARGINS"), jint>(); }
inline ref<android::widget::GridLayout_Alignment> GridLayout::BASELINE_() { return get_static_field<SCAPIX_META_STRING("BASELINE"), ref<android::widget::GridLayout_Alignment>>(); }
inline ref<android::widget::GridLayout_Alignment> GridLayout::BOTTOM_() { return get_static_field<SCAPIX_META_STRING("BOTTOM"), ref<android::widget::GridLayout_Alignment>>(); }
inline ref<android::widget::GridLayout_Alignment> GridLayout::CENTER_() { return get_static_field<SCAPIX_META_STRING("CENTER"), ref<android::widget::GridLayout_Alignment>>(); }
inline ref<android::widget::GridLayout_Alignment> GridLayout::END_() { return get_static_field<SCAPIX_META_STRING("END"), ref<android::widget::GridLayout_Alignment>>(); }
inline ref<android::widget::GridLayout_Alignment> GridLayout::FILL_() { return get_static_field<SCAPIX_META_STRING("FILL"), ref<android::widget::GridLayout_Alignment>>(); }
inline jint GridLayout::HORIZONTAL_() { return get_static_field<SCAPIX_META_STRING("HORIZONTAL"), jint>(); }
inline ref<android::widget::GridLayout_Alignment> GridLayout::LEFT_() { return get_static_field<SCAPIX_META_STRING("LEFT"), ref<android::widget::GridLayout_Alignment>>(); }
inline ref<android::widget::GridLayout_Alignment> GridLayout::RIGHT_() { return get_static_field<SCAPIX_META_STRING("RIGHT"), ref<android::widget::GridLayout_Alignment>>(); }
inline ref<android::widget::GridLayout_Alignment> GridLayout::START_() { return get_static_field<SCAPIX_META_STRING("START"), ref<android::widget::GridLayout_Alignment>>(); }
inline ref<android::widget::GridLayout_Alignment> GridLayout::TOP_() { return get_static_field<SCAPIX_META_STRING("TOP"), ref<android::widget::GridLayout_Alignment>>(); }
inline jint GridLayout::UNDEFINED_() { return get_static_field<SCAPIX_META_STRING("UNDEFINED"), jint>(); }
inline jint GridLayout::VERTICAL_() { return get_static_field<SCAPIX_META_STRING("VERTICAL"), jint>(); }
inline ref<GridLayout> GridLayout::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<GridLayout> GridLayout::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<GridLayout> GridLayout::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<GridLayout> GridLayout::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline jint GridLayout::getOrientation() { return call_method<SCAPIX_META_STRING("getOrientation"), jint>(); }
inline void GridLayout::setOrientation(jint orientation) { return call_method<SCAPIX_META_STRING("setOrientation"), void>(orientation); }
inline jint GridLayout::getRowCount() { return call_method<SCAPIX_META_STRING("getRowCount"), jint>(); }
inline void GridLayout::setRowCount(jint rowCount) { return call_method<SCAPIX_META_STRING("setRowCount"), void>(rowCount); }
inline jint GridLayout::getColumnCount() { return call_method<SCAPIX_META_STRING("getColumnCount"), jint>(); }
inline void GridLayout::setColumnCount(jint columnCount) { return call_method<SCAPIX_META_STRING("setColumnCount"), void>(columnCount); }
inline jboolean GridLayout::getUseDefaultMargins() { return call_method<SCAPIX_META_STRING("getUseDefaultMargins"), jboolean>(); }
inline void GridLayout::setUseDefaultMargins(jboolean useDefaultMargins) { return call_method<SCAPIX_META_STRING("setUseDefaultMargins"), void>(useDefaultMargins); }
inline jint GridLayout::getAlignmentMode() { return call_method<SCAPIX_META_STRING("getAlignmentMode"), jint>(); }
inline void GridLayout::setAlignmentMode(jint alignmentMode) { return call_method<SCAPIX_META_STRING("setAlignmentMode"), void>(alignmentMode); }
inline jboolean GridLayout::isRowOrderPreserved() { return call_method<SCAPIX_META_STRING("isRowOrderPreserved"), jboolean>(); }
inline void GridLayout::setRowOrderPreserved(jboolean rowOrderPreserved) { return call_method<SCAPIX_META_STRING("setRowOrderPreserved"), void>(rowOrderPreserved); }
inline jboolean GridLayout::isColumnOrderPreserved() { return call_method<SCAPIX_META_STRING("isColumnOrderPreserved"), jboolean>(); }
inline void GridLayout::setColumnOrderPreserved(jboolean columnOrderPreserved) { return call_method<SCAPIX_META_STRING("setColumnOrderPreserved"), void>(columnOrderPreserved); }
inline ref<android::widget::GridLayout_LayoutParams> GridLayout::generateLayoutParams(ref<android::util::AttributeSet> attrs) { return call_method<SCAPIX_META_STRING("generateLayoutParams"), ref<android::widget::GridLayout_LayoutParams>>(attrs); }
inline void GridLayout::onViewAdded(ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("onViewAdded"), void>(child); }
inline void GridLayout::onViewRemoved(ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("onViewRemoved"), void>(child); }
inline void GridLayout::requestLayout() { return call_method<SCAPIX_META_STRING("requestLayout"), void>(); }
inline ref<java::lang::CharSequence> GridLayout::getAccessibilityClassName() { return call_method<SCAPIX_META_STRING("getAccessibilityClassName"), ref<java::lang::CharSequence>>(); }
inline ref<android::widget::GridLayout_Spec> GridLayout::spec(jint start, jint size, ref<android::widget::GridLayout_Alignment> alignment, jfloat weight) { return call_static_method<SCAPIX_META_STRING("spec"), ref<android::widget::GridLayout_Spec>>(start, size, alignment, weight); }
inline ref<android::widget::GridLayout_Spec> GridLayout::spec(jint start, ref<android::widget::GridLayout_Alignment> alignment, jfloat weight) { return call_static_method<SCAPIX_META_STRING("spec"), ref<android::widget::GridLayout_Spec>>(start, alignment, weight); }
inline ref<android::widget::GridLayout_Spec> GridLayout::spec(jint start, jint size, jfloat weight) { return call_static_method<SCAPIX_META_STRING("spec"), ref<android::widget::GridLayout_Spec>>(start, size, weight); }
inline ref<android::widget::GridLayout_Spec> GridLayout::spec(jint start, jfloat weight) { return call_static_method<SCAPIX_META_STRING("spec"), ref<android::widget::GridLayout_Spec>>(start, weight); }
inline ref<android::widget::GridLayout_Spec> GridLayout::spec(jint start, jint size, ref<android::widget::GridLayout_Alignment> alignment) { return call_static_method<SCAPIX_META_STRING("spec"), ref<android::widget::GridLayout_Spec>>(start, size, alignment); }
inline ref<android::widget::GridLayout_Spec> GridLayout::spec(jint start, ref<android::widget::GridLayout_Alignment> alignment) { return call_static_method<SCAPIX_META_STRING("spec"), ref<android::widget::GridLayout_Spec>>(start, alignment); }
inline ref<android::widget::GridLayout_Spec> GridLayout::spec(jint start, jint size) { return call_static_method<SCAPIX_META_STRING("spec"), ref<android::widget::GridLayout_Spec>>(start, size); }
inline ref<android::widget::GridLayout_Spec> GridLayout::spec(jint start) { return call_static_method<SCAPIX_META_STRING("spec"), ref<android::widget::GridLayout_Spec>>(start); }

} // namespace android::widget
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WIDGET_GRIDLAYOUT_H
