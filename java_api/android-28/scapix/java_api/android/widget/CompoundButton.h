// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/widget/Button.h>
#include <scapix/java_api/android/widget/Checkable.h>

#ifndef SCAPIX_ANDROID_WIDGET_COMPOUNDBUTTON_H
#define SCAPIX_ANDROID_WIDGET_COMPOUNDBUTTON_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content::res { class ColorStateList; }
namespace android::graphics { class PorterDuff_Mode; }
namespace android::graphics::drawable { class Drawable; }
namespace android::os { class Parcelable; }
namespace android::util { class AttributeSet; }
namespace android::view { class ViewStructure; }
namespace android::view::autofill { class AutofillValue; }
namespace android::widget { class CompoundButton_OnCheckedChangeListener; }
namespace java::lang { class CharSequence; }

namespace android::widget {

class CompoundButton : public object_base<SCAPIX_META_STRING("android/widget/CompoundButton"),
	android::widget::Button,
	android::widget::Checkable>
{
public:

	using OnCheckedChangeListener = CompoundButton_OnCheckedChangeListener;

	static ref<CompoundButton> new_object(ref<android::content::Context> context);
	static ref<CompoundButton> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<CompoundButton> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<CompoundButton> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	void toggle();
	jboolean performClick();
	jboolean isChecked();
	void setChecked(jboolean checked);
	void setOnCheckedChangeListener(ref<android::widget::CompoundButton_OnCheckedChangeListener> listener);
	void setButtonDrawable(jint resId);
	void setButtonDrawable(ref<android::graphics::drawable::Drawable> drawable);
	ref<android::graphics::drawable::Drawable> getButtonDrawable();
	void setButtonTintList(ref<android::content::res::ColorStateList> tint);
	ref<android::content::res::ColorStateList> getButtonTintList();
	void setButtonTintMode(ref<android::graphics::PorterDuff_Mode> tintMode);
	ref<android::graphics::PorterDuff_Mode> getButtonTintMode();
	ref<java::lang::CharSequence> getAccessibilityClassName();
	jint getCompoundPaddingLeft();
	jint getCompoundPaddingRight();
	void drawableHotspotChanged(jfloat x, jfloat y);
	void jumpDrawablesToCurrentState();
	ref<android::os::Parcelable> onSaveInstanceState();
	void onRestoreInstanceState(ref<android::os::Parcelable> state);
	void onProvideAutofillStructure(ref<android::view::ViewStructure> structure, jint flags);
	void autofill(ref<android::view::autofill::AutofillValue> value);
	jint getAutofillType();
	ref<android::view::autofill::AutofillValue> getAutofillValue();

protected:

	CompoundButton(handle_type h) : base_(h) {}

};

} // namespace android::widget
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/ViewStructure.h>
#include <scapix/java_api/android/view/autofill/AutofillValue.h>
#include <scapix/java_api/android/widget/CompoundButton_OnCheckedChangeListener.h>
#include <scapix/java_api/java/lang/CharSequence.h>

namespace scapix::java_api {
namespace android::widget {

inline ref<CompoundButton> CompoundButton::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<CompoundButton> CompoundButton::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<CompoundButton> CompoundButton::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<CompoundButton> CompoundButton::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline void CompoundButton::toggle() { return call_method<SCAPIX_META_STRING("toggle"), void>(); }
inline jboolean CompoundButton::performClick() { return call_method<SCAPIX_META_STRING("performClick"), jboolean>(); }
inline jboolean CompoundButton::isChecked() { return call_method<SCAPIX_META_STRING("isChecked"), jboolean>(); }
inline void CompoundButton::setChecked(jboolean checked) { return call_method<SCAPIX_META_STRING("setChecked"), void>(checked); }
inline void CompoundButton::setOnCheckedChangeListener(ref<android::widget::CompoundButton_OnCheckedChangeListener> listener) { return call_method<SCAPIX_META_STRING("setOnCheckedChangeListener"), void>(listener); }
inline void CompoundButton::setButtonDrawable(jint resId) { return call_method<SCAPIX_META_STRING("setButtonDrawable"), void>(resId); }
inline void CompoundButton::setButtonDrawable(ref<android::graphics::drawable::Drawable> drawable) { return call_method<SCAPIX_META_STRING("setButtonDrawable"), void>(drawable); }
inline ref<android::graphics::drawable::Drawable> CompoundButton::getButtonDrawable() { return call_method<SCAPIX_META_STRING("getButtonDrawable"), ref<android::graphics::drawable::Drawable>>(); }
inline void CompoundButton::setButtonTintList(ref<android::content::res::ColorStateList> tint) { return call_method<SCAPIX_META_STRING("setButtonTintList"), void>(tint); }
inline ref<android::content::res::ColorStateList> CompoundButton::getButtonTintList() { return call_method<SCAPIX_META_STRING("getButtonTintList"), ref<android::content::res::ColorStateList>>(); }
inline void CompoundButton::setButtonTintMode(ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<SCAPIX_META_STRING("setButtonTintMode"), void>(tintMode); }
inline ref<android::graphics::PorterDuff_Mode> CompoundButton::getButtonTintMode() { return call_method<SCAPIX_META_STRING("getButtonTintMode"), ref<android::graphics::PorterDuff_Mode>>(); }
inline ref<java::lang::CharSequence> CompoundButton::getAccessibilityClassName() { return call_method<SCAPIX_META_STRING("getAccessibilityClassName"), ref<java::lang::CharSequence>>(); }
inline jint CompoundButton::getCompoundPaddingLeft() { return call_method<SCAPIX_META_STRING("getCompoundPaddingLeft"), jint>(); }
inline jint CompoundButton::getCompoundPaddingRight() { return call_method<SCAPIX_META_STRING("getCompoundPaddingRight"), jint>(); }
inline void CompoundButton::drawableHotspotChanged(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("drawableHotspotChanged"), void>(x, y); }
inline void CompoundButton::jumpDrawablesToCurrentState() { return call_method<SCAPIX_META_STRING("jumpDrawablesToCurrentState"), void>(); }
inline ref<android::os::Parcelable> CompoundButton::onSaveInstanceState() { return call_method<SCAPIX_META_STRING("onSaveInstanceState"), ref<android::os::Parcelable>>(); }
inline void CompoundButton::onRestoreInstanceState(ref<android::os::Parcelable> state) { return call_method<SCAPIX_META_STRING("onRestoreInstanceState"), void>(state); }
inline void CompoundButton::onProvideAutofillStructure(ref<android::view::ViewStructure> structure, jint flags) { return call_method<SCAPIX_META_STRING("onProvideAutofillStructure"), void>(structure, flags); }
inline void CompoundButton::autofill(ref<android::view::autofill::AutofillValue> value) { return call_method<SCAPIX_META_STRING("autofill"), void>(value); }
inline jint CompoundButton::getAutofillType() { return call_method<SCAPIX_META_STRING("getAutofillType"), jint>(); }
inline ref<android::view::autofill::AutofillValue> CompoundButton::getAutofillValue() { return call_method<SCAPIX_META_STRING("getAutofillValue"), ref<android::view::autofill::AutofillValue>>(); }

} // namespace android::widget
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WIDGET_COMPOUNDBUTTON_H
