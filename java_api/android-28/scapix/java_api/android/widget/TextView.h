// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewTreeObserver_OnPreDrawListener.h>

#ifndef SCAPIX_ANDROID_WIDGET_TEXTVIEW_H
#define SCAPIX_ANDROID_WIDGET_TEXTVIEW_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content::res { class ColorStateList; }
namespace android::graphics { class PorterDuff_Mode; }
namespace android::graphics { class Rect; }
namespace android::graphics { class Typeface; }
namespace android::graphics::drawable { class Drawable; }
namespace android::os { class Bundle; }
namespace android::os { class LocaleList; }
namespace android::os { class Parcelable; }
namespace android::text { class Editable; }
namespace android::text { class Editable_Factory; }
namespace android::text { class InputFilter; }
namespace android::text { class Layout; }
namespace android::text { class PrecomputedText_Params; }
namespace android::text { class Spannable_Factory; }
namespace android::text { class TextPaint; }
namespace android::text { class TextUtils_TruncateAt; }
namespace android::text { class TextWatcher; }
namespace android::text::method { class KeyListener; }
namespace android::text::method { class MovementMethod; }
namespace android::text::method { class TransformationMethod; }
namespace android::text::style { class URLSpan; }
namespace android::util { class AttributeSet; }
namespace android::view { class ActionMode_Callback; }
namespace android::view { class DragEvent; }
namespace android::view { class KeyEvent; }
namespace android::view { class MotionEvent; }
namespace android::view { class PointerIcon; }
namespace android::view { class ViewStructure; }
namespace android::view::accessibility { class AccessibilityEvent; }
namespace android::view::accessibility { class AccessibilityNodeInfo; }
namespace android::view::autofill { class AutofillValue; }
namespace android::view::inputmethod { class CompletionInfo; }
namespace android::view::inputmethod { class CorrectionInfo; }
namespace android::view::inputmethod { class EditorInfo; }
namespace android::view::inputmethod { class ExtractedText; }
namespace android::view::inputmethod { class ExtractedTextRequest; }
namespace android::view::inputmethod { class InputConnection; }
namespace android::view::textclassifier { class TextClassifier; }
namespace android::widget { class Scroller; }
namespace android::widget { class TextView_BufferType; }
namespace android::widget { class TextView_OnEditorActionListener; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::util { class ArrayList; }
namespace java::util { class Locale; }
namespace android::widget { class TextView_SavedState; }

namespace android::widget {

class TextView : public object_base<SCAPIX_META_STRING("android/widget/TextView"),
	android::view::View,
	android::view::ViewTreeObserver_OnPreDrawListener>
{
public:

	using SavedState = TextView_SavedState;
	using OnEditorActionListener = TextView_OnEditorActionListener;
	using BufferType = TextView_BufferType;

	static jint AUTO_SIZE_TEXT_TYPE_NONE_();
	static jint AUTO_SIZE_TEXT_TYPE_UNIFORM_();

	static ref<TextView> new_object(ref<android::content::Context> context);
	static ref<TextView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<TextView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<TextView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	void setAutoSizeTextTypeWithDefaults(jint autoSizeTextType);
	void setAutoSizeTextTypeUniformWithConfiguration(jint autoSizeMinTextSize, jint autoSizeMaxTextSize, jint autoSizeStepGranularity, jint unit);
	void setAutoSizeTextTypeUniformWithPresetSizes(ref<link::java::array<jint>> presetSizes, jint unit);
	jint getAutoSizeTextType();
	jint getAutoSizeStepGranularity();
	jint getAutoSizeMinTextSize();
	jint getAutoSizeMaxTextSize();
	ref<link::java::array<jint>> getAutoSizeTextAvailableSizes();
	void setEnabled(jboolean enabled);
	void setTypeface(ref<android::graphics::Typeface> tf, jint style);
	ref<java::lang::CharSequence> getText();
	jint length();
	ref<android::text::Editable> getEditableText();
	jint getLineHeight();
	ref<android::text::Layout> getLayout();
	ref<android::text::method::KeyListener> getKeyListener();
	void setKeyListener(ref<android::text::method::KeyListener> input);
	ref<android::text::method::MovementMethod> getMovementMethod();
	void setMovementMethod(ref<android::text::method::MovementMethod> movement);
	ref<android::text::method::TransformationMethod> getTransformationMethod();
	void setTransformationMethod(ref<android::text::method::TransformationMethod> method);
	jint getCompoundPaddingTop();
	jint getCompoundPaddingBottom();
	jint getCompoundPaddingLeft();
	jint getCompoundPaddingRight();
	jint getCompoundPaddingStart();
	jint getCompoundPaddingEnd();
	jint getExtendedPaddingTop();
	jint getExtendedPaddingBottom();
	jint getTotalPaddingLeft();
	jint getTotalPaddingRight();
	jint getTotalPaddingStart();
	jint getTotalPaddingEnd();
	jint getTotalPaddingTop();
	jint getTotalPaddingBottom();
	void setCompoundDrawables(ref<android::graphics::drawable::Drawable> left, ref<android::graphics::drawable::Drawable> top, ref<android::graphics::drawable::Drawable> right, ref<android::graphics::drawable::Drawable> bottom);
	void setCompoundDrawablesWithIntrinsicBounds(jint left, jint top, jint right, jint bottom);
	void setCompoundDrawablesWithIntrinsicBounds(ref<android::graphics::drawable::Drawable> left, ref<android::graphics::drawable::Drawable> top, ref<android::graphics::drawable::Drawable> right, ref<android::graphics::drawable::Drawable> bottom);
	void setCompoundDrawablesRelative(ref<android::graphics::drawable::Drawable> start, ref<android::graphics::drawable::Drawable> top, ref<android::graphics::drawable::Drawable> end, ref<android::graphics::drawable::Drawable> bottom);
	void setCompoundDrawablesRelativeWithIntrinsicBounds(jint start, jint top, jint end, jint bottom);
	void setCompoundDrawablesRelativeWithIntrinsicBounds(ref<android::graphics::drawable::Drawable> start, ref<android::graphics::drawable::Drawable> top, ref<android::graphics::drawable::Drawable> end, ref<android::graphics::drawable::Drawable> bottom);
	ref<link::java::array<android::graphics::drawable::Drawable>> getCompoundDrawables();
	ref<link::java::array<android::graphics::drawable::Drawable>> getCompoundDrawablesRelative();
	void setCompoundDrawablePadding(jint pad);
	jint getCompoundDrawablePadding();
	void setCompoundDrawableTintList(ref<android::content::res::ColorStateList> tint);
	ref<android::content::res::ColorStateList> getCompoundDrawableTintList();
	void setCompoundDrawableTintMode(ref<android::graphics::PorterDuff_Mode> tintMode);
	ref<android::graphics::PorterDuff_Mode> getCompoundDrawableTintMode();
	void setPadding(jint left, jint top, jint right, jint bottom);
	void setPaddingRelative(jint start, jint top, jint end, jint bottom);
	void setFirstBaselineToTopHeight(jint firstBaselineToTopHeight);
	void setLastBaselineToBottomHeight(jint lastBaselineToBottomHeight);
	jint getFirstBaselineToTopHeight();
	jint getLastBaselineToBottomHeight();
	jint getAutoLinkMask();
	void setTextAppearance(jint resId);
	void setTextAppearance(ref<android::content::Context> context, jint resId);
	ref<java::util::Locale> getTextLocale();
	ref<android::os::LocaleList> getTextLocales();
	void setTextLocale(ref<java::util::Locale> locale);
	void setTextLocales(ref<android::os::LocaleList> locales);
	jfloat getTextSize();
	void setTextSize(jfloat size);
	void setTextSize(jint unit, jfloat size);
	jfloat getTextScaleX();
	void setTextScaleX(jfloat size);
	void setTypeface(ref<android::graphics::Typeface> tf);
	ref<android::graphics::Typeface> getTypeface();
	void setElegantTextHeight(jboolean elegant);
	void setFallbackLineSpacing(jboolean enabled);
	jboolean isFallbackLineSpacing();
	jboolean isElegantTextHeight();
	jfloat getLetterSpacing();
	void setLetterSpacing(jfloat letterSpacing);
	ref<java::lang::String> getFontFeatureSettings();
	ref<java::lang::String> getFontVariationSettings();
	void setBreakStrategy(jint breakStrategy);
	jint getBreakStrategy();
	void setHyphenationFrequency(jint hyphenationFrequency);
	jint getHyphenationFrequency();
	ref<android::text::PrecomputedText_Params> getTextMetricsParams();
	void setTextMetricsParams(ref<android::text::PrecomputedText_Params> params);
	void setJustificationMode(jint justificationMode);
	jint getJustificationMode();
	void setFontFeatureSettings(ref<java::lang::String> fontFeatureSettings);
	jboolean setFontVariationSettings(ref<java::lang::String> fontVariationSettings);
	void setTextColor(jint color);
	void setTextColor(ref<android::content::res::ColorStateList> colors);
	ref<android::content::res::ColorStateList> getTextColors();
	jint getCurrentTextColor();
	void setHighlightColor(jint color);
	jint getHighlightColor();
	void setShowSoftInputOnFocus(jboolean show);
	jboolean getShowSoftInputOnFocus();
	void setShadowLayer(jfloat radius, jfloat dx, jfloat dy, jint color);
	jfloat getShadowRadius();
	jfloat getShadowDx();
	jfloat getShadowDy();
	jint getShadowColor();
	ref<android::text::TextPaint> getPaint();
	void setAutoLinkMask(jint mask);
	void setLinksClickable(jboolean whether);
	jboolean getLinksClickable();
	ref<link::java::array<android::text::style::URLSpan>> getUrls();
	void setHintTextColor(jint color);
	void setHintTextColor(ref<android::content::res::ColorStateList> colors);
	ref<android::content::res::ColorStateList> getHintTextColors();
	jint getCurrentHintTextColor();
	void setLinkTextColor(jint color);
	void setLinkTextColor(ref<android::content::res::ColorStateList> colors);
	ref<android::content::res::ColorStateList> getLinkTextColors();
	void setGravity(jint gravity);
	jint getGravity();
	jint getPaintFlags();
	void setPaintFlags(jint flags);
	void setHorizontallyScrolling(jboolean whether);
	void setMinLines(jint minLines);
	jint getMinLines();
	void setMinHeight(jint minPixels);
	jint getMinHeight();
	void setMaxLines(jint maxLines);
	jint getMaxLines();
	void setMaxHeight(jint maxPixels);
	jint getMaxHeight();
	void setLines(jint lines);
	void setHeight(jint pixels);
	void setMinEms(jint minEms);
	jint getMinEms();
	void setMinWidth(jint minPixels);
	jint getMinWidth();
	void setMaxEms(jint maxEms);
	jint getMaxEms();
	void setMaxWidth(jint maxPixels);
	jint getMaxWidth();
	void setEms(jint ems);
	void setWidth(jint pixels);
	void setLineSpacing(jfloat add, jfloat mult);
	jfloat getLineSpacingMultiplier();
	jfloat getLineSpacingExtra();
	void setLineHeight(jint lineHeight);
	void append(ref<java::lang::CharSequence> text);
	void append(ref<java::lang::CharSequence> text, jint start, jint end);
	void drawableHotspotChanged(jfloat x, jfloat y);
	ref<android::os::Parcelable> onSaveInstanceState();
	void onRestoreInstanceState(ref<android::os::Parcelable> state);
	void setFreezesText(jboolean freezesText);
	jboolean getFreezesText();
	void setEditableFactory(ref<android::text::Editable_Factory> factory);
	void setSpannableFactory(ref<android::text::Spannable_Factory> factory);
	void setText(ref<java::lang::CharSequence> text);
	void setTextKeepState(ref<java::lang::CharSequence> text);
	void setText(ref<java::lang::CharSequence> text, ref<android::widget::TextView_BufferType> type);
	void setText(ref<link::java::array<jchar>> text, jint start, jint len);
	void setTextKeepState(ref<java::lang::CharSequence> text, ref<android::widget::TextView_BufferType> type);
	void setText(jint resid);
	void setText(jint resid, ref<android::widget::TextView_BufferType> type);
	void setHint(ref<java::lang::CharSequence> hint);
	void setHint(jint resid);
	ref<java::lang::CharSequence> getHint();
	void setInputType(jint type);
	void setRawInputType(jint type);
	jint getInputType();
	void setImeOptions(jint imeOptions);
	jint getImeOptions();
	void setImeActionLabel(ref<java::lang::CharSequence> label, jint actionId);
	ref<java::lang::CharSequence> getImeActionLabel();
	jint getImeActionId();
	void setOnEditorActionListener(ref<android::widget::TextView_OnEditorActionListener> l);
	void onEditorAction(jint actionCode);
	void setPrivateImeOptions(ref<java::lang::String> type);
	ref<java::lang::String> getPrivateImeOptions();
	void setInputExtras(jint xmlResId);
	ref<android::os::Bundle> getInputExtras(jboolean create);
	void setImeHintLocales(ref<android::os::LocaleList> hintLocales);
	ref<android::os::LocaleList> getImeHintLocales();
	ref<java::lang::CharSequence> getError();
	void setError(ref<java::lang::CharSequence> error);
	void setError(ref<java::lang::CharSequence> error, ref<android::graphics::drawable::Drawable> icon);
	void setFilters(ref<link::java::array<android::text::InputFilter>> filters);
	ref<link::java::array<android::text::InputFilter>> getFilters();
	jboolean onPreDraw();
	void onScreenStateChanged(jint screenState);
	void jumpDrawablesToCurrentState();
	void invalidateDrawable(ref<android::graphics::drawable::Drawable> drawable);
	jboolean hasOverlappingRendering();
	jboolean isTextSelectable();
	void setTextIsSelectable(jboolean selectable);
	void getFocusedRect(ref<android::graphics::Rect> r);
	jint getLineCount();
	jint getLineBounds(jint line, ref<android::graphics::Rect> bounds);
	jint getBaseline();
	ref<android::view::PointerIcon> onResolvePointerIcon(ref<android::view::MotionEvent> event, jint pointerIndex);
	jboolean onKeyPreIme(jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onKeyDown(jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onKeyMultiple(jint keyCode, jint repeatCount, ref<android::view::KeyEvent> event);
	jboolean onKeyUp(jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onCheckIsTextEditor();
	ref<android::view::inputmethod::InputConnection> onCreateInputConnection(ref<android::view::inputmethod::EditorInfo> outAttrs);
	jboolean extractText(ref<android::view::inputmethod::ExtractedTextRequest> request, ref<android::view::inputmethod::ExtractedText> outText);
	void setExtractedText(ref<android::view::inputmethod::ExtractedText> text);
	void onCommitCompletion(ref<android::view::inputmethod::CompletionInfo> text);
	void onCommitCorrection(ref<android::view::inputmethod::CorrectionInfo> info);
	void beginBatchEdit();
	void endBatchEdit();
	void onBeginBatchEdit();
	void onEndBatchEdit();
	jboolean onPrivateIMECommand(ref<java::lang::String> action, ref<android::os::Bundle> data);
	void setIncludeFontPadding(jboolean includepad);
	jboolean getIncludeFontPadding();
	jboolean bringPointIntoView(jint offset);
	jboolean moveCursorToVisibleOffset();
	void computeScroll();
	void debug(jint depth);
	jint getSelectionStart();
	jint getSelectionEnd();
	jboolean hasSelection();
	void setSingleLine();
	void setAllCaps(jboolean allCaps);
	jboolean isAllCaps();
	void setSingleLine(jboolean singleLine);
	void setEllipsize(ref<android::text::TextUtils_TruncateAt> where);
	void setMarqueeRepeatLimit(jint marqueeLimit);
	jint getMarqueeRepeatLimit();
	ref<android::text::TextUtils_TruncateAt> getEllipsize();
	void setSelectAllOnFocus(jboolean selectAllOnFocus);
	void setCursorVisible(jboolean visible);
	jboolean isCursorVisible();
	void addTextChangedListener(ref<android::text::TextWatcher> watcher);
	void removeTextChangedListener(ref<android::text::TextWatcher> watcher);
	void onWindowFocusChanged(jboolean hasWindowFocus);
	void clearComposingText();
	void setSelected(jboolean selected);
	jboolean onTouchEvent(ref<android::view::MotionEvent> event);
	jboolean onGenericMotionEvent(ref<android::view::MotionEvent> event);
	jboolean showContextMenu();
	jboolean showContextMenu(jfloat x, jfloat y);
	jboolean didTouchFocusSelect();
	void cancelLongPress();
	jboolean onTrackballEvent(ref<android::view::MotionEvent> event);
	void setScroller(ref<android::widget::Scroller> s);
	void findViewsWithText(ref<java::util::ArrayList> outViews, ref<java::lang::CharSequence> searched, jint flags);
	jboolean onKeyShortcut(jint keyCode, ref<android::view::KeyEvent> event);
	ref<java::lang::CharSequence> getAccessibilityClassName();
	void onProvideStructure(ref<android::view::ViewStructure> structure);
	void onProvideAutofillStructure(ref<android::view::ViewStructure> structure, jint flags);
	void autofill(ref<android::view::autofill::AutofillValue> value);
	jint getAutofillType();
	ref<android::view::autofill::AutofillValue> getAutofillValue();
	void addExtraDataToAccessibilityNodeInfo(ref<android::view::accessibility::AccessibilityNodeInfo> info, ref<java::lang::String> extraDataKey, ref<android::os::Bundle> arguments);
	void sendAccessibilityEventUnchecked(ref<android::view::accessibility::AccessibilityEvent> event);
	jboolean isInputMethodTarget();
	jboolean onTextContextMenuItem(jint id);
	jboolean performLongClick();
	jboolean isSuggestionsEnabled();
	void setCustomSelectionActionModeCallback(ref<android::view::ActionMode_Callback> actionModeCallback);
	ref<android::view::ActionMode_Callback> getCustomSelectionActionModeCallback();
	void setCustomInsertionActionModeCallback(ref<android::view::ActionMode_Callback> actionModeCallback);
	ref<android::view::ActionMode_Callback> getCustomInsertionActionModeCallback();
	void setTextClassifier(ref<android::view::textclassifier::TextClassifier> textClassifier);
	ref<android::view::textclassifier::TextClassifier> getTextClassifier();
	jint getOffsetForPosition(jfloat x, jfloat y);
	jboolean onDragEvent(ref<android::view::DragEvent> event);
	void onRtlPropertiesChanged(jint layoutDirection);

protected:

	TextView(handle_type h) : base_(h) {}

};

} // namespace android::widget
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/Typeface.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/LocaleList.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/android/text/Editable.h>
#include <scapix/java_api/android/text/Editable_Factory.h>
#include <scapix/java_api/android/text/InputFilter.h>
#include <scapix/java_api/android/text/Layout.h>
#include <scapix/java_api/android/text/PrecomputedText_Params.h>
#include <scapix/java_api/android/text/Spannable_Factory.h>
#include <scapix/java_api/android/text/TextPaint.h>
#include <scapix/java_api/android/text/TextUtils_TruncateAt.h>
#include <scapix/java_api/android/text/TextWatcher.h>
#include <scapix/java_api/android/text/method/KeyListener.h>
#include <scapix/java_api/android/text/method/MovementMethod.h>
#include <scapix/java_api/android/text/method/TransformationMethod.h>
#include <scapix/java_api/android/text/style/URLSpan.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/ActionMode_Callback.h>
#include <scapix/java_api/android/view/DragEvent.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/PointerIcon.h>
#include <scapix/java_api/android/view/ViewStructure.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo.h>
#include <scapix/java_api/android/view/autofill/AutofillValue.h>
#include <scapix/java_api/android/view/inputmethod/CompletionInfo.h>
#include <scapix/java_api/android/view/inputmethod/CorrectionInfo.h>
#include <scapix/java_api/android/view/inputmethod/EditorInfo.h>
#include <scapix/java_api/android/view/inputmethod/ExtractedText.h>
#include <scapix/java_api/android/view/inputmethod/ExtractedTextRequest.h>
#include <scapix/java_api/android/view/inputmethod/InputConnection.h>
#include <scapix/java_api/android/view/textclassifier/TextClassifier.h>
#include <scapix/java_api/android/widget/Scroller.h>
#include <scapix/java_api/android/widget/TextView_BufferType.h>
#include <scapix/java_api/android/widget/TextView_OnEditorActionListener.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/ArrayList.h>
#include <scapix/java_api/java/util/Locale.h>

namespace scapix::java_api {
namespace android::widget {

inline jint TextView::AUTO_SIZE_TEXT_TYPE_NONE_() { return get_static_field<SCAPIX_META_STRING("AUTO_SIZE_TEXT_TYPE_NONE"), jint>(); }
inline jint TextView::AUTO_SIZE_TEXT_TYPE_UNIFORM_() { return get_static_field<SCAPIX_META_STRING("AUTO_SIZE_TEXT_TYPE_UNIFORM"), jint>(); }
inline ref<TextView> TextView::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<TextView> TextView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<TextView> TextView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<TextView> TextView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline void TextView::setAutoSizeTextTypeWithDefaults(jint autoSizeTextType) { return call_method<SCAPIX_META_STRING("setAutoSizeTextTypeWithDefaults"), void>(autoSizeTextType); }
inline void TextView::setAutoSizeTextTypeUniformWithConfiguration(jint autoSizeMinTextSize, jint autoSizeMaxTextSize, jint autoSizeStepGranularity, jint unit) { return call_method<SCAPIX_META_STRING("setAutoSizeTextTypeUniformWithConfiguration"), void>(autoSizeMinTextSize, autoSizeMaxTextSize, autoSizeStepGranularity, unit); }
inline void TextView::setAutoSizeTextTypeUniformWithPresetSizes(ref<link::java::array<jint>> presetSizes, jint unit) { return call_method<SCAPIX_META_STRING("setAutoSizeTextTypeUniformWithPresetSizes"), void>(presetSizes, unit); }
inline jint TextView::getAutoSizeTextType() { return call_method<SCAPIX_META_STRING("getAutoSizeTextType"), jint>(); }
inline jint TextView::getAutoSizeStepGranularity() { return call_method<SCAPIX_META_STRING("getAutoSizeStepGranularity"), jint>(); }
inline jint TextView::getAutoSizeMinTextSize() { return call_method<SCAPIX_META_STRING("getAutoSizeMinTextSize"), jint>(); }
inline jint TextView::getAutoSizeMaxTextSize() { return call_method<SCAPIX_META_STRING("getAutoSizeMaxTextSize"), jint>(); }
inline ref<link::java::array<jint>> TextView::getAutoSizeTextAvailableSizes() { return call_method<SCAPIX_META_STRING("getAutoSizeTextAvailableSizes"), ref<link::java::array<jint>>>(); }
inline void TextView::setEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setEnabled"), void>(enabled); }
inline void TextView::setTypeface(ref<android::graphics::Typeface> tf, jint style) { return call_method<SCAPIX_META_STRING("setTypeface"), void>(tf, style); }
inline ref<java::lang::CharSequence> TextView::getText() { return call_method<SCAPIX_META_STRING("getText"), ref<java::lang::CharSequence>>(); }
inline jint TextView::length() { return call_method<SCAPIX_META_STRING("length"), jint>(); }
inline ref<android::text::Editable> TextView::getEditableText() { return call_method<SCAPIX_META_STRING("getEditableText"), ref<android::text::Editable>>(); }
inline jint TextView::getLineHeight() { return call_method<SCAPIX_META_STRING("getLineHeight"), jint>(); }
inline ref<android::text::Layout> TextView::getLayout() { return call_method<SCAPIX_META_STRING("getLayout"), ref<android::text::Layout>>(); }
inline ref<android::text::method::KeyListener> TextView::getKeyListener() { return call_method<SCAPIX_META_STRING("getKeyListener"), ref<android::text::method::KeyListener>>(); }
inline void TextView::setKeyListener(ref<android::text::method::KeyListener> input) { return call_method<SCAPIX_META_STRING("setKeyListener"), void>(input); }
inline ref<android::text::method::MovementMethod> TextView::getMovementMethod() { return call_method<SCAPIX_META_STRING("getMovementMethod"), ref<android::text::method::MovementMethod>>(); }
inline void TextView::setMovementMethod(ref<android::text::method::MovementMethod> movement) { return call_method<SCAPIX_META_STRING("setMovementMethod"), void>(movement); }
inline ref<android::text::method::TransformationMethod> TextView::getTransformationMethod() { return call_method<SCAPIX_META_STRING("getTransformationMethod"), ref<android::text::method::TransformationMethod>>(); }
inline void TextView::setTransformationMethod(ref<android::text::method::TransformationMethod> method) { return call_method<SCAPIX_META_STRING("setTransformationMethod"), void>(method); }
inline jint TextView::getCompoundPaddingTop() { return call_method<SCAPIX_META_STRING("getCompoundPaddingTop"), jint>(); }
inline jint TextView::getCompoundPaddingBottom() { return call_method<SCAPIX_META_STRING("getCompoundPaddingBottom"), jint>(); }
inline jint TextView::getCompoundPaddingLeft() { return call_method<SCAPIX_META_STRING("getCompoundPaddingLeft"), jint>(); }
inline jint TextView::getCompoundPaddingRight() { return call_method<SCAPIX_META_STRING("getCompoundPaddingRight"), jint>(); }
inline jint TextView::getCompoundPaddingStart() { return call_method<SCAPIX_META_STRING("getCompoundPaddingStart"), jint>(); }
inline jint TextView::getCompoundPaddingEnd() { return call_method<SCAPIX_META_STRING("getCompoundPaddingEnd"), jint>(); }
inline jint TextView::getExtendedPaddingTop() { return call_method<SCAPIX_META_STRING("getExtendedPaddingTop"), jint>(); }
inline jint TextView::getExtendedPaddingBottom() { return call_method<SCAPIX_META_STRING("getExtendedPaddingBottom"), jint>(); }
inline jint TextView::getTotalPaddingLeft() { return call_method<SCAPIX_META_STRING("getTotalPaddingLeft"), jint>(); }
inline jint TextView::getTotalPaddingRight() { return call_method<SCAPIX_META_STRING("getTotalPaddingRight"), jint>(); }
inline jint TextView::getTotalPaddingStart() { return call_method<SCAPIX_META_STRING("getTotalPaddingStart"), jint>(); }
inline jint TextView::getTotalPaddingEnd() { return call_method<SCAPIX_META_STRING("getTotalPaddingEnd"), jint>(); }
inline jint TextView::getTotalPaddingTop() { return call_method<SCAPIX_META_STRING("getTotalPaddingTop"), jint>(); }
inline jint TextView::getTotalPaddingBottom() { return call_method<SCAPIX_META_STRING("getTotalPaddingBottom"), jint>(); }
inline void TextView::setCompoundDrawables(ref<android::graphics::drawable::Drawable> left, ref<android::graphics::drawable::Drawable> top, ref<android::graphics::drawable::Drawable> right, ref<android::graphics::drawable::Drawable> bottom) { return call_method<SCAPIX_META_STRING("setCompoundDrawables"), void>(left, top, right, bottom); }
inline void TextView::setCompoundDrawablesWithIntrinsicBounds(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("setCompoundDrawablesWithIntrinsicBounds"), void>(left, top, right, bottom); }
inline void TextView::setCompoundDrawablesWithIntrinsicBounds(ref<android::graphics::drawable::Drawable> left, ref<android::graphics::drawable::Drawable> top, ref<android::graphics::drawable::Drawable> right, ref<android::graphics::drawable::Drawable> bottom) { return call_method<SCAPIX_META_STRING("setCompoundDrawablesWithIntrinsicBounds"), void>(left, top, right, bottom); }
inline void TextView::setCompoundDrawablesRelative(ref<android::graphics::drawable::Drawable> start, ref<android::graphics::drawable::Drawable> top, ref<android::graphics::drawable::Drawable> end, ref<android::graphics::drawable::Drawable> bottom) { return call_method<SCAPIX_META_STRING("setCompoundDrawablesRelative"), void>(start, top, end, bottom); }
inline void TextView::setCompoundDrawablesRelativeWithIntrinsicBounds(jint start, jint top, jint end, jint bottom) { return call_method<SCAPIX_META_STRING("setCompoundDrawablesRelativeWithIntrinsicBounds"), void>(start, top, end, bottom); }
inline void TextView::setCompoundDrawablesRelativeWithIntrinsicBounds(ref<android::graphics::drawable::Drawable> start, ref<android::graphics::drawable::Drawable> top, ref<android::graphics::drawable::Drawable> end, ref<android::graphics::drawable::Drawable> bottom) { return call_method<SCAPIX_META_STRING("setCompoundDrawablesRelativeWithIntrinsicBounds"), void>(start, top, end, bottom); }
inline ref<link::java::array<android::graphics::drawable::Drawable>> TextView::getCompoundDrawables() { return call_method<SCAPIX_META_STRING("getCompoundDrawables"), ref<link::java::array<android::graphics::drawable::Drawable>>>(); }
inline ref<link::java::array<android::graphics::drawable::Drawable>> TextView::getCompoundDrawablesRelative() { return call_method<SCAPIX_META_STRING("getCompoundDrawablesRelative"), ref<link::java::array<android::graphics::drawable::Drawable>>>(); }
inline void TextView::setCompoundDrawablePadding(jint pad) { return call_method<SCAPIX_META_STRING("setCompoundDrawablePadding"), void>(pad); }
inline jint TextView::getCompoundDrawablePadding() { return call_method<SCAPIX_META_STRING("getCompoundDrawablePadding"), jint>(); }
inline void TextView::setCompoundDrawableTintList(ref<android::content::res::ColorStateList> tint) { return call_method<SCAPIX_META_STRING("setCompoundDrawableTintList"), void>(tint); }
inline ref<android::content::res::ColorStateList> TextView::getCompoundDrawableTintList() { return call_method<SCAPIX_META_STRING("getCompoundDrawableTintList"), ref<android::content::res::ColorStateList>>(); }
inline void TextView::setCompoundDrawableTintMode(ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<SCAPIX_META_STRING("setCompoundDrawableTintMode"), void>(tintMode); }
inline ref<android::graphics::PorterDuff_Mode> TextView::getCompoundDrawableTintMode() { return call_method<SCAPIX_META_STRING("getCompoundDrawableTintMode"), ref<android::graphics::PorterDuff_Mode>>(); }
inline void TextView::setPadding(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("setPadding"), void>(left, top, right, bottom); }
inline void TextView::setPaddingRelative(jint start, jint top, jint end, jint bottom) { return call_method<SCAPIX_META_STRING("setPaddingRelative"), void>(start, top, end, bottom); }
inline void TextView::setFirstBaselineToTopHeight(jint firstBaselineToTopHeight) { return call_method<SCAPIX_META_STRING("setFirstBaselineToTopHeight"), void>(firstBaselineToTopHeight); }
inline void TextView::setLastBaselineToBottomHeight(jint lastBaselineToBottomHeight) { return call_method<SCAPIX_META_STRING("setLastBaselineToBottomHeight"), void>(lastBaselineToBottomHeight); }
inline jint TextView::getFirstBaselineToTopHeight() { return call_method<SCAPIX_META_STRING("getFirstBaselineToTopHeight"), jint>(); }
inline jint TextView::getLastBaselineToBottomHeight() { return call_method<SCAPIX_META_STRING("getLastBaselineToBottomHeight"), jint>(); }
inline jint TextView::getAutoLinkMask() { return call_method<SCAPIX_META_STRING("getAutoLinkMask"), jint>(); }
inline void TextView::setTextAppearance(jint resId) { return call_method<SCAPIX_META_STRING("setTextAppearance"), void>(resId); }
inline void TextView::setTextAppearance(ref<android::content::Context> context, jint resId) { return call_method<SCAPIX_META_STRING("setTextAppearance"), void>(context, resId); }
inline ref<java::util::Locale> TextView::getTextLocale() { return call_method<SCAPIX_META_STRING("getTextLocale"), ref<java::util::Locale>>(); }
inline ref<android::os::LocaleList> TextView::getTextLocales() { return call_method<SCAPIX_META_STRING("getTextLocales"), ref<android::os::LocaleList>>(); }
inline void TextView::setTextLocale(ref<java::util::Locale> locale) { return call_method<SCAPIX_META_STRING("setTextLocale"), void>(locale); }
inline void TextView::setTextLocales(ref<android::os::LocaleList> locales) { return call_method<SCAPIX_META_STRING("setTextLocales"), void>(locales); }
inline jfloat TextView::getTextSize() { return call_method<SCAPIX_META_STRING("getTextSize"), jfloat>(); }
inline void TextView::setTextSize(jfloat size) { return call_method<SCAPIX_META_STRING("setTextSize"), void>(size); }
inline void TextView::setTextSize(jint unit, jfloat size) { return call_method<SCAPIX_META_STRING("setTextSize"), void>(unit, size); }
inline jfloat TextView::getTextScaleX() { return call_method<SCAPIX_META_STRING("getTextScaleX"), jfloat>(); }
inline void TextView::setTextScaleX(jfloat size) { return call_method<SCAPIX_META_STRING("setTextScaleX"), void>(size); }
inline void TextView::setTypeface(ref<android::graphics::Typeface> tf) { return call_method<SCAPIX_META_STRING("setTypeface"), void>(tf); }
inline ref<android::graphics::Typeface> TextView::getTypeface() { return call_method<SCAPIX_META_STRING("getTypeface"), ref<android::graphics::Typeface>>(); }
inline void TextView::setElegantTextHeight(jboolean elegant) { return call_method<SCAPIX_META_STRING("setElegantTextHeight"), void>(elegant); }
inline void TextView::setFallbackLineSpacing(jboolean enabled) { return call_method<SCAPIX_META_STRING("setFallbackLineSpacing"), void>(enabled); }
inline jboolean TextView::isFallbackLineSpacing() { return call_method<SCAPIX_META_STRING("isFallbackLineSpacing"), jboolean>(); }
inline jboolean TextView::isElegantTextHeight() { return call_method<SCAPIX_META_STRING("isElegantTextHeight"), jboolean>(); }
inline jfloat TextView::getLetterSpacing() { return call_method<SCAPIX_META_STRING("getLetterSpacing"), jfloat>(); }
inline void TextView::setLetterSpacing(jfloat letterSpacing) { return call_method<SCAPIX_META_STRING("setLetterSpacing"), void>(letterSpacing); }
inline ref<java::lang::String> TextView::getFontFeatureSettings() { return call_method<SCAPIX_META_STRING("getFontFeatureSettings"), ref<java::lang::String>>(); }
inline ref<java::lang::String> TextView::getFontVariationSettings() { return call_method<SCAPIX_META_STRING("getFontVariationSettings"), ref<java::lang::String>>(); }
inline void TextView::setBreakStrategy(jint breakStrategy) { return call_method<SCAPIX_META_STRING("setBreakStrategy"), void>(breakStrategy); }
inline jint TextView::getBreakStrategy() { return call_method<SCAPIX_META_STRING("getBreakStrategy"), jint>(); }
inline void TextView::setHyphenationFrequency(jint hyphenationFrequency) { return call_method<SCAPIX_META_STRING("setHyphenationFrequency"), void>(hyphenationFrequency); }
inline jint TextView::getHyphenationFrequency() { return call_method<SCAPIX_META_STRING("getHyphenationFrequency"), jint>(); }
inline ref<android::text::PrecomputedText_Params> TextView::getTextMetricsParams() { return call_method<SCAPIX_META_STRING("getTextMetricsParams"), ref<android::text::PrecomputedText_Params>>(); }
inline void TextView::setTextMetricsParams(ref<android::text::PrecomputedText_Params> params) { return call_method<SCAPIX_META_STRING("setTextMetricsParams"), void>(params); }
inline void TextView::setJustificationMode(jint justificationMode) { return call_method<SCAPIX_META_STRING("setJustificationMode"), void>(justificationMode); }
inline jint TextView::getJustificationMode() { return call_method<SCAPIX_META_STRING("getJustificationMode"), jint>(); }
inline void TextView::setFontFeatureSettings(ref<java::lang::String> fontFeatureSettings) { return call_method<SCAPIX_META_STRING("setFontFeatureSettings"), void>(fontFeatureSettings); }
inline jboolean TextView::setFontVariationSettings(ref<java::lang::String> fontVariationSettings) { return call_method<SCAPIX_META_STRING("setFontVariationSettings"), jboolean>(fontVariationSettings); }
inline void TextView::setTextColor(jint color) { return call_method<SCAPIX_META_STRING("setTextColor"), void>(color); }
inline void TextView::setTextColor(ref<android::content::res::ColorStateList> colors) { return call_method<SCAPIX_META_STRING("setTextColor"), void>(colors); }
inline ref<android::content::res::ColorStateList> TextView::getTextColors() { return call_method<SCAPIX_META_STRING("getTextColors"), ref<android::content::res::ColorStateList>>(); }
inline jint TextView::getCurrentTextColor() { return call_method<SCAPIX_META_STRING("getCurrentTextColor"), jint>(); }
inline void TextView::setHighlightColor(jint color) { return call_method<SCAPIX_META_STRING("setHighlightColor"), void>(color); }
inline jint TextView::getHighlightColor() { return call_method<SCAPIX_META_STRING("getHighlightColor"), jint>(); }
inline void TextView::setShowSoftInputOnFocus(jboolean show) { return call_method<SCAPIX_META_STRING("setShowSoftInputOnFocus"), void>(show); }
inline jboolean TextView::getShowSoftInputOnFocus() { return call_method<SCAPIX_META_STRING("getShowSoftInputOnFocus"), jboolean>(); }
inline void TextView::setShadowLayer(jfloat radius, jfloat dx, jfloat dy, jint color) { return call_method<SCAPIX_META_STRING("setShadowLayer"), void>(radius, dx, dy, color); }
inline jfloat TextView::getShadowRadius() { return call_method<SCAPIX_META_STRING("getShadowRadius"), jfloat>(); }
inline jfloat TextView::getShadowDx() { return call_method<SCAPIX_META_STRING("getShadowDx"), jfloat>(); }
inline jfloat TextView::getShadowDy() { return call_method<SCAPIX_META_STRING("getShadowDy"), jfloat>(); }
inline jint TextView::getShadowColor() { return call_method<SCAPIX_META_STRING("getShadowColor"), jint>(); }
inline ref<android::text::TextPaint> TextView::getPaint() { return call_method<SCAPIX_META_STRING("getPaint"), ref<android::text::TextPaint>>(); }
inline void TextView::setAutoLinkMask(jint mask) { return call_method<SCAPIX_META_STRING("setAutoLinkMask"), void>(mask); }
inline void TextView::setLinksClickable(jboolean whether) { return call_method<SCAPIX_META_STRING("setLinksClickable"), void>(whether); }
inline jboolean TextView::getLinksClickable() { return call_method<SCAPIX_META_STRING("getLinksClickable"), jboolean>(); }
inline ref<link::java::array<android::text::style::URLSpan>> TextView::getUrls() { return call_method<SCAPIX_META_STRING("getUrls"), ref<link::java::array<android::text::style::URLSpan>>>(); }
inline void TextView::setHintTextColor(jint color) { return call_method<SCAPIX_META_STRING("setHintTextColor"), void>(color); }
inline void TextView::setHintTextColor(ref<android::content::res::ColorStateList> colors) { return call_method<SCAPIX_META_STRING("setHintTextColor"), void>(colors); }
inline ref<android::content::res::ColorStateList> TextView::getHintTextColors() { return call_method<SCAPIX_META_STRING("getHintTextColors"), ref<android::content::res::ColorStateList>>(); }
inline jint TextView::getCurrentHintTextColor() { return call_method<SCAPIX_META_STRING("getCurrentHintTextColor"), jint>(); }
inline void TextView::setLinkTextColor(jint color) { return call_method<SCAPIX_META_STRING("setLinkTextColor"), void>(color); }
inline void TextView::setLinkTextColor(ref<android::content::res::ColorStateList> colors) { return call_method<SCAPIX_META_STRING("setLinkTextColor"), void>(colors); }
inline ref<android::content::res::ColorStateList> TextView::getLinkTextColors() { return call_method<SCAPIX_META_STRING("getLinkTextColors"), ref<android::content::res::ColorStateList>>(); }
inline void TextView::setGravity(jint gravity) { return call_method<SCAPIX_META_STRING("setGravity"), void>(gravity); }
inline jint TextView::getGravity() { return call_method<SCAPIX_META_STRING("getGravity"), jint>(); }
inline jint TextView::getPaintFlags() { return call_method<SCAPIX_META_STRING("getPaintFlags"), jint>(); }
inline void TextView::setPaintFlags(jint flags) { return call_method<SCAPIX_META_STRING("setPaintFlags"), void>(flags); }
inline void TextView::setHorizontallyScrolling(jboolean whether) { return call_method<SCAPIX_META_STRING("setHorizontallyScrolling"), void>(whether); }
inline void TextView::setMinLines(jint minLines) { return call_method<SCAPIX_META_STRING("setMinLines"), void>(minLines); }
inline jint TextView::getMinLines() { return call_method<SCAPIX_META_STRING("getMinLines"), jint>(); }
inline void TextView::setMinHeight(jint minPixels) { return call_method<SCAPIX_META_STRING("setMinHeight"), void>(minPixels); }
inline jint TextView::getMinHeight() { return call_method<SCAPIX_META_STRING("getMinHeight"), jint>(); }
inline void TextView::setMaxLines(jint maxLines) { return call_method<SCAPIX_META_STRING("setMaxLines"), void>(maxLines); }
inline jint TextView::getMaxLines() { return call_method<SCAPIX_META_STRING("getMaxLines"), jint>(); }
inline void TextView::setMaxHeight(jint maxPixels) { return call_method<SCAPIX_META_STRING("setMaxHeight"), void>(maxPixels); }
inline jint TextView::getMaxHeight() { return call_method<SCAPIX_META_STRING("getMaxHeight"), jint>(); }
inline void TextView::setLines(jint lines) { return call_method<SCAPIX_META_STRING("setLines"), void>(lines); }
inline void TextView::setHeight(jint pixels) { return call_method<SCAPIX_META_STRING("setHeight"), void>(pixels); }
inline void TextView::setMinEms(jint minEms) { return call_method<SCAPIX_META_STRING("setMinEms"), void>(minEms); }
inline jint TextView::getMinEms() { return call_method<SCAPIX_META_STRING("getMinEms"), jint>(); }
inline void TextView::setMinWidth(jint minPixels) { return call_method<SCAPIX_META_STRING("setMinWidth"), void>(minPixels); }
inline jint TextView::getMinWidth() { return call_method<SCAPIX_META_STRING("getMinWidth"), jint>(); }
inline void TextView::setMaxEms(jint maxEms) { return call_method<SCAPIX_META_STRING("setMaxEms"), void>(maxEms); }
inline jint TextView::getMaxEms() { return call_method<SCAPIX_META_STRING("getMaxEms"), jint>(); }
inline void TextView::setMaxWidth(jint maxPixels) { return call_method<SCAPIX_META_STRING("setMaxWidth"), void>(maxPixels); }
inline jint TextView::getMaxWidth() { return call_method<SCAPIX_META_STRING("getMaxWidth"), jint>(); }
inline void TextView::setEms(jint ems) { return call_method<SCAPIX_META_STRING("setEms"), void>(ems); }
inline void TextView::setWidth(jint pixels) { return call_method<SCAPIX_META_STRING("setWidth"), void>(pixels); }
inline void TextView::setLineSpacing(jfloat add, jfloat mult) { return call_method<SCAPIX_META_STRING("setLineSpacing"), void>(add, mult); }
inline jfloat TextView::getLineSpacingMultiplier() { return call_method<SCAPIX_META_STRING("getLineSpacingMultiplier"), jfloat>(); }
inline jfloat TextView::getLineSpacingExtra() { return call_method<SCAPIX_META_STRING("getLineSpacingExtra"), jfloat>(); }
inline void TextView::setLineHeight(jint lineHeight) { return call_method<SCAPIX_META_STRING("setLineHeight"), void>(lineHeight); }
inline void TextView::append(ref<java::lang::CharSequence> text) { return call_method<SCAPIX_META_STRING("append"), void>(text); }
inline void TextView::append(ref<java::lang::CharSequence> text, jint start, jint end) { return call_method<SCAPIX_META_STRING("append"), void>(text, start, end); }
inline void TextView::drawableHotspotChanged(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("drawableHotspotChanged"), void>(x, y); }
inline ref<android::os::Parcelable> TextView::onSaveInstanceState() { return call_method<SCAPIX_META_STRING("onSaveInstanceState"), ref<android::os::Parcelable>>(); }
inline void TextView::onRestoreInstanceState(ref<android::os::Parcelable> state) { return call_method<SCAPIX_META_STRING("onRestoreInstanceState"), void>(state); }
inline void TextView::setFreezesText(jboolean freezesText) { return call_method<SCAPIX_META_STRING("setFreezesText"), void>(freezesText); }
inline jboolean TextView::getFreezesText() { return call_method<SCAPIX_META_STRING("getFreezesText"), jboolean>(); }
inline void TextView::setEditableFactory(ref<android::text::Editable_Factory> factory) { return call_method<SCAPIX_META_STRING("setEditableFactory"), void>(factory); }
inline void TextView::setSpannableFactory(ref<android::text::Spannable_Factory> factory) { return call_method<SCAPIX_META_STRING("setSpannableFactory"), void>(factory); }
inline void TextView::setText(ref<java::lang::CharSequence> text) { return call_method<SCAPIX_META_STRING("setText"), void>(text); }
inline void TextView::setTextKeepState(ref<java::lang::CharSequence> text) { return call_method<SCAPIX_META_STRING("setTextKeepState"), void>(text); }
inline void TextView::setText(ref<java::lang::CharSequence> text, ref<android::widget::TextView_BufferType> type) { return call_method<SCAPIX_META_STRING("setText"), void>(text, type); }
inline void TextView::setText(ref<link::java::array<jchar>> text, jint start, jint len) { return call_method<SCAPIX_META_STRING("setText"), void>(text, start, len); }
inline void TextView::setTextKeepState(ref<java::lang::CharSequence> text, ref<android::widget::TextView_BufferType> type) { return call_method<SCAPIX_META_STRING("setTextKeepState"), void>(text, type); }
inline void TextView::setText(jint resid) { return call_method<SCAPIX_META_STRING("setText"), void>(resid); }
inline void TextView::setText(jint resid, ref<android::widget::TextView_BufferType> type) { return call_method<SCAPIX_META_STRING("setText"), void>(resid, type); }
inline void TextView::setHint(ref<java::lang::CharSequence> hint) { return call_method<SCAPIX_META_STRING("setHint"), void>(hint); }
inline void TextView::setHint(jint resid) { return call_method<SCAPIX_META_STRING("setHint"), void>(resid); }
inline ref<java::lang::CharSequence> TextView::getHint() { return call_method<SCAPIX_META_STRING("getHint"), ref<java::lang::CharSequence>>(); }
inline void TextView::setInputType(jint type) { return call_method<SCAPIX_META_STRING("setInputType"), void>(type); }
inline void TextView::setRawInputType(jint type) { return call_method<SCAPIX_META_STRING("setRawInputType"), void>(type); }
inline jint TextView::getInputType() { return call_method<SCAPIX_META_STRING("getInputType"), jint>(); }
inline void TextView::setImeOptions(jint imeOptions) { return call_method<SCAPIX_META_STRING("setImeOptions"), void>(imeOptions); }
inline jint TextView::getImeOptions() { return call_method<SCAPIX_META_STRING("getImeOptions"), jint>(); }
inline void TextView::setImeActionLabel(ref<java::lang::CharSequence> label, jint actionId) { return call_method<SCAPIX_META_STRING("setImeActionLabel"), void>(label, actionId); }
inline ref<java::lang::CharSequence> TextView::getImeActionLabel() { return call_method<SCAPIX_META_STRING("getImeActionLabel"), ref<java::lang::CharSequence>>(); }
inline jint TextView::getImeActionId() { return call_method<SCAPIX_META_STRING("getImeActionId"), jint>(); }
inline void TextView::setOnEditorActionListener(ref<android::widget::TextView_OnEditorActionListener> l) { return call_method<SCAPIX_META_STRING("setOnEditorActionListener"), void>(l); }
inline void TextView::onEditorAction(jint actionCode) { return call_method<SCAPIX_META_STRING("onEditorAction"), void>(actionCode); }
inline void TextView::setPrivateImeOptions(ref<java::lang::String> type) { return call_method<SCAPIX_META_STRING("setPrivateImeOptions"), void>(type); }
inline ref<java::lang::String> TextView::getPrivateImeOptions() { return call_method<SCAPIX_META_STRING("getPrivateImeOptions"), ref<java::lang::String>>(); }
inline void TextView::setInputExtras(jint xmlResId) { return call_method<SCAPIX_META_STRING("setInputExtras"), void>(xmlResId); }
inline ref<android::os::Bundle> TextView::getInputExtras(jboolean create) { return call_method<SCAPIX_META_STRING("getInputExtras"), ref<android::os::Bundle>>(create); }
inline void TextView::setImeHintLocales(ref<android::os::LocaleList> hintLocales) { return call_method<SCAPIX_META_STRING("setImeHintLocales"), void>(hintLocales); }
inline ref<android::os::LocaleList> TextView::getImeHintLocales() { return call_method<SCAPIX_META_STRING("getImeHintLocales"), ref<android::os::LocaleList>>(); }
inline ref<java::lang::CharSequence> TextView::getError() { return call_method<SCAPIX_META_STRING("getError"), ref<java::lang::CharSequence>>(); }
inline void TextView::setError(ref<java::lang::CharSequence> error) { return call_method<SCAPIX_META_STRING("setError"), void>(error); }
inline void TextView::setError(ref<java::lang::CharSequence> error, ref<android::graphics::drawable::Drawable> icon) { return call_method<SCAPIX_META_STRING("setError"), void>(error, icon); }
inline void TextView::setFilters(ref<link::java::array<android::text::InputFilter>> filters) { return call_method<SCAPIX_META_STRING("setFilters"), void>(filters); }
inline ref<link::java::array<android::text::InputFilter>> TextView::getFilters() { return call_method<SCAPIX_META_STRING("getFilters"), ref<link::java::array<android::text::InputFilter>>>(); }
inline jboolean TextView::onPreDraw() { return call_method<SCAPIX_META_STRING("onPreDraw"), jboolean>(); }
inline void TextView::onScreenStateChanged(jint screenState) { return call_method<SCAPIX_META_STRING("onScreenStateChanged"), void>(screenState); }
inline void TextView::jumpDrawablesToCurrentState() { return call_method<SCAPIX_META_STRING("jumpDrawablesToCurrentState"), void>(); }
inline void TextView::invalidateDrawable(ref<android::graphics::drawable::Drawable> drawable) { return call_method<SCAPIX_META_STRING("invalidateDrawable"), void>(drawable); }
inline jboolean TextView::hasOverlappingRendering() { return call_method<SCAPIX_META_STRING("hasOverlappingRendering"), jboolean>(); }
inline jboolean TextView::isTextSelectable() { return call_method<SCAPIX_META_STRING("isTextSelectable"), jboolean>(); }
inline void TextView::setTextIsSelectable(jboolean selectable) { return call_method<SCAPIX_META_STRING("setTextIsSelectable"), void>(selectable); }
inline void TextView::getFocusedRect(ref<android::graphics::Rect> r) { return call_method<SCAPIX_META_STRING("getFocusedRect"), void>(r); }
inline jint TextView::getLineCount() { return call_method<SCAPIX_META_STRING("getLineCount"), jint>(); }
inline jint TextView::getLineBounds(jint line, ref<android::graphics::Rect> bounds) { return call_method<SCAPIX_META_STRING("getLineBounds"), jint>(line, bounds); }
inline jint TextView::getBaseline() { return call_method<SCAPIX_META_STRING("getBaseline"), jint>(); }
inline ref<android::view::PointerIcon> TextView::onResolvePointerIcon(ref<android::view::MotionEvent> event, jint pointerIndex) { return call_method<SCAPIX_META_STRING("onResolvePointerIcon"), ref<android::view::PointerIcon>>(event, pointerIndex); }
inline jboolean TextView::onKeyPreIme(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyPreIme"), jboolean>(keyCode, event); }
inline jboolean TextView::onKeyDown(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyDown"), jboolean>(keyCode, event); }
inline jboolean TextView::onKeyMultiple(jint keyCode, jint repeatCount, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyMultiple"), jboolean>(keyCode, repeatCount, event); }
inline jboolean TextView::onKeyUp(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyUp"), jboolean>(keyCode, event); }
inline jboolean TextView::onCheckIsTextEditor() { return call_method<SCAPIX_META_STRING("onCheckIsTextEditor"), jboolean>(); }
inline ref<android::view::inputmethod::InputConnection> TextView::onCreateInputConnection(ref<android::view::inputmethod::EditorInfo> outAttrs) { return call_method<SCAPIX_META_STRING("onCreateInputConnection"), ref<android::view::inputmethod::InputConnection>>(outAttrs); }
inline jboolean TextView::extractText(ref<android::view::inputmethod::ExtractedTextRequest> request, ref<android::view::inputmethod::ExtractedText> outText) { return call_method<SCAPIX_META_STRING("extractText"), jboolean>(request, outText); }
inline void TextView::setExtractedText(ref<android::view::inputmethod::ExtractedText> text) { return call_method<SCAPIX_META_STRING("setExtractedText"), void>(text); }
inline void TextView::onCommitCompletion(ref<android::view::inputmethod::CompletionInfo> text) { return call_method<SCAPIX_META_STRING("onCommitCompletion"), void>(text); }
inline void TextView::onCommitCorrection(ref<android::view::inputmethod::CorrectionInfo> info) { return call_method<SCAPIX_META_STRING("onCommitCorrection"), void>(info); }
inline void TextView::beginBatchEdit() { return call_method<SCAPIX_META_STRING("beginBatchEdit"), void>(); }
inline void TextView::endBatchEdit() { return call_method<SCAPIX_META_STRING("endBatchEdit"), void>(); }
inline void TextView::onBeginBatchEdit() { return call_method<SCAPIX_META_STRING("onBeginBatchEdit"), void>(); }
inline void TextView::onEndBatchEdit() { return call_method<SCAPIX_META_STRING("onEndBatchEdit"), void>(); }
inline jboolean TextView::onPrivateIMECommand(ref<java::lang::String> action, ref<android::os::Bundle> data) { return call_method<SCAPIX_META_STRING("onPrivateIMECommand"), jboolean>(action, data); }
inline void TextView::setIncludeFontPadding(jboolean includepad) { return call_method<SCAPIX_META_STRING("setIncludeFontPadding"), void>(includepad); }
inline jboolean TextView::getIncludeFontPadding() { return call_method<SCAPIX_META_STRING("getIncludeFontPadding"), jboolean>(); }
inline jboolean TextView::bringPointIntoView(jint offset) { return call_method<SCAPIX_META_STRING("bringPointIntoView"), jboolean>(offset); }
inline jboolean TextView::moveCursorToVisibleOffset() { return call_method<SCAPIX_META_STRING("moveCursorToVisibleOffset"), jboolean>(); }
inline void TextView::computeScroll() { return call_method<SCAPIX_META_STRING("computeScroll"), void>(); }
inline void TextView::debug(jint depth) { return call_method<SCAPIX_META_STRING("debug"), void>(depth); }
inline jint TextView::getSelectionStart() { return call_method<SCAPIX_META_STRING("getSelectionStart"), jint>(); }
inline jint TextView::getSelectionEnd() { return call_method<SCAPIX_META_STRING("getSelectionEnd"), jint>(); }
inline jboolean TextView::hasSelection() { return call_method<SCAPIX_META_STRING("hasSelection"), jboolean>(); }
inline void TextView::setSingleLine() { return call_method<SCAPIX_META_STRING("setSingleLine"), void>(); }
inline void TextView::setAllCaps(jboolean allCaps) { return call_method<SCAPIX_META_STRING("setAllCaps"), void>(allCaps); }
inline jboolean TextView::isAllCaps() { return call_method<SCAPIX_META_STRING("isAllCaps"), jboolean>(); }
inline void TextView::setSingleLine(jboolean singleLine) { return call_method<SCAPIX_META_STRING("setSingleLine"), void>(singleLine); }
inline void TextView::setEllipsize(ref<android::text::TextUtils_TruncateAt> where) { return call_method<SCAPIX_META_STRING("setEllipsize"), void>(where); }
inline void TextView::setMarqueeRepeatLimit(jint marqueeLimit) { return call_method<SCAPIX_META_STRING("setMarqueeRepeatLimit"), void>(marqueeLimit); }
inline jint TextView::getMarqueeRepeatLimit() { return call_method<SCAPIX_META_STRING("getMarqueeRepeatLimit"), jint>(); }
inline ref<android::text::TextUtils_TruncateAt> TextView::getEllipsize() { return call_method<SCAPIX_META_STRING("getEllipsize"), ref<android::text::TextUtils_TruncateAt>>(); }
inline void TextView::setSelectAllOnFocus(jboolean selectAllOnFocus) { return call_method<SCAPIX_META_STRING("setSelectAllOnFocus"), void>(selectAllOnFocus); }
inline void TextView::setCursorVisible(jboolean visible) { return call_method<SCAPIX_META_STRING("setCursorVisible"), void>(visible); }
inline jboolean TextView::isCursorVisible() { return call_method<SCAPIX_META_STRING("isCursorVisible"), jboolean>(); }
inline void TextView::addTextChangedListener(ref<android::text::TextWatcher> watcher) { return call_method<SCAPIX_META_STRING("addTextChangedListener"), void>(watcher); }
inline void TextView::removeTextChangedListener(ref<android::text::TextWatcher> watcher) { return call_method<SCAPIX_META_STRING("removeTextChangedListener"), void>(watcher); }
inline void TextView::onWindowFocusChanged(jboolean hasWindowFocus) { return call_method<SCAPIX_META_STRING("onWindowFocusChanged"), void>(hasWindowFocus); }
inline void TextView::clearComposingText() { return call_method<SCAPIX_META_STRING("clearComposingText"), void>(); }
inline void TextView::setSelected(jboolean selected) { return call_method<SCAPIX_META_STRING("setSelected"), void>(selected); }
inline jboolean TextView::onTouchEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onTouchEvent"), jboolean>(event); }
inline jboolean TextView::onGenericMotionEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onGenericMotionEvent"), jboolean>(event); }
inline jboolean TextView::showContextMenu() { return call_method<SCAPIX_META_STRING("showContextMenu"), jboolean>(); }
inline jboolean TextView::showContextMenu(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("showContextMenu"), jboolean>(x, y); }
inline jboolean TextView::didTouchFocusSelect() { return call_method<SCAPIX_META_STRING("didTouchFocusSelect"), jboolean>(); }
inline void TextView::cancelLongPress() { return call_method<SCAPIX_META_STRING("cancelLongPress"), void>(); }
inline jboolean TextView::onTrackballEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onTrackballEvent"), jboolean>(event); }
inline void TextView::setScroller(ref<android::widget::Scroller> s) { return call_method<SCAPIX_META_STRING("setScroller"), void>(s); }
inline void TextView::findViewsWithText(ref<java::util::ArrayList> outViews, ref<java::lang::CharSequence> searched, jint flags) { return call_method<SCAPIX_META_STRING("findViewsWithText"), void>(outViews, searched, flags); }
inline jboolean TextView::onKeyShortcut(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyShortcut"), jboolean>(keyCode, event); }
inline ref<java::lang::CharSequence> TextView::getAccessibilityClassName() { return call_method<SCAPIX_META_STRING("getAccessibilityClassName"), ref<java::lang::CharSequence>>(); }
inline void TextView::onProvideStructure(ref<android::view::ViewStructure> structure) { return call_method<SCAPIX_META_STRING("onProvideStructure"), void>(structure); }
inline void TextView::onProvideAutofillStructure(ref<android::view::ViewStructure> structure, jint flags) { return call_method<SCAPIX_META_STRING("onProvideAutofillStructure"), void>(structure, flags); }
inline void TextView::autofill(ref<android::view::autofill::AutofillValue> value) { return call_method<SCAPIX_META_STRING("autofill"), void>(value); }
inline jint TextView::getAutofillType() { return call_method<SCAPIX_META_STRING("getAutofillType"), jint>(); }
inline ref<android::view::autofill::AutofillValue> TextView::getAutofillValue() { return call_method<SCAPIX_META_STRING("getAutofillValue"), ref<android::view::autofill::AutofillValue>>(); }
inline void TextView::addExtraDataToAccessibilityNodeInfo(ref<android::view::accessibility::AccessibilityNodeInfo> info, ref<java::lang::String> extraDataKey, ref<android::os::Bundle> arguments) { return call_method<SCAPIX_META_STRING("addExtraDataToAccessibilityNodeInfo"), void>(info, extraDataKey, arguments); }
inline void TextView::sendAccessibilityEventUnchecked(ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<SCAPIX_META_STRING("sendAccessibilityEventUnchecked"), void>(event); }
inline jboolean TextView::isInputMethodTarget() { return call_method<SCAPIX_META_STRING("isInputMethodTarget"), jboolean>(); }
inline jboolean TextView::onTextContextMenuItem(jint id) { return call_method<SCAPIX_META_STRING("onTextContextMenuItem"), jboolean>(id); }
inline jboolean TextView::performLongClick() { return call_method<SCAPIX_META_STRING("performLongClick"), jboolean>(); }
inline jboolean TextView::isSuggestionsEnabled() { return call_method<SCAPIX_META_STRING("isSuggestionsEnabled"), jboolean>(); }
inline void TextView::setCustomSelectionActionModeCallback(ref<android::view::ActionMode_Callback> actionModeCallback) { return call_method<SCAPIX_META_STRING("setCustomSelectionActionModeCallback"), void>(actionModeCallback); }
inline ref<android::view::ActionMode_Callback> TextView::getCustomSelectionActionModeCallback() { return call_method<SCAPIX_META_STRING("getCustomSelectionActionModeCallback"), ref<android::view::ActionMode_Callback>>(); }
inline void TextView::setCustomInsertionActionModeCallback(ref<android::view::ActionMode_Callback> actionModeCallback) { return call_method<SCAPIX_META_STRING("setCustomInsertionActionModeCallback"), void>(actionModeCallback); }
inline ref<android::view::ActionMode_Callback> TextView::getCustomInsertionActionModeCallback() { return call_method<SCAPIX_META_STRING("getCustomInsertionActionModeCallback"), ref<android::view::ActionMode_Callback>>(); }
inline void TextView::setTextClassifier(ref<android::view::textclassifier::TextClassifier> textClassifier) { return call_method<SCAPIX_META_STRING("setTextClassifier"), void>(textClassifier); }
inline ref<android::view::textclassifier::TextClassifier> TextView::getTextClassifier() { return call_method<SCAPIX_META_STRING("getTextClassifier"), ref<android::view::textclassifier::TextClassifier>>(); }
inline jint TextView::getOffsetForPosition(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("getOffsetForPosition"), jint>(x, y); }
inline jboolean TextView::onDragEvent(ref<android::view::DragEvent> event) { return call_method<SCAPIX_META_STRING("onDragEvent"), jboolean>(event); }
inline void TextView::onRtlPropertiesChanged(jint layoutDirection) { return call_method<SCAPIX_META_STRING("onRtlPropertiesChanged"), void>(layoutDirection); }

} // namespace android::widget
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WIDGET_TEXTVIEW_H
