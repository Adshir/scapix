// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/widget/LinearLayout.h>

#ifndef SCAPIX_ANDROID_WIDGET_NUMBERPICKER_H
#define SCAPIX_ANDROID_WIDGET_NUMBERPICKER_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::util { class AttributeSet; }
namespace android::view { class KeyEvent; }
namespace android::view { class MotionEvent; }
namespace android::view::accessibility { class AccessibilityNodeProvider; }
namespace android::widget { class NumberPicker_Formatter; }
namespace android::widget { class NumberPicker_OnScrollListener; }
namespace android::widget { class NumberPicker_OnValueChangeListener; }
namespace java::lang { class String; }

namespace android::widget {

class NumberPicker : public object_base<SCAPIX_META_STRING("android/widget/NumberPicker"),
	android::widget::LinearLayout>
{
public:

	using OnValueChangeListener = NumberPicker_OnValueChangeListener;
	using OnScrollListener = NumberPicker_OnScrollListener;
	using Formatter = NumberPicker_Formatter;

	static ref<NumberPicker> new_object(ref<android::content::Context> context);
	static ref<NumberPicker> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<NumberPicker> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<NumberPicker> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	jboolean onInterceptTouchEvent(ref<android::view::MotionEvent> event);
	jboolean onTouchEvent(ref<android::view::MotionEvent> event);
	jboolean dispatchTouchEvent(ref<android::view::MotionEvent> event);
	jboolean dispatchKeyEvent(ref<android::view::KeyEvent> event);
	jboolean dispatchTrackballEvent(ref<android::view::MotionEvent> event);
	void computeScroll();
	void setEnabled(jboolean enabled);
	void scrollBy(jint x, jint y);
	jint getSolidColor();
	void setOnValueChangedListener(ref<android::widget::NumberPicker_OnValueChangeListener> onValueChangedListener);
	void setOnScrollListener(ref<android::widget::NumberPicker_OnScrollListener> onScrollListener);
	void setFormatter(ref<android::widget::NumberPicker_Formatter> formatter);
	void setValue(jint value);
	jboolean performClick();
	jboolean performLongClick();
	jboolean getWrapSelectorWheel();
	void setWrapSelectorWheel(jboolean wrapSelectorWheel);
	void setOnLongPressUpdateInterval(jlong intervalMillis);
	jint getValue();
	jint getMinValue();
	void setMinValue(jint minValue);
	jint getMaxValue();
	void setMaxValue(jint maxValue);
	ref<link::java::array<java::lang::String>> getDisplayedValues();
	void setDisplayedValues(ref<link::java::array<java::lang::String>> displayedValues);
	void jumpDrawablesToCurrentState();
	ref<android::view::accessibility::AccessibilityNodeProvider> getAccessibilityNodeProvider();

protected:

	NumberPicker(handle_type h) : base_(h) {}

};

} // namespace android::widget
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeProvider.h>
#include <scapix/java_api/android/widget/NumberPicker_Formatter.h>
#include <scapix/java_api/android/widget/NumberPicker_OnScrollListener.h>
#include <scapix/java_api/android/widget/NumberPicker_OnValueChangeListener.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::widget {

inline ref<NumberPicker> NumberPicker::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<NumberPicker> NumberPicker::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<NumberPicker> NumberPicker::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<NumberPicker> NumberPicker::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline jboolean NumberPicker::onInterceptTouchEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onInterceptTouchEvent"), jboolean>(event); }
inline jboolean NumberPicker::onTouchEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onTouchEvent"), jboolean>(event); }
inline jboolean NumberPicker::dispatchTouchEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("dispatchTouchEvent"), jboolean>(event); }
inline jboolean NumberPicker::dispatchKeyEvent(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("dispatchKeyEvent"), jboolean>(event); }
inline jboolean NumberPicker::dispatchTrackballEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("dispatchTrackballEvent"), jboolean>(event); }
inline void NumberPicker::computeScroll() { return call_method<SCAPIX_META_STRING("computeScroll"), void>(); }
inline void NumberPicker::setEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setEnabled"), void>(enabled); }
inline void NumberPicker::scrollBy(jint x, jint y) { return call_method<SCAPIX_META_STRING("scrollBy"), void>(x, y); }
inline jint NumberPicker::getSolidColor() { return call_method<SCAPIX_META_STRING("getSolidColor"), jint>(); }
inline void NumberPicker::setOnValueChangedListener(ref<android::widget::NumberPicker_OnValueChangeListener> onValueChangedListener) { return call_method<SCAPIX_META_STRING("setOnValueChangedListener"), void>(onValueChangedListener); }
inline void NumberPicker::setOnScrollListener(ref<android::widget::NumberPicker_OnScrollListener> onScrollListener) { return call_method<SCAPIX_META_STRING("setOnScrollListener"), void>(onScrollListener); }
inline void NumberPicker::setFormatter(ref<android::widget::NumberPicker_Formatter> formatter) { return call_method<SCAPIX_META_STRING("setFormatter"), void>(formatter); }
inline void NumberPicker::setValue(jint value) { return call_method<SCAPIX_META_STRING("setValue"), void>(value); }
inline jboolean NumberPicker::performClick() { return call_method<SCAPIX_META_STRING("performClick"), jboolean>(); }
inline jboolean NumberPicker::performLongClick() { return call_method<SCAPIX_META_STRING("performLongClick"), jboolean>(); }
inline jboolean NumberPicker::getWrapSelectorWheel() { return call_method<SCAPIX_META_STRING("getWrapSelectorWheel"), jboolean>(); }
inline void NumberPicker::setWrapSelectorWheel(jboolean wrapSelectorWheel) { return call_method<SCAPIX_META_STRING("setWrapSelectorWheel"), void>(wrapSelectorWheel); }
inline void NumberPicker::setOnLongPressUpdateInterval(jlong intervalMillis) { return call_method<SCAPIX_META_STRING("setOnLongPressUpdateInterval"), void>(intervalMillis); }
inline jint NumberPicker::getValue() { return call_method<SCAPIX_META_STRING("getValue"), jint>(); }
inline jint NumberPicker::getMinValue() { return call_method<SCAPIX_META_STRING("getMinValue"), jint>(); }
inline void NumberPicker::setMinValue(jint minValue) { return call_method<SCAPIX_META_STRING("setMinValue"), void>(minValue); }
inline jint NumberPicker::getMaxValue() { return call_method<SCAPIX_META_STRING("getMaxValue"), jint>(); }
inline void NumberPicker::setMaxValue(jint maxValue) { return call_method<SCAPIX_META_STRING("setMaxValue"), void>(maxValue); }
inline ref<link::java::array<java::lang::String>> NumberPicker::getDisplayedValues() { return call_method<SCAPIX_META_STRING("getDisplayedValues"), ref<link::java::array<java::lang::String>>>(); }
inline void NumberPicker::setDisplayedValues(ref<link::java::array<java::lang::String>> displayedValues) { return call_method<SCAPIX_META_STRING("setDisplayedValues"), void>(displayedValues); }
inline void NumberPicker::jumpDrawablesToCurrentState() { return call_method<SCAPIX_META_STRING("jumpDrawablesToCurrentState"), void>(); }
inline ref<android::view::accessibility::AccessibilityNodeProvider> NumberPicker::getAccessibilityNodeProvider() { return call_method<SCAPIX_META_STRING("getAccessibilityNodeProvider"), ref<android::view::accessibility::AccessibilityNodeProvider>>(); }

} // namespace android::widget
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WIDGET_NUMBERPICKER_H
