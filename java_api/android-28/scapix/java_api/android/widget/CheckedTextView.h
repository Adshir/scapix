// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/widget/TextView.h>
#include <scapix/java_api/android/widget/Checkable.h>

#ifndef SCAPIX_ANDROID_WIDGET_CHECKEDTEXTVIEW_H
#define SCAPIX_ANDROID_WIDGET_CHECKEDTEXTVIEW_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content::res { class ColorStateList; }
namespace android::graphics { class PorterDuff_Mode; }
namespace android::graphics::drawable { class Drawable; }
namespace android::os { class Parcelable; }
namespace android::util { class AttributeSet; }
namespace java::lang { class CharSequence; }

namespace android::widget {

class CheckedTextView : public object_base<SCAPIX_META_STRING("android/widget/CheckedTextView"),
	android::widget::TextView,
	android::widget::Checkable>
{
public:

	static ref<CheckedTextView> new_object(ref<android::content::Context> context);
	static ref<CheckedTextView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<CheckedTextView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<CheckedTextView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	void toggle();
	jboolean isChecked();
	void setChecked(jboolean checked);
	void setCheckMarkDrawable(jint resId);
	void setCheckMarkDrawable(ref<android::graphics::drawable::Drawable> d);
	void setCheckMarkTintList(ref<android::content::res::ColorStateList> tint);
	ref<android::content::res::ColorStateList> getCheckMarkTintList();
	void setCheckMarkTintMode(ref<android::graphics::PorterDuff_Mode> tintMode);
	ref<android::graphics::PorterDuff_Mode> getCheckMarkTintMode();
	void setVisibility(jint visibility);
	void jumpDrawablesToCurrentState();
	ref<android::graphics::drawable::Drawable> getCheckMarkDrawable();
	void onRtlPropertiesChanged(jint layoutDirection);
	void drawableHotspotChanged(jfloat x, jfloat y);
	ref<java::lang::CharSequence> getAccessibilityClassName();
	ref<android::os::Parcelable> onSaveInstanceState();
	void onRestoreInstanceState(ref<android::os::Parcelable> state);

protected:

	CheckedTextView(handle_type h) : base_(h) {}

};

} // namespace android::widget
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/java/lang/CharSequence.h>

namespace scapix::java_api {
namespace android::widget {

inline ref<CheckedTextView> CheckedTextView::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<CheckedTextView> CheckedTextView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<CheckedTextView> CheckedTextView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<CheckedTextView> CheckedTextView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline void CheckedTextView::toggle() { return call_method<SCAPIX_META_STRING("toggle"), void>(); }
inline jboolean CheckedTextView::isChecked() { return call_method<SCAPIX_META_STRING("isChecked"), jboolean>(); }
inline void CheckedTextView::setChecked(jboolean checked) { return call_method<SCAPIX_META_STRING("setChecked"), void>(checked); }
inline void CheckedTextView::setCheckMarkDrawable(jint resId) { return call_method<SCAPIX_META_STRING("setCheckMarkDrawable"), void>(resId); }
inline void CheckedTextView::setCheckMarkDrawable(ref<android::graphics::drawable::Drawable> d) { return call_method<SCAPIX_META_STRING("setCheckMarkDrawable"), void>(d); }
inline void CheckedTextView::setCheckMarkTintList(ref<android::content::res::ColorStateList> tint) { return call_method<SCAPIX_META_STRING("setCheckMarkTintList"), void>(tint); }
inline ref<android::content::res::ColorStateList> CheckedTextView::getCheckMarkTintList() { return call_method<SCAPIX_META_STRING("getCheckMarkTintList"), ref<android::content::res::ColorStateList>>(); }
inline void CheckedTextView::setCheckMarkTintMode(ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<SCAPIX_META_STRING("setCheckMarkTintMode"), void>(tintMode); }
inline ref<android::graphics::PorterDuff_Mode> CheckedTextView::getCheckMarkTintMode() { return call_method<SCAPIX_META_STRING("getCheckMarkTintMode"), ref<android::graphics::PorterDuff_Mode>>(); }
inline void CheckedTextView::setVisibility(jint visibility) { return call_method<SCAPIX_META_STRING("setVisibility"), void>(visibility); }
inline void CheckedTextView::jumpDrawablesToCurrentState() { return call_method<SCAPIX_META_STRING("jumpDrawablesToCurrentState"), void>(); }
inline ref<android::graphics::drawable::Drawable> CheckedTextView::getCheckMarkDrawable() { return call_method<SCAPIX_META_STRING("getCheckMarkDrawable"), ref<android::graphics::drawable::Drawable>>(); }
inline void CheckedTextView::onRtlPropertiesChanged(jint layoutDirection) { return call_method<SCAPIX_META_STRING("onRtlPropertiesChanged"), void>(layoutDirection); }
inline void CheckedTextView::drawableHotspotChanged(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("drawableHotspotChanged"), void>(x, y); }
inline ref<java::lang::CharSequence> CheckedTextView::getAccessibilityClassName() { return call_method<SCAPIX_META_STRING("getAccessibilityClassName"), ref<java::lang::CharSequence>>(); }
inline ref<android::os::Parcelable> CheckedTextView::onSaveInstanceState() { return call_method<SCAPIX_META_STRING("onSaveInstanceState"), ref<android::os::Parcelable>>(); }
inline void CheckedTextView::onRestoreInstanceState(ref<android::os::Parcelable> state) { return call_method<SCAPIX_META_STRING("onRestoreInstanceState"), void>(state); }

} // namespace android::widget
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WIDGET_CHECKEDTEXTVIEW_H
