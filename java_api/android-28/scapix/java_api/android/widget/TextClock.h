// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/widget/TextView.h>

#ifndef SCAPIX_ANDROID_WIDGET_TEXTCLOCK_H
#define SCAPIX_ANDROID_WIDGET_TEXTCLOCK_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::util { class AttributeSet; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::widget {

class TextClock : public object_base<SCAPIX_META_STRING("android/widget/TextClock"),
	android::widget::TextView>
{
public:

	static ref<java::lang::CharSequence> DEFAULT_FORMAT_12_HOUR_();
	static ref<java::lang::CharSequence> DEFAULT_FORMAT_24_HOUR_();

	static ref<TextClock> new_object(ref<android::content::Context> context);
	static ref<TextClock> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<TextClock> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<TextClock> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	ref<java::lang::CharSequence> getFormat12Hour();
	void setFormat12Hour(ref<java::lang::CharSequence> format);
	ref<java::lang::CharSequence> getFormat24Hour();
	void setFormat24Hour(ref<java::lang::CharSequence> format);
	jboolean is24HourModeEnabled();
	ref<java::lang::String> getTimeZone();
	void setTimeZone(ref<java::lang::String> timeZone);
	void onVisibilityAggregated(jboolean isVisible);

protected:

	TextClock(handle_type h) : base_(h) {}

};

} // namespace android::widget
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::widget {

inline ref<java::lang::CharSequence> TextClock::DEFAULT_FORMAT_12_HOUR_() { return get_static_field<SCAPIX_META_STRING("DEFAULT_FORMAT_12_HOUR"), ref<java::lang::CharSequence>>(); }
inline ref<java::lang::CharSequence> TextClock::DEFAULT_FORMAT_24_HOUR_() { return get_static_field<SCAPIX_META_STRING("DEFAULT_FORMAT_24_HOUR"), ref<java::lang::CharSequence>>(); }
inline ref<TextClock> TextClock::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<TextClock> TextClock::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<TextClock> TextClock::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<TextClock> TextClock::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline ref<java::lang::CharSequence> TextClock::getFormat12Hour() { return call_method<SCAPIX_META_STRING("getFormat12Hour"), ref<java::lang::CharSequence>>(); }
inline void TextClock::setFormat12Hour(ref<java::lang::CharSequence> format) { return call_method<SCAPIX_META_STRING("setFormat12Hour"), void>(format); }
inline ref<java::lang::CharSequence> TextClock::getFormat24Hour() { return call_method<SCAPIX_META_STRING("getFormat24Hour"), ref<java::lang::CharSequence>>(); }
inline void TextClock::setFormat24Hour(ref<java::lang::CharSequence> format) { return call_method<SCAPIX_META_STRING("setFormat24Hour"), void>(format); }
inline jboolean TextClock::is24HourModeEnabled() { return call_method<SCAPIX_META_STRING("is24HourModeEnabled"), jboolean>(); }
inline ref<java::lang::String> TextClock::getTimeZone() { return call_method<SCAPIX_META_STRING("getTimeZone"), ref<java::lang::String>>(); }
inline void TextClock::setTimeZone(ref<java::lang::String> timeZone) { return call_method<SCAPIX_META_STRING("setTimeZone"), void>(timeZone); }
inline void TextClock::onVisibilityAggregated(jboolean isVisible) { return call_method<SCAPIX_META_STRING("onVisibilityAggregated"), void>(isVisible); }

} // namespace android::widget
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WIDGET_TEXTCLOCK_H
