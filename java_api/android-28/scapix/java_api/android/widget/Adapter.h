// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_WIDGET_ADAPTER_H
#define SCAPIX_ANDROID_WIDGET_ADAPTER_H

namespace scapix::java_api {

namespace android::database { class DataSetObserver; }
namespace android::view { class View; }
namespace android::view { class ViewGroup; }
namespace java::lang { class CharSequence; }

namespace android::widget {

class Adapter : public object_base<SCAPIX_META_STRING("android/widget/Adapter"),
	java::lang::Object>
{
public:

	static jint IGNORE_ITEM_VIEW_TYPE_();
	static jint NO_SELECTION_();

	void registerDataSetObserver(ref<android::database::DataSetObserver> p1);
	void unregisterDataSetObserver(ref<android::database::DataSetObserver> p1);
	jint getCount();
	ref<java::lang::Object> getItem(jint p1);
	jlong getItemId(jint p1);
	jboolean hasStableIds();
	ref<android::view::View> getView(jint p1, ref<android::view::View> p2, ref<android::view::ViewGroup> p3);
	jint getItemViewType(jint p1);
	jint getViewTypeCount();
	jboolean isEmpty();
	ref<link::java::array<java::lang::CharSequence>> getAutofillOptions();

protected:

	Adapter(handle_type h) : base_(h) {}

};

} // namespace android::widget
} // namespace scapix::java_api

#include <scapix/java_api/android/database/DataSetObserver.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup.h>
#include <scapix/java_api/java/lang/CharSequence.h>

namespace scapix::java_api {
namespace android::widget {

inline jint Adapter::IGNORE_ITEM_VIEW_TYPE_() { return get_static_field<SCAPIX_META_STRING("IGNORE_ITEM_VIEW_TYPE"), jint>(); }
inline jint Adapter::NO_SELECTION_() { return get_static_field<SCAPIX_META_STRING("NO_SELECTION"), jint>(); }
inline void Adapter::registerDataSetObserver(ref<android::database::DataSetObserver> p1) { return call_method<SCAPIX_META_STRING("registerDataSetObserver"), void>(p1); }
inline void Adapter::unregisterDataSetObserver(ref<android::database::DataSetObserver> p1) { return call_method<SCAPIX_META_STRING("unregisterDataSetObserver"), void>(p1); }
inline jint Adapter::getCount() { return call_method<SCAPIX_META_STRING("getCount"), jint>(); }
inline ref<java::lang::Object> Adapter::getItem(jint p1) { return call_method<SCAPIX_META_STRING("getItem"), ref<java::lang::Object>>(p1); }
inline jlong Adapter::getItemId(jint p1) { return call_method<SCAPIX_META_STRING("getItemId"), jlong>(p1); }
inline jboolean Adapter::hasStableIds() { return call_method<SCAPIX_META_STRING("hasStableIds"), jboolean>(); }
inline ref<android::view::View> Adapter::getView(jint p1, ref<android::view::View> p2, ref<android::view::ViewGroup> p3) { return call_method<SCAPIX_META_STRING("getView"), ref<android::view::View>>(p1, p2, p3); }
inline jint Adapter::getItemViewType(jint p1) { return call_method<SCAPIX_META_STRING("getItemViewType"), jint>(p1); }
inline jint Adapter::getViewTypeCount() { return call_method<SCAPIX_META_STRING("getViewTypeCount"), jint>(); }
inline jboolean Adapter::isEmpty() { return call_method<SCAPIX_META_STRING("isEmpty"), jboolean>(); }
inline ref<link::java::array<java::lang::CharSequence>> Adapter::getAutofillOptions() { return call_method<SCAPIX_META_STRING("getAutofillOptions"), ref<link::java::array<java::lang::CharSequence>>>(); }

} // namespace android::widget
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WIDGET_ADAPTER_H
