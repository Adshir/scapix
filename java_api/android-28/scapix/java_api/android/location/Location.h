// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_LOCATION_LOCATION_H
#define SCAPIX_ANDROID_LOCATION_LOCATION_H

namespace scapix::java_api {

namespace android::os { class Bundle; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::util { class Printer; }
namespace java::lang { class String; }

namespace android::location {

class Location : public object_base<SCAPIX_META_STRING("android/location/Location"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint FORMAT_DEGREES_();
	static jint FORMAT_MINUTES_();
	static jint FORMAT_SECONDS_();

	static ref<Location> new_object(ref<java::lang::String> provider);
	static ref<Location> new_object(ref<android::location::Location> l);
	void set(ref<android::location::Location> l);
	void reset();
	static ref<java::lang::String> convert(jdouble coordinate, jint p2);
	static jdouble convert(ref<java::lang::String> coordinate);
	static void distanceBetween(jdouble startLatitude, jdouble p2, jdouble startLongitude, jdouble p4, ref<link::java::array<jfloat>> endLatitude);
	jfloat distanceTo(ref<android::location::Location> dest);
	jfloat bearingTo(ref<android::location::Location> dest);
	ref<java::lang::String> getProvider();
	void setProvider(ref<java::lang::String> provider);
	jlong getTime();
	void setTime(jlong time);
	jlong getElapsedRealtimeNanos();
	void setElapsedRealtimeNanos(jlong time);
	jdouble getLatitude();
	void setLatitude(jdouble latitude);
	jdouble getLongitude();
	void setLongitude(jdouble longitude);
	jboolean hasAltitude();
	jdouble getAltitude();
	void setAltitude(jdouble altitude);
	void removeAltitude();
	jboolean hasSpeed();
	jfloat getSpeed();
	void setSpeed(jfloat speed);
	void removeSpeed();
	jboolean hasBearing();
	jfloat getBearing();
	void setBearing(jfloat bearing);
	void removeBearing();
	jboolean hasAccuracy();
	jfloat getAccuracy();
	void setAccuracy(jfloat horizontalAccuracy);
	void removeAccuracy();
	jboolean hasVerticalAccuracy();
	jfloat getVerticalAccuracyMeters();
	void setVerticalAccuracyMeters(jfloat verticalAccuracyMeters);
	jboolean hasSpeedAccuracy();
	jfloat getSpeedAccuracyMetersPerSecond();
	void setSpeedAccuracyMetersPerSecond(jfloat speedAccuracyMeterPerSecond);
	jboolean hasBearingAccuracy();
	jfloat getBearingAccuracyDegrees();
	void setBearingAccuracyDegrees(jfloat bearingAccuracyDegrees);
	ref<android::os::Bundle> getExtras();
	void setExtras(ref<android::os::Bundle> extras);
	ref<java::lang::String> toString();
	void dump(ref<android::util::Printer> pw, ref<java::lang::String> prefix);
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> parcel, jint flags);
	jboolean isFromMockProvider();

protected:

	Location(handle_type h) : base_(h) {}

};

} // namespace android::location
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/util/Printer.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::location {

inline ref<android::os::Parcelable_Creator> Location::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint Location::FORMAT_DEGREES_() { return get_static_field<SCAPIX_META_STRING("FORMAT_DEGREES"), jint>(); }
inline jint Location::FORMAT_MINUTES_() { return get_static_field<SCAPIX_META_STRING("FORMAT_MINUTES"), jint>(); }
inline jint Location::FORMAT_SECONDS_() { return get_static_field<SCAPIX_META_STRING("FORMAT_SECONDS"), jint>(); }
inline ref<Location> Location::new_object(ref<java::lang::String> provider) { return base_::new_object(provider); }
inline ref<Location> Location::new_object(ref<android::location::Location> l) { return base_::new_object(l); }
inline void Location::set(ref<android::location::Location> l) { return call_method<SCAPIX_META_STRING("set"), void>(l); }
inline void Location::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline ref<java::lang::String> Location::convert(jdouble coordinate, jint p2) { return call_static_method<SCAPIX_META_STRING("convert"), ref<java::lang::String>>(coordinate, p2); }
inline jdouble Location::convert(ref<java::lang::String> coordinate) { return call_static_method<SCAPIX_META_STRING("convert"), jdouble>(coordinate); }
inline void Location::distanceBetween(jdouble startLatitude, jdouble p2, jdouble startLongitude, jdouble p4, ref<link::java::array<jfloat>> endLatitude) { return call_static_method<SCAPIX_META_STRING("distanceBetween"), void>(startLatitude, p2, startLongitude, p4, endLatitude); }
inline jfloat Location::distanceTo(ref<android::location::Location> dest) { return call_method<SCAPIX_META_STRING("distanceTo"), jfloat>(dest); }
inline jfloat Location::bearingTo(ref<android::location::Location> dest) { return call_method<SCAPIX_META_STRING("bearingTo"), jfloat>(dest); }
inline ref<java::lang::String> Location::getProvider() { return call_method<SCAPIX_META_STRING("getProvider"), ref<java::lang::String>>(); }
inline void Location::setProvider(ref<java::lang::String> provider) { return call_method<SCAPIX_META_STRING("setProvider"), void>(provider); }
inline jlong Location::getTime() { return call_method<SCAPIX_META_STRING("getTime"), jlong>(); }
inline void Location::setTime(jlong time) { return call_method<SCAPIX_META_STRING("setTime"), void>(time); }
inline jlong Location::getElapsedRealtimeNanos() { return call_method<SCAPIX_META_STRING("getElapsedRealtimeNanos"), jlong>(); }
inline void Location::setElapsedRealtimeNanos(jlong time) { return call_method<SCAPIX_META_STRING("setElapsedRealtimeNanos"), void>(time); }
inline jdouble Location::getLatitude() { return call_method<SCAPIX_META_STRING("getLatitude"), jdouble>(); }
inline void Location::setLatitude(jdouble latitude) { return call_method<SCAPIX_META_STRING("setLatitude"), void>(latitude); }
inline jdouble Location::getLongitude() { return call_method<SCAPIX_META_STRING("getLongitude"), jdouble>(); }
inline void Location::setLongitude(jdouble longitude) { return call_method<SCAPIX_META_STRING("setLongitude"), void>(longitude); }
inline jboolean Location::hasAltitude() { return call_method<SCAPIX_META_STRING("hasAltitude"), jboolean>(); }
inline jdouble Location::getAltitude() { return call_method<SCAPIX_META_STRING("getAltitude"), jdouble>(); }
inline void Location::setAltitude(jdouble altitude) { return call_method<SCAPIX_META_STRING("setAltitude"), void>(altitude); }
inline void Location::removeAltitude() { return call_method<SCAPIX_META_STRING("removeAltitude"), void>(); }
inline jboolean Location::hasSpeed() { return call_method<SCAPIX_META_STRING("hasSpeed"), jboolean>(); }
inline jfloat Location::getSpeed() { return call_method<SCAPIX_META_STRING("getSpeed"), jfloat>(); }
inline void Location::setSpeed(jfloat speed) { return call_method<SCAPIX_META_STRING("setSpeed"), void>(speed); }
inline void Location::removeSpeed() { return call_method<SCAPIX_META_STRING("removeSpeed"), void>(); }
inline jboolean Location::hasBearing() { return call_method<SCAPIX_META_STRING("hasBearing"), jboolean>(); }
inline jfloat Location::getBearing() { return call_method<SCAPIX_META_STRING("getBearing"), jfloat>(); }
inline void Location::setBearing(jfloat bearing) { return call_method<SCAPIX_META_STRING("setBearing"), void>(bearing); }
inline void Location::removeBearing() { return call_method<SCAPIX_META_STRING("removeBearing"), void>(); }
inline jboolean Location::hasAccuracy() { return call_method<SCAPIX_META_STRING("hasAccuracy"), jboolean>(); }
inline jfloat Location::getAccuracy() { return call_method<SCAPIX_META_STRING("getAccuracy"), jfloat>(); }
inline void Location::setAccuracy(jfloat horizontalAccuracy) { return call_method<SCAPIX_META_STRING("setAccuracy"), void>(horizontalAccuracy); }
inline void Location::removeAccuracy() { return call_method<SCAPIX_META_STRING("removeAccuracy"), void>(); }
inline jboolean Location::hasVerticalAccuracy() { return call_method<SCAPIX_META_STRING("hasVerticalAccuracy"), jboolean>(); }
inline jfloat Location::getVerticalAccuracyMeters() { return call_method<SCAPIX_META_STRING("getVerticalAccuracyMeters"), jfloat>(); }
inline void Location::setVerticalAccuracyMeters(jfloat verticalAccuracyMeters) { return call_method<SCAPIX_META_STRING("setVerticalAccuracyMeters"), void>(verticalAccuracyMeters); }
inline jboolean Location::hasSpeedAccuracy() { return call_method<SCAPIX_META_STRING("hasSpeedAccuracy"), jboolean>(); }
inline jfloat Location::getSpeedAccuracyMetersPerSecond() { return call_method<SCAPIX_META_STRING("getSpeedAccuracyMetersPerSecond"), jfloat>(); }
inline void Location::setSpeedAccuracyMetersPerSecond(jfloat speedAccuracyMeterPerSecond) { return call_method<SCAPIX_META_STRING("setSpeedAccuracyMetersPerSecond"), void>(speedAccuracyMeterPerSecond); }
inline jboolean Location::hasBearingAccuracy() { return call_method<SCAPIX_META_STRING("hasBearingAccuracy"), jboolean>(); }
inline jfloat Location::getBearingAccuracyDegrees() { return call_method<SCAPIX_META_STRING("getBearingAccuracyDegrees"), jfloat>(); }
inline void Location::setBearingAccuracyDegrees(jfloat bearingAccuracyDegrees) { return call_method<SCAPIX_META_STRING("setBearingAccuracyDegrees"), void>(bearingAccuracyDegrees); }
inline ref<android::os::Bundle> Location::getExtras() { return call_method<SCAPIX_META_STRING("getExtras"), ref<android::os::Bundle>>(); }
inline void Location::setExtras(ref<android::os::Bundle> extras) { return call_method<SCAPIX_META_STRING("setExtras"), void>(extras); }
inline ref<java::lang::String> Location::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline void Location::dump(ref<android::util::Printer> pw, ref<java::lang::String> prefix) { return call_method<SCAPIX_META_STRING("dump"), void>(pw, prefix); }
inline jint Location::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void Location::writeToParcel(ref<android::os::Parcel> parcel, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(parcel, flags); }
inline jboolean Location::isFromMockProvider() { return call_method<SCAPIX_META_STRING("isFromMockProvider"), jboolean>(); }

} // namespace android::location
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_LOCATION_LOCATION_H
