// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_LOCATION_GNSSMEASUREMENT_H
#define SCAPIX_ANDROID_LOCATION_GNSSMEASUREMENT_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::location {

class GnssMeasurement : public object_base<SCAPIX_META_STRING("android/location/GnssMeasurement"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jint ADR_STATE_CYCLE_SLIP_();
	static jint ADR_STATE_HALF_CYCLE_REPORTED_();
	static jint ADR_STATE_HALF_CYCLE_RESOLVED_();
	static jint ADR_STATE_RESET_();
	static jint ADR_STATE_UNKNOWN_();
	static jint ADR_STATE_VALID_();
	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint MULTIPATH_INDICATOR_DETECTED_();
	static jint MULTIPATH_INDICATOR_NOT_DETECTED_();
	static jint MULTIPATH_INDICATOR_UNKNOWN_();
	static jint STATE_BDS_D2_BIT_SYNC_();
	static jint STATE_BDS_D2_SUBFRAME_SYNC_();
	static jint STATE_BIT_SYNC_();
	static jint STATE_CODE_LOCK_();
	static jint STATE_GAL_E1BC_CODE_LOCK_();
	static jint STATE_GAL_E1B_PAGE_SYNC_();
	static jint STATE_GAL_E1C_2ND_CODE_LOCK_();
	static jint STATE_GLO_STRING_SYNC_();
	static jint STATE_GLO_TOD_DECODED_();
	static jint STATE_GLO_TOD_KNOWN_();
	static jint STATE_MSEC_AMBIGUOUS_();
	static jint STATE_SBAS_SYNC_();
	static jint STATE_SUBFRAME_SYNC_();
	static jint STATE_SYMBOL_SYNC_();
	static jint STATE_TOW_DECODED_();
	static jint STATE_TOW_KNOWN_();
	static jint STATE_UNKNOWN_();

	jint getSvid();
	jint getConstellationType();
	jdouble getTimeOffsetNanos();
	jint getState();
	jlong getReceivedSvTimeNanos();
	jlong getReceivedSvTimeUncertaintyNanos();
	jdouble getCn0DbHz();
	jdouble getPseudorangeRateMetersPerSecond();
	jdouble getPseudorangeRateUncertaintyMetersPerSecond();
	jint getAccumulatedDeltaRangeState();
	jdouble getAccumulatedDeltaRangeMeters();
	jdouble getAccumulatedDeltaRangeUncertaintyMeters();
	jboolean hasCarrierFrequencyHz();
	jfloat getCarrierFrequencyHz();
	jboolean hasCarrierCycles();
	jlong getCarrierCycles();
	jboolean hasCarrierPhase();
	jdouble getCarrierPhase();
	jboolean hasCarrierPhaseUncertainty();
	jdouble getCarrierPhaseUncertainty();
	jint getMultipathIndicator();
	jboolean hasSnrInDb();
	jdouble getSnrInDb();
	jboolean hasAutomaticGainControlLevelDb();
	jdouble getAutomaticGainControlLevelDb();
	void writeToParcel(ref<android::os::Parcel> parcel, jint flags);
	jint describeContents();
	ref<java::lang::String> toString();

protected:

	GnssMeasurement(handle_type h) : base_(h) {}

};

} // namespace android::location
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::location {

inline jint GnssMeasurement::ADR_STATE_CYCLE_SLIP_() { return get_static_field<SCAPIX_META_STRING("ADR_STATE_CYCLE_SLIP"), jint>(); }
inline jint GnssMeasurement::ADR_STATE_HALF_CYCLE_REPORTED_() { return get_static_field<SCAPIX_META_STRING("ADR_STATE_HALF_CYCLE_REPORTED"), jint>(); }
inline jint GnssMeasurement::ADR_STATE_HALF_CYCLE_RESOLVED_() { return get_static_field<SCAPIX_META_STRING("ADR_STATE_HALF_CYCLE_RESOLVED"), jint>(); }
inline jint GnssMeasurement::ADR_STATE_RESET_() { return get_static_field<SCAPIX_META_STRING("ADR_STATE_RESET"), jint>(); }
inline jint GnssMeasurement::ADR_STATE_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("ADR_STATE_UNKNOWN"), jint>(); }
inline jint GnssMeasurement::ADR_STATE_VALID_() { return get_static_field<SCAPIX_META_STRING("ADR_STATE_VALID"), jint>(); }
inline ref<android::os::Parcelable_Creator> GnssMeasurement::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint GnssMeasurement::MULTIPATH_INDICATOR_DETECTED_() { return get_static_field<SCAPIX_META_STRING("MULTIPATH_INDICATOR_DETECTED"), jint>(); }
inline jint GnssMeasurement::MULTIPATH_INDICATOR_NOT_DETECTED_() { return get_static_field<SCAPIX_META_STRING("MULTIPATH_INDICATOR_NOT_DETECTED"), jint>(); }
inline jint GnssMeasurement::MULTIPATH_INDICATOR_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("MULTIPATH_INDICATOR_UNKNOWN"), jint>(); }
inline jint GnssMeasurement::STATE_BDS_D2_BIT_SYNC_() { return get_static_field<SCAPIX_META_STRING("STATE_BDS_D2_BIT_SYNC"), jint>(); }
inline jint GnssMeasurement::STATE_BDS_D2_SUBFRAME_SYNC_() { return get_static_field<SCAPIX_META_STRING("STATE_BDS_D2_SUBFRAME_SYNC"), jint>(); }
inline jint GnssMeasurement::STATE_BIT_SYNC_() { return get_static_field<SCAPIX_META_STRING("STATE_BIT_SYNC"), jint>(); }
inline jint GnssMeasurement::STATE_CODE_LOCK_() { return get_static_field<SCAPIX_META_STRING("STATE_CODE_LOCK"), jint>(); }
inline jint GnssMeasurement::STATE_GAL_E1BC_CODE_LOCK_() { return get_static_field<SCAPIX_META_STRING("STATE_GAL_E1BC_CODE_LOCK"), jint>(); }
inline jint GnssMeasurement::STATE_GAL_E1B_PAGE_SYNC_() { return get_static_field<SCAPIX_META_STRING("STATE_GAL_E1B_PAGE_SYNC"), jint>(); }
inline jint GnssMeasurement::STATE_GAL_E1C_2ND_CODE_LOCK_() { return get_static_field<SCAPIX_META_STRING("STATE_GAL_E1C_2ND_CODE_LOCK"), jint>(); }
inline jint GnssMeasurement::STATE_GLO_STRING_SYNC_() { return get_static_field<SCAPIX_META_STRING("STATE_GLO_STRING_SYNC"), jint>(); }
inline jint GnssMeasurement::STATE_GLO_TOD_DECODED_() { return get_static_field<SCAPIX_META_STRING("STATE_GLO_TOD_DECODED"), jint>(); }
inline jint GnssMeasurement::STATE_GLO_TOD_KNOWN_() { return get_static_field<SCAPIX_META_STRING("STATE_GLO_TOD_KNOWN"), jint>(); }
inline jint GnssMeasurement::STATE_MSEC_AMBIGUOUS_() { return get_static_field<SCAPIX_META_STRING("STATE_MSEC_AMBIGUOUS"), jint>(); }
inline jint GnssMeasurement::STATE_SBAS_SYNC_() { return get_static_field<SCAPIX_META_STRING("STATE_SBAS_SYNC"), jint>(); }
inline jint GnssMeasurement::STATE_SUBFRAME_SYNC_() { return get_static_field<SCAPIX_META_STRING("STATE_SUBFRAME_SYNC"), jint>(); }
inline jint GnssMeasurement::STATE_SYMBOL_SYNC_() { return get_static_field<SCAPIX_META_STRING("STATE_SYMBOL_SYNC"), jint>(); }
inline jint GnssMeasurement::STATE_TOW_DECODED_() { return get_static_field<SCAPIX_META_STRING("STATE_TOW_DECODED"), jint>(); }
inline jint GnssMeasurement::STATE_TOW_KNOWN_() { return get_static_field<SCAPIX_META_STRING("STATE_TOW_KNOWN"), jint>(); }
inline jint GnssMeasurement::STATE_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("STATE_UNKNOWN"), jint>(); }
inline jint GnssMeasurement::getSvid() { return call_method<SCAPIX_META_STRING("getSvid"), jint>(); }
inline jint GnssMeasurement::getConstellationType() { return call_method<SCAPIX_META_STRING("getConstellationType"), jint>(); }
inline jdouble GnssMeasurement::getTimeOffsetNanos() { return call_method<SCAPIX_META_STRING("getTimeOffsetNanos"), jdouble>(); }
inline jint GnssMeasurement::getState() { return call_method<SCAPIX_META_STRING("getState"), jint>(); }
inline jlong GnssMeasurement::getReceivedSvTimeNanos() { return call_method<SCAPIX_META_STRING("getReceivedSvTimeNanos"), jlong>(); }
inline jlong GnssMeasurement::getReceivedSvTimeUncertaintyNanos() { return call_method<SCAPIX_META_STRING("getReceivedSvTimeUncertaintyNanos"), jlong>(); }
inline jdouble GnssMeasurement::getCn0DbHz() { return call_method<SCAPIX_META_STRING("getCn0DbHz"), jdouble>(); }
inline jdouble GnssMeasurement::getPseudorangeRateMetersPerSecond() { return call_method<SCAPIX_META_STRING("getPseudorangeRateMetersPerSecond"), jdouble>(); }
inline jdouble GnssMeasurement::getPseudorangeRateUncertaintyMetersPerSecond() { return call_method<SCAPIX_META_STRING("getPseudorangeRateUncertaintyMetersPerSecond"), jdouble>(); }
inline jint GnssMeasurement::getAccumulatedDeltaRangeState() { return call_method<SCAPIX_META_STRING("getAccumulatedDeltaRangeState"), jint>(); }
inline jdouble GnssMeasurement::getAccumulatedDeltaRangeMeters() { return call_method<SCAPIX_META_STRING("getAccumulatedDeltaRangeMeters"), jdouble>(); }
inline jdouble GnssMeasurement::getAccumulatedDeltaRangeUncertaintyMeters() { return call_method<SCAPIX_META_STRING("getAccumulatedDeltaRangeUncertaintyMeters"), jdouble>(); }
inline jboolean GnssMeasurement::hasCarrierFrequencyHz() { return call_method<SCAPIX_META_STRING("hasCarrierFrequencyHz"), jboolean>(); }
inline jfloat GnssMeasurement::getCarrierFrequencyHz() { return call_method<SCAPIX_META_STRING("getCarrierFrequencyHz"), jfloat>(); }
inline jboolean GnssMeasurement::hasCarrierCycles() { return call_method<SCAPIX_META_STRING("hasCarrierCycles"), jboolean>(); }
inline jlong GnssMeasurement::getCarrierCycles() { return call_method<SCAPIX_META_STRING("getCarrierCycles"), jlong>(); }
inline jboolean GnssMeasurement::hasCarrierPhase() { return call_method<SCAPIX_META_STRING("hasCarrierPhase"), jboolean>(); }
inline jdouble GnssMeasurement::getCarrierPhase() { return call_method<SCAPIX_META_STRING("getCarrierPhase"), jdouble>(); }
inline jboolean GnssMeasurement::hasCarrierPhaseUncertainty() { return call_method<SCAPIX_META_STRING("hasCarrierPhaseUncertainty"), jboolean>(); }
inline jdouble GnssMeasurement::getCarrierPhaseUncertainty() { return call_method<SCAPIX_META_STRING("getCarrierPhaseUncertainty"), jdouble>(); }
inline jint GnssMeasurement::getMultipathIndicator() { return call_method<SCAPIX_META_STRING("getMultipathIndicator"), jint>(); }
inline jboolean GnssMeasurement::hasSnrInDb() { return call_method<SCAPIX_META_STRING("hasSnrInDb"), jboolean>(); }
inline jdouble GnssMeasurement::getSnrInDb() { return call_method<SCAPIX_META_STRING("getSnrInDb"), jdouble>(); }
inline jboolean GnssMeasurement::hasAutomaticGainControlLevelDb() { return call_method<SCAPIX_META_STRING("hasAutomaticGainControlLevelDb"), jboolean>(); }
inline jdouble GnssMeasurement::getAutomaticGainControlLevelDb() { return call_method<SCAPIX_META_STRING("getAutomaticGainControlLevelDb"), jdouble>(); }
inline void GnssMeasurement::writeToParcel(ref<android::os::Parcel> parcel, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(parcel, flags); }
inline jint GnssMeasurement::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline ref<java::lang::String> GnssMeasurement::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::location
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_LOCATION_GNSSMEASUREMENT_H
