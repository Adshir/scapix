// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_LOCATION_GNSSCLOCK_H
#define SCAPIX_ANDROID_LOCATION_GNSSCLOCK_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::location {

class GnssClock : public object_base<SCAPIX_META_STRING("android/location/GnssClock"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();

	jboolean hasLeapSecond();
	jint getLeapSecond();
	jlong getTimeNanos();
	jboolean hasTimeUncertaintyNanos();
	jdouble getTimeUncertaintyNanos();
	jboolean hasFullBiasNanos();
	jlong getFullBiasNanos();
	jboolean hasBiasNanos();
	jdouble getBiasNanos();
	jboolean hasBiasUncertaintyNanos();
	jdouble getBiasUncertaintyNanos();
	jboolean hasDriftNanosPerSecond();
	jdouble getDriftNanosPerSecond();
	jboolean hasDriftUncertaintyNanosPerSecond();
	jdouble getDriftUncertaintyNanosPerSecond();
	jint getHardwareClockDiscontinuityCount();
	void writeToParcel(ref<android::os::Parcel> parcel, jint flags);
	jint describeContents();
	ref<java::lang::String> toString();

protected:

	GnssClock(handle_type h) : base_(h) {}

};

} // namespace android::location
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::location {

inline ref<android::os::Parcelable_Creator> GnssClock::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jboolean GnssClock::hasLeapSecond() { return call_method<SCAPIX_META_STRING("hasLeapSecond"), jboolean>(); }
inline jint GnssClock::getLeapSecond() { return call_method<SCAPIX_META_STRING("getLeapSecond"), jint>(); }
inline jlong GnssClock::getTimeNanos() { return call_method<SCAPIX_META_STRING("getTimeNanos"), jlong>(); }
inline jboolean GnssClock::hasTimeUncertaintyNanos() { return call_method<SCAPIX_META_STRING("hasTimeUncertaintyNanos"), jboolean>(); }
inline jdouble GnssClock::getTimeUncertaintyNanos() { return call_method<SCAPIX_META_STRING("getTimeUncertaintyNanos"), jdouble>(); }
inline jboolean GnssClock::hasFullBiasNanos() { return call_method<SCAPIX_META_STRING("hasFullBiasNanos"), jboolean>(); }
inline jlong GnssClock::getFullBiasNanos() { return call_method<SCAPIX_META_STRING("getFullBiasNanos"), jlong>(); }
inline jboolean GnssClock::hasBiasNanos() { return call_method<SCAPIX_META_STRING("hasBiasNanos"), jboolean>(); }
inline jdouble GnssClock::getBiasNanos() { return call_method<SCAPIX_META_STRING("getBiasNanos"), jdouble>(); }
inline jboolean GnssClock::hasBiasUncertaintyNanos() { return call_method<SCAPIX_META_STRING("hasBiasUncertaintyNanos"), jboolean>(); }
inline jdouble GnssClock::getBiasUncertaintyNanos() { return call_method<SCAPIX_META_STRING("getBiasUncertaintyNanos"), jdouble>(); }
inline jboolean GnssClock::hasDriftNanosPerSecond() { return call_method<SCAPIX_META_STRING("hasDriftNanosPerSecond"), jboolean>(); }
inline jdouble GnssClock::getDriftNanosPerSecond() { return call_method<SCAPIX_META_STRING("getDriftNanosPerSecond"), jdouble>(); }
inline jboolean GnssClock::hasDriftUncertaintyNanosPerSecond() { return call_method<SCAPIX_META_STRING("hasDriftUncertaintyNanosPerSecond"), jboolean>(); }
inline jdouble GnssClock::getDriftUncertaintyNanosPerSecond() { return call_method<SCAPIX_META_STRING("getDriftUncertaintyNanosPerSecond"), jdouble>(); }
inline jint GnssClock::getHardwareClockDiscontinuityCount() { return call_method<SCAPIX_META_STRING("getHardwareClockDiscontinuityCount"), jint>(); }
inline void GnssClock::writeToParcel(ref<android::os::Parcel> parcel, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(parcel, flags); }
inline jint GnssClock::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline ref<java::lang::String> GnssClock::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::location
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_LOCATION_GNSSCLOCK_H
