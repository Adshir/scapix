// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/transition/Transition.h>

#ifndef SCAPIX_ANDROID_TRANSITION_VISIBILITY_H
#define SCAPIX_ANDROID_TRANSITION_VISIBILITY_H

namespace scapix::java_api {

namespace android::animation { class Animator; }
namespace android::content { class Context; }
namespace android::transition { class TransitionValues; }
namespace android::util { class AttributeSet; }
namespace android::view { class View; }
namespace android::view { class ViewGroup; }
namespace java::lang { class String; }

namespace android::transition {

class Visibility : public object_base<SCAPIX_META_STRING("android/transition/Visibility"),
	android::transition::Transition>
{
public:

	static jint MODE_IN_();
	static jint MODE_OUT_();

	static ref<Visibility> new_object();
	static ref<Visibility> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	void setMode(jint mode);
	jint getMode();
	ref<link::java::array<java::lang::String>> getTransitionProperties();
	void captureStartValues(ref<android::transition::TransitionValues> transitionValues);
	void captureEndValues(ref<android::transition::TransitionValues> transitionValues);
	jboolean isVisible(ref<android::transition::TransitionValues> values);
	ref<android::animation::Animator> createAnimator(ref<android::view::ViewGroup> sceneRoot, ref<android::transition::TransitionValues> startValues, ref<android::transition::TransitionValues> endValues);
	ref<android::animation::Animator> onAppear(ref<android::view::ViewGroup> sceneRoot, ref<android::transition::TransitionValues> startValues, jint startVisibility, ref<android::transition::TransitionValues> endValues, jint endVisibility);
	ref<android::animation::Animator> onAppear(ref<android::view::ViewGroup> sceneRoot, ref<android::view::View> view, ref<android::transition::TransitionValues> startValues, ref<android::transition::TransitionValues> endValues);
	ref<android::animation::Animator> onDisappear(ref<android::view::ViewGroup> sceneRoot, ref<android::transition::TransitionValues> startValues, jint startVisibility, ref<android::transition::TransitionValues> endValues, jint endVisibility);
	jboolean isTransitionRequired(ref<android::transition::TransitionValues> startValues, ref<android::transition::TransitionValues> newValues);
	ref<android::animation::Animator> onDisappear(ref<android::view::ViewGroup> sceneRoot, ref<android::view::View> view, ref<android::transition::TransitionValues> startValues, ref<android::transition::TransitionValues> endValues);

protected:

	Visibility(handle_type h) : base_(h) {}

};

} // namespace android::transition
} // namespace scapix::java_api

#include <scapix/java_api/android/animation/Animator.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/transition/TransitionValues.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::transition {

inline jint Visibility::MODE_IN_() { return get_static_field<SCAPIX_META_STRING("MODE_IN"), jint>(); }
inline jint Visibility::MODE_OUT_() { return get_static_field<SCAPIX_META_STRING("MODE_OUT"), jint>(); }
inline ref<Visibility> Visibility::new_object() { return base_::new_object(); }
inline ref<Visibility> Visibility::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline void Visibility::setMode(jint mode) { return call_method<SCAPIX_META_STRING("setMode"), void>(mode); }
inline jint Visibility::getMode() { return call_method<SCAPIX_META_STRING("getMode"), jint>(); }
inline ref<link::java::array<java::lang::String>> Visibility::getTransitionProperties() { return call_method<SCAPIX_META_STRING("getTransitionProperties"), ref<link::java::array<java::lang::String>>>(); }
inline void Visibility::captureStartValues(ref<android::transition::TransitionValues> transitionValues) { return call_method<SCAPIX_META_STRING("captureStartValues"), void>(transitionValues); }
inline void Visibility::captureEndValues(ref<android::transition::TransitionValues> transitionValues) { return call_method<SCAPIX_META_STRING("captureEndValues"), void>(transitionValues); }
inline jboolean Visibility::isVisible(ref<android::transition::TransitionValues> values) { return call_method<SCAPIX_META_STRING("isVisible"), jboolean>(values); }
inline ref<android::animation::Animator> Visibility::createAnimator(ref<android::view::ViewGroup> sceneRoot, ref<android::transition::TransitionValues> startValues, ref<android::transition::TransitionValues> endValues) { return call_method<SCAPIX_META_STRING("createAnimator"), ref<android::animation::Animator>>(sceneRoot, startValues, endValues); }
inline ref<android::animation::Animator> Visibility::onAppear(ref<android::view::ViewGroup> sceneRoot, ref<android::transition::TransitionValues> startValues, jint startVisibility, ref<android::transition::TransitionValues> endValues, jint endVisibility) { return call_method<SCAPIX_META_STRING("onAppear"), ref<android::animation::Animator>>(sceneRoot, startValues, startVisibility, endValues, endVisibility); }
inline ref<android::animation::Animator> Visibility::onAppear(ref<android::view::ViewGroup> sceneRoot, ref<android::view::View> view, ref<android::transition::TransitionValues> startValues, ref<android::transition::TransitionValues> endValues) { return call_method<SCAPIX_META_STRING("onAppear"), ref<android::animation::Animator>>(sceneRoot, view, startValues, endValues); }
inline ref<android::animation::Animator> Visibility::onDisappear(ref<android::view::ViewGroup> sceneRoot, ref<android::transition::TransitionValues> startValues, jint startVisibility, ref<android::transition::TransitionValues> endValues, jint endVisibility) { return call_method<SCAPIX_META_STRING("onDisappear"), ref<android::animation::Animator>>(sceneRoot, startValues, startVisibility, endValues, endVisibility); }
inline jboolean Visibility::isTransitionRequired(ref<android::transition::TransitionValues> startValues, ref<android::transition::TransitionValues> newValues) { return call_method<SCAPIX_META_STRING("isTransitionRequired"), jboolean>(startValues, newValues); }
inline ref<android::animation::Animator> Visibility::onDisappear(ref<android::view::ViewGroup> sceneRoot, ref<android::view::View> view, ref<android::transition::TransitionValues> startValues, ref<android::transition::TransitionValues> endValues) { return call_method<SCAPIX_META_STRING("onDisappear"), ref<android::animation::Animator>>(sceneRoot, view, startValues, endValues); }

} // namespace android::transition
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TRANSITION_VISIBILITY_H
