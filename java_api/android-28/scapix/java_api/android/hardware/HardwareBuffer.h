// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_ANDROID_HARDWARE_HARDWAREBUFFER_H
#define SCAPIX_ANDROID_HARDWARE_HARDWAREBUFFER_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }

namespace android::hardware {

class HardwareBuffer : public object_base<SCAPIX_META_STRING("android/hardware/HardwareBuffer"),
	java::lang::Object,
	android::os::Parcelable,
	java::lang::AutoCloseable>
{
public:

	static jint BLOB_();
	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint DS_24UI8_();
	static jint DS_FP32UI8_();
	static jint D_16_();
	static jint D_24_();
	static jint D_FP32_();
	static jint RGBA_1010102_();
	static jint RGBA_8888_();
	static jint RGBA_FP16_();
	static jint RGBX_8888_();
	static jint RGB_565_();
	static jint RGB_888_();
	static jint S_UI8_();
	static jlong USAGE_CPU_READ_OFTEN_();
	static jlong USAGE_CPU_READ_RARELY_();
	static jlong USAGE_CPU_WRITE_OFTEN_();
	static jlong USAGE_CPU_WRITE_RARELY_();
	static jlong USAGE_GPU_COLOR_OUTPUT_();
	static jlong USAGE_GPU_CUBE_MAP_();
	static jlong USAGE_GPU_DATA_BUFFER_();
	static jlong USAGE_GPU_MIPMAP_COMPLETE_();
	static jlong USAGE_GPU_SAMPLED_IMAGE_();
	static jlong USAGE_PROTECTED_CONTENT_();
	static jlong USAGE_SENSOR_DIRECT_DATA_();
	static jlong USAGE_VIDEO_ENCODE_();

	static ref<android::hardware::HardwareBuffer> create(jint width, jint height, jint format, jint layers, jlong usage);
	jint getWidth();
	jint getHeight();
	jint getFormat();
	jint getLayers();
	jlong getUsage();
	void close();
	jboolean isClosed();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);

protected:

	HardwareBuffer(handle_type h) : base_(h) {}

};

} // namespace android::hardware
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>

namespace scapix::java_api {
namespace android::hardware {

inline jint HardwareBuffer::BLOB_() { return get_static_field<SCAPIX_META_STRING("BLOB"), jint>(); }
inline ref<android::os::Parcelable_Creator> HardwareBuffer::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint HardwareBuffer::DS_24UI8_() { return get_static_field<SCAPIX_META_STRING("DS_24UI8"), jint>(); }
inline jint HardwareBuffer::DS_FP32UI8_() { return get_static_field<SCAPIX_META_STRING("DS_FP32UI8"), jint>(); }
inline jint HardwareBuffer::D_16_() { return get_static_field<SCAPIX_META_STRING("D_16"), jint>(); }
inline jint HardwareBuffer::D_24_() { return get_static_field<SCAPIX_META_STRING("D_24"), jint>(); }
inline jint HardwareBuffer::D_FP32_() { return get_static_field<SCAPIX_META_STRING("D_FP32"), jint>(); }
inline jint HardwareBuffer::RGBA_1010102_() { return get_static_field<SCAPIX_META_STRING("RGBA_1010102"), jint>(); }
inline jint HardwareBuffer::RGBA_8888_() { return get_static_field<SCAPIX_META_STRING("RGBA_8888"), jint>(); }
inline jint HardwareBuffer::RGBA_FP16_() { return get_static_field<SCAPIX_META_STRING("RGBA_FP16"), jint>(); }
inline jint HardwareBuffer::RGBX_8888_() { return get_static_field<SCAPIX_META_STRING("RGBX_8888"), jint>(); }
inline jint HardwareBuffer::RGB_565_() { return get_static_field<SCAPIX_META_STRING("RGB_565"), jint>(); }
inline jint HardwareBuffer::RGB_888_() { return get_static_field<SCAPIX_META_STRING("RGB_888"), jint>(); }
inline jint HardwareBuffer::S_UI8_() { return get_static_field<SCAPIX_META_STRING("S_UI8"), jint>(); }
inline jlong HardwareBuffer::USAGE_CPU_READ_OFTEN_() { return get_static_field<SCAPIX_META_STRING("USAGE_CPU_READ_OFTEN"), jlong>(); }
inline jlong HardwareBuffer::USAGE_CPU_READ_RARELY_() { return get_static_field<SCAPIX_META_STRING("USAGE_CPU_READ_RARELY"), jlong>(); }
inline jlong HardwareBuffer::USAGE_CPU_WRITE_OFTEN_() { return get_static_field<SCAPIX_META_STRING("USAGE_CPU_WRITE_OFTEN"), jlong>(); }
inline jlong HardwareBuffer::USAGE_CPU_WRITE_RARELY_() { return get_static_field<SCAPIX_META_STRING("USAGE_CPU_WRITE_RARELY"), jlong>(); }
inline jlong HardwareBuffer::USAGE_GPU_COLOR_OUTPUT_() { return get_static_field<SCAPIX_META_STRING("USAGE_GPU_COLOR_OUTPUT"), jlong>(); }
inline jlong HardwareBuffer::USAGE_GPU_CUBE_MAP_() { return get_static_field<SCAPIX_META_STRING("USAGE_GPU_CUBE_MAP"), jlong>(); }
inline jlong HardwareBuffer::USAGE_GPU_DATA_BUFFER_() { return get_static_field<SCAPIX_META_STRING("USAGE_GPU_DATA_BUFFER"), jlong>(); }
inline jlong HardwareBuffer::USAGE_GPU_MIPMAP_COMPLETE_() { return get_static_field<SCAPIX_META_STRING("USAGE_GPU_MIPMAP_COMPLETE"), jlong>(); }
inline jlong HardwareBuffer::USAGE_GPU_SAMPLED_IMAGE_() { return get_static_field<SCAPIX_META_STRING("USAGE_GPU_SAMPLED_IMAGE"), jlong>(); }
inline jlong HardwareBuffer::USAGE_PROTECTED_CONTENT_() { return get_static_field<SCAPIX_META_STRING("USAGE_PROTECTED_CONTENT"), jlong>(); }
inline jlong HardwareBuffer::USAGE_SENSOR_DIRECT_DATA_() { return get_static_field<SCAPIX_META_STRING("USAGE_SENSOR_DIRECT_DATA"), jlong>(); }
inline jlong HardwareBuffer::USAGE_VIDEO_ENCODE_() { return get_static_field<SCAPIX_META_STRING("USAGE_VIDEO_ENCODE"), jlong>(); }
inline ref<android::hardware::HardwareBuffer> HardwareBuffer::create(jint width, jint height, jint format, jint layers, jlong usage) { return call_static_method<SCAPIX_META_STRING("create"), ref<android::hardware::HardwareBuffer>>(width, height, format, layers, usage); }
inline jint HardwareBuffer::getWidth() { return call_method<SCAPIX_META_STRING("getWidth"), jint>(); }
inline jint HardwareBuffer::getHeight() { return call_method<SCAPIX_META_STRING("getHeight"), jint>(); }
inline jint HardwareBuffer::getFormat() { return call_method<SCAPIX_META_STRING("getFormat"), jint>(); }
inline jint HardwareBuffer::getLayers() { return call_method<SCAPIX_META_STRING("getLayers"), jint>(); }
inline jlong HardwareBuffer::getUsage() { return call_method<SCAPIX_META_STRING("getUsage"), jlong>(); }
inline void HardwareBuffer::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jboolean HardwareBuffer::isClosed() { return call_method<SCAPIX_META_STRING("isClosed"), jboolean>(); }
inline jint HardwareBuffer::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void HardwareBuffer::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }

} // namespace android::hardware
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_HARDWARE_HARDWAREBUFFER_H
