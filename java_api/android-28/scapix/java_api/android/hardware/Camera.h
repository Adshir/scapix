// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_HARDWARE_CAMERA_H
#define SCAPIX_ANDROID_HARDWARE_CAMERA_H

namespace scapix::java_api {

namespace android::graphics { class SurfaceTexture; }
namespace android::hardware { class Camera_AutoFocusCallback; }
namespace android::hardware { class Camera_AutoFocusMoveCallback; }
namespace android::hardware { class Camera_CameraInfo; }
namespace android::hardware { class Camera_ErrorCallback; }
namespace android::hardware { class Camera_FaceDetectionListener; }
namespace android::hardware { class Camera_OnZoomChangeListener; }
namespace android::hardware { class Camera_Parameters; }
namespace android::hardware { class Camera_PictureCallback; }
namespace android::hardware { class Camera_PreviewCallback; }
namespace android::hardware { class Camera_ShutterCallback; }
namespace android::view { class SurfaceHolder; }
namespace java::lang { class String; }
namespace android::hardware { class Camera_Size; }
namespace android::hardware { class Camera_Face; }
namespace android::hardware { class Camera_Area; }

namespace android::hardware {

class Camera : public object_base<SCAPIX_META_STRING("android/hardware/Camera"),
	java::lang::Object>
{
public:

	using Size = Camera_Size;
	using ShutterCallback = Camera_ShutterCallback;
	using PreviewCallback = Camera_PreviewCallback;
	using PictureCallback = Camera_PictureCallback;
	using Parameters = Camera_Parameters;
	using OnZoomChangeListener = Camera_OnZoomChangeListener;
	using FaceDetectionListener = Camera_FaceDetectionListener;
	using Face = Camera_Face;
	using ErrorCallback = Camera_ErrorCallback;
	using CameraInfo = Camera_CameraInfo;
	using AutoFocusMoveCallback = Camera_AutoFocusMoveCallback;
	using AutoFocusCallback = Camera_AutoFocusCallback;
	using Area = Camera_Area;

	static ref<java::lang::String> ACTION_NEW_PICTURE_();
	static ref<java::lang::String> ACTION_NEW_VIDEO_();
	static jint CAMERA_ERROR_EVICTED_();
	static jint CAMERA_ERROR_SERVER_DIED_();
	static jint CAMERA_ERROR_UNKNOWN_();

	static jint getNumberOfCameras();
	static void getCameraInfo(jint cameraId, ref<android::hardware::Camera_CameraInfo> cameraInfo);
	static ref<android::hardware::Camera> open(jint cameraId);
	static ref<android::hardware::Camera> open();
	void release();
	void unlock();
	void lock();
	void reconnect();
	void setPreviewDisplay(ref<android::view::SurfaceHolder> holder);
	void setPreviewTexture(ref<android::graphics::SurfaceTexture> p1);
	void startPreview();
	void stopPreview();
	void setPreviewCallback(ref<android::hardware::Camera_PreviewCallback> cb);
	void setOneShotPreviewCallback(ref<android::hardware::Camera_PreviewCallback> cb);
	void setPreviewCallbackWithBuffer(ref<android::hardware::Camera_PreviewCallback> cb);
	void addCallbackBuffer(ref<link::java::array<jbyte>> callbackBuffer);
	void autoFocus(ref<android::hardware::Camera_AutoFocusCallback> cb);
	void cancelAutoFocus();
	void setAutoFocusMoveCallback(ref<android::hardware::Camera_AutoFocusMoveCallback> cb);
	void takePicture(ref<android::hardware::Camera_ShutterCallback> shutter, ref<android::hardware::Camera_PictureCallback> raw, ref<android::hardware::Camera_PictureCallback> jpeg);
	void takePicture(ref<android::hardware::Camera_ShutterCallback> shutter, ref<android::hardware::Camera_PictureCallback> raw, ref<android::hardware::Camera_PictureCallback> postview, ref<android::hardware::Camera_PictureCallback> jpeg);
	void startSmoothZoom(jint p1);
	void stopSmoothZoom();
	void setDisplayOrientation(jint p1);
	jboolean enableShutterSound(jboolean enabled);
	void setZoomChangeListener(ref<android::hardware::Camera_OnZoomChangeListener> listener);
	void setFaceDetectionListener(ref<android::hardware::Camera_FaceDetectionListener> listener);
	void startFaceDetection();
	void stopFaceDetection();
	void setErrorCallback(ref<android::hardware::Camera_ErrorCallback> cb);
	void setParameters(ref<android::hardware::Camera_Parameters> params);
	ref<android::hardware::Camera_Parameters> getParameters();

protected:

	Camera(handle_type h) : base_(h) {}

};

} // namespace android::hardware
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/SurfaceTexture.h>
#include <scapix/java_api/android/hardware/Camera_AutoFocusCallback.h>
#include <scapix/java_api/android/hardware/Camera_AutoFocusMoveCallback.h>
#include <scapix/java_api/android/hardware/Camera_CameraInfo.h>
#include <scapix/java_api/android/hardware/Camera_ErrorCallback.h>
#include <scapix/java_api/android/hardware/Camera_FaceDetectionListener.h>
#include <scapix/java_api/android/hardware/Camera_OnZoomChangeListener.h>
#include <scapix/java_api/android/hardware/Camera_Parameters.h>
#include <scapix/java_api/android/hardware/Camera_PictureCallback.h>
#include <scapix/java_api/android/hardware/Camera_PreviewCallback.h>
#include <scapix/java_api/android/hardware/Camera_ShutterCallback.h>
#include <scapix/java_api/android/view/SurfaceHolder.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::hardware {

inline ref<java::lang::String> Camera::ACTION_NEW_PICTURE_() { return get_static_field<SCAPIX_META_STRING("ACTION_NEW_PICTURE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Camera::ACTION_NEW_VIDEO_() { return get_static_field<SCAPIX_META_STRING("ACTION_NEW_VIDEO"), ref<java::lang::String>>(); }
inline jint Camera::CAMERA_ERROR_EVICTED_() { return get_static_field<SCAPIX_META_STRING("CAMERA_ERROR_EVICTED"), jint>(); }
inline jint Camera::CAMERA_ERROR_SERVER_DIED_() { return get_static_field<SCAPIX_META_STRING("CAMERA_ERROR_SERVER_DIED"), jint>(); }
inline jint Camera::CAMERA_ERROR_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("CAMERA_ERROR_UNKNOWN"), jint>(); }
inline jint Camera::getNumberOfCameras() { return call_static_method<SCAPIX_META_STRING("getNumberOfCameras"), jint>(); }
inline void Camera::getCameraInfo(jint cameraId, ref<android::hardware::Camera_CameraInfo> cameraInfo) { return call_static_method<SCAPIX_META_STRING("getCameraInfo"), void>(cameraId, cameraInfo); }
inline ref<android::hardware::Camera> Camera::open(jint cameraId) { return call_static_method<SCAPIX_META_STRING("open"), ref<android::hardware::Camera>>(cameraId); }
inline ref<android::hardware::Camera> Camera::open() { return call_static_method<SCAPIX_META_STRING("open"), ref<android::hardware::Camera>>(); }
inline void Camera::release() { return call_method<SCAPIX_META_STRING("release"), void>(); }
inline void Camera::unlock() { return call_method<SCAPIX_META_STRING("unlock"), void>(); }
inline void Camera::lock() { return call_method<SCAPIX_META_STRING("lock"), void>(); }
inline void Camera::reconnect() { return call_method<SCAPIX_META_STRING("reconnect"), void>(); }
inline void Camera::setPreviewDisplay(ref<android::view::SurfaceHolder> holder) { return call_method<SCAPIX_META_STRING("setPreviewDisplay"), void>(holder); }
inline void Camera::setPreviewTexture(ref<android::graphics::SurfaceTexture> p1) { return call_method<SCAPIX_META_STRING("setPreviewTexture"), void>(p1); }
inline void Camera::startPreview() { return call_method<SCAPIX_META_STRING("startPreview"), void>(); }
inline void Camera::stopPreview() { return call_method<SCAPIX_META_STRING("stopPreview"), void>(); }
inline void Camera::setPreviewCallback(ref<android::hardware::Camera_PreviewCallback> cb) { return call_method<SCAPIX_META_STRING("setPreviewCallback"), void>(cb); }
inline void Camera::setOneShotPreviewCallback(ref<android::hardware::Camera_PreviewCallback> cb) { return call_method<SCAPIX_META_STRING("setOneShotPreviewCallback"), void>(cb); }
inline void Camera::setPreviewCallbackWithBuffer(ref<android::hardware::Camera_PreviewCallback> cb) { return call_method<SCAPIX_META_STRING("setPreviewCallbackWithBuffer"), void>(cb); }
inline void Camera::addCallbackBuffer(ref<link::java::array<jbyte>> callbackBuffer) { return call_method<SCAPIX_META_STRING("addCallbackBuffer"), void>(callbackBuffer); }
inline void Camera::autoFocus(ref<android::hardware::Camera_AutoFocusCallback> cb) { return call_method<SCAPIX_META_STRING("autoFocus"), void>(cb); }
inline void Camera::cancelAutoFocus() { return call_method<SCAPIX_META_STRING("cancelAutoFocus"), void>(); }
inline void Camera::setAutoFocusMoveCallback(ref<android::hardware::Camera_AutoFocusMoveCallback> cb) { return call_method<SCAPIX_META_STRING("setAutoFocusMoveCallback"), void>(cb); }
inline void Camera::takePicture(ref<android::hardware::Camera_ShutterCallback> shutter, ref<android::hardware::Camera_PictureCallback> raw, ref<android::hardware::Camera_PictureCallback> jpeg) { return call_method<SCAPIX_META_STRING("takePicture"), void>(shutter, raw, jpeg); }
inline void Camera::takePicture(ref<android::hardware::Camera_ShutterCallback> shutter, ref<android::hardware::Camera_PictureCallback> raw, ref<android::hardware::Camera_PictureCallback> postview, ref<android::hardware::Camera_PictureCallback> jpeg) { return call_method<SCAPIX_META_STRING("takePicture"), void>(shutter, raw, postview, jpeg); }
inline void Camera::startSmoothZoom(jint p1) { return call_method<SCAPIX_META_STRING("startSmoothZoom"), void>(p1); }
inline void Camera::stopSmoothZoom() { return call_method<SCAPIX_META_STRING("stopSmoothZoom"), void>(); }
inline void Camera::setDisplayOrientation(jint p1) { return call_method<SCAPIX_META_STRING("setDisplayOrientation"), void>(p1); }
inline jboolean Camera::enableShutterSound(jboolean enabled) { return call_method<SCAPIX_META_STRING("enableShutterSound"), jboolean>(enabled); }
inline void Camera::setZoomChangeListener(ref<android::hardware::Camera_OnZoomChangeListener> listener) { return call_method<SCAPIX_META_STRING("setZoomChangeListener"), void>(listener); }
inline void Camera::setFaceDetectionListener(ref<android::hardware::Camera_FaceDetectionListener> listener) { return call_method<SCAPIX_META_STRING("setFaceDetectionListener"), void>(listener); }
inline void Camera::startFaceDetection() { return call_method<SCAPIX_META_STRING("startFaceDetection"), void>(); }
inline void Camera::stopFaceDetection() { return call_method<SCAPIX_META_STRING("stopFaceDetection"), void>(); }
inline void Camera::setErrorCallback(ref<android::hardware::Camera_ErrorCallback> cb) { return call_method<SCAPIX_META_STRING("setErrorCallback"), void>(cb); }
inline void Camera::setParameters(ref<android::hardware::Camera_Parameters> params) { return call_method<SCAPIX_META_STRING("setParameters"), void>(params); }
inline ref<android::hardware::Camera_Parameters> Camera::getParameters() { return call_method<SCAPIX_META_STRING("getParameters"), ref<android::hardware::Camera_Parameters>>(); }

} // namespace android::hardware
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_HARDWARE_CAMERA_H
