// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_HARDWARE_SENSOR_H
#define SCAPIX_ANDROID_HARDWARE_SENSOR_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace android::hardware {

class Sensor : public object_base<SCAPIX_META_STRING("android/hardware/Sensor"),
	java::lang::Object>
{
public:

	static jint REPORTING_MODE_CONTINUOUS_();
	static jint REPORTING_MODE_ONE_SHOT_();
	static jint REPORTING_MODE_ON_CHANGE_();
	static jint REPORTING_MODE_SPECIAL_TRIGGER_();
	static ref<java::lang::String> STRING_TYPE_ACCELEROMETER_();
	static ref<java::lang::String> STRING_TYPE_ACCELEROMETER_UNCALIBRATED_();
	static ref<java::lang::String> STRING_TYPE_AMBIENT_TEMPERATURE_();
	static ref<java::lang::String> STRING_TYPE_GAME_ROTATION_VECTOR_();
	static ref<java::lang::String> STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR_();
	static ref<java::lang::String> STRING_TYPE_GRAVITY_();
	static ref<java::lang::String> STRING_TYPE_GYROSCOPE_();
	static ref<java::lang::String> STRING_TYPE_GYROSCOPE_UNCALIBRATED_();
	static ref<java::lang::String> STRING_TYPE_HEART_BEAT_();
	static ref<java::lang::String> STRING_TYPE_HEART_RATE_();
	static ref<java::lang::String> STRING_TYPE_LIGHT_();
	static ref<java::lang::String> STRING_TYPE_LINEAR_ACCELERATION_();
	static ref<java::lang::String> STRING_TYPE_LOW_LATENCY_OFFBODY_DETECT_();
	static ref<java::lang::String> STRING_TYPE_MAGNETIC_FIELD_();
	static ref<java::lang::String> STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED_();
	static ref<java::lang::String> STRING_TYPE_MOTION_DETECT_();
	static ref<java::lang::String> STRING_TYPE_ORIENTATION_();
	static ref<java::lang::String> STRING_TYPE_POSE_6DOF_();
	static ref<java::lang::String> STRING_TYPE_PRESSURE_();
	static ref<java::lang::String> STRING_TYPE_PROXIMITY_();
	static ref<java::lang::String> STRING_TYPE_RELATIVE_HUMIDITY_();
	static ref<java::lang::String> STRING_TYPE_ROTATION_VECTOR_();
	static ref<java::lang::String> STRING_TYPE_SIGNIFICANT_MOTION_();
	static ref<java::lang::String> STRING_TYPE_STATIONARY_DETECT_();
	static ref<java::lang::String> STRING_TYPE_STEP_COUNTER_();
	static ref<java::lang::String> STRING_TYPE_STEP_DETECTOR_();
	static ref<java::lang::String> STRING_TYPE_TEMPERATURE_();
	static jint TYPE_ACCELEROMETER_();
	static jint TYPE_ACCELEROMETER_UNCALIBRATED_();
	static jint TYPE_ALL_();
	static jint TYPE_AMBIENT_TEMPERATURE_();
	static jint TYPE_DEVICE_PRIVATE_BASE_();
	static jint TYPE_GAME_ROTATION_VECTOR_();
	static jint TYPE_GEOMAGNETIC_ROTATION_VECTOR_();
	static jint TYPE_GRAVITY_();
	static jint TYPE_GYROSCOPE_();
	static jint TYPE_GYROSCOPE_UNCALIBRATED_();
	static jint TYPE_HEART_BEAT_();
	static jint TYPE_HEART_RATE_();
	static jint TYPE_LIGHT_();
	static jint TYPE_LINEAR_ACCELERATION_();
	static jint TYPE_LOW_LATENCY_OFFBODY_DETECT_();
	static jint TYPE_MAGNETIC_FIELD_();
	static jint TYPE_MAGNETIC_FIELD_UNCALIBRATED_();
	static jint TYPE_MOTION_DETECT_();
	static jint TYPE_ORIENTATION_();
	static jint TYPE_POSE_6DOF_();
	static jint TYPE_PRESSURE_();
	static jint TYPE_PROXIMITY_();
	static jint TYPE_RELATIVE_HUMIDITY_();
	static jint TYPE_ROTATION_VECTOR_();
	static jint TYPE_SIGNIFICANT_MOTION_();
	static jint TYPE_STATIONARY_DETECT_();
	static jint TYPE_STEP_COUNTER_();
	static jint TYPE_STEP_DETECTOR_();
	static jint TYPE_TEMPERATURE_();

	jint getReportingMode();
	jint getHighestDirectReportRateLevel();
	jboolean isDirectChannelTypeSupported(jint sharedMemType);
	ref<java::lang::String> getName();
	ref<java::lang::String> getVendor();
	jint getType();
	jint getVersion();
	jfloat getMaximumRange();
	jfloat getResolution();
	jfloat getPower();
	jint getMinDelay();
	jint getFifoReservedEventCount();
	jint getFifoMaxEventCount();
	ref<java::lang::String> getStringType();
	jint getId();
	jint getMaxDelay();
	jboolean isWakeUpSensor();
	jboolean isDynamicSensor();
	jboolean isAdditionalInfoSupported();
	ref<java::lang::String> toString();

protected:

	Sensor(handle_type h) : base_(h) {}

};

} // namespace android::hardware
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::hardware {

inline jint Sensor::REPORTING_MODE_CONTINUOUS_() { return get_static_field<SCAPIX_META_STRING("REPORTING_MODE_CONTINUOUS"), jint>(); }
inline jint Sensor::REPORTING_MODE_ONE_SHOT_() { return get_static_field<SCAPIX_META_STRING("REPORTING_MODE_ONE_SHOT"), jint>(); }
inline jint Sensor::REPORTING_MODE_ON_CHANGE_() { return get_static_field<SCAPIX_META_STRING("REPORTING_MODE_ON_CHANGE"), jint>(); }
inline jint Sensor::REPORTING_MODE_SPECIAL_TRIGGER_() { return get_static_field<SCAPIX_META_STRING("REPORTING_MODE_SPECIAL_TRIGGER"), jint>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_ACCELEROMETER_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_ACCELEROMETER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_ACCELEROMETER_UNCALIBRATED_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_ACCELEROMETER_UNCALIBRATED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_AMBIENT_TEMPERATURE_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_AMBIENT_TEMPERATURE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_GAME_ROTATION_VECTOR_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_GAME_ROTATION_VECTOR"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_GRAVITY_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_GRAVITY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_GYROSCOPE_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_GYROSCOPE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_GYROSCOPE_UNCALIBRATED_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_GYROSCOPE_UNCALIBRATED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_HEART_BEAT_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_HEART_BEAT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_HEART_RATE_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_HEART_RATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_LIGHT_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_LIGHT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_LINEAR_ACCELERATION_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_LINEAR_ACCELERATION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_LOW_LATENCY_OFFBODY_DETECT_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_LOW_LATENCY_OFFBODY_DETECT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_MAGNETIC_FIELD_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_MAGNETIC_FIELD"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_MOTION_DETECT_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_MOTION_DETECT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_ORIENTATION_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_ORIENTATION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_POSE_6DOF_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_POSE_6DOF"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_PRESSURE_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_PRESSURE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_PROXIMITY_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_PROXIMITY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_RELATIVE_HUMIDITY_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_RELATIVE_HUMIDITY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_ROTATION_VECTOR_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_ROTATION_VECTOR"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_SIGNIFICANT_MOTION_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_SIGNIFICANT_MOTION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_STATIONARY_DETECT_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_STATIONARY_DETECT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_STEP_COUNTER_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_STEP_COUNTER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_STEP_DETECTOR_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_STEP_DETECTOR"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::STRING_TYPE_TEMPERATURE_() { return get_static_field<SCAPIX_META_STRING("STRING_TYPE_TEMPERATURE"), ref<java::lang::String>>(); }
inline jint Sensor::TYPE_ACCELEROMETER_() { return get_static_field<SCAPIX_META_STRING("TYPE_ACCELEROMETER"), jint>(); }
inline jint Sensor::TYPE_ACCELEROMETER_UNCALIBRATED_() { return get_static_field<SCAPIX_META_STRING("TYPE_ACCELEROMETER_UNCALIBRATED"), jint>(); }
inline jint Sensor::TYPE_ALL_() { return get_static_field<SCAPIX_META_STRING("TYPE_ALL"), jint>(); }
inline jint Sensor::TYPE_AMBIENT_TEMPERATURE_() { return get_static_field<SCAPIX_META_STRING("TYPE_AMBIENT_TEMPERATURE"), jint>(); }
inline jint Sensor::TYPE_DEVICE_PRIVATE_BASE_() { return get_static_field<SCAPIX_META_STRING("TYPE_DEVICE_PRIVATE_BASE"), jint>(); }
inline jint Sensor::TYPE_GAME_ROTATION_VECTOR_() { return get_static_field<SCAPIX_META_STRING("TYPE_GAME_ROTATION_VECTOR"), jint>(); }
inline jint Sensor::TYPE_GEOMAGNETIC_ROTATION_VECTOR_() { return get_static_field<SCAPIX_META_STRING("TYPE_GEOMAGNETIC_ROTATION_VECTOR"), jint>(); }
inline jint Sensor::TYPE_GRAVITY_() { return get_static_field<SCAPIX_META_STRING("TYPE_GRAVITY"), jint>(); }
inline jint Sensor::TYPE_GYROSCOPE_() { return get_static_field<SCAPIX_META_STRING("TYPE_GYROSCOPE"), jint>(); }
inline jint Sensor::TYPE_GYROSCOPE_UNCALIBRATED_() { return get_static_field<SCAPIX_META_STRING("TYPE_GYROSCOPE_UNCALIBRATED"), jint>(); }
inline jint Sensor::TYPE_HEART_BEAT_() { return get_static_field<SCAPIX_META_STRING("TYPE_HEART_BEAT"), jint>(); }
inline jint Sensor::TYPE_HEART_RATE_() { return get_static_field<SCAPIX_META_STRING("TYPE_HEART_RATE"), jint>(); }
inline jint Sensor::TYPE_LIGHT_() { return get_static_field<SCAPIX_META_STRING("TYPE_LIGHT"), jint>(); }
inline jint Sensor::TYPE_LINEAR_ACCELERATION_() { return get_static_field<SCAPIX_META_STRING("TYPE_LINEAR_ACCELERATION"), jint>(); }
inline jint Sensor::TYPE_LOW_LATENCY_OFFBODY_DETECT_() { return get_static_field<SCAPIX_META_STRING("TYPE_LOW_LATENCY_OFFBODY_DETECT"), jint>(); }
inline jint Sensor::TYPE_MAGNETIC_FIELD_() { return get_static_field<SCAPIX_META_STRING("TYPE_MAGNETIC_FIELD"), jint>(); }
inline jint Sensor::TYPE_MAGNETIC_FIELD_UNCALIBRATED_() { return get_static_field<SCAPIX_META_STRING("TYPE_MAGNETIC_FIELD_UNCALIBRATED"), jint>(); }
inline jint Sensor::TYPE_MOTION_DETECT_() { return get_static_field<SCAPIX_META_STRING("TYPE_MOTION_DETECT"), jint>(); }
inline jint Sensor::TYPE_ORIENTATION_() { return get_static_field<SCAPIX_META_STRING("TYPE_ORIENTATION"), jint>(); }
inline jint Sensor::TYPE_POSE_6DOF_() { return get_static_field<SCAPIX_META_STRING("TYPE_POSE_6DOF"), jint>(); }
inline jint Sensor::TYPE_PRESSURE_() { return get_static_field<SCAPIX_META_STRING("TYPE_PRESSURE"), jint>(); }
inline jint Sensor::TYPE_PROXIMITY_() { return get_static_field<SCAPIX_META_STRING("TYPE_PROXIMITY"), jint>(); }
inline jint Sensor::TYPE_RELATIVE_HUMIDITY_() { return get_static_field<SCAPIX_META_STRING("TYPE_RELATIVE_HUMIDITY"), jint>(); }
inline jint Sensor::TYPE_ROTATION_VECTOR_() { return get_static_field<SCAPIX_META_STRING("TYPE_ROTATION_VECTOR"), jint>(); }
inline jint Sensor::TYPE_SIGNIFICANT_MOTION_() { return get_static_field<SCAPIX_META_STRING("TYPE_SIGNIFICANT_MOTION"), jint>(); }
inline jint Sensor::TYPE_STATIONARY_DETECT_() { return get_static_field<SCAPIX_META_STRING("TYPE_STATIONARY_DETECT"), jint>(); }
inline jint Sensor::TYPE_STEP_COUNTER_() { return get_static_field<SCAPIX_META_STRING("TYPE_STEP_COUNTER"), jint>(); }
inline jint Sensor::TYPE_STEP_DETECTOR_() { return get_static_field<SCAPIX_META_STRING("TYPE_STEP_DETECTOR"), jint>(); }
inline jint Sensor::TYPE_TEMPERATURE_() { return get_static_field<SCAPIX_META_STRING("TYPE_TEMPERATURE"), jint>(); }
inline jint Sensor::getReportingMode() { return call_method<SCAPIX_META_STRING("getReportingMode"), jint>(); }
inline jint Sensor::getHighestDirectReportRateLevel() { return call_method<SCAPIX_META_STRING("getHighestDirectReportRateLevel"), jint>(); }
inline jboolean Sensor::isDirectChannelTypeSupported(jint sharedMemType) { return call_method<SCAPIX_META_STRING("isDirectChannelTypeSupported"), jboolean>(sharedMemType); }
inline ref<java::lang::String> Sensor::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Sensor::getVendor() { return call_method<SCAPIX_META_STRING("getVendor"), ref<java::lang::String>>(); }
inline jint Sensor::getType() { return call_method<SCAPIX_META_STRING("getType"), jint>(); }
inline jint Sensor::getVersion() { return call_method<SCAPIX_META_STRING("getVersion"), jint>(); }
inline jfloat Sensor::getMaximumRange() { return call_method<SCAPIX_META_STRING("getMaximumRange"), jfloat>(); }
inline jfloat Sensor::getResolution() { return call_method<SCAPIX_META_STRING("getResolution"), jfloat>(); }
inline jfloat Sensor::getPower() { return call_method<SCAPIX_META_STRING("getPower"), jfloat>(); }
inline jint Sensor::getMinDelay() { return call_method<SCAPIX_META_STRING("getMinDelay"), jint>(); }
inline jint Sensor::getFifoReservedEventCount() { return call_method<SCAPIX_META_STRING("getFifoReservedEventCount"), jint>(); }
inline jint Sensor::getFifoMaxEventCount() { return call_method<SCAPIX_META_STRING("getFifoMaxEventCount"), jint>(); }
inline ref<java::lang::String> Sensor::getStringType() { return call_method<SCAPIX_META_STRING("getStringType"), ref<java::lang::String>>(); }
inline jint Sensor::getId() { return call_method<SCAPIX_META_STRING("getId"), jint>(); }
inline jint Sensor::getMaxDelay() { return call_method<SCAPIX_META_STRING("getMaxDelay"), jint>(); }
inline jboolean Sensor::isWakeUpSensor() { return call_method<SCAPIX_META_STRING("isWakeUpSensor"), jboolean>(); }
inline jboolean Sensor::isDynamicSensor() { return call_method<SCAPIX_META_STRING("isDynamicSensor"), jboolean>(); }
inline jboolean Sensor::isAdditionalInfoSupported() { return call_method<SCAPIX_META_STRING("isAdditionalInfoSupported"), jboolean>(); }
inline ref<java::lang::String> Sensor::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::hardware
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_HARDWARE_SENSOR_H
