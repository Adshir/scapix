// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_HARDWARE_USB_USBREQUEST_H
#define SCAPIX_ANDROID_HARDWARE_USB_USBREQUEST_H

namespace scapix::java_api {

namespace android::hardware::usb { class UsbDeviceConnection; }
namespace android::hardware::usb { class UsbEndpoint; }
namespace java::nio { class ByteBuffer; }

namespace android::hardware::usb {

class UsbRequest : public object_base<SCAPIX_META_STRING("android/hardware/usb/UsbRequest"),
	java::lang::Object>
{
public:

	static ref<UsbRequest> new_object();
	jboolean initialize(ref<android::hardware::usb::UsbDeviceConnection> connection, ref<android::hardware::usb::UsbEndpoint> endpoint);
	void close();
	ref<android::hardware::usb::UsbEndpoint> getEndpoint();
	ref<java::lang::Object> getClientData();
	void setClientData(ref<java::lang::Object> data);
	jboolean queue(ref<java::nio::ByteBuffer> buffer, jint length);
	jboolean queue(ref<java::nio::ByteBuffer> buffer);
	jboolean cancel();

protected:

	UsbRequest(handle_type h) : base_(h) {}

};

} // namespace android::hardware::usb
} // namespace scapix::java_api

#include <scapix/java_api/android/hardware/usb/UsbDeviceConnection.h>
#include <scapix/java_api/android/hardware/usb/UsbEndpoint.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>

namespace scapix::java_api {
namespace android::hardware::usb {

inline ref<UsbRequest> UsbRequest::new_object() { return base_::new_object(); }
inline jboolean UsbRequest::initialize(ref<android::hardware::usb::UsbDeviceConnection> connection, ref<android::hardware::usb::UsbEndpoint> endpoint) { return call_method<SCAPIX_META_STRING("initialize"), jboolean>(connection, endpoint); }
inline void UsbRequest::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline ref<android::hardware::usb::UsbEndpoint> UsbRequest::getEndpoint() { return call_method<SCAPIX_META_STRING("getEndpoint"), ref<android::hardware::usb::UsbEndpoint>>(); }
inline ref<java::lang::Object> UsbRequest::getClientData() { return call_method<SCAPIX_META_STRING("getClientData"), ref<java::lang::Object>>(); }
inline void UsbRequest::setClientData(ref<java::lang::Object> data) { return call_method<SCAPIX_META_STRING("setClientData"), void>(data); }
inline jboolean UsbRequest::queue(ref<java::nio::ByteBuffer> buffer, jint length) { return call_method<SCAPIX_META_STRING("queue"), jboolean>(buffer, length); }
inline jboolean UsbRequest::queue(ref<java::nio::ByteBuffer> buffer) { return call_method<SCAPIX_META_STRING("queue"), jboolean>(buffer); }
inline jboolean UsbRequest::cancel() { return call_method<SCAPIX_META_STRING("cancel"), jboolean>(); }

} // namespace android::hardware::usb
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_HARDWARE_USB_USBREQUEST_H
