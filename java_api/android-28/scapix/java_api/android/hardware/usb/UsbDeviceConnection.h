// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_HARDWARE_USB_USBDEVICECONNECTION_H
#define SCAPIX_ANDROID_HARDWARE_USB_USBDEVICECONNECTION_H

namespace scapix::java_api {

namespace android::hardware::usb { class UsbConfiguration; }
namespace android::hardware::usb { class UsbEndpoint; }
namespace android::hardware::usb { class UsbInterface; }
namespace android::hardware::usb { class UsbRequest; }
namespace java::lang { class String; }

namespace android::hardware::usb {

class UsbDeviceConnection : public object_base<SCAPIX_META_STRING("android/hardware/usb/UsbDeviceConnection"),
	java::lang::Object>
{
public:

	void close();
	jint getFileDescriptor();
	ref<link::java::array<jbyte>> getRawDescriptors();
	jboolean claimInterface(ref<android::hardware::usb::UsbInterface> intf, jboolean force);
	jboolean releaseInterface(ref<android::hardware::usb::UsbInterface> intf);
	jboolean setInterface(ref<android::hardware::usb::UsbInterface> intf);
	jboolean setConfiguration(ref<android::hardware::usb::UsbConfiguration> configuration);
	jint controlTransfer(jint requestType, jint request, jint value, jint index, ref<link::java::array<jbyte>> buffer, jint length, jint timeout);
	jint controlTransfer(jint requestType, jint request, jint value, jint index, ref<link::java::array<jbyte>> buffer, jint offset, jint length, jint timeout);
	jint bulkTransfer(ref<android::hardware::usb::UsbEndpoint> endpoint, ref<link::java::array<jbyte>> buffer, jint length, jint timeout);
	jint bulkTransfer(ref<android::hardware::usb::UsbEndpoint> endpoint, ref<link::java::array<jbyte>> buffer, jint offset, jint length, jint timeout);
	ref<android::hardware::usb::UsbRequest> requestWait();
	ref<android::hardware::usb::UsbRequest> requestWait(jlong timeout);
	ref<java::lang::String> getSerial();

protected:

	UsbDeviceConnection(handle_type h) : base_(h) {}

};

} // namespace android::hardware::usb
} // namespace scapix::java_api

#include <scapix/java_api/android/hardware/usb/UsbConfiguration.h>
#include <scapix/java_api/android/hardware/usb/UsbEndpoint.h>
#include <scapix/java_api/android/hardware/usb/UsbInterface.h>
#include <scapix/java_api/android/hardware/usb/UsbRequest.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::hardware::usb {

inline void UsbDeviceConnection::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jint UsbDeviceConnection::getFileDescriptor() { return call_method<SCAPIX_META_STRING("getFileDescriptor"), jint>(); }
inline ref<link::java::array<jbyte>> UsbDeviceConnection::getRawDescriptors() { return call_method<SCAPIX_META_STRING("getRawDescriptors"), ref<link::java::array<jbyte>>>(); }
inline jboolean UsbDeviceConnection::claimInterface(ref<android::hardware::usb::UsbInterface> intf, jboolean force) { return call_method<SCAPIX_META_STRING("claimInterface"), jboolean>(intf, force); }
inline jboolean UsbDeviceConnection::releaseInterface(ref<android::hardware::usb::UsbInterface> intf) { return call_method<SCAPIX_META_STRING("releaseInterface"), jboolean>(intf); }
inline jboolean UsbDeviceConnection::setInterface(ref<android::hardware::usb::UsbInterface> intf) { return call_method<SCAPIX_META_STRING("setInterface"), jboolean>(intf); }
inline jboolean UsbDeviceConnection::setConfiguration(ref<android::hardware::usb::UsbConfiguration> configuration) { return call_method<SCAPIX_META_STRING("setConfiguration"), jboolean>(configuration); }
inline jint UsbDeviceConnection::controlTransfer(jint requestType, jint request, jint value, jint index, ref<link::java::array<jbyte>> buffer, jint length, jint timeout) { return call_method<SCAPIX_META_STRING("controlTransfer"), jint>(requestType, request, value, index, buffer, length, timeout); }
inline jint UsbDeviceConnection::controlTransfer(jint requestType, jint request, jint value, jint index, ref<link::java::array<jbyte>> buffer, jint offset, jint length, jint timeout) { return call_method<SCAPIX_META_STRING("controlTransfer"), jint>(requestType, request, value, index, buffer, offset, length, timeout); }
inline jint UsbDeviceConnection::bulkTransfer(ref<android::hardware::usb::UsbEndpoint> endpoint, ref<link::java::array<jbyte>> buffer, jint length, jint timeout) { return call_method<SCAPIX_META_STRING("bulkTransfer"), jint>(endpoint, buffer, length, timeout); }
inline jint UsbDeviceConnection::bulkTransfer(ref<android::hardware::usb::UsbEndpoint> endpoint, ref<link::java::array<jbyte>> buffer, jint offset, jint length, jint timeout) { return call_method<SCAPIX_META_STRING("bulkTransfer"), jint>(endpoint, buffer, offset, length, timeout); }
inline ref<android::hardware::usb::UsbRequest> UsbDeviceConnection::requestWait() { return call_method<SCAPIX_META_STRING("requestWait"), ref<android::hardware::usb::UsbRequest>>(); }
inline ref<android::hardware::usb::UsbRequest> UsbDeviceConnection::requestWait(jlong timeout) { return call_method<SCAPIX_META_STRING("requestWait"), ref<android::hardware::usb::UsbRequest>>(timeout); }
inline ref<java::lang::String> UsbDeviceConnection::getSerial() { return call_method<SCAPIX_META_STRING("getSerial"), ref<java::lang::String>>(); }

} // namespace android::hardware::usb
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_HARDWARE_USB_USBDEVICECONNECTION_H
