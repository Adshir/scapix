// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/channels/Channel.h>

#ifndef SCAPIX_ANDROID_HARDWARE_SENSORDIRECTCHANNEL_H
#define SCAPIX_ANDROID_HARDWARE_SENSORDIRECTCHANNEL_H

namespace scapix::java_api {

namespace android::hardware { class Sensor; }

namespace android::hardware {

class SensorDirectChannel : public object_base<SCAPIX_META_STRING("android/hardware/SensorDirectChannel"),
	java::lang::Object,
	java::nio::channels::Channel>
{
public:

	static jint RATE_FAST_();
	static jint RATE_NORMAL_();
	static jint RATE_STOP_();
	static jint RATE_VERY_FAST_();
	static jint TYPE_HARDWARE_BUFFER_();
	static jint TYPE_MEMORY_FILE_();

	jboolean isOpen();
	void close();
	jint configure(ref<android::hardware::Sensor> sensor, jint rateLevel);

protected:

	SensorDirectChannel(handle_type h) : base_(h) {}

};

} // namespace android::hardware
} // namespace scapix::java_api

#include <scapix/java_api/android/hardware/Sensor.h>

namespace scapix::java_api {
namespace android::hardware {

inline jint SensorDirectChannel::RATE_FAST_() { return get_static_field<SCAPIX_META_STRING("RATE_FAST"), jint>(); }
inline jint SensorDirectChannel::RATE_NORMAL_() { return get_static_field<SCAPIX_META_STRING("RATE_NORMAL"), jint>(); }
inline jint SensorDirectChannel::RATE_STOP_() { return get_static_field<SCAPIX_META_STRING("RATE_STOP"), jint>(); }
inline jint SensorDirectChannel::RATE_VERY_FAST_() { return get_static_field<SCAPIX_META_STRING("RATE_VERY_FAST"), jint>(); }
inline jint SensorDirectChannel::TYPE_HARDWARE_BUFFER_() { return get_static_field<SCAPIX_META_STRING("TYPE_HARDWARE_BUFFER"), jint>(); }
inline jint SensorDirectChannel::TYPE_MEMORY_FILE_() { return get_static_field<SCAPIX_META_STRING("TYPE_MEMORY_FILE"), jint>(); }
inline jboolean SensorDirectChannel::isOpen() { return call_method<SCAPIX_META_STRING("isOpen"), jboolean>(); }
inline void SensorDirectChannel::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jint SensorDirectChannel::configure(ref<android::hardware::Sensor> sensor, jint rateLevel) { return call_method<SCAPIX_META_STRING("configure"), jint>(sensor, rateLevel); }

} // namespace android::hardware
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_HARDWARE_SENSORDIRECTCHANNEL_H
