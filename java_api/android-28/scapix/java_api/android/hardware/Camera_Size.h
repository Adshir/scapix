// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_HARDWARE_CAMERA_SIZE_H
#define SCAPIX_ANDROID_HARDWARE_CAMERA_SIZE_H

namespace scapix::java_api {

namespace android::hardware { class Camera; }

namespace android::hardware {

class Camera_Size : public object_base<SCAPIX_META_STRING("android/hardware/Camera$Size"),
	java::lang::Object>
{
public:

	jint height();
	void height(jint);
	jint width();
	void width(jint);

	static ref<Camera_Size> new_object(ref<android::hardware::Camera> this_0, jint w, jint h);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();

protected:

	Camera_Size(handle_type h) : base_(h) {}

};

} // namespace android::hardware
} // namespace scapix::java_api

#include <scapix/java_api/android/hardware/Camera.h>

namespace scapix::java_api {
namespace android::hardware {

inline jint Camera_Size::height() { return get_field<SCAPIX_META_STRING("height"), jint>(); }
inline void Camera_Size::height(jint v) { set_field<SCAPIX_META_STRING("height"), jint>(v); }
inline jint Camera_Size::width() { return get_field<SCAPIX_META_STRING("width"), jint>(); }
inline void Camera_Size::width(jint v) { set_field<SCAPIX_META_STRING("width"), jint>(v); }
inline ref<Camera_Size> Camera_Size::new_object(ref<android::hardware::Camera> this_0, jint w, jint h) { return base_::new_object(this_0, w, h); }
inline jboolean Camera_Size::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint Camera_Size::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }

} // namespace android::hardware
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_HARDWARE_CAMERA_SIZE_H
