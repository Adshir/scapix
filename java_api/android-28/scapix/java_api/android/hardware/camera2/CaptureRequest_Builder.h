// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_HARDWARE_CAMERA2_CAPTUREREQUEST_BUILDER_H
#define SCAPIX_ANDROID_HARDWARE_CAMERA2_CAPTUREREQUEST_BUILDER_H

namespace scapix::java_api {

namespace android::hardware::camera2 { class CaptureRequest; }
namespace android::hardware::camera2 { class CaptureRequest_Key; }
namespace android::view { class Surface; }
namespace java::lang { class String; }

namespace android::hardware::camera2 {

class CaptureRequest_Builder : public object_base<SCAPIX_META_STRING("android/hardware/camera2/CaptureRequest$Builder"),
	java::lang::Object>
{
public:

	void addTarget(ref<android::view::Surface> outputTarget);
	void removeTarget(ref<android::view::Surface> outputTarget);
	void set(ref<android::hardware::camera2::CaptureRequest_Key> key, ref<java::lang::Object> value);
	ref<java::lang::Object> get(ref<android::hardware::camera2::CaptureRequest_Key> key);
	ref<android::hardware::camera2::CaptureRequest_Builder> setPhysicalCameraKey(ref<android::hardware::camera2::CaptureRequest_Key> key, ref<java::lang::Object> value, ref<java::lang::String> physicalCameraId);
	ref<java::lang::Object> getPhysicalCameraKey(ref<android::hardware::camera2::CaptureRequest_Key> key, ref<java::lang::String> physicalCameraId);
	void setTag(ref<java::lang::Object> tag);
	ref<android::hardware::camera2::CaptureRequest> build();

protected:

	CaptureRequest_Builder(handle_type h) : base_(h) {}

};

} // namespace android::hardware::camera2
} // namespace scapix::java_api

#include <scapix/java_api/android/hardware/camera2/CaptureRequest.h>
#include <scapix/java_api/android/hardware/camera2/CaptureRequest_Key.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::hardware::camera2 {

inline void CaptureRequest_Builder::addTarget(ref<android::view::Surface> outputTarget) { return call_method<SCAPIX_META_STRING("addTarget"), void>(outputTarget); }
inline void CaptureRequest_Builder::removeTarget(ref<android::view::Surface> outputTarget) { return call_method<SCAPIX_META_STRING("removeTarget"), void>(outputTarget); }
inline void CaptureRequest_Builder::set(ref<android::hardware::camera2::CaptureRequest_Key> key, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("set"), void>(key, value); }
inline ref<java::lang::Object> CaptureRequest_Builder::get(ref<android::hardware::camera2::CaptureRequest_Key> key) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(key); }
inline ref<android::hardware::camera2::CaptureRequest_Builder> CaptureRequest_Builder::setPhysicalCameraKey(ref<android::hardware::camera2::CaptureRequest_Key> key, ref<java::lang::Object> value, ref<java::lang::String> physicalCameraId) { return call_method<SCAPIX_META_STRING("setPhysicalCameraKey"), ref<android::hardware::camera2::CaptureRequest_Builder>>(key, value, physicalCameraId); }
inline ref<java::lang::Object> CaptureRequest_Builder::getPhysicalCameraKey(ref<android::hardware::camera2::CaptureRequest_Key> key, ref<java::lang::String> physicalCameraId) { return call_method<SCAPIX_META_STRING("getPhysicalCameraKey"), ref<java::lang::Object>>(key, physicalCameraId); }
inline void CaptureRequest_Builder::setTag(ref<java::lang::Object> tag) { return call_method<SCAPIX_META_STRING("setTag"), void>(tag); }
inline ref<android::hardware::camera2::CaptureRequest> CaptureRequest_Builder::build() { return call_method<SCAPIX_META_STRING("build"), ref<android::hardware::camera2::CaptureRequest>>(); }

} // namespace android::hardware::camera2
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_HARDWARE_CAMERA2_CAPTUREREQUEST_BUILDER_H
