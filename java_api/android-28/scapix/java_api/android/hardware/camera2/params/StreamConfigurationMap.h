// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_HARDWARE_CAMERA2_PARAMS_STREAMCONFIGURATIONMAP_H
#define SCAPIX_ANDROID_HARDWARE_CAMERA2_PARAMS_STREAMCONFIGURATIONMAP_H

namespace scapix::java_api {

namespace android::util { class Range; }
namespace android::util { class Size; }
namespace android::view { class Surface; }
namespace java::lang { class Class; }
namespace java::lang { class String; }

namespace android::hardware::camera2::params {

class StreamConfigurationMap : public object_base<SCAPIX_META_STRING("android/hardware/camera2/params/StreamConfigurationMap"),
	java::lang::Object>
{
public:

	ref<link::java::array<jint>> getOutputFormats();
	ref<link::java::array<jint>> getValidOutputFormatsForInput(jint inputFormat);
	ref<link::java::array<jint>> getInputFormats();
	ref<link::java::array<android::util::Size>> getInputSizes(jint format);
	jboolean isOutputSupportedFor(jint format);
	static jboolean isOutputSupportedFor(ref<java::lang::Class> klass);
	jboolean isOutputSupportedFor(ref<android::view::Surface> surface);
	ref<link::java::array<android::util::Size>> getOutputSizes(ref<java::lang::Class> klass);
	ref<link::java::array<android::util::Size>> getOutputSizes(jint format);
	ref<link::java::array<android::util::Size>> getHighSpeedVideoSizes();
	ref<link::java::array<android::util::Range>> getHighSpeedVideoFpsRangesFor(ref<android::util::Size> size);
	ref<link::java::array<android::util::Range>> getHighSpeedVideoFpsRanges();
	ref<link::java::array<android::util::Size>> getHighSpeedVideoSizesFor(ref<android::util::Range> fpsRange);
	ref<link::java::array<android::util::Size>> getHighResolutionOutputSizes(jint format);
	jlong getOutputMinFrameDuration(jint format, ref<android::util::Size> size);
	jlong getOutputMinFrameDuration(ref<java::lang::Class> klass, ref<android::util::Size> size);
	jlong getOutputStallDuration(jint format, ref<android::util::Size> size);
	jlong getOutputStallDuration(ref<java::lang::Class> klass, ref<android::util::Size> size);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	StreamConfigurationMap(handle_type h) : base_(h) {}

};

} // namespace android::hardware::camera2::params
} // namespace scapix::java_api

#include <scapix/java_api/android/util/Range.h>
#include <scapix/java_api/android/util/Size.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::hardware::camera2::params {

inline ref<link::java::array<jint>> StreamConfigurationMap::getOutputFormats() { return call_method<SCAPIX_META_STRING("getOutputFormats"), ref<link::java::array<jint>>>(); }
inline ref<link::java::array<jint>> StreamConfigurationMap::getValidOutputFormatsForInput(jint inputFormat) { return call_method<SCAPIX_META_STRING("getValidOutputFormatsForInput"), ref<link::java::array<jint>>>(inputFormat); }
inline ref<link::java::array<jint>> StreamConfigurationMap::getInputFormats() { return call_method<SCAPIX_META_STRING("getInputFormats"), ref<link::java::array<jint>>>(); }
inline ref<link::java::array<android::util::Size>> StreamConfigurationMap::getInputSizes(jint format) { return call_method<SCAPIX_META_STRING("getInputSizes"), ref<link::java::array<android::util::Size>>>(format); }
inline jboolean StreamConfigurationMap::isOutputSupportedFor(jint format) { return call_method<SCAPIX_META_STRING("isOutputSupportedFor"), jboolean>(format); }
inline jboolean StreamConfigurationMap::isOutputSupportedFor(ref<java::lang::Class> klass) { return call_static_method<SCAPIX_META_STRING("isOutputSupportedFor"), jboolean>(klass); }
inline jboolean StreamConfigurationMap::isOutputSupportedFor(ref<android::view::Surface> surface) { return call_method<SCAPIX_META_STRING("isOutputSupportedFor"), jboolean>(surface); }
inline ref<link::java::array<android::util::Size>> StreamConfigurationMap::getOutputSizes(ref<java::lang::Class> klass) { return call_method<SCAPIX_META_STRING("getOutputSizes"), ref<link::java::array<android::util::Size>>>(klass); }
inline ref<link::java::array<android::util::Size>> StreamConfigurationMap::getOutputSizes(jint format) { return call_method<SCAPIX_META_STRING("getOutputSizes"), ref<link::java::array<android::util::Size>>>(format); }
inline ref<link::java::array<android::util::Size>> StreamConfigurationMap::getHighSpeedVideoSizes() { return call_method<SCAPIX_META_STRING("getHighSpeedVideoSizes"), ref<link::java::array<android::util::Size>>>(); }
inline ref<link::java::array<android::util::Range>> StreamConfigurationMap::getHighSpeedVideoFpsRangesFor(ref<android::util::Size> size) { return call_method<SCAPIX_META_STRING("getHighSpeedVideoFpsRangesFor"), ref<link::java::array<android::util::Range>>>(size); }
inline ref<link::java::array<android::util::Range>> StreamConfigurationMap::getHighSpeedVideoFpsRanges() { return call_method<SCAPIX_META_STRING("getHighSpeedVideoFpsRanges"), ref<link::java::array<android::util::Range>>>(); }
inline ref<link::java::array<android::util::Size>> StreamConfigurationMap::getHighSpeedVideoSizesFor(ref<android::util::Range> fpsRange) { return call_method<SCAPIX_META_STRING("getHighSpeedVideoSizesFor"), ref<link::java::array<android::util::Size>>>(fpsRange); }
inline ref<link::java::array<android::util::Size>> StreamConfigurationMap::getHighResolutionOutputSizes(jint format) { return call_method<SCAPIX_META_STRING("getHighResolutionOutputSizes"), ref<link::java::array<android::util::Size>>>(format); }
inline jlong StreamConfigurationMap::getOutputMinFrameDuration(jint format, ref<android::util::Size> size) { return call_method<SCAPIX_META_STRING("getOutputMinFrameDuration"), jlong>(format, size); }
inline jlong StreamConfigurationMap::getOutputMinFrameDuration(ref<java::lang::Class> klass, ref<android::util::Size> size) { return call_method<SCAPIX_META_STRING("getOutputMinFrameDuration"), jlong>(klass, size); }
inline jlong StreamConfigurationMap::getOutputStallDuration(jint format, ref<android::util::Size> size) { return call_method<SCAPIX_META_STRING("getOutputStallDuration"), jlong>(format, size); }
inline jlong StreamConfigurationMap::getOutputStallDuration(ref<java::lang::Class> klass, ref<android::util::Size> size) { return call_method<SCAPIX_META_STRING("getOutputStallDuration"), jlong>(klass, size); }
inline jboolean StreamConfigurationMap::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint StreamConfigurationMap::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> StreamConfigurationMap::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::hardware::camera2::params
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_HARDWARE_CAMERA2_PARAMS_STREAMCONFIGURATIONMAP_H
