// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_HARDWARE_CAMERA2_PARAMS_RGGBCHANNELVECTOR_H
#define SCAPIX_ANDROID_HARDWARE_CAMERA2_PARAMS_RGGBCHANNELVECTOR_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace android::hardware::camera2::params {

class RggbChannelVector : public object_base<SCAPIX_META_STRING("android/hardware/camera2/params/RggbChannelVector"),
	java::lang::Object>
{
public:

	static jint BLUE_();
	static jint COUNT_();
	static jint GREEN_EVEN_();
	static jint GREEN_ODD_();
	static jint RED_();

	static ref<RggbChannelVector> new_object(jfloat red, jfloat greenEven, jfloat greenOdd, jfloat blue);
	jfloat getRed();
	jfloat getGreenEven();
	jfloat getGreenOdd();
	jfloat getBlue();
	jfloat getComponent(jint colorChannel);
	void copyTo(ref<link::java::array<jfloat>> destination, jint offset);
	jboolean equals(ref<java::lang::Object> obj);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	RggbChannelVector(handle_type h) : base_(h) {}

};

} // namespace android::hardware::camera2::params
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::hardware::camera2::params {

inline jint RggbChannelVector::BLUE_() { return get_static_field<SCAPIX_META_STRING("BLUE"), jint>(); }
inline jint RggbChannelVector::COUNT_() { return get_static_field<SCAPIX_META_STRING("COUNT"), jint>(); }
inline jint RggbChannelVector::GREEN_EVEN_() { return get_static_field<SCAPIX_META_STRING("GREEN_EVEN"), jint>(); }
inline jint RggbChannelVector::GREEN_ODD_() { return get_static_field<SCAPIX_META_STRING("GREEN_ODD"), jint>(); }
inline jint RggbChannelVector::RED_() { return get_static_field<SCAPIX_META_STRING("RED"), jint>(); }
inline ref<RggbChannelVector> RggbChannelVector::new_object(jfloat red, jfloat greenEven, jfloat greenOdd, jfloat blue) { return base_::new_object(red, greenEven, greenOdd, blue); }
inline jfloat RggbChannelVector::getRed() { return call_method<SCAPIX_META_STRING("getRed"), jfloat>(); }
inline jfloat RggbChannelVector::getGreenEven() { return call_method<SCAPIX_META_STRING("getGreenEven"), jfloat>(); }
inline jfloat RggbChannelVector::getGreenOdd() { return call_method<SCAPIX_META_STRING("getGreenOdd"), jfloat>(); }
inline jfloat RggbChannelVector::getBlue() { return call_method<SCAPIX_META_STRING("getBlue"), jfloat>(); }
inline jfloat RggbChannelVector::getComponent(jint colorChannel) { return call_method<SCAPIX_META_STRING("getComponent"), jfloat>(colorChannel); }
inline void RggbChannelVector::copyTo(ref<link::java::array<jfloat>> destination, jint offset) { return call_method<SCAPIX_META_STRING("copyTo"), void>(destination, offset); }
inline jboolean RggbChannelVector::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline jint RggbChannelVector::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> RggbChannelVector::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::hardware::camera2::params
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_HARDWARE_CAMERA2_PARAMS_RGGBCHANNELVECTOR_H
