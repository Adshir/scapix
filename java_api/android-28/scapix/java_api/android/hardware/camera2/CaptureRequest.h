// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/hardware/camera2/CameraMetadata.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_HARDWARE_CAMERA2_CAPTUREREQUEST_H
#define SCAPIX_ANDROID_HARDWARE_CAMERA2_CAPTUREREQUEST_H

namespace scapix::java_api {

namespace android::hardware::camera2 { class CaptureRequest_Key; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class Object; }
namespace java::util { class List; }
namespace android::hardware::camera2 { class CaptureRequest_Builder; }

namespace android::hardware::camera2 {

class CaptureRequest : public object_base<SCAPIX_META_STRING("android/hardware/camera2/CaptureRequest"),
	android::hardware::camera2::CameraMetadata,
	android::os::Parcelable>
{
public:

	using Key = CaptureRequest_Key;
	using Builder = CaptureRequest_Builder;

	static ref<android::hardware::camera2::CaptureRequest_Key> BLACK_LEVEL_LOCK_();
	static ref<android::hardware::camera2::CaptureRequest_Key> COLOR_CORRECTION_ABERRATION_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> COLOR_CORRECTION_GAINS_();
	static ref<android::hardware::camera2::CaptureRequest_Key> COLOR_CORRECTION_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> COLOR_CORRECTION_TRANSFORM_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_AE_ANTIBANDING_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_AE_EXPOSURE_COMPENSATION_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_AE_LOCK_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_AE_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_AE_PRECAPTURE_TRIGGER_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_AE_REGIONS_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_AE_TARGET_FPS_RANGE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_AF_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_AF_REGIONS_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_AF_TRIGGER_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_AWB_LOCK_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_AWB_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_AWB_REGIONS_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_CAPTURE_INTENT_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_EFFECT_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_ENABLE_ZSL_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_POST_RAW_SENSITIVITY_BOOST_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_SCENE_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> CONTROL_VIDEO_STABILIZATION_MODE_();
	static ref<android::os::Parcelable_Creator> CREATOR_();
	static ref<android::hardware::camera2::CaptureRequest_Key> DISTORTION_CORRECTION_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> EDGE_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> FLASH_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> HOT_PIXEL_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> JPEG_GPS_LOCATION_();
	static ref<android::hardware::camera2::CaptureRequest_Key> JPEG_ORIENTATION_();
	static ref<android::hardware::camera2::CaptureRequest_Key> JPEG_QUALITY_();
	static ref<android::hardware::camera2::CaptureRequest_Key> JPEG_THUMBNAIL_QUALITY_();
	static ref<android::hardware::camera2::CaptureRequest_Key> JPEG_THUMBNAIL_SIZE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> LENS_APERTURE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> LENS_FILTER_DENSITY_();
	static ref<android::hardware::camera2::CaptureRequest_Key> LENS_FOCAL_LENGTH_();
	static ref<android::hardware::camera2::CaptureRequest_Key> LENS_FOCUS_DISTANCE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> LENS_OPTICAL_STABILIZATION_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> NOISE_REDUCTION_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> REPROCESS_EFFECTIVE_EXPOSURE_FACTOR_();
	static ref<android::hardware::camera2::CaptureRequest_Key> SCALER_CROP_REGION_();
	static ref<android::hardware::camera2::CaptureRequest_Key> SENSOR_EXPOSURE_TIME_();
	static ref<android::hardware::camera2::CaptureRequest_Key> SENSOR_FRAME_DURATION_();
	static ref<android::hardware::camera2::CaptureRequest_Key> SENSOR_SENSITIVITY_();
	static ref<android::hardware::camera2::CaptureRequest_Key> SENSOR_TEST_PATTERN_DATA_();
	static ref<android::hardware::camera2::CaptureRequest_Key> SENSOR_TEST_PATTERN_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> SHADING_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> STATISTICS_FACE_DETECT_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> STATISTICS_HOT_PIXEL_MAP_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> STATISTICS_LENS_SHADING_MAP_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> STATISTICS_OIS_DATA_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> TONEMAP_CURVE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> TONEMAP_GAMMA_();
	static ref<android::hardware::camera2::CaptureRequest_Key> TONEMAP_MODE_();
	static ref<android::hardware::camera2::CaptureRequest_Key> TONEMAP_PRESET_CURVE_();

	ref<java::lang::Object> get(ref<android::hardware::camera2::CaptureRequest_Key> key);
	ref<java::util::List> getKeys();
	ref<java::lang::Object> getTag();
	jboolean isReprocess();
	jboolean equals(ref<java::lang::Object> other);
	jint hashCode();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);

protected:

	CaptureRequest(handle_type h) : base_(h) {}

};

} // namespace android::hardware::camera2
} // namespace scapix::java_api

#include <scapix/java_api/android/hardware/camera2/CaptureRequest_Key.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::hardware::camera2 {

inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::BLACK_LEVEL_LOCK_() { return get_static_field<SCAPIX_META_STRING("BLACK_LEVEL_LOCK"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::COLOR_CORRECTION_ABERRATION_MODE_() { return get_static_field<SCAPIX_META_STRING("COLOR_CORRECTION_ABERRATION_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::COLOR_CORRECTION_GAINS_() { return get_static_field<SCAPIX_META_STRING("COLOR_CORRECTION_GAINS"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::COLOR_CORRECTION_MODE_() { return get_static_field<SCAPIX_META_STRING("COLOR_CORRECTION_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::COLOR_CORRECTION_TRANSFORM_() { return get_static_field<SCAPIX_META_STRING("COLOR_CORRECTION_TRANSFORM"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_AE_ANTIBANDING_MODE_() { return get_static_field<SCAPIX_META_STRING("CONTROL_AE_ANTIBANDING_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_AE_EXPOSURE_COMPENSATION_() { return get_static_field<SCAPIX_META_STRING("CONTROL_AE_EXPOSURE_COMPENSATION"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_AE_LOCK_() { return get_static_field<SCAPIX_META_STRING("CONTROL_AE_LOCK"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_AE_MODE_() { return get_static_field<SCAPIX_META_STRING("CONTROL_AE_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_AE_PRECAPTURE_TRIGGER_() { return get_static_field<SCAPIX_META_STRING("CONTROL_AE_PRECAPTURE_TRIGGER"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_AE_REGIONS_() { return get_static_field<SCAPIX_META_STRING("CONTROL_AE_REGIONS"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_AE_TARGET_FPS_RANGE_() { return get_static_field<SCAPIX_META_STRING("CONTROL_AE_TARGET_FPS_RANGE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_AF_MODE_() { return get_static_field<SCAPIX_META_STRING("CONTROL_AF_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_AF_REGIONS_() { return get_static_field<SCAPIX_META_STRING("CONTROL_AF_REGIONS"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_AF_TRIGGER_() { return get_static_field<SCAPIX_META_STRING("CONTROL_AF_TRIGGER"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_AWB_LOCK_() { return get_static_field<SCAPIX_META_STRING("CONTROL_AWB_LOCK"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_AWB_MODE_() { return get_static_field<SCAPIX_META_STRING("CONTROL_AWB_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_AWB_REGIONS_() { return get_static_field<SCAPIX_META_STRING("CONTROL_AWB_REGIONS"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_CAPTURE_INTENT_() { return get_static_field<SCAPIX_META_STRING("CONTROL_CAPTURE_INTENT"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_EFFECT_MODE_() { return get_static_field<SCAPIX_META_STRING("CONTROL_EFFECT_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_ENABLE_ZSL_() { return get_static_field<SCAPIX_META_STRING("CONTROL_ENABLE_ZSL"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_MODE_() { return get_static_field<SCAPIX_META_STRING("CONTROL_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_POST_RAW_SENSITIVITY_BOOST_() { return get_static_field<SCAPIX_META_STRING("CONTROL_POST_RAW_SENSITIVITY_BOOST"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_SCENE_MODE_() { return get_static_field<SCAPIX_META_STRING("CONTROL_SCENE_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::CONTROL_VIDEO_STABILIZATION_MODE_() { return get_static_field<SCAPIX_META_STRING("CONTROL_VIDEO_STABILIZATION_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::os::Parcelable_Creator> CaptureRequest::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::DISTORTION_CORRECTION_MODE_() { return get_static_field<SCAPIX_META_STRING("DISTORTION_CORRECTION_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::EDGE_MODE_() { return get_static_field<SCAPIX_META_STRING("EDGE_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::FLASH_MODE_() { return get_static_field<SCAPIX_META_STRING("FLASH_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::HOT_PIXEL_MODE_() { return get_static_field<SCAPIX_META_STRING("HOT_PIXEL_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::JPEG_GPS_LOCATION_() { return get_static_field<SCAPIX_META_STRING("JPEG_GPS_LOCATION"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::JPEG_ORIENTATION_() { return get_static_field<SCAPIX_META_STRING("JPEG_ORIENTATION"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::JPEG_QUALITY_() { return get_static_field<SCAPIX_META_STRING("JPEG_QUALITY"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::JPEG_THUMBNAIL_QUALITY_() { return get_static_field<SCAPIX_META_STRING("JPEG_THUMBNAIL_QUALITY"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::JPEG_THUMBNAIL_SIZE_() { return get_static_field<SCAPIX_META_STRING("JPEG_THUMBNAIL_SIZE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::LENS_APERTURE_() { return get_static_field<SCAPIX_META_STRING("LENS_APERTURE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::LENS_FILTER_DENSITY_() { return get_static_field<SCAPIX_META_STRING("LENS_FILTER_DENSITY"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::LENS_FOCAL_LENGTH_() { return get_static_field<SCAPIX_META_STRING("LENS_FOCAL_LENGTH"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::LENS_FOCUS_DISTANCE_() { return get_static_field<SCAPIX_META_STRING("LENS_FOCUS_DISTANCE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::LENS_OPTICAL_STABILIZATION_MODE_() { return get_static_field<SCAPIX_META_STRING("LENS_OPTICAL_STABILIZATION_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::NOISE_REDUCTION_MODE_() { return get_static_field<SCAPIX_META_STRING("NOISE_REDUCTION_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::REPROCESS_EFFECTIVE_EXPOSURE_FACTOR_() { return get_static_field<SCAPIX_META_STRING("REPROCESS_EFFECTIVE_EXPOSURE_FACTOR"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::SCALER_CROP_REGION_() { return get_static_field<SCAPIX_META_STRING("SCALER_CROP_REGION"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::SENSOR_EXPOSURE_TIME_() { return get_static_field<SCAPIX_META_STRING("SENSOR_EXPOSURE_TIME"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::SENSOR_FRAME_DURATION_() { return get_static_field<SCAPIX_META_STRING("SENSOR_FRAME_DURATION"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::SENSOR_SENSITIVITY_() { return get_static_field<SCAPIX_META_STRING("SENSOR_SENSITIVITY"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::SENSOR_TEST_PATTERN_DATA_() { return get_static_field<SCAPIX_META_STRING("SENSOR_TEST_PATTERN_DATA"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::SENSOR_TEST_PATTERN_MODE_() { return get_static_field<SCAPIX_META_STRING("SENSOR_TEST_PATTERN_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::SHADING_MODE_() { return get_static_field<SCAPIX_META_STRING("SHADING_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::STATISTICS_FACE_DETECT_MODE_() { return get_static_field<SCAPIX_META_STRING("STATISTICS_FACE_DETECT_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::STATISTICS_HOT_PIXEL_MAP_MODE_() { return get_static_field<SCAPIX_META_STRING("STATISTICS_HOT_PIXEL_MAP_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::STATISTICS_LENS_SHADING_MAP_MODE_() { return get_static_field<SCAPIX_META_STRING("STATISTICS_LENS_SHADING_MAP_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::STATISTICS_OIS_DATA_MODE_() { return get_static_field<SCAPIX_META_STRING("STATISTICS_OIS_DATA_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::TONEMAP_CURVE_() { return get_static_field<SCAPIX_META_STRING("TONEMAP_CURVE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::TONEMAP_GAMMA_() { return get_static_field<SCAPIX_META_STRING("TONEMAP_GAMMA"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::TONEMAP_MODE_() { return get_static_field<SCAPIX_META_STRING("TONEMAP_MODE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<android::hardware::camera2::CaptureRequest_Key> CaptureRequest::TONEMAP_PRESET_CURVE_() { return get_static_field<SCAPIX_META_STRING("TONEMAP_PRESET_CURVE"), ref<android::hardware::camera2::CaptureRequest_Key>>(); }
inline ref<java::lang::Object> CaptureRequest::get(ref<android::hardware::camera2::CaptureRequest_Key> key) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(key); }
inline ref<java::util::List> CaptureRequest::getKeys() { return call_method<SCAPIX_META_STRING("getKeys"), ref<java::util::List>>(); }
inline ref<java::lang::Object> CaptureRequest::getTag() { return call_method<SCAPIX_META_STRING("getTag"), ref<java::lang::Object>>(); }
inline jboolean CaptureRequest::isReprocess() { return call_method<SCAPIX_META_STRING("isReprocess"), jboolean>(); }
inline jboolean CaptureRequest::equals(ref<java::lang::Object> other) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(other); }
inline jint CaptureRequest::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint CaptureRequest::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void CaptureRequest::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }

} // namespace android::hardware::camera2
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_HARDWARE_CAMERA2_CAPTUREREQUEST_H
