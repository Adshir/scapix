// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_HARDWARE_CAMERA2_CAMERAMANAGER_H
#define SCAPIX_ANDROID_HARDWARE_CAMERA2_CAMERAMANAGER_H

namespace scapix::java_api {

namespace android::hardware::camera2 { class CameraCharacteristics; }
namespace android::hardware::camera2 { class CameraDevice_StateCallback; }
namespace android::hardware::camera2 { class CameraManager_AvailabilityCallback; }
namespace android::hardware::camera2 { class CameraManager_TorchCallback; }
namespace android::os { class Handler; }
namespace java::lang { class String; }
namespace java::util::concurrent { class Executor; }

namespace android::hardware::camera2 {

class CameraManager : public object_base<SCAPIX_META_STRING("android/hardware/camera2/CameraManager"),
	java::lang::Object>
{
public:

	using TorchCallback = CameraManager_TorchCallback;
	using AvailabilityCallback = CameraManager_AvailabilityCallback;

	ref<link::java::array<java::lang::String>> getCameraIdList();
	void registerAvailabilityCallback(ref<android::hardware::camera2::CameraManager_AvailabilityCallback> callback, ref<android::os::Handler> handler);
	void registerAvailabilityCallback(ref<java::util::concurrent::Executor> executor, ref<android::hardware::camera2::CameraManager_AvailabilityCallback> callback);
	void unregisterAvailabilityCallback(ref<android::hardware::camera2::CameraManager_AvailabilityCallback> callback);
	void registerTorchCallback(ref<android::hardware::camera2::CameraManager_TorchCallback> callback, ref<android::os::Handler> handler);
	void registerTorchCallback(ref<java::util::concurrent::Executor> executor, ref<android::hardware::camera2::CameraManager_TorchCallback> callback);
	void unregisterTorchCallback(ref<android::hardware::camera2::CameraManager_TorchCallback> callback);
	ref<android::hardware::camera2::CameraCharacteristics> getCameraCharacteristics(ref<java::lang::String> cameraId);
	void openCamera(ref<java::lang::String> cameraId, ref<android::hardware::camera2::CameraDevice_StateCallback> callback, ref<android::os::Handler> handler);
	void openCamera(ref<java::lang::String> cameraId, ref<java::util::concurrent::Executor> executor, ref<android::hardware::camera2::CameraDevice_StateCallback> callback);
	void setTorchMode(ref<java::lang::String> cameraId, jboolean enabled);

protected:

	CameraManager(handle_type h) : base_(h) {}

};

} // namespace android::hardware::camera2
} // namespace scapix::java_api

#include <scapix/java_api/android/hardware/camera2/CameraCharacteristics.h>
#include <scapix/java_api/android/hardware/camera2/CameraDevice_StateCallback.h>
#include <scapix/java_api/android/hardware/camera2/CameraManager_AvailabilityCallback.h>
#include <scapix/java_api/android/hardware/camera2/CameraManager_TorchCallback.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>

namespace scapix::java_api {
namespace android::hardware::camera2 {

inline ref<link::java::array<java::lang::String>> CameraManager::getCameraIdList() { return call_method<SCAPIX_META_STRING("getCameraIdList"), ref<link::java::array<java::lang::String>>>(); }
inline void CameraManager::registerAvailabilityCallback(ref<android::hardware::camera2::CameraManager_AvailabilityCallback> callback, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("registerAvailabilityCallback"), void>(callback, handler); }
inline void CameraManager::registerAvailabilityCallback(ref<java::util::concurrent::Executor> executor, ref<android::hardware::camera2::CameraManager_AvailabilityCallback> callback) { return call_method<SCAPIX_META_STRING("registerAvailabilityCallback"), void>(executor, callback); }
inline void CameraManager::unregisterAvailabilityCallback(ref<android::hardware::camera2::CameraManager_AvailabilityCallback> callback) { return call_method<SCAPIX_META_STRING("unregisterAvailabilityCallback"), void>(callback); }
inline void CameraManager::registerTorchCallback(ref<android::hardware::camera2::CameraManager_TorchCallback> callback, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("registerTorchCallback"), void>(callback, handler); }
inline void CameraManager::registerTorchCallback(ref<java::util::concurrent::Executor> executor, ref<android::hardware::camera2::CameraManager_TorchCallback> callback) { return call_method<SCAPIX_META_STRING("registerTorchCallback"), void>(executor, callback); }
inline void CameraManager::unregisterTorchCallback(ref<android::hardware::camera2::CameraManager_TorchCallback> callback) { return call_method<SCAPIX_META_STRING("unregisterTorchCallback"), void>(callback); }
inline ref<android::hardware::camera2::CameraCharacteristics> CameraManager::getCameraCharacteristics(ref<java::lang::String> cameraId) { return call_method<SCAPIX_META_STRING("getCameraCharacteristics"), ref<android::hardware::camera2::CameraCharacteristics>>(cameraId); }
inline void CameraManager::openCamera(ref<java::lang::String> cameraId, ref<android::hardware::camera2::CameraDevice_StateCallback> callback, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("openCamera"), void>(cameraId, callback, handler); }
inline void CameraManager::openCamera(ref<java::lang::String> cameraId, ref<java::util::concurrent::Executor> executor, ref<android::hardware::camera2::CameraDevice_StateCallback> callback) { return call_method<SCAPIX_META_STRING("openCamera"), void>(cameraId, executor, callback); }
inline void CameraManager::setTorchMode(ref<java::lang::String> cameraId, jboolean enabled) { return call_method<SCAPIX_META_STRING("setTorchMode"), void>(cameraId, enabled); }

} // namespace android::hardware::camera2
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_HARDWARE_CAMERA2_CAMERAMANAGER_H
