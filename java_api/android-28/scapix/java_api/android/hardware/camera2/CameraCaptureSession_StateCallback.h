// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_HARDWARE_CAMERA2_CAMERACAPTURESESSION_STATECALLBACK_H
#define SCAPIX_ANDROID_HARDWARE_CAMERA2_CAMERACAPTURESESSION_STATECALLBACK_H

namespace scapix::java_api {

namespace android::hardware::camera2 { class CameraCaptureSession; }
namespace android::view { class Surface; }

namespace android::hardware::camera2 {

class CameraCaptureSession_StateCallback : public object_base<SCAPIX_META_STRING("android/hardware/camera2/CameraCaptureSession$StateCallback"),
	java::lang::Object>
{
public:

	static ref<CameraCaptureSession_StateCallback> new_object();
	void onConfigured(ref<android::hardware::camera2::CameraCaptureSession> p1);
	void onConfigureFailed(ref<android::hardware::camera2::CameraCaptureSession> p1);
	void onReady(ref<android::hardware::camera2::CameraCaptureSession> session);
	void onActive(ref<android::hardware::camera2::CameraCaptureSession> session);
	void onCaptureQueueEmpty(ref<android::hardware::camera2::CameraCaptureSession> session);
	void onClosed(ref<android::hardware::camera2::CameraCaptureSession> session);
	void onSurfacePrepared(ref<android::hardware::camera2::CameraCaptureSession> session, ref<android::view::Surface> surface);

protected:

	CameraCaptureSession_StateCallback(handle_type h) : base_(h) {}

};

} // namespace android::hardware::camera2
} // namespace scapix::java_api

#include <scapix/java_api/android/hardware/camera2/CameraCaptureSession.h>
#include <scapix/java_api/android/view/Surface.h>

namespace scapix::java_api {
namespace android::hardware::camera2 {

inline ref<CameraCaptureSession_StateCallback> CameraCaptureSession_StateCallback::new_object() { return base_::new_object(); }
inline void CameraCaptureSession_StateCallback::onConfigured(ref<android::hardware::camera2::CameraCaptureSession> p1) { return call_method<SCAPIX_META_STRING("onConfigured"), void>(p1); }
inline void CameraCaptureSession_StateCallback::onConfigureFailed(ref<android::hardware::camera2::CameraCaptureSession> p1) { return call_method<SCAPIX_META_STRING("onConfigureFailed"), void>(p1); }
inline void CameraCaptureSession_StateCallback::onReady(ref<android::hardware::camera2::CameraCaptureSession> session) { return call_method<SCAPIX_META_STRING("onReady"), void>(session); }
inline void CameraCaptureSession_StateCallback::onActive(ref<android::hardware::camera2::CameraCaptureSession> session) { return call_method<SCAPIX_META_STRING("onActive"), void>(session); }
inline void CameraCaptureSession_StateCallback::onCaptureQueueEmpty(ref<android::hardware::camera2::CameraCaptureSession> session) { return call_method<SCAPIX_META_STRING("onCaptureQueueEmpty"), void>(session); }
inline void CameraCaptureSession_StateCallback::onClosed(ref<android::hardware::camera2::CameraCaptureSession> session) { return call_method<SCAPIX_META_STRING("onClosed"), void>(session); }
inline void CameraCaptureSession_StateCallback::onSurfacePrepared(ref<android::hardware::camera2::CameraCaptureSession> session, ref<android::view::Surface> surface) { return call_method<SCAPIX_META_STRING("onSurfacePrepared"), void>(session, surface); }

} // namespace android::hardware::camera2
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_HARDWARE_CAMERA2_CAMERACAPTURESESSION_STATECALLBACK_H
