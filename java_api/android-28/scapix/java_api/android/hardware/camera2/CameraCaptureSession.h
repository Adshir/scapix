// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_ANDROID_HARDWARE_CAMERA2_CAMERACAPTURESESSION_H
#define SCAPIX_ANDROID_HARDWARE_CAMERA2_CAMERACAPTURESESSION_H

namespace scapix::java_api {

namespace android::hardware::camera2 { class CameraCaptureSession_CaptureCallback; }
namespace android::hardware::camera2 { class CameraDevice; }
namespace android::hardware::camera2 { class CaptureRequest; }
namespace android::hardware::camera2::params { class OutputConfiguration; }
namespace android::os { class Handler; }
namespace android::view { class Surface; }
namespace java::util { class List; }
namespace java::util::concurrent { class Executor; }
namespace android::hardware::camera2 { class CameraCaptureSession_StateCallback; }

namespace android::hardware::camera2 {

class CameraCaptureSession : public object_base<SCAPIX_META_STRING("android/hardware/camera2/CameraCaptureSession"),
	java::lang::Object,
	java::lang::AutoCloseable>
{
public:

	using StateCallback = CameraCaptureSession_StateCallback;
	using CaptureCallback = CameraCaptureSession_CaptureCallback;

	static ref<CameraCaptureSession> new_object();
	ref<android::hardware::camera2::CameraDevice> getDevice();
	void prepare(ref<android::view::Surface> p1);
	void finalizeOutputConfigurations(ref<java::util::List> p1);
	jint capture(ref<android::hardware::camera2::CaptureRequest> p1, ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> p2, ref<android::os::Handler> p3);
	jint captureSingleRequest(ref<android::hardware::camera2::CaptureRequest> request, ref<java::util::concurrent::Executor> executor, ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> listener);
	jint captureBurst(ref<java::util::List> p1, ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> p2, ref<android::os::Handler> p3);
	jint captureBurstRequests(ref<java::util::List> requests, ref<java::util::concurrent::Executor> executor, ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> listener);
	jint setRepeatingRequest(ref<android::hardware::camera2::CaptureRequest> p1, ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> p2, ref<android::os::Handler> p3);
	jint setSingleRepeatingRequest(ref<android::hardware::camera2::CaptureRequest> request, ref<java::util::concurrent::Executor> executor, ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> listener);
	jint setRepeatingBurst(ref<java::util::List> p1, ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> p2, ref<android::os::Handler> p3);
	jint setRepeatingBurstRequests(ref<java::util::List> requests, ref<java::util::concurrent::Executor> executor, ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> listener);
	void stopRepeating();
	void abortCaptures();
	jboolean isReprocessable();
	ref<android::view::Surface> getInputSurface();
	void updateOutputConfiguration(ref<android::hardware::camera2::params::OutputConfiguration> config);
	void close();

protected:

	CameraCaptureSession(handle_type h) : base_(h) {}

};

} // namespace android::hardware::camera2
} // namespace scapix::java_api

#include <scapix/java_api/android/hardware/camera2/CameraCaptureSession_CaptureCallback.h>
#include <scapix/java_api/android/hardware/camera2/CameraDevice.h>
#include <scapix/java_api/android/hardware/camera2/CaptureRequest.h>
#include <scapix/java_api/android/hardware/camera2/params/OutputConfiguration.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>

namespace scapix::java_api {
namespace android::hardware::camera2 {

inline ref<CameraCaptureSession> CameraCaptureSession::new_object() { return base_::new_object(); }
inline ref<android::hardware::camera2::CameraDevice> CameraCaptureSession::getDevice() { return call_method<SCAPIX_META_STRING("getDevice"), ref<android::hardware::camera2::CameraDevice>>(); }
inline void CameraCaptureSession::prepare(ref<android::view::Surface> p1) { return call_method<SCAPIX_META_STRING("prepare"), void>(p1); }
inline void CameraCaptureSession::finalizeOutputConfigurations(ref<java::util::List> p1) { return call_method<SCAPIX_META_STRING("finalizeOutputConfigurations"), void>(p1); }
inline jint CameraCaptureSession::capture(ref<android::hardware::camera2::CaptureRequest> p1, ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> p2, ref<android::os::Handler> p3) { return call_method<SCAPIX_META_STRING("capture"), jint>(p1, p2, p3); }
inline jint CameraCaptureSession::captureSingleRequest(ref<android::hardware::camera2::CaptureRequest> request, ref<java::util::concurrent::Executor> executor, ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> listener) { return call_method<SCAPIX_META_STRING("captureSingleRequest"), jint>(request, executor, listener); }
inline jint CameraCaptureSession::captureBurst(ref<java::util::List> p1, ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> p2, ref<android::os::Handler> p3) { return call_method<SCAPIX_META_STRING("captureBurst"), jint>(p1, p2, p3); }
inline jint CameraCaptureSession::captureBurstRequests(ref<java::util::List> requests, ref<java::util::concurrent::Executor> executor, ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> listener) { return call_method<SCAPIX_META_STRING("captureBurstRequests"), jint>(requests, executor, listener); }
inline jint CameraCaptureSession::setRepeatingRequest(ref<android::hardware::camera2::CaptureRequest> p1, ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> p2, ref<android::os::Handler> p3) { return call_method<SCAPIX_META_STRING("setRepeatingRequest"), jint>(p1, p2, p3); }
inline jint CameraCaptureSession::setSingleRepeatingRequest(ref<android::hardware::camera2::CaptureRequest> request, ref<java::util::concurrent::Executor> executor, ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> listener) { return call_method<SCAPIX_META_STRING("setSingleRepeatingRequest"), jint>(request, executor, listener); }
inline jint CameraCaptureSession::setRepeatingBurst(ref<java::util::List> p1, ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> p2, ref<android::os::Handler> p3) { return call_method<SCAPIX_META_STRING("setRepeatingBurst"), jint>(p1, p2, p3); }
inline jint CameraCaptureSession::setRepeatingBurstRequests(ref<java::util::List> requests, ref<java::util::concurrent::Executor> executor, ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> listener) { return call_method<SCAPIX_META_STRING("setRepeatingBurstRequests"), jint>(requests, executor, listener); }
inline void CameraCaptureSession::stopRepeating() { return call_method<SCAPIX_META_STRING("stopRepeating"), void>(); }
inline void CameraCaptureSession::abortCaptures() { return call_method<SCAPIX_META_STRING("abortCaptures"), void>(); }
inline jboolean CameraCaptureSession::isReprocessable() { return call_method<SCAPIX_META_STRING("isReprocessable"), jboolean>(); }
inline ref<android::view::Surface> CameraCaptureSession::getInputSurface() { return call_method<SCAPIX_META_STRING("getInputSurface"), ref<android::view::Surface>>(); }
inline void CameraCaptureSession::updateOutputConfiguration(ref<android::hardware::camera2::params::OutputConfiguration> config) { return call_method<SCAPIX_META_STRING("updateOutputConfiguration"), void>(config); }
inline void CameraCaptureSession::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace android::hardware::camera2
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_HARDWARE_CAMERA2_CAMERACAPTURESESSION_H
