// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/nfc/tech/TagTechnology.h>

#ifndef SCAPIX_ANDROID_NFC_TECH_MIFAREULTRALIGHT_H
#define SCAPIX_ANDROID_NFC_TECH_MIFAREULTRALIGHT_H

namespace scapix::java_api {

namespace android::nfc { class Tag; }

namespace android::nfc::tech {

class MifareUltralight : public object_base<SCAPIX_META_STRING("android/nfc/tech/MifareUltralight"),
	java::lang::Object,
	android::nfc::tech::TagTechnology>
{
public:

	static jint PAGE_SIZE_();
	static jint TYPE_ULTRALIGHT_();
	static jint TYPE_ULTRALIGHT_C_();
	static jint TYPE_UNKNOWN_();

	static ref<android::nfc::tech::MifareUltralight> get(ref<android::nfc::Tag> tag);
	jint getType();
	ref<link::java::array<jbyte>> readPages(jint pageOffset);
	void writePage(jint pageOffset, ref<link::java::array<jbyte>> data);
	ref<link::java::array<jbyte>> transceive(ref<link::java::array<jbyte>> data);
	jint getMaxTransceiveLength();
	void setTimeout(jint timeout);
	jint getTimeout();
	jboolean isConnected();
	ref<android::nfc::Tag> getTag();
	void close();
	void connect();

protected:

	MifareUltralight(handle_type h) : base_(h) {}

};

} // namespace android::nfc::tech
} // namespace scapix::java_api

#include <scapix/java_api/android/nfc/Tag.h>

namespace scapix::java_api {
namespace android::nfc::tech {

inline jint MifareUltralight::PAGE_SIZE_() { return get_static_field<SCAPIX_META_STRING("PAGE_SIZE"), jint>(); }
inline jint MifareUltralight::TYPE_ULTRALIGHT_() { return get_static_field<SCAPIX_META_STRING("TYPE_ULTRALIGHT"), jint>(); }
inline jint MifareUltralight::TYPE_ULTRALIGHT_C_() { return get_static_field<SCAPIX_META_STRING("TYPE_ULTRALIGHT_C"), jint>(); }
inline jint MifareUltralight::TYPE_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("TYPE_UNKNOWN"), jint>(); }
inline ref<android::nfc::tech::MifareUltralight> MifareUltralight::get(ref<android::nfc::Tag> tag) { return call_static_method<SCAPIX_META_STRING("get"), ref<android::nfc::tech::MifareUltralight>>(tag); }
inline jint MifareUltralight::getType() { return call_method<SCAPIX_META_STRING("getType"), jint>(); }
inline ref<link::java::array<jbyte>> MifareUltralight::readPages(jint pageOffset) { return call_method<SCAPIX_META_STRING("readPages"), ref<link::java::array<jbyte>>>(pageOffset); }
inline void MifareUltralight::writePage(jint pageOffset, ref<link::java::array<jbyte>> data) { return call_method<SCAPIX_META_STRING("writePage"), void>(pageOffset, data); }
inline ref<link::java::array<jbyte>> MifareUltralight::transceive(ref<link::java::array<jbyte>> data) { return call_method<SCAPIX_META_STRING("transceive"), ref<link::java::array<jbyte>>>(data); }
inline jint MifareUltralight::getMaxTransceiveLength() { return call_method<SCAPIX_META_STRING("getMaxTransceiveLength"), jint>(); }
inline void MifareUltralight::setTimeout(jint timeout) { return call_method<SCAPIX_META_STRING("setTimeout"), void>(timeout); }
inline jint MifareUltralight::getTimeout() { return call_method<SCAPIX_META_STRING("getTimeout"), jint>(); }
inline jboolean MifareUltralight::isConnected() { return call_method<SCAPIX_META_STRING("isConnected"), jboolean>(); }
inline ref<android::nfc::Tag> MifareUltralight::getTag() { return call_method<SCAPIX_META_STRING("getTag"), ref<android::nfc::Tag>>(); }
inline void MifareUltralight::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void MifareUltralight::connect() { return call_method<SCAPIX_META_STRING("connect"), void>(); }

} // namespace android::nfc::tech
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_NFC_TECH_MIFAREULTRALIGHT_H
