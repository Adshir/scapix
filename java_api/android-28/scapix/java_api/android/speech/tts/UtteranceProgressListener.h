// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_SPEECH_TTS_UTTERANCEPROGRESSLISTENER_H
#define SCAPIX_ANDROID_SPEECH_TTS_UTTERANCEPROGRESSLISTENER_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace android::speech::tts {

class UtteranceProgressListener : public object_base<SCAPIX_META_STRING("android/speech/tts/UtteranceProgressListener"),
	java::lang::Object>
{
public:

	static ref<UtteranceProgressListener> new_object();
	void onStart(ref<java::lang::String> p1);
	void onDone(ref<java::lang::String> p1);
	void onError(ref<java::lang::String> p1);
	void onError(ref<java::lang::String> utteranceId, jint errorCode);
	void onStop(ref<java::lang::String> utteranceId, jboolean interrupted);
	void onBeginSynthesis(ref<java::lang::String> utteranceId, jint sampleRateInHz, jint audioFormat, jint channelCount);
	void onAudioAvailable(ref<java::lang::String> utteranceId, ref<link::java::array<jbyte>> audio);
	void onRangeStart(ref<java::lang::String> utteranceId, jint start, jint end, jint frame);

protected:

	UtteranceProgressListener(handle_type h) : base_(h) {}

};

} // namespace android::speech::tts
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::speech::tts {

inline ref<UtteranceProgressListener> UtteranceProgressListener::new_object() { return base_::new_object(); }
inline void UtteranceProgressListener::onStart(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("onStart"), void>(p1); }
inline void UtteranceProgressListener::onDone(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("onDone"), void>(p1); }
inline void UtteranceProgressListener::onError(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("onError"), void>(p1); }
inline void UtteranceProgressListener::onError(ref<java::lang::String> utteranceId, jint errorCode) { return call_method<SCAPIX_META_STRING("onError"), void>(utteranceId, errorCode); }
inline void UtteranceProgressListener::onStop(ref<java::lang::String> utteranceId, jboolean interrupted) { return call_method<SCAPIX_META_STRING("onStop"), void>(utteranceId, interrupted); }
inline void UtteranceProgressListener::onBeginSynthesis(ref<java::lang::String> utteranceId, jint sampleRateInHz, jint audioFormat, jint channelCount) { return call_method<SCAPIX_META_STRING("onBeginSynthesis"), void>(utteranceId, sampleRateInHz, audioFormat, channelCount); }
inline void UtteranceProgressListener::onAudioAvailable(ref<java::lang::String> utteranceId, ref<link::java::array<jbyte>> audio) { return call_method<SCAPIX_META_STRING("onAudioAvailable"), void>(utteranceId, audio); }
inline void UtteranceProgressListener::onRangeStart(ref<java::lang::String> utteranceId, jint start, jint end, jint frame) { return call_method<SCAPIX_META_STRING("onRangeStart"), void>(utteranceId, start, end, frame); }

} // namespace android::speech::tts
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_SPEECH_TTS_UTTERANCEPROGRESSLISTENER_H
