// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_SPEECH_TTS_TEXTTOSPEECH_H
#define SCAPIX_ANDROID_SPEECH_TTS_TEXTTOSPEECH_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::media { class AudioAttributes; }
namespace android::os { class Bundle; }
namespace android::speech::tts { class TextToSpeech_OnInitListener; }
namespace android::speech::tts { class TextToSpeech_OnUtteranceCompletedListener; }
namespace android::speech::tts { class UtteranceProgressListener; }
namespace android::speech::tts { class Voice; }
namespace java::io { class File; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::util { class HashMap; }
namespace java::util { class List; }
namespace java::util { class Locale; }
namespace java::util { class Set; }
namespace android::speech::tts { class TextToSpeech_EngineInfo; }
namespace android::speech::tts { class TextToSpeech_Engine; }

namespace android::speech::tts {

class TextToSpeech : public object_base<SCAPIX_META_STRING("android/speech/tts/TextToSpeech"),
	java::lang::Object>
{
public:

	using OnUtteranceCompletedListener = TextToSpeech_OnUtteranceCompletedListener;
	using OnInitListener = TextToSpeech_OnInitListener;
	using EngineInfo = TextToSpeech_EngineInfo;
	using Engine = TextToSpeech_Engine;

	static ref<java::lang::String> ACTION_TTS_QUEUE_PROCESSING_COMPLETED_();
	static jint ERROR_();
	static jint ERROR_INVALID_REQUEST_();
	static jint ERROR_NETWORK_();
	static jint ERROR_NETWORK_TIMEOUT_();
	static jint ERROR_NOT_INSTALLED_YET_();
	static jint ERROR_OUTPUT_();
	static jint ERROR_SERVICE_();
	static jint ERROR_SYNTHESIS_();
	static jint LANG_AVAILABLE_();
	static jint LANG_COUNTRY_AVAILABLE_();
	static jint LANG_COUNTRY_VAR_AVAILABLE_();
	static jint LANG_MISSING_DATA_();
	static jint LANG_NOT_SUPPORTED_();
	static jint QUEUE_ADD_();
	static jint QUEUE_FLUSH_();
	static jint STOPPED_();
	static jint SUCCESS_();

	static ref<TextToSpeech> new_object(ref<android::content::Context> context, ref<android::speech::tts::TextToSpeech_OnInitListener> listener);
	static ref<TextToSpeech> new_object(ref<android::content::Context> context, ref<android::speech::tts::TextToSpeech_OnInitListener> listener, ref<java::lang::String> engine);
	void shutdown();
	jint addSpeech(ref<java::lang::String> text, ref<java::lang::String> packagename, jint resourceId);
	jint addSpeech(ref<java::lang::CharSequence> text, ref<java::lang::String> packagename, jint resourceId);
	jint addSpeech(ref<java::lang::String> text, ref<java::lang::String> filename);
	jint addSpeech(ref<java::lang::CharSequence> text, ref<java::io::File> file);
	jint addEarcon(ref<java::lang::String> earcon, ref<java::lang::String> packagename, jint resourceId);
	jint addEarcon(ref<java::lang::String> earcon, ref<java::lang::String> filename);
	jint addEarcon(ref<java::lang::String> earcon, ref<java::io::File> file);
	jint speak(ref<java::lang::CharSequence> text, jint queueMode, ref<android::os::Bundle> params, ref<java::lang::String> utteranceId);
	jint speak(ref<java::lang::String> text, jint queueMode, ref<java::util::HashMap> params);
	jint playEarcon(ref<java::lang::String> earcon, jint queueMode, ref<android::os::Bundle> params, ref<java::lang::String> utteranceId);
	jint playEarcon(ref<java::lang::String> earcon, jint queueMode, ref<java::util::HashMap> params);
	jint playSilentUtterance(jlong durationInMs, jint p2, ref<java::lang::String> queueMode);
	jint playSilence(jlong durationInMs, jint p2, ref<java::util::HashMap> queueMode);
	ref<java::util::Set> getFeatures(ref<java::util::Locale> locale);
	jboolean isSpeaking();
	jint stop();
	jint setSpeechRate(jfloat speechRate);
	jint setPitch(jfloat pitch);
	jint setAudioAttributes(ref<android::media::AudioAttributes> audioAttributes);
	ref<java::util::Locale> getDefaultLanguage();
	jint setLanguage(ref<java::util::Locale> loc);
	ref<java::util::Locale> getLanguage();
	ref<java::util::Set> getAvailableLanguages();
	ref<java::util::Set> getVoices();
	jint setVoice(ref<android::speech::tts::Voice> voice);
	ref<android::speech::tts::Voice> getVoice();
	ref<android::speech::tts::Voice> getDefaultVoice();
	jint isLanguageAvailable(ref<java::util::Locale> loc);
	jint synthesizeToFile(ref<java::lang::CharSequence> text, ref<android::os::Bundle> params, ref<java::io::File> file, ref<java::lang::String> utteranceId);
	jint synthesizeToFile(ref<java::lang::String> text, ref<java::util::HashMap> params, ref<java::lang::String> filename);
	jint setOnUtteranceCompletedListener(ref<android::speech::tts::TextToSpeech_OnUtteranceCompletedListener> listener);
	jint setOnUtteranceProgressListener(ref<android::speech::tts::UtteranceProgressListener> listener);
	jint setEngineByPackageName(ref<java::lang::String> enginePackageName);
	ref<java::lang::String> getDefaultEngine();
	jboolean areDefaultsEnforced();
	ref<java::util::List> getEngines();
	static jint getMaxSpeechInputLength();

protected:

	TextToSpeech(handle_type h) : base_(h) {}

};

} // namespace android::speech::tts
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/media/AudioAttributes.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/speech/tts/TextToSpeech_OnInitListener.h>
#include <scapix/java_api/android/speech/tts/TextToSpeech_OnUtteranceCompletedListener.h>
#include <scapix/java_api/android/speech/tts/UtteranceProgressListener.h>
#include <scapix/java_api/android/speech/tts/Voice.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/HashMap.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace android::speech::tts {

inline ref<java::lang::String> TextToSpeech::ACTION_TTS_QUEUE_PROCESSING_COMPLETED_() { return get_static_field<SCAPIX_META_STRING("ACTION_TTS_QUEUE_PROCESSING_COMPLETED"), ref<java::lang::String>>(); }
inline jint TextToSpeech::ERROR_() { return get_static_field<SCAPIX_META_STRING("ERROR"), jint>(); }
inline jint TextToSpeech::ERROR_INVALID_REQUEST_() { return get_static_field<SCAPIX_META_STRING("ERROR_INVALID_REQUEST"), jint>(); }
inline jint TextToSpeech::ERROR_NETWORK_() { return get_static_field<SCAPIX_META_STRING("ERROR_NETWORK"), jint>(); }
inline jint TextToSpeech::ERROR_NETWORK_TIMEOUT_() { return get_static_field<SCAPIX_META_STRING("ERROR_NETWORK_TIMEOUT"), jint>(); }
inline jint TextToSpeech::ERROR_NOT_INSTALLED_YET_() { return get_static_field<SCAPIX_META_STRING("ERROR_NOT_INSTALLED_YET"), jint>(); }
inline jint TextToSpeech::ERROR_OUTPUT_() { return get_static_field<SCAPIX_META_STRING("ERROR_OUTPUT"), jint>(); }
inline jint TextToSpeech::ERROR_SERVICE_() { return get_static_field<SCAPIX_META_STRING("ERROR_SERVICE"), jint>(); }
inline jint TextToSpeech::ERROR_SYNTHESIS_() { return get_static_field<SCAPIX_META_STRING("ERROR_SYNTHESIS"), jint>(); }
inline jint TextToSpeech::LANG_AVAILABLE_() { return get_static_field<SCAPIX_META_STRING("LANG_AVAILABLE"), jint>(); }
inline jint TextToSpeech::LANG_COUNTRY_AVAILABLE_() { return get_static_field<SCAPIX_META_STRING("LANG_COUNTRY_AVAILABLE"), jint>(); }
inline jint TextToSpeech::LANG_COUNTRY_VAR_AVAILABLE_() { return get_static_field<SCAPIX_META_STRING("LANG_COUNTRY_VAR_AVAILABLE"), jint>(); }
inline jint TextToSpeech::LANG_MISSING_DATA_() { return get_static_field<SCAPIX_META_STRING("LANG_MISSING_DATA"), jint>(); }
inline jint TextToSpeech::LANG_NOT_SUPPORTED_() { return get_static_field<SCAPIX_META_STRING("LANG_NOT_SUPPORTED"), jint>(); }
inline jint TextToSpeech::QUEUE_ADD_() { return get_static_field<SCAPIX_META_STRING("QUEUE_ADD"), jint>(); }
inline jint TextToSpeech::QUEUE_FLUSH_() { return get_static_field<SCAPIX_META_STRING("QUEUE_FLUSH"), jint>(); }
inline jint TextToSpeech::STOPPED_() { return get_static_field<SCAPIX_META_STRING("STOPPED"), jint>(); }
inline jint TextToSpeech::SUCCESS_() { return get_static_field<SCAPIX_META_STRING("SUCCESS"), jint>(); }
inline ref<TextToSpeech> TextToSpeech::new_object(ref<android::content::Context> context, ref<android::speech::tts::TextToSpeech_OnInitListener> listener) { return base_::new_object(context, listener); }
inline ref<TextToSpeech> TextToSpeech::new_object(ref<android::content::Context> context, ref<android::speech::tts::TextToSpeech_OnInitListener> listener, ref<java::lang::String> engine) { return base_::new_object(context, listener, engine); }
inline void TextToSpeech::shutdown() { return call_method<SCAPIX_META_STRING("shutdown"), void>(); }
inline jint TextToSpeech::addSpeech(ref<java::lang::String> text, ref<java::lang::String> packagename, jint resourceId) { return call_method<SCAPIX_META_STRING("addSpeech"), jint>(text, packagename, resourceId); }
inline jint TextToSpeech::addSpeech(ref<java::lang::CharSequence> text, ref<java::lang::String> packagename, jint resourceId) { return call_method<SCAPIX_META_STRING("addSpeech"), jint>(text, packagename, resourceId); }
inline jint TextToSpeech::addSpeech(ref<java::lang::String> text, ref<java::lang::String> filename) { return call_method<SCAPIX_META_STRING("addSpeech"), jint>(text, filename); }
inline jint TextToSpeech::addSpeech(ref<java::lang::CharSequence> text, ref<java::io::File> file) { return call_method<SCAPIX_META_STRING("addSpeech"), jint>(text, file); }
inline jint TextToSpeech::addEarcon(ref<java::lang::String> earcon, ref<java::lang::String> packagename, jint resourceId) { return call_method<SCAPIX_META_STRING("addEarcon"), jint>(earcon, packagename, resourceId); }
inline jint TextToSpeech::addEarcon(ref<java::lang::String> earcon, ref<java::lang::String> filename) { return call_method<SCAPIX_META_STRING("addEarcon"), jint>(earcon, filename); }
inline jint TextToSpeech::addEarcon(ref<java::lang::String> earcon, ref<java::io::File> file) { return call_method<SCAPIX_META_STRING("addEarcon"), jint>(earcon, file); }
inline jint TextToSpeech::speak(ref<java::lang::CharSequence> text, jint queueMode, ref<android::os::Bundle> params, ref<java::lang::String> utteranceId) { return call_method<SCAPIX_META_STRING("speak"), jint>(text, queueMode, params, utteranceId); }
inline jint TextToSpeech::speak(ref<java::lang::String> text, jint queueMode, ref<java::util::HashMap> params) { return call_method<SCAPIX_META_STRING("speak"), jint>(text, queueMode, params); }
inline jint TextToSpeech::playEarcon(ref<java::lang::String> earcon, jint queueMode, ref<android::os::Bundle> params, ref<java::lang::String> utteranceId) { return call_method<SCAPIX_META_STRING("playEarcon"), jint>(earcon, queueMode, params, utteranceId); }
inline jint TextToSpeech::playEarcon(ref<java::lang::String> earcon, jint queueMode, ref<java::util::HashMap> params) { return call_method<SCAPIX_META_STRING("playEarcon"), jint>(earcon, queueMode, params); }
inline jint TextToSpeech::playSilentUtterance(jlong durationInMs, jint p2, ref<java::lang::String> queueMode) { return call_method<SCAPIX_META_STRING("playSilentUtterance"), jint>(durationInMs, p2, queueMode); }
inline jint TextToSpeech::playSilence(jlong durationInMs, jint p2, ref<java::util::HashMap> queueMode) { return call_method<SCAPIX_META_STRING("playSilence"), jint>(durationInMs, p2, queueMode); }
inline ref<java::util::Set> TextToSpeech::getFeatures(ref<java::util::Locale> locale) { return call_method<SCAPIX_META_STRING("getFeatures"), ref<java::util::Set>>(locale); }
inline jboolean TextToSpeech::isSpeaking() { return call_method<SCAPIX_META_STRING("isSpeaking"), jboolean>(); }
inline jint TextToSpeech::stop() { return call_method<SCAPIX_META_STRING("stop"), jint>(); }
inline jint TextToSpeech::setSpeechRate(jfloat speechRate) { return call_method<SCAPIX_META_STRING("setSpeechRate"), jint>(speechRate); }
inline jint TextToSpeech::setPitch(jfloat pitch) { return call_method<SCAPIX_META_STRING("setPitch"), jint>(pitch); }
inline jint TextToSpeech::setAudioAttributes(ref<android::media::AudioAttributes> audioAttributes) { return call_method<SCAPIX_META_STRING("setAudioAttributes"), jint>(audioAttributes); }
inline ref<java::util::Locale> TextToSpeech::getDefaultLanguage() { return call_method<SCAPIX_META_STRING("getDefaultLanguage"), ref<java::util::Locale>>(); }
inline jint TextToSpeech::setLanguage(ref<java::util::Locale> loc) { return call_method<SCAPIX_META_STRING("setLanguage"), jint>(loc); }
inline ref<java::util::Locale> TextToSpeech::getLanguage() { return call_method<SCAPIX_META_STRING("getLanguage"), ref<java::util::Locale>>(); }
inline ref<java::util::Set> TextToSpeech::getAvailableLanguages() { return call_method<SCAPIX_META_STRING("getAvailableLanguages"), ref<java::util::Set>>(); }
inline ref<java::util::Set> TextToSpeech::getVoices() { return call_method<SCAPIX_META_STRING("getVoices"), ref<java::util::Set>>(); }
inline jint TextToSpeech::setVoice(ref<android::speech::tts::Voice> voice) { return call_method<SCAPIX_META_STRING("setVoice"), jint>(voice); }
inline ref<android::speech::tts::Voice> TextToSpeech::getVoice() { return call_method<SCAPIX_META_STRING("getVoice"), ref<android::speech::tts::Voice>>(); }
inline ref<android::speech::tts::Voice> TextToSpeech::getDefaultVoice() { return call_method<SCAPIX_META_STRING("getDefaultVoice"), ref<android::speech::tts::Voice>>(); }
inline jint TextToSpeech::isLanguageAvailable(ref<java::util::Locale> loc) { return call_method<SCAPIX_META_STRING("isLanguageAvailable"), jint>(loc); }
inline jint TextToSpeech::synthesizeToFile(ref<java::lang::CharSequence> text, ref<android::os::Bundle> params, ref<java::io::File> file, ref<java::lang::String> utteranceId) { return call_method<SCAPIX_META_STRING("synthesizeToFile"), jint>(text, params, file, utteranceId); }
inline jint TextToSpeech::synthesizeToFile(ref<java::lang::String> text, ref<java::util::HashMap> params, ref<java::lang::String> filename) { return call_method<SCAPIX_META_STRING("synthesizeToFile"), jint>(text, params, filename); }
inline jint TextToSpeech::setOnUtteranceCompletedListener(ref<android::speech::tts::TextToSpeech_OnUtteranceCompletedListener> listener) { return call_method<SCAPIX_META_STRING("setOnUtteranceCompletedListener"), jint>(listener); }
inline jint TextToSpeech::setOnUtteranceProgressListener(ref<android::speech::tts::UtteranceProgressListener> listener) { return call_method<SCAPIX_META_STRING("setOnUtteranceProgressListener"), jint>(listener); }
inline jint TextToSpeech::setEngineByPackageName(ref<java::lang::String> enginePackageName) { return call_method<SCAPIX_META_STRING("setEngineByPackageName"), jint>(enginePackageName); }
inline ref<java::lang::String> TextToSpeech::getDefaultEngine() { return call_method<SCAPIX_META_STRING("getDefaultEngine"), ref<java::lang::String>>(); }
inline jboolean TextToSpeech::areDefaultsEnforced() { return call_method<SCAPIX_META_STRING("areDefaultsEnforced"), jboolean>(); }
inline ref<java::util::List> TextToSpeech::getEngines() { return call_method<SCAPIX_META_STRING("getEngines"), ref<java::util::List>>(); }
inline jint TextToSpeech::getMaxSpeechInputLength() { return call_static_method<SCAPIX_META_STRING("getMaxSpeechInputLength"), jint>(); }

} // namespace android::speech::tts
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_SPEECH_TTS_TEXTTOSPEECH_H
