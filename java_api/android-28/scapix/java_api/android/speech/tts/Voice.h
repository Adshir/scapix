// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_SPEECH_TTS_VOICE_H
#define SCAPIX_ANDROID_SPEECH_TTS_VOICE_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }
namespace java::util { class Locale; }
namespace java::util { class Set; }

namespace android::speech::tts {

class Voice : public object_base<SCAPIX_META_STRING("android/speech/tts/Voice"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint LATENCY_HIGH_();
	static jint LATENCY_LOW_();
	static jint LATENCY_NORMAL_();
	static jint LATENCY_VERY_HIGH_();
	static jint LATENCY_VERY_LOW_();
	static jint QUALITY_HIGH_();
	static jint QUALITY_LOW_();
	static jint QUALITY_NORMAL_();
	static jint QUALITY_VERY_HIGH_();
	static jint QUALITY_VERY_LOW_();

	static ref<Voice> new_object(ref<java::lang::String> name, ref<java::util::Locale> locale, jint quality, jint latency, jboolean requiresNetworkConnection, ref<java::util::Set> features);
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	jint describeContents();
	ref<java::util::Locale> getLocale();
	jint getQuality();
	jint getLatency();
	jboolean isNetworkConnectionRequired();
	ref<java::lang::String> getName();
	ref<java::util::Set> getFeatures();
	ref<java::lang::String> toString();
	jint hashCode();
	jboolean equals(ref<java::lang::Object> obj);

protected:

	Voice(handle_type h) : base_(h) {}

};

} // namespace android::speech::tts
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace android::speech::tts {

inline ref<android::os::Parcelable_Creator> Voice::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint Voice::LATENCY_HIGH_() { return get_static_field<SCAPIX_META_STRING("LATENCY_HIGH"), jint>(); }
inline jint Voice::LATENCY_LOW_() { return get_static_field<SCAPIX_META_STRING("LATENCY_LOW"), jint>(); }
inline jint Voice::LATENCY_NORMAL_() { return get_static_field<SCAPIX_META_STRING("LATENCY_NORMAL"), jint>(); }
inline jint Voice::LATENCY_VERY_HIGH_() { return get_static_field<SCAPIX_META_STRING("LATENCY_VERY_HIGH"), jint>(); }
inline jint Voice::LATENCY_VERY_LOW_() { return get_static_field<SCAPIX_META_STRING("LATENCY_VERY_LOW"), jint>(); }
inline jint Voice::QUALITY_HIGH_() { return get_static_field<SCAPIX_META_STRING("QUALITY_HIGH"), jint>(); }
inline jint Voice::QUALITY_LOW_() { return get_static_field<SCAPIX_META_STRING("QUALITY_LOW"), jint>(); }
inline jint Voice::QUALITY_NORMAL_() { return get_static_field<SCAPIX_META_STRING("QUALITY_NORMAL"), jint>(); }
inline jint Voice::QUALITY_VERY_HIGH_() { return get_static_field<SCAPIX_META_STRING("QUALITY_VERY_HIGH"), jint>(); }
inline jint Voice::QUALITY_VERY_LOW_() { return get_static_field<SCAPIX_META_STRING("QUALITY_VERY_LOW"), jint>(); }
inline ref<Voice> Voice::new_object(ref<java::lang::String> name, ref<java::util::Locale> locale, jint quality, jint latency, jboolean requiresNetworkConnection, ref<java::util::Set> features) { return base_::new_object(name, locale, quality, latency, requiresNetworkConnection, features); }
inline void Voice::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline jint Voice::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline ref<java::util::Locale> Voice::getLocale() { return call_method<SCAPIX_META_STRING("getLocale"), ref<java::util::Locale>>(); }
inline jint Voice::getQuality() { return call_method<SCAPIX_META_STRING("getQuality"), jint>(); }
inline jint Voice::getLatency() { return call_method<SCAPIX_META_STRING("getLatency"), jint>(); }
inline jboolean Voice::isNetworkConnectionRequired() { return call_method<SCAPIX_META_STRING("isNetworkConnectionRequired"), jboolean>(); }
inline ref<java::lang::String> Voice::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<java::util::Set> Voice::getFeatures() { return call_method<SCAPIX_META_STRING("getFeatures"), ref<java::util::Set>>(); }
inline ref<java::lang::String> Voice::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint Voice::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean Voice::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }

} // namespace android::speech::tts
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_SPEECH_TTS_VOICE_H
