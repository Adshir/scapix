// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_VIEW_KEYCHARACTERMAP_H
#define SCAPIX_ANDROID_VIEW_KEYCHARACTERMAP_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::view { class KeyCharacterMap_KeyData; }
namespace android::view { class KeyEvent; }
namespace android::view { class KeyCharacterMap_UnavailableException; }

namespace android::view {

class KeyCharacterMap : public object_base<SCAPIX_META_STRING("android/view/KeyCharacterMap"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using UnavailableException = KeyCharacterMap_UnavailableException;
	using KeyData = KeyCharacterMap_KeyData;

	static jint ALPHA_();
	static jint BUILT_IN_KEYBOARD_();
	static jint COMBINING_ACCENT_();
	static jint COMBINING_ACCENT_MASK_();
	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint FULL_();
	static jchar HEX_INPUT_();
	static jint MODIFIER_BEHAVIOR_CHORDED_();
	static jint MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED_();
	static jint NUMERIC_();
	static jchar PICKER_DIALOG_INPUT_();
	static jint PREDICTIVE_();
	static jint SPECIAL_FUNCTION_();
	static jint VIRTUAL_KEYBOARD_();

	static ref<android::view::KeyCharacterMap> load(jint deviceId);
	jint get(jint keyCode, jint metaState);
	jchar getNumber(jint keyCode);
	jchar getMatch(jint keyCode, ref<link::java::array<jchar>> chars);
	jchar getMatch(jint keyCode, ref<link::java::array<jchar>> chars, jint metaState);
	jchar getDisplayLabel(jint keyCode);
	static jint getDeadChar(jint accent, jint c);
	jboolean getKeyData(jint keyCode, ref<android::view::KeyCharacterMap_KeyData> results);
	ref<link::java::array<android::view::KeyEvent>> getEvents(ref<link::java::array<jchar>> chars);
	jboolean isPrintingKey(jint keyCode);
	jint getKeyboardType();
	jint getModifierBehavior();
	static jboolean deviceHasKey(jint keyCode);
	static ref<link::java::array<jboolean>> deviceHasKeys(ref<link::java::array<jint>> keyCodes);
	void writeToParcel(ref<android::os::Parcel> out, jint flags);
	jint describeContents();

protected:

	KeyCharacterMap(handle_type h) : base_(h) {}

};

} // namespace android::view
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/view/KeyCharacterMap_KeyData.h>
#include <scapix/java_api/android/view/KeyEvent.h>

namespace scapix::java_api {
namespace android::view {

inline jint KeyCharacterMap::ALPHA_() { return get_static_field<SCAPIX_META_STRING("ALPHA"), jint>(); }
inline jint KeyCharacterMap::BUILT_IN_KEYBOARD_() { return get_static_field<SCAPIX_META_STRING("BUILT_IN_KEYBOARD"), jint>(); }
inline jint KeyCharacterMap::COMBINING_ACCENT_() { return get_static_field<SCAPIX_META_STRING("COMBINING_ACCENT"), jint>(); }
inline jint KeyCharacterMap::COMBINING_ACCENT_MASK_() { return get_static_field<SCAPIX_META_STRING("COMBINING_ACCENT_MASK"), jint>(); }
inline ref<android::os::Parcelable_Creator> KeyCharacterMap::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint KeyCharacterMap::FULL_() { return get_static_field<SCAPIX_META_STRING("FULL"), jint>(); }
inline jchar KeyCharacterMap::HEX_INPUT_() { return get_static_field<SCAPIX_META_STRING("HEX_INPUT"), jchar>(); }
inline jint KeyCharacterMap::MODIFIER_BEHAVIOR_CHORDED_() { return get_static_field<SCAPIX_META_STRING("MODIFIER_BEHAVIOR_CHORDED"), jint>(); }
inline jint KeyCharacterMap::MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED_() { return get_static_field<SCAPIX_META_STRING("MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED"), jint>(); }
inline jint KeyCharacterMap::NUMERIC_() { return get_static_field<SCAPIX_META_STRING("NUMERIC"), jint>(); }
inline jchar KeyCharacterMap::PICKER_DIALOG_INPUT_() { return get_static_field<SCAPIX_META_STRING("PICKER_DIALOG_INPUT"), jchar>(); }
inline jint KeyCharacterMap::PREDICTIVE_() { return get_static_field<SCAPIX_META_STRING("PREDICTIVE"), jint>(); }
inline jint KeyCharacterMap::SPECIAL_FUNCTION_() { return get_static_field<SCAPIX_META_STRING("SPECIAL_FUNCTION"), jint>(); }
inline jint KeyCharacterMap::VIRTUAL_KEYBOARD_() { return get_static_field<SCAPIX_META_STRING("VIRTUAL_KEYBOARD"), jint>(); }
inline ref<android::view::KeyCharacterMap> KeyCharacterMap::load(jint deviceId) { return call_static_method<SCAPIX_META_STRING("load"), ref<android::view::KeyCharacterMap>>(deviceId); }
inline jint KeyCharacterMap::get(jint keyCode, jint metaState) { return call_method<SCAPIX_META_STRING("get"), jint>(keyCode, metaState); }
inline jchar KeyCharacterMap::getNumber(jint keyCode) { return call_method<SCAPIX_META_STRING("getNumber"), jchar>(keyCode); }
inline jchar KeyCharacterMap::getMatch(jint keyCode, ref<link::java::array<jchar>> chars) { return call_method<SCAPIX_META_STRING("getMatch"), jchar>(keyCode, chars); }
inline jchar KeyCharacterMap::getMatch(jint keyCode, ref<link::java::array<jchar>> chars, jint metaState) { return call_method<SCAPIX_META_STRING("getMatch"), jchar>(keyCode, chars, metaState); }
inline jchar KeyCharacterMap::getDisplayLabel(jint keyCode) { return call_method<SCAPIX_META_STRING("getDisplayLabel"), jchar>(keyCode); }
inline jint KeyCharacterMap::getDeadChar(jint accent, jint c) { return call_static_method<SCAPIX_META_STRING("getDeadChar"), jint>(accent, c); }
inline jboolean KeyCharacterMap::getKeyData(jint keyCode, ref<android::view::KeyCharacterMap_KeyData> results) { return call_method<SCAPIX_META_STRING("getKeyData"), jboolean>(keyCode, results); }
inline ref<link::java::array<android::view::KeyEvent>> KeyCharacterMap::getEvents(ref<link::java::array<jchar>> chars) { return call_method<SCAPIX_META_STRING("getEvents"), ref<link::java::array<android::view::KeyEvent>>>(chars); }
inline jboolean KeyCharacterMap::isPrintingKey(jint keyCode) { return call_method<SCAPIX_META_STRING("isPrintingKey"), jboolean>(keyCode); }
inline jint KeyCharacterMap::getKeyboardType() { return call_method<SCAPIX_META_STRING("getKeyboardType"), jint>(); }
inline jint KeyCharacterMap::getModifierBehavior() { return call_method<SCAPIX_META_STRING("getModifierBehavior"), jint>(); }
inline jboolean KeyCharacterMap::deviceHasKey(jint keyCode) { return call_static_method<SCAPIX_META_STRING("deviceHasKey"), jboolean>(keyCode); }
inline ref<link::java::array<jboolean>> KeyCharacterMap::deviceHasKeys(ref<link::java::array<jint>> keyCodes) { return call_static_method<SCAPIX_META_STRING("deviceHasKeys"), ref<link::java::array<jboolean>>>(keyCodes); }
inline void KeyCharacterMap::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }
inline jint KeyCharacterMap::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }

} // namespace android::view
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_KEYCHARACTERMAP_H
