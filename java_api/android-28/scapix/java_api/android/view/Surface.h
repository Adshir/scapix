// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_VIEW_SURFACE_H
#define SCAPIX_ANDROID_VIEW_SURFACE_H

namespace scapix::java_api {

namespace android::graphics { class Canvas; }
namespace android::graphics { class Rect; }
namespace android::graphics { class SurfaceTexture; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }
namespace android::view { class Surface_OutOfResourcesException; }

namespace android::view {

class Surface : public object_base<SCAPIX_META_STRING("android/view/Surface"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using OutOfResourcesException = Surface_OutOfResourcesException;

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint ROTATION_0_();
	static jint ROTATION_180_();
	static jint ROTATION_270_();
	static jint ROTATION_90_();

	static ref<Surface> new_object(ref<android::graphics::SurfaceTexture> surfaceTexture);
	void release();
	jboolean isValid();
	ref<android::graphics::Canvas> lockCanvas(ref<android::graphics::Rect> inOutDirty);
	void unlockCanvasAndPost(ref<android::graphics::Canvas> canvas);
	ref<android::graphics::Canvas> lockHardwareCanvas();
	void unlockCanvas(ref<android::graphics::Canvas> canvas);
	jint describeContents();
	void readFromParcel(ref<android::os::Parcel> source);
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	ref<java::lang::String> toString();

protected:

	Surface(handle_type h) : base_(h) {}

};

} // namespace android::view
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/SurfaceTexture.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::view {

inline ref<android::os::Parcelable_Creator> Surface::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint Surface::ROTATION_0_() { return get_static_field<SCAPIX_META_STRING("ROTATION_0"), jint>(); }
inline jint Surface::ROTATION_180_() { return get_static_field<SCAPIX_META_STRING("ROTATION_180"), jint>(); }
inline jint Surface::ROTATION_270_() { return get_static_field<SCAPIX_META_STRING("ROTATION_270"), jint>(); }
inline jint Surface::ROTATION_90_() { return get_static_field<SCAPIX_META_STRING("ROTATION_90"), jint>(); }
inline ref<Surface> Surface::new_object(ref<android::graphics::SurfaceTexture> surfaceTexture) { return base_::new_object(surfaceTexture); }
inline void Surface::release() { return call_method<SCAPIX_META_STRING("release"), void>(); }
inline jboolean Surface::isValid() { return call_method<SCAPIX_META_STRING("isValid"), jboolean>(); }
inline ref<android::graphics::Canvas> Surface::lockCanvas(ref<android::graphics::Rect> inOutDirty) { return call_method<SCAPIX_META_STRING("lockCanvas"), ref<android::graphics::Canvas>>(inOutDirty); }
inline void Surface::unlockCanvasAndPost(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("unlockCanvasAndPost"), void>(canvas); }
inline ref<android::graphics::Canvas> Surface::lockHardwareCanvas() { return call_method<SCAPIX_META_STRING("lockHardwareCanvas"), ref<android::graphics::Canvas>>(); }
inline void Surface::unlockCanvas(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("unlockCanvas"), void>(canvas); }
inline jint Surface::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void Surface::readFromParcel(ref<android::os::Parcel> source) { return call_method<SCAPIX_META_STRING("readFromParcel"), void>(source); }
inline void Surface::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline ref<java::lang::String> Surface::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::view
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_SURFACE_H
