// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/graphics/drawable/Drawable_Callback.h>
#include <scapix/java_api/android/view/KeyEvent_Callback.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEventSource.h>

#ifndef SCAPIX_ANDROID_VIEW_VIEW_H
#define SCAPIX_ANDROID_VIEW_VIEW_H

namespace scapix::java_api {

namespace android::animation { class StateListAnimator; }
namespace android::content { class ClipData; }
namespace android::content { class Context; }
namespace android::content::res { class ColorStateList; }
namespace android::content::res { class Configuration; }
namespace android::content::res { class Resources; }
namespace android::graphics { class Bitmap; }
namespace android::graphics { class Canvas; }
namespace android::graphics { class Matrix; }
namespace android::graphics { class Paint; }
namespace android::graphics { class Point; }
namespace android::graphics { class PorterDuff_Mode; }
namespace android::graphics { class Rect; }
namespace android::graphics::drawable { class Drawable; }
namespace android::os { class Bundle; }
namespace android::os { class Handler; }
namespace android::os { class IBinder; }
namespace android::util { class AttributeSet; }
namespace android::util { class Property; }
namespace android::util { class SparseArray; }
namespace android::view { class ActionMode; }
namespace android::view { class ActionMode_Callback; }
namespace android::view { class ContextMenu; }
namespace android::view { class Display; }
namespace android::view { class DragEvent; }
namespace android::view { class KeyEvent; }
namespace android::view { class KeyEvent_DispatcherState; }
namespace android::view { class MotionEvent; }
namespace android::view { class PointerIcon; }
namespace android::view { class TouchDelegate; }
namespace android::view { class View_AccessibilityDelegate; }
namespace android::view { class View_DragShadowBuilder; }
namespace android::view { class View_OnApplyWindowInsetsListener; }
namespace android::view { class View_OnAttachStateChangeListener; }
namespace android::view { class View_OnCapturedPointerListener; }
namespace android::view { class View_OnClickListener; }
namespace android::view { class View_OnContextClickListener; }
namespace android::view { class View_OnCreateContextMenuListener; }
namespace android::view { class View_OnDragListener; }
namespace android::view { class View_OnFocusChangeListener; }
namespace android::view { class View_OnGenericMotionListener; }
namespace android::view { class View_OnHoverListener; }
namespace android::view { class View_OnKeyListener; }
namespace android::view { class View_OnLayoutChangeListener; }
namespace android::view { class View_OnLongClickListener; }
namespace android::view { class View_OnScrollChangeListener; }
namespace android::view { class View_OnSystemUiVisibilityChangeListener; }
namespace android::view { class View_OnTouchListener; }
namespace android::view { class View_OnUnhandledKeyEventListener; }
namespace android::view { class ViewGroup; }
namespace android::view { class ViewGroup_LayoutParams; }
namespace android::view { class ViewOutlineProvider; }
namespace android::view { class ViewOverlay; }
namespace android::view { class ViewParent; }
namespace android::view { class ViewPropertyAnimator; }
namespace android::view { class ViewStructure; }
namespace android::view { class ViewTreeObserver; }
namespace android::view { class WindowId; }
namespace android::view { class WindowInsets; }
namespace android::view::accessibility { class AccessibilityEvent; }
namespace android::view::accessibility { class AccessibilityNodeInfo; }
namespace android::view::accessibility { class AccessibilityNodeProvider; }
namespace android::view::animation { class Animation; }
namespace android::view::autofill { class AutofillId; }
namespace android::view::autofill { class AutofillValue; }
namespace android::view::inputmethod { class EditorInfo; }
namespace android::view::inputmethod { class InputConnection; }
namespace java::lang { class CharSequence; }
namespace java::lang { class Runnable; }
namespace java::lang { class String; }
namespace java::util { class ArrayList; }
namespace java::util { class Collection; }
namespace android::view { class View_MeasureSpec; }
namespace android::view { class View_BaseSavedState; }

namespace android::view {

class View : public object_base<SCAPIX_META_STRING("android/view/View"),
	java::lang::Object,
	android::graphics::drawable::Drawable_Callback,
	android::view::KeyEvent_Callback,
	android::view::accessibility::AccessibilityEventSource>
{
public:

	using OnUnhandledKeyEventListener = View_OnUnhandledKeyEventListener;
	using OnTouchListener = View_OnTouchListener;
	using OnSystemUiVisibilityChangeListener = View_OnSystemUiVisibilityChangeListener;
	using OnScrollChangeListener = View_OnScrollChangeListener;
	using OnLongClickListener = View_OnLongClickListener;
	using OnLayoutChangeListener = View_OnLayoutChangeListener;
	using OnKeyListener = View_OnKeyListener;
	using OnHoverListener = View_OnHoverListener;
	using OnGenericMotionListener = View_OnGenericMotionListener;
	using OnFocusChangeListener = View_OnFocusChangeListener;
	using OnDragListener = View_OnDragListener;
	using OnCreateContextMenuListener = View_OnCreateContextMenuListener;
	using OnContextClickListener = View_OnContextClickListener;
	using OnClickListener = View_OnClickListener;
	using OnCapturedPointerListener = View_OnCapturedPointerListener;
	using OnAttachStateChangeListener = View_OnAttachStateChangeListener;
	using OnApplyWindowInsetsListener = View_OnApplyWindowInsetsListener;
	using MeasureSpec = View_MeasureSpec;
	using DragShadowBuilder = View_DragShadowBuilder;
	using BaseSavedState = View_BaseSavedState;
	using AccessibilityDelegate = View_AccessibilityDelegate;

	static jint ACCESSIBILITY_LIVE_REGION_ASSERTIVE_();
	static jint ACCESSIBILITY_LIVE_REGION_NONE_();
	static jint ACCESSIBILITY_LIVE_REGION_POLITE_();
	static ref<android::util::Property> ALPHA_();
	static jint AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS_();
	static ref<java::lang::String> AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE_();
	static ref<java::lang::String> AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY_();
	static ref<java::lang::String> AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH_();
	static ref<java::lang::String> AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR_();
	static ref<java::lang::String> AUTOFILL_HINT_CREDIT_CARD_NUMBER_();
	static ref<java::lang::String> AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE_();
	static ref<java::lang::String> AUTOFILL_HINT_EMAIL_ADDRESS_();
	static ref<java::lang::String> AUTOFILL_HINT_NAME_();
	static ref<java::lang::String> AUTOFILL_HINT_PASSWORD_();
	static ref<java::lang::String> AUTOFILL_HINT_PHONE_();
	static ref<java::lang::String> AUTOFILL_HINT_POSTAL_ADDRESS_();
	static ref<java::lang::String> AUTOFILL_HINT_POSTAL_CODE_();
	static ref<java::lang::String> AUTOFILL_HINT_USERNAME_();
	static jint AUTOFILL_TYPE_DATE_();
	static jint AUTOFILL_TYPE_LIST_();
	static jint AUTOFILL_TYPE_NONE_();
	static jint AUTOFILL_TYPE_TEXT_();
	static jint AUTOFILL_TYPE_TOGGLE_();
	static jint DRAG_FLAG_GLOBAL_();
	static jint DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION_();
	static jint DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION_();
	static jint DRAG_FLAG_GLOBAL_URI_READ_();
	static jint DRAG_FLAG_GLOBAL_URI_WRITE_();
	static jint DRAG_FLAG_OPAQUE_();
	static jint DRAWING_CACHE_QUALITY_AUTO_();
	static jint DRAWING_CACHE_QUALITY_HIGH_();
	static jint DRAWING_CACHE_QUALITY_LOW_();
	static jint FIND_VIEWS_WITH_CONTENT_DESCRIPTION_();
	static jint FIND_VIEWS_WITH_TEXT_();
	static jint FOCUSABLE_();
	static jint FOCUSABLES_ALL_();
	static jint FOCUSABLES_TOUCH_MODE_();
	static jint FOCUSABLE_AUTO_();
	static jint FOCUS_BACKWARD_();
	static jint FOCUS_DOWN_();
	static jint FOCUS_FORWARD_();
	static jint FOCUS_LEFT_();
	static jint FOCUS_RIGHT_();
	static jint FOCUS_UP_();
	static jint GONE_();
	static jint HAPTIC_FEEDBACK_ENABLED_();
	static jint IMPORTANT_FOR_ACCESSIBILITY_AUTO_();
	static jint IMPORTANT_FOR_ACCESSIBILITY_NO_();
	static jint IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS_();
	static jint IMPORTANT_FOR_ACCESSIBILITY_YES_();
	static jint IMPORTANT_FOR_AUTOFILL_AUTO_();
	static jint IMPORTANT_FOR_AUTOFILL_NO_();
	static jint IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS_();
	static jint IMPORTANT_FOR_AUTOFILL_YES_();
	static jint IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS_();
	static jint INVISIBLE_();
	static jint KEEP_SCREEN_ON_();
	static jint LAYER_TYPE_HARDWARE_();
	static jint LAYER_TYPE_NONE_();
	static jint LAYER_TYPE_SOFTWARE_();
	static jint LAYOUT_DIRECTION_INHERIT_();
	static jint LAYOUT_DIRECTION_LOCALE_();
	static jint LAYOUT_DIRECTION_LTR_();
	static jint LAYOUT_DIRECTION_RTL_();
	static jint MEASURED_HEIGHT_STATE_SHIFT_();
	static jint MEASURED_SIZE_MASK_();
	static jint MEASURED_STATE_MASK_();
	static jint MEASURED_STATE_TOO_SMALL_();
	static jint NOT_FOCUSABLE_();
	static jint NO_ID_();
	static jint OVER_SCROLL_ALWAYS_();
	static jint OVER_SCROLL_IF_CONTENT_SCROLLS_();
	static jint OVER_SCROLL_NEVER_();
	static ref<android::util::Property> ROTATION_();
	static ref<android::util::Property> ROTATION_X_();
	static ref<android::util::Property> ROTATION_Y_();
	static ref<android::util::Property> SCALE_X_();
	static ref<android::util::Property> SCALE_Y_();
	static jint SCREEN_STATE_OFF_();
	static jint SCREEN_STATE_ON_();
	static jint SCROLLBARS_INSIDE_INSET_();
	static jint SCROLLBARS_INSIDE_OVERLAY_();
	static jint SCROLLBARS_OUTSIDE_INSET_();
	static jint SCROLLBARS_OUTSIDE_OVERLAY_();
	static jint SCROLLBAR_POSITION_DEFAULT_();
	static jint SCROLLBAR_POSITION_LEFT_();
	static jint SCROLLBAR_POSITION_RIGHT_();
	static jint SCROLL_AXIS_HORIZONTAL_();
	static jint SCROLL_AXIS_NONE_();
	static jint SCROLL_AXIS_VERTICAL_();
	static jint SCROLL_INDICATOR_BOTTOM_();
	static jint SCROLL_INDICATOR_END_();
	static jint SCROLL_INDICATOR_LEFT_();
	static jint SCROLL_INDICATOR_RIGHT_();
	static jint SCROLL_INDICATOR_START_();
	static jint SCROLL_INDICATOR_TOP_();
	static jint SOUND_EFFECTS_ENABLED_();
	static jint STATUS_BAR_HIDDEN_();
	static jint STATUS_BAR_VISIBLE_();
	static jint SYSTEM_UI_FLAG_FULLSCREEN_();
	static jint SYSTEM_UI_FLAG_HIDE_NAVIGATION_();
	static jint SYSTEM_UI_FLAG_IMMERSIVE_();
	static jint SYSTEM_UI_FLAG_IMMERSIVE_STICKY_();
	static jint SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN_();
	static jint SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION_();
	static jint SYSTEM_UI_FLAG_LAYOUT_STABLE_();
	static jint SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR_();
	static jint SYSTEM_UI_FLAG_LIGHT_STATUS_BAR_();
	static jint SYSTEM_UI_FLAG_LOW_PROFILE_();
	static jint SYSTEM_UI_FLAG_VISIBLE_();
	static jint SYSTEM_UI_LAYOUT_FLAGS_();
	static jint TEXT_ALIGNMENT_CENTER_();
	static jint TEXT_ALIGNMENT_GRAVITY_();
	static jint TEXT_ALIGNMENT_INHERIT_();
	static jint TEXT_ALIGNMENT_TEXT_END_();
	static jint TEXT_ALIGNMENT_TEXT_START_();
	static jint TEXT_ALIGNMENT_VIEW_END_();
	static jint TEXT_ALIGNMENT_VIEW_START_();
	static jint TEXT_DIRECTION_ANY_RTL_();
	static jint TEXT_DIRECTION_FIRST_STRONG_();
	static jint TEXT_DIRECTION_FIRST_STRONG_LTR_();
	static jint TEXT_DIRECTION_FIRST_STRONG_RTL_();
	static jint TEXT_DIRECTION_INHERIT_();
	static jint TEXT_DIRECTION_LOCALE_();
	static jint TEXT_DIRECTION_LTR_();
	static jint TEXT_DIRECTION_RTL_();
	static ref<android::util::Property> TRANSLATION_X_();
	static ref<android::util::Property> TRANSLATION_Y_();
	static ref<android::util::Property> TRANSLATION_Z_();
	static jint VISIBLE_();
	static ref<android::util::Property> X_();
	static ref<android::util::Property> Y_();
	static ref<android::util::Property> Z_();

	static ref<View> new_object(ref<android::content::Context> context);
	static ref<View> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<View> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<View> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	ref<java::lang::String> toString();
	jint getVerticalFadingEdgeLength();
	void setFadingEdgeLength(jint length);
	jint getHorizontalFadingEdgeLength();
	jint getVerticalScrollbarWidth();
	void setVerticalScrollbarPosition(jint position);
	jint getVerticalScrollbarPosition();
	void setScrollIndicators(jint indicators);
	void setScrollIndicators(jint indicators, jint mask);
	jint getScrollIndicators();
	void setOnScrollChangeListener(ref<android::view::View_OnScrollChangeListener> l);
	void setOnFocusChangeListener(ref<android::view::View_OnFocusChangeListener> l);
	void addOnLayoutChangeListener(ref<android::view::View_OnLayoutChangeListener> listener);
	void removeOnLayoutChangeListener(ref<android::view::View_OnLayoutChangeListener> listener);
	void addOnAttachStateChangeListener(ref<android::view::View_OnAttachStateChangeListener> listener);
	void removeOnAttachStateChangeListener(ref<android::view::View_OnAttachStateChangeListener> listener);
	ref<android::view::View_OnFocusChangeListener> getOnFocusChangeListener();
	void setOnClickListener(ref<android::view::View_OnClickListener> l);
	jboolean hasOnClickListeners();
	void setOnLongClickListener(ref<android::view::View_OnLongClickListener> l);
	void setOnContextClickListener(ref<android::view::View_OnContextClickListener> l);
	void setOnCreateContextMenuListener(ref<android::view::View_OnCreateContextMenuListener> l);
	jboolean performClick();
	jboolean callOnClick();
	jboolean performLongClick();
	jboolean performLongClick(jfloat x, jfloat y);
	jboolean performContextClick(jfloat x, jfloat y);
	jboolean performContextClick();
	jboolean showContextMenu();
	jboolean showContextMenu(jfloat x, jfloat y);
	ref<android::view::ActionMode> startActionMode(ref<android::view::ActionMode_Callback> callback);
	ref<android::view::ActionMode> startActionMode(ref<android::view::ActionMode_Callback> callback, jint type);
	void setOnKeyListener(ref<android::view::View_OnKeyListener> l);
	void setOnTouchListener(ref<android::view::View_OnTouchListener> l);
	void setOnGenericMotionListener(ref<android::view::View_OnGenericMotionListener> l);
	void setOnHoverListener(ref<android::view::View_OnHoverListener> l);
	void setOnDragListener(ref<android::view::View_OnDragListener> l);
	void setRevealOnFocusHint(jboolean revealOnFocus);
	jboolean getRevealOnFocusHint();
	jboolean requestRectangleOnScreen(ref<android::graphics::Rect> rectangle);
	jboolean requestRectangleOnScreen(ref<android::graphics::Rect> rectangle, jboolean immediate);
	void clearFocus();
	jboolean hasFocus();
	jboolean hasFocusable();
	jboolean hasExplicitFocusable();
	void setAccessibilityPaneTitle(ref<java::lang::CharSequence> accessibilityPaneTitle);
	ref<java::lang::CharSequence> getAccessibilityPaneTitle();
	void sendAccessibilityEvent(jint eventType);
	void announceForAccessibility(ref<java::lang::CharSequence> text);
	void sendAccessibilityEventUnchecked(ref<android::view::accessibility::AccessibilityEvent> event);
	jboolean dispatchPopulateAccessibilityEvent(ref<android::view::accessibility::AccessibilityEvent> event);
	void onPopulateAccessibilityEvent(ref<android::view::accessibility::AccessibilityEvent> event);
	void onInitializeAccessibilityEvent(ref<android::view::accessibility::AccessibilityEvent> event);
	ref<android::view::accessibility::AccessibilityNodeInfo> createAccessibilityNodeInfo();
	void onInitializeAccessibilityNodeInfo(ref<android::view::accessibility::AccessibilityNodeInfo> info);
	ref<java::lang::CharSequence> getAccessibilityClassName();
	void onProvideStructure(ref<android::view::ViewStructure> structure);
	void onProvideAutofillStructure(ref<android::view::ViewStructure> structure, jint flags);
	void onProvideVirtualStructure(ref<android::view::ViewStructure> structure);
	void onProvideAutofillVirtualStructure(ref<android::view::ViewStructure> structure, jint flags);
	void autofill(ref<android::view::autofill::AutofillValue> value);
	void autofill(ref<android::util::SparseArray> values);
	ref<android::view::autofill::AutofillId> getAutofillId();
	void setAutofillId(ref<android::view::autofill::AutofillId> id);
	jint getAutofillType();
	ref<link::java::array<java::lang::String>> getAutofillHints();
	ref<android::view::autofill::AutofillValue> getAutofillValue();
	jint getImportantForAutofill();
	void setImportantForAutofill(jint mode);
	jboolean isImportantForAutofill();
	void dispatchProvideStructure(ref<android::view::ViewStructure> structure);
	void dispatchProvideAutofillStructure(ref<android::view::ViewStructure> structure, jint flags);
	void addExtraDataToAccessibilityNodeInfo(ref<android::view::accessibility::AccessibilityNodeInfo> info, ref<java::lang::String> extraDataKey, ref<android::os::Bundle> arguments);
	jboolean isVisibleToUserForAutofill(jint virtualId);
	void setAccessibilityDelegate(ref<android::view::View_AccessibilityDelegate> delegate);
	ref<android::view::accessibility::AccessibilityNodeProvider> getAccessibilityNodeProvider();
	ref<java::lang::CharSequence> getContentDescription();
	void setContentDescription(ref<java::lang::CharSequence> contentDescription);
	void setAccessibilityTraversalBefore(jint beforeId);
	jint getAccessibilityTraversalBefore();
	void setAccessibilityTraversalAfter(jint afterId);
	jint getAccessibilityTraversalAfter();
	jint getLabelFor();
	void setLabelFor(jint id);
	jboolean isFocused();
	ref<android::view::View> findFocus();
	jboolean isScrollContainer();
	void setScrollContainer(jboolean isScrollContainer);
	jint getDrawingCacheQuality();
	void setDrawingCacheQuality(jint quality);
	jboolean getKeepScreenOn();
	void setKeepScreenOn(jboolean keepScreenOn);
	jint getNextFocusLeftId();
	void setNextFocusLeftId(jint nextFocusLeftId);
	jint getNextFocusRightId();
	void setNextFocusRightId(jint nextFocusRightId);
	jint getNextFocusUpId();
	void setNextFocusUpId(jint nextFocusUpId);
	jint getNextFocusDownId();
	void setNextFocusDownId(jint nextFocusDownId);
	jint getNextFocusForwardId();
	void setNextFocusForwardId(jint nextFocusForwardId);
	jint getNextClusterForwardId();
	void setNextClusterForwardId(jint nextClusterForwardId);
	jboolean isShown();
	ref<android::view::WindowInsets> onApplyWindowInsets(ref<android::view::WindowInsets> insets);
	void setOnApplyWindowInsetsListener(ref<android::view::View_OnApplyWindowInsetsListener> listener);
	ref<android::view::WindowInsets> dispatchApplyWindowInsets(ref<android::view::WindowInsets> insets);
	ref<android::view::WindowInsets> getRootWindowInsets();
	ref<android::view::WindowInsets> computeSystemWindowInsets(ref<android::view::WindowInsets> in, ref<android::graphics::Rect> outLocalInsets);
	void setFitsSystemWindows(jboolean fitSystemWindows);
	jboolean getFitsSystemWindows();
	void requestFitSystemWindows();
	void requestApplyInsets();
	jint getVisibility();
	void setVisibility(jint visibility);
	jboolean isEnabled();
	void setEnabled(jboolean enabled);
	void setFocusable(jboolean focusable);
	void setFocusable(jint focusable);
	void setFocusableInTouchMode(jboolean focusableInTouchMode);
	void setAutofillHints(ref<link::java::array<java::lang::String>> autofillHints);
	void setSoundEffectsEnabled(jboolean soundEffectsEnabled);
	jboolean isSoundEffectsEnabled();
	void setHapticFeedbackEnabled(jboolean hapticFeedbackEnabled);
	jboolean isHapticFeedbackEnabled();
	void setLayoutDirection(jint layoutDirection);
	jint getLayoutDirection();
	jboolean hasTransientState();
	void setHasTransientState(jboolean hasTransientState);
	jboolean isAttachedToWindow();
	jboolean isLaidOut();
	void setWillNotDraw(jboolean willNotDraw);
	jboolean willNotDraw();
	void setWillNotCacheDrawing(jboolean willNotCacheDrawing);
	jboolean willNotCacheDrawing();
	jboolean isClickable();
	void setClickable(jboolean clickable);
	jboolean isLongClickable();
	void setLongClickable(jboolean longClickable);
	jboolean isContextClickable();
	void setContextClickable(jboolean contextClickable);
	void setPressed(jboolean pressed);
	jboolean isPressed();
	jboolean isSaveEnabled();
	void setSaveEnabled(jboolean enabled);
	jboolean getFilterTouchesWhenObscured();
	void setFilterTouchesWhenObscured(jboolean enabled);
	jboolean isSaveFromParentEnabled();
	void setSaveFromParentEnabled(jboolean enabled);
	jboolean isFocusable();
	jint getFocusable();
	jboolean isFocusableInTouchMode();
	jboolean isScreenReaderFocusable();
	void setScreenReaderFocusable(jboolean screenReaderFocusable);
	jboolean isAccessibilityHeading();
	void setAccessibilityHeading(jboolean isHeading);
	ref<android::view::View> focusSearch(jint direction);
	jboolean isKeyboardNavigationCluster();
	void setKeyboardNavigationCluster(jboolean isCluster);
	jboolean isFocusedByDefault();
	void setFocusedByDefault(jboolean isFocusedByDefault);
	ref<android::view::View> keyboardNavigationClusterSearch(ref<android::view::View> currentCluster, jint direction);
	jboolean dispatchUnhandledMove(ref<android::view::View> focused, jint direction);
	void setDefaultFocusHighlightEnabled(jboolean defaultFocusHighlightEnabled);
	jboolean getDefaultFocusHighlightEnabled();
	ref<java::util::ArrayList> getFocusables(jint direction);
	void addFocusables(ref<java::util::ArrayList> views, jint direction);
	void addFocusables(ref<java::util::ArrayList> views, jint direction, jint focusableMode);
	void addKeyboardNavigationClusters(ref<java::util::Collection> views, jint direction);
	void findViewsWithText(ref<java::util::ArrayList> outViews, ref<java::lang::CharSequence> searched, jint flags);
	ref<java::util::ArrayList> getTouchables();
	void addTouchables(ref<java::util::ArrayList> views);
	jboolean isAccessibilityFocused();
	jboolean requestFocus();
	jboolean restoreDefaultFocus();
	jboolean requestFocus(jint direction);
	jboolean requestFocus(jint direction, ref<android::graphics::Rect> previouslyFocusedRect);
	jboolean requestFocusFromTouch();
	jint getImportantForAccessibility();
	void setAccessibilityLiveRegion(jint mode);
	jint getAccessibilityLiveRegion();
	void setImportantForAccessibility(jint mode);
	jboolean isImportantForAccessibility();
	ref<android::view::ViewParent> getParentForAccessibility();
	void addChildrenForAccessibility(ref<java::util::ArrayList> outChildren);
	jboolean dispatchNestedPrePerformAccessibilityAction(jint action, ref<android::os::Bundle> arguments);
	jboolean performAccessibilityAction(jint action, ref<android::os::Bundle> arguments);
	jboolean isTemporarilyDetached();
	void dispatchStartTemporaryDetach();
	void onStartTemporaryDetach();
	void dispatchFinishTemporaryDetach();
	void onFinishTemporaryDetach();
	ref<android::view::KeyEvent_DispatcherState> getKeyDispatcherState();
	jboolean dispatchKeyEventPreIme(ref<android::view::KeyEvent> event);
	jboolean dispatchKeyEvent(ref<android::view::KeyEvent> event);
	jboolean dispatchKeyShortcutEvent(ref<android::view::KeyEvent> event);
	jboolean dispatchTouchEvent(ref<android::view::MotionEvent> event);
	jboolean onFilterTouchEventForSecurity(ref<android::view::MotionEvent> event);
	jboolean dispatchTrackballEvent(ref<android::view::MotionEvent> event);
	jboolean dispatchCapturedPointerEvent(ref<android::view::MotionEvent> event);
	jboolean dispatchGenericMotionEvent(ref<android::view::MotionEvent> event);
	void dispatchWindowFocusChanged(jboolean hasFocus);
	void onWindowFocusChanged(jboolean hasWindowFocus);
	jboolean hasWindowFocus();
	void dispatchDisplayHint(jint hint);
	void dispatchWindowVisibilityChanged(jint visibility);
	void onVisibilityAggregated(jboolean isVisible);
	jint getWindowVisibility();
	void getWindowVisibleDisplayFrame(ref<android::graphics::Rect> outRect);
	void dispatchConfigurationChanged(ref<android::content::res::Configuration> newConfig);
	jboolean isInTouchMode();
	ref<android::content::Context> getContext();
	jboolean onKeyPreIme(jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onKeyDown(jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onKeyLongPress(jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onKeyUp(jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onKeyMultiple(jint keyCode, jint repeatCount, ref<android::view::KeyEvent> event);
	jboolean onKeyShortcut(jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onCheckIsTextEditor();
	ref<android::view::inputmethod::InputConnection> onCreateInputConnection(ref<android::view::inputmethod::EditorInfo> outAttrs);
	jboolean checkInputConnectionProxy(ref<android::view::View> view);
	void createContextMenu(ref<android::view::ContextMenu> menu);
	jboolean onTrackballEvent(ref<android::view::MotionEvent> event);
	jboolean onGenericMotionEvent(ref<android::view::MotionEvent> event);
	jboolean onHoverEvent(ref<android::view::MotionEvent> event);
	jboolean isHovered();
	void setHovered(jboolean hovered);
	void onHoverChanged(jboolean hovered);
	jboolean onTouchEvent(ref<android::view::MotionEvent> event);
	void cancelLongPress();
	void setTouchDelegate(ref<android::view::TouchDelegate> delegate);
	ref<android::view::TouchDelegate> getTouchDelegate();
	void requestUnbufferedDispatch(ref<android::view::MotionEvent> event);
	void bringToFront();
	ref<android::view::ViewParent> getParent();
	void setScrollX(jint value);
	void setScrollY(jint value);
	jint getScrollX();
	jint getScrollY();
	jint getWidth();
	jint getHeight();
	void getDrawingRect(ref<android::graphics::Rect> outRect);
	jint getMeasuredWidth();
	jint getMeasuredWidthAndState();
	jint getMeasuredHeight();
	jint getMeasuredHeightAndState();
	jint getMeasuredState();
	ref<android::graphics::Matrix> getMatrix();
	jfloat getCameraDistance();
	void setCameraDistance(jfloat distance);
	jfloat getRotation();
	void setRotation(jfloat rotation);
	jfloat getRotationY();
	void setRotationY(jfloat rotationY);
	jfloat getRotationX();
	void setRotationX(jfloat rotationX);
	jfloat getScaleX();
	void setScaleX(jfloat scaleX);
	jfloat getScaleY();
	void setScaleY(jfloat scaleY);
	jfloat getPivotX();
	void setPivotX(jfloat pivotX);
	jfloat getPivotY();
	void setPivotY(jfloat pivotY);
	jboolean isPivotSet();
	void resetPivot();
	jfloat getAlpha();
	void forceHasOverlappingRendering(jboolean hasOverlappingRendering);
	jboolean getHasOverlappingRendering();
	jboolean hasOverlappingRendering();
	void setAlpha(jfloat alpha);
	jint getTop();
	void setTop(jint top);
	jint getBottom();
	jboolean isDirty();
	void setBottom(jint bottom);
	jint getLeft();
	void setLeft(jint left);
	jint getRight();
	void setRight(jint right);
	jfloat getX();
	void setX(jfloat x);
	jfloat getY();
	void setY(jfloat y);
	jfloat getZ();
	void setZ(jfloat z);
	jfloat getElevation();
	void setElevation(jfloat elevation);
	jfloat getTranslationX();
	void setTranslationX(jfloat translationX);
	jfloat getTranslationY();
	void setTranslationY(jfloat translationY);
	jfloat getTranslationZ();
	void setTranslationZ(jfloat translationZ);
	ref<android::animation::StateListAnimator> getStateListAnimator();
	void setStateListAnimator(ref<android::animation::StateListAnimator> stateListAnimator);
	jboolean getClipToOutline();
	void setClipToOutline(jboolean clipToOutline);
	void setOutlineProvider(ref<android::view::ViewOutlineProvider> provider);
	ref<android::view::ViewOutlineProvider> getOutlineProvider();
	void invalidateOutline();
	void setOutlineSpotShadowColor(jint color);
	jint getOutlineSpotShadowColor();
	void setOutlineAmbientShadowColor(jint color);
	jint getOutlineAmbientShadowColor();
	void getHitRect(ref<android::graphics::Rect> outRect);
	void getFocusedRect(ref<android::graphics::Rect> r);
	jboolean getGlobalVisibleRect(ref<android::graphics::Rect> r, ref<android::graphics::Point> globalOffset);
	jboolean getGlobalVisibleRect(ref<android::graphics::Rect> r);
	jboolean getLocalVisibleRect(ref<android::graphics::Rect> r);
	void offsetTopAndBottom(jint offset);
	void offsetLeftAndRight(jint offset);
	ref<android::view::ViewGroup_LayoutParams> getLayoutParams();
	void setLayoutParams(ref<android::view::ViewGroup_LayoutParams> params);
	void scrollTo(jint x, jint y);
	void scrollBy(jint x, jint y);
	void invalidate(ref<android::graphics::Rect> dirty);
	void invalidate(jint l, jint t, jint r, jint b);
	void invalidate();
	jboolean isOpaque();
	ref<android::os::Handler> getHandler();
	jboolean post(ref<java::lang::Runnable> action);
	jboolean postDelayed(ref<java::lang::Runnable> action, jlong delayMillis);
	void postOnAnimation(ref<java::lang::Runnable> action);
	void postOnAnimationDelayed(ref<java::lang::Runnable> action, jlong delayMillis);
	jboolean removeCallbacks(ref<java::lang::Runnable> action);
	void postInvalidate();
	void postInvalidate(jint left, jint top, jint right, jint bottom);
	void postInvalidateDelayed(jlong delayMilliseconds);
	void postInvalidateDelayed(jlong delayMilliseconds, jint p2, jint left, jint top, jint right);
	void postInvalidateOnAnimation();
	void postInvalidateOnAnimation(jint left, jint top, jint right, jint bottom);
	void computeScroll();
	jboolean isHorizontalFadingEdgeEnabled();
	void setHorizontalFadingEdgeEnabled(jboolean horizontalFadingEdgeEnabled);
	jboolean isVerticalFadingEdgeEnabled();
	void setVerticalFadingEdgeEnabled(jboolean verticalFadingEdgeEnabled);
	jboolean isHorizontalScrollBarEnabled();
	void setHorizontalScrollBarEnabled(jboolean horizontalScrollBarEnabled);
	jboolean isVerticalScrollBarEnabled();
	void setVerticalScrollBarEnabled(jboolean verticalScrollBarEnabled);
	void setScrollbarFadingEnabled(jboolean fadeScrollbars);
	jboolean isScrollbarFadingEnabled();
	jint getScrollBarDefaultDelayBeforeFade();
	void setScrollBarDefaultDelayBeforeFade(jint scrollBarDefaultDelayBeforeFade);
	jint getScrollBarFadeDuration();
	void setScrollBarFadeDuration(jint scrollBarFadeDuration);
	jint getScrollBarSize();
	void setScrollBarSize(jint scrollBarSize);
	void setScrollBarStyle(jint style);
	jint getScrollBarStyle();
	jboolean canScrollHorizontally(jint direction);
	jboolean canScrollVertically(jint direction);
	void onScreenStateChanged(jint screenState);
	void onRtlPropertiesChanged(jint layoutDirection);
	jboolean canResolveLayoutDirection();
	jboolean isLayoutDirectionResolved();
	ref<android::os::IBinder> getWindowToken();
	ref<android::view::WindowId> getWindowId();
	ref<android::os::IBinder> getApplicationWindowToken();
	ref<android::view::Display> getDisplay();
	void cancelPendingInputEvents();
	void onCancelPendingInputEvents();
	void saveHierarchyState(ref<android::util::SparseArray> container);
	void restoreHierarchyState(ref<android::util::SparseArray> container);
	jlong getDrawingTime();
	void setDuplicateParentStateEnabled(jboolean enabled);
	jboolean isDuplicateParentStateEnabled();
	void setLayerType(jint layerType, ref<android::graphics::Paint> paint);
	void setLayerPaint(ref<android::graphics::Paint> paint);
	jint getLayerType();
	void buildLayer();
	void setDrawingCacheEnabled(jboolean enabled);
	jboolean isDrawingCacheEnabled();
	ref<android::graphics::Bitmap> getDrawingCache();
	ref<android::graphics::Bitmap> getDrawingCache(jboolean autoScale);
	void destroyDrawingCache();
	void setDrawingCacheBackgroundColor(jint color);
	jint getDrawingCacheBackgroundColor();
	void buildDrawingCache();
	void buildDrawingCache(jboolean autoScale);
	jboolean isInEditMode();
	jboolean isHardwareAccelerated();
	void setClipBounds(ref<android::graphics::Rect> clipBounds);
	ref<android::graphics::Rect> getClipBounds();
	jboolean getClipBounds(ref<android::graphics::Rect> outRect);
	void draw(ref<android::graphics::Canvas> canvas);
	ref<android::view::ViewOverlay> getOverlay();
	jint getSolidColor();
	jboolean isLayoutRequested();
	void layout(jint l, jint t, jint r, jint b);
	ref<android::content::res::Resources> getResources();
	void invalidateDrawable(ref<android::graphics::drawable::Drawable> drawable);
	void scheduleDrawable(ref<android::graphics::drawable::Drawable> who, ref<java::lang::Runnable> what, jlong when);
	void unscheduleDrawable(ref<android::graphics::drawable::Drawable> who, ref<java::lang::Runnable> what);
	void unscheduleDrawable(ref<android::graphics::drawable::Drawable> who);
	void drawableHotspotChanged(jfloat x, jfloat y);
	void dispatchDrawableHotspotChanged(jfloat x, jfloat y);
	void refreshDrawableState();
	ref<link::java::array<jint>> getDrawableState();
	void jumpDrawablesToCurrentState();
	void setBackgroundColor(jint color);
	void setBackgroundResource(jint resid);
	void setBackground(ref<android::graphics::drawable::Drawable> background);
	void setBackgroundDrawable(ref<android::graphics::drawable::Drawable> background);
	ref<android::graphics::drawable::Drawable> getBackground();
	void setBackgroundTintList(ref<android::content::res::ColorStateList> tint);
	ref<android::content::res::ColorStateList> getBackgroundTintList();
	void setBackgroundTintMode(ref<android::graphics::PorterDuff_Mode> tintMode);
	ref<android::graphics::PorterDuff_Mode> getBackgroundTintMode();
	ref<android::graphics::drawable::Drawable> getForeground();
	void setForeground(ref<android::graphics::drawable::Drawable> foreground);
	jint getForegroundGravity();
	void setForegroundGravity(jint gravity);
	void setForegroundTintList(ref<android::content::res::ColorStateList> tint);
	ref<android::content::res::ColorStateList> getForegroundTintList();
	void setForegroundTintMode(ref<android::graphics::PorterDuff_Mode> tintMode);
	ref<android::graphics::PorterDuff_Mode> getForegroundTintMode();
	void onDrawForeground(ref<android::graphics::Canvas> canvas);
	void setPadding(jint left, jint top, jint right, jint bottom);
	void setPaddingRelative(jint start, jint top, jint end, jint bottom);
	jint getPaddingTop();
	jint getPaddingBottom();
	jint getPaddingLeft();
	jint getPaddingStart();
	jint getPaddingRight();
	jint getPaddingEnd();
	jboolean isPaddingRelative();
	void setSelected(jboolean selected);
	jboolean isSelected();
	void setActivated(jboolean activated);
	jboolean isActivated();
	ref<android::view::ViewTreeObserver> getViewTreeObserver();
	ref<android::view::View> getRootView();
	void getLocationOnScreen(ref<link::java::array<jint>> outLocation);
	void getLocationInWindow(ref<link::java::array<jint>> outLocation);
	ref<android::view::View> findViewById(jint id);
	ref<android::view::View> requireViewById(jint id);
	ref<android::view::View> findViewWithTag(ref<java::lang::Object> tag);
	void setId(jint id);
	jint getId();
	ref<java::lang::Object> getTag();
	void setTag(ref<java::lang::Object> tag);
	ref<java::lang::Object> getTag(jint key);
	void setTag(jint key, ref<java::lang::Object> tag);
	jint getBaseline();
	jboolean isInLayout();
	void requestLayout();
	void forceLayout();
	void measure(jint widthMeasureSpec, jint heightMeasureSpec);
	static jint combineMeasuredStates(jint curState, jint newState);
	static jint resolveSize(jint size, jint measureSpec);
	static jint resolveSizeAndState(jint size, jint measureSpec, jint childMeasuredState);
	static jint getDefaultSize(jint size, jint measureSpec);
	jint getMinimumHeight();
	void setMinimumHeight(jint minHeight);
	jint getMinimumWidth();
	void setMinimumWidth(jint minWidth);
	ref<android::view::animation::Animation> getAnimation();
	void startAnimation(ref<android::view::animation::Animation> animation);
	void clearAnimation();
	void setAnimation(ref<android::view::animation::Animation> animation);
	void playSoundEffect(jint soundConstant);
	jboolean performHapticFeedback(jint feedbackConstant);
	jboolean performHapticFeedback(jint feedbackConstant, jint flags);
	void setSystemUiVisibility(jint visibility);
	jint getSystemUiVisibility();
	jint getWindowSystemUiVisibility();
	void onWindowSystemUiVisibilityChanged(jint visible);
	void dispatchWindowSystemUiVisiblityChanged(jint visible);
	void setOnSystemUiVisibilityChangeListener(ref<android::view::View_OnSystemUiVisibilityChangeListener> l);
	void dispatchSystemUiVisibilityChanged(jint visibility);
	jboolean startDrag(ref<android::content::ClipData> data, ref<android::view::View_DragShadowBuilder> shadowBuilder, ref<java::lang::Object> myLocalState, jint flags);
	jboolean startDragAndDrop(ref<android::content::ClipData> data, ref<android::view::View_DragShadowBuilder> shadowBuilder, ref<java::lang::Object> myLocalState, jint flags);
	void cancelDragAndDrop();
	void updateDragShadow(ref<android::view::View_DragShadowBuilder> shadowBuilder);
	jboolean onDragEvent(ref<android::view::DragEvent> event);
	jboolean dispatchDragEvent(ref<android::view::DragEvent> event);
	static ref<android::view::View> inflate(ref<android::content::Context> context, jint resource, ref<android::view::ViewGroup> root);
	jint getOverScrollMode();
	void setOverScrollMode(jint overScrollMode);
	void setNestedScrollingEnabled(jboolean enabled);
	jboolean isNestedScrollingEnabled();
	jboolean startNestedScroll(jint axes);
	void stopNestedScroll();
	jboolean hasNestedScrollingParent();
	jboolean dispatchNestedScroll(jint dxConsumed, jint dyConsumed, jint dxUnconsumed, jint dyUnconsumed, ref<link::java::array<jint>> offsetInWindow);
	jboolean dispatchNestedPreScroll(jint dx, jint dy, ref<link::java::array<jint>> consumed, ref<link::java::array<jint>> offsetInWindow);
	jboolean dispatchNestedFling(jfloat velocityX, jfloat velocityY, jboolean consumed);
	jboolean dispatchNestedPreFling(jfloat velocityX, jfloat velocityY);
	void setTextDirection(jint textDirection);
	jint getTextDirection();
	jboolean canResolveTextDirection();
	jboolean isTextDirectionResolved();
	void setTextAlignment(jint textAlignment);
	jint getTextAlignment();
	jboolean canResolveTextAlignment();
	jboolean isTextAlignmentResolved();
	static jint generateViewId();
	ref<android::view::PointerIcon> onResolvePointerIcon(ref<android::view::MotionEvent> event, jint pointerIndex);
	void setPointerIcon(ref<android::view::PointerIcon> pointerIcon);
	ref<android::view::PointerIcon> getPointerIcon();
	jboolean hasPointerCapture();
	void requestPointerCapture();
	void releasePointerCapture();
	void onPointerCaptureChange(jboolean hasCapture);
	void dispatchPointerCaptureChanged(jboolean hasCapture);
	jboolean onCapturedPointerEvent(ref<android::view::MotionEvent> event);
	void setOnCapturedPointerListener(ref<android::view::View_OnCapturedPointerListener> l);
	ref<android::view::ViewPropertyAnimator> animate();
	void setTransitionName(ref<java::lang::String> transitionName);
	ref<java::lang::String> getTransitionName();
	void setTooltipText(ref<java::lang::CharSequence> tooltipText);
	ref<java::lang::CharSequence> getTooltipText();
	void addOnUnhandledKeyEventListener(ref<android::view::View_OnUnhandledKeyEventListener> listener);
	void removeOnUnhandledKeyEventListener(ref<android::view::View_OnUnhandledKeyEventListener> listener);

protected:

	View(handle_type h) : base_(h) {}

};

} // namespace android::view
} // namespace scapix::java_api

#include <scapix/java_api/android/animation/StateListAnimator.h>
#include <scapix/java_api/android/content/ClipData.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/content/res/Configuration.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Matrix.h>
#include <scapix/java_api/android/graphics/Paint.h>
#include <scapix/java_api/android/graphics/Point.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/util/Property.h>
#include <scapix/java_api/android/util/SparseArray.h>
#include <scapix/java_api/android/view/ActionMode.h>
#include <scapix/java_api/android/view/ActionMode_Callback.h>
#include <scapix/java_api/android/view/ContextMenu.h>
#include <scapix/java_api/android/view/Display.h>
#include <scapix/java_api/android/view/DragEvent.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/KeyEvent_DispatcherState.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/PointerIcon.h>
#include <scapix/java_api/android/view/TouchDelegate.h>
#include <scapix/java_api/android/view/View_AccessibilityDelegate.h>
#include <scapix/java_api/android/view/View_DragShadowBuilder.h>
#include <scapix/java_api/android/view/View_OnApplyWindowInsetsListener.h>
#include <scapix/java_api/android/view/View_OnAttachStateChangeListener.h>
#include <scapix/java_api/android/view/View_OnCapturedPointerListener.h>
#include <scapix/java_api/android/view/View_OnClickListener.h>
#include <scapix/java_api/android/view/View_OnContextClickListener.h>
#include <scapix/java_api/android/view/View_OnCreateContextMenuListener.h>
#include <scapix/java_api/android/view/View_OnDragListener.h>
#include <scapix/java_api/android/view/View_OnFocusChangeListener.h>
#include <scapix/java_api/android/view/View_OnGenericMotionListener.h>
#include <scapix/java_api/android/view/View_OnHoverListener.h>
#include <scapix/java_api/android/view/View_OnKeyListener.h>
#include <scapix/java_api/android/view/View_OnLayoutChangeListener.h>
#include <scapix/java_api/android/view/View_OnLongClickListener.h>
#include <scapix/java_api/android/view/View_OnScrollChangeListener.h>
#include <scapix/java_api/android/view/View_OnSystemUiVisibilityChangeListener.h>
#include <scapix/java_api/android/view/View_OnTouchListener.h>
#include <scapix/java_api/android/view/View_OnUnhandledKeyEventListener.h>
#include <scapix/java_api/android/view/ViewGroup.h>
#include <scapix/java_api/android/view/ViewGroup_LayoutParams.h>
#include <scapix/java_api/android/view/ViewOutlineProvider.h>
#include <scapix/java_api/android/view/ViewOverlay.h>
#include <scapix/java_api/android/view/ViewParent.h>
#include <scapix/java_api/android/view/ViewPropertyAnimator.h>
#include <scapix/java_api/android/view/ViewStructure.h>
#include <scapix/java_api/android/view/ViewTreeObserver.h>
#include <scapix/java_api/android/view/WindowId.h>
#include <scapix/java_api/android/view/WindowInsets.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeProvider.h>
#include <scapix/java_api/android/view/animation/Animation.h>
#include <scapix/java_api/android/view/autofill/AutofillId.h>
#include <scapix/java_api/android/view/autofill/AutofillValue.h>
#include <scapix/java_api/android/view/inputmethod/EditorInfo.h>
#include <scapix/java_api/android/view/inputmethod/InputConnection.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/ArrayList.h>
#include <scapix/java_api/java/util/Collection.h>

namespace scapix::java_api {
namespace android::view {

inline jint View::ACCESSIBILITY_LIVE_REGION_ASSERTIVE_() { return get_static_field<SCAPIX_META_STRING("ACCESSIBILITY_LIVE_REGION_ASSERTIVE"), jint>(); }
inline jint View::ACCESSIBILITY_LIVE_REGION_NONE_() { return get_static_field<SCAPIX_META_STRING("ACCESSIBILITY_LIVE_REGION_NONE"), jint>(); }
inline jint View::ACCESSIBILITY_LIVE_REGION_POLITE_() { return get_static_field<SCAPIX_META_STRING("ACCESSIBILITY_LIVE_REGION_POLITE"), jint>(); }
inline ref<android::util::Property> View::ALPHA_() { return get_static_field<SCAPIX_META_STRING("ALPHA"), ref<android::util::Property>>(); }
inline jint View::AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS"), jint>(); }
inline ref<java::lang::String> View::AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> View::AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> View::AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH"), ref<java::lang::String>>(); }
inline ref<java::lang::String> View::AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR"), ref<java::lang::String>>(); }
inline ref<java::lang::String> View::AUTOFILL_HINT_CREDIT_CARD_NUMBER_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_HINT_CREDIT_CARD_NUMBER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> View::AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> View::AUTOFILL_HINT_EMAIL_ADDRESS_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_HINT_EMAIL_ADDRESS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> View::AUTOFILL_HINT_NAME_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_HINT_NAME"), ref<java::lang::String>>(); }
inline ref<java::lang::String> View::AUTOFILL_HINT_PASSWORD_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_HINT_PASSWORD"), ref<java::lang::String>>(); }
inline ref<java::lang::String> View::AUTOFILL_HINT_PHONE_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_HINT_PHONE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> View::AUTOFILL_HINT_POSTAL_ADDRESS_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_HINT_POSTAL_ADDRESS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> View::AUTOFILL_HINT_POSTAL_CODE_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_HINT_POSTAL_CODE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> View::AUTOFILL_HINT_USERNAME_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_HINT_USERNAME"), ref<java::lang::String>>(); }
inline jint View::AUTOFILL_TYPE_DATE_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_TYPE_DATE"), jint>(); }
inline jint View::AUTOFILL_TYPE_LIST_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_TYPE_LIST"), jint>(); }
inline jint View::AUTOFILL_TYPE_NONE_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_TYPE_NONE"), jint>(); }
inline jint View::AUTOFILL_TYPE_TEXT_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_TYPE_TEXT"), jint>(); }
inline jint View::AUTOFILL_TYPE_TOGGLE_() { return get_static_field<SCAPIX_META_STRING("AUTOFILL_TYPE_TOGGLE"), jint>(); }
inline jint View::DRAG_FLAG_GLOBAL_() { return get_static_field<SCAPIX_META_STRING("DRAG_FLAG_GLOBAL"), jint>(); }
inline jint View::DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION_() { return get_static_field<SCAPIX_META_STRING("DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION"), jint>(); }
inline jint View::DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION_() { return get_static_field<SCAPIX_META_STRING("DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION"), jint>(); }
inline jint View::DRAG_FLAG_GLOBAL_URI_READ_() { return get_static_field<SCAPIX_META_STRING("DRAG_FLAG_GLOBAL_URI_READ"), jint>(); }
inline jint View::DRAG_FLAG_GLOBAL_URI_WRITE_() { return get_static_field<SCAPIX_META_STRING("DRAG_FLAG_GLOBAL_URI_WRITE"), jint>(); }
inline jint View::DRAG_FLAG_OPAQUE_() { return get_static_field<SCAPIX_META_STRING("DRAG_FLAG_OPAQUE"), jint>(); }
inline jint View::DRAWING_CACHE_QUALITY_AUTO_() { return get_static_field<SCAPIX_META_STRING("DRAWING_CACHE_QUALITY_AUTO"), jint>(); }
inline jint View::DRAWING_CACHE_QUALITY_HIGH_() { return get_static_field<SCAPIX_META_STRING("DRAWING_CACHE_QUALITY_HIGH"), jint>(); }
inline jint View::DRAWING_CACHE_QUALITY_LOW_() { return get_static_field<SCAPIX_META_STRING("DRAWING_CACHE_QUALITY_LOW"), jint>(); }
inline jint View::FIND_VIEWS_WITH_CONTENT_DESCRIPTION_() { return get_static_field<SCAPIX_META_STRING("FIND_VIEWS_WITH_CONTENT_DESCRIPTION"), jint>(); }
inline jint View::FIND_VIEWS_WITH_TEXT_() { return get_static_field<SCAPIX_META_STRING("FIND_VIEWS_WITH_TEXT"), jint>(); }
inline jint View::FOCUSABLE_() { return get_static_field<SCAPIX_META_STRING("FOCUSABLE"), jint>(); }
inline jint View::FOCUSABLES_ALL_() { return get_static_field<SCAPIX_META_STRING("FOCUSABLES_ALL"), jint>(); }
inline jint View::FOCUSABLES_TOUCH_MODE_() { return get_static_field<SCAPIX_META_STRING("FOCUSABLES_TOUCH_MODE"), jint>(); }
inline jint View::FOCUSABLE_AUTO_() { return get_static_field<SCAPIX_META_STRING("FOCUSABLE_AUTO"), jint>(); }
inline jint View::FOCUS_BACKWARD_() { return get_static_field<SCAPIX_META_STRING("FOCUS_BACKWARD"), jint>(); }
inline jint View::FOCUS_DOWN_() { return get_static_field<SCAPIX_META_STRING("FOCUS_DOWN"), jint>(); }
inline jint View::FOCUS_FORWARD_() { return get_static_field<SCAPIX_META_STRING("FOCUS_FORWARD"), jint>(); }
inline jint View::FOCUS_LEFT_() { return get_static_field<SCAPIX_META_STRING("FOCUS_LEFT"), jint>(); }
inline jint View::FOCUS_RIGHT_() { return get_static_field<SCAPIX_META_STRING("FOCUS_RIGHT"), jint>(); }
inline jint View::FOCUS_UP_() { return get_static_field<SCAPIX_META_STRING("FOCUS_UP"), jint>(); }
inline jint View::GONE_() { return get_static_field<SCAPIX_META_STRING("GONE"), jint>(); }
inline jint View::HAPTIC_FEEDBACK_ENABLED_() { return get_static_field<SCAPIX_META_STRING("HAPTIC_FEEDBACK_ENABLED"), jint>(); }
inline jint View::IMPORTANT_FOR_ACCESSIBILITY_AUTO_() { return get_static_field<SCAPIX_META_STRING("IMPORTANT_FOR_ACCESSIBILITY_AUTO"), jint>(); }
inline jint View::IMPORTANT_FOR_ACCESSIBILITY_NO_() { return get_static_field<SCAPIX_META_STRING("IMPORTANT_FOR_ACCESSIBILITY_NO"), jint>(); }
inline jint View::IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS_() { return get_static_field<SCAPIX_META_STRING("IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS"), jint>(); }
inline jint View::IMPORTANT_FOR_ACCESSIBILITY_YES_() { return get_static_field<SCAPIX_META_STRING("IMPORTANT_FOR_ACCESSIBILITY_YES"), jint>(); }
inline jint View::IMPORTANT_FOR_AUTOFILL_AUTO_() { return get_static_field<SCAPIX_META_STRING("IMPORTANT_FOR_AUTOFILL_AUTO"), jint>(); }
inline jint View::IMPORTANT_FOR_AUTOFILL_NO_() { return get_static_field<SCAPIX_META_STRING("IMPORTANT_FOR_AUTOFILL_NO"), jint>(); }
inline jint View::IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS_() { return get_static_field<SCAPIX_META_STRING("IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS"), jint>(); }
inline jint View::IMPORTANT_FOR_AUTOFILL_YES_() { return get_static_field<SCAPIX_META_STRING("IMPORTANT_FOR_AUTOFILL_YES"), jint>(); }
inline jint View::IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS_() { return get_static_field<SCAPIX_META_STRING("IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS"), jint>(); }
inline jint View::INVISIBLE_() { return get_static_field<SCAPIX_META_STRING("INVISIBLE"), jint>(); }
inline jint View::KEEP_SCREEN_ON_() { return get_static_field<SCAPIX_META_STRING("KEEP_SCREEN_ON"), jint>(); }
inline jint View::LAYER_TYPE_HARDWARE_() { return get_static_field<SCAPIX_META_STRING("LAYER_TYPE_HARDWARE"), jint>(); }
inline jint View::LAYER_TYPE_NONE_() { return get_static_field<SCAPIX_META_STRING("LAYER_TYPE_NONE"), jint>(); }
inline jint View::LAYER_TYPE_SOFTWARE_() { return get_static_field<SCAPIX_META_STRING("LAYER_TYPE_SOFTWARE"), jint>(); }
inline jint View::LAYOUT_DIRECTION_INHERIT_() { return get_static_field<SCAPIX_META_STRING("LAYOUT_DIRECTION_INHERIT"), jint>(); }
inline jint View::LAYOUT_DIRECTION_LOCALE_() { return get_static_field<SCAPIX_META_STRING("LAYOUT_DIRECTION_LOCALE"), jint>(); }
inline jint View::LAYOUT_DIRECTION_LTR_() { return get_static_field<SCAPIX_META_STRING("LAYOUT_DIRECTION_LTR"), jint>(); }
inline jint View::LAYOUT_DIRECTION_RTL_() { return get_static_field<SCAPIX_META_STRING("LAYOUT_DIRECTION_RTL"), jint>(); }
inline jint View::MEASURED_HEIGHT_STATE_SHIFT_() { return get_static_field<SCAPIX_META_STRING("MEASURED_HEIGHT_STATE_SHIFT"), jint>(); }
inline jint View::MEASURED_SIZE_MASK_() { return get_static_field<SCAPIX_META_STRING("MEASURED_SIZE_MASK"), jint>(); }
inline jint View::MEASURED_STATE_MASK_() { return get_static_field<SCAPIX_META_STRING("MEASURED_STATE_MASK"), jint>(); }
inline jint View::MEASURED_STATE_TOO_SMALL_() { return get_static_field<SCAPIX_META_STRING("MEASURED_STATE_TOO_SMALL"), jint>(); }
inline jint View::NOT_FOCUSABLE_() { return get_static_field<SCAPIX_META_STRING("NOT_FOCUSABLE"), jint>(); }
inline jint View::NO_ID_() { return get_static_field<SCAPIX_META_STRING("NO_ID"), jint>(); }
inline jint View::OVER_SCROLL_ALWAYS_() { return get_static_field<SCAPIX_META_STRING("OVER_SCROLL_ALWAYS"), jint>(); }
inline jint View::OVER_SCROLL_IF_CONTENT_SCROLLS_() { return get_static_field<SCAPIX_META_STRING("OVER_SCROLL_IF_CONTENT_SCROLLS"), jint>(); }
inline jint View::OVER_SCROLL_NEVER_() { return get_static_field<SCAPIX_META_STRING("OVER_SCROLL_NEVER"), jint>(); }
inline ref<android::util::Property> View::ROTATION_() { return get_static_field<SCAPIX_META_STRING("ROTATION"), ref<android::util::Property>>(); }
inline ref<android::util::Property> View::ROTATION_X_() { return get_static_field<SCAPIX_META_STRING("ROTATION_X"), ref<android::util::Property>>(); }
inline ref<android::util::Property> View::ROTATION_Y_() { return get_static_field<SCAPIX_META_STRING("ROTATION_Y"), ref<android::util::Property>>(); }
inline ref<android::util::Property> View::SCALE_X_() { return get_static_field<SCAPIX_META_STRING("SCALE_X"), ref<android::util::Property>>(); }
inline ref<android::util::Property> View::SCALE_Y_() { return get_static_field<SCAPIX_META_STRING("SCALE_Y"), ref<android::util::Property>>(); }
inline jint View::SCREEN_STATE_OFF_() { return get_static_field<SCAPIX_META_STRING("SCREEN_STATE_OFF"), jint>(); }
inline jint View::SCREEN_STATE_ON_() { return get_static_field<SCAPIX_META_STRING("SCREEN_STATE_ON"), jint>(); }
inline jint View::SCROLLBARS_INSIDE_INSET_() { return get_static_field<SCAPIX_META_STRING("SCROLLBARS_INSIDE_INSET"), jint>(); }
inline jint View::SCROLLBARS_INSIDE_OVERLAY_() { return get_static_field<SCAPIX_META_STRING("SCROLLBARS_INSIDE_OVERLAY"), jint>(); }
inline jint View::SCROLLBARS_OUTSIDE_INSET_() { return get_static_field<SCAPIX_META_STRING("SCROLLBARS_OUTSIDE_INSET"), jint>(); }
inline jint View::SCROLLBARS_OUTSIDE_OVERLAY_() { return get_static_field<SCAPIX_META_STRING("SCROLLBARS_OUTSIDE_OVERLAY"), jint>(); }
inline jint View::SCROLLBAR_POSITION_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("SCROLLBAR_POSITION_DEFAULT"), jint>(); }
inline jint View::SCROLLBAR_POSITION_LEFT_() { return get_static_field<SCAPIX_META_STRING("SCROLLBAR_POSITION_LEFT"), jint>(); }
inline jint View::SCROLLBAR_POSITION_RIGHT_() { return get_static_field<SCAPIX_META_STRING("SCROLLBAR_POSITION_RIGHT"), jint>(); }
inline jint View::SCROLL_AXIS_HORIZONTAL_() { return get_static_field<SCAPIX_META_STRING("SCROLL_AXIS_HORIZONTAL"), jint>(); }
inline jint View::SCROLL_AXIS_NONE_() { return get_static_field<SCAPIX_META_STRING("SCROLL_AXIS_NONE"), jint>(); }
inline jint View::SCROLL_AXIS_VERTICAL_() { return get_static_field<SCAPIX_META_STRING("SCROLL_AXIS_VERTICAL"), jint>(); }
inline jint View::SCROLL_INDICATOR_BOTTOM_() { return get_static_field<SCAPIX_META_STRING("SCROLL_INDICATOR_BOTTOM"), jint>(); }
inline jint View::SCROLL_INDICATOR_END_() { return get_static_field<SCAPIX_META_STRING("SCROLL_INDICATOR_END"), jint>(); }
inline jint View::SCROLL_INDICATOR_LEFT_() { return get_static_field<SCAPIX_META_STRING("SCROLL_INDICATOR_LEFT"), jint>(); }
inline jint View::SCROLL_INDICATOR_RIGHT_() { return get_static_field<SCAPIX_META_STRING("SCROLL_INDICATOR_RIGHT"), jint>(); }
inline jint View::SCROLL_INDICATOR_START_() { return get_static_field<SCAPIX_META_STRING("SCROLL_INDICATOR_START"), jint>(); }
inline jint View::SCROLL_INDICATOR_TOP_() { return get_static_field<SCAPIX_META_STRING("SCROLL_INDICATOR_TOP"), jint>(); }
inline jint View::SOUND_EFFECTS_ENABLED_() { return get_static_field<SCAPIX_META_STRING("SOUND_EFFECTS_ENABLED"), jint>(); }
inline jint View::STATUS_BAR_HIDDEN_() { return get_static_field<SCAPIX_META_STRING("STATUS_BAR_HIDDEN"), jint>(); }
inline jint View::STATUS_BAR_VISIBLE_() { return get_static_field<SCAPIX_META_STRING("STATUS_BAR_VISIBLE"), jint>(); }
inline jint View::SYSTEM_UI_FLAG_FULLSCREEN_() { return get_static_field<SCAPIX_META_STRING("SYSTEM_UI_FLAG_FULLSCREEN"), jint>(); }
inline jint View::SYSTEM_UI_FLAG_HIDE_NAVIGATION_() { return get_static_field<SCAPIX_META_STRING("SYSTEM_UI_FLAG_HIDE_NAVIGATION"), jint>(); }
inline jint View::SYSTEM_UI_FLAG_IMMERSIVE_() { return get_static_field<SCAPIX_META_STRING("SYSTEM_UI_FLAG_IMMERSIVE"), jint>(); }
inline jint View::SYSTEM_UI_FLAG_IMMERSIVE_STICKY_() { return get_static_field<SCAPIX_META_STRING("SYSTEM_UI_FLAG_IMMERSIVE_STICKY"), jint>(); }
inline jint View::SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN_() { return get_static_field<SCAPIX_META_STRING("SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN"), jint>(); }
inline jint View::SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION_() { return get_static_field<SCAPIX_META_STRING("SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION"), jint>(); }
inline jint View::SYSTEM_UI_FLAG_LAYOUT_STABLE_() { return get_static_field<SCAPIX_META_STRING("SYSTEM_UI_FLAG_LAYOUT_STABLE"), jint>(); }
inline jint View::SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR_() { return get_static_field<SCAPIX_META_STRING("SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR"), jint>(); }
inline jint View::SYSTEM_UI_FLAG_LIGHT_STATUS_BAR_() { return get_static_field<SCAPIX_META_STRING("SYSTEM_UI_FLAG_LIGHT_STATUS_BAR"), jint>(); }
inline jint View::SYSTEM_UI_FLAG_LOW_PROFILE_() { return get_static_field<SCAPIX_META_STRING("SYSTEM_UI_FLAG_LOW_PROFILE"), jint>(); }
inline jint View::SYSTEM_UI_FLAG_VISIBLE_() { return get_static_field<SCAPIX_META_STRING("SYSTEM_UI_FLAG_VISIBLE"), jint>(); }
inline jint View::SYSTEM_UI_LAYOUT_FLAGS_() { return get_static_field<SCAPIX_META_STRING("SYSTEM_UI_LAYOUT_FLAGS"), jint>(); }
inline jint View::TEXT_ALIGNMENT_CENTER_() { return get_static_field<SCAPIX_META_STRING("TEXT_ALIGNMENT_CENTER"), jint>(); }
inline jint View::TEXT_ALIGNMENT_GRAVITY_() { return get_static_field<SCAPIX_META_STRING("TEXT_ALIGNMENT_GRAVITY"), jint>(); }
inline jint View::TEXT_ALIGNMENT_INHERIT_() { return get_static_field<SCAPIX_META_STRING("TEXT_ALIGNMENT_INHERIT"), jint>(); }
inline jint View::TEXT_ALIGNMENT_TEXT_END_() { return get_static_field<SCAPIX_META_STRING("TEXT_ALIGNMENT_TEXT_END"), jint>(); }
inline jint View::TEXT_ALIGNMENT_TEXT_START_() { return get_static_field<SCAPIX_META_STRING("TEXT_ALIGNMENT_TEXT_START"), jint>(); }
inline jint View::TEXT_ALIGNMENT_VIEW_END_() { return get_static_field<SCAPIX_META_STRING("TEXT_ALIGNMENT_VIEW_END"), jint>(); }
inline jint View::TEXT_ALIGNMENT_VIEW_START_() { return get_static_field<SCAPIX_META_STRING("TEXT_ALIGNMENT_VIEW_START"), jint>(); }
inline jint View::TEXT_DIRECTION_ANY_RTL_() { return get_static_field<SCAPIX_META_STRING("TEXT_DIRECTION_ANY_RTL"), jint>(); }
inline jint View::TEXT_DIRECTION_FIRST_STRONG_() { return get_static_field<SCAPIX_META_STRING("TEXT_DIRECTION_FIRST_STRONG"), jint>(); }
inline jint View::TEXT_DIRECTION_FIRST_STRONG_LTR_() { return get_static_field<SCAPIX_META_STRING("TEXT_DIRECTION_FIRST_STRONG_LTR"), jint>(); }
inline jint View::TEXT_DIRECTION_FIRST_STRONG_RTL_() { return get_static_field<SCAPIX_META_STRING("TEXT_DIRECTION_FIRST_STRONG_RTL"), jint>(); }
inline jint View::TEXT_DIRECTION_INHERIT_() { return get_static_field<SCAPIX_META_STRING("TEXT_DIRECTION_INHERIT"), jint>(); }
inline jint View::TEXT_DIRECTION_LOCALE_() { return get_static_field<SCAPIX_META_STRING("TEXT_DIRECTION_LOCALE"), jint>(); }
inline jint View::TEXT_DIRECTION_LTR_() { return get_static_field<SCAPIX_META_STRING("TEXT_DIRECTION_LTR"), jint>(); }
inline jint View::TEXT_DIRECTION_RTL_() { return get_static_field<SCAPIX_META_STRING("TEXT_DIRECTION_RTL"), jint>(); }
inline ref<android::util::Property> View::TRANSLATION_X_() { return get_static_field<SCAPIX_META_STRING("TRANSLATION_X"), ref<android::util::Property>>(); }
inline ref<android::util::Property> View::TRANSLATION_Y_() { return get_static_field<SCAPIX_META_STRING("TRANSLATION_Y"), ref<android::util::Property>>(); }
inline ref<android::util::Property> View::TRANSLATION_Z_() { return get_static_field<SCAPIX_META_STRING("TRANSLATION_Z"), ref<android::util::Property>>(); }
inline jint View::VISIBLE_() { return get_static_field<SCAPIX_META_STRING("VISIBLE"), jint>(); }
inline ref<android::util::Property> View::X_() { return get_static_field<SCAPIX_META_STRING("X"), ref<android::util::Property>>(); }
inline ref<android::util::Property> View::Y_() { return get_static_field<SCAPIX_META_STRING("Y"), ref<android::util::Property>>(); }
inline ref<android::util::Property> View::Z_() { return get_static_field<SCAPIX_META_STRING("Z"), ref<android::util::Property>>(); }
inline ref<View> View::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<View> View::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<View> View::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<View> View::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline ref<java::lang::String> View::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint View::getVerticalFadingEdgeLength() { return call_method<SCAPIX_META_STRING("getVerticalFadingEdgeLength"), jint>(); }
inline void View::setFadingEdgeLength(jint length) { return call_method<SCAPIX_META_STRING("setFadingEdgeLength"), void>(length); }
inline jint View::getHorizontalFadingEdgeLength() { return call_method<SCAPIX_META_STRING("getHorizontalFadingEdgeLength"), jint>(); }
inline jint View::getVerticalScrollbarWidth() { return call_method<SCAPIX_META_STRING("getVerticalScrollbarWidth"), jint>(); }
inline void View::setVerticalScrollbarPosition(jint position) { return call_method<SCAPIX_META_STRING("setVerticalScrollbarPosition"), void>(position); }
inline jint View::getVerticalScrollbarPosition() { return call_method<SCAPIX_META_STRING("getVerticalScrollbarPosition"), jint>(); }
inline void View::setScrollIndicators(jint indicators) { return call_method<SCAPIX_META_STRING("setScrollIndicators"), void>(indicators); }
inline void View::setScrollIndicators(jint indicators, jint mask) { return call_method<SCAPIX_META_STRING("setScrollIndicators"), void>(indicators, mask); }
inline jint View::getScrollIndicators() { return call_method<SCAPIX_META_STRING("getScrollIndicators"), jint>(); }
inline void View::setOnScrollChangeListener(ref<android::view::View_OnScrollChangeListener> l) { return call_method<SCAPIX_META_STRING("setOnScrollChangeListener"), void>(l); }
inline void View::setOnFocusChangeListener(ref<android::view::View_OnFocusChangeListener> l) { return call_method<SCAPIX_META_STRING("setOnFocusChangeListener"), void>(l); }
inline void View::addOnLayoutChangeListener(ref<android::view::View_OnLayoutChangeListener> listener) { return call_method<SCAPIX_META_STRING("addOnLayoutChangeListener"), void>(listener); }
inline void View::removeOnLayoutChangeListener(ref<android::view::View_OnLayoutChangeListener> listener) { return call_method<SCAPIX_META_STRING("removeOnLayoutChangeListener"), void>(listener); }
inline void View::addOnAttachStateChangeListener(ref<android::view::View_OnAttachStateChangeListener> listener) { return call_method<SCAPIX_META_STRING("addOnAttachStateChangeListener"), void>(listener); }
inline void View::removeOnAttachStateChangeListener(ref<android::view::View_OnAttachStateChangeListener> listener) { return call_method<SCAPIX_META_STRING("removeOnAttachStateChangeListener"), void>(listener); }
inline ref<android::view::View_OnFocusChangeListener> View::getOnFocusChangeListener() { return call_method<SCAPIX_META_STRING("getOnFocusChangeListener"), ref<android::view::View_OnFocusChangeListener>>(); }
inline void View::setOnClickListener(ref<android::view::View_OnClickListener> l) { return call_method<SCAPIX_META_STRING("setOnClickListener"), void>(l); }
inline jboolean View::hasOnClickListeners() { return call_method<SCAPIX_META_STRING("hasOnClickListeners"), jboolean>(); }
inline void View::setOnLongClickListener(ref<android::view::View_OnLongClickListener> l) { return call_method<SCAPIX_META_STRING("setOnLongClickListener"), void>(l); }
inline void View::setOnContextClickListener(ref<android::view::View_OnContextClickListener> l) { return call_method<SCAPIX_META_STRING("setOnContextClickListener"), void>(l); }
inline void View::setOnCreateContextMenuListener(ref<android::view::View_OnCreateContextMenuListener> l) { return call_method<SCAPIX_META_STRING("setOnCreateContextMenuListener"), void>(l); }
inline jboolean View::performClick() { return call_method<SCAPIX_META_STRING("performClick"), jboolean>(); }
inline jboolean View::callOnClick() { return call_method<SCAPIX_META_STRING("callOnClick"), jboolean>(); }
inline jboolean View::performLongClick() { return call_method<SCAPIX_META_STRING("performLongClick"), jboolean>(); }
inline jboolean View::performLongClick(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("performLongClick"), jboolean>(x, y); }
inline jboolean View::performContextClick(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("performContextClick"), jboolean>(x, y); }
inline jboolean View::performContextClick() { return call_method<SCAPIX_META_STRING("performContextClick"), jboolean>(); }
inline jboolean View::showContextMenu() { return call_method<SCAPIX_META_STRING("showContextMenu"), jboolean>(); }
inline jboolean View::showContextMenu(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("showContextMenu"), jboolean>(x, y); }
inline ref<android::view::ActionMode> View::startActionMode(ref<android::view::ActionMode_Callback> callback) { return call_method<SCAPIX_META_STRING("startActionMode"), ref<android::view::ActionMode>>(callback); }
inline ref<android::view::ActionMode> View::startActionMode(ref<android::view::ActionMode_Callback> callback, jint type) { return call_method<SCAPIX_META_STRING("startActionMode"), ref<android::view::ActionMode>>(callback, type); }
inline void View::setOnKeyListener(ref<android::view::View_OnKeyListener> l) { return call_method<SCAPIX_META_STRING("setOnKeyListener"), void>(l); }
inline void View::setOnTouchListener(ref<android::view::View_OnTouchListener> l) { return call_method<SCAPIX_META_STRING("setOnTouchListener"), void>(l); }
inline void View::setOnGenericMotionListener(ref<android::view::View_OnGenericMotionListener> l) { return call_method<SCAPIX_META_STRING("setOnGenericMotionListener"), void>(l); }
inline void View::setOnHoverListener(ref<android::view::View_OnHoverListener> l) { return call_method<SCAPIX_META_STRING("setOnHoverListener"), void>(l); }
inline void View::setOnDragListener(ref<android::view::View_OnDragListener> l) { return call_method<SCAPIX_META_STRING("setOnDragListener"), void>(l); }
inline void View::setRevealOnFocusHint(jboolean revealOnFocus) { return call_method<SCAPIX_META_STRING("setRevealOnFocusHint"), void>(revealOnFocus); }
inline jboolean View::getRevealOnFocusHint() { return call_method<SCAPIX_META_STRING("getRevealOnFocusHint"), jboolean>(); }
inline jboolean View::requestRectangleOnScreen(ref<android::graphics::Rect> rectangle) { return call_method<SCAPIX_META_STRING("requestRectangleOnScreen"), jboolean>(rectangle); }
inline jboolean View::requestRectangleOnScreen(ref<android::graphics::Rect> rectangle, jboolean immediate) { return call_method<SCAPIX_META_STRING("requestRectangleOnScreen"), jboolean>(rectangle, immediate); }
inline void View::clearFocus() { return call_method<SCAPIX_META_STRING("clearFocus"), void>(); }
inline jboolean View::hasFocus() { return call_method<SCAPIX_META_STRING("hasFocus"), jboolean>(); }
inline jboolean View::hasFocusable() { return call_method<SCAPIX_META_STRING("hasFocusable"), jboolean>(); }
inline jboolean View::hasExplicitFocusable() { return call_method<SCAPIX_META_STRING("hasExplicitFocusable"), jboolean>(); }
inline void View::setAccessibilityPaneTitle(ref<java::lang::CharSequence> accessibilityPaneTitle) { return call_method<SCAPIX_META_STRING("setAccessibilityPaneTitle"), void>(accessibilityPaneTitle); }
inline ref<java::lang::CharSequence> View::getAccessibilityPaneTitle() { return call_method<SCAPIX_META_STRING("getAccessibilityPaneTitle"), ref<java::lang::CharSequence>>(); }
inline void View::sendAccessibilityEvent(jint eventType) { return call_method<SCAPIX_META_STRING("sendAccessibilityEvent"), void>(eventType); }
inline void View::announceForAccessibility(ref<java::lang::CharSequence> text) { return call_method<SCAPIX_META_STRING("announceForAccessibility"), void>(text); }
inline void View::sendAccessibilityEventUnchecked(ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<SCAPIX_META_STRING("sendAccessibilityEventUnchecked"), void>(event); }
inline jboolean View::dispatchPopulateAccessibilityEvent(ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<SCAPIX_META_STRING("dispatchPopulateAccessibilityEvent"), jboolean>(event); }
inline void View::onPopulateAccessibilityEvent(ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<SCAPIX_META_STRING("onPopulateAccessibilityEvent"), void>(event); }
inline void View::onInitializeAccessibilityEvent(ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<SCAPIX_META_STRING("onInitializeAccessibilityEvent"), void>(event); }
inline ref<android::view::accessibility::AccessibilityNodeInfo> View::createAccessibilityNodeInfo() { return call_method<SCAPIX_META_STRING("createAccessibilityNodeInfo"), ref<android::view::accessibility::AccessibilityNodeInfo>>(); }
inline void View::onInitializeAccessibilityNodeInfo(ref<android::view::accessibility::AccessibilityNodeInfo> info) { return call_method<SCAPIX_META_STRING("onInitializeAccessibilityNodeInfo"), void>(info); }
inline ref<java::lang::CharSequence> View::getAccessibilityClassName() { return call_method<SCAPIX_META_STRING("getAccessibilityClassName"), ref<java::lang::CharSequence>>(); }
inline void View::onProvideStructure(ref<android::view::ViewStructure> structure) { return call_method<SCAPIX_META_STRING("onProvideStructure"), void>(structure); }
inline void View::onProvideAutofillStructure(ref<android::view::ViewStructure> structure, jint flags) { return call_method<SCAPIX_META_STRING("onProvideAutofillStructure"), void>(structure, flags); }
inline void View::onProvideVirtualStructure(ref<android::view::ViewStructure> structure) { return call_method<SCAPIX_META_STRING("onProvideVirtualStructure"), void>(structure); }
inline void View::onProvideAutofillVirtualStructure(ref<android::view::ViewStructure> structure, jint flags) { return call_method<SCAPIX_META_STRING("onProvideAutofillVirtualStructure"), void>(structure, flags); }
inline void View::autofill(ref<android::view::autofill::AutofillValue> value) { return call_method<SCAPIX_META_STRING("autofill"), void>(value); }
inline void View::autofill(ref<android::util::SparseArray> values) { return call_method<SCAPIX_META_STRING("autofill"), void>(values); }
inline ref<android::view::autofill::AutofillId> View::getAutofillId() { return call_method<SCAPIX_META_STRING("getAutofillId"), ref<android::view::autofill::AutofillId>>(); }
inline void View::setAutofillId(ref<android::view::autofill::AutofillId> id) { return call_method<SCAPIX_META_STRING("setAutofillId"), void>(id); }
inline jint View::getAutofillType() { return call_method<SCAPIX_META_STRING("getAutofillType"), jint>(); }
inline ref<link::java::array<java::lang::String>> View::getAutofillHints() { return call_method<SCAPIX_META_STRING("getAutofillHints"), ref<link::java::array<java::lang::String>>>(); }
inline ref<android::view::autofill::AutofillValue> View::getAutofillValue() { return call_method<SCAPIX_META_STRING("getAutofillValue"), ref<android::view::autofill::AutofillValue>>(); }
inline jint View::getImportantForAutofill() { return call_method<SCAPIX_META_STRING("getImportantForAutofill"), jint>(); }
inline void View::setImportantForAutofill(jint mode) { return call_method<SCAPIX_META_STRING("setImportantForAutofill"), void>(mode); }
inline jboolean View::isImportantForAutofill() { return call_method<SCAPIX_META_STRING("isImportantForAutofill"), jboolean>(); }
inline void View::dispatchProvideStructure(ref<android::view::ViewStructure> structure) { return call_method<SCAPIX_META_STRING("dispatchProvideStructure"), void>(structure); }
inline void View::dispatchProvideAutofillStructure(ref<android::view::ViewStructure> structure, jint flags) { return call_method<SCAPIX_META_STRING("dispatchProvideAutofillStructure"), void>(structure, flags); }
inline void View::addExtraDataToAccessibilityNodeInfo(ref<android::view::accessibility::AccessibilityNodeInfo> info, ref<java::lang::String> extraDataKey, ref<android::os::Bundle> arguments) { return call_method<SCAPIX_META_STRING("addExtraDataToAccessibilityNodeInfo"), void>(info, extraDataKey, arguments); }
inline jboolean View::isVisibleToUserForAutofill(jint virtualId) { return call_method<SCAPIX_META_STRING("isVisibleToUserForAutofill"), jboolean>(virtualId); }
inline void View::setAccessibilityDelegate(ref<android::view::View_AccessibilityDelegate> delegate) { return call_method<SCAPIX_META_STRING("setAccessibilityDelegate"), void>(delegate); }
inline ref<android::view::accessibility::AccessibilityNodeProvider> View::getAccessibilityNodeProvider() { return call_method<SCAPIX_META_STRING("getAccessibilityNodeProvider"), ref<android::view::accessibility::AccessibilityNodeProvider>>(); }
inline ref<java::lang::CharSequence> View::getContentDescription() { return call_method<SCAPIX_META_STRING("getContentDescription"), ref<java::lang::CharSequence>>(); }
inline void View::setContentDescription(ref<java::lang::CharSequence> contentDescription) { return call_method<SCAPIX_META_STRING("setContentDescription"), void>(contentDescription); }
inline void View::setAccessibilityTraversalBefore(jint beforeId) { return call_method<SCAPIX_META_STRING("setAccessibilityTraversalBefore"), void>(beforeId); }
inline jint View::getAccessibilityTraversalBefore() { return call_method<SCAPIX_META_STRING("getAccessibilityTraversalBefore"), jint>(); }
inline void View::setAccessibilityTraversalAfter(jint afterId) { return call_method<SCAPIX_META_STRING("setAccessibilityTraversalAfter"), void>(afterId); }
inline jint View::getAccessibilityTraversalAfter() { return call_method<SCAPIX_META_STRING("getAccessibilityTraversalAfter"), jint>(); }
inline jint View::getLabelFor() { return call_method<SCAPIX_META_STRING("getLabelFor"), jint>(); }
inline void View::setLabelFor(jint id) { return call_method<SCAPIX_META_STRING("setLabelFor"), void>(id); }
inline jboolean View::isFocused() { return call_method<SCAPIX_META_STRING("isFocused"), jboolean>(); }
inline ref<android::view::View> View::findFocus() { return call_method<SCAPIX_META_STRING("findFocus"), ref<android::view::View>>(); }
inline jboolean View::isScrollContainer() { return call_method<SCAPIX_META_STRING("isScrollContainer"), jboolean>(); }
inline void View::setScrollContainer(jboolean isScrollContainer) { return call_method<SCAPIX_META_STRING("setScrollContainer"), void>(isScrollContainer); }
inline jint View::getDrawingCacheQuality() { return call_method<SCAPIX_META_STRING("getDrawingCacheQuality"), jint>(); }
inline void View::setDrawingCacheQuality(jint quality) { return call_method<SCAPIX_META_STRING("setDrawingCacheQuality"), void>(quality); }
inline jboolean View::getKeepScreenOn() { return call_method<SCAPIX_META_STRING("getKeepScreenOn"), jboolean>(); }
inline void View::setKeepScreenOn(jboolean keepScreenOn) { return call_method<SCAPIX_META_STRING("setKeepScreenOn"), void>(keepScreenOn); }
inline jint View::getNextFocusLeftId() { return call_method<SCAPIX_META_STRING("getNextFocusLeftId"), jint>(); }
inline void View::setNextFocusLeftId(jint nextFocusLeftId) { return call_method<SCAPIX_META_STRING("setNextFocusLeftId"), void>(nextFocusLeftId); }
inline jint View::getNextFocusRightId() { return call_method<SCAPIX_META_STRING("getNextFocusRightId"), jint>(); }
inline void View::setNextFocusRightId(jint nextFocusRightId) { return call_method<SCAPIX_META_STRING("setNextFocusRightId"), void>(nextFocusRightId); }
inline jint View::getNextFocusUpId() { return call_method<SCAPIX_META_STRING("getNextFocusUpId"), jint>(); }
inline void View::setNextFocusUpId(jint nextFocusUpId) { return call_method<SCAPIX_META_STRING("setNextFocusUpId"), void>(nextFocusUpId); }
inline jint View::getNextFocusDownId() { return call_method<SCAPIX_META_STRING("getNextFocusDownId"), jint>(); }
inline void View::setNextFocusDownId(jint nextFocusDownId) { return call_method<SCAPIX_META_STRING("setNextFocusDownId"), void>(nextFocusDownId); }
inline jint View::getNextFocusForwardId() { return call_method<SCAPIX_META_STRING("getNextFocusForwardId"), jint>(); }
inline void View::setNextFocusForwardId(jint nextFocusForwardId) { return call_method<SCAPIX_META_STRING("setNextFocusForwardId"), void>(nextFocusForwardId); }
inline jint View::getNextClusterForwardId() { return call_method<SCAPIX_META_STRING("getNextClusterForwardId"), jint>(); }
inline void View::setNextClusterForwardId(jint nextClusterForwardId) { return call_method<SCAPIX_META_STRING("setNextClusterForwardId"), void>(nextClusterForwardId); }
inline jboolean View::isShown() { return call_method<SCAPIX_META_STRING("isShown"), jboolean>(); }
inline ref<android::view::WindowInsets> View::onApplyWindowInsets(ref<android::view::WindowInsets> insets) { return call_method<SCAPIX_META_STRING("onApplyWindowInsets"), ref<android::view::WindowInsets>>(insets); }
inline void View::setOnApplyWindowInsetsListener(ref<android::view::View_OnApplyWindowInsetsListener> listener) { return call_method<SCAPIX_META_STRING("setOnApplyWindowInsetsListener"), void>(listener); }
inline ref<android::view::WindowInsets> View::dispatchApplyWindowInsets(ref<android::view::WindowInsets> insets) { return call_method<SCAPIX_META_STRING("dispatchApplyWindowInsets"), ref<android::view::WindowInsets>>(insets); }
inline ref<android::view::WindowInsets> View::getRootWindowInsets() { return call_method<SCAPIX_META_STRING("getRootWindowInsets"), ref<android::view::WindowInsets>>(); }
inline ref<android::view::WindowInsets> View::computeSystemWindowInsets(ref<android::view::WindowInsets> in, ref<android::graphics::Rect> outLocalInsets) { return call_method<SCAPIX_META_STRING("computeSystemWindowInsets"), ref<android::view::WindowInsets>>(in, outLocalInsets); }
inline void View::setFitsSystemWindows(jboolean fitSystemWindows) { return call_method<SCAPIX_META_STRING("setFitsSystemWindows"), void>(fitSystemWindows); }
inline jboolean View::getFitsSystemWindows() { return call_method<SCAPIX_META_STRING("getFitsSystemWindows"), jboolean>(); }
inline void View::requestFitSystemWindows() { return call_method<SCAPIX_META_STRING("requestFitSystemWindows"), void>(); }
inline void View::requestApplyInsets() { return call_method<SCAPIX_META_STRING("requestApplyInsets"), void>(); }
inline jint View::getVisibility() { return call_method<SCAPIX_META_STRING("getVisibility"), jint>(); }
inline void View::setVisibility(jint visibility) { return call_method<SCAPIX_META_STRING("setVisibility"), void>(visibility); }
inline jboolean View::isEnabled() { return call_method<SCAPIX_META_STRING("isEnabled"), jboolean>(); }
inline void View::setEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setEnabled"), void>(enabled); }
inline void View::setFocusable(jboolean focusable) { return call_method<SCAPIX_META_STRING("setFocusable"), void>(focusable); }
inline void View::setFocusable(jint focusable) { return call_method<SCAPIX_META_STRING("setFocusable"), void>(focusable); }
inline void View::setFocusableInTouchMode(jboolean focusableInTouchMode) { return call_method<SCAPIX_META_STRING("setFocusableInTouchMode"), void>(focusableInTouchMode); }
inline void View::setAutofillHints(ref<link::java::array<java::lang::String>> autofillHints) { return call_method<SCAPIX_META_STRING("setAutofillHints"), void>(autofillHints); }
inline void View::setSoundEffectsEnabled(jboolean soundEffectsEnabled) { return call_method<SCAPIX_META_STRING("setSoundEffectsEnabled"), void>(soundEffectsEnabled); }
inline jboolean View::isSoundEffectsEnabled() { return call_method<SCAPIX_META_STRING("isSoundEffectsEnabled"), jboolean>(); }
inline void View::setHapticFeedbackEnabled(jboolean hapticFeedbackEnabled) { return call_method<SCAPIX_META_STRING("setHapticFeedbackEnabled"), void>(hapticFeedbackEnabled); }
inline jboolean View::isHapticFeedbackEnabled() { return call_method<SCAPIX_META_STRING("isHapticFeedbackEnabled"), jboolean>(); }
inline void View::setLayoutDirection(jint layoutDirection) { return call_method<SCAPIX_META_STRING("setLayoutDirection"), void>(layoutDirection); }
inline jint View::getLayoutDirection() { return call_method<SCAPIX_META_STRING("getLayoutDirection"), jint>(); }
inline jboolean View::hasTransientState() { return call_method<SCAPIX_META_STRING("hasTransientState"), jboolean>(); }
inline void View::setHasTransientState(jboolean hasTransientState) { return call_method<SCAPIX_META_STRING("setHasTransientState"), void>(hasTransientState); }
inline jboolean View::isAttachedToWindow() { return call_method<SCAPIX_META_STRING("isAttachedToWindow"), jboolean>(); }
inline jboolean View::isLaidOut() { return call_method<SCAPIX_META_STRING("isLaidOut"), jboolean>(); }
inline void View::setWillNotDraw(jboolean willNotDraw) { return call_method<SCAPIX_META_STRING("setWillNotDraw"), void>(willNotDraw); }
inline jboolean View::willNotDraw() { return call_method<SCAPIX_META_STRING("willNotDraw"), jboolean>(); }
inline void View::setWillNotCacheDrawing(jboolean willNotCacheDrawing) { return call_method<SCAPIX_META_STRING("setWillNotCacheDrawing"), void>(willNotCacheDrawing); }
inline jboolean View::willNotCacheDrawing() { return call_method<SCAPIX_META_STRING("willNotCacheDrawing"), jboolean>(); }
inline jboolean View::isClickable() { return call_method<SCAPIX_META_STRING("isClickable"), jboolean>(); }
inline void View::setClickable(jboolean clickable) { return call_method<SCAPIX_META_STRING("setClickable"), void>(clickable); }
inline jboolean View::isLongClickable() { return call_method<SCAPIX_META_STRING("isLongClickable"), jboolean>(); }
inline void View::setLongClickable(jboolean longClickable) { return call_method<SCAPIX_META_STRING("setLongClickable"), void>(longClickable); }
inline jboolean View::isContextClickable() { return call_method<SCAPIX_META_STRING("isContextClickable"), jboolean>(); }
inline void View::setContextClickable(jboolean contextClickable) { return call_method<SCAPIX_META_STRING("setContextClickable"), void>(contextClickable); }
inline void View::setPressed(jboolean pressed) { return call_method<SCAPIX_META_STRING("setPressed"), void>(pressed); }
inline jboolean View::isPressed() { return call_method<SCAPIX_META_STRING("isPressed"), jboolean>(); }
inline jboolean View::isSaveEnabled() { return call_method<SCAPIX_META_STRING("isSaveEnabled"), jboolean>(); }
inline void View::setSaveEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setSaveEnabled"), void>(enabled); }
inline jboolean View::getFilterTouchesWhenObscured() { return call_method<SCAPIX_META_STRING("getFilterTouchesWhenObscured"), jboolean>(); }
inline void View::setFilterTouchesWhenObscured(jboolean enabled) { return call_method<SCAPIX_META_STRING("setFilterTouchesWhenObscured"), void>(enabled); }
inline jboolean View::isSaveFromParentEnabled() { return call_method<SCAPIX_META_STRING("isSaveFromParentEnabled"), jboolean>(); }
inline void View::setSaveFromParentEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setSaveFromParentEnabled"), void>(enabled); }
inline jboolean View::isFocusable() { return call_method<SCAPIX_META_STRING("isFocusable"), jboolean>(); }
inline jint View::getFocusable() { return call_method<SCAPIX_META_STRING("getFocusable"), jint>(); }
inline jboolean View::isFocusableInTouchMode() { return call_method<SCAPIX_META_STRING("isFocusableInTouchMode"), jboolean>(); }
inline jboolean View::isScreenReaderFocusable() { return call_method<SCAPIX_META_STRING("isScreenReaderFocusable"), jboolean>(); }
inline void View::setScreenReaderFocusable(jboolean screenReaderFocusable) { return call_method<SCAPIX_META_STRING("setScreenReaderFocusable"), void>(screenReaderFocusable); }
inline jboolean View::isAccessibilityHeading() { return call_method<SCAPIX_META_STRING("isAccessibilityHeading"), jboolean>(); }
inline void View::setAccessibilityHeading(jboolean isHeading) { return call_method<SCAPIX_META_STRING("setAccessibilityHeading"), void>(isHeading); }
inline ref<android::view::View> View::focusSearch(jint direction) { return call_method<SCAPIX_META_STRING("focusSearch"), ref<android::view::View>>(direction); }
inline jboolean View::isKeyboardNavigationCluster() { return call_method<SCAPIX_META_STRING("isKeyboardNavigationCluster"), jboolean>(); }
inline void View::setKeyboardNavigationCluster(jboolean isCluster) { return call_method<SCAPIX_META_STRING("setKeyboardNavigationCluster"), void>(isCluster); }
inline jboolean View::isFocusedByDefault() { return call_method<SCAPIX_META_STRING("isFocusedByDefault"), jboolean>(); }
inline void View::setFocusedByDefault(jboolean isFocusedByDefault) { return call_method<SCAPIX_META_STRING("setFocusedByDefault"), void>(isFocusedByDefault); }
inline ref<android::view::View> View::keyboardNavigationClusterSearch(ref<android::view::View> currentCluster, jint direction) { return call_method<SCAPIX_META_STRING("keyboardNavigationClusterSearch"), ref<android::view::View>>(currentCluster, direction); }
inline jboolean View::dispatchUnhandledMove(ref<android::view::View> focused, jint direction) { return call_method<SCAPIX_META_STRING("dispatchUnhandledMove"), jboolean>(focused, direction); }
inline void View::setDefaultFocusHighlightEnabled(jboolean defaultFocusHighlightEnabled) { return call_method<SCAPIX_META_STRING("setDefaultFocusHighlightEnabled"), void>(defaultFocusHighlightEnabled); }
inline jboolean View::getDefaultFocusHighlightEnabled() { return call_method<SCAPIX_META_STRING("getDefaultFocusHighlightEnabled"), jboolean>(); }
inline ref<java::util::ArrayList> View::getFocusables(jint direction) { return call_method<SCAPIX_META_STRING("getFocusables"), ref<java::util::ArrayList>>(direction); }
inline void View::addFocusables(ref<java::util::ArrayList> views, jint direction) { return call_method<SCAPIX_META_STRING("addFocusables"), void>(views, direction); }
inline void View::addFocusables(ref<java::util::ArrayList> views, jint direction, jint focusableMode) { return call_method<SCAPIX_META_STRING("addFocusables"), void>(views, direction, focusableMode); }
inline void View::addKeyboardNavigationClusters(ref<java::util::Collection> views, jint direction) { return call_method<SCAPIX_META_STRING("addKeyboardNavigationClusters"), void>(views, direction); }
inline void View::findViewsWithText(ref<java::util::ArrayList> outViews, ref<java::lang::CharSequence> searched, jint flags) { return call_method<SCAPIX_META_STRING("findViewsWithText"), void>(outViews, searched, flags); }
inline ref<java::util::ArrayList> View::getTouchables() { return call_method<SCAPIX_META_STRING("getTouchables"), ref<java::util::ArrayList>>(); }
inline void View::addTouchables(ref<java::util::ArrayList> views) { return call_method<SCAPIX_META_STRING("addTouchables"), void>(views); }
inline jboolean View::isAccessibilityFocused() { return call_method<SCAPIX_META_STRING("isAccessibilityFocused"), jboolean>(); }
inline jboolean View::requestFocus() { return call_method<SCAPIX_META_STRING("requestFocus"), jboolean>(); }
inline jboolean View::restoreDefaultFocus() { return call_method<SCAPIX_META_STRING("restoreDefaultFocus"), jboolean>(); }
inline jboolean View::requestFocus(jint direction) { return call_method<SCAPIX_META_STRING("requestFocus"), jboolean>(direction); }
inline jboolean View::requestFocus(jint direction, ref<android::graphics::Rect> previouslyFocusedRect) { return call_method<SCAPIX_META_STRING("requestFocus"), jboolean>(direction, previouslyFocusedRect); }
inline jboolean View::requestFocusFromTouch() { return call_method<SCAPIX_META_STRING("requestFocusFromTouch"), jboolean>(); }
inline jint View::getImportantForAccessibility() { return call_method<SCAPIX_META_STRING("getImportantForAccessibility"), jint>(); }
inline void View::setAccessibilityLiveRegion(jint mode) { return call_method<SCAPIX_META_STRING("setAccessibilityLiveRegion"), void>(mode); }
inline jint View::getAccessibilityLiveRegion() { return call_method<SCAPIX_META_STRING("getAccessibilityLiveRegion"), jint>(); }
inline void View::setImportantForAccessibility(jint mode) { return call_method<SCAPIX_META_STRING("setImportantForAccessibility"), void>(mode); }
inline jboolean View::isImportantForAccessibility() { return call_method<SCAPIX_META_STRING("isImportantForAccessibility"), jboolean>(); }
inline ref<android::view::ViewParent> View::getParentForAccessibility() { return call_method<SCAPIX_META_STRING("getParentForAccessibility"), ref<android::view::ViewParent>>(); }
inline void View::addChildrenForAccessibility(ref<java::util::ArrayList> outChildren) { return call_method<SCAPIX_META_STRING("addChildrenForAccessibility"), void>(outChildren); }
inline jboolean View::dispatchNestedPrePerformAccessibilityAction(jint action, ref<android::os::Bundle> arguments) { return call_method<SCAPIX_META_STRING("dispatchNestedPrePerformAccessibilityAction"), jboolean>(action, arguments); }
inline jboolean View::performAccessibilityAction(jint action, ref<android::os::Bundle> arguments) { return call_method<SCAPIX_META_STRING("performAccessibilityAction"), jboolean>(action, arguments); }
inline jboolean View::isTemporarilyDetached() { return call_method<SCAPIX_META_STRING("isTemporarilyDetached"), jboolean>(); }
inline void View::dispatchStartTemporaryDetach() { return call_method<SCAPIX_META_STRING("dispatchStartTemporaryDetach"), void>(); }
inline void View::onStartTemporaryDetach() { return call_method<SCAPIX_META_STRING("onStartTemporaryDetach"), void>(); }
inline void View::dispatchFinishTemporaryDetach() { return call_method<SCAPIX_META_STRING("dispatchFinishTemporaryDetach"), void>(); }
inline void View::onFinishTemporaryDetach() { return call_method<SCAPIX_META_STRING("onFinishTemporaryDetach"), void>(); }
inline ref<android::view::KeyEvent_DispatcherState> View::getKeyDispatcherState() { return call_method<SCAPIX_META_STRING("getKeyDispatcherState"), ref<android::view::KeyEvent_DispatcherState>>(); }
inline jboolean View::dispatchKeyEventPreIme(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("dispatchKeyEventPreIme"), jboolean>(event); }
inline jboolean View::dispatchKeyEvent(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("dispatchKeyEvent"), jboolean>(event); }
inline jboolean View::dispatchKeyShortcutEvent(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("dispatchKeyShortcutEvent"), jboolean>(event); }
inline jboolean View::dispatchTouchEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("dispatchTouchEvent"), jboolean>(event); }
inline jboolean View::onFilterTouchEventForSecurity(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onFilterTouchEventForSecurity"), jboolean>(event); }
inline jboolean View::dispatchTrackballEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("dispatchTrackballEvent"), jboolean>(event); }
inline jboolean View::dispatchCapturedPointerEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("dispatchCapturedPointerEvent"), jboolean>(event); }
inline jboolean View::dispatchGenericMotionEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("dispatchGenericMotionEvent"), jboolean>(event); }
inline void View::dispatchWindowFocusChanged(jboolean hasFocus) { return call_method<SCAPIX_META_STRING("dispatchWindowFocusChanged"), void>(hasFocus); }
inline void View::onWindowFocusChanged(jboolean hasWindowFocus) { return call_method<SCAPIX_META_STRING("onWindowFocusChanged"), void>(hasWindowFocus); }
inline jboolean View::hasWindowFocus() { return call_method<SCAPIX_META_STRING("hasWindowFocus"), jboolean>(); }
inline void View::dispatchDisplayHint(jint hint) { return call_method<SCAPIX_META_STRING("dispatchDisplayHint"), void>(hint); }
inline void View::dispatchWindowVisibilityChanged(jint visibility) { return call_method<SCAPIX_META_STRING("dispatchWindowVisibilityChanged"), void>(visibility); }
inline void View::onVisibilityAggregated(jboolean isVisible) { return call_method<SCAPIX_META_STRING("onVisibilityAggregated"), void>(isVisible); }
inline jint View::getWindowVisibility() { return call_method<SCAPIX_META_STRING("getWindowVisibility"), jint>(); }
inline void View::getWindowVisibleDisplayFrame(ref<android::graphics::Rect> outRect) { return call_method<SCAPIX_META_STRING("getWindowVisibleDisplayFrame"), void>(outRect); }
inline void View::dispatchConfigurationChanged(ref<android::content::res::Configuration> newConfig) { return call_method<SCAPIX_META_STRING("dispatchConfigurationChanged"), void>(newConfig); }
inline jboolean View::isInTouchMode() { return call_method<SCAPIX_META_STRING("isInTouchMode"), jboolean>(); }
inline ref<android::content::Context> View::getContext() { return call_method<SCAPIX_META_STRING("getContext"), ref<android::content::Context>>(); }
inline jboolean View::onKeyPreIme(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyPreIme"), jboolean>(keyCode, event); }
inline jboolean View::onKeyDown(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyDown"), jboolean>(keyCode, event); }
inline jboolean View::onKeyLongPress(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyLongPress"), jboolean>(keyCode, event); }
inline jboolean View::onKeyUp(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyUp"), jboolean>(keyCode, event); }
inline jboolean View::onKeyMultiple(jint keyCode, jint repeatCount, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyMultiple"), jboolean>(keyCode, repeatCount, event); }
inline jboolean View::onKeyShortcut(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyShortcut"), jboolean>(keyCode, event); }
inline jboolean View::onCheckIsTextEditor() { return call_method<SCAPIX_META_STRING("onCheckIsTextEditor"), jboolean>(); }
inline ref<android::view::inputmethod::InputConnection> View::onCreateInputConnection(ref<android::view::inputmethod::EditorInfo> outAttrs) { return call_method<SCAPIX_META_STRING("onCreateInputConnection"), ref<android::view::inputmethod::InputConnection>>(outAttrs); }
inline jboolean View::checkInputConnectionProxy(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("checkInputConnectionProxy"), jboolean>(view); }
inline void View::createContextMenu(ref<android::view::ContextMenu> menu) { return call_method<SCAPIX_META_STRING("createContextMenu"), void>(menu); }
inline jboolean View::onTrackballEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onTrackballEvent"), jboolean>(event); }
inline jboolean View::onGenericMotionEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onGenericMotionEvent"), jboolean>(event); }
inline jboolean View::onHoverEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onHoverEvent"), jboolean>(event); }
inline jboolean View::isHovered() { return call_method<SCAPIX_META_STRING("isHovered"), jboolean>(); }
inline void View::setHovered(jboolean hovered) { return call_method<SCAPIX_META_STRING("setHovered"), void>(hovered); }
inline void View::onHoverChanged(jboolean hovered) { return call_method<SCAPIX_META_STRING("onHoverChanged"), void>(hovered); }
inline jboolean View::onTouchEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onTouchEvent"), jboolean>(event); }
inline void View::cancelLongPress() { return call_method<SCAPIX_META_STRING("cancelLongPress"), void>(); }
inline void View::setTouchDelegate(ref<android::view::TouchDelegate> delegate) { return call_method<SCAPIX_META_STRING("setTouchDelegate"), void>(delegate); }
inline ref<android::view::TouchDelegate> View::getTouchDelegate() { return call_method<SCAPIX_META_STRING("getTouchDelegate"), ref<android::view::TouchDelegate>>(); }
inline void View::requestUnbufferedDispatch(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("requestUnbufferedDispatch"), void>(event); }
inline void View::bringToFront() { return call_method<SCAPIX_META_STRING("bringToFront"), void>(); }
inline ref<android::view::ViewParent> View::getParent() { return call_method<SCAPIX_META_STRING("getParent"), ref<android::view::ViewParent>>(); }
inline void View::setScrollX(jint value) { return call_method<SCAPIX_META_STRING("setScrollX"), void>(value); }
inline void View::setScrollY(jint value) { return call_method<SCAPIX_META_STRING("setScrollY"), void>(value); }
inline jint View::getScrollX() { return call_method<SCAPIX_META_STRING("getScrollX"), jint>(); }
inline jint View::getScrollY() { return call_method<SCAPIX_META_STRING("getScrollY"), jint>(); }
inline jint View::getWidth() { return call_method<SCAPIX_META_STRING("getWidth"), jint>(); }
inline jint View::getHeight() { return call_method<SCAPIX_META_STRING("getHeight"), jint>(); }
inline void View::getDrawingRect(ref<android::graphics::Rect> outRect) { return call_method<SCAPIX_META_STRING("getDrawingRect"), void>(outRect); }
inline jint View::getMeasuredWidth() { return call_method<SCAPIX_META_STRING("getMeasuredWidth"), jint>(); }
inline jint View::getMeasuredWidthAndState() { return call_method<SCAPIX_META_STRING("getMeasuredWidthAndState"), jint>(); }
inline jint View::getMeasuredHeight() { return call_method<SCAPIX_META_STRING("getMeasuredHeight"), jint>(); }
inline jint View::getMeasuredHeightAndState() { return call_method<SCAPIX_META_STRING("getMeasuredHeightAndState"), jint>(); }
inline jint View::getMeasuredState() { return call_method<SCAPIX_META_STRING("getMeasuredState"), jint>(); }
inline ref<android::graphics::Matrix> View::getMatrix() { return call_method<SCAPIX_META_STRING("getMatrix"), ref<android::graphics::Matrix>>(); }
inline jfloat View::getCameraDistance() { return call_method<SCAPIX_META_STRING("getCameraDistance"), jfloat>(); }
inline void View::setCameraDistance(jfloat distance) { return call_method<SCAPIX_META_STRING("setCameraDistance"), void>(distance); }
inline jfloat View::getRotation() { return call_method<SCAPIX_META_STRING("getRotation"), jfloat>(); }
inline void View::setRotation(jfloat rotation) { return call_method<SCAPIX_META_STRING("setRotation"), void>(rotation); }
inline jfloat View::getRotationY() { return call_method<SCAPIX_META_STRING("getRotationY"), jfloat>(); }
inline void View::setRotationY(jfloat rotationY) { return call_method<SCAPIX_META_STRING("setRotationY"), void>(rotationY); }
inline jfloat View::getRotationX() { return call_method<SCAPIX_META_STRING("getRotationX"), jfloat>(); }
inline void View::setRotationX(jfloat rotationX) { return call_method<SCAPIX_META_STRING("setRotationX"), void>(rotationX); }
inline jfloat View::getScaleX() { return call_method<SCAPIX_META_STRING("getScaleX"), jfloat>(); }
inline void View::setScaleX(jfloat scaleX) { return call_method<SCAPIX_META_STRING("setScaleX"), void>(scaleX); }
inline jfloat View::getScaleY() { return call_method<SCAPIX_META_STRING("getScaleY"), jfloat>(); }
inline void View::setScaleY(jfloat scaleY) { return call_method<SCAPIX_META_STRING("setScaleY"), void>(scaleY); }
inline jfloat View::getPivotX() { return call_method<SCAPIX_META_STRING("getPivotX"), jfloat>(); }
inline void View::setPivotX(jfloat pivotX) { return call_method<SCAPIX_META_STRING("setPivotX"), void>(pivotX); }
inline jfloat View::getPivotY() { return call_method<SCAPIX_META_STRING("getPivotY"), jfloat>(); }
inline void View::setPivotY(jfloat pivotY) { return call_method<SCAPIX_META_STRING("setPivotY"), void>(pivotY); }
inline jboolean View::isPivotSet() { return call_method<SCAPIX_META_STRING("isPivotSet"), jboolean>(); }
inline void View::resetPivot() { return call_method<SCAPIX_META_STRING("resetPivot"), void>(); }
inline jfloat View::getAlpha() { return call_method<SCAPIX_META_STRING("getAlpha"), jfloat>(); }
inline void View::forceHasOverlappingRendering(jboolean hasOverlappingRendering) { return call_method<SCAPIX_META_STRING("forceHasOverlappingRendering"), void>(hasOverlappingRendering); }
inline jboolean View::getHasOverlappingRendering() { return call_method<SCAPIX_META_STRING("getHasOverlappingRendering"), jboolean>(); }
inline jboolean View::hasOverlappingRendering() { return call_method<SCAPIX_META_STRING("hasOverlappingRendering"), jboolean>(); }
inline void View::setAlpha(jfloat alpha) { return call_method<SCAPIX_META_STRING("setAlpha"), void>(alpha); }
inline jint View::getTop() { return call_method<SCAPIX_META_STRING("getTop"), jint>(); }
inline void View::setTop(jint top) { return call_method<SCAPIX_META_STRING("setTop"), void>(top); }
inline jint View::getBottom() { return call_method<SCAPIX_META_STRING("getBottom"), jint>(); }
inline jboolean View::isDirty() { return call_method<SCAPIX_META_STRING("isDirty"), jboolean>(); }
inline void View::setBottom(jint bottom) { return call_method<SCAPIX_META_STRING("setBottom"), void>(bottom); }
inline jint View::getLeft() { return call_method<SCAPIX_META_STRING("getLeft"), jint>(); }
inline void View::setLeft(jint left) { return call_method<SCAPIX_META_STRING("setLeft"), void>(left); }
inline jint View::getRight() { return call_method<SCAPIX_META_STRING("getRight"), jint>(); }
inline void View::setRight(jint right) { return call_method<SCAPIX_META_STRING("setRight"), void>(right); }
inline jfloat View::getX() { return call_method<SCAPIX_META_STRING("getX"), jfloat>(); }
inline void View::setX(jfloat x) { return call_method<SCAPIX_META_STRING("setX"), void>(x); }
inline jfloat View::getY() { return call_method<SCAPIX_META_STRING("getY"), jfloat>(); }
inline void View::setY(jfloat y) { return call_method<SCAPIX_META_STRING("setY"), void>(y); }
inline jfloat View::getZ() { return call_method<SCAPIX_META_STRING("getZ"), jfloat>(); }
inline void View::setZ(jfloat z) { return call_method<SCAPIX_META_STRING("setZ"), void>(z); }
inline jfloat View::getElevation() { return call_method<SCAPIX_META_STRING("getElevation"), jfloat>(); }
inline void View::setElevation(jfloat elevation) { return call_method<SCAPIX_META_STRING("setElevation"), void>(elevation); }
inline jfloat View::getTranslationX() { return call_method<SCAPIX_META_STRING("getTranslationX"), jfloat>(); }
inline void View::setTranslationX(jfloat translationX) { return call_method<SCAPIX_META_STRING("setTranslationX"), void>(translationX); }
inline jfloat View::getTranslationY() { return call_method<SCAPIX_META_STRING("getTranslationY"), jfloat>(); }
inline void View::setTranslationY(jfloat translationY) { return call_method<SCAPIX_META_STRING("setTranslationY"), void>(translationY); }
inline jfloat View::getTranslationZ() { return call_method<SCAPIX_META_STRING("getTranslationZ"), jfloat>(); }
inline void View::setTranslationZ(jfloat translationZ) { return call_method<SCAPIX_META_STRING("setTranslationZ"), void>(translationZ); }
inline ref<android::animation::StateListAnimator> View::getStateListAnimator() { return call_method<SCAPIX_META_STRING("getStateListAnimator"), ref<android::animation::StateListAnimator>>(); }
inline void View::setStateListAnimator(ref<android::animation::StateListAnimator> stateListAnimator) { return call_method<SCAPIX_META_STRING("setStateListAnimator"), void>(stateListAnimator); }
inline jboolean View::getClipToOutline() { return call_method<SCAPIX_META_STRING("getClipToOutline"), jboolean>(); }
inline void View::setClipToOutline(jboolean clipToOutline) { return call_method<SCAPIX_META_STRING("setClipToOutline"), void>(clipToOutline); }
inline void View::setOutlineProvider(ref<android::view::ViewOutlineProvider> provider) { return call_method<SCAPIX_META_STRING("setOutlineProvider"), void>(provider); }
inline ref<android::view::ViewOutlineProvider> View::getOutlineProvider() { return call_method<SCAPIX_META_STRING("getOutlineProvider"), ref<android::view::ViewOutlineProvider>>(); }
inline void View::invalidateOutline() { return call_method<SCAPIX_META_STRING("invalidateOutline"), void>(); }
inline void View::setOutlineSpotShadowColor(jint color) { return call_method<SCAPIX_META_STRING("setOutlineSpotShadowColor"), void>(color); }
inline jint View::getOutlineSpotShadowColor() { return call_method<SCAPIX_META_STRING("getOutlineSpotShadowColor"), jint>(); }
inline void View::setOutlineAmbientShadowColor(jint color) { return call_method<SCAPIX_META_STRING("setOutlineAmbientShadowColor"), void>(color); }
inline jint View::getOutlineAmbientShadowColor() { return call_method<SCAPIX_META_STRING("getOutlineAmbientShadowColor"), jint>(); }
inline void View::getHitRect(ref<android::graphics::Rect> outRect) { return call_method<SCAPIX_META_STRING("getHitRect"), void>(outRect); }
inline void View::getFocusedRect(ref<android::graphics::Rect> r) { return call_method<SCAPIX_META_STRING("getFocusedRect"), void>(r); }
inline jboolean View::getGlobalVisibleRect(ref<android::graphics::Rect> r, ref<android::graphics::Point> globalOffset) { return call_method<SCAPIX_META_STRING("getGlobalVisibleRect"), jboolean>(r, globalOffset); }
inline jboolean View::getGlobalVisibleRect(ref<android::graphics::Rect> r) { return call_method<SCAPIX_META_STRING("getGlobalVisibleRect"), jboolean>(r); }
inline jboolean View::getLocalVisibleRect(ref<android::graphics::Rect> r) { return call_method<SCAPIX_META_STRING("getLocalVisibleRect"), jboolean>(r); }
inline void View::offsetTopAndBottom(jint offset) { return call_method<SCAPIX_META_STRING("offsetTopAndBottom"), void>(offset); }
inline void View::offsetLeftAndRight(jint offset) { return call_method<SCAPIX_META_STRING("offsetLeftAndRight"), void>(offset); }
inline ref<android::view::ViewGroup_LayoutParams> View::getLayoutParams() { return call_method<SCAPIX_META_STRING("getLayoutParams"), ref<android::view::ViewGroup_LayoutParams>>(); }
inline void View::setLayoutParams(ref<android::view::ViewGroup_LayoutParams> params) { return call_method<SCAPIX_META_STRING("setLayoutParams"), void>(params); }
inline void View::scrollTo(jint x, jint y) { return call_method<SCAPIX_META_STRING("scrollTo"), void>(x, y); }
inline void View::scrollBy(jint x, jint y) { return call_method<SCAPIX_META_STRING("scrollBy"), void>(x, y); }
inline void View::invalidate(ref<android::graphics::Rect> dirty) { return call_method<SCAPIX_META_STRING("invalidate"), void>(dirty); }
inline void View::invalidate(jint l, jint t, jint r, jint b) { return call_method<SCAPIX_META_STRING("invalidate"), void>(l, t, r, b); }
inline void View::invalidate() { return call_method<SCAPIX_META_STRING("invalidate"), void>(); }
inline jboolean View::isOpaque() { return call_method<SCAPIX_META_STRING("isOpaque"), jboolean>(); }
inline ref<android::os::Handler> View::getHandler() { return call_method<SCAPIX_META_STRING("getHandler"), ref<android::os::Handler>>(); }
inline jboolean View::post(ref<java::lang::Runnable> action) { return call_method<SCAPIX_META_STRING("post"), jboolean>(action); }
inline jboolean View::postDelayed(ref<java::lang::Runnable> action, jlong delayMillis) { return call_method<SCAPIX_META_STRING("postDelayed"), jboolean>(action, delayMillis); }
inline void View::postOnAnimation(ref<java::lang::Runnable> action) { return call_method<SCAPIX_META_STRING("postOnAnimation"), void>(action); }
inline void View::postOnAnimationDelayed(ref<java::lang::Runnable> action, jlong delayMillis) { return call_method<SCAPIX_META_STRING("postOnAnimationDelayed"), void>(action, delayMillis); }
inline jboolean View::removeCallbacks(ref<java::lang::Runnable> action) { return call_method<SCAPIX_META_STRING("removeCallbacks"), jboolean>(action); }
inline void View::postInvalidate() { return call_method<SCAPIX_META_STRING("postInvalidate"), void>(); }
inline void View::postInvalidate(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("postInvalidate"), void>(left, top, right, bottom); }
inline void View::postInvalidateDelayed(jlong delayMilliseconds) { return call_method<SCAPIX_META_STRING("postInvalidateDelayed"), void>(delayMilliseconds); }
inline void View::postInvalidateDelayed(jlong delayMilliseconds, jint p2, jint left, jint top, jint right) { return call_method<SCAPIX_META_STRING("postInvalidateDelayed"), void>(delayMilliseconds, p2, left, top, right); }
inline void View::postInvalidateOnAnimation() { return call_method<SCAPIX_META_STRING("postInvalidateOnAnimation"), void>(); }
inline void View::postInvalidateOnAnimation(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("postInvalidateOnAnimation"), void>(left, top, right, bottom); }
inline void View::computeScroll() { return call_method<SCAPIX_META_STRING("computeScroll"), void>(); }
inline jboolean View::isHorizontalFadingEdgeEnabled() { return call_method<SCAPIX_META_STRING("isHorizontalFadingEdgeEnabled"), jboolean>(); }
inline void View::setHorizontalFadingEdgeEnabled(jboolean horizontalFadingEdgeEnabled) { return call_method<SCAPIX_META_STRING("setHorizontalFadingEdgeEnabled"), void>(horizontalFadingEdgeEnabled); }
inline jboolean View::isVerticalFadingEdgeEnabled() { return call_method<SCAPIX_META_STRING("isVerticalFadingEdgeEnabled"), jboolean>(); }
inline void View::setVerticalFadingEdgeEnabled(jboolean verticalFadingEdgeEnabled) { return call_method<SCAPIX_META_STRING("setVerticalFadingEdgeEnabled"), void>(verticalFadingEdgeEnabled); }
inline jboolean View::isHorizontalScrollBarEnabled() { return call_method<SCAPIX_META_STRING("isHorizontalScrollBarEnabled"), jboolean>(); }
inline void View::setHorizontalScrollBarEnabled(jboolean horizontalScrollBarEnabled) { return call_method<SCAPIX_META_STRING("setHorizontalScrollBarEnabled"), void>(horizontalScrollBarEnabled); }
inline jboolean View::isVerticalScrollBarEnabled() { return call_method<SCAPIX_META_STRING("isVerticalScrollBarEnabled"), jboolean>(); }
inline void View::setVerticalScrollBarEnabled(jboolean verticalScrollBarEnabled) { return call_method<SCAPIX_META_STRING("setVerticalScrollBarEnabled"), void>(verticalScrollBarEnabled); }
inline void View::setScrollbarFadingEnabled(jboolean fadeScrollbars) { return call_method<SCAPIX_META_STRING("setScrollbarFadingEnabled"), void>(fadeScrollbars); }
inline jboolean View::isScrollbarFadingEnabled() { return call_method<SCAPIX_META_STRING("isScrollbarFadingEnabled"), jboolean>(); }
inline jint View::getScrollBarDefaultDelayBeforeFade() { return call_method<SCAPIX_META_STRING("getScrollBarDefaultDelayBeforeFade"), jint>(); }
inline void View::setScrollBarDefaultDelayBeforeFade(jint scrollBarDefaultDelayBeforeFade) { return call_method<SCAPIX_META_STRING("setScrollBarDefaultDelayBeforeFade"), void>(scrollBarDefaultDelayBeforeFade); }
inline jint View::getScrollBarFadeDuration() { return call_method<SCAPIX_META_STRING("getScrollBarFadeDuration"), jint>(); }
inline void View::setScrollBarFadeDuration(jint scrollBarFadeDuration) { return call_method<SCAPIX_META_STRING("setScrollBarFadeDuration"), void>(scrollBarFadeDuration); }
inline jint View::getScrollBarSize() { return call_method<SCAPIX_META_STRING("getScrollBarSize"), jint>(); }
inline void View::setScrollBarSize(jint scrollBarSize) { return call_method<SCAPIX_META_STRING("setScrollBarSize"), void>(scrollBarSize); }
inline void View::setScrollBarStyle(jint style) { return call_method<SCAPIX_META_STRING("setScrollBarStyle"), void>(style); }
inline jint View::getScrollBarStyle() { return call_method<SCAPIX_META_STRING("getScrollBarStyle"), jint>(); }
inline jboolean View::canScrollHorizontally(jint direction) { return call_method<SCAPIX_META_STRING("canScrollHorizontally"), jboolean>(direction); }
inline jboolean View::canScrollVertically(jint direction) { return call_method<SCAPIX_META_STRING("canScrollVertically"), jboolean>(direction); }
inline void View::onScreenStateChanged(jint screenState) { return call_method<SCAPIX_META_STRING("onScreenStateChanged"), void>(screenState); }
inline void View::onRtlPropertiesChanged(jint layoutDirection) { return call_method<SCAPIX_META_STRING("onRtlPropertiesChanged"), void>(layoutDirection); }
inline jboolean View::canResolveLayoutDirection() { return call_method<SCAPIX_META_STRING("canResolveLayoutDirection"), jboolean>(); }
inline jboolean View::isLayoutDirectionResolved() { return call_method<SCAPIX_META_STRING("isLayoutDirectionResolved"), jboolean>(); }
inline ref<android::os::IBinder> View::getWindowToken() { return call_method<SCAPIX_META_STRING("getWindowToken"), ref<android::os::IBinder>>(); }
inline ref<android::view::WindowId> View::getWindowId() { return call_method<SCAPIX_META_STRING("getWindowId"), ref<android::view::WindowId>>(); }
inline ref<android::os::IBinder> View::getApplicationWindowToken() { return call_method<SCAPIX_META_STRING("getApplicationWindowToken"), ref<android::os::IBinder>>(); }
inline ref<android::view::Display> View::getDisplay() { return call_method<SCAPIX_META_STRING("getDisplay"), ref<android::view::Display>>(); }
inline void View::cancelPendingInputEvents() { return call_method<SCAPIX_META_STRING("cancelPendingInputEvents"), void>(); }
inline void View::onCancelPendingInputEvents() { return call_method<SCAPIX_META_STRING("onCancelPendingInputEvents"), void>(); }
inline void View::saveHierarchyState(ref<android::util::SparseArray> container) { return call_method<SCAPIX_META_STRING("saveHierarchyState"), void>(container); }
inline void View::restoreHierarchyState(ref<android::util::SparseArray> container) { return call_method<SCAPIX_META_STRING("restoreHierarchyState"), void>(container); }
inline jlong View::getDrawingTime() { return call_method<SCAPIX_META_STRING("getDrawingTime"), jlong>(); }
inline void View::setDuplicateParentStateEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setDuplicateParentStateEnabled"), void>(enabled); }
inline jboolean View::isDuplicateParentStateEnabled() { return call_method<SCAPIX_META_STRING("isDuplicateParentStateEnabled"), jboolean>(); }
inline void View::setLayerType(jint layerType, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("setLayerType"), void>(layerType, paint); }
inline void View::setLayerPaint(ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("setLayerPaint"), void>(paint); }
inline jint View::getLayerType() { return call_method<SCAPIX_META_STRING("getLayerType"), jint>(); }
inline void View::buildLayer() { return call_method<SCAPIX_META_STRING("buildLayer"), void>(); }
inline void View::setDrawingCacheEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setDrawingCacheEnabled"), void>(enabled); }
inline jboolean View::isDrawingCacheEnabled() { return call_method<SCAPIX_META_STRING("isDrawingCacheEnabled"), jboolean>(); }
inline ref<android::graphics::Bitmap> View::getDrawingCache() { return call_method<SCAPIX_META_STRING("getDrawingCache"), ref<android::graphics::Bitmap>>(); }
inline ref<android::graphics::Bitmap> View::getDrawingCache(jboolean autoScale) { return call_method<SCAPIX_META_STRING("getDrawingCache"), ref<android::graphics::Bitmap>>(autoScale); }
inline void View::destroyDrawingCache() { return call_method<SCAPIX_META_STRING("destroyDrawingCache"), void>(); }
inline void View::setDrawingCacheBackgroundColor(jint color) { return call_method<SCAPIX_META_STRING("setDrawingCacheBackgroundColor"), void>(color); }
inline jint View::getDrawingCacheBackgroundColor() { return call_method<SCAPIX_META_STRING("getDrawingCacheBackgroundColor"), jint>(); }
inline void View::buildDrawingCache() { return call_method<SCAPIX_META_STRING("buildDrawingCache"), void>(); }
inline void View::buildDrawingCache(jboolean autoScale) { return call_method<SCAPIX_META_STRING("buildDrawingCache"), void>(autoScale); }
inline jboolean View::isInEditMode() { return call_method<SCAPIX_META_STRING("isInEditMode"), jboolean>(); }
inline jboolean View::isHardwareAccelerated() { return call_method<SCAPIX_META_STRING("isHardwareAccelerated"), jboolean>(); }
inline void View::setClipBounds(ref<android::graphics::Rect> clipBounds) { return call_method<SCAPIX_META_STRING("setClipBounds"), void>(clipBounds); }
inline ref<android::graphics::Rect> View::getClipBounds() { return call_method<SCAPIX_META_STRING("getClipBounds"), ref<android::graphics::Rect>>(); }
inline jboolean View::getClipBounds(ref<android::graphics::Rect> outRect) { return call_method<SCAPIX_META_STRING("getClipBounds"), jboolean>(outRect); }
inline void View::draw(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("draw"), void>(canvas); }
inline ref<android::view::ViewOverlay> View::getOverlay() { return call_method<SCAPIX_META_STRING("getOverlay"), ref<android::view::ViewOverlay>>(); }
inline jint View::getSolidColor() { return call_method<SCAPIX_META_STRING("getSolidColor"), jint>(); }
inline jboolean View::isLayoutRequested() { return call_method<SCAPIX_META_STRING("isLayoutRequested"), jboolean>(); }
inline void View::layout(jint l, jint t, jint r, jint b) { return call_method<SCAPIX_META_STRING("layout"), void>(l, t, r, b); }
inline ref<android::content::res::Resources> View::getResources() { return call_method<SCAPIX_META_STRING("getResources"), ref<android::content::res::Resources>>(); }
inline void View::invalidateDrawable(ref<android::graphics::drawable::Drawable> drawable) { return call_method<SCAPIX_META_STRING("invalidateDrawable"), void>(drawable); }
inline void View::scheduleDrawable(ref<android::graphics::drawable::Drawable> who, ref<java::lang::Runnable> what, jlong when) { return call_method<SCAPIX_META_STRING("scheduleDrawable"), void>(who, what, when); }
inline void View::unscheduleDrawable(ref<android::graphics::drawable::Drawable> who, ref<java::lang::Runnable> what) { return call_method<SCAPIX_META_STRING("unscheduleDrawable"), void>(who, what); }
inline void View::unscheduleDrawable(ref<android::graphics::drawable::Drawable> who) { return call_method<SCAPIX_META_STRING("unscheduleDrawable"), void>(who); }
inline void View::drawableHotspotChanged(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("drawableHotspotChanged"), void>(x, y); }
inline void View::dispatchDrawableHotspotChanged(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("dispatchDrawableHotspotChanged"), void>(x, y); }
inline void View::refreshDrawableState() { return call_method<SCAPIX_META_STRING("refreshDrawableState"), void>(); }
inline ref<link::java::array<jint>> View::getDrawableState() { return call_method<SCAPIX_META_STRING("getDrawableState"), ref<link::java::array<jint>>>(); }
inline void View::jumpDrawablesToCurrentState() { return call_method<SCAPIX_META_STRING("jumpDrawablesToCurrentState"), void>(); }
inline void View::setBackgroundColor(jint color) { return call_method<SCAPIX_META_STRING("setBackgroundColor"), void>(color); }
inline void View::setBackgroundResource(jint resid) { return call_method<SCAPIX_META_STRING("setBackgroundResource"), void>(resid); }
inline void View::setBackground(ref<android::graphics::drawable::Drawable> background) { return call_method<SCAPIX_META_STRING("setBackground"), void>(background); }
inline void View::setBackgroundDrawable(ref<android::graphics::drawable::Drawable> background) { return call_method<SCAPIX_META_STRING("setBackgroundDrawable"), void>(background); }
inline ref<android::graphics::drawable::Drawable> View::getBackground() { return call_method<SCAPIX_META_STRING("getBackground"), ref<android::graphics::drawable::Drawable>>(); }
inline void View::setBackgroundTintList(ref<android::content::res::ColorStateList> tint) { return call_method<SCAPIX_META_STRING("setBackgroundTintList"), void>(tint); }
inline ref<android::content::res::ColorStateList> View::getBackgroundTintList() { return call_method<SCAPIX_META_STRING("getBackgroundTintList"), ref<android::content::res::ColorStateList>>(); }
inline void View::setBackgroundTintMode(ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<SCAPIX_META_STRING("setBackgroundTintMode"), void>(tintMode); }
inline ref<android::graphics::PorterDuff_Mode> View::getBackgroundTintMode() { return call_method<SCAPIX_META_STRING("getBackgroundTintMode"), ref<android::graphics::PorterDuff_Mode>>(); }
inline ref<android::graphics::drawable::Drawable> View::getForeground() { return call_method<SCAPIX_META_STRING("getForeground"), ref<android::graphics::drawable::Drawable>>(); }
inline void View::setForeground(ref<android::graphics::drawable::Drawable> foreground) { return call_method<SCAPIX_META_STRING("setForeground"), void>(foreground); }
inline jint View::getForegroundGravity() { return call_method<SCAPIX_META_STRING("getForegroundGravity"), jint>(); }
inline void View::setForegroundGravity(jint gravity) { return call_method<SCAPIX_META_STRING("setForegroundGravity"), void>(gravity); }
inline void View::setForegroundTintList(ref<android::content::res::ColorStateList> tint) { return call_method<SCAPIX_META_STRING("setForegroundTintList"), void>(tint); }
inline ref<android::content::res::ColorStateList> View::getForegroundTintList() { return call_method<SCAPIX_META_STRING("getForegroundTintList"), ref<android::content::res::ColorStateList>>(); }
inline void View::setForegroundTintMode(ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<SCAPIX_META_STRING("setForegroundTintMode"), void>(tintMode); }
inline ref<android::graphics::PorterDuff_Mode> View::getForegroundTintMode() { return call_method<SCAPIX_META_STRING("getForegroundTintMode"), ref<android::graphics::PorterDuff_Mode>>(); }
inline void View::onDrawForeground(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("onDrawForeground"), void>(canvas); }
inline void View::setPadding(jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("setPadding"), void>(left, top, right, bottom); }
inline void View::setPaddingRelative(jint start, jint top, jint end, jint bottom) { return call_method<SCAPIX_META_STRING("setPaddingRelative"), void>(start, top, end, bottom); }
inline jint View::getPaddingTop() { return call_method<SCAPIX_META_STRING("getPaddingTop"), jint>(); }
inline jint View::getPaddingBottom() { return call_method<SCAPIX_META_STRING("getPaddingBottom"), jint>(); }
inline jint View::getPaddingLeft() { return call_method<SCAPIX_META_STRING("getPaddingLeft"), jint>(); }
inline jint View::getPaddingStart() { return call_method<SCAPIX_META_STRING("getPaddingStart"), jint>(); }
inline jint View::getPaddingRight() { return call_method<SCAPIX_META_STRING("getPaddingRight"), jint>(); }
inline jint View::getPaddingEnd() { return call_method<SCAPIX_META_STRING("getPaddingEnd"), jint>(); }
inline jboolean View::isPaddingRelative() { return call_method<SCAPIX_META_STRING("isPaddingRelative"), jboolean>(); }
inline void View::setSelected(jboolean selected) { return call_method<SCAPIX_META_STRING("setSelected"), void>(selected); }
inline jboolean View::isSelected() { return call_method<SCAPIX_META_STRING("isSelected"), jboolean>(); }
inline void View::setActivated(jboolean activated) { return call_method<SCAPIX_META_STRING("setActivated"), void>(activated); }
inline jboolean View::isActivated() { return call_method<SCAPIX_META_STRING("isActivated"), jboolean>(); }
inline ref<android::view::ViewTreeObserver> View::getViewTreeObserver() { return call_method<SCAPIX_META_STRING("getViewTreeObserver"), ref<android::view::ViewTreeObserver>>(); }
inline ref<android::view::View> View::getRootView() { return call_method<SCAPIX_META_STRING("getRootView"), ref<android::view::View>>(); }
inline void View::getLocationOnScreen(ref<link::java::array<jint>> outLocation) { return call_method<SCAPIX_META_STRING("getLocationOnScreen"), void>(outLocation); }
inline void View::getLocationInWindow(ref<link::java::array<jint>> outLocation) { return call_method<SCAPIX_META_STRING("getLocationInWindow"), void>(outLocation); }
inline ref<android::view::View> View::findViewById(jint id) { return call_method<SCAPIX_META_STRING("findViewById"), ref<android::view::View>>(id); }
inline ref<android::view::View> View::requireViewById(jint id) { return call_method<SCAPIX_META_STRING("requireViewById"), ref<android::view::View>>(id); }
inline ref<android::view::View> View::findViewWithTag(ref<java::lang::Object> tag) { return call_method<SCAPIX_META_STRING("findViewWithTag"), ref<android::view::View>>(tag); }
inline void View::setId(jint id) { return call_method<SCAPIX_META_STRING("setId"), void>(id); }
inline jint View::getId() { return call_method<SCAPIX_META_STRING("getId"), jint>(); }
inline ref<java::lang::Object> View::getTag() { return call_method<SCAPIX_META_STRING("getTag"), ref<java::lang::Object>>(); }
inline void View::setTag(ref<java::lang::Object> tag) { return call_method<SCAPIX_META_STRING("setTag"), void>(tag); }
inline ref<java::lang::Object> View::getTag(jint key) { return call_method<SCAPIX_META_STRING("getTag"), ref<java::lang::Object>>(key); }
inline void View::setTag(jint key, ref<java::lang::Object> tag) { return call_method<SCAPIX_META_STRING("setTag"), void>(key, tag); }
inline jint View::getBaseline() { return call_method<SCAPIX_META_STRING("getBaseline"), jint>(); }
inline jboolean View::isInLayout() { return call_method<SCAPIX_META_STRING("isInLayout"), jboolean>(); }
inline void View::requestLayout() { return call_method<SCAPIX_META_STRING("requestLayout"), void>(); }
inline void View::forceLayout() { return call_method<SCAPIX_META_STRING("forceLayout"), void>(); }
inline void View::measure(jint widthMeasureSpec, jint heightMeasureSpec) { return call_method<SCAPIX_META_STRING("measure"), void>(widthMeasureSpec, heightMeasureSpec); }
inline jint View::combineMeasuredStates(jint curState, jint newState) { return call_static_method<SCAPIX_META_STRING("combineMeasuredStates"), jint>(curState, newState); }
inline jint View::resolveSize(jint size, jint measureSpec) { return call_static_method<SCAPIX_META_STRING("resolveSize"), jint>(size, measureSpec); }
inline jint View::resolveSizeAndState(jint size, jint measureSpec, jint childMeasuredState) { return call_static_method<SCAPIX_META_STRING("resolveSizeAndState"), jint>(size, measureSpec, childMeasuredState); }
inline jint View::getDefaultSize(jint size, jint measureSpec) { return call_static_method<SCAPIX_META_STRING("getDefaultSize"), jint>(size, measureSpec); }
inline jint View::getMinimumHeight() { return call_method<SCAPIX_META_STRING("getMinimumHeight"), jint>(); }
inline void View::setMinimumHeight(jint minHeight) { return call_method<SCAPIX_META_STRING("setMinimumHeight"), void>(minHeight); }
inline jint View::getMinimumWidth() { return call_method<SCAPIX_META_STRING("getMinimumWidth"), jint>(); }
inline void View::setMinimumWidth(jint minWidth) { return call_method<SCAPIX_META_STRING("setMinimumWidth"), void>(minWidth); }
inline ref<android::view::animation::Animation> View::getAnimation() { return call_method<SCAPIX_META_STRING("getAnimation"), ref<android::view::animation::Animation>>(); }
inline void View::startAnimation(ref<android::view::animation::Animation> animation) { return call_method<SCAPIX_META_STRING("startAnimation"), void>(animation); }
inline void View::clearAnimation() { return call_method<SCAPIX_META_STRING("clearAnimation"), void>(); }
inline void View::setAnimation(ref<android::view::animation::Animation> animation) { return call_method<SCAPIX_META_STRING("setAnimation"), void>(animation); }
inline void View::playSoundEffect(jint soundConstant) { return call_method<SCAPIX_META_STRING("playSoundEffect"), void>(soundConstant); }
inline jboolean View::performHapticFeedback(jint feedbackConstant) { return call_method<SCAPIX_META_STRING("performHapticFeedback"), jboolean>(feedbackConstant); }
inline jboolean View::performHapticFeedback(jint feedbackConstant, jint flags) { return call_method<SCAPIX_META_STRING("performHapticFeedback"), jboolean>(feedbackConstant, flags); }
inline void View::setSystemUiVisibility(jint visibility) { return call_method<SCAPIX_META_STRING("setSystemUiVisibility"), void>(visibility); }
inline jint View::getSystemUiVisibility() { return call_method<SCAPIX_META_STRING("getSystemUiVisibility"), jint>(); }
inline jint View::getWindowSystemUiVisibility() { return call_method<SCAPIX_META_STRING("getWindowSystemUiVisibility"), jint>(); }
inline void View::onWindowSystemUiVisibilityChanged(jint visible) { return call_method<SCAPIX_META_STRING("onWindowSystemUiVisibilityChanged"), void>(visible); }
inline void View::dispatchWindowSystemUiVisiblityChanged(jint visible) { return call_method<SCAPIX_META_STRING("dispatchWindowSystemUiVisiblityChanged"), void>(visible); }
inline void View::setOnSystemUiVisibilityChangeListener(ref<android::view::View_OnSystemUiVisibilityChangeListener> l) { return call_method<SCAPIX_META_STRING("setOnSystemUiVisibilityChangeListener"), void>(l); }
inline void View::dispatchSystemUiVisibilityChanged(jint visibility) { return call_method<SCAPIX_META_STRING("dispatchSystemUiVisibilityChanged"), void>(visibility); }
inline jboolean View::startDrag(ref<android::content::ClipData> data, ref<android::view::View_DragShadowBuilder> shadowBuilder, ref<java::lang::Object> myLocalState, jint flags) { return call_method<SCAPIX_META_STRING("startDrag"), jboolean>(data, shadowBuilder, myLocalState, flags); }
inline jboolean View::startDragAndDrop(ref<android::content::ClipData> data, ref<android::view::View_DragShadowBuilder> shadowBuilder, ref<java::lang::Object> myLocalState, jint flags) { return call_method<SCAPIX_META_STRING("startDragAndDrop"), jboolean>(data, shadowBuilder, myLocalState, flags); }
inline void View::cancelDragAndDrop() { return call_method<SCAPIX_META_STRING("cancelDragAndDrop"), void>(); }
inline void View::updateDragShadow(ref<android::view::View_DragShadowBuilder> shadowBuilder) { return call_method<SCAPIX_META_STRING("updateDragShadow"), void>(shadowBuilder); }
inline jboolean View::onDragEvent(ref<android::view::DragEvent> event) { return call_method<SCAPIX_META_STRING("onDragEvent"), jboolean>(event); }
inline jboolean View::dispatchDragEvent(ref<android::view::DragEvent> event) { return call_method<SCAPIX_META_STRING("dispatchDragEvent"), jboolean>(event); }
inline ref<android::view::View> View::inflate(ref<android::content::Context> context, jint resource, ref<android::view::ViewGroup> root) { return call_static_method<SCAPIX_META_STRING("inflate"), ref<android::view::View>>(context, resource, root); }
inline jint View::getOverScrollMode() { return call_method<SCAPIX_META_STRING("getOverScrollMode"), jint>(); }
inline void View::setOverScrollMode(jint overScrollMode) { return call_method<SCAPIX_META_STRING("setOverScrollMode"), void>(overScrollMode); }
inline void View::setNestedScrollingEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setNestedScrollingEnabled"), void>(enabled); }
inline jboolean View::isNestedScrollingEnabled() { return call_method<SCAPIX_META_STRING("isNestedScrollingEnabled"), jboolean>(); }
inline jboolean View::startNestedScroll(jint axes) { return call_method<SCAPIX_META_STRING("startNestedScroll"), jboolean>(axes); }
inline void View::stopNestedScroll() { return call_method<SCAPIX_META_STRING("stopNestedScroll"), void>(); }
inline jboolean View::hasNestedScrollingParent() { return call_method<SCAPIX_META_STRING("hasNestedScrollingParent"), jboolean>(); }
inline jboolean View::dispatchNestedScroll(jint dxConsumed, jint dyConsumed, jint dxUnconsumed, jint dyUnconsumed, ref<link::java::array<jint>> offsetInWindow) { return call_method<SCAPIX_META_STRING("dispatchNestedScroll"), jboolean>(dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed, offsetInWindow); }
inline jboolean View::dispatchNestedPreScroll(jint dx, jint dy, ref<link::java::array<jint>> consumed, ref<link::java::array<jint>> offsetInWindow) { return call_method<SCAPIX_META_STRING("dispatchNestedPreScroll"), jboolean>(dx, dy, consumed, offsetInWindow); }
inline jboolean View::dispatchNestedFling(jfloat velocityX, jfloat velocityY, jboolean consumed) { return call_method<SCAPIX_META_STRING("dispatchNestedFling"), jboolean>(velocityX, velocityY, consumed); }
inline jboolean View::dispatchNestedPreFling(jfloat velocityX, jfloat velocityY) { return call_method<SCAPIX_META_STRING("dispatchNestedPreFling"), jboolean>(velocityX, velocityY); }
inline void View::setTextDirection(jint textDirection) { return call_method<SCAPIX_META_STRING("setTextDirection"), void>(textDirection); }
inline jint View::getTextDirection() { return call_method<SCAPIX_META_STRING("getTextDirection"), jint>(); }
inline jboolean View::canResolveTextDirection() { return call_method<SCAPIX_META_STRING("canResolveTextDirection"), jboolean>(); }
inline jboolean View::isTextDirectionResolved() { return call_method<SCAPIX_META_STRING("isTextDirectionResolved"), jboolean>(); }
inline void View::setTextAlignment(jint textAlignment) { return call_method<SCAPIX_META_STRING("setTextAlignment"), void>(textAlignment); }
inline jint View::getTextAlignment() { return call_method<SCAPIX_META_STRING("getTextAlignment"), jint>(); }
inline jboolean View::canResolveTextAlignment() { return call_method<SCAPIX_META_STRING("canResolveTextAlignment"), jboolean>(); }
inline jboolean View::isTextAlignmentResolved() { return call_method<SCAPIX_META_STRING("isTextAlignmentResolved"), jboolean>(); }
inline jint View::generateViewId() { return call_static_method<SCAPIX_META_STRING("generateViewId"), jint>(); }
inline ref<android::view::PointerIcon> View::onResolvePointerIcon(ref<android::view::MotionEvent> event, jint pointerIndex) { return call_method<SCAPIX_META_STRING("onResolvePointerIcon"), ref<android::view::PointerIcon>>(event, pointerIndex); }
inline void View::setPointerIcon(ref<android::view::PointerIcon> pointerIcon) { return call_method<SCAPIX_META_STRING("setPointerIcon"), void>(pointerIcon); }
inline ref<android::view::PointerIcon> View::getPointerIcon() { return call_method<SCAPIX_META_STRING("getPointerIcon"), ref<android::view::PointerIcon>>(); }
inline jboolean View::hasPointerCapture() { return call_method<SCAPIX_META_STRING("hasPointerCapture"), jboolean>(); }
inline void View::requestPointerCapture() { return call_method<SCAPIX_META_STRING("requestPointerCapture"), void>(); }
inline void View::releasePointerCapture() { return call_method<SCAPIX_META_STRING("releasePointerCapture"), void>(); }
inline void View::onPointerCaptureChange(jboolean hasCapture) { return call_method<SCAPIX_META_STRING("onPointerCaptureChange"), void>(hasCapture); }
inline void View::dispatchPointerCaptureChanged(jboolean hasCapture) { return call_method<SCAPIX_META_STRING("dispatchPointerCaptureChanged"), void>(hasCapture); }
inline jboolean View::onCapturedPointerEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onCapturedPointerEvent"), jboolean>(event); }
inline void View::setOnCapturedPointerListener(ref<android::view::View_OnCapturedPointerListener> l) { return call_method<SCAPIX_META_STRING("setOnCapturedPointerListener"), void>(l); }
inline ref<android::view::ViewPropertyAnimator> View::animate() { return call_method<SCAPIX_META_STRING("animate"), ref<android::view::ViewPropertyAnimator>>(); }
inline void View::setTransitionName(ref<java::lang::String> transitionName) { return call_method<SCAPIX_META_STRING("setTransitionName"), void>(transitionName); }
inline ref<java::lang::String> View::getTransitionName() { return call_method<SCAPIX_META_STRING("getTransitionName"), ref<java::lang::String>>(); }
inline void View::setTooltipText(ref<java::lang::CharSequence> tooltipText) { return call_method<SCAPIX_META_STRING("setTooltipText"), void>(tooltipText); }
inline ref<java::lang::CharSequence> View::getTooltipText() { return call_method<SCAPIX_META_STRING("getTooltipText"), ref<java::lang::CharSequence>>(); }
inline void View::addOnUnhandledKeyEventListener(ref<android::view::View_OnUnhandledKeyEventListener> listener) { return call_method<SCAPIX_META_STRING("addOnUnhandledKeyEventListener"), void>(listener); }
inline void View::removeOnUnhandledKeyEventListener(ref<android::view::View_OnUnhandledKeyEventListener> listener) { return call_method<SCAPIX_META_STRING("removeOnUnhandledKeyEventListener"), void>(listener); }

} // namespace android::view
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_VIEW_H
