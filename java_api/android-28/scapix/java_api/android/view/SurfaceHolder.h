// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_VIEW_SURFACEHOLDER_H
#define SCAPIX_ANDROID_VIEW_SURFACEHOLDER_H

namespace scapix::java_api {

namespace android::graphics { class Canvas; }
namespace android::graphics { class Rect; }
namespace android::view { class Surface; }
namespace android::view { class SurfaceHolder_Callback; }
namespace android::view { class SurfaceHolder_Callback2; }
namespace android::view { class SurfaceHolder_BadSurfaceTypeException; }

namespace android::view {

class SurfaceHolder : public object_base<SCAPIX_META_STRING("android/view/SurfaceHolder"),
	java::lang::Object>
{
public:

	using Callback2 = SurfaceHolder_Callback2;
	using Callback = SurfaceHolder_Callback;
	using BadSurfaceTypeException = SurfaceHolder_BadSurfaceTypeException;

	static jint SURFACE_TYPE_GPU_();
	static jint SURFACE_TYPE_HARDWARE_();
	static jint SURFACE_TYPE_NORMAL_();
	static jint SURFACE_TYPE_PUSH_BUFFERS_();

	void addCallback(ref<android::view::SurfaceHolder_Callback> p1);
	void removeCallback(ref<android::view::SurfaceHolder_Callback> p1);
	jboolean isCreating();
	void setType(jint p1);
	void setFixedSize(jint p1, jint p2);
	void setSizeFromLayout();
	void setFormat(jint p1);
	void setKeepScreenOn(jboolean p1);
	ref<android::graphics::Canvas> lockCanvas();
	ref<android::graphics::Canvas> lockCanvas(ref<android::graphics::Rect> p1);
	ref<android::graphics::Canvas> lockHardwareCanvas();
	void unlockCanvasAndPost(ref<android::graphics::Canvas> p1);
	ref<android::graphics::Rect> getSurfaceFrame();
	ref<android::view::Surface> getSurface();

protected:

	SurfaceHolder(handle_type h) : base_(h) {}

};

} // namespace android::view
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/android/view/SurfaceHolder_Callback.h>

namespace scapix::java_api {
namespace android::view {

inline jint SurfaceHolder::SURFACE_TYPE_GPU_() { return get_static_field<SCAPIX_META_STRING("SURFACE_TYPE_GPU"), jint>(); }
inline jint SurfaceHolder::SURFACE_TYPE_HARDWARE_() { return get_static_field<SCAPIX_META_STRING("SURFACE_TYPE_HARDWARE"), jint>(); }
inline jint SurfaceHolder::SURFACE_TYPE_NORMAL_() { return get_static_field<SCAPIX_META_STRING("SURFACE_TYPE_NORMAL"), jint>(); }
inline jint SurfaceHolder::SURFACE_TYPE_PUSH_BUFFERS_() { return get_static_field<SCAPIX_META_STRING("SURFACE_TYPE_PUSH_BUFFERS"), jint>(); }
inline void SurfaceHolder::addCallback(ref<android::view::SurfaceHolder_Callback> p1) { return call_method<SCAPIX_META_STRING("addCallback"), void>(p1); }
inline void SurfaceHolder::removeCallback(ref<android::view::SurfaceHolder_Callback> p1) { return call_method<SCAPIX_META_STRING("removeCallback"), void>(p1); }
inline jboolean SurfaceHolder::isCreating() { return call_method<SCAPIX_META_STRING("isCreating"), jboolean>(); }
inline void SurfaceHolder::setType(jint p1) { return call_method<SCAPIX_META_STRING("setType"), void>(p1); }
inline void SurfaceHolder::setFixedSize(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("setFixedSize"), void>(p1, p2); }
inline void SurfaceHolder::setSizeFromLayout() { return call_method<SCAPIX_META_STRING("setSizeFromLayout"), void>(); }
inline void SurfaceHolder::setFormat(jint p1) { return call_method<SCAPIX_META_STRING("setFormat"), void>(p1); }
inline void SurfaceHolder::setKeepScreenOn(jboolean p1) { return call_method<SCAPIX_META_STRING("setKeepScreenOn"), void>(p1); }
inline ref<android::graphics::Canvas> SurfaceHolder::lockCanvas() { return call_method<SCAPIX_META_STRING("lockCanvas"), ref<android::graphics::Canvas>>(); }
inline ref<android::graphics::Canvas> SurfaceHolder::lockCanvas(ref<android::graphics::Rect> p1) { return call_method<SCAPIX_META_STRING("lockCanvas"), ref<android::graphics::Canvas>>(p1); }
inline ref<android::graphics::Canvas> SurfaceHolder::lockHardwareCanvas() { return call_method<SCAPIX_META_STRING("lockHardwareCanvas"), ref<android::graphics::Canvas>>(); }
inline void SurfaceHolder::unlockCanvasAndPost(ref<android::graphics::Canvas> p1) { return call_method<SCAPIX_META_STRING("unlockCanvasAndPost"), void>(p1); }
inline ref<android::graphics::Rect> SurfaceHolder::getSurfaceFrame() { return call_method<SCAPIX_META_STRING("getSurfaceFrame"), ref<android::graphics::Rect>>(); }
inline ref<android::view::Surface> SurfaceHolder::getSurface() { return call_method<SCAPIX_META_STRING("getSurface"), ref<android::view::Surface>>(); }

} // namespace android::view
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_SURFACEHOLDER_H
