// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_VIEW_VIEWSTRUCTURE_H
#define SCAPIX_ANDROID_VIEW_VIEWSTRUCTURE_H

namespace scapix::java_api {

namespace android::graphics { class Matrix; }
namespace android::os { class Bundle; }
namespace android::os { class LocaleList; }
namespace android::view { class ViewStructure_HtmlInfo; }
namespace android::view { class ViewStructure_HtmlInfo_Builder; }
namespace android::view::autofill { class AutofillId; }
namespace android::view::autofill { class AutofillValue; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::view {

class ViewStructure : public object_base<SCAPIX_META_STRING("android/view/ViewStructure"),
	java::lang::Object>
{
public:

	using HtmlInfo = ViewStructure_HtmlInfo;

	static ref<ViewStructure> new_object();
	void setId(jint p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<java::lang::String> p4);
	void setDimens(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6);
	void setTransformation(ref<android::graphics::Matrix> p1);
	void setElevation(jfloat p1);
	void setAlpha(jfloat p1);
	void setVisibility(jint p1);
	void setEnabled(jboolean p1);
	void setClickable(jboolean p1);
	void setLongClickable(jboolean p1);
	void setContextClickable(jboolean p1);
	void setFocusable(jboolean p1);
	void setFocused(jboolean p1);
	void setAccessibilityFocused(jboolean p1);
	void setCheckable(jboolean p1);
	void setChecked(jboolean p1);
	void setSelected(jboolean p1);
	void setActivated(jboolean p1);
	void setOpaque(jboolean p1);
	void setClassName(ref<java::lang::String> p1);
	void setContentDescription(ref<java::lang::CharSequence> p1);
	void setText(ref<java::lang::CharSequence> p1);
	void setText(ref<java::lang::CharSequence> p1, jint p2, jint p3);
	void setTextStyle(jfloat p1, jint p2, jint p3, jint p4);
	void setTextLines(ref<link::java::array<jint>> p1, ref<link::java::array<jint>> p2);
	void setTextIdEntry(ref<java::lang::String> entryName);
	void setHint(ref<java::lang::CharSequence> p1);
	ref<java::lang::CharSequence> getText();
	jint getTextSelectionStart();
	jint getTextSelectionEnd();
	ref<java::lang::CharSequence> getHint();
	ref<android::os::Bundle> getExtras();
	jboolean hasExtras();
	void setChildCount(jint p1);
	jint addChildCount(jint p1);
	jint getChildCount();
	ref<android::view::ViewStructure> newChild(jint p1);
	ref<android::view::ViewStructure> asyncNewChild(jint p1);
	ref<android::view::autofill::AutofillId> getAutofillId();
	void setAutofillId(ref<android::view::autofill::AutofillId> p1);
	void setAutofillId(ref<android::view::autofill::AutofillId> p1, jint p2);
	void setAutofillType(jint p1);
	void setAutofillHints(ref<link::java::array<java::lang::String>> p1);
	void setAutofillValue(ref<android::view::autofill::AutofillValue> p1);
	void setAutofillOptions(ref<link::java::array<java::lang::CharSequence>> p1);
	void setImportantForAutofill(jint mode);
	void setInputType(jint p1);
	void setDataIsSensitive(jboolean p1);
	void setMinTextEms(jint minEms);
	void setMaxTextEms(jint maxEms);
	void setMaxTextLength(jint maxLength);
	void asyncCommit();
	void setWebDomain(ref<java::lang::String> p1);
	void setLocaleList(ref<android::os::LocaleList> p1);
	ref<android::view::ViewStructure_HtmlInfo_Builder> newHtmlInfoBuilder(ref<java::lang::String> p1);
	void setHtmlInfo(ref<android::view::ViewStructure_HtmlInfo> p1);

protected:

	ViewStructure(handle_type h) : base_(h) {}

};

} // namespace android::view
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Matrix.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/LocaleList.h>
#include <scapix/java_api/android/view/ViewStructure_HtmlInfo.h>
#include <scapix/java_api/android/view/ViewStructure_HtmlInfo_Builder.h>
#include <scapix/java_api/android/view/autofill/AutofillId.h>
#include <scapix/java_api/android/view/autofill/AutofillValue.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::view {

inline ref<ViewStructure> ViewStructure::new_object() { return base_::new_object(); }
inline void ViewStructure::setId(jint p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<java::lang::String> p4) { return call_method<SCAPIX_META_STRING("setId"), void>(p1, p2, p3, p4); }
inline void ViewStructure::setDimens(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<SCAPIX_META_STRING("setDimens"), void>(p1, p2, p3, p4, p5, p6); }
inline void ViewStructure::setTransformation(ref<android::graphics::Matrix> p1) { return call_method<SCAPIX_META_STRING("setTransformation"), void>(p1); }
inline void ViewStructure::setElevation(jfloat p1) { return call_method<SCAPIX_META_STRING("setElevation"), void>(p1); }
inline void ViewStructure::setAlpha(jfloat p1) { return call_method<SCAPIX_META_STRING("setAlpha"), void>(p1); }
inline void ViewStructure::setVisibility(jint p1) { return call_method<SCAPIX_META_STRING("setVisibility"), void>(p1); }
inline void ViewStructure::setEnabled(jboolean p1) { return call_method<SCAPIX_META_STRING("setEnabled"), void>(p1); }
inline void ViewStructure::setClickable(jboolean p1) { return call_method<SCAPIX_META_STRING("setClickable"), void>(p1); }
inline void ViewStructure::setLongClickable(jboolean p1) { return call_method<SCAPIX_META_STRING("setLongClickable"), void>(p1); }
inline void ViewStructure::setContextClickable(jboolean p1) { return call_method<SCAPIX_META_STRING("setContextClickable"), void>(p1); }
inline void ViewStructure::setFocusable(jboolean p1) { return call_method<SCAPIX_META_STRING("setFocusable"), void>(p1); }
inline void ViewStructure::setFocused(jboolean p1) { return call_method<SCAPIX_META_STRING("setFocused"), void>(p1); }
inline void ViewStructure::setAccessibilityFocused(jboolean p1) { return call_method<SCAPIX_META_STRING("setAccessibilityFocused"), void>(p1); }
inline void ViewStructure::setCheckable(jboolean p1) { return call_method<SCAPIX_META_STRING("setCheckable"), void>(p1); }
inline void ViewStructure::setChecked(jboolean p1) { return call_method<SCAPIX_META_STRING("setChecked"), void>(p1); }
inline void ViewStructure::setSelected(jboolean p1) { return call_method<SCAPIX_META_STRING("setSelected"), void>(p1); }
inline void ViewStructure::setActivated(jboolean p1) { return call_method<SCAPIX_META_STRING("setActivated"), void>(p1); }
inline void ViewStructure::setOpaque(jboolean p1) { return call_method<SCAPIX_META_STRING("setOpaque"), void>(p1); }
inline void ViewStructure::setClassName(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setClassName"), void>(p1); }
inline void ViewStructure::setContentDescription(ref<java::lang::CharSequence> p1) { return call_method<SCAPIX_META_STRING("setContentDescription"), void>(p1); }
inline void ViewStructure::setText(ref<java::lang::CharSequence> p1) { return call_method<SCAPIX_META_STRING("setText"), void>(p1); }
inline void ViewStructure::setText(ref<java::lang::CharSequence> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("setText"), void>(p1, p2, p3); }
inline void ViewStructure::setTextStyle(jfloat p1, jint p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("setTextStyle"), void>(p1, p2, p3, p4); }
inline void ViewStructure::setTextLines(ref<link::java::array<jint>> p1, ref<link::java::array<jint>> p2) { return call_method<SCAPIX_META_STRING("setTextLines"), void>(p1, p2); }
inline void ViewStructure::setTextIdEntry(ref<java::lang::String> entryName) { return call_method<SCAPIX_META_STRING("setTextIdEntry"), void>(entryName); }
inline void ViewStructure::setHint(ref<java::lang::CharSequence> p1) { return call_method<SCAPIX_META_STRING("setHint"), void>(p1); }
inline ref<java::lang::CharSequence> ViewStructure::getText() { return call_method<SCAPIX_META_STRING("getText"), ref<java::lang::CharSequence>>(); }
inline jint ViewStructure::getTextSelectionStart() { return call_method<SCAPIX_META_STRING("getTextSelectionStart"), jint>(); }
inline jint ViewStructure::getTextSelectionEnd() { return call_method<SCAPIX_META_STRING("getTextSelectionEnd"), jint>(); }
inline ref<java::lang::CharSequence> ViewStructure::getHint() { return call_method<SCAPIX_META_STRING("getHint"), ref<java::lang::CharSequence>>(); }
inline ref<android::os::Bundle> ViewStructure::getExtras() { return call_method<SCAPIX_META_STRING("getExtras"), ref<android::os::Bundle>>(); }
inline jboolean ViewStructure::hasExtras() { return call_method<SCAPIX_META_STRING("hasExtras"), jboolean>(); }
inline void ViewStructure::setChildCount(jint p1) { return call_method<SCAPIX_META_STRING("setChildCount"), void>(p1); }
inline jint ViewStructure::addChildCount(jint p1) { return call_method<SCAPIX_META_STRING("addChildCount"), jint>(p1); }
inline jint ViewStructure::getChildCount() { return call_method<SCAPIX_META_STRING("getChildCount"), jint>(); }
inline ref<android::view::ViewStructure> ViewStructure::newChild(jint p1) { return call_method<SCAPIX_META_STRING("newChild"), ref<android::view::ViewStructure>>(p1); }
inline ref<android::view::ViewStructure> ViewStructure::asyncNewChild(jint p1) { return call_method<SCAPIX_META_STRING("asyncNewChild"), ref<android::view::ViewStructure>>(p1); }
inline ref<android::view::autofill::AutofillId> ViewStructure::getAutofillId() { return call_method<SCAPIX_META_STRING("getAutofillId"), ref<android::view::autofill::AutofillId>>(); }
inline void ViewStructure::setAutofillId(ref<android::view::autofill::AutofillId> p1) { return call_method<SCAPIX_META_STRING("setAutofillId"), void>(p1); }
inline void ViewStructure::setAutofillId(ref<android::view::autofill::AutofillId> p1, jint p2) { return call_method<SCAPIX_META_STRING("setAutofillId"), void>(p1, p2); }
inline void ViewStructure::setAutofillType(jint p1) { return call_method<SCAPIX_META_STRING("setAutofillType"), void>(p1); }
inline void ViewStructure::setAutofillHints(ref<link::java::array<java::lang::String>> p1) { return call_method<SCAPIX_META_STRING("setAutofillHints"), void>(p1); }
inline void ViewStructure::setAutofillValue(ref<android::view::autofill::AutofillValue> p1) { return call_method<SCAPIX_META_STRING("setAutofillValue"), void>(p1); }
inline void ViewStructure::setAutofillOptions(ref<link::java::array<java::lang::CharSequence>> p1) { return call_method<SCAPIX_META_STRING("setAutofillOptions"), void>(p1); }
inline void ViewStructure::setImportantForAutofill(jint mode) { return call_method<SCAPIX_META_STRING("setImportantForAutofill"), void>(mode); }
inline void ViewStructure::setInputType(jint p1) { return call_method<SCAPIX_META_STRING("setInputType"), void>(p1); }
inline void ViewStructure::setDataIsSensitive(jboolean p1) { return call_method<SCAPIX_META_STRING("setDataIsSensitive"), void>(p1); }
inline void ViewStructure::setMinTextEms(jint minEms) { return call_method<SCAPIX_META_STRING("setMinTextEms"), void>(minEms); }
inline void ViewStructure::setMaxTextEms(jint maxEms) { return call_method<SCAPIX_META_STRING("setMaxTextEms"), void>(maxEms); }
inline void ViewStructure::setMaxTextLength(jint maxLength) { return call_method<SCAPIX_META_STRING("setMaxTextLength"), void>(maxLength); }
inline void ViewStructure::asyncCommit() { return call_method<SCAPIX_META_STRING("asyncCommit"), void>(); }
inline void ViewStructure::setWebDomain(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setWebDomain"), void>(p1); }
inline void ViewStructure::setLocaleList(ref<android::os::LocaleList> p1) { return call_method<SCAPIX_META_STRING("setLocaleList"), void>(p1); }
inline ref<android::view::ViewStructure_HtmlInfo_Builder> ViewStructure::newHtmlInfoBuilder(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("newHtmlInfoBuilder"), ref<android::view::ViewStructure_HtmlInfo_Builder>>(p1); }
inline void ViewStructure::setHtmlInfo(ref<android::view::ViewStructure_HtmlInfo> p1) { return call_method<SCAPIX_META_STRING("setHtmlInfo"), void>(p1); }

} // namespace android::view
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_VIEWSTRUCTURE_H
