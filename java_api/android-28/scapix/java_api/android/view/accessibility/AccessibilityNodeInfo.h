// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_VIEW_ACCESSIBILITY_ACCESSIBILITYNODEINFO_H
#define SCAPIX_ANDROID_VIEW_ACCESSIBILITY_ACCESSIBILITYNODEINFO_H

namespace scapix::java_api {

namespace android::graphics { class Rect; }
namespace android::os { class Bundle; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::view { class View; }
namespace android::view::accessibility { class AccessibilityNodeInfo_AccessibilityAction; }
namespace android::view::accessibility { class AccessibilityNodeInfo_CollectionInfo; }
namespace android::view::accessibility { class AccessibilityNodeInfo_CollectionItemInfo; }
namespace android::view::accessibility { class AccessibilityNodeInfo_RangeInfo; }
namespace android::view::accessibility { class AccessibilityWindowInfo; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::util { class List; }

namespace android::view::accessibility {

class AccessibilityNodeInfo : public object_base<SCAPIX_META_STRING("android/view/accessibility/AccessibilityNodeInfo"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using RangeInfo = AccessibilityNodeInfo_RangeInfo;
	using CollectionItemInfo = AccessibilityNodeInfo_CollectionItemInfo;
	using CollectionInfo = AccessibilityNodeInfo_CollectionInfo;
	using AccessibilityAction = AccessibilityNodeInfo_AccessibilityAction;

	static jint ACTION_ACCESSIBILITY_FOCUS_();
	static ref<java::lang::String> ACTION_ARGUMENT_COLUMN_INT_();
	static ref<java::lang::String> ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN_();
	static ref<java::lang::String> ACTION_ARGUMENT_HTML_ELEMENT_STRING_();
	static ref<java::lang::String> ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT_();
	static ref<java::lang::String> ACTION_ARGUMENT_MOVE_WINDOW_X_();
	static ref<java::lang::String> ACTION_ARGUMENT_MOVE_WINDOW_Y_();
	static ref<java::lang::String> ACTION_ARGUMENT_PROGRESS_VALUE_();
	static ref<java::lang::String> ACTION_ARGUMENT_ROW_INT_();
	static ref<java::lang::String> ACTION_ARGUMENT_SELECTION_END_INT_();
	static ref<java::lang::String> ACTION_ARGUMENT_SELECTION_START_INT_();
	static ref<java::lang::String> ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE_();
	static jint ACTION_CLEAR_ACCESSIBILITY_FOCUS_();
	static jint ACTION_CLEAR_FOCUS_();
	static jint ACTION_CLEAR_SELECTION_();
	static jint ACTION_CLICK_();
	static jint ACTION_COLLAPSE_();
	static jint ACTION_COPY_();
	static jint ACTION_CUT_();
	static jint ACTION_DISMISS_();
	static jint ACTION_EXPAND_();
	static jint ACTION_FOCUS_();
	static jint ACTION_LONG_CLICK_();
	static jint ACTION_NEXT_AT_MOVEMENT_GRANULARITY_();
	static jint ACTION_NEXT_HTML_ELEMENT_();
	static jint ACTION_PASTE_();
	static jint ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY_();
	static jint ACTION_PREVIOUS_HTML_ELEMENT_();
	static jint ACTION_SCROLL_BACKWARD_();
	static jint ACTION_SCROLL_FORWARD_();
	static jint ACTION_SELECT_();
	static jint ACTION_SET_SELECTION_();
	static jint ACTION_SET_TEXT_();
	static ref<android::os::Parcelable_Creator> CREATOR_();
	static ref<java::lang::String> EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH_();
	static ref<java::lang::String> EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX_();
	static ref<java::lang::String> EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY_();
	static jint FOCUS_ACCESSIBILITY_();
	static jint FOCUS_INPUT_();
	static jint MOVEMENT_GRANULARITY_CHARACTER_();
	static jint MOVEMENT_GRANULARITY_LINE_();
	static jint MOVEMENT_GRANULARITY_PAGE_();
	static jint MOVEMENT_GRANULARITY_PARAGRAPH_();
	static jint MOVEMENT_GRANULARITY_WORD_();

	void setSource(ref<android::view::View> source);
	void setSource(ref<android::view::View> root, jint virtualDescendantId);
	ref<android::view::accessibility::AccessibilityNodeInfo> findFocus(jint focus);
	ref<android::view::accessibility::AccessibilityNodeInfo> focusSearch(jint direction);
	jint getWindowId();
	jboolean refresh();
	jboolean refreshWithExtraData(ref<java::lang::String> extraDataKey, ref<android::os::Bundle> args);
	jint getChildCount();
	ref<android::view::accessibility::AccessibilityNodeInfo> getChild(jint index);
	void addChild(ref<android::view::View> child);
	jboolean removeChild(ref<android::view::View> child);
	void addChild(ref<android::view::View> root, jint virtualDescendantId);
	jboolean removeChild(ref<android::view::View> root, jint virtualDescendantId);
	ref<java::util::List> getActionList();
	jint getActions();
	void addAction(ref<android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction> action);
	void addAction(jint action);
	void removeAction(jint action);
	jboolean removeAction(ref<android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction> action);
	ref<android::view::accessibility::AccessibilityNodeInfo> getTraversalBefore();
	void setTraversalBefore(ref<android::view::View> view);
	void setTraversalBefore(ref<android::view::View> root, jint virtualDescendantId);
	ref<android::view::accessibility::AccessibilityNodeInfo> getTraversalAfter();
	void setTraversalAfter(ref<android::view::View> view);
	void setTraversalAfter(ref<android::view::View> root, jint virtualDescendantId);
	ref<java::util::List> getAvailableExtraData();
	void setAvailableExtraData(ref<java::util::List> extraDataKeys);
	void setMaxTextLength(jint max);
	jint getMaxTextLength();
	void setMovementGranularities(jint granularities);
	jint getMovementGranularities();
	jboolean performAction(jint action);
	jboolean performAction(jint action, ref<android::os::Bundle> arguments);
	ref<java::util::List> findAccessibilityNodeInfosByText(ref<java::lang::String> text);
	ref<java::util::List> findAccessibilityNodeInfosByViewId(ref<java::lang::String> viewId);
	ref<android::view::accessibility::AccessibilityWindowInfo> getWindow();
	ref<android::view::accessibility::AccessibilityNodeInfo> getParent();
	void setParent(ref<android::view::View> parent);
	void setParent(ref<android::view::View> root, jint virtualDescendantId);
	void getBoundsInParent(ref<android::graphics::Rect> outBounds);
	void setBoundsInParent(ref<android::graphics::Rect> bounds);
	void getBoundsInScreen(ref<android::graphics::Rect> outBounds);
	void setBoundsInScreen(ref<android::graphics::Rect> bounds);
	jboolean isCheckable();
	void setCheckable(jboolean checkable);
	jboolean isChecked();
	void setChecked(jboolean checked);
	jboolean isFocusable();
	void setFocusable(jboolean focusable);
	jboolean isFocused();
	void setFocused(jboolean focused);
	jboolean isVisibleToUser();
	void setVisibleToUser(jboolean visibleToUser);
	jboolean isAccessibilityFocused();
	void setAccessibilityFocused(jboolean focused);
	jboolean isSelected();
	void setSelected(jboolean selected);
	jboolean isClickable();
	void setClickable(jboolean clickable);
	jboolean isLongClickable();
	void setLongClickable(jboolean longClickable);
	jboolean isEnabled();
	void setEnabled(jboolean enabled);
	jboolean isPassword();
	void setPassword(jboolean password);
	jboolean isScrollable();
	void setScrollable(jboolean scrollable);
	jboolean isEditable();
	void setEditable(jboolean editable);
	void setPaneTitle(ref<java::lang::CharSequence> paneTitle);
	ref<java::lang::CharSequence> getPaneTitle();
	jint getDrawingOrder();
	void setDrawingOrder(jint drawingOrderInParent);
	ref<android::view::accessibility::AccessibilityNodeInfo_CollectionInfo> getCollectionInfo();
	void setCollectionInfo(ref<android::view::accessibility::AccessibilityNodeInfo_CollectionInfo> collectionInfo);
	ref<android::view::accessibility::AccessibilityNodeInfo_CollectionItemInfo> getCollectionItemInfo();
	void setCollectionItemInfo(ref<android::view::accessibility::AccessibilityNodeInfo_CollectionItemInfo> collectionItemInfo);
	ref<android::view::accessibility::AccessibilityNodeInfo_RangeInfo> getRangeInfo();
	void setRangeInfo(ref<android::view::accessibility::AccessibilityNodeInfo_RangeInfo> rangeInfo);
	jboolean isContentInvalid();
	void setContentInvalid(jboolean contentInvalid);
	jboolean isContextClickable();
	void setContextClickable(jboolean contextClickable);
	jint getLiveRegion();
	void setLiveRegion(jint mode);
	jboolean isMultiLine();
	void setMultiLine(jboolean multiLine);
	jboolean canOpenPopup();
	void setCanOpenPopup(jboolean opensPopup);
	jboolean isDismissable();
	void setDismissable(jboolean dismissable);
	jboolean isImportantForAccessibility();
	void setImportantForAccessibility(jboolean important);
	jboolean isScreenReaderFocusable();
	void setScreenReaderFocusable(jboolean screenReaderFocusable);
	jboolean isShowingHintText();
	void setShowingHintText(jboolean showingHintText);
	jboolean isHeading();
	void setHeading(jboolean isHeading);
	ref<java::lang::CharSequence> getPackageName();
	void setPackageName(ref<java::lang::CharSequence> packageName);
	ref<java::lang::CharSequence> getClassName();
	void setClassName(ref<java::lang::CharSequence> className);
	ref<java::lang::CharSequence> getText();
	void setText(ref<java::lang::CharSequence> text);
	ref<java::lang::CharSequence> getHintText();
	void setHintText(ref<java::lang::CharSequence> hintText);
	void setError(ref<java::lang::CharSequence> error);
	ref<java::lang::CharSequence> getError();
	ref<java::lang::CharSequence> getContentDescription();
	void setContentDescription(ref<java::lang::CharSequence> contentDescription);
	ref<java::lang::CharSequence> getTooltipText();
	void setTooltipText(ref<java::lang::CharSequence> tooltipText);
	void setLabelFor(ref<android::view::View> labeled);
	void setLabelFor(ref<android::view::View> root, jint virtualDescendantId);
	ref<android::view::accessibility::AccessibilityNodeInfo> getLabelFor();
	void setLabeledBy(ref<android::view::View> label);
	void setLabeledBy(ref<android::view::View> root, jint virtualDescendantId);
	ref<android::view::accessibility::AccessibilityNodeInfo> getLabeledBy();
	void setViewIdResourceName(ref<java::lang::String> viewIdResName);
	ref<java::lang::String> getViewIdResourceName();
	jint getTextSelectionStart();
	jint getTextSelectionEnd();
	void setTextSelection(jint start, jint end);
	jint getInputType();
	void setInputType(jint inputType);
	ref<android::os::Bundle> getExtras();
	jint describeContents();
	static ref<android::view::accessibility::AccessibilityNodeInfo> obtain(ref<android::view::View> source);
	static ref<android::view::accessibility::AccessibilityNodeInfo> obtain(ref<android::view::View> root, jint virtualDescendantId);
	static ref<android::view::accessibility::AccessibilityNodeInfo> obtain();
	static ref<android::view::accessibility::AccessibilityNodeInfo> obtain(ref<android::view::accessibility::AccessibilityNodeInfo> info);
	void recycle();
	void writeToParcel(ref<android::os::Parcel> parcel, jint flags);
	jboolean equals(ref<java::lang::Object> object);
	jint hashCode();
	ref<java::lang::String> toString();

protected:

	AccessibilityNodeInfo(handle_type h) : base_(h) {}

};

} // namespace android::view::accessibility
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo_AccessibilityAction.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo_CollectionInfo.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo_CollectionItemInfo.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo_RangeInfo.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityWindowInfo.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::view::accessibility {

inline jint AccessibilityNodeInfo::ACTION_ACCESSIBILITY_FOCUS_() { return get_static_field<SCAPIX_META_STRING("ACTION_ACCESSIBILITY_FOCUS"), jint>(); }
inline ref<java::lang::String> AccessibilityNodeInfo::ACTION_ARGUMENT_COLUMN_INT_() { return get_static_field<SCAPIX_META_STRING("ACTION_ARGUMENT_COLUMN_INT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AccessibilityNodeInfo::ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN_() { return get_static_field<SCAPIX_META_STRING("ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AccessibilityNodeInfo::ACTION_ARGUMENT_HTML_ELEMENT_STRING_() { return get_static_field<SCAPIX_META_STRING("ACTION_ARGUMENT_HTML_ELEMENT_STRING"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AccessibilityNodeInfo::ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT_() { return get_static_field<SCAPIX_META_STRING("ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AccessibilityNodeInfo::ACTION_ARGUMENT_MOVE_WINDOW_X_() { return get_static_field<SCAPIX_META_STRING("ACTION_ARGUMENT_MOVE_WINDOW_X"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AccessibilityNodeInfo::ACTION_ARGUMENT_MOVE_WINDOW_Y_() { return get_static_field<SCAPIX_META_STRING("ACTION_ARGUMENT_MOVE_WINDOW_Y"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AccessibilityNodeInfo::ACTION_ARGUMENT_PROGRESS_VALUE_() { return get_static_field<SCAPIX_META_STRING("ACTION_ARGUMENT_PROGRESS_VALUE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AccessibilityNodeInfo::ACTION_ARGUMENT_ROW_INT_() { return get_static_field<SCAPIX_META_STRING("ACTION_ARGUMENT_ROW_INT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AccessibilityNodeInfo::ACTION_ARGUMENT_SELECTION_END_INT_() { return get_static_field<SCAPIX_META_STRING("ACTION_ARGUMENT_SELECTION_END_INT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AccessibilityNodeInfo::ACTION_ARGUMENT_SELECTION_START_INT_() { return get_static_field<SCAPIX_META_STRING("ACTION_ARGUMENT_SELECTION_START_INT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AccessibilityNodeInfo::ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE_() { return get_static_field<SCAPIX_META_STRING("ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE"), ref<java::lang::String>>(); }
inline jint AccessibilityNodeInfo::ACTION_CLEAR_ACCESSIBILITY_FOCUS_() { return get_static_field<SCAPIX_META_STRING("ACTION_CLEAR_ACCESSIBILITY_FOCUS"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_CLEAR_FOCUS_() { return get_static_field<SCAPIX_META_STRING("ACTION_CLEAR_FOCUS"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_CLEAR_SELECTION_() { return get_static_field<SCAPIX_META_STRING("ACTION_CLEAR_SELECTION"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_CLICK_() { return get_static_field<SCAPIX_META_STRING("ACTION_CLICK"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_COLLAPSE_() { return get_static_field<SCAPIX_META_STRING("ACTION_COLLAPSE"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_COPY_() { return get_static_field<SCAPIX_META_STRING("ACTION_COPY"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_CUT_() { return get_static_field<SCAPIX_META_STRING("ACTION_CUT"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_DISMISS_() { return get_static_field<SCAPIX_META_STRING("ACTION_DISMISS"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_EXPAND_() { return get_static_field<SCAPIX_META_STRING("ACTION_EXPAND"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_FOCUS_() { return get_static_field<SCAPIX_META_STRING("ACTION_FOCUS"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_LONG_CLICK_() { return get_static_field<SCAPIX_META_STRING("ACTION_LONG_CLICK"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_NEXT_AT_MOVEMENT_GRANULARITY_() { return get_static_field<SCAPIX_META_STRING("ACTION_NEXT_AT_MOVEMENT_GRANULARITY"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_NEXT_HTML_ELEMENT_() { return get_static_field<SCAPIX_META_STRING("ACTION_NEXT_HTML_ELEMENT"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_PASTE_() { return get_static_field<SCAPIX_META_STRING("ACTION_PASTE"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY_() { return get_static_field<SCAPIX_META_STRING("ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_PREVIOUS_HTML_ELEMENT_() { return get_static_field<SCAPIX_META_STRING("ACTION_PREVIOUS_HTML_ELEMENT"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_SCROLL_BACKWARD_() { return get_static_field<SCAPIX_META_STRING("ACTION_SCROLL_BACKWARD"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_SCROLL_FORWARD_() { return get_static_field<SCAPIX_META_STRING("ACTION_SCROLL_FORWARD"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_SELECT_() { return get_static_field<SCAPIX_META_STRING("ACTION_SELECT"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_SET_SELECTION_() { return get_static_field<SCAPIX_META_STRING("ACTION_SET_SELECTION"), jint>(); }
inline jint AccessibilityNodeInfo::ACTION_SET_TEXT_() { return get_static_field<SCAPIX_META_STRING("ACTION_SET_TEXT"), jint>(); }
inline ref<android::os::Parcelable_Creator> AccessibilityNodeInfo::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<java::lang::String> AccessibilityNodeInfo::EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH_() { return get_static_field<SCAPIX_META_STRING("EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AccessibilityNodeInfo::EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX_() { return get_static_field<SCAPIX_META_STRING("EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AccessibilityNodeInfo::EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY_() { return get_static_field<SCAPIX_META_STRING("EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY"), ref<java::lang::String>>(); }
inline jint AccessibilityNodeInfo::FOCUS_ACCESSIBILITY_() { return get_static_field<SCAPIX_META_STRING("FOCUS_ACCESSIBILITY"), jint>(); }
inline jint AccessibilityNodeInfo::FOCUS_INPUT_() { return get_static_field<SCAPIX_META_STRING("FOCUS_INPUT"), jint>(); }
inline jint AccessibilityNodeInfo::MOVEMENT_GRANULARITY_CHARACTER_() { return get_static_field<SCAPIX_META_STRING("MOVEMENT_GRANULARITY_CHARACTER"), jint>(); }
inline jint AccessibilityNodeInfo::MOVEMENT_GRANULARITY_LINE_() { return get_static_field<SCAPIX_META_STRING("MOVEMENT_GRANULARITY_LINE"), jint>(); }
inline jint AccessibilityNodeInfo::MOVEMENT_GRANULARITY_PAGE_() { return get_static_field<SCAPIX_META_STRING("MOVEMENT_GRANULARITY_PAGE"), jint>(); }
inline jint AccessibilityNodeInfo::MOVEMENT_GRANULARITY_PARAGRAPH_() { return get_static_field<SCAPIX_META_STRING("MOVEMENT_GRANULARITY_PARAGRAPH"), jint>(); }
inline jint AccessibilityNodeInfo::MOVEMENT_GRANULARITY_WORD_() { return get_static_field<SCAPIX_META_STRING("MOVEMENT_GRANULARITY_WORD"), jint>(); }
inline void AccessibilityNodeInfo::setSource(ref<android::view::View> source) { return call_method<SCAPIX_META_STRING("setSource"), void>(source); }
inline void AccessibilityNodeInfo::setSource(ref<android::view::View> root, jint virtualDescendantId) { return call_method<SCAPIX_META_STRING("setSource"), void>(root, virtualDescendantId); }
inline ref<android::view::accessibility::AccessibilityNodeInfo> AccessibilityNodeInfo::findFocus(jint focus) { return call_method<SCAPIX_META_STRING("findFocus"), ref<android::view::accessibility::AccessibilityNodeInfo>>(focus); }
inline ref<android::view::accessibility::AccessibilityNodeInfo> AccessibilityNodeInfo::focusSearch(jint direction) { return call_method<SCAPIX_META_STRING("focusSearch"), ref<android::view::accessibility::AccessibilityNodeInfo>>(direction); }
inline jint AccessibilityNodeInfo::getWindowId() { return call_method<SCAPIX_META_STRING("getWindowId"), jint>(); }
inline jboolean AccessibilityNodeInfo::refresh() { return call_method<SCAPIX_META_STRING("refresh"), jboolean>(); }
inline jboolean AccessibilityNodeInfo::refreshWithExtraData(ref<java::lang::String> extraDataKey, ref<android::os::Bundle> args) { return call_method<SCAPIX_META_STRING("refreshWithExtraData"), jboolean>(extraDataKey, args); }
inline jint AccessibilityNodeInfo::getChildCount() { return call_method<SCAPIX_META_STRING("getChildCount"), jint>(); }
inline ref<android::view::accessibility::AccessibilityNodeInfo> AccessibilityNodeInfo::getChild(jint index) { return call_method<SCAPIX_META_STRING("getChild"), ref<android::view::accessibility::AccessibilityNodeInfo>>(index); }
inline void AccessibilityNodeInfo::addChild(ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("addChild"), void>(child); }
inline jboolean AccessibilityNodeInfo::removeChild(ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("removeChild"), jboolean>(child); }
inline void AccessibilityNodeInfo::addChild(ref<android::view::View> root, jint virtualDescendantId) { return call_method<SCAPIX_META_STRING("addChild"), void>(root, virtualDescendantId); }
inline jboolean AccessibilityNodeInfo::removeChild(ref<android::view::View> root, jint virtualDescendantId) { return call_method<SCAPIX_META_STRING("removeChild"), jboolean>(root, virtualDescendantId); }
inline ref<java::util::List> AccessibilityNodeInfo::getActionList() { return call_method<SCAPIX_META_STRING("getActionList"), ref<java::util::List>>(); }
inline jint AccessibilityNodeInfo::getActions() { return call_method<SCAPIX_META_STRING("getActions"), jint>(); }
inline void AccessibilityNodeInfo::addAction(ref<android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction> action) { return call_method<SCAPIX_META_STRING("addAction"), void>(action); }
inline void AccessibilityNodeInfo::addAction(jint action) { return call_method<SCAPIX_META_STRING("addAction"), void>(action); }
inline void AccessibilityNodeInfo::removeAction(jint action) { return call_method<SCAPIX_META_STRING("removeAction"), void>(action); }
inline jboolean AccessibilityNodeInfo::removeAction(ref<android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction> action) { return call_method<SCAPIX_META_STRING("removeAction"), jboolean>(action); }
inline ref<android::view::accessibility::AccessibilityNodeInfo> AccessibilityNodeInfo::getTraversalBefore() { return call_method<SCAPIX_META_STRING("getTraversalBefore"), ref<android::view::accessibility::AccessibilityNodeInfo>>(); }
inline void AccessibilityNodeInfo::setTraversalBefore(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("setTraversalBefore"), void>(view); }
inline void AccessibilityNodeInfo::setTraversalBefore(ref<android::view::View> root, jint virtualDescendantId) { return call_method<SCAPIX_META_STRING("setTraversalBefore"), void>(root, virtualDescendantId); }
inline ref<android::view::accessibility::AccessibilityNodeInfo> AccessibilityNodeInfo::getTraversalAfter() { return call_method<SCAPIX_META_STRING("getTraversalAfter"), ref<android::view::accessibility::AccessibilityNodeInfo>>(); }
inline void AccessibilityNodeInfo::setTraversalAfter(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("setTraversalAfter"), void>(view); }
inline void AccessibilityNodeInfo::setTraversalAfter(ref<android::view::View> root, jint virtualDescendantId) { return call_method<SCAPIX_META_STRING("setTraversalAfter"), void>(root, virtualDescendantId); }
inline ref<java::util::List> AccessibilityNodeInfo::getAvailableExtraData() { return call_method<SCAPIX_META_STRING("getAvailableExtraData"), ref<java::util::List>>(); }
inline void AccessibilityNodeInfo::setAvailableExtraData(ref<java::util::List> extraDataKeys) { return call_method<SCAPIX_META_STRING("setAvailableExtraData"), void>(extraDataKeys); }
inline void AccessibilityNodeInfo::setMaxTextLength(jint max) { return call_method<SCAPIX_META_STRING("setMaxTextLength"), void>(max); }
inline jint AccessibilityNodeInfo::getMaxTextLength() { return call_method<SCAPIX_META_STRING("getMaxTextLength"), jint>(); }
inline void AccessibilityNodeInfo::setMovementGranularities(jint granularities) { return call_method<SCAPIX_META_STRING("setMovementGranularities"), void>(granularities); }
inline jint AccessibilityNodeInfo::getMovementGranularities() { return call_method<SCAPIX_META_STRING("getMovementGranularities"), jint>(); }
inline jboolean AccessibilityNodeInfo::performAction(jint action) { return call_method<SCAPIX_META_STRING("performAction"), jboolean>(action); }
inline jboolean AccessibilityNodeInfo::performAction(jint action, ref<android::os::Bundle> arguments) { return call_method<SCAPIX_META_STRING("performAction"), jboolean>(action, arguments); }
inline ref<java::util::List> AccessibilityNodeInfo::findAccessibilityNodeInfosByText(ref<java::lang::String> text) { return call_method<SCAPIX_META_STRING("findAccessibilityNodeInfosByText"), ref<java::util::List>>(text); }
inline ref<java::util::List> AccessibilityNodeInfo::findAccessibilityNodeInfosByViewId(ref<java::lang::String> viewId) { return call_method<SCAPIX_META_STRING("findAccessibilityNodeInfosByViewId"), ref<java::util::List>>(viewId); }
inline ref<android::view::accessibility::AccessibilityWindowInfo> AccessibilityNodeInfo::getWindow() { return call_method<SCAPIX_META_STRING("getWindow"), ref<android::view::accessibility::AccessibilityWindowInfo>>(); }
inline ref<android::view::accessibility::AccessibilityNodeInfo> AccessibilityNodeInfo::getParent() { return call_method<SCAPIX_META_STRING("getParent"), ref<android::view::accessibility::AccessibilityNodeInfo>>(); }
inline void AccessibilityNodeInfo::setParent(ref<android::view::View> parent) { return call_method<SCAPIX_META_STRING("setParent"), void>(parent); }
inline void AccessibilityNodeInfo::setParent(ref<android::view::View> root, jint virtualDescendantId) { return call_method<SCAPIX_META_STRING("setParent"), void>(root, virtualDescendantId); }
inline void AccessibilityNodeInfo::getBoundsInParent(ref<android::graphics::Rect> outBounds) { return call_method<SCAPIX_META_STRING("getBoundsInParent"), void>(outBounds); }
inline void AccessibilityNodeInfo::setBoundsInParent(ref<android::graphics::Rect> bounds) { return call_method<SCAPIX_META_STRING("setBoundsInParent"), void>(bounds); }
inline void AccessibilityNodeInfo::getBoundsInScreen(ref<android::graphics::Rect> outBounds) { return call_method<SCAPIX_META_STRING("getBoundsInScreen"), void>(outBounds); }
inline void AccessibilityNodeInfo::setBoundsInScreen(ref<android::graphics::Rect> bounds) { return call_method<SCAPIX_META_STRING("setBoundsInScreen"), void>(bounds); }
inline jboolean AccessibilityNodeInfo::isCheckable() { return call_method<SCAPIX_META_STRING("isCheckable"), jboolean>(); }
inline void AccessibilityNodeInfo::setCheckable(jboolean checkable) { return call_method<SCAPIX_META_STRING("setCheckable"), void>(checkable); }
inline jboolean AccessibilityNodeInfo::isChecked() { return call_method<SCAPIX_META_STRING("isChecked"), jboolean>(); }
inline void AccessibilityNodeInfo::setChecked(jboolean checked) { return call_method<SCAPIX_META_STRING("setChecked"), void>(checked); }
inline jboolean AccessibilityNodeInfo::isFocusable() { return call_method<SCAPIX_META_STRING("isFocusable"), jboolean>(); }
inline void AccessibilityNodeInfo::setFocusable(jboolean focusable) { return call_method<SCAPIX_META_STRING("setFocusable"), void>(focusable); }
inline jboolean AccessibilityNodeInfo::isFocused() { return call_method<SCAPIX_META_STRING("isFocused"), jboolean>(); }
inline void AccessibilityNodeInfo::setFocused(jboolean focused) { return call_method<SCAPIX_META_STRING("setFocused"), void>(focused); }
inline jboolean AccessibilityNodeInfo::isVisibleToUser() { return call_method<SCAPIX_META_STRING("isVisibleToUser"), jboolean>(); }
inline void AccessibilityNodeInfo::setVisibleToUser(jboolean visibleToUser) { return call_method<SCAPIX_META_STRING("setVisibleToUser"), void>(visibleToUser); }
inline jboolean AccessibilityNodeInfo::isAccessibilityFocused() { return call_method<SCAPIX_META_STRING("isAccessibilityFocused"), jboolean>(); }
inline void AccessibilityNodeInfo::setAccessibilityFocused(jboolean focused) { return call_method<SCAPIX_META_STRING("setAccessibilityFocused"), void>(focused); }
inline jboolean AccessibilityNodeInfo::isSelected() { return call_method<SCAPIX_META_STRING("isSelected"), jboolean>(); }
inline void AccessibilityNodeInfo::setSelected(jboolean selected) { return call_method<SCAPIX_META_STRING("setSelected"), void>(selected); }
inline jboolean AccessibilityNodeInfo::isClickable() { return call_method<SCAPIX_META_STRING("isClickable"), jboolean>(); }
inline void AccessibilityNodeInfo::setClickable(jboolean clickable) { return call_method<SCAPIX_META_STRING("setClickable"), void>(clickable); }
inline jboolean AccessibilityNodeInfo::isLongClickable() { return call_method<SCAPIX_META_STRING("isLongClickable"), jboolean>(); }
inline void AccessibilityNodeInfo::setLongClickable(jboolean longClickable) { return call_method<SCAPIX_META_STRING("setLongClickable"), void>(longClickable); }
inline jboolean AccessibilityNodeInfo::isEnabled() { return call_method<SCAPIX_META_STRING("isEnabled"), jboolean>(); }
inline void AccessibilityNodeInfo::setEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setEnabled"), void>(enabled); }
inline jboolean AccessibilityNodeInfo::isPassword() { return call_method<SCAPIX_META_STRING("isPassword"), jboolean>(); }
inline void AccessibilityNodeInfo::setPassword(jboolean password) { return call_method<SCAPIX_META_STRING("setPassword"), void>(password); }
inline jboolean AccessibilityNodeInfo::isScrollable() { return call_method<SCAPIX_META_STRING("isScrollable"), jboolean>(); }
inline void AccessibilityNodeInfo::setScrollable(jboolean scrollable) { return call_method<SCAPIX_META_STRING("setScrollable"), void>(scrollable); }
inline jboolean AccessibilityNodeInfo::isEditable() { return call_method<SCAPIX_META_STRING("isEditable"), jboolean>(); }
inline void AccessibilityNodeInfo::setEditable(jboolean editable) { return call_method<SCAPIX_META_STRING("setEditable"), void>(editable); }
inline void AccessibilityNodeInfo::setPaneTitle(ref<java::lang::CharSequence> paneTitle) { return call_method<SCAPIX_META_STRING("setPaneTitle"), void>(paneTitle); }
inline ref<java::lang::CharSequence> AccessibilityNodeInfo::getPaneTitle() { return call_method<SCAPIX_META_STRING("getPaneTitle"), ref<java::lang::CharSequence>>(); }
inline jint AccessibilityNodeInfo::getDrawingOrder() { return call_method<SCAPIX_META_STRING("getDrawingOrder"), jint>(); }
inline void AccessibilityNodeInfo::setDrawingOrder(jint drawingOrderInParent) { return call_method<SCAPIX_META_STRING("setDrawingOrder"), void>(drawingOrderInParent); }
inline ref<android::view::accessibility::AccessibilityNodeInfo_CollectionInfo> AccessibilityNodeInfo::getCollectionInfo() { return call_method<SCAPIX_META_STRING("getCollectionInfo"), ref<android::view::accessibility::AccessibilityNodeInfo_CollectionInfo>>(); }
inline void AccessibilityNodeInfo::setCollectionInfo(ref<android::view::accessibility::AccessibilityNodeInfo_CollectionInfo> collectionInfo) { return call_method<SCAPIX_META_STRING("setCollectionInfo"), void>(collectionInfo); }
inline ref<android::view::accessibility::AccessibilityNodeInfo_CollectionItemInfo> AccessibilityNodeInfo::getCollectionItemInfo() { return call_method<SCAPIX_META_STRING("getCollectionItemInfo"), ref<android::view::accessibility::AccessibilityNodeInfo_CollectionItemInfo>>(); }
inline void AccessibilityNodeInfo::setCollectionItemInfo(ref<android::view::accessibility::AccessibilityNodeInfo_CollectionItemInfo> collectionItemInfo) { return call_method<SCAPIX_META_STRING("setCollectionItemInfo"), void>(collectionItemInfo); }
inline ref<android::view::accessibility::AccessibilityNodeInfo_RangeInfo> AccessibilityNodeInfo::getRangeInfo() { return call_method<SCAPIX_META_STRING("getRangeInfo"), ref<android::view::accessibility::AccessibilityNodeInfo_RangeInfo>>(); }
inline void AccessibilityNodeInfo::setRangeInfo(ref<android::view::accessibility::AccessibilityNodeInfo_RangeInfo> rangeInfo) { return call_method<SCAPIX_META_STRING("setRangeInfo"), void>(rangeInfo); }
inline jboolean AccessibilityNodeInfo::isContentInvalid() { return call_method<SCAPIX_META_STRING("isContentInvalid"), jboolean>(); }
inline void AccessibilityNodeInfo::setContentInvalid(jboolean contentInvalid) { return call_method<SCAPIX_META_STRING("setContentInvalid"), void>(contentInvalid); }
inline jboolean AccessibilityNodeInfo::isContextClickable() { return call_method<SCAPIX_META_STRING("isContextClickable"), jboolean>(); }
inline void AccessibilityNodeInfo::setContextClickable(jboolean contextClickable) { return call_method<SCAPIX_META_STRING("setContextClickable"), void>(contextClickable); }
inline jint AccessibilityNodeInfo::getLiveRegion() { return call_method<SCAPIX_META_STRING("getLiveRegion"), jint>(); }
inline void AccessibilityNodeInfo::setLiveRegion(jint mode) { return call_method<SCAPIX_META_STRING("setLiveRegion"), void>(mode); }
inline jboolean AccessibilityNodeInfo::isMultiLine() { return call_method<SCAPIX_META_STRING("isMultiLine"), jboolean>(); }
inline void AccessibilityNodeInfo::setMultiLine(jboolean multiLine) { return call_method<SCAPIX_META_STRING("setMultiLine"), void>(multiLine); }
inline jboolean AccessibilityNodeInfo::canOpenPopup() { return call_method<SCAPIX_META_STRING("canOpenPopup"), jboolean>(); }
inline void AccessibilityNodeInfo::setCanOpenPopup(jboolean opensPopup) { return call_method<SCAPIX_META_STRING("setCanOpenPopup"), void>(opensPopup); }
inline jboolean AccessibilityNodeInfo::isDismissable() { return call_method<SCAPIX_META_STRING("isDismissable"), jboolean>(); }
inline void AccessibilityNodeInfo::setDismissable(jboolean dismissable) { return call_method<SCAPIX_META_STRING("setDismissable"), void>(dismissable); }
inline jboolean AccessibilityNodeInfo::isImportantForAccessibility() { return call_method<SCAPIX_META_STRING("isImportantForAccessibility"), jboolean>(); }
inline void AccessibilityNodeInfo::setImportantForAccessibility(jboolean important) { return call_method<SCAPIX_META_STRING("setImportantForAccessibility"), void>(important); }
inline jboolean AccessibilityNodeInfo::isScreenReaderFocusable() { return call_method<SCAPIX_META_STRING("isScreenReaderFocusable"), jboolean>(); }
inline void AccessibilityNodeInfo::setScreenReaderFocusable(jboolean screenReaderFocusable) { return call_method<SCAPIX_META_STRING("setScreenReaderFocusable"), void>(screenReaderFocusable); }
inline jboolean AccessibilityNodeInfo::isShowingHintText() { return call_method<SCAPIX_META_STRING("isShowingHintText"), jboolean>(); }
inline void AccessibilityNodeInfo::setShowingHintText(jboolean showingHintText) { return call_method<SCAPIX_META_STRING("setShowingHintText"), void>(showingHintText); }
inline jboolean AccessibilityNodeInfo::isHeading() { return call_method<SCAPIX_META_STRING("isHeading"), jboolean>(); }
inline void AccessibilityNodeInfo::setHeading(jboolean isHeading) { return call_method<SCAPIX_META_STRING("setHeading"), void>(isHeading); }
inline ref<java::lang::CharSequence> AccessibilityNodeInfo::getPackageName() { return call_method<SCAPIX_META_STRING("getPackageName"), ref<java::lang::CharSequence>>(); }
inline void AccessibilityNodeInfo::setPackageName(ref<java::lang::CharSequence> packageName) { return call_method<SCAPIX_META_STRING("setPackageName"), void>(packageName); }
inline ref<java::lang::CharSequence> AccessibilityNodeInfo::getClassName() { return call_method<SCAPIX_META_STRING("getClassName"), ref<java::lang::CharSequence>>(); }
inline void AccessibilityNodeInfo::setClassName(ref<java::lang::CharSequence> className) { return call_method<SCAPIX_META_STRING("setClassName"), void>(className); }
inline ref<java::lang::CharSequence> AccessibilityNodeInfo::getText() { return call_method<SCAPIX_META_STRING("getText"), ref<java::lang::CharSequence>>(); }
inline void AccessibilityNodeInfo::setText(ref<java::lang::CharSequence> text) { return call_method<SCAPIX_META_STRING("setText"), void>(text); }
inline ref<java::lang::CharSequence> AccessibilityNodeInfo::getHintText() { return call_method<SCAPIX_META_STRING("getHintText"), ref<java::lang::CharSequence>>(); }
inline void AccessibilityNodeInfo::setHintText(ref<java::lang::CharSequence> hintText) { return call_method<SCAPIX_META_STRING("setHintText"), void>(hintText); }
inline void AccessibilityNodeInfo::setError(ref<java::lang::CharSequence> error) { return call_method<SCAPIX_META_STRING("setError"), void>(error); }
inline ref<java::lang::CharSequence> AccessibilityNodeInfo::getError() { return call_method<SCAPIX_META_STRING("getError"), ref<java::lang::CharSequence>>(); }
inline ref<java::lang::CharSequence> AccessibilityNodeInfo::getContentDescription() { return call_method<SCAPIX_META_STRING("getContentDescription"), ref<java::lang::CharSequence>>(); }
inline void AccessibilityNodeInfo::setContentDescription(ref<java::lang::CharSequence> contentDescription) { return call_method<SCAPIX_META_STRING("setContentDescription"), void>(contentDescription); }
inline ref<java::lang::CharSequence> AccessibilityNodeInfo::getTooltipText() { return call_method<SCAPIX_META_STRING("getTooltipText"), ref<java::lang::CharSequence>>(); }
inline void AccessibilityNodeInfo::setTooltipText(ref<java::lang::CharSequence> tooltipText) { return call_method<SCAPIX_META_STRING("setTooltipText"), void>(tooltipText); }
inline void AccessibilityNodeInfo::setLabelFor(ref<android::view::View> labeled) { return call_method<SCAPIX_META_STRING("setLabelFor"), void>(labeled); }
inline void AccessibilityNodeInfo::setLabelFor(ref<android::view::View> root, jint virtualDescendantId) { return call_method<SCAPIX_META_STRING("setLabelFor"), void>(root, virtualDescendantId); }
inline ref<android::view::accessibility::AccessibilityNodeInfo> AccessibilityNodeInfo::getLabelFor() { return call_method<SCAPIX_META_STRING("getLabelFor"), ref<android::view::accessibility::AccessibilityNodeInfo>>(); }
inline void AccessibilityNodeInfo::setLabeledBy(ref<android::view::View> label) { return call_method<SCAPIX_META_STRING("setLabeledBy"), void>(label); }
inline void AccessibilityNodeInfo::setLabeledBy(ref<android::view::View> root, jint virtualDescendantId) { return call_method<SCAPIX_META_STRING("setLabeledBy"), void>(root, virtualDescendantId); }
inline ref<android::view::accessibility::AccessibilityNodeInfo> AccessibilityNodeInfo::getLabeledBy() { return call_method<SCAPIX_META_STRING("getLabeledBy"), ref<android::view::accessibility::AccessibilityNodeInfo>>(); }
inline void AccessibilityNodeInfo::setViewIdResourceName(ref<java::lang::String> viewIdResName) { return call_method<SCAPIX_META_STRING("setViewIdResourceName"), void>(viewIdResName); }
inline ref<java::lang::String> AccessibilityNodeInfo::getViewIdResourceName() { return call_method<SCAPIX_META_STRING("getViewIdResourceName"), ref<java::lang::String>>(); }
inline jint AccessibilityNodeInfo::getTextSelectionStart() { return call_method<SCAPIX_META_STRING("getTextSelectionStart"), jint>(); }
inline jint AccessibilityNodeInfo::getTextSelectionEnd() { return call_method<SCAPIX_META_STRING("getTextSelectionEnd"), jint>(); }
inline void AccessibilityNodeInfo::setTextSelection(jint start, jint end) { return call_method<SCAPIX_META_STRING("setTextSelection"), void>(start, end); }
inline jint AccessibilityNodeInfo::getInputType() { return call_method<SCAPIX_META_STRING("getInputType"), jint>(); }
inline void AccessibilityNodeInfo::setInputType(jint inputType) { return call_method<SCAPIX_META_STRING("setInputType"), void>(inputType); }
inline ref<android::os::Bundle> AccessibilityNodeInfo::getExtras() { return call_method<SCAPIX_META_STRING("getExtras"), ref<android::os::Bundle>>(); }
inline jint AccessibilityNodeInfo::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline ref<android::view::accessibility::AccessibilityNodeInfo> AccessibilityNodeInfo::obtain(ref<android::view::View> source) { return call_static_method<SCAPIX_META_STRING("obtain"), ref<android::view::accessibility::AccessibilityNodeInfo>>(source); }
inline ref<android::view::accessibility::AccessibilityNodeInfo> AccessibilityNodeInfo::obtain(ref<android::view::View> root, jint virtualDescendantId) { return call_static_method<SCAPIX_META_STRING("obtain"), ref<android::view::accessibility::AccessibilityNodeInfo>>(root, virtualDescendantId); }
inline ref<android::view::accessibility::AccessibilityNodeInfo> AccessibilityNodeInfo::obtain() { return call_static_method<SCAPIX_META_STRING("obtain"), ref<android::view::accessibility::AccessibilityNodeInfo>>(); }
inline ref<android::view::accessibility::AccessibilityNodeInfo> AccessibilityNodeInfo::obtain(ref<android::view::accessibility::AccessibilityNodeInfo> info) { return call_static_method<SCAPIX_META_STRING("obtain"), ref<android::view::accessibility::AccessibilityNodeInfo>>(info); }
inline void AccessibilityNodeInfo::recycle() { return call_method<SCAPIX_META_STRING("recycle"), void>(); }
inline void AccessibilityNodeInfo::writeToParcel(ref<android::os::Parcel> parcel, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(parcel, flags); }
inline jboolean AccessibilityNodeInfo::equals(ref<java::lang::Object> object) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(object); }
inline jint AccessibilityNodeInfo::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> AccessibilityNodeInfo::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::view::accessibility
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_ACCESSIBILITY_ACCESSIBILITYNODEINFO_H
