// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_VIEW_WINDOW_H
#define SCAPIX_ANDROID_VIEW_WINDOW_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content::res { class Configuration; }
namespace android::content::res { class TypedArray; }
namespace android::graphics::drawable { class Drawable; }
namespace android::media::session { class MediaController; }
namespace android::net { class Uri; }
namespace android::os { class Bundle; }
namespace android::os { class Handler; }
namespace android::os { class IBinder; }
namespace android::transition { class Scene; }
namespace android::transition { class Transition; }
namespace android::transition { class TransitionManager; }
namespace android::view { class InputEvent; }
namespace android::view { class InputQueue_Callback; }
namespace android::view { class KeyEvent; }
namespace android::view { class LayoutInflater; }
namespace android::view { class MotionEvent; }
namespace android::view { class SurfaceHolder_Callback2; }
namespace android::view { class View; }
namespace android::view { class ViewGroup_LayoutParams; }
namespace android::view { class Window_Callback; }
namespace android::view { class Window_OnFrameMetricsAvailableListener; }
namespace android::view { class Window_OnRestrictedCaptionAreaChangedListener; }
namespace android::view { class WindowManager; }
namespace android::view { class WindowManager_LayoutParams; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::view {

class Window : public object_base<SCAPIX_META_STRING("android/view/Window"),
	java::lang::Object>
{
public:

	using OnRestrictedCaptionAreaChangedListener = Window_OnRestrictedCaptionAreaChangedListener;
	using OnFrameMetricsAvailableListener = Window_OnFrameMetricsAvailableListener;
	using Callback = Window_Callback;

	static jint DECOR_CAPTION_SHADE_AUTO_();
	static jint DECOR_CAPTION_SHADE_DARK_();
	static jint DECOR_CAPTION_SHADE_LIGHT_();
	static jint FEATURE_ACTION_BAR_();
	static jint FEATURE_ACTION_BAR_OVERLAY_();
	static jint FEATURE_ACTION_MODE_OVERLAY_();
	static jint FEATURE_ACTIVITY_TRANSITIONS_();
	static jint FEATURE_CONTENT_TRANSITIONS_();
	static jint FEATURE_CONTEXT_MENU_();
	static jint FEATURE_CUSTOM_TITLE_();
	static jint FEATURE_INDETERMINATE_PROGRESS_();
	static jint FEATURE_LEFT_ICON_();
	static jint FEATURE_NO_TITLE_();
	static jint FEATURE_OPTIONS_PANEL_();
	static jint FEATURE_PROGRESS_();
	static jint FEATURE_RIGHT_ICON_();
	static jint FEATURE_SWIPE_TO_DISMISS_();
	static jint ID_ANDROID_CONTENT_();
	static ref<java::lang::String> NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME_();
	static jint PROGRESS_END_();
	static jint PROGRESS_INDETERMINATE_OFF_();
	static jint PROGRESS_INDETERMINATE_ON_();
	static jint PROGRESS_SECONDARY_END_();
	static jint PROGRESS_SECONDARY_START_();
	static jint PROGRESS_START_();
	static jint PROGRESS_VISIBILITY_OFF_();
	static jint PROGRESS_VISIBILITY_ON_();
	static ref<java::lang::String> STATUS_BAR_BACKGROUND_TRANSITION_NAME_();

	static ref<Window> new_object(ref<android::content::Context> context);
	ref<android::content::Context> getContext();
	ref<android::content::res::TypedArray> getWindowStyle();
	void setContainer(ref<android::view::Window> container);
	ref<android::view::Window> getContainer();
	jboolean hasChildren();
	void setWindowManager(ref<android::view::WindowManager> wm, ref<android::os::IBinder> appToken, ref<java::lang::String> appName);
	void setWindowManager(ref<android::view::WindowManager> wm, ref<android::os::IBinder> appToken, ref<java::lang::String> appName, jboolean hardwareAccelerated);
	ref<android::view::WindowManager> getWindowManager();
	void setCallback(ref<android::view::Window_Callback> callback);
	ref<android::view::Window_Callback> getCallback();
	void addOnFrameMetricsAvailableListener(ref<android::view::Window_OnFrameMetricsAvailableListener> listener, ref<android::os::Handler> handler);
	void removeOnFrameMetricsAvailableListener(ref<android::view::Window_OnFrameMetricsAvailableListener> listener);
	void setRestrictedCaptionAreaListener(ref<android::view::Window_OnRestrictedCaptionAreaChangedListener> listener);
	void takeSurface(ref<android::view::SurfaceHolder_Callback2> p1);
	void takeInputQueue(ref<android::view::InputQueue_Callback> p1);
	jboolean isFloating();
	void setLayout(jint width, jint height);
	void setGravity(jint gravity);
	void setType(jint type);
	void setFormat(jint format);
	void setWindowAnimations(jint resId);
	void setSoftInputMode(jint mode);
	void addFlags(jint flags);
	void clearFlags(jint flags);
	void setFlags(jint flags, jint mask);
	void setColorMode(jint colorMode);
	jint getColorMode();
	jboolean isWideColorGamut();
	void setDimAmount(jfloat amount);
	void setAttributes(ref<android::view::WindowManager_LayoutParams> a);
	ref<android::view::WindowManager_LayoutParams> getAttributes();
	void setSustainedPerformanceMode(jboolean enable);
	jboolean requestFeature(jint featureId);
	void makeActive();
	jboolean isActive();
	ref<android::view::View> findViewById(jint id);
	ref<android::view::View> requireViewById(jint id);
	void setContentView(jint p1);
	void setContentView(ref<android::view::View> p1);
	void setContentView(ref<android::view::View> p1, ref<android::view::ViewGroup_LayoutParams> p2);
	void addContentView(ref<android::view::View> p1, ref<android::view::ViewGroup_LayoutParams> p2);
	ref<android::view::View> getCurrentFocus();
	ref<android::view::LayoutInflater> getLayoutInflater();
	void setTitle(ref<java::lang::CharSequence> p1);
	void setTitleColor(jint p1);
	void openPanel(jint p1, ref<android::view::KeyEvent> p2);
	void closePanel(jint p1);
	void togglePanel(jint p1, ref<android::view::KeyEvent> p2);
	void invalidatePanelMenu(jint p1);
	jboolean performPanelShortcut(jint p1, jint p2, ref<android::view::KeyEvent> p3, jint p4);
	jboolean performPanelIdentifierAction(jint p1, jint p2, jint p3);
	void closeAllPanels();
	jboolean performContextMenuIdentifierAction(jint p1, jint p2);
	void onConfigurationChanged(ref<android::content::res::Configuration> p1);
	void setElevation(jfloat elevation);
	void setClipToOutline(jboolean clipToOutline);
	void setBackgroundDrawableResource(jint resId);
	void setBackgroundDrawable(ref<android::graphics::drawable::Drawable> p1);
	void setFeatureDrawableResource(jint p1, jint p2);
	void setFeatureDrawableUri(jint p1, ref<android::net::Uri> p2);
	void setFeatureDrawable(jint p1, ref<android::graphics::drawable::Drawable> p2);
	void setFeatureDrawableAlpha(jint p1, jint p2);
	void setFeatureInt(jint p1, jint p2);
	void takeKeyEvents(jboolean p1);
	jboolean superDispatchKeyEvent(ref<android::view::KeyEvent> p1);
	jboolean superDispatchKeyShortcutEvent(ref<android::view::KeyEvent> p1);
	jboolean superDispatchTouchEvent(ref<android::view::MotionEvent> p1);
	jboolean superDispatchTrackballEvent(ref<android::view::MotionEvent> p1);
	jboolean superDispatchGenericMotionEvent(ref<android::view::MotionEvent> p1);
	ref<android::view::View> getDecorView();
	ref<android::view::View> peekDecorView();
	ref<android::os::Bundle> saveHierarchyState();
	void restoreHierarchyState(ref<android::os::Bundle> p1);
	static jint getDefaultFeatures(ref<android::content::Context> context);
	jboolean hasFeature(jint feature);
	void setChildDrawable(jint p1, ref<android::graphics::drawable::Drawable> p2);
	void setChildInt(jint p1, jint p2);
	jboolean isShortcutKey(jint p1, ref<android::view::KeyEvent> p2);
	void setVolumeControlStream(jint p1);
	jint getVolumeControlStream();
	void setMediaController(ref<android::media::session::MediaController> controller);
	ref<android::media::session::MediaController> getMediaController();
	void setUiOptions(jint uiOptions);
	void setUiOptions(jint uiOptions, jint mask);
	void setIcon(jint resId);
	void setLogo(jint resId);
	void setLocalFocus(jboolean hasFocus, jboolean inTouchMode);
	void injectInputEvent(ref<android::view::InputEvent> event);
	ref<android::transition::TransitionManager> getTransitionManager();
	void setTransitionManager(ref<android::transition::TransitionManager> tm);
	ref<android::transition::Scene> getContentScene();
	void setEnterTransition(ref<android::transition::Transition> transition);
	void setReturnTransition(ref<android::transition::Transition> transition);
	void setExitTransition(ref<android::transition::Transition> transition);
	void setReenterTransition(ref<android::transition::Transition> transition);
	ref<android::transition::Transition> getEnterTransition();
	ref<android::transition::Transition> getReturnTransition();
	ref<android::transition::Transition> getExitTransition();
	ref<android::transition::Transition> getReenterTransition();
	void setSharedElementEnterTransition(ref<android::transition::Transition> transition);
	void setSharedElementReturnTransition(ref<android::transition::Transition> transition);
	ref<android::transition::Transition> getSharedElementEnterTransition();
	ref<android::transition::Transition> getSharedElementReturnTransition();
	void setSharedElementExitTransition(ref<android::transition::Transition> transition);
	void setSharedElementReenterTransition(ref<android::transition::Transition> transition);
	ref<android::transition::Transition> getSharedElementExitTransition();
	ref<android::transition::Transition> getSharedElementReenterTransition();
	void setAllowEnterTransitionOverlap(jboolean allow);
	jboolean getAllowEnterTransitionOverlap();
	void setAllowReturnTransitionOverlap(jboolean allow);
	jboolean getAllowReturnTransitionOverlap();
	jlong getTransitionBackgroundFadeDuration();
	void setTransitionBackgroundFadeDuration(jlong fadeDurationMillis);
	jboolean getSharedElementsUseOverlay();
	void setSharedElementsUseOverlay(jboolean sharedElementsUseOverlay);
	jint getStatusBarColor();
	void setStatusBarColor(jint p1);
	jint getNavigationBarColor();
	void setNavigationBarColor(jint p1);
	void setNavigationBarDividerColor(jint dividerColor);
	jint getNavigationBarDividerColor();
	void setDecorCaptionShade(jint p1);
	void setResizingCaptionDrawable(ref<android::graphics::drawable::Drawable> p1);

protected:

	Window(handle_type h) : base_(h) {}

};

} // namespace android::view
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/Configuration.h>
#include <scapix/java_api/android/content/res/TypedArray.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/media/session/MediaController.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/android/transition/Scene.h>
#include <scapix/java_api/android/transition/Transition.h>
#include <scapix/java_api/android/transition/TransitionManager.h>
#include <scapix/java_api/android/view/InputEvent.h>
#include <scapix/java_api/android/view/InputQueue_Callback.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/LayoutInflater.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/SurfaceHolder_Callback2.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup_LayoutParams.h>
#include <scapix/java_api/android/view/Window_Callback.h>
#include <scapix/java_api/android/view/Window_OnFrameMetricsAvailableListener.h>
#include <scapix/java_api/android/view/Window_OnRestrictedCaptionAreaChangedListener.h>
#include <scapix/java_api/android/view/WindowManager.h>
#include <scapix/java_api/android/view/WindowManager_LayoutParams.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::view {

inline jint Window::DECOR_CAPTION_SHADE_AUTO_() { return get_static_field<SCAPIX_META_STRING("DECOR_CAPTION_SHADE_AUTO"), jint>(); }
inline jint Window::DECOR_CAPTION_SHADE_DARK_() { return get_static_field<SCAPIX_META_STRING("DECOR_CAPTION_SHADE_DARK"), jint>(); }
inline jint Window::DECOR_CAPTION_SHADE_LIGHT_() { return get_static_field<SCAPIX_META_STRING("DECOR_CAPTION_SHADE_LIGHT"), jint>(); }
inline jint Window::FEATURE_ACTION_BAR_() { return get_static_field<SCAPIX_META_STRING("FEATURE_ACTION_BAR"), jint>(); }
inline jint Window::FEATURE_ACTION_BAR_OVERLAY_() { return get_static_field<SCAPIX_META_STRING("FEATURE_ACTION_BAR_OVERLAY"), jint>(); }
inline jint Window::FEATURE_ACTION_MODE_OVERLAY_() { return get_static_field<SCAPIX_META_STRING("FEATURE_ACTION_MODE_OVERLAY"), jint>(); }
inline jint Window::FEATURE_ACTIVITY_TRANSITIONS_() { return get_static_field<SCAPIX_META_STRING("FEATURE_ACTIVITY_TRANSITIONS"), jint>(); }
inline jint Window::FEATURE_CONTENT_TRANSITIONS_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CONTENT_TRANSITIONS"), jint>(); }
inline jint Window::FEATURE_CONTEXT_MENU_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CONTEXT_MENU"), jint>(); }
inline jint Window::FEATURE_CUSTOM_TITLE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_CUSTOM_TITLE"), jint>(); }
inline jint Window::FEATURE_INDETERMINATE_PROGRESS_() { return get_static_field<SCAPIX_META_STRING("FEATURE_INDETERMINATE_PROGRESS"), jint>(); }
inline jint Window::FEATURE_LEFT_ICON_() { return get_static_field<SCAPIX_META_STRING("FEATURE_LEFT_ICON"), jint>(); }
inline jint Window::FEATURE_NO_TITLE_() { return get_static_field<SCAPIX_META_STRING("FEATURE_NO_TITLE"), jint>(); }
inline jint Window::FEATURE_OPTIONS_PANEL_() { return get_static_field<SCAPIX_META_STRING("FEATURE_OPTIONS_PANEL"), jint>(); }
inline jint Window::FEATURE_PROGRESS_() { return get_static_field<SCAPIX_META_STRING("FEATURE_PROGRESS"), jint>(); }
inline jint Window::FEATURE_RIGHT_ICON_() { return get_static_field<SCAPIX_META_STRING("FEATURE_RIGHT_ICON"), jint>(); }
inline jint Window::FEATURE_SWIPE_TO_DISMISS_() { return get_static_field<SCAPIX_META_STRING("FEATURE_SWIPE_TO_DISMISS"), jint>(); }
inline jint Window::ID_ANDROID_CONTENT_() { return get_static_field<SCAPIX_META_STRING("ID_ANDROID_CONTENT"), jint>(); }
inline ref<java::lang::String> Window::NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME_() { return get_static_field<SCAPIX_META_STRING("NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME"), ref<java::lang::String>>(); }
inline jint Window::PROGRESS_END_() { return get_static_field<SCAPIX_META_STRING("PROGRESS_END"), jint>(); }
inline jint Window::PROGRESS_INDETERMINATE_OFF_() { return get_static_field<SCAPIX_META_STRING("PROGRESS_INDETERMINATE_OFF"), jint>(); }
inline jint Window::PROGRESS_INDETERMINATE_ON_() { return get_static_field<SCAPIX_META_STRING("PROGRESS_INDETERMINATE_ON"), jint>(); }
inline jint Window::PROGRESS_SECONDARY_END_() { return get_static_field<SCAPIX_META_STRING("PROGRESS_SECONDARY_END"), jint>(); }
inline jint Window::PROGRESS_SECONDARY_START_() { return get_static_field<SCAPIX_META_STRING("PROGRESS_SECONDARY_START"), jint>(); }
inline jint Window::PROGRESS_START_() { return get_static_field<SCAPIX_META_STRING("PROGRESS_START"), jint>(); }
inline jint Window::PROGRESS_VISIBILITY_OFF_() { return get_static_field<SCAPIX_META_STRING("PROGRESS_VISIBILITY_OFF"), jint>(); }
inline jint Window::PROGRESS_VISIBILITY_ON_() { return get_static_field<SCAPIX_META_STRING("PROGRESS_VISIBILITY_ON"), jint>(); }
inline ref<java::lang::String> Window::STATUS_BAR_BACKGROUND_TRANSITION_NAME_() { return get_static_field<SCAPIX_META_STRING("STATUS_BAR_BACKGROUND_TRANSITION_NAME"), ref<java::lang::String>>(); }
inline ref<Window> Window::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<android::content::Context> Window::getContext() { return call_method<SCAPIX_META_STRING("getContext"), ref<android::content::Context>>(); }
inline ref<android::content::res::TypedArray> Window::getWindowStyle() { return call_method<SCAPIX_META_STRING("getWindowStyle"), ref<android::content::res::TypedArray>>(); }
inline void Window::setContainer(ref<android::view::Window> container) { return call_method<SCAPIX_META_STRING("setContainer"), void>(container); }
inline ref<android::view::Window> Window::getContainer() { return call_method<SCAPIX_META_STRING("getContainer"), ref<android::view::Window>>(); }
inline jboolean Window::hasChildren() { return call_method<SCAPIX_META_STRING("hasChildren"), jboolean>(); }
inline void Window::setWindowManager(ref<android::view::WindowManager> wm, ref<android::os::IBinder> appToken, ref<java::lang::String> appName) { return call_method<SCAPIX_META_STRING("setWindowManager"), void>(wm, appToken, appName); }
inline void Window::setWindowManager(ref<android::view::WindowManager> wm, ref<android::os::IBinder> appToken, ref<java::lang::String> appName, jboolean hardwareAccelerated) { return call_method<SCAPIX_META_STRING("setWindowManager"), void>(wm, appToken, appName, hardwareAccelerated); }
inline ref<android::view::WindowManager> Window::getWindowManager() { return call_method<SCAPIX_META_STRING("getWindowManager"), ref<android::view::WindowManager>>(); }
inline void Window::setCallback(ref<android::view::Window_Callback> callback) { return call_method<SCAPIX_META_STRING("setCallback"), void>(callback); }
inline ref<android::view::Window_Callback> Window::getCallback() { return call_method<SCAPIX_META_STRING("getCallback"), ref<android::view::Window_Callback>>(); }
inline void Window::addOnFrameMetricsAvailableListener(ref<android::view::Window_OnFrameMetricsAvailableListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("addOnFrameMetricsAvailableListener"), void>(listener, handler); }
inline void Window::removeOnFrameMetricsAvailableListener(ref<android::view::Window_OnFrameMetricsAvailableListener> listener) { return call_method<SCAPIX_META_STRING("removeOnFrameMetricsAvailableListener"), void>(listener); }
inline void Window::setRestrictedCaptionAreaListener(ref<android::view::Window_OnRestrictedCaptionAreaChangedListener> listener) { return call_method<SCAPIX_META_STRING("setRestrictedCaptionAreaListener"), void>(listener); }
inline void Window::takeSurface(ref<android::view::SurfaceHolder_Callback2> p1) { return call_method<SCAPIX_META_STRING("takeSurface"), void>(p1); }
inline void Window::takeInputQueue(ref<android::view::InputQueue_Callback> p1) { return call_method<SCAPIX_META_STRING("takeInputQueue"), void>(p1); }
inline jboolean Window::isFloating() { return call_method<SCAPIX_META_STRING("isFloating"), jboolean>(); }
inline void Window::setLayout(jint width, jint height) { return call_method<SCAPIX_META_STRING("setLayout"), void>(width, height); }
inline void Window::setGravity(jint gravity) { return call_method<SCAPIX_META_STRING("setGravity"), void>(gravity); }
inline void Window::setType(jint type) { return call_method<SCAPIX_META_STRING("setType"), void>(type); }
inline void Window::setFormat(jint format) { return call_method<SCAPIX_META_STRING("setFormat"), void>(format); }
inline void Window::setWindowAnimations(jint resId) { return call_method<SCAPIX_META_STRING("setWindowAnimations"), void>(resId); }
inline void Window::setSoftInputMode(jint mode) { return call_method<SCAPIX_META_STRING("setSoftInputMode"), void>(mode); }
inline void Window::addFlags(jint flags) { return call_method<SCAPIX_META_STRING("addFlags"), void>(flags); }
inline void Window::clearFlags(jint flags) { return call_method<SCAPIX_META_STRING("clearFlags"), void>(flags); }
inline void Window::setFlags(jint flags, jint mask) { return call_method<SCAPIX_META_STRING("setFlags"), void>(flags, mask); }
inline void Window::setColorMode(jint colorMode) { return call_method<SCAPIX_META_STRING("setColorMode"), void>(colorMode); }
inline jint Window::getColorMode() { return call_method<SCAPIX_META_STRING("getColorMode"), jint>(); }
inline jboolean Window::isWideColorGamut() { return call_method<SCAPIX_META_STRING("isWideColorGamut"), jboolean>(); }
inline void Window::setDimAmount(jfloat amount) { return call_method<SCAPIX_META_STRING("setDimAmount"), void>(amount); }
inline void Window::setAttributes(ref<android::view::WindowManager_LayoutParams> a) { return call_method<SCAPIX_META_STRING("setAttributes"), void>(a); }
inline ref<android::view::WindowManager_LayoutParams> Window::getAttributes() { return call_method<SCAPIX_META_STRING("getAttributes"), ref<android::view::WindowManager_LayoutParams>>(); }
inline void Window::setSustainedPerformanceMode(jboolean enable) { return call_method<SCAPIX_META_STRING("setSustainedPerformanceMode"), void>(enable); }
inline jboolean Window::requestFeature(jint featureId) { return call_method<SCAPIX_META_STRING("requestFeature"), jboolean>(featureId); }
inline void Window::makeActive() { return call_method<SCAPIX_META_STRING("makeActive"), void>(); }
inline jboolean Window::isActive() { return call_method<SCAPIX_META_STRING("isActive"), jboolean>(); }
inline ref<android::view::View> Window::findViewById(jint id) { return call_method<SCAPIX_META_STRING("findViewById"), ref<android::view::View>>(id); }
inline ref<android::view::View> Window::requireViewById(jint id) { return call_method<SCAPIX_META_STRING("requireViewById"), ref<android::view::View>>(id); }
inline void Window::setContentView(jint p1) { return call_method<SCAPIX_META_STRING("setContentView"), void>(p1); }
inline void Window::setContentView(ref<android::view::View> p1) { return call_method<SCAPIX_META_STRING("setContentView"), void>(p1); }
inline void Window::setContentView(ref<android::view::View> p1, ref<android::view::ViewGroup_LayoutParams> p2) { return call_method<SCAPIX_META_STRING("setContentView"), void>(p1, p2); }
inline void Window::addContentView(ref<android::view::View> p1, ref<android::view::ViewGroup_LayoutParams> p2) { return call_method<SCAPIX_META_STRING("addContentView"), void>(p1, p2); }
inline ref<android::view::View> Window::getCurrentFocus() { return call_method<SCAPIX_META_STRING("getCurrentFocus"), ref<android::view::View>>(); }
inline ref<android::view::LayoutInflater> Window::getLayoutInflater() { return call_method<SCAPIX_META_STRING("getLayoutInflater"), ref<android::view::LayoutInflater>>(); }
inline void Window::setTitle(ref<java::lang::CharSequence> p1) { return call_method<SCAPIX_META_STRING("setTitle"), void>(p1); }
inline void Window::setTitleColor(jint p1) { return call_method<SCAPIX_META_STRING("setTitleColor"), void>(p1); }
inline void Window::openPanel(jint p1, ref<android::view::KeyEvent> p2) { return call_method<SCAPIX_META_STRING("openPanel"), void>(p1, p2); }
inline void Window::closePanel(jint p1) { return call_method<SCAPIX_META_STRING("closePanel"), void>(p1); }
inline void Window::togglePanel(jint p1, ref<android::view::KeyEvent> p2) { return call_method<SCAPIX_META_STRING("togglePanel"), void>(p1, p2); }
inline void Window::invalidatePanelMenu(jint p1) { return call_method<SCAPIX_META_STRING("invalidatePanelMenu"), void>(p1); }
inline jboolean Window::performPanelShortcut(jint p1, jint p2, ref<android::view::KeyEvent> p3, jint p4) { return call_method<SCAPIX_META_STRING("performPanelShortcut"), jboolean>(p1, p2, p3, p4); }
inline jboolean Window::performPanelIdentifierAction(jint p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("performPanelIdentifierAction"), jboolean>(p1, p2, p3); }
inline void Window::closeAllPanels() { return call_method<SCAPIX_META_STRING("closeAllPanels"), void>(); }
inline jboolean Window::performContextMenuIdentifierAction(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("performContextMenuIdentifierAction"), jboolean>(p1, p2); }
inline void Window::onConfigurationChanged(ref<android::content::res::Configuration> p1) { return call_method<SCAPIX_META_STRING("onConfigurationChanged"), void>(p1); }
inline void Window::setElevation(jfloat elevation) { return call_method<SCAPIX_META_STRING("setElevation"), void>(elevation); }
inline void Window::setClipToOutline(jboolean clipToOutline) { return call_method<SCAPIX_META_STRING("setClipToOutline"), void>(clipToOutline); }
inline void Window::setBackgroundDrawableResource(jint resId) { return call_method<SCAPIX_META_STRING("setBackgroundDrawableResource"), void>(resId); }
inline void Window::setBackgroundDrawable(ref<android::graphics::drawable::Drawable> p1) { return call_method<SCAPIX_META_STRING("setBackgroundDrawable"), void>(p1); }
inline void Window::setFeatureDrawableResource(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("setFeatureDrawableResource"), void>(p1, p2); }
inline void Window::setFeatureDrawableUri(jint p1, ref<android::net::Uri> p2) { return call_method<SCAPIX_META_STRING("setFeatureDrawableUri"), void>(p1, p2); }
inline void Window::setFeatureDrawable(jint p1, ref<android::graphics::drawable::Drawable> p2) { return call_method<SCAPIX_META_STRING("setFeatureDrawable"), void>(p1, p2); }
inline void Window::setFeatureDrawableAlpha(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("setFeatureDrawableAlpha"), void>(p1, p2); }
inline void Window::setFeatureInt(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("setFeatureInt"), void>(p1, p2); }
inline void Window::takeKeyEvents(jboolean p1) { return call_method<SCAPIX_META_STRING("takeKeyEvents"), void>(p1); }
inline jboolean Window::superDispatchKeyEvent(ref<android::view::KeyEvent> p1) { return call_method<SCAPIX_META_STRING("superDispatchKeyEvent"), jboolean>(p1); }
inline jboolean Window::superDispatchKeyShortcutEvent(ref<android::view::KeyEvent> p1) { return call_method<SCAPIX_META_STRING("superDispatchKeyShortcutEvent"), jboolean>(p1); }
inline jboolean Window::superDispatchTouchEvent(ref<android::view::MotionEvent> p1) { return call_method<SCAPIX_META_STRING("superDispatchTouchEvent"), jboolean>(p1); }
inline jboolean Window::superDispatchTrackballEvent(ref<android::view::MotionEvent> p1) { return call_method<SCAPIX_META_STRING("superDispatchTrackballEvent"), jboolean>(p1); }
inline jboolean Window::superDispatchGenericMotionEvent(ref<android::view::MotionEvent> p1) { return call_method<SCAPIX_META_STRING("superDispatchGenericMotionEvent"), jboolean>(p1); }
inline ref<android::view::View> Window::getDecorView() { return call_method<SCAPIX_META_STRING("getDecorView"), ref<android::view::View>>(); }
inline ref<android::view::View> Window::peekDecorView() { return call_method<SCAPIX_META_STRING("peekDecorView"), ref<android::view::View>>(); }
inline ref<android::os::Bundle> Window::saveHierarchyState() { return call_method<SCAPIX_META_STRING("saveHierarchyState"), ref<android::os::Bundle>>(); }
inline void Window::restoreHierarchyState(ref<android::os::Bundle> p1) { return call_method<SCAPIX_META_STRING("restoreHierarchyState"), void>(p1); }
inline jint Window::getDefaultFeatures(ref<android::content::Context> context) { return call_static_method<SCAPIX_META_STRING("getDefaultFeatures"), jint>(context); }
inline jboolean Window::hasFeature(jint feature) { return call_method<SCAPIX_META_STRING("hasFeature"), jboolean>(feature); }
inline void Window::setChildDrawable(jint p1, ref<android::graphics::drawable::Drawable> p2) { return call_method<SCAPIX_META_STRING("setChildDrawable"), void>(p1, p2); }
inline void Window::setChildInt(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("setChildInt"), void>(p1, p2); }
inline jboolean Window::isShortcutKey(jint p1, ref<android::view::KeyEvent> p2) { return call_method<SCAPIX_META_STRING("isShortcutKey"), jboolean>(p1, p2); }
inline void Window::setVolumeControlStream(jint p1) { return call_method<SCAPIX_META_STRING("setVolumeControlStream"), void>(p1); }
inline jint Window::getVolumeControlStream() { return call_method<SCAPIX_META_STRING("getVolumeControlStream"), jint>(); }
inline void Window::setMediaController(ref<android::media::session::MediaController> controller) { return call_method<SCAPIX_META_STRING("setMediaController"), void>(controller); }
inline ref<android::media::session::MediaController> Window::getMediaController() { return call_method<SCAPIX_META_STRING("getMediaController"), ref<android::media::session::MediaController>>(); }
inline void Window::setUiOptions(jint uiOptions) { return call_method<SCAPIX_META_STRING("setUiOptions"), void>(uiOptions); }
inline void Window::setUiOptions(jint uiOptions, jint mask) { return call_method<SCAPIX_META_STRING("setUiOptions"), void>(uiOptions, mask); }
inline void Window::setIcon(jint resId) { return call_method<SCAPIX_META_STRING("setIcon"), void>(resId); }
inline void Window::setLogo(jint resId) { return call_method<SCAPIX_META_STRING("setLogo"), void>(resId); }
inline void Window::setLocalFocus(jboolean hasFocus, jboolean inTouchMode) { return call_method<SCAPIX_META_STRING("setLocalFocus"), void>(hasFocus, inTouchMode); }
inline void Window::injectInputEvent(ref<android::view::InputEvent> event) { return call_method<SCAPIX_META_STRING("injectInputEvent"), void>(event); }
inline ref<android::transition::TransitionManager> Window::getTransitionManager() { return call_method<SCAPIX_META_STRING("getTransitionManager"), ref<android::transition::TransitionManager>>(); }
inline void Window::setTransitionManager(ref<android::transition::TransitionManager> tm) { return call_method<SCAPIX_META_STRING("setTransitionManager"), void>(tm); }
inline ref<android::transition::Scene> Window::getContentScene() { return call_method<SCAPIX_META_STRING("getContentScene"), ref<android::transition::Scene>>(); }
inline void Window::setEnterTransition(ref<android::transition::Transition> transition) { return call_method<SCAPIX_META_STRING("setEnterTransition"), void>(transition); }
inline void Window::setReturnTransition(ref<android::transition::Transition> transition) { return call_method<SCAPIX_META_STRING("setReturnTransition"), void>(transition); }
inline void Window::setExitTransition(ref<android::transition::Transition> transition) { return call_method<SCAPIX_META_STRING("setExitTransition"), void>(transition); }
inline void Window::setReenterTransition(ref<android::transition::Transition> transition) { return call_method<SCAPIX_META_STRING("setReenterTransition"), void>(transition); }
inline ref<android::transition::Transition> Window::getEnterTransition() { return call_method<SCAPIX_META_STRING("getEnterTransition"), ref<android::transition::Transition>>(); }
inline ref<android::transition::Transition> Window::getReturnTransition() { return call_method<SCAPIX_META_STRING("getReturnTransition"), ref<android::transition::Transition>>(); }
inline ref<android::transition::Transition> Window::getExitTransition() { return call_method<SCAPIX_META_STRING("getExitTransition"), ref<android::transition::Transition>>(); }
inline ref<android::transition::Transition> Window::getReenterTransition() { return call_method<SCAPIX_META_STRING("getReenterTransition"), ref<android::transition::Transition>>(); }
inline void Window::setSharedElementEnterTransition(ref<android::transition::Transition> transition) { return call_method<SCAPIX_META_STRING("setSharedElementEnterTransition"), void>(transition); }
inline void Window::setSharedElementReturnTransition(ref<android::transition::Transition> transition) { return call_method<SCAPIX_META_STRING("setSharedElementReturnTransition"), void>(transition); }
inline ref<android::transition::Transition> Window::getSharedElementEnterTransition() { return call_method<SCAPIX_META_STRING("getSharedElementEnterTransition"), ref<android::transition::Transition>>(); }
inline ref<android::transition::Transition> Window::getSharedElementReturnTransition() { return call_method<SCAPIX_META_STRING("getSharedElementReturnTransition"), ref<android::transition::Transition>>(); }
inline void Window::setSharedElementExitTransition(ref<android::transition::Transition> transition) { return call_method<SCAPIX_META_STRING("setSharedElementExitTransition"), void>(transition); }
inline void Window::setSharedElementReenterTransition(ref<android::transition::Transition> transition) { return call_method<SCAPIX_META_STRING("setSharedElementReenterTransition"), void>(transition); }
inline ref<android::transition::Transition> Window::getSharedElementExitTransition() { return call_method<SCAPIX_META_STRING("getSharedElementExitTransition"), ref<android::transition::Transition>>(); }
inline ref<android::transition::Transition> Window::getSharedElementReenterTransition() { return call_method<SCAPIX_META_STRING("getSharedElementReenterTransition"), ref<android::transition::Transition>>(); }
inline void Window::setAllowEnterTransitionOverlap(jboolean allow) { return call_method<SCAPIX_META_STRING("setAllowEnterTransitionOverlap"), void>(allow); }
inline jboolean Window::getAllowEnterTransitionOverlap() { return call_method<SCAPIX_META_STRING("getAllowEnterTransitionOverlap"), jboolean>(); }
inline void Window::setAllowReturnTransitionOverlap(jboolean allow) { return call_method<SCAPIX_META_STRING("setAllowReturnTransitionOverlap"), void>(allow); }
inline jboolean Window::getAllowReturnTransitionOverlap() { return call_method<SCAPIX_META_STRING("getAllowReturnTransitionOverlap"), jboolean>(); }
inline jlong Window::getTransitionBackgroundFadeDuration() { return call_method<SCAPIX_META_STRING("getTransitionBackgroundFadeDuration"), jlong>(); }
inline void Window::setTransitionBackgroundFadeDuration(jlong fadeDurationMillis) { return call_method<SCAPIX_META_STRING("setTransitionBackgroundFadeDuration"), void>(fadeDurationMillis); }
inline jboolean Window::getSharedElementsUseOverlay() { return call_method<SCAPIX_META_STRING("getSharedElementsUseOverlay"), jboolean>(); }
inline void Window::setSharedElementsUseOverlay(jboolean sharedElementsUseOverlay) { return call_method<SCAPIX_META_STRING("setSharedElementsUseOverlay"), void>(sharedElementsUseOverlay); }
inline jint Window::getStatusBarColor() { return call_method<SCAPIX_META_STRING("getStatusBarColor"), jint>(); }
inline void Window::setStatusBarColor(jint p1) { return call_method<SCAPIX_META_STRING("setStatusBarColor"), void>(p1); }
inline jint Window::getNavigationBarColor() { return call_method<SCAPIX_META_STRING("getNavigationBarColor"), jint>(); }
inline void Window::setNavigationBarColor(jint p1) { return call_method<SCAPIX_META_STRING("setNavigationBarColor"), void>(p1); }
inline void Window::setNavigationBarDividerColor(jint dividerColor) { return call_method<SCAPIX_META_STRING("setNavigationBarDividerColor"), void>(dividerColor); }
inline jint Window::getNavigationBarDividerColor() { return call_method<SCAPIX_META_STRING("getNavigationBarDividerColor"), jint>(); }
inline void Window::setDecorCaptionShade(jint p1) { return call_method<SCAPIX_META_STRING("setDecorCaptionShade"), void>(p1); }
inline void Window::setResizingCaptionDrawable(ref<android::graphics::drawable::Drawable> p1) { return call_method<SCAPIX_META_STRING("setResizingCaptionDrawable"), void>(p1); }

} // namespace android::view
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_WINDOW_H
