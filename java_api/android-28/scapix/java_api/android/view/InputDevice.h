// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_VIEW_INPUTDEVICE_H
#define SCAPIX_ANDROID_VIEW_INPUTDEVICE_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::os { class Vibrator; }
namespace android::view { class InputDevice_MotionRange; }
namespace android::view { class KeyCharacterMap; }
namespace java::lang { class String; }
namespace java::util { class List; }

namespace android::view {

class InputDevice : public object_base<SCAPIX_META_STRING("android/view/InputDevice"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using MotionRange = InputDevice_MotionRange;

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint KEYBOARD_TYPE_ALPHABETIC_();
	static jint KEYBOARD_TYPE_NONE_();
	static jint KEYBOARD_TYPE_NON_ALPHABETIC_();
	static jint MOTION_RANGE_ORIENTATION_();
	static jint MOTION_RANGE_PRESSURE_();
	static jint MOTION_RANGE_SIZE_();
	static jint MOTION_RANGE_TOOL_MAJOR_();
	static jint MOTION_RANGE_TOOL_MINOR_();
	static jint MOTION_RANGE_TOUCH_MAJOR_();
	static jint MOTION_RANGE_TOUCH_MINOR_();
	static jint MOTION_RANGE_X_();
	static jint MOTION_RANGE_Y_();
	static jint SOURCE_ANY_();
	static jint SOURCE_BLUETOOTH_STYLUS_();
	static jint SOURCE_CLASS_BUTTON_();
	static jint SOURCE_CLASS_JOYSTICK_();
	static jint SOURCE_CLASS_MASK_();
	static jint SOURCE_CLASS_NONE_();
	static jint SOURCE_CLASS_POINTER_();
	static jint SOURCE_CLASS_POSITION_();
	static jint SOURCE_CLASS_TRACKBALL_();
	static jint SOURCE_DPAD_();
	static jint SOURCE_GAMEPAD_();
	static jint SOURCE_HDMI_();
	static jint SOURCE_JOYSTICK_();
	static jint SOURCE_KEYBOARD_();
	static jint SOURCE_MOUSE_();
	static jint SOURCE_MOUSE_RELATIVE_();
	static jint SOURCE_ROTARY_ENCODER_();
	static jint SOURCE_STYLUS_();
	static jint SOURCE_TOUCHPAD_();
	static jint SOURCE_TOUCHSCREEN_();
	static jint SOURCE_TOUCH_NAVIGATION_();
	static jint SOURCE_TRACKBALL_();
	static jint SOURCE_UNKNOWN_();

	static ref<android::view::InputDevice> getDevice(jint id);
	static ref<link::java::array<jint>> getDeviceIds();
	jint getId();
	jint getControllerNumber();
	jint getVendorId();
	jint getProductId();
	ref<java::lang::String> getDescriptor();
	jboolean isVirtual();
	ref<java::lang::String> getName();
	jint getSources();
	jboolean supportsSource(jint source);
	jint getKeyboardType();
	ref<android::view::KeyCharacterMap> getKeyCharacterMap();
	ref<link::java::array<jboolean>> hasKeys(ref<link::java::array<jint>> keys);
	ref<android::view::InputDevice_MotionRange> getMotionRange(jint axis);
	ref<android::view::InputDevice_MotionRange> getMotionRange(jint axis, jint source);
	ref<java::util::List> getMotionRanges();
	ref<android::os::Vibrator> getVibrator();
	jboolean isEnabled();
	jboolean hasMicrophone();
	void writeToParcel(ref<android::os::Parcel> out, jint flags);
	jint describeContents();
	ref<java::lang::String> toString();

protected:

	InputDevice(handle_type h) : base_(h) {}

};

} // namespace android::view
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/os/Vibrator.h>
#include <scapix/java_api/android/view/InputDevice_MotionRange.h>
#include <scapix/java_api/android/view/KeyCharacterMap.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::view {

inline ref<android::os::Parcelable_Creator> InputDevice::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint InputDevice::KEYBOARD_TYPE_ALPHABETIC_() { return get_static_field<SCAPIX_META_STRING("KEYBOARD_TYPE_ALPHABETIC"), jint>(); }
inline jint InputDevice::KEYBOARD_TYPE_NONE_() { return get_static_field<SCAPIX_META_STRING("KEYBOARD_TYPE_NONE"), jint>(); }
inline jint InputDevice::KEYBOARD_TYPE_NON_ALPHABETIC_() { return get_static_field<SCAPIX_META_STRING("KEYBOARD_TYPE_NON_ALPHABETIC"), jint>(); }
inline jint InputDevice::MOTION_RANGE_ORIENTATION_() { return get_static_field<SCAPIX_META_STRING("MOTION_RANGE_ORIENTATION"), jint>(); }
inline jint InputDevice::MOTION_RANGE_PRESSURE_() { return get_static_field<SCAPIX_META_STRING("MOTION_RANGE_PRESSURE"), jint>(); }
inline jint InputDevice::MOTION_RANGE_SIZE_() { return get_static_field<SCAPIX_META_STRING("MOTION_RANGE_SIZE"), jint>(); }
inline jint InputDevice::MOTION_RANGE_TOOL_MAJOR_() { return get_static_field<SCAPIX_META_STRING("MOTION_RANGE_TOOL_MAJOR"), jint>(); }
inline jint InputDevice::MOTION_RANGE_TOOL_MINOR_() { return get_static_field<SCAPIX_META_STRING("MOTION_RANGE_TOOL_MINOR"), jint>(); }
inline jint InputDevice::MOTION_RANGE_TOUCH_MAJOR_() { return get_static_field<SCAPIX_META_STRING("MOTION_RANGE_TOUCH_MAJOR"), jint>(); }
inline jint InputDevice::MOTION_RANGE_TOUCH_MINOR_() { return get_static_field<SCAPIX_META_STRING("MOTION_RANGE_TOUCH_MINOR"), jint>(); }
inline jint InputDevice::MOTION_RANGE_X_() { return get_static_field<SCAPIX_META_STRING("MOTION_RANGE_X"), jint>(); }
inline jint InputDevice::MOTION_RANGE_Y_() { return get_static_field<SCAPIX_META_STRING("MOTION_RANGE_Y"), jint>(); }
inline jint InputDevice::SOURCE_ANY_() { return get_static_field<SCAPIX_META_STRING("SOURCE_ANY"), jint>(); }
inline jint InputDevice::SOURCE_BLUETOOTH_STYLUS_() { return get_static_field<SCAPIX_META_STRING("SOURCE_BLUETOOTH_STYLUS"), jint>(); }
inline jint InputDevice::SOURCE_CLASS_BUTTON_() { return get_static_field<SCAPIX_META_STRING("SOURCE_CLASS_BUTTON"), jint>(); }
inline jint InputDevice::SOURCE_CLASS_JOYSTICK_() { return get_static_field<SCAPIX_META_STRING("SOURCE_CLASS_JOYSTICK"), jint>(); }
inline jint InputDevice::SOURCE_CLASS_MASK_() { return get_static_field<SCAPIX_META_STRING("SOURCE_CLASS_MASK"), jint>(); }
inline jint InputDevice::SOURCE_CLASS_NONE_() { return get_static_field<SCAPIX_META_STRING("SOURCE_CLASS_NONE"), jint>(); }
inline jint InputDevice::SOURCE_CLASS_POINTER_() { return get_static_field<SCAPIX_META_STRING("SOURCE_CLASS_POINTER"), jint>(); }
inline jint InputDevice::SOURCE_CLASS_POSITION_() { return get_static_field<SCAPIX_META_STRING("SOURCE_CLASS_POSITION"), jint>(); }
inline jint InputDevice::SOURCE_CLASS_TRACKBALL_() { return get_static_field<SCAPIX_META_STRING("SOURCE_CLASS_TRACKBALL"), jint>(); }
inline jint InputDevice::SOURCE_DPAD_() { return get_static_field<SCAPIX_META_STRING("SOURCE_DPAD"), jint>(); }
inline jint InputDevice::SOURCE_GAMEPAD_() { return get_static_field<SCAPIX_META_STRING("SOURCE_GAMEPAD"), jint>(); }
inline jint InputDevice::SOURCE_HDMI_() { return get_static_field<SCAPIX_META_STRING("SOURCE_HDMI"), jint>(); }
inline jint InputDevice::SOURCE_JOYSTICK_() { return get_static_field<SCAPIX_META_STRING("SOURCE_JOYSTICK"), jint>(); }
inline jint InputDevice::SOURCE_KEYBOARD_() { return get_static_field<SCAPIX_META_STRING("SOURCE_KEYBOARD"), jint>(); }
inline jint InputDevice::SOURCE_MOUSE_() { return get_static_field<SCAPIX_META_STRING("SOURCE_MOUSE"), jint>(); }
inline jint InputDevice::SOURCE_MOUSE_RELATIVE_() { return get_static_field<SCAPIX_META_STRING("SOURCE_MOUSE_RELATIVE"), jint>(); }
inline jint InputDevice::SOURCE_ROTARY_ENCODER_() { return get_static_field<SCAPIX_META_STRING("SOURCE_ROTARY_ENCODER"), jint>(); }
inline jint InputDevice::SOURCE_STYLUS_() { return get_static_field<SCAPIX_META_STRING("SOURCE_STYLUS"), jint>(); }
inline jint InputDevice::SOURCE_TOUCHPAD_() { return get_static_field<SCAPIX_META_STRING("SOURCE_TOUCHPAD"), jint>(); }
inline jint InputDevice::SOURCE_TOUCHSCREEN_() { return get_static_field<SCAPIX_META_STRING("SOURCE_TOUCHSCREEN"), jint>(); }
inline jint InputDevice::SOURCE_TOUCH_NAVIGATION_() { return get_static_field<SCAPIX_META_STRING("SOURCE_TOUCH_NAVIGATION"), jint>(); }
inline jint InputDevice::SOURCE_TRACKBALL_() { return get_static_field<SCAPIX_META_STRING("SOURCE_TRACKBALL"), jint>(); }
inline jint InputDevice::SOURCE_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("SOURCE_UNKNOWN"), jint>(); }
inline ref<android::view::InputDevice> InputDevice::getDevice(jint id) { return call_static_method<SCAPIX_META_STRING("getDevice"), ref<android::view::InputDevice>>(id); }
inline ref<link::java::array<jint>> InputDevice::getDeviceIds() { return call_static_method<SCAPIX_META_STRING("getDeviceIds"), ref<link::java::array<jint>>>(); }
inline jint InputDevice::getId() { return call_method<SCAPIX_META_STRING("getId"), jint>(); }
inline jint InputDevice::getControllerNumber() { return call_method<SCAPIX_META_STRING("getControllerNumber"), jint>(); }
inline jint InputDevice::getVendorId() { return call_method<SCAPIX_META_STRING("getVendorId"), jint>(); }
inline jint InputDevice::getProductId() { return call_method<SCAPIX_META_STRING("getProductId"), jint>(); }
inline ref<java::lang::String> InputDevice::getDescriptor() { return call_method<SCAPIX_META_STRING("getDescriptor"), ref<java::lang::String>>(); }
inline jboolean InputDevice::isVirtual() { return call_method<SCAPIX_META_STRING("isVirtual"), jboolean>(); }
inline ref<java::lang::String> InputDevice::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline jint InputDevice::getSources() { return call_method<SCAPIX_META_STRING("getSources"), jint>(); }
inline jboolean InputDevice::supportsSource(jint source) { return call_method<SCAPIX_META_STRING("supportsSource"), jboolean>(source); }
inline jint InputDevice::getKeyboardType() { return call_method<SCAPIX_META_STRING("getKeyboardType"), jint>(); }
inline ref<android::view::KeyCharacterMap> InputDevice::getKeyCharacterMap() { return call_method<SCAPIX_META_STRING("getKeyCharacterMap"), ref<android::view::KeyCharacterMap>>(); }
inline ref<link::java::array<jboolean>> InputDevice::hasKeys(ref<link::java::array<jint>> keys) { return call_method<SCAPIX_META_STRING("hasKeys"), ref<link::java::array<jboolean>>>(keys); }
inline ref<android::view::InputDevice_MotionRange> InputDevice::getMotionRange(jint axis) { return call_method<SCAPIX_META_STRING("getMotionRange"), ref<android::view::InputDevice_MotionRange>>(axis); }
inline ref<android::view::InputDevice_MotionRange> InputDevice::getMotionRange(jint axis, jint source) { return call_method<SCAPIX_META_STRING("getMotionRange"), ref<android::view::InputDevice_MotionRange>>(axis, source); }
inline ref<java::util::List> InputDevice::getMotionRanges() { return call_method<SCAPIX_META_STRING("getMotionRanges"), ref<java::util::List>>(); }
inline ref<android::os::Vibrator> InputDevice::getVibrator() { return call_method<SCAPIX_META_STRING("getVibrator"), ref<android::os::Vibrator>>(); }
inline jboolean InputDevice::isEnabled() { return call_method<SCAPIX_META_STRING("isEnabled"), jboolean>(); }
inline jboolean InputDevice::hasMicrophone() { return call_method<SCAPIX_META_STRING("hasMicrophone"), jboolean>(); }
inline void InputDevice::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }
inline jint InputDevice::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline ref<java::lang::String> InputDevice::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::view
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_INPUTDEVICE_H
