// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_VIEW_DISPLAY_H
#define SCAPIX_ANDROID_VIEW_DISPLAY_H

namespace scapix::java_api {

namespace android::graphics { class Point; }
namespace android::graphics { class Rect; }
namespace android::util { class DisplayMetrics; }
namespace android::view { class Display_HdrCapabilities; }
namespace android::view { class Display_Mode; }
namespace java::lang { class String; }

namespace android::view {

class Display : public object_base<SCAPIX_META_STRING("android/view/Display"),
	java::lang::Object>
{
public:

	using Mode = Display_Mode;
	using HdrCapabilities = Display_HdrCapabilities;

	static jint DEFAULT_DISPLAY_();
	static jint FLAG_PRESENTATION_();
	static jint FLAG_PRIVATE_();
	static jint FLAG_ROUND_();
	static jint FLAG_SECURE_();
	static jint FLAG_SUPPORTS_PROTECTED_BUFFERS_();
	static jint INVALID_DISPLAY_();
	static jint STATE_DOZE_();
	static jint STATE_DOZE_SUSPEND_();
	static jint STATE_OFF_();
	static jint STATE_ON_();
	static jint STATE_ON_SUSPEND_();
	static jint STATE_UNKNOWN_();
	static jint STATE_VR_();

	jint getDisplayId();
	jboolean isValid();
	jint getFlags();
	ref<java::lang::String> getName();
	void getSize(ref<android::graphics::Point> outSize);
	void getRectSize(ref<android::graphics::Rect> outSize);
	void getCurrentSizeRange(ref<android::graphics::Point> outSmallestSize, ref<android::graphics::Point> outLargestSize);
	jint getWidth();
	jint getHeight();
	jint getRotation();
	jint getOrientation();
	jint getPixelFormat();
	jfloat getRefreshRate();
	ref<link::java::array<jfloat>> getSupportedRefreshRates();
	ref<android::view::Display_Mode> getMode();
	ref<link::java::array<android::view::Display_Mode>> getSupportedModes();
	ref<android::view::Display_HdrCapabilities> getHdrCapabilities();
	jboolean isHdr();
	jboolean isWideColorGamut();
	jlong getAppVsyncOffsetNanos();
	jlong getPresentationDeadlineNanos();
	void getMetrics(ref<android::util::DisplayMetrics> outMetrics);
	void getRealSize(ref<android::graphics::Point> outSize);
	void getRealMetrics(ref<android::util::DisplayMetrics> outMetrics);
	jint getState();
	ref<java::lang::String> toString();

protected:

	Display(handle_type h) : base_(h) {}

};

} // namespace android::view
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Point.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/util/DisplayMetrics.h>
#include <scapix/java_api/android/view/Display_HdrCapabilities.h>
#include <scapix/java_api/android/view/Display_Mode.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::view {

inline jint Display::DEFAULT_DISPLAY_() { return get_static_field<SCAPIX_META_STRING("DEFAULT_DISPLAY"), jint>(); }
inline jint Display::FLAG_PRESENTATION_() { return get_static_field<SCAPIX_META_STRING("FLAG_PRESENTATION"), jint>(); }
inline jint Display::FLAG_PRIVATE_() { return get_static_field<SCAPIX_META_STRING("FLAG_PRIVATE"), jint>(); }
inline jint Display::FLAG_ROUND_() { return get_static_field<SCAPIX_META_STRING("FLAG_ROUND"), jint>(); }
inline jint Display::FLAG_SECURE_() { return get_static_field<SCAPIX_META_STRING("FLAG_SECURE"), jint>(); }
inline jint Display::FLAG_SUPPORTS_PROTECTED_BUFFERS_() { return get_static_field<SCAPIX_META_STRING("FLAG_SUPPORTS_PROTECTED_BUFFERS"), jint>(); }
inline jint Display::INVALID_DISPLAY_() { return get_static_field<SCAPIX_META_STRING("INVALID_DISPLAY"), jint>(); }
inline jint Display::STATE_DOZE_() { return get_static_field<SCAPIX_META_STRING("STATE_DOZE"), jint>(); }
inline jint Display::STATE_DOZE_SUSPEND_() { return get_static_field<SCAPIX_META_STRING("STATE_DOZE_SUSPEND"), jint>(); }
inline jint Display::STATE_OFF_() { return get_static_field<SCAPIX_META_STRING("STATE_OFF"), jint>(); }
inline jint Display::STATE_ON_() { return get_static_field<SCAPIX_META_STRING("STATE_ON"), jint>(); }
inline jint Display::STATE_ON_SUSPEND_() { return get_static_field<SCAPIX_META_STRING("STATE_ON_SUSPEND"), jint>(); }
inline jint Display::STATE_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("STATE_UNKNOWN"), jint>(); }
inline jint Display::STATE_VR_() { return get_static_field<SCAPIX_META_STRING("STATE_VR"), jint>(); }
inline jint Display::getDisplayId() { return call_method<SCAPIX_META_STRING("getDisplayId"), jint>(); }
inline jboolean Display::isValid() { return call_method<SCAPIX_META_STRING("isValid"), jboolean>(); }
inline jint Display::getFlags() { return call_method<SCAPIX_META_STRING("getFlags"), jint>(); }
inline ref<java::lang::String> Display::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline void Display::getSize(ref<android::graphics::Point> outSize) { return call_method<SCAPIX_META_STRING("getSize"), void>(outSize); }
inline void Display::getRectSize(ref<android::graphics::Rect> outSize) { return call_method<SCAPIX_META_STRING("getRectSize"), void>(outSize); }
inline void Display::getCurrentSizeRange(ref<android::graphics::Point> outSmallestSize, ref<android::graphics::Point> outLargestSize) { return call_method<SCAPIX_META_STRING("getCurrentSizeRange"), void>(outSmallestSize, outLargestSize); }
inline jint Display::getWidth() { return call_method<SCAPIX_META_STRING("getWidth"), jint>(); }
inline jint Display::getHeight() { return call_method<SCAPIX_META_STRING("getHeight"), jint>(); }
inline jint Display::getRotation() { return call_method<SCAPIX_META_STRING("getRotation"), jint>(); }
inline jint Display::getOrientation() { return call_method<SCAPIX_META_STRING("getOrientation"), jint>(); }
inline jint Display::getPixelFormat() { return call_method<SCAPIX_META_STRING("getPixelFormat"), jint>(); }
inline jfloat Display::getRefreshRate() { return call_method<SCAPIX_META_STRING("getRefreshRate"), jfloat>(); }
inline ref<link::java::array<jfloat>> Display::getSupportedRefreshRates() { return call_method<SCAPIX_META_STRING("getSupportedRefreshRates"), ref<link::java::array<jfloat>>>(); }
inline ref<android::view::Display_Mode> Display::getMode() { return call_method<SCAPIX_META_STRING("getMode"), ref<android::view::Display_Mode>>(); }
inline ref<link::java::array<android::view::Display_Mode>> Display::getSupportedModes() { return call_method<SCAPIX_META_STRING("getSupportedModes"), ref<link::java::array<android::view::Display_Mode>>>(); }
inline ref<android::view::Display_HdrCapabilities> Display::getHdrCapabilities() { return call_method<SCAPIX_META_STRING("getHdrCapabilities"), ref<android::view::Display_HdrCapabilities>>(); }
inline jboolean Display::isHdr() { return call_method<SCAPIX_META_STRING("isHdr"), jboolean>(); }
inline jboolean Display::isWideColorGamut() { return call_method<SCAPIX_META_STRING("isWideColorGamut"), jboolean>(); }
inline jlong Display::getAppVsyncOffsetNanos() { return call_method<SCAPIX_META_STRING("getAppVsyncOffsetNanos"), jlong>(); }
inline jlong Display::getPresentationDeadlineNanos() { return call_method<SCAPIX_META_STRING("getPresentationDeadlineNanos"), jlong>(); }
inline void Display::getMetrics(ref<android::util::DisplayMetrics> outMetrics) { return call_method<SCAPIX_META_STRING("getMetrics"), void>(outMetrics); }
inline void Display::getRealSize(ref<android::graphics::Point> outSize) { return call_method<SCAPIX_META_STRING("getRealSize"), void>(outSize); }
inline void Display::getRealMetrics(ref<android::util::DisplayMetrics> outMetrics) { return call_method<SCAPIX_META_STRING("getRealMetrics"), void>(outMetrics); }
inline jint Display::getState() { return call_method<SCAPIX_META_STRING("getState"), jint>(); }
inline ref<java::lang::String> Display::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::view
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_DISPLAY_H
