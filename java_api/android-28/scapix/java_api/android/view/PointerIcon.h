// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_VIEW_POINTERICON_H
#define SCAPIX_ANDROID_VIEW_POINTERICON_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content::res { class Resources; }
namespace android::graphics { class Bitmap; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }

namespace android::view {

class PointerIcon : public object_base<SCAPIX_META_STRING("android/view/PointerIcon"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint TYPE_ALIAS_();
	static jint TYPE_ALL_SCROLL_();
	static jint TYPE_ARROW_();
	static jint TYPE_CELL_();
	static jint TYPE_CONTEXT_MENU_();
	static jint TYPE_COPY_();
	static jint TYPE_CROSSHAIR_();
	static jint TYPE_DEFAULT_();
	static jint TYPE_GRAB_();
	static jint TYPE_GRABBING_();
	static jint TYPE_HAND_();
	static jint TYPE_HELP_();
	static jint TYPE_HORIZONTAL_DOUBLE_ARROW_();
	static jint TYPE_NO_DROP_();
	static jint TYPE_NULL_();
	static jint TYPE_TEXT_();
	static jint TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW_();
	static jint TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW_();
	static jint TYPE_VERTICAL_DOUBLE_ARROW_();
	static jint TYPE_VERTICAL_TEXT_();
	static jint TYPE_WAIT_();
	static jint TYPE_ZOOM_IN_();
	static jint TYPE_ZOOM_OUT_();

	static ref<android::view::PointerIcon> getSystemIcon(ref<android::content::Context> context, jint type);
	static ref<android::view::PointerIcon> create(ref<android::graphics::Bitmap> bitmap, jfloat hotSpotX, jfloat hotSpotY);
	static ref<android::view::PointerIcon> load(ref<android::content::res::Resources> resources, jint resourceId);
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint flags);
	jboolean equals(ref<java::lang::Object> other);

protected:

	PointerIcon(handle_type h) : base_(h) {}

};

} // namespace android::view
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>

namespace scapix::java_api {
namespace android::view {

inline ref<android::os::Parcelable_Creator> PointerIcon::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint PointerIcon::TYPE_ALIAS_() { return get_static_field<SCAPIX_META_STRING("TYPE_ALIAS"), jint>(); }
inline jint PointerIcon::TYPE_ALL_SCROLL_() { return get_static_field<SCAPIX_META_STRING("TYPE_ALL_SCROLL"), jint>(); }
inline jint PointerIcon::TYPE_ARROW_() { return get_static_field<SCAPIX_META_STRING("TYPE_ARROW"), jint>(); }
inline jint PointerIcon::TYPE_CELL_() { return get_static_field<SCAPIX_META_STRING("TYPE_CELL"), jint>(); }
inline jint PointerIcon::TYPE_CONTEXT_MENU_() { return get_static_field<SCAPIX_META_STRING("TYPE_CONTEXT_MENU"), jint>(); }
inline jint PointerIcon::TYPE_COPY_() { return get_static_field<SCAPIX_META_STRING("TYPE_COPY"), jint>(); }
inline jint PointerIcon::TYPE_CROSSHAIR_() { return get_static_field<SCAPIX_META_STRING("TYPE_CROSSHAIR"), jint>(); }
inline jint PointerIcon::TYPE_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("TYPE_DEFAULT"), jint>(); }
inline jint PointerIcon::TYPE_GRAB_() { return get_static_field<SCAPIX_META_STRING("TYPE_GRAB"), jint>(); }
inline jint PointerIcon::TYPE_GRABBING_() { return get_static_field<SCAPIX_META_STRING("TYPE_GRABBING"), jint>(); }
inline jint PointerIcon::TYPE_HAND_() { return get_static_field<SCAPIX_META_STRING("TYPE_HAND"), jint>(); }
inline jint PointerIcon::TYPE_HELP_() { return get_static_field<SCAPIX_META_STRING("TYPE_HELP"), jint>(); }
inline jint PointerIcon::TYPE_HORIZONTAL_DOUBLE_ARROW_() { return get_static_field<SCAPIX_META_STRING("TYPE_HORIZONTAL_DOUBLE_ARROW"), jint>(); }
inline jint PointerIcon::TYPE_NO_DROP_() { return get_static_field<SCAPIX_META_STRING("TYPE_NO_DROP"), jint>(); }
inline jint PointerIcon::TYPE_NULL_() { return get_static_field<SCAPIX_META_STRING("TYPE_NULL"), jint>(); }
inline jint PointerIcon::TYPE_TEXT_() { return get_static_field<SCAPIX_META_STRING("TYPE_TEXT"), jint>(); }
inline jint PointerIcon::TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW_() { return get_static_field<SCAPIX_META_STRING("TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW"), jint>(); }
inline jint PointerIcon::TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW_() { return get_static_field<SCAPIX_META_STRING("TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW"), jint>(); }
inline jint PointerIcon::TYPE_VERTICAL_DOUBLE_ARROW_() { return get_static_field<SCAPIX_META_STRING("TYPE_VERTICAL_DOUBLE_ARROW"), jint>(); }
inline jint PointerIcon::TYPE_VERTICAL_TEXT_() { return get_static_field<SCAPIX_META_STRING("TYPE_VERTICAL_TEXT"), jint>(); }
inline jint PointerIcon::TYPE_WAIT_() { return get_static_field<SCAPIX_META_STRING("TYPE_WAIT"), jint>(); }
inline jint PointerIcon::TYPE_ZOOM_IN_() { return get_static_field<SCAPIX_META_STRING("TYPE_ZOOM_IN"), jint>(); }
inline jint PointerIcon::TYPE_ZOOM_OUT_() { return get_static_field<SCAPIX_META_STRING("TYPE_ZOOM_OUT"), jint>(); }
inline ref<android::view::PointerIcon> PointerIcon::getSystemIcon(ref<android::content::Context> context, jint type) { return call_static_method<SCAPIX_META_STRING("getSystemIcon"), ref<android::view::PointerIcon>>(context, type); }
inline ref<android::view::PointerIcon> PointerIcon::create(ref<android::graphics::Bitmap> bitmap, jfloat hotSpotX, jfloat hotSpotY) { return call_static_method<SCAPIX_META_STRING("create"), ref<android::view::PointerIcon>>(bitmap, hotSpotX, hotSpotY); }
inline ref<android::view::PointerIcon> PointerIcon::load(ref<android::content::res::Resources> resources, jint resourceId) { return call_static_method<SCAPIX_META_STRING("load"), ref<android::view::PointerIcon>>(resources, resourceId); }
inline jint PointerIcon::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void PointerIcon::writeToParcel(ref<android::os::Parcel> out, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, flags); }
inline jboolean PointerIcon::equals(ref<java::lang::Object> other) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(other); }

} // namespace android::view
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_POINTERICON_H
