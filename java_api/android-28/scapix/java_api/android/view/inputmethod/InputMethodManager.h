// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_VIEW_INPUTMETHOD_INPUTMETHODMANAGER_H
#define SCAPIX_ANDROID_VIEW_INPUTMETHOD_INPUTMETHODMANAGER_H

namespace scapix::java_api {

namespace android::os { class Bundle; }
namespace android::os { class IBinder; }
namespace android::os { class ResultReceiver; }
namespace android::view { class KeyEvent; }
namespace android::view { class View; }
namespace android::view::inputmethod { class CompletionInfo; }
namespace android::view::inputmethod { class CursorAnchorInfo; }
namespace android::view::inputmethod { class ExtractedText; }
namespace android::view::inputmethod { class InputMethodInfo; }
namespace android::view::inputmethod { class InputMethodSubtype; }
namespace java::lang { class String; }
namespace java::util { class List; }
namespace java::util { class Map; }

namespace android::view::inputmethod {

class InputMethodManager : public object_base<SCAPIX_META_STRING("android/view/inputmethod/InputMethodManager"),
	java::lang::Object>
{
public:

	static jint HIDE_IMPLICIT_ONLY_();
	static jint HIDE_NOT_ALWAYS_();
	static jint RESULT_HIDDEN_();
	static jint RESULT_SHOWN_();
	static jint RESULT_UNCHANGED_HIDDEN_();
	static jint RESULT_UNCHANGED_SHOWN_();
	static jint SHOW_FORCED_();
	static jint SHOW_IMPLICIT_();

	ref<java::util::List> getInputMethodList();
	ref<java::util::List> getEnabledInputMethodList();
	ref<java::util::List> getEnabledInputMethodSubtypeList(ref<android::view::inputmethod::InputMethodInfo> imi, jboolean allowsImplicitlySelectedSubtypes);
	void showStatusIcon(ref<android::os::IBinder> imeToken, ref<java::lang::String> packageName, jint iconId);
	void hideStatusIcon(ref<android::os::IBinder> imeToken);
	jboolean isFullscreenMode();
	jboolean isActive(ref<android::view::View> view);
	jboolean isActive();
	jboolean isAcceptingText();
	void displayCompletions(ref<android::view::View> view, ref<link::java::array<android::view::inputmethod::CompletionInfo>> completions);
	void updateExtractedText(ref<android::view::View> view, jint token, ref<android::view::inputmethod::ExtractedText> text);
	jboolean showSoftInput(ref<android::view::View> view, jint flags);
	jboolean showSoftInput(ref<android::view::View> view, jint flags, ref<android::os::ResultReceiver> resultReceiver);
	jboolean hideSoftInputFromWindow(ref<android::os::IBinder> windowToken, jint flags);
	jboolean hideSoftInputFromWindow(ref<android::os::IBinder> windowToken, jint flags, ref<android::os::ResultReceiver> resultReceiver);
	void toggleSoftInputFromWindow(ref<android::os::IBinder> windowToken, jint showFlags, jint hideFlags);
	void toggleSoftInput(jint showFlags, jint hideFlags);
	void restartInput(ref<android::view::View> view);
	void updateSelection(ref<android::view::View> view, jint selStart, jint selEnd, jint candidatesStart, jint candidatesEnd);
	void viewClicked(ref<android::view::View> view);
	jboolean isWatchingCursor(ref<android::view::View> view);
	void updateCursor(ref<android::view::View> view, jint left, jint top, jint right, jint bottom);
	void updateCursorAnchorInfo(ref<android::view::View> view, ref<android::view::inputmethod::CursorAnchorInfo> cursorAnchorInfo);
	void sendAppPrivateCommand(ref<android::view::View> view, ref<java::lang::String> action, ref<android::os::Bundle> data);
	void setInputMethod(ref<android::os::IBinder> token, ref<java::lang::String> id);
	void setInputMethodAndSubtype(ref<android::os::IBinder> token, ref<java::lang::String> id, ref<android::view::inputmethod::InputMethodSubtype> subtype);
	void hideSoftInputFromInputMethod(ref<android::os::IBinder> token, jint flags);
	void showSoftInputFromInputMethod(ref<android::os::IBinder> token, jint flags);
	void dispatchKeyEventFromInputMethod(ref<android::view::View> targetView, ref<android::view::KeyEvent> event);
	void showInputMethodPicker();
	void showInputMethodAndSubtypeEnabler(ref<java::lang::String> imiId);
	ref<android::view::inputmethod::InputMethodSubtype> getCurrentInputMethodSubtype();
	jboolean setCurrentInputMethodSubtype(ref<android::view::inputmethod::InputMethodSubtype> subtype);
	ref<java::util::Map> getShortcutInputMethodsAndSubtypes();
	jboolean switchToLastInputMethod(ref<android::os::IBinder> imeToken);
	jboolean switchToNextInputMethod(ref<android::os::IBinder> imeToken, jboolean onlyCurrentIme);
	jboolean shouldOfferSwitchingToNextInputMethod(ref<android::os::IBinder> imeToken);
	void setAdditionalInputMethodSubtypes(ref<java::lang::String> imiId, ref<link::java::array<android::view::inputmethod::InputMethodSubtype>> subtypes);
	ref<android::view::inputmethod::InputMethodSubtype> getLastInputMethodSubtype();

protected:

	InputMethodManager(handle_type h) : base_(h) {}

};

} // namespace android::view::inputmethod
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/android/os/ResultReceiver.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/inputmethod/CompletionInfo.h>
#include <scapix/java_api/android/view/inputmethod/CursorAnchorInfo.h>
#include <scapix/java_api/android/view/inputmethod/ExtractedText.h>
#include <scapix/java_api/android/view/inputmethod/InputMethodInfo.h>
#include <scapix/java_api/android/view/inputmethod/InputMethodSubtype.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>

namespace scapix::java_api {
namespace android::view::inputmethod {

inline jint InputMethodManager::HIDE_IMPLICIT_ONLY_() { return get_static_field<SCAPIX_META_STRING("HIDE_IMPLICIT_ONLY"), jint>(); }
inline jint InputMethodManager::HIDE_NOT_ALWAYS_() { return get_static_field<SCAPIX_META_STRING("HIDE_NOT_ALWAYS"), jint>(); }
inline jint InputMethodManager::RESULT_HIDDEN_() { return get_static_field<SCAPIX_META_STRING("RESULT_HIDDEN"), jint>(); }
inline jint InputMethodManager::RESULT_SHOWN_() { return get_static_field<SCAPIX_META_STRING("RESULT_SHOWN"), jint>(); }
inline jint InputMethodManager::RESULT_UNCHANGED_HIDDEN_() { return get_static_field<SCAPIX_META_STRING("RESULT_UNCHANGED_HIDDEN"), jint>(); }
inline jint InputMethodManager::RESULT_UNCHANGED_SHOWN_() { return get_static_field<SCAPIX_META_STRING("RESULT_UNCHANGED_SHOWN"), jint>(); }
inline jint InputMethodManager::SHOW_FORCED_() { return get_static_field<SCAPIX_META_STRING("SHOW_FORCED"), jint>(); }
inline jint InputMethodManager::SHOW_IMPLICIT_() { return get_static_field<SCAPIX_META_STRING("SHOW_IMPLICIT"), jint>(); }
inline ref<java::util::List> InputMethodManager::getInputMethodList() { return call_method<SCAPIX_META_STRING("getInputMethodList"), ref<java::util::List>>(); }
inline ref<java::util::List> InputMethodManager::getEnabledInputMethodList() { return call_method<SCAPIX_META_STRING("getEnabledInputMethodList"), ref<java::util::List>>(); }
inline ref<java::util::List> InputMethodManager::getEnabledInputMethodSubtypeList(ref<android::view::inputmethod::InputMethodInfo> imi, jboolean allowsImplicitlySelectedSubtypes) { return call_method<SCAPIX_META_STRING("getEnabledInputMethodSubtypeList"), ref<java::util::List>>(imi, allowsImplicitlySelectedSubtypes); }
inline void InputMethodManager::showStatusIcon(ref<android::os::IBinder> imeToken, ref<java::lang::String> packageName, jint iconId) { return call_method<SCAPIX_META_STRING("showStatusIcon"), void>(imeToken, packageName, iconId); }
inline void InputMethodManager::hideStatusIcon(ref<android::os::IBinder> imeToken) { return call_method<SCAPIX_META_STRING("hideStatusIcon"), void>(imeToken); }
inline jboolean InputMethodManager::isFullscreenMode() { return call_method<SCAPIX_META_STRING("isFullscreenMode"), jboolean>(); }
inline jboolean InputMethodManager::isActive(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("isActive"), jboolean>(view); }
inline jboolean InputMethodManager::isActive() { return call_method<SCAPIX_META_STRING("isActive"), jboolean>(); }
inline jboolean InputMethodManager::isAcceptingText() { return call_method<SCAPIX_META_STRING("isAcceptingText"), jboolean>(); }
inline void InputMethodManager::displayCompletions(ref<android::view::View> view, ref<link::java::array<android::view::inputmethod::CompletionInfo>> completions) { return call_method<SCAPIX_META_STRING("displayCompletions"), void>(view, completions); }
inline void InputMethodManager::updateExtractedText(ref<android::view::View> view, jint token, ref<android::view::inputmethod::ExtractedText> text) { return call_method<SCAPIX_META_STRING("updateExtractedText"), void>(view, token, text); }
inline jboolean InputMethodManager::showSoftInput(ref<android::view::View> view, jint flags) { return call_method<SCAPIX_META_STRING("showSoftInput"), jboolean>(view, flags); }
inline jboolean InputMethodManager::showSoftInput(ref<android::view::View> view, jint flags, ref<android::os::ResultReceiver> resultReceiver) { return call_method<SCAPIX_META_STRING("showSoftInput"), jboolean>(view, flags, resultReceiver); }
inline jboolean InputMethodManager::hideSoftInputFromWindow(ref<android::os::IBinder> windowToken, jint flags) { return call_method<SCAPIX_META_STRING("hideSoftInputFromWindow"), jboolean>(windowToken, flags); }
inline jboolean InputMethodManager::hideSoftInputFromWindow(ref<android::os::IBinder> windowToken, jint flags, ref<android::os::ResultReceiver> resultReceiver) { return call_method<SCAPIX_META_STRING("hideSoftInputFromWindow"), jboolean>(windowToken, flags, resultReceiver); }
inline void InputMethodManager::toggleSoftInputFromWindow(ref<android::os::IBinder> windowToken, jint showFlags, jint hideFlags) { return call_method<SCAPIX_META_STRING("toggleSoftInputFromWindow"), void>(windowToken, showFlags, hideFlags); }
inline void InputMethodManager::toggleSoftInput(jint showFlags, jint hideFlags) { return call_method<SCAPIX_META_STRING("toggleSoftInput"), void>(showFlags, hideFlags); }
inline void InputMethodManager::restartInput(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("restartInput"), void>(view); }
inline void InputMethodManager::updateSelection(ref<android::view::View> view, jint selStart, jint selEnd, jint candidatesStart, jint candidatesEnd) { return call_method<SCAPIX_META_STRING("updateSelection"), void>(view, selStart, selEnd, candidatesStart, candidatesEnd); }
inline void InputMethodManager::viewClicked(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("viewClicked"), void>(view); }
inline jboolean InputMethodManager::isWatchingCursor(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("isWatchingCursor"), jboolean>(view); }
inline void InputMethodManager::updateCursor(ref<android::view::View> view, jint left, jint top, jint right, jint bottom) { return call_method<SCAPIX_META_STRING("updateCursor"), void>(view, left, top, right, bottom); }
inline void InputMethodManager::updateCursorAnchorInfo(ref<android::view::View> view, ref<android::view::inputmethod::CursorAnchorInfo> cursorAnchorInfo) { return call_method<SCAPIX_META_STRING("updateCursorAnchorInfo"), void>(view, cursorAnchorInfo); }
inline void InputMethodManager::sendAppPrivateCommand(ref<android::view::View> view, ref<java::lang::String> action, ref<android::os::Bundle> data) { return call_method<SCAPIX_META_STRING("sendAppPrivateCommand"), void>(view, action, data); }
inline void InputMethodManager::setInputMethod(ref<android::os::IBinder> token, ref<java::lang::String> id) { return call_method<SCAPIX_META_STRING("setInputMethod"), void>(token, id); }
inline void InputMethodManager::setInputMethodAndSubtype(ref<android::os::IBinder> token, ref<java::lang::String> id, ref<android::view::inputmethod::InputMethodSubtype> subtype) { return call_method<SCAPIX_META_STRING("setInputMethodAndSubtype"), void>(token, id, subtype); }
inline void InputMethodManager::hideSoftInputFromInputMethod(ref<android::os::IBinder> token, jint flags) { return call_method<SCAPIX_META_STRING("hideSoftInputFromInputMethod"), void>(token, flags); }
inline void InputMethodManager::showSoftInputFromInputMethod(ref<android::os::IBinder> token, jint flags) { return call_method<SCAPIX_META_STRING("showSoftInputFromInputMethod"), void>(token, flags); }
inline void InputMethodManager::dispatchKeyEventFromInputMethod(ref<android::view::View> targetView, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("dispatchKeyEventFromInputMethod"), void>(targetView, event); }
inline void InputMethodManager::showInputMethodPicker() { return call_method<SCAPIX_META_STRING("showInputMethodPicker"), void>(); }
inline void InputMethodManager::showInputMethodAndSubtypeEnabler(ref<java::lang::String> imiId) { return call_method<SCAPIX_META_STRING("showInputMethodAndSubtypeEnabler"), void>(imiId); }
inline ref<android::view::inputmethod::InputMethodSubtype> InputMethodManager::getCurrentInputMethodSubtype() { return call_method<SCAPIX_META_STRING("getCurrentInputMethodSubtype"), ref<android::view::inputmethod::InputMethodSubtype>>(); }
inline jboolean InputMethodManager::setCurrentInputMethodSubtype(ref<android::view::inputmethod::InputMethodSubtype> subtype) { return call_method<SCAPIX_META_STRING("setCurrentInputMethodSubtype"), jboolean>(subtype); }
inline ref<java::util::Map> InputMethodManager::getShortcutInputMethodsAndSubtypes() { return call_method<SCAPIX_META_STRING("getShortcutInputMethodsAndSubtypes"), ref<java::util::Map>>(); }
inline jboolean InputMethodManager::switchToLastInputMethod(ref<android::os::IBinder> imeToken) { return call_method<SCAPIX_META_STRING("switchToLastInputMethod"), jboolean>(imeToken); }
inline jboolean InputMethodManager::switchToNextInputMethod(ref<android::os::IBinder> imeToken, jboolean onlyCurrentIme) { return call_method<SCAPIX_META_STRING("switchToNextInputMethod"), jboolean>(imeToken, onlyCurrentIme); }
inline jboolean InputMethodManager::shouldOfferSwitchingToNextInputMethod(ref<android::os::IBinder> imeToken) { return call_method<SCAPIX_META_STRING("shouldOfferSwitchingToNextInputMethod"), jboolean>(imeToken); }
inline void InputMethodManager::setAdditionalInputMethodSubtypes(ref<java::lang::String> imiId, ref<link::java::array<android::view::inputmethod::InputMethodSubtype>> subtypes) { return call_method<SCAPIX_META_STRING("setAdditionalInputMethodSubtypes"), void>(imiId, subtypes); }
inline ref<android::view::inputmethod::InputMethodSubtype> InputMethodManager::getLastInputMethodSubtype() { return call_method<SCAPIX_META_STRING("getLastInputMethodSubtype"), ref<android::view::inputmethod::InputMethodSubtype>>(); }

} // namespace android::view::inputmethod
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_INPUTMETHOD_INPUTMETHODMANAGER_H
