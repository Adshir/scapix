// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/view/inputmethod/InputConnection.h>

#ifndef SCAPIX_ANDROID_VIEW_INPUTMETHOD_BASEINPUTCONNECTION_H
#define SCAPIX_ANDROID_VIEW_INPUTMETHOD_BASEINPUTCONNECTION_H

namespace scapix::java_api {

namespace android::os { class Bundle; }
namespace android::os { class Handler; }
namespace android::text { class Editable; }
namespace android::text { class Spannable; }
namespace android::view { class KeyEvent; }
namespace android::view { class View; }
namespace android::view::inputmethod { class CompletionInfo; }
namespace android::view::inputmethod { class CorrectionInfo; }
namespace android::view::inputmethod { class ExtractedText; }
namespace android::view::inputmethod { class ExtractedTextRequest; }
namespace android::view::inputmethod { class InputContentInfo; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::view::inputmethod {

class BaseInputConnection : public object_base<SCAPIX_META_STRING("android/view/inputmethod/BaseInputConnection"),
	java::lang::Object,
	android::view::inputmethod::InputConnection>
{
public:

	static ref<BaseInputConnection> new_object(ref<android::view::View> targetView, jboolean fullEditor);
	static void removeComposingSpans(ref<android::text::Spannable> text);
	static void setComposingSpans(ref<android::text::Spannable> text);
	static jint getComposingSpanStart(ref<android::text::Spannable> text);
	static jint getComposingSpanEnd(ref<android::text::Spannable> text);
	ref<android::text::Editable> getEditable();
	jboolean beginBatchEdit();
	jboolean endBatchEdit();
	void closeConnection();
	jboolean clearMetaKeyStates(jint states);
	jboolean commitCompletion(ref<android::view::inputmethod::CompletionInfo> text);
	jboolean commitCorrection(ref<android::view::inputmethod::CorrectionInfo> correctionInfo);
	jboolean commitText(ref<java::lang::CharSequence> text, jint newCursorPosition);
	jboolean deleteSurroundingText(jint beforeLength, jint afterLength);
	jboolean deleteSurroundingTextInCodePoints(jint beforeLength, jint afterLength);
	jboolean finishComposingText();
	jint getCursorCapsMode(jint reqModes);
	ref<android::view::inputmethod::ExtractedText> getExtractedText(ref<android::view::inputmethod::ExtractedTextRequest> request, jint flags);
	ref<java::lang::CharSequence> getTextBeforeCursor(jint length, jint flags);
	ref<java::lang::CharSequence> getSelectedText(jint flags);
	ref<java::lang::CharSequence> getTextAfterCursor(jint length, jint flags);
	jboolean performEditorAction(jint actionCode);
	jboolean performContextMenuAction(jint id);
	jboolean performPrivateCommand(ref<java::lang::String> action, ref<android::os::Bundle> data);
	jboolean requestCursorUpdates(jint cursorUpdateMode);
	ref<android::os::Handler> getHandler();
	jboolean setComposingText(ref<java::lang::CharSequence> text, jint newCursorPosition);
	jboolean setComposingRegion(jint start, jint end);
	jboolean setSelection(jint start, jint end);
	jboolean sendKeyEvent(ref<android::view::KeyEvent> event);
	jboolean reportFullscreenMode(jboolean enabled);
	jboolean commitContent(ref<android::view::inputmethod::InputContentInfo> inputContentInfo, jint flags, ref<android::os::Bundle> opts);

protected:

	BaseInputConnection(handle_type h) : base_(h) {}

};

} // namespace android::view::inputmethod
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/text/Editable.h>
#include <scapix/java_api/android/text/Spannable.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/inputmethod/CompletionInfo.h>
#include <scapix/java_api/android/view/inputmethod/CorrectionInfo.h>
#include <scapix/java_api/android/view/inputmethod/ExtractedText.h>
#include <scapix/java_api/android/view/inputmethod/ExtractedTextRequest.h>
#include <scapix/java_api/android/view/inputmethod/InputContentInfo.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::view::inputmethod {

inline ref<BaseInputConnection> BaseInputConnection::new_object(ref<android::view::View> targetView, jboolean fullEditor) { return base_::new_object(targetView, fullEditor); }
inline void BaseInputConnection::removeComposingSpans(ref<android::text::Spannable> text) { return call_static_method<SCAPIX_META_STRING("removeComposingSpans"), void>(text); }
inline void BaseInputConnection::setComposingSpans(ref<android::text::Spannable> text) { return call_static_method<SCAPIX_META_STRING("setComposingSpans"), void>(text); }
inline jint BaseInputConnection::getComposingSpanStart(ref<android::text::Spannable> text) { return call_static_method<SCAPIX_META_STRING("getComposingSpanStart"), jint>(text); }
inline jint BaseInputConnection::getComposingSpanEnd(ref<android::text::Spannable> text) { return call_static_method<SCAPIX_META_STRING("getComposingSpanEnd"), jint>(text); }
inline ref<android::text::Editable> BaseInputConnection::getEditable() { return call_method<SCAPIX_META_STRING("getEditable"), ref<android::text::Editable>>(); }
inline jboolean BaseInputConnection::beginBatchEdit() { return call_method<SCAPIX_META_STRING("beginBatchEdit"), jboolean>(); }
inline jboolean BaseInputConnection::endBatchEdit() { return call_method<SCAPIX_META_STRING("endBatchEdit"), jboolean>(); }
inline void BaseInputConnection::closeConnection() { return call_method<SCAPIX_META_STRING("closeConnection"), void>(); }
inline jboolean BaseInputConnection::clearMetaKeyStates(jint states) { return call_method<SCAPIX_META_STRING("clearMetaKeyStates"), jboolean>(states); }
inline jboolean BaseInputConnection::commitCompletion(ref<android::view::inputmethod::CompletionInfo> text) { return call_method<SCAPIX_META_STRING("commitCompletion"), jboolean>(text); }
inline jboolean BaseInputConnection::commitCorrection(ref<android::view::inputmethod::CorrectionInfo> correctionInfo) { return call_method<SCAPIX_META_STRING("commitCorrection"), jboolean>(correctionInfo); }
inline jboolean BaseInputConnection::commitText(ref<java::lang::CharSequence> text, jint newCursorPosition) { return call_method<SCAPIX_META_STRING("commitText"), jboolean>(text, newCursorPosition); }
inline jboolean BaseInputConnection::deleteSurroundingText(jint beforeLength, jint afterLength) { return call_method<SCAPIX_META_STRING("deleteSurroundingText"), jboolean>(beforeLength, afterLength); }
inline jboolean BaseInputConnection::deleteSurroundingTextInCodePoints(jint beforeLength, jint afterLength) { return call_method<SCAPIX_META_STRING("deleteSurroundingTextInCodePoints"), jboolean>(beforeLength, afterLength); }
inline jboolean BaseInputConnection::finishComposingText() { return call_method<SCAPIX_META_STRING("finishComposingText"), jboolean>(); }
inline jint BaseInputConnection::getCursorCapsMode(jint reqModes) { return call_method<SCAPIX_META_STRING("getCursorCapsMode"), jint>(reqModes); }
inline ref<android::view::inputmethod::ExtractedText> BaseInputConnection::getExtractedText(ref<android::view::inputmethod::ExtractedTextRequest> request, jint flags) { return call_method<SCAPIX_META_STRING("getExtractedText"), ref<android::view::inputmethod::ExtractedText>>(request, flags); }
inline ref<java::lang::CharSequence> BaseInputConnection::getTextBeforeCursor(jint length, jint flags) { return call_method<SCAPIX_META_STRING("getTextBeforeCursor"), ref<java::lang::CharSequence>>(length, flags); }
inline ref<java::lang::CharSequence> BaseInputConnection::getSelectedText(jint flags) { return call_method<SCAPIX_META_STRING("getSelectedText"), ref<java::lang::CharSequence>>(flags); }
inline ref<java::lang::CharSequence> BaseInputConnection::getTextAfterCursor(jint length, jint flags) { return call_method<SCAPIX_META_STRING("getTextAfterCursor"), ref<java::lang::CharSequence>>(length, flags); }
inline jboolean BaseInputConnection::performEditorAction(jint actionCode) { return call_method<SCAPIX_META_STRING("performEditorAction"), jboolean>(actionCode); }
inline jboolean BaseInputConnection::performContextMenuAction(jint id) { return call_method<SCAPIX_META_STRING("performContextMenuAction"), jboolean>(id); }
inline jboolean BaseInputConnection::performPrivateCommand(ref<java::lang::String> action, ref<android::os::Bundle> data) { return call_method<SCAPIX_META_STRING("performPrivateCommand"), jboolean>(action, data); }
inline jboolean BaseInputConnection::requestCursorUpdates(jint cursorUpdateMode) { return call_method<SCAPIX_META_STRING("requestCursorUpdates"), jboolean>(cursorUpdateMode); }
inline ref<android::os::Handler> BaseInputConnection::getHandler() { return call_method<SCAPIX_META_STRING("getHandler"), ref<android::os::Handler>>(); }
inline jboolean BaseInputConnection::setComposingText(ref<java::lang::CharSequence> text, jint newCursorPosition) { return call_method<SCAPIX_META_STRING("setComposingText"), jboolean>(text, newCursorPosition); }
inline jboolean BaseInputConnection::setComposingRegion(jint start, jint end) { return call_method<SCAPIX_META_STRING("setComposingRegion"), jboolean>(start, end); }
inline jboolean BaseInputConnection::setSelection(jint start, jint end) { return call_method<SCAPIX_META_STRING("setSelection"), jboolean>(start, end); }
inline jboolean BaseInputConnection::sendKeyEvent(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("sendKeyEvent"), jboolean>(event); }
inline jboolean BaseInputConnection::reportFullscreenMode(jboolean enabled) { return call_method<SCAPIX_META_STRING("reportFullscreenMode"), jboolean>(enabled); }
inline jboolean BaseInputConnection::commitContent(ref<android::view::inputmethod::InputContentInfo> inputContentInfo, jint flags, ref<android::os::Bundle> opts) { return call_method<SCAPIX_META_STRING("commitContent"), jboolean>(inputContentInfo, flags, opts); }

} // namespace android::view::inputmethod
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_INPUTMETHOD_BASEINPUTCONNECTION_H
