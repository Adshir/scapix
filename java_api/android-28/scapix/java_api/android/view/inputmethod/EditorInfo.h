// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/text/InputType.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_VIEW_INPUTMETHOD_EDITORINFO_H
#define SCAPIX_ANDROID_VIEW_INPUTMETHOD_EDITORINFO_H

namespace scapix::java_api {

namespace android::os { class Bundle; }
namespace android::os { class LocaleList; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::util { class Printer; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::view::inputmethod {

class EditorInfo : public object_base<SCAPIX_META_STRING("android/view/inputmethod/EditorInfo"),
	java::lang::Object,
	android::text::InputType,
	android::os::Parcelable>
{
public:

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint IME_ACTION_DONE_();
	static jint IME_ACTION_GO_();
	static jint IME_ACTION_NEXT_();
	static jint IME_ACTION_NONE_();
	static jint IME_ACTION_PREVIOUS_();
	static jint IME_ACTION_SEARCH_();
	static jint IME_ACTION_SEND_();
	static jint IME_ACTION_UNSPECIFIED_();
	static jint IME_FLAG_FORCE_ASCII_();
	static jint IME_FLAG_NAVIGATE_NEXT_();
	static jint IME_FLAG_NAVIGATE_PREVIOUS_();
	static jint IME_FLAG_NO_ACCESSORY_ACTION_();
	static jint IME_FLAG_NO_ENTER_ACTION_();
	static jint IME_FLAG_NO_EXTRACT_UI_();
	static jint IME_FLAG_NO_FULLSCREEN_();
	static jint IME_FLAG_NO_PERSONALIZED_LEARNING_();
	static jint IME_MASK_ACTION_();
	static jint IME_NULL_();
	jint actionId();
	void actionId(jint);
	ref<java::lang::CharSequence> actionLabel();
	void actionLabel(ref<java::lang::CharSequence>);
	ref<link::java::array<java::lang::String>> contentMimeTypes();
	void contentMimeTypes(ref<link::java::array<java::lang::String>>);
	ref<android::os::Bundle> extras();
	void extras(ref<android::os::Bundle>);
	jint fieldId();
	void fieldId(jint);
	ref<java::lang::String> fieldName();
	void fieldName(ref<java::lang::String>);
	ref<android::os::LocaleList> hintLocales();
	void hintLocales(ref<android::os::LocaleList>);
	ref<java::lang::CharSequence> hintText();
	void hintText(ref<java::lang::CharSequence>);
	jint imeOptions();
	void imeOptions(jint);
	jint initialCapsMode();
	void initialCapsMode(jint);
	jint initialSelEnd();
	void initialSelEnd(jint);
	jint initialSelStart();
	void initialSelStart(jint);
	jint inputType();
	void inputType(jint);
	ref<java::lang::CharSequence> label();
	void label(ref<java::lang::CharSequence>);
	ref<java::lang::String> packageName();
	void packageName(ref<java::lang::String>);
	ref<java::lang::String> privateImeOptions();
	void privateImeOptions(ref<java::lang::String>);

	static ref<EditorInfo> new_object();
	void makeCompatible(jint targetSdkVersion);
	void dump(ref<android::util::Printer> pw, ref<java::lang::String> prefix);
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	jint describeContents();

protected:

	EditorInfo(handle_type h) : base_(h) {}

};

} // namespace android::view::inputmethod
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/LocaleList.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/util/Printer.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::view::inputmethod {

inline ref<android::os::Parcelable_Creator> EditorInfo::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint EditorInfo::IME_ACTION_DONE_() { return get_static_field<SCAPIX_META_STRING("IME_ACTION_DONE"), jint>(); }
inline jint EditorInfo::IME_ACTION_GO_() { return get_static_field<SCAPIX_META_STRING("IME_ACTION_GO"), jint>(); }
inline jint EditorInfo::IME_ACTION_NEXT_() { return get_static_field<SCAPIX_META_STRING("IME_ACTION_NEXT"), jint>(); }
inline jint EditorInfo::IME_ACTION_NONE_() { return get_static_field<SCAPIX_META_STRING("IME_ACTION_NONE"), jint>(); }
inline jint EditorInfo::IME_ACTION_PREVIOUS_() { return get_static_field<SCAPIX_META_STRING("IME_ACTION_PREVIOUS"), jint>(); }
inline jint EditorInfo::IME_ACTION_SEARCH_() { return get_static_field<SCAPIX_META_STRING("IME_ACTION_SEARCH"), jint>(); }
inline jint EditorInfo::IME_ACTION_SEND_() { return get_static_field<SCAPIX_META_STRING("IME_ACTION_SEND"), jint>(); }
inline jint EditorInfo::IME_ACTION_UNSPECIFIED_() { return get_static_field<SCAPIX_META_STRING("IME_ACTION_UNSPECIFIED"), jint>(); }
inline jint EditorInfo::IME_FLAG_FORCE_ASCII_() { return get_static_field<SCAPIX_META_STRING("IME_FLAG_FORCE_ASCII"), jint>(); }
inline jint EditorInfo::IME_FLAG_NAVIGATE_NEXT_() { return get_static_field<SCAPIX_META_STRING("IME_FLAG_NAVIGATE_NEXT"), jint>(); }
inline jint EditorInfo::IME_FLAG_NAVIGATE_PREVIOUS_() { return get_static_field<SCAPIX_META_STRING("IME_FLAG_NAVIGATE_PREVIOUS"), jint>(); }
inline jint EditorInfo::IME_FLAG_NO_ACCESSORY_ACTION_() { return get_static_field<SCAPIX_META_STRING("IME_FLAG_NO_ACCESSORY_ACTION"), jint>(); }
inline jint EditorInfo::IME_FLAG_NO_ENTER_ACTION_() { return get_static_field<SCAPIX_META_STRING("IME_FLAG_NO_ENTER_ACTION"), jint>(); }
inline jint EditorInfo::IME_FLAG_NO_EXTRACT_UI_() { return get_static_field<SCAPIX_META_STRING("IME_FLAG_NO_EXTRACT_UI"), jint>(); }
inline jint EditorInfo::IME_FLAG_NO_FULLSCREEN_() { return get_static_field<SCAPIX_META_STRING("IME_FLAG_NO_FULLSCREEN"), jint>(); }
inline jint EditorInfo::IME_FLAG_NO_PERSONALIZED_LEARNING_() { return get_static_field<SCAPIX_META_STRING("IME_FLAG_NO_PERSONALIZED_LEARNING"), jint>(); }
inline jint EditorInfo::IME_MASK_ACTION_() { return get_static_field<SCAPIX_META_STRING("IME_MASK_ACTION"), jint>(); }
inline jint EditorInfo::IME_NULL_() { return get_static_field<SCAPIX_META_STRING("IME_NULL"), jint>(); }
inline jint EditorInfo::actionId() { return get_field<SCAPIX_META_STRING("actionId"), jint>(); }
inline void EditorInfo::actionId(jint v) { set_field<SCAPIX_META_STRING("actionId"), jint>(v); }
inline ref<java::lang::CharSequence> EditorInfo::actionLabel() { return get_field<SCAPIX_META_STRING("actionLabel"), ref<java::lang::CharSequence>>(); }
inline void EditorInfo::actionLabel(ref<java::lang::CharSequence> v) { set_field<SCAPIX_META_STRING("actionLabel"), ref<java::lang::CharSequence>>(v); }
inline ref<link::java::array<java::lang::String>> EditorInfo::contentMimeTypes() { return get_field<SCAPIX_META_STRING("contentMimeTypes"), ref<link::java::array<java::lang::String>>>(); }
inline void EditorInfo::contentMimeTypes(ref<link::java::array<java::lang::String>> v) { set_field<SCAPIX_META_STRING("contentMimeTypes"), ref<link::java::array<java::lang::String>>>(v); }
inline ref<android::os::Bundle> EditorInfo::extras() { return get_field<SCAPIX_META_STRING("extras"), ref<android::os::Bundle>>(); }
inline void EditorInfo::extras(ref<android::os::Bundle> v) { set_field<SCAPIX_META_STRING("extras"), ref<android::os::Bundle>>(v); }
inline jint EditorInfo::fieldId() { return get_field<SCAPIX_META_STRING("fieldId"), jint>(); }
inline void EditorInfo::fieldId(jint v) { set_field<SCAPIX_META_STRING("fieldId"), jint>(v); }
inline ref<java::lang::String> EditorInfo::fieldName() { return get_field<SCAPIX_META_STRING("fieldName"), ref<java::lang::String>>(); }
inline void EditorInfo::fieldName(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("fieldName"), ref<java::lang::String>>(v); }
inline ref<android::os::LocaleList> EditorInfo::hintLocales() { return get_field<SCAPIX_META_STRING("hintLocales"), ref<android::os::LocaleList>>(); }
inline void EditorInfo::hintLocales(ref<android::os::LocaleList> v) { set_field<SCAPIX_META_STRING("hintLocales"), ref<android::os::LocaleList>>(v); }
inline ref<java::lang::CharSequence> EditorInfo::hintText() { return get_field<SCAPIX_META_STRING("hintText"), ref<java::lang::CharSequence>>(); }
inline void EditorInfo::hintText(ref<java::lang::CharSequence> v) { set_field<SCAPIX_META_STRING("hintText"), ref<java::lang::CharSequence>>(v); }
inline jint EditorInfo::imeOptions() { return get_field<SCAPIX_META_STRING("imeOptions"), jint>(); }
inline void EditorInfo::imeOptions(jint v) { set_field<SCAPIX_META_STRING("imeOptions"), jint>(v); }
inline jint EditorInfo::initialCapsMode() { return get_field<SCAPIX_META_STRING("initialCapsMode"), jint>(); }
inline void EditorInfo::initialCapsMode(jint v) { set_field<SCAPIX_META_STRING("initialCapsMode"), jint>(v); }
inline jint EditorInfo::initialSelEnd() { return get_field<SCAPIX_META_STRING("initialSelEnd"), jint>(); }
inline void EditorInfo::initialSelEnd(jint v) { set_field<SCAPIX_META_STRING("initialSelEnd"), jint>(v); }
inline jint EditorInfo::initialSelStart() { return get_field<SCAPIX_META_STRING("initialSelStart"), jint>(); }
inline void EditorInfo::initialSelStart(jint v) { set_field<SCAPIX_META_STRING("initialSelStart"), jint>(v); }
inline jint EditorInfo::inputType() { return get_field<SCAPIX_META_STRING("inputType"), jint>(); }
inline void EditorInfo::inputType(jint v) { set_field<SCAPIX_META_STRING("inputType"), jint>(v); }
inline ref<java::lang::CharSequence> EditorInfo::label() { return get_field<SCAPIX_META_STRING("label"), ref<java::lang::CharSequence>>(); }
inline void EditorInfo::label(ref<java::lang::CharSequence> v) { set_field<SCAPIX_META_STRING("label"), ref<java::lang::CharSequence>>(v); }
inline ref<java::lang::String> EditorInfo::packageName() { return get_field<SCAPIX_META_STRING("packageName"), ref<java::lang::String>>(); }
inline void EditorInfo::packageName(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("packageName"), ref<java::lang::String>>(v); }
inline ref<java::lang::String> EditorInfo::privateImeOptions() { return get_field<SCAPIX_META_STRING("privateImeOptions"), ref<java::lang::String>>(); }
inline void EditorInfo::privateImeOptions(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("privateImeOptions"), ref<java::lang::String>>(v); }
inline ref<EditorInfo> EditorInfo::new_object() { return base_::new_object(); }
inline void EditorInfo::makeCompatible(jint targetSdkVersion) { return call_method<SCAPIX_META_STRING("makeCompatible"), void>(targetSdkVersion); }
inline void EditorInfo::dump(ref<android::util::Printer> pw, ref<java::lang::String> prefix) { return call_method<SCAPIX_META_STRING("dump"), void>(pw, prefix); }
inline void EditorInfo::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline jint EditorInfo::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }

} // namespace android::view::inputmethod
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_INPUTMETHOD_EDITORINFO_H
