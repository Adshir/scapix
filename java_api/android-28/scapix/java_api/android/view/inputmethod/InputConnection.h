// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_VIEW_INPUTMETHOD_INPUTCONNECTION_H
#define SCAPIX_ANDROID_VIEW_INPUTMETHOD_INPUTCONNECTION_H

namespace scapix::java_api {

namespace android::os { class Bundle; }
namespace android::os { class Handler; }
namespace android::view { class KeyEvent; }
namespace android::view::inputmethod { class CompletionInfo; }
namespace android::view::inputmethod { class CorrectionInfo; }
namespace android::view::inputmethod { class ExtractedText; }
namespace android::view::inputmethod { class ExtractedTextRequest; }
namespace android::view::inputmethod { class InputContentInfo; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::view::inputmethod {

class InputConnection : public object_base<SCAPIX_META_STRING("android/view/inputmethod/InputConnection"),
	java::lang::Object>
{
public:

	static jint CURSOR_UPDATE_IMMEDIATE_();
	static jint CURSOR_UPDATE_MONITOR_();
	static jint GET_EXTRACTED_TEXT_MONITOR_();
	static jint GET_TEXT_WITH_STYLES_();
	static jint INPUT_CONTENT_GRANT_READ_URI_PERMISSION_();

	ref<java::lang::CharSequence> getTextBeforeCursor(jint p1, jint p2);
	ref<java::lang::CharSequence> getTextAfterCursor(jint p1, jint p2);
	ref<java::lang::CharSequence> getSelectedText(jint p1);
	jint getCursorCapsMode(jint p1);
	ref<android::view::inputmethod::ExtractedText> getExtractedText(ref<android::view::inputmethod::ExtractedTextRequest> p1, jint p2);
	jboolean deleteSurroundingText(jint p1, jint p2);
	jboolean deleteSurroundingTextInCodePoints(jint p1, jint p2);
	jboolean setComposingText(ref<java::lang::CharSequence> p1, jint p2);
	jboolean setComposingRegion(jint p1, jint p2);
	jboolean finishComposingText();
	jboolean commitText(ref<java::lang::CharSequence> p1, jint p2);
	jboolean commitCompletion(ref<android::view::inputmethod::CompletionInfo> p1);
	jboolean commitCorrection(ref<android::view::inputmethod::CorrectionInfo> p1);
	jboolean setSelection(jint p1, jint p2);
	jboolean performEditorAction(jint p1);
	jboolean performContextMenuAction(jint p1);
	jboolean beginBatchEdit();
	jboolean endBatchEdit();
	jboolean sendKeyEvent(ref<android::view::KeyEvent> p1);
	jboolean clearMetaKeyStates(jint p1);
	jboolean reportFullscreenMode(jboolean p1);
	jboolean performPrivateCommand(ref<java::lang::String> p1, ref<android::os::Bundle> p2);
	jboolean requestCursorUpdates(jint p1);
	ref<android::os::Handler> getHandler();
	void closeConnection();
	jboolean commitContent(ref<android::view::inputmethod::InputContentInfo> p1, jint p2, ref<android::os::Bundle> p3);

protected:

	InputConnection(handle_type h) : base_(h) {}

};

} // namespace android::view::inputmethod
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/inputmethod/CompletionInfo.h>
#include <scapix/java_api/android/view/inputmethod/CorrectionInfo.h>
#include <scapix/java_api/android/view/inputmethod/ExtractedText.h>
#include <scapix/java_api/android/view/inputmethod/ExtractedTextRequest.h>
#include <scapix/java_api/android/view/inputmethod/InputContentInfo.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::view::inputmethod {

inline jint InputConnection::CURSOR_UPDATE_IMMEDIATE_() { return get_static_field<SCAPIX_META_STRING("CURSOR_UPDATE_IMMEDIATE"), jint>(); }
inline jint InputConnection::CURSOR_UPDATE_MONITOR_() { return get_static_field<SCAPIX_META_STRING("CURSOR_UPDATE_MONITOR"), jint>(); }
inline jint InputConnection::GET_EXTRACTED_TEXT_MONITOR_() { return get_static_field<SCAPIX_META_STRING("GET_EXTRACTED_TEXT_MONITOR"), jint>(); }
inline jint InputConnection::GET_TEXT_WITH_STYLES_() { return get_static_field<SCAPIX_META_STRING("GET_TEXT_WITH_STYLES"), jint>(); }
inline jint InputConnection::INPUT_CONTENT_GRANT_READ_URI_PERMISSION_() { return get_static_field<SCAPIX_META_STRING("INPUT_CONTENT_GRANT_READ_URI_PERMISSION"), jint>(); }
inline ref<java::lang::CharSequence> InputConnection::getTextBeforeCursor(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("getTextBeforeCursor"), ref<java::lang::CharSequence>>(p1, p2); }
inline ref<java::lang::CharSequence> InputConnection::getTextAfterCursor(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("getTextAfterCursor"), ref<java::lang::CharSequence>>(p1, p2); }
inline ref<java::lang::CharSequence> InputConnection::getSelectedText(jint p1) { return call_method<SCAPIX_META_STRING("getSelectedText"), ref<java::lang::CharSequence>>(p1); }
inline jint InputConnection::getCursorCapsMode(jint p1) { return call_method<SCAPIX_META_STRING("getCursorCapsMode"), jint>(p1); }
inline ref<android::view::inputmethod::ExtractedText> InputConnection::getExtractedText(ref<android::view::inputmethod::ExtractedTextRequest> p1, jint p2) { return call_method<SCAPIX_META_STRING("getExtractedText"), ref<android::view::inputmethod::ExtractedText>>(p1, p2); }
inline jboolean InputConnection::deleteSurroundingText(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("deleteSurroundingText"), jboolean>(p1, p2); }
inline jboolean InputConnection::deleteSurroundingTextInCodePoints(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("deleteSurroundingTextInCodePoints"), jboolean>(p1, p2); }
inline jboolean InputConnection::setComposingText(ref<java::lang::CharSequence> p1, jint p2) { return call_method<SCAPIX_META_STRING("setComposingText"), jboolean>(p1, p2); }
inline jboolean InputConnection::setComposingRegion(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("setComposingRegion"), jboolean>(p1, p2); }
inline jboolean InputConnection::finishComposingText() { return call_method<SCAPIX_META_STRING("finishComposingText"), jboolean>(); }
inline jboolean InputConnection::commitText(ref<java::lang::CharSequence> p1, jint p2) { return call_method<SCAPIX_META_STRING("commitText"), jboolean>(p1, p2); }
inline jboolean InputConnection::commitCompletion(ref<android::view::inputmethod::CompletionInfo> p1) { return call_method<SCAPIX_META_STRING("commitCompletion"), jboolean>(p1); }
inline jboolean InputConnection::commitCorrection(ref<android::view::inputmethod::CorrectionInfo> p1) { return call_method<SCAPIX_META_STRING("commitCorrection"), jboolean>(p1); }
inline jboolean InputConnection::setSelection(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("setSelection"), jboolean>(p1, p2); }
inline jboolean InputConnection::performEditorAction(jint p1) { return call_method<SCAPIX_META_STRING("performEditorAction"), jboolean>(p1); }
inline jboolean InputConnection::performContextMenuAction(jint p1) { return call_method<SCAPIX_META_STRING("performContextMenuAction"), jboolean>(p1); }
inline jboolean InputConnection::beginBatchEdit() { return call_method<SCAPIX_META_STRING("beginBatchEdit"), jboolean>(); }
inline jboolean InputConnection::endBatchEdit() { return call_method<SCAPIX_META_STRING("endBatchEdit"), jboolean>(); }
inline jboolean InputConnection::sendKeyEvent(ref<android::view::KeyEvent> p1) { return call_method<SCAPIX_META_STRING("sendKeyEvent"), jboolean>(p1); }
inline jboolean InputConnection::clearMetaKeyStates(jint p1) { return call_method<SCAPIX_META_STRING("clearMetaKeyStates"), jboolean>(p1); }
inline jboolean InputConnection::reportFullscreenMode(jboolean p1) { return call_method<SCAPIX_META_STRING("reportFullscreenMode"), jboolean>(p1); }
inline jboolean InputConnection::performPrivateCommand(ref<java::lang::String> p1, ref<android::os::Bundle> p2) { return call_method<SCAPIX_META_STRING("performPrivateCommand"), jboolean>(p1, p2); }
inline jboolean InputConnection::requestCursorUpdates(jint p1) { return call_method<SCAPIX_META_STRING("requestCursorUpdates"), jboolean>(p1); }
inline ref<android::os::Handler> InputConnection::getHandler() { return call_method<SCAPIX_META_STRING("getHandler"), ref<android::os::Handler>>(); }
inline void InputConnection::closeConnection() { return call_method<SCAPIX_META_STRING("closeConnection"), void>(); }
inline jboolean InputConnection::commitContent(ref<android::view::inputmethod::InputContentInfo> p1, jint p2, ref<android::os::Bundle> p3) { return call_method<SCAPIX_META_STRING("commitContent"), jboolean>(p1, p2, p3); }

} // namespace android::view::inputmethod
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_INPUTMETHOD_INPUTCONNECTION_H
