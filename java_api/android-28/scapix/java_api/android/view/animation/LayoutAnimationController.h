// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_VIEW_ANIMATION_LAYOUTANIMATIONCONTROLLER_H
#define SCAPIX_ANDROID_VIEW_ANIMATION_LAYOUTANIMATIONCONTROLLER_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::util { class AttributeSet; }
namespace android::view { class View; }
namespace android::view::animation { class Animation; }
namespace android::view::animation { class Interpolator; }
namespace android::view::animation { class LayoutAnimationController_AnimationParameters; }

namespace android::view::animation {

class LayoutAnimationController : public object_base<SCAPIX_META_STRING("android/view/animation/LayoutAnimationController"),
	java::lang::Object>
{
public:

	using AnimationParameters = LayoutAnimationController_AnimationParameters;

	static jint ORDER_NORMAL_();
	static jint ORDER_RANDOM_();
	static jint ORDER_REVERSE_();

	static ref<LayoutAnimationController> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<LayoutAnimationController> new_object(ref<android::view::animation::Animation> animation);
	static ref<LayoutAnimationController> new_object(ref<android::view::animation::Animation> animation, jfloat delay);
	jint getOrder();
	void setOrder(jint order);
	void setAnimation(ref<android::content::Context> context, jint resourceID);
	void setAnimation(ref<android::view::animation::Animation> animation);
	ref<android::view::animation::Animation> getAnimation();
	void setInterpolator(ref<android::content::Context> context, jint resourceID);
	void setInterpolator(ref<android::view::animation::Interpolator> interpolator);
	ref<android::view::animation::Interpolator> getInterpolator();
	jfloat getDelay();
	void setDelay(jfloat delay);
	jboolean willOverlap();
	void start();
	ref<android::view::animation::Animation> getAnimationForView(ref<android::view::View> view);
	jboolean isDone();

protected:

	LayoutAnimationController(handle_type h) : base_(h) {}

};

} // namespace android::view::animation
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/animation/Animation.h>
#include <scapix/java_api/android/view/animation/Interpolator.h>

namespace scapix::java_api {
namespace android::view::animation {

inline jint LayoutAnimationController::ORDER_NORMAL_() { return get_static_field<SCAPIX_META_STRING("ORDER_NORMAL"), jint>(); }
inline jint LayoutAnimationController::ORDER_RANDOM_() { return get_static_field<SCAPIX_META_STRING("ORDER_RANDOM"), jint>(); }
inline jint LayoutAnimationController::ORDER_REVERSE_() { return get_static_field<SCAPIX_META_STRING("ORDER_REVERSE"), jint>(); }
inline ref<LayoutAnimationController> LayoutAnimationController::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<LayoutAnimationController> LayoutAnimationController::new_object(ref<android::view::animation::Animation> animation) { return base_::new_object(animation); }
inline ref<LayoutAnimationController> LayoutAnimationController::new_object(ref<android::view::animation::Animation> animation, jfloat delay) { return base_::new_object(animation, delay); }
inline jint LayoutAnimationController::getOrder() { return call_method<SCAPIX_META_STRING("getOrder"), jint>(); }
inline void LayoutAnimationController::setOrder(jint order) { return call_method<SCAPIX_META_STRING("setOrder"), void>(order); }
inline void LayoutAnimationController::setAnimation(ref<android::content::Context> context, jint resourceID) { return call_method<SCAPIX_META_STRING("setAnimation"), void>(context, resourceID); }
inline void LayoutAnimationController::setAnimation(ref<android::view::animation::Animation> animation) { return call_method<SCAPIX_META_STRING("setAnimation"), void>(animation); }
inline ref<android::view::animation::Animation> LayoutAnimationController::getAnimation() { return call_method<SCAPIX_META_STRING("getAnimation"), ref<android::view::animation::Animation>>(); }
inline void LayoutAnimationController::setInterpolator(ref<android::content::Context> context, jint resourceID) { return call_method<SCAPIX_META_STRING("setInterpolator"), void>(context, resourceID); }
inline void LayoutAnimationController::setInterpolator(ref<android::view::animation::Interpolator> interpolator) { return call_method<SCAPIX_META_STRING("setInterpolator"), void>(interpolator); }
inline ref<android::view::animation::Interpolator> LayoutAnimationController::getInterpolator() { return call_method<SCAPIX_META_STRING("getInterpolator"), ref<android::view::animation::Interpolator>>(); }
inline jfloat LayoutAnimationController::getDelay() { return call_method<SCAPIX_META_STRING("getDelay"), jfloat>(); }
inline void LayoutAnimationController::setDelay(jfloat delay) { return call_method<SCAPIX_META_STRING("setDelay"), void>(delay); }
inline jboolean LayoutAnimationController::willOverlap() { return call_method<SCAPIX_META_STRING("willOverlap"), jboolean>(); }
inline void LayoutAnimationController::start() { return call_method<SCAPIX_META_STRING("start"), void>(); }
inline ref<android::view::animation::Animation> LayoutAnimationController::getAnimationForView(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("getAnimationForView"), ref<android::view::animation::Animation>>(view); }
inline jboolean LayoutAnimationController::isDone() { return call_method<SCAPIX_META_STRING("isDone"), jboolean>(); }

} // namespace android::view::animation
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_ANIMATION_LAYOUTANIMATIONCONTROLLER_H
