// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_ANDROID_VIEW_ANIMATION_ANIMATION_H
#define SCAPIX_ANDROID_VIEW_ANIMATION_ANIMATION_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::util { class AttributeSet; }
namespace android::view::animation { class Animation_AnimationListener; }
namespace android::view::animation { class Interpolator; }
namespace android::view::animation { class Transformation; }

namespace android::view::animation {

class Animation : public object_base<SCAPIX_META_STRING("android/view/animation/Animation"),
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	using AnimationListener = Animation_AnimationListener;

	static jint ABSOLUTE_();
	static jint INFINITE_();
	static jint RELATIVE_TO_PARENT_();
	static jint RELATIVE_TO_SELF_();
	static jint RESTART_();
	static jint REVERSE_();
	static jint START_ON_FIRST_FRAME_();
	static jint ZORDER_BOTTOM_();
	static jint ZORDER_NORMAL_();
	static jint ZORDER_TOP_();

	static ref<Animation> new_object();
	static ref<Animation> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	void reset();
	void cancel();
	jboolean isInitialized();
	void initialize(jint width, jint height, jint parentWidth, jint parentHeight);
	void setInterpolator(ref<android::content::Context> context, jint resID);
	void setInterpolator(ref<android::view::animation::Interpolator> i);
	void setStartOffset(jlong startOffset);
	void setDuration(jlong durationMillis);
	void restrictDuration(jlong durationMillis);
	void scaleCurrentDuration(jfloat scale);
	void setStartTime(jlong startTimeMillis);
	void start();
	void startNow();
	void setRepeatMode(jint repeatMode);
	void setRepeatCount(jint repeatCount);
	jboolean isFillEnabled();
	void setFillEnabled(jboolean fillEnabled);
	void setFillBefore(jboolean fillBefore);
	void setFillAfter(jboolean fillAfter);
	void setZAdjustment(jint zAdjustment);
	void setBackgroundColor(jint bg);
	void setDetachWallpaper(jboolean detachWallpaper);
	ref<android::view::animation::Interpolator> getInterpolator();
	jlong getStartTime();
	jlong getDuration();
	jlong getStartOffset();
	jint getRepeatMode();
	jint getRepeatCount();
	jboolean getFillBefore();
	jboolean getFillAfter();
	jint getZAdjustment();
	jint getBackgroundColor();
	jboolean getDetachWallpaper();
	jboolean willChangeTransformationMatrix();
	jboolean willChangeBounds();
	void setAnimationListener(ref<android::view::animation::Animation_AnimationListener> listener);
	jlong computeDurationHint();
	jboolean getTransformation(jlong currentTime, ref<android::view::animation::Transformation> p2);
	jboolean getTransformation(jlong currentTime, ref<android::view::animation::Transformation> p2, jfloat outTransformation);
	jboolean hasStarted();
	jboolean hasEnded();

protected:

	Animation(handle_type h) : base_(h) {}

};

} // namespace android::view::animation
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/animation/Animation_AnimationListener.h>
#include <scapix/java_api/android/view/animation/Interpolator.h>
#include <scapix/java_api/android/view/animation/Transformation.h>

namespace scapix::java_api {
namespace android::view::animation {

inline jint Animation::ABSOLUTE_() { return get_static_field<SCAPIX_META_STRING("ABSOLUTE"), jint>(); }
inline jint Animation::INFINITE_() { return get_static_field<SCAPIX_META_STRING("INFINITE"), jint>(); }
inline jint Animation::RELATIVE_TO_PARENT_() { return get_static_field<SCAPIX_META_STRING("RELATIVE_TO_PARENT"), jint>(); }
inline jint Animation::RELATIVE_TO_SELF_() { return get_static_field<SCAPIX_META_STRING("RELATIVE_TO_SELF"), jint>(); }
inline jint Animation::RESTART_() { return get_static_field<SCAPIX_META_STRING("RESTART"), jint>(); }
inline jint Animation::REVERSE_() { return get_static_field<SCAPIX_META_STRING("REVERSE"), jint>(); }
inline jint Animation::START_ON_FIRST_FRAME_() { return get_static_field<SCAPIX_META_STRING("START_ON_FIRST_FRAME"), jint>(); }
inline jint Animation::ZORDER_BOTTOM_() { return get_static_field<SCAPIX_META_STRING("ZORDER_BOTTOM"), jint>(); }
inline jint Animation::ZORDER_NORMAL_() { return get_static_field<SCAPIX_META_STRING("ZORDER_NORMAL"), jint>(); }
inline jint Animation::ZORDER_TOP_() { return get_static_field<SCAPIX_META_STRING("ZORDER_TOP"), jint>(); }
inline ref<Animation> Animation::new_object() { return base_::new_object(); }
inline ref<Animation> Animation::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline void Animation::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline void Animation::cancel() { return call_method<SCAPIX_META_STRING("cancel"), void>(); }
inline jboolean Animation::isInitialized() { return call_method<SCAPIX_META_STRING("isInitialized"), jboolean>(); }
inline void Animation::initialize(jint width, jint height, jint parentWidth, jint parentHeight) { return call_method<SCAPIX_META_STRING("initialize"), void>(width, height, parentWidth, parentHeight); }
inline void Animation::setInterpolator(ref<android::content::Context> context, jint resID) { return call_method<SCAPIX_META_STRING("setInterpolator"), void>(context, resID); }
inline void Animation::setInterpolator(ref<android::view::animation::Interpolator> i) { return call_method<SCAPIX_META_STRING("setInterpolator"), void>(i); }
inline void Animation::setStartOffset(jlong startOffset) { return call_method<SCAPIX_META_STRING("setStartOffset"), void>(startOffset); }
inline void Animation::setDuration(jlong durationMillis) { return call_method<SCAPIX_META_STRING("setDuration"), void>(durationMillis); }
inline void Animation::restrictDuration(jlong durationMillis) { return call_method<SCAPIX_META_STRING("restrictDuration"), void>(durationMillis); }
inline void Animation::scaleCurrentDuration(jfloat scale) { return call_method<SCAPIX_META_STRING("scaleCurrentDuration"), void>(scale); }
inline void Animation::setStartTime(jlong startTimeMillis) { return call_method<SCAPIX_META_STRING("setStartTime"), void>(startTimeMillis); }
inline void Animation::start() { return call_method<SCAPIX_META_STRING("start"), void>(); }
inline void Animation::startNow() { return call_method<SCAPIX_META_STRING("startNow"), void>(); }
inline void Animation::setRepeatMode(jint repeatMode) { return call_method<SCAPIX_META_STRING("setRepeatMode"), void>(repeatMode); }
inline void Animation::setRepeatCount(jint repeatCount) { return call_method<SCAPIX_META_STRING("setRepeatCount"), void>(repeatCount); }
inline jboolean Animation::isFillEnabled() { return call_method<SCAPIX_META_STRING("isFillEnabled"), jboolean>(); }
inline void Animation::setFillEnabled(jboolean fillEnabled) { return call_method<SCAPIX_META_STRING("setFillEnabled"), void>(fillEnabled); }
inline void Animation::setFillBefore(jboolean fillBefore) { return call_method<SCAPIX_META_STRING("setFillBefore"), void>(fillBefore); }
inline void Animation::setFillAfter(jboolean fillAfter) { return call_method<SCAPIX_META_STRING("setFillAfter"), void>(fillAfter); }
inline void Animation::setZAdjustment(jint zAdjustment) { return call_method<SCAPIX_META_STRING("setZAdjustment"), void>(zAdjustment); }
inline void Animation::setBackgroundColor(jint bg) { return call_method<SCAPIX_META_STRING("setBackgroundColor"), void>(bg); }
inline void Animation::setDetachWallpaper(jboolean detachWallpaper) { return call_method<SCAPIX_META_STRING("setDetachWallpaper"), void>(detachWallpaper); }
inline ref<android::view::animation::Interpolator> Animation::getInterpolator() { return call_method<SCAPIX_META_STRING("getInterpolator"), ref<android::view::animation::Interpolator>>(); }
inline jlong Animation::getStartTime() { return call_method<SCAPIX_META_STRING("getStartTime"), jlong>(); }
inline jlong Animation::getDuration() { return call_method<SCAPIX_META_STRING("getDuration"), jlong>(); }
inline jlong Animation::getStartOffset() { return call_method<SCAPIX_META_STRING("getStartOffset"), jlong>(); }
inline jint Animation::getRepeatMode() { return call_method<SCAPIX_META_STRING("getRepeatMode"), jint>(); }
inline jint Animation::getRepeatCount() { return call_method<SCAPIX_META_STRING("getRepeatCount"), jint>(); }
inline jboolean Animation::getFillBefore() { return call_method<SCAPIX_META_STRING("getFillBefore"), jboolean>(); }
inline jboolean Animation::getFillAfter() { return call_method<SCAPIX_META_STRING("getFillAfter"), jboolean>(); }
inline jint Animation::getZAdjustment() { return call_method<SCAPIX_META_STRING("getZAdjustment"), jint>(); }
inline jint Animation::getBackgroundColor() { return call_method<SCAPIX_META_STRING("getBackgroundColor"), jint>(); }
inline jboolean Animation::getDetachWallpaper() { return call_method<SCAPIX_META_STRING("getDetachWallpaper"), jboolean>(); }
inline jboolean Animation::willChangeTransformationMatrix() { return call_method<SCAPIX_META_STRING("willChangeTransformationMatrix"), jboolean>(); }
inline jboolean Animation::willChangeBounds() { return call_method<SCAPIX_META_STRING("willChangeBounds"), jboolean>(); }
inline void Animation::setAnimationListener(ref<android::view::animation::Animation_AnimationListener> listener) { return call_method<SCAPIX_META_STRING("setAnimationListener"), void>(listener); }
inline jlong Animation::computeDurationHint() { return call_method<SCAPIX_META_STRING("computeDurationHint"), jlong>(); }
inline jboolean Animation::getTransformation(jlong currentTime, ref<android::view::animation::Transformation> p2) { return call_method<SCAPIX_META_STRING("getTransformation"), jboolean>(currentTime, p2); }
inline jboolean Animation::getTransformation(jlong currentTime, ref<android::view::animation::Transformation> p2, jfloat outTransformation) { return call_method<SCAPIX_META_STRING("getTransformation"), jboolean>(currentTime, p2, outTransformation); }
inline jboolean Animation::hasStarted() { return call_method<SCAPIX_META_STRING("hasStarted"), jboolean>(); }
inline jboolean Animation::hasEnded() { return call_method<SCAPIX_META_STRING("hasEnded"), jboolean>(); }

} // namespace android::view::animation
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_ANIMATION_ANIMATION_H
