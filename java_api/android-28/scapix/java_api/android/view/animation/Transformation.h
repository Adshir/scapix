// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_VIEW_ANIMATION_TRANSFORMATION_H
#define SCAPIX_ANDROID_VIEW_ANIMATION_TRANSFORMATION_H

namespace scapix::java_api {

namespace android::graphics { class Matrix; }
namespace java::lang { class String; }

namespace android::view::animation {

class Transformation : public object_base<SCAPIX_META_STRING("android/view/animation/Transformation"),
	java::lang::Object>
{
public:

	static jint TYPE_ALPHA_();
	static jint TYPE_BOTH_();
	static jint TYPE_IDENTITY_();
	static jint TYPE_MATRIX_();

	static ref<Transformation> new_object();
	void clear();
	jint getTransformationType();
	void setTransformationType(jint transformationType);
	void set(ref<android::view::animation::Transformation> t);
	void compose(ref<android::view::animation::Transformation> t);
	ref<android::graphics::Matrix> getMatrix();
	void setAlpha(jfloat alpha);
	jfloat getAlpha();
	ref<java::lang::String> toString();
	ref<java::lang::String> toShortString();

protected:

	Transformation(handle_type h) : base_(h) {}

};

} // namespace android::view::animation
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Matrix.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::view::animation {

inline jint Transformation::TYPE_ALPHA_() { return get_static_field<SCAPIX_META_STRING("TYPE_ALPHA"), jint>(); }
inline jint Transformation::TYPE_BOTH_() { return get_static_field<SCAPIX_META_STRING("TYPE_BOTH"), jint>(); }
inline jint Transformation::TYPE_IDENTITY_() { return get_static_field<SCAPIX_META_STRING("TYPE_IDENTITY"), jint>(); }
inline jint Transformation::TYPE_MATRIX_() { return get_static_field<SCAPIX_META_STRING("TYPE_MATRIX"), jint>(); }
inline ref<Transformation> Transformation::new_object() { return base_::new_object(); }
inline void Transformation::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline jint Transformation::getTransformationType() { return call_method<SCAPIX_META_STRING("getTransformationType"), jint>(); }
inline void Transformation::setTransformationType(jint transformationType) { return call_method<SCAPIX_META_STRING("setTransformationType"), void>(transformationType); }
inline void Transformation::set(ref<android::view::animation::Transformation> t) { return call_method<SCAPIX_META_STRING("set"), void>(t); }
inline void Transformation::compose(ref<android::view::animation::Transformation> t) { return call_method<SCAPIX_META_STRING("compose"), void>(t); }
inline ref<android::graphics::Matrix> Transformation::getMatrix() { return call_method<SCAPIX_META_STRING("getMatrix"), ref<android::graphics::Matrix>>(); }
inline void Transformation::setAlpha(jfloat alpha) { return call_method<SCAPIX_META_STRING("setAlpha"), void>(alpha); }
inline jfloat Transformation::getAlpha() { return call_method<SCAPIX_META_STRING("getAlpha"), jfloat>(); }
inline ref<java::lang::String> Transformation::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Transformation::toShortString() { return call_method<SCAPIX_META_STRING("toShortString"), ref<java::lang::String>>(); }

} // namespace android::view::animation
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_ANIMATION_TRANSFORMATION_H
