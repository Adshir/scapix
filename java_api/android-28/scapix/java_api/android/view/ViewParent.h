// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_VIEW_VIEWPARENT_H
#define SCAPIX_ANDROID_VIEW_VIEWPARENT_H

namespace scapix::java_api {

namespace android::graphics { class Point; }
namespace android::graphics { class Rect; }
namespace android::os { class Bundle; }
namespace android::view { class ActionMode; }
namespace android::view { class ActionMode_Callback; }
namespace android::view { class ContextMenu; }
namespace android::view { class View; }
namespace android::view::accessibility { class AccessibilityEvent; }

namespace android::view {

class ViewParent : public object_base<SCAPIX_META_STRING("android/view/ViewParent"),
	java::lang::Object>
{
public:

	void requestLayout();
	jboolean isLayoutRequested();
	void requestTransparentRegion(ref<android::view::View> p1);
	void onDescendantInvalidated(ref<android::view::View> child, ref<android::view::View> target);
	void invalidateChild(ref<android::view::View> p1, ref<android::graphics::Rect> p2);
	ref<android::view::ViewParent> invalidateChildInParent(ref<link::java::array<jint>> p1, ref<android::graphics::Rect> p2);
	ref<android::view::ViewParent> getParent();
	void requestChildFocus(ref<android::view::View> p1, ref<android::view::View> p2);
	void recomputeViewAttributes(ref<android::view::View> p1);
	void clearChildFocus(ref<android::view::View> p1);
	jboolean getChildVisibleRect(ref<android::view::View> p1, ref<android::graphics::Rect> p2, ref<android::graphics::Point> p3);
	ref<android::view::View> focusSearch(ref<android::view::View> p1, jint p2);
	ref<android::view::View> keyboardNavigationClusterSearch(ref<android::view::View> p1, jint p2);
	void bringChildToFront(ref<android::view::View> p1);
	void focusableViewAvailable(ref<android::view::View> p1);
	jboolean showContextMenuForChild(ref<android::view::View> p1);
	jboolean showContextMenuForChild(ref<android::view::View> p1, jfloat p2, jfloat p3);
	void createContextMenu(ref<android::view::ContextMenu> p1);
	ref<android::view::ActionMode> startActionModeForChild(ref<android::view::View> p1, ref<android::view::ActionMode_Callback> p2);
	ref<android::view::ActionMode> startActionModeForChild(ref<android::view::View> p1, ref<android::view::ActionMode_Callback> p2, jint p3);
	void childDrawableStateChanged(ref<android::view::View> p1);
	void requestDisallowInterceptTouchEvent(jboolean p1);
	jboolean requestChildRectangleOnScreen(ref<android::view::View> p1, ref<android::graphics::Rect> p2, jboolean p3);
	jboolean requestSendAccessibilityEvent(ref<android::view::View> p1, ref<android::view::accessibility::AccessibilityEvent> p2);
	void childHasTransientStateChanged(ref<android::view::View> p1, jboolean p2);
	void requestFitSystemWindows();
	ref<android::view::ViewParent> getParentForAccessibility();
	void notifySubtreeAccessibilityStateChanged(ref<android::view::View> p1, ref<android::view::View> p2, jint p3);
	jboolean canResolveLayoutDirection();
	jboolean isLayoutDirectionResolved();
	jint getLayoutDirection();
	jboolean canResolveTextDirection();
	jboolean isTextDirectionResolved();
	jint getTextDirection();
	jboolean canResolveTextAlignment();
	jboolean isTextAlignmentResolved();
	jint getTextAlignment();
	jboolean onStartNestedScroll(ref<android::view::View> p1, ref<android::view::View> p2, jint p3);
	void onNestedScrollAccepted(ref<android::view::View> p1, ref<android::view::View> p2, jint p3);
	void onStopNestedScroll(ref<android::view::View> p1);
	void onNestedScroll(ref<android::view::View> p1, jint p2, jint p3, jint p4, jint p5);
	void onNestedPreScroll(ref<android::view::View> p1, jint p2, jint p3, ref<link::java::array<jint>> p4);
	jboolean onNestedFling(ref<android::view::View> p1, jfloat p2, jfloat p3, jboolean p4);
	jboolean onNestedPreFling(ref<android::view::View> p1, jfloat p2, jfloat p3);
	jboolean onNestedPrePerformAccessibilityAction(ref<android::view::View> p1, jint p2, ref<android::os::Bundle> p3);

protected:

	ViewParent(handle_type h) : base_(h) {}

};

} // namespace android::view
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Point.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/view/ActionMode.h>
#include <scapix/java_api/android/view/ActionMode_Callback.h>
#include <scapix/java_api/android/view/ContextMenu.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>

namespace scapix::java_api {
namespace android::view {

inline void ViewParent::requestLayout() { return call_method<SCAPIX_META_STRING("requestLayout"), void>(); }
inline jboolean ViewParent::isLayoutRequested() { return call_method<SCAPIX_META_STRING("isLayoutRequested"), jboolean>(); }
inline void ViewParent::requestTransparentRegion(ref<android::view::View> p1) { return call_method<SCAPIX_META_STRING("requestTransparentRegion"), void>(p1); }
inline void ViewParent::onDescendantInvalidated(ref<android::view::View> child, ref<android::view::View> target) { return call_method<SCAPIX_META_STRING("onDescendantInvalidated"), void>(child, target); }
inline void ViewParent::invalidateChild(ref<android::view::View> p1, ref<android::graphics::Rect> p2) { return call_method<SCAPIX_META_STRING("invalidateChild"), void>(p1, p2); }
inline ref<android::view::ViewParent> ViewParent::invalidateChildInParent(ref<link::java::array<jint>> p1, ref<android::graphics::Rect> p2) { return call_method<SCAPIX_META_STRING("invalidateChildInParent"), ref<android::view::ViewParent>>(p1, p2); }
inline ref<android::view::ViewParent> ViewParent::getParent() { return call_method<SCAPIX_META_STRING("getParent"), ref<android::view::ViewParent>>(); }
inline void ViewParent::requestChildFocus(ref<android::view::View> p1, ref<android::view::View> p2) { return call_method<SCAPIX_META_STRING("requestChildFocus"), void>(p1, p2); }
inline void ViewParent::recomputeViewAttributes(ref<android::view::View> p1) { return call_method<SCAPIX_META_STRING("recomputeViewAttributes"), void>(p1); }
inline void ViewParent::clearChildFocus(ref<android::view::View> p1) { return call_method<SCAPIX_META_STRING("clearChildFocus"), void>(p1); }
inline jboolean ViewParent::getChildVisibleRect(ref<android::view::View> p1, ref<android::graphics::Rect> p2, ref<android::graphics::Point> p3) { return call_method<SCAPIX_META_STRING("getChildVisibleRect"), jboolean>(p1, p2, p3); }
inline ref<android::view::View> ViewParent::focusSearch(ref<android::view::View> p1, jint p2) { return call_method<SCAPIX_META_STRING("focusSearch"), ref<android::view::View>>(p1, p2); }
inline ref<android::view::View> ViewParent::keyboardNavigationClusterSearch(ref<android::view::View> p1, jint p2) { return call_method<SCAPIX_META_STRING("keyboardNavigationClusterSearch"), ref<android::view::View>>(p1, p2); }
inline void ViewParent::bringChildToFront(ref<android::view::View> p1) { return call_method<SCAPIX_META_STRING("bringChildToFront"), void>(p1); }
inline void ViewParent::focusableViewAvailable(ref<android::view::View> p1) { return call_method<SCAPIX_META_STRING("focusableViewAvailable"), void>(p1); }
inline jboolean ViewParent::showContextMenuForChild(ref<android::view::View> p1) { return call_method<SCAPIX_META_STRING("showContextMenuForChild"), jboolean>(p1); }
inline jboolean ViewParent::showContextMenuForChild(ref<android::view::View> p1, jfloat p2, jfloat p3) { return call_method<SCAPIX_META_STRING("showContextMenuForChild"), jboolean>(p1, p2, p3); }
inline void ViewParent::createContextMenu(ref<android::view::ContextMenu> p1) { return call_method<SCAPIX_META_STRING("createContextMenu"), void>(p1); }
inline ref<android::view::ActionMode> ViewParent::startActionModeForChild(ref<android::view::View> p1, ref<android::view::ActionMode_Callback> p2) { return call_method<SCAPIX_META_STRING("startActionModeForChild"), ref<android::view::ActionMode>>(p1, p2); }
inline ref<android::view::ActionMode> ViewParent::startActionModeForChild(ref<android::view::View> p1, ref<android::view::ActionMode_Callback> p2, jint p3) { return call_method<SCAPIX_META_STRING("startActionModeForChild"), ref<android::view::ActionMode>>(p1, p2, p3); }
inline void ViewParent::childDrawableStateChanged(ref<android::view::View> p1) { return call_method<SCAPIX_META_STRING("childDrawableStateChanged"), void>(p1); }
inline void ViewParent::requestDisallowInterceptTouchEvent(jboolean p1) { return call_method<SCAPIX_META_STRING("requestDisallowInterceptTouchEvent"), void>(p1); }
inline jboolean ViewParent::requestChildRectangleOnScreen(ref<android::view::View> p1, ref<android::graphics::Rect> p2, jboolean p3) { return call_method<SCAPIX_META_STRING("requestChildRectangleOnScreen"), jboolean>(p1, p2, p3); }
inline jboolean ViewParent::requestSendAccessibilityEvent(ref<android::view::View> p1, ref<android::view::accessibility::AccessibilityEvent> p2) { return call_method<SCAPIX_META_STRING("requestSendAccessibilityEvent"), jboolean>(p1, p2); }
inline void ViewParent::childHasTransientStateChanged(ref<android::view::View> p1, jboolean p2) { return call_method<SCAPIX_META_STRING("childHasTransientStateChanged"), void>(p1, p2); }
inline void ViewParent::requestFitSystemWindows() { return call_method<SCAPIX_META_STRING("requestFitSystemWindows"), void>(); }
inline ref<android::view::ViewParent> ViewParent::getParentForAccessibility() { return call_method<SCAPIX_META_STRING("getParentForAccessibility"), ref<android::view::ViewParent>>(); }
inline void ViewParent::notifySubtreeAccessibilityStateChanged(ref<android::view::View> p1, ref<android::view::View> p2, jint p3) { return call_method<SCAPIX_META_STRING("notifySubtreeAccessibilityStateChanged"), void>(p1, p2, p3); }
inline jboolean ViewParent::canResolveLayoutDirection() { return call_method<SCAPIX_META_STRING("canResolveLayoutDirection"), jboolean>(); }
inline jboolean ViewParent::isLayoutDirectionResolved() { return call_method<SCAPIX_META_STRING("isLayoutDirectionResolved"), jboolean>(); }
inline jint ViewParent::getLayoutDirection() { return call_method<SCAPIX_META_STRING("getLayoutDirection"), jint>(); }
inline jboolean ViewParent::canResolveTextDirection() { return call_method<SCAPIX_META_STRING("canResolveTextDirection"), jboolean>(); }
inline jboolean ViewParent::isTextDirectionResolved() { return call_method<SCAPIX_META_STRING("isTextDirectionResolved"), jboolean>(); }
inline jint ViewParent::getTextDirection() { return call_method<SCAPIX_META_STRING("getTextDirection"), jint>(); }
inline jboolean ViewParent::canResolveTextAlignment() { return call_method<SCAPIX_META_STRING("canResolveTextAlignment"), jboolean>(); }
inline jboolean ViewParent::isTextAlignmentResolved() { return call_method<SCAPIX_META_STRING("isTextAlignmentResolved"), jboolean>(); }
inline jint ViewParent::getTextAlignment() { return call_method<SCAPIX_META_STRING("getTextAlignment"), jint>(); }
inline jboolean ViewParent::onStartNestedScroll(ref<android::view::View> p1, ref<android::view::View> p2, jint p3) { return call_method<SCAPIX_META_STRING("onStartNestedScroll"), jboolean>(p1, p2, p3); }
inline void ViewParent::onNestedScrollAccepted(ref<android::view::View> p1, ref<android::view::View> p2, jint p3) { return call_method<SCAPIX_META_STRING("onNestedScrollAccepted"), void>(p1, p2, p3); }
inline void ViewParent::onStopNestedScroll(ref<android::view::View> p1) { return call_method<SCAPIX_META_STRING("onStopNestedScroll"), void>(p1); }
inline void ViewParent::onNestedScroll(ref<android::view::View> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<SCAPIX_META_STRING("onNestedScroll"), void>(p1, p2, p3, p4, p5); }
inline void ViewParent::onNestedPreScroll(ref<android::view::View> p1, jint p2, jint p3, ref<link::java::array<jint>> p4) { return call_method<SCAPIX_META_STRING("onNestedPreScroll"), void>(p1, p2, p3, p4); }
inline jboolean ViewParent::onNestedFling(ref<android::view::View> p1, jfloat p2, jfloat p3, jboolean p4) { return call_method<SCAPIX_META_STRING("onNestedFling"), jboolean>(p1, p2, p3, p4); }
inline jboolean ViewParent::onNestedPreFling(ref<android::view::View> p1, jfloat p2, jfloat p3) { return call_method<SCAPIX_META_STRING("onNestedPreFling"), jboolean>(p1, p2, p3); }
inline jboolean ViewParent::onNestedPrePerformAccessibilityAction(ref<android::view::View> p1, jint p2, ref<android::os::Bundle> p3) { return call_method<SCAPIX_META_STRING("onNestedPrePerformAccessibilityAction"), jboolean>(p1, p2, p3); }

} // namespace android::view
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_VIEWPARENT_H
