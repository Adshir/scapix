// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/view/View.h>

#ifndef SCAPIX_ANDROID_VIEW_TEXTUREVIEW_H
#define SCAPIX_ANDROID_VIEW_TEXTUREVIEW_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::graphics { class Bitmap; }
namespace android::graphics { class Canvas; }
namespace android::graphics { class Matrix; }
namespace android::graphics { class Paint; }
namespace android::graphics { class Rect; }
namespace android::graphics { class SurfaceTexture; }
namespace android::graphics::drawable { class Drawable; }
namespace android::util { class AttributeSet; }
namespace android::view { class TextureView_SurfaceTextureListener; }

namespace android::view {

class TextureView : public object_base<SCAPIX_META_STRING("android/view/TextureView"),
	android::view::View>
{
public:

	using SurfaceTextureListener = TextureView_SurfaceTextureListener;

	static ref<TextureView> new_object(ref<android::content::Context> context);
	static ref<TextureView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<TextureView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<TextureView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	jboolean isOpaque();
	void setOpaque(jboolean opaque);
	void setLayerType(jint layerType, ref<android::graphics::Paint> paint);
	void setLayerPaint(ref<android::graphics::Paint> paint);
	jint getLayerType();
	void buildLayer();
	void setForeground(ref<android::graphics::drawable::Drawable> foreground);
	void setBackgroundDrawable(ref<android::graphics::drawable::Drawable> background);
	void draw(ref<android::graphics::Canvas> canvas);
	void setTransform(ref<android::graphics::Matrix> transform);
	ref<android::graphics::Matrix> getTransform(ref<android::graphics::Matrix> transform);
	ref<android::graphics::Bitmap> getBitmap();
	ref<android::graphics::Bitmap> getBitmap(jint width, jint height);
	ref<android::graphics::Bitmap> getBitmap(ref<android::graphics::Bitmap> bitmap);
	jboolean isAvailable();
	ref<android::graphics::Canvas> lockCanvas();
	ref<android::graphics::Canvas> lockCanvas(ref<android::graphics::Rect> dirty);
	void unlockCanvasAndPost(ref<android::graphics::Canvas> canvas);
	ref<android::graphics::SurfaceTexture> getSurfaceTexture();
	void setSurfaceTexture(ref<android::graphics::SurfaceTexture> surfaceTexture);
	ref<android::view::TextureView_SurfaceTextureListener> getSurfaceTextureListener();
	void setSurfaceTextureListener(ref<android::view::TextureView_SurfaceTextureListener> listener);

protected:

	TextureView(handle_type h) : base_(h) {}

};

} // namespace android::view
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Matrix.h>
#include <scapix/java_api/android/graphics/Paint.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/SurfaceTexture.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/TextureView_SurfaceTextureListener.h>

namespace scapix::java_api {
namespace android::view {

inline ref<TextureView> TextureView::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<TextureView> TextureView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<TextureView> TextureView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<TextureView> TextureView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline jboolean TextureView::isOpaque() { return call_method<SCAPIX_META_STRING("isOpaque"), jboolean>(); }
inline void TextureView::setOpaque(jboolean opaque) { return call_method<SCAPIX_META_STRING("setOpaque"), void>(opaque); }
inline void TextureView::setLayerType(jint layerType, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("setLayerType"), void>(layerType, paint); }
inline void TextureView::setLayerPaint(ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("setLayerPaint"), void>(paint); }
inline jint TextureView::getLayerType() { return call_method<SCAPIX_META_STRING("getLayerType"), jint>(); }
inline void TextureView::buildLayer() { return call_method<SCAPIX_META_STRING("buildLayer"), void>(); }
inline void TextureView::setForeground(ref<android::graphics::drawable::Drawable> foreground) { return call_method<SCAPIX_META_STRING("setForeground"), void>(foreground); }
inline void TextureView::setBackgroundDrawable(ref<android::graphics::drawable::Drawable> background) { return call_method<SCAPIX_META_STRING("setBackgroundDrawable"), void>(background); }
inline void TextureView::draw(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("draw"), void>(canvas); }
inline void TextureView::setTransform(ref<android::graphics::Matrix> transform) { return call_method<SCAPIX_META_STRING("setTransform"), void>(transform); }
inline ref<android::graphics::Matrix> TextureView::getTransform(ref<android::graphics::Matrix> transform) { return call_method<SCAPIX_META_STRING("getTransform"), ref<android::graphics::Matrix>>(transform); }
inline ref<android::graphics::Bitmap> TextureView::getBitmap() { return call_method<SCAPIX_META_STRING("getBitmap"), ref<android::graphics::Bitmap>>(); }
inline ref<android::graphics::Bitmap> TextureView::getBitmap(jint width, jint height) { return call_method<SCAPIX_META_STRING("getBitmap"), ref<android::graphics::Bitmap>>(width, height); }
inline ref<android::graphics::Bitmap> TextureView::getBitmap(ref<android::graphics::Bitmap> bitmap) { return call_method<SCAPIX_META_STRING("getBitmap"), ref<android::graphics::Bitmap>>(bitmap); }
inline jboolean TextureView::isAvailable() { return call_method<SCAPIX_META_STRING("isAvailable"), jboolean>(); }
inline ref<android::graphics::Canvas> TextureView::lockCanvas() { return call_method<SCAPIX_META_STRING("lockCanvas"), ref<android::graphics::Canvas>>(); }
inline ref<android::graphics::Canvas> TextureView::lockCanvas(ref<android::graphics::Rect> dirty) { return call_method<SCAPIX_META_STRING("lockCanvas"), ref<android::graphics::Canvas>>(dirty); }
inline void TextureView::unlockCanvasAndPost(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("unlockCanvasAndPost"), void>(canvas); }
inline ref<android::graphics::SurfaceTexture> TextureView::getSurfaceTexture() { return call_method<SCAPIX_META_STRING("getSurfaceTexture"), ref<android::graphics::SurfaceTexture>>(); }
inline void TextureView::setSurfaceTexture(ref<android::graphics::SurfaceTexture> surfaceTexture) { return call_method<SCAPIX_META_STRING("setSurfaceTexture"), void>(surfaceTexture); }
inline ref<android::view::TextureView_SurfaceTextureListener> TextureView::getSurfaceTextureListener() { return call_method<SCAPIX_META_STRING("getSurfaceTextureListener"), ref<android::view::TextureView_SurfaceTextureListener>>(); }
inline void TextureView::setSurfaceTextureListener(ref<android::view::TextureView_SurfaceTextureListener> listener) { return call_method<SCAPIX_META_STRING("setSurfaceTextureListener"), void>(listener); }

} // namespace android::view
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_TEXTUREVIEW_H
