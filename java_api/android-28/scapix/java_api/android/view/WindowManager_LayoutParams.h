// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/view/ViewGroup_LayoutParams.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_VIEW_WINDOWMANAGER_LAYOUTPARAMS_H
#define SCAPIX_ANDROID_VIEW_WINDOWMANAGER_LAYOUTPARAMS_H

namespace scapix::java_api {

namespace android::os { class IBinder; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::view {

class WindowManager_LayoutParams : public object_base<SCAPIX_META_STRING("android/view/WindowManager$LayoutParams"),
	android::view::ViewGroup_LayoutParams,
	android::os::Parcelable>
{
public:

	static jint ALPHA_CHANGED_();
	static jint ANIMATION_CHANGED_();
	static jfloat BRIGHTNESS_OVERRIDE_FULL_();
	static jfloat BRIGHTNESS_OVERRIDE_NONE_();
	static jfloat BRIGHTNESS_OVERRIDE_OFF_();
	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint DIM_AMOUNT_CHANGED_();
	static jint FIRST_APPLICATION_WINDOW_();
	static jint FIRST_SUB_WINDOW_();
	static jint FIRST_SYSTEM_WINDOW_();
	static jint FLAGS_CHANGED_();
	static jint FLAG_ALLOW_LOCK_WHILE_SCREEN_ON_();
	static jint FLAG_ALT_FOCUSABLE_IM_();
	static jint FLAG_BLUR_BEHIND_();
	static jint FLAG_DIM_BEHIND_();
	static jint FLAG_DISMISS_KEYGUARD_();
	static jint FLAG_DITHER_();
	static jint FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS_();
	static jint FLAG_FORCE_NOT_FULLSCREEN_();
	static jint FLAG_FULLSCREEN_();
	static jint FLAG_HARDWARE_ACCELERATED_();
	static jint FLAG_IGNORE_CHEEK_PRESSES_();
	static jint FLAG_KEEP_SCREEN_ON_();
	static jint FLAG_LAYOUT_ATTACHED_IN_DECOR_();
	static jint FLAG_LAYOUT_INSET_DECOR_();
	static jint FLAG_LAYOUT_IN_OVERSCAN_();
	static jint FLAG_LAYOUT_IN_SCREEN_();
	static jint FLAG_LAYOUT_NO_LIMITS_();
	static jint FLAG_LOCAL_FOCUS_MODE_();
	static jint FLAG_NOT_FOCUSABLE_();
	static jint FLAG_NOT_TOUCHABLE_();
	static jint FLAG_NOT_TOUCH_MODAL_();
	static jint FLAG_SCALED_();
	static jint FLAG_SECURE_();
	static jint FLAG_SHOW_WALLPAPER_();
	static jint FLAG_SHOW_WHEN_LOCKED_();
	static jint FLAG_SPLIT_TOUCH_();
	static jint FLAG_TOUCHABLE_WHEN_WAKING_();
	static jint FLAG_TRANSLUCENT_NAVIGATION_();
	static jint FLAG_TRANSLUCENT_STATUS_();
	static jint FLAG_TURN_SCREEN_ON_();
	static jint FLAG_WATCH_OUTSIDE_TOUCH_();
	static jint FORMAT_CHANGED_();
	static jint LAST_APPLICATION_WINDOW_();
	static jint LAST_SUB_WINDOW_();
	static jint LAST_SYSTEM_WINDOW_();
	static jint LAYOUT_CHANGED_();
	static jint LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT_();
	static jint LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER_();
	static jint LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES_();
	static jint MEMORY_TYPE_CHANGED_();
	static jint MEMORY_TYPE_GPU_();
	static jint MEMORY_TYPE_HARDWARE_();
	static jint MEMORY_TYPE_NORMAL_();
	static jint MEMORY_TYPE_PUSH_BUFFERS_();
	static jint ROTATION_ANIMATION_CHANGED_();
	static jint ROTATION_ANIMATION_CROSSFADE_();
	static jint ROTATION_ANIMATION_JUMPCUT_();
	static jint ROTATION_ANIMATION_ROTATE_();
	static jint ROTATION_ANIMATION_SEAMLESS_();
	static jint SCREEN_BRIGHTNESS_CHANGED_();
	static jint SCREEN_ORIENTATION_CHANGED_();
	static jint SOFT_INPUT_ADJUST_NOTHING_();
	static jint SOFT_INPUT_ADJUST_PAN_();
	static jint SOFT_INPUT_ADJUST_RESIZE_();
	static jint SOFT_INPUT_ADJUST_UNSPECIFIED_();
	static jint SOFT_INPUT_IS_FORWARD_NAVIGATION_();
	static jint SOFT_INPUT_MASK_ADJUST_();
	static jint SOFT_INPUT_MASK_STATE_();
	static jint SOFT_INPUT_MODE_CHANGED_();
	static jint SOFT_INPUT_STATE_ALWAYS_HIDDEN_();
	static jint SOFT_INPUT_STATE_ALWAYS_VISIBLE_();
	static jint SOFT_INPUT_STATE_HIDDEN_();
	static jint SOFT_INPUT_STATE_UNCHANGED_();
	static jint SOFT_INPUT_STATE_UNSPECIFIED_();
	static jint SOFT_INPUT_STATE_VISIBLE_();
	static jint TITLE_CHANGED_();
	static jint TYPE_ACCESSIBILITY_OVERLAY_();
	static jint TYPE_APPLICATION_();
	static jint TYPE_APPLICATION_ATTACHED_DIALOG_();
	static jint TYPE_APPLICATION_MEDIA_();
	static jint TYPE_APPLICATION_OVERLAY_();
	static jint TYPE_APPLICATION_PANEL_();
	static jint TYPE_APPLICATION_STARTING_();
	static jint TYPE_APPLICATION_SUB_PANEL_();
	static jint TYPE_BASE_APPLICATION_();
	static jint TYPE_CHANGED_();
	static jint TYPE_DRAWN_APPLICATION_();
	static jint TYPE_INPUT_METHOD_();
	static jint TYPE_INPUT_METHOD_DIALOG_();
	static jint TYPE_KEYGUARD_DIALOG_();
	static jint TYPE_PHONE_();
	static jint TYPE_PRIORITY_PHONE_();
	static jint TYPE_PRIVATE_PRESENTATION_();
	static jint TYPE_SEARCH_BAR_();
	static jint TYPE_STATUS_BAR_();
	static jint TYPE_STATUS_BAR_PANEL_();
	static jint TYPE_SYSTEM_ALERT_();
	static jint TYPE_SYSTEM_DIALOG_();
	static jint TYPE_SYSTEM_ERROR_();
	static jint TYPE_SYSTEM_OVERLAY_();
	static jint TYPE_TOAST_();
	static jint TYPE_WALLPAPER_();
	jfloat alpha();
	void alpha(jfloat);
	jfloat buttonBrightness();
	void buttonBrightness(jfloat);
	jfloat dimAmount();
	void dimAmount(jfloat);
	jint flags();
	void flags(jint);
	jint format();
	void format(jint);
	jint gravity();
	void gravity(jint);
	jfloat horizontalMargin();
	void horizontalMargin(jfloat);
	jfloat horizontalWeight();
	void horizontalWeight(jfloat);
	jint layoutInDisplayCutoutMode();
	void layoutInDisplayCutoutMode(jint);
	jint memoryType();
	void memoryType(jint);
	ref<java::lang::String> packageName();
	void packageName(ref<java::lang::String>);
	jint preferredDisplayModeId();
	void preferredDisplayModeId(jint);
	jfloat preferredRefreshRate();
	void preferredRefreshRate(jfloat);
	jint rotationAnimation();
	void rotationAnimation(jint);
	jfloat screenBrightness();
	void screenBrightness(jfloat);
	jint screenOrientation();
	void screenOrientation(jint);
	jint softInputMode();
	void softInputMode(jint);
	jint systemUiVisibility();
	void systemUiVisibility(jint);
	ref<android::os::IBinder> token();
	void token(ref<android::os::IBinder>);
	jint type();
	void type(jint);
	jfloat verticalMargin();
	void verticalMargin(jfloat);
	jfloat verticalWeight();
	void verticalWeight(jfloat);
	jint windowAnimations();
	void windowAnimations(jint);
	jint x();
	void x(jint);
	jint y();
	void y(jint);

	static ref<WindowManager_LayoutParams> new_object();
	static ref<WindowManager_LayoutParams> new_object(jint _type);
	static ref<WindowManager_LayoutParams> new_object(jint _type, jint _flags);
	static ref<WindowManager_LayoutParams> new_object(jint _type, jint _flags, jint _format);
	static ref<WindowManager_LayoutParams> new_object(jint w, jint h, jint _type, jint _flags, jint _format);
	static ref<WindowManager_LayoutParams> new_object(jint w, jint h, jint xpos, jint ypos, jint _type, jint _flags, jint _format);
	static ref<WindowManager_LayoutParams> new_object(ref<android::os::Parcel> in);
	static jboolean mayUseInputMethod(jint flags);
	void setTitle(ref<java::lang::CharSequence> title);
	ref<java::lang::CharSequence> getTitle();
	void setColorMode(jint colorMode);
	jint getColorMode();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> out, jint parcelableFlags);
	jint copyFrom(ref<android::view::WindowManager_LayoutParams> o);
	ref<java::lang::String> debug(ref<java::lang::String> output);
	ref<java::lang::String> toString();

protected:

	WindowManager_LayoutParams(handle_type h) : base_(h) {}

};

} // namespace android::view
} // namespace scapix::java_api

#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::view {

inline jint WindowManager_LayoutParams::ALPHA_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ALPHA_CHANGED"), jint>(); }
inline jint WindowManager_LayoutParams::ANIMATION_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ANIMATION_CHANGED"), jint>(); }
inline jfloat WindowManager_LayoutParams::BRIGHTNESS_OVERRIDE_FULL_() { return get_static_field<SCAPIX_META_STRING("BRIGHTNESS_OVERRIDE_FULL"), jfloat>(); }
inline jfloat WindowManager_LayoutParams::BRIGHTNESS_OVERRIDE_NONE_() { return get_static_field<SCAPIX_META_STRING("BRIGHTNESS_OVERRIDE_NONE"), jfloat>(); }
inline jfloat WindowManager_LayoutParams::BRIGHTNESS_OVERRIDE_OFF_() { return get_static_field<SCAPIX_META_STRING("BRIGHTNESS_OVERRIDE_OFF"), jfloat>(); }
inline ref<android::os::Parcelable_Creator> WindowManager_LayoutParams::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint WindowManager_LayoutParams::DIM_AMOUNT_CHANGED_() { return get_static_field<SCAPIX_META_STRING("DIM_AMOUNT_CHANGED"), jint>(); }
inline jint WindowManager_LayoutParams::FIRST_APPLICATION_WINDOW_() { return get_static_field<SCAPIX_META_STRING("FIRST_APPLICATION_WINDOW"), jint>(); }
inline jint WindowManager_LayoutParams::FIRST_SUB_WINDOW_() { return get_static_field<SCAPIX_META_STRING("FIRST_SUB_WINDOW"), jint>(); }
inline jint WindowManager_LayoutParams::FIRST_SYSTEM_WINDOW_() { return get_static_field<SCAPIX_META_STRING("FIRST_SYSTEM_WINDOW"), jint>(); }
inline jint WindowManager_LayoutParams::FLAGS_CHANGED_() { return get_static_field<SCAPIX_META_STRING("FLAGS_CHANGED"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_ALLOW_LOCK_WHILE_SCREEN_ON_() { return get_static_field<SCAPIX_META_STRING("FLAG_ALLOW_LOCK_WHILE_SCREEN_ON"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_ALT_FOCUSABLE_IM_() { return get_static_field<SCAPIX_META_STRING("FLAG_ALT_FOCUSABLE_IM"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_BLUR_BEHIND_() { return get_static_field<SCAPIX_META_STRING("FLAG_BLUR_BEHIND"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_DIM_BEHIND_() { return get_static_field<SCAPIX_META_STRING("FLAG_DIM_BEHIND"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_DISMISS_KEYGUARD_() { return get_static_field<SCAPIX_META_STRING("FLAG_DISMISS_KEYGUARD"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_DITHER_() { return get_static_field<SCAPIX_META_STRING("FLAG_DITHER"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS_() { return get_static_field<SCAPIX_META_STRING("FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_FORCE_NOT_FULLSCREEN_() { return get_static_field<SCAPIX_META_STRING("FLAG_FORCE_NOT_FULLSCREEN"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_FULLSCREEN_() { return get_static_field<SCAPIX_META_STRING("FLAG_FULLSCREEN"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_HARDWARE_ACCELERATED_() { return get_static_field<SCAPIX_META_STRING("FLAG_HARDWARE_ACCELERATED"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_IGNORE_CHEEK_PRESSES_() { return get_static_field<SCAPIX_META_STRING("FLAG_IGNORE_CHEEK_PRESSES"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_KEEP_SCREEN_ON_() { return get_static_field<SCAPIX_META_STRING("FLAG_KEEP_SCREEN_ON"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_LAYOUT_ATTACHED_IN_DECOR_() { return get_static_field<SCAPIX_META_STRING("FLAG_LAYOUT_ATTACHED_IN_DECOR"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_LAYOUT_INSET_DECOR_() { return get_static_field<SCAPIX_META_STRING("FLAG_LAYOUT_INSET_DECOR"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_LAYOUT_IN_OVERSCAN_() { return get_static_field<SCAPIX_META_STRING("FLAG_LAYOUT_IN_OVERSCAN"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_LAYOUT_IN_SCREEN_() { return get_static_field<SCAPIX_META_STRING("FLAG_LAYOUT_IN_SCREEN"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_LAYOUT_NO_LIMITS_() { return get_static_field<SCAPIX_META_STRING("FLAG_LAYOUT_NO_LIMITS"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_LOCAL_FOCUS_MODE_() { return get_static_field<SCAPIX_META_STRING("FLAG_LOCAL_FOCUS_MODE"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_NOT_FOCUSABLE_() { return get_static_field<SCAPIX_META_STRING("FLAG_NOT_FOCUSABLE"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_NOT_TOUCHABLE_() { return get_static_field<SCAPIX_META_STRING("FLAG_NOT_TOUCHABLE"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_NOT_TOUCH_MODAL_() { return get_static_field<SCAPIX_META_STRING("FLAG_NOT_TOUCH_MODAL"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_SCALED_() { return get_static_field<SCAPIX_META_STRING("FLAG_SCALED"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_SECURE_() { return get_static_field<SCAPIX_META_STRING("FLAG_SECURE"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_SHOW_WALLPAPER_() { return get_static_field<SCAPIX_META_STRING("FLAG_SHOW_WALLPAPER"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_SHOW_WHEN_LOCKED_() { return get_static_field<SCAPIX_META_STRING("FLAG_SHOW_WHEN_LOCKED"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_SPLIT_TOUCH_() { return get_static_field<SCAPIX_META_STRING("FLAG_SPLIT_TOUCH"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_TOUCHABLE_WHEN_WAKING_() { return get_static_field<SCAPIX_META_STRING("FLAG_TOUCHABLE_WHEN_WAKING"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_TRANSLUCENT_NAVIGATION_() { return get_static_field<SCAPIX_META_STRING("FLAG_TRANSLUCENT_NAVIGATION"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_TRANSLUCENT_STATUS_() { return get_static_field<SCAPIX_META_STRING("FLAG_TRANSLUCENT_STATUS"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_TURN_SCREEN_ON_() { return get_static_field<SCAPIX_META_STRING("FLAG_TURN_SCREEN_ON"), jint>(); }
inline jint WindowManager_LayoutParams::FLAG_WATCH_OUTSIDE_TOUCH_() { return get_static_field<SCAPIX_META_STRING("FLAG_WATCH_OUTSIDE_TOUCH"), jint>(); }
inline jint WindowManager_LayoutParams::FORMAT_CHANGED_() { return get_static_field<SCAPIX_META_STRING("FORMAT_CHANGED"), jint>(); }
inline jint WindowManager_LayoutParams::LAST_APPLICATION_WINDOW_() { return get_static_field<SCAPIX_META_STRING("LAST_APPLICATION_WINDOW"), jint>(); }
inline jint WindowManager_LayoutParams::LAST_SUB_WINDOW_() { return get_static_field<SCAPIX_META_STRING("LAST_SUB_WINDOW"), jint>(); }
inline jint WindowManager_LayoutParams::LAST_SYSTEM_WINDOW_() { return get_static_field<SCAPIX_META_STRING("LAST_SYSTEM_WINDOW"), jint>(); }
inline jint WindowManager_LayoutParams::LAYOUT_CHANGED_() { return get_static_field<SCAPIX_META_STRING("LAYOUT_CHANGED"), jint>(); }
inline jint WindowManager_LayoutParams::LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT"), jint>(); }
inline jint WindowManager_LayoutParams::LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER_() { return get_static_field<SCAPIX_META_STRING("LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER"), jint>(); }
inline jint WindowManager_LayoutParams::LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES_() { return get_static_field<SCAPIX_META_STRING("LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES"), jint>(); }
inline jint WindowManager_LayoutParams::MEMORY_TYPE_CHANGED_() { return get_static_field<SCAPIX_META_STRING("MEMORY_TYPE_CHANGED"), jint>(); }
inline jint WindowManager_LayoutParams::MEMORY_TYPE_GPU_() { return get_static_field<SCAPIX_META_STRING("MEMORY_TYPE_GPU"), jint>(); }
inline jint WindowManager_LayoutParams::MEMORY_TYPE_HARDWARE_() { return get_static_field<SCAPIX_META_STRING("MEMORY_TYPE_HARDWARE"), jint>(); }
inline jint WindowManager_LayoutParams::MEMORY_TYPE_NORMAL_() { return get_static_field<SCAPIX_META_STRING("MEMORY_TYPE_NORMAL"), jint>(); }
inline jint WindowManager_LayoutParams::MEMORY_TYPE_PUSH_BUFFERS_() { return get_static_field<SCAPIX_META_STRING("MEMORY_TYPE_PUSH_BUFFERS"), jint>(); }
inline jint WindowManager_LayoutParams::ROTATION_ANIMATION_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ROTATION_ANIMATION_CHANGED"), jint>(); }
inline jint WindowManager_LayoutParams::ROTATION_ANIMATION_CROSSFADE_() { return get_static_field<SCAPIX_META_STRING("ROTATION_ANIMATION_CROSSFADE"), jint>(); }
inline jint WindowManager_LayoutParams::ROTATION_ANIMATION_JUMPCUT_() { return get_static_field<SCAPIX_META_STRING("ROTATION_ANIMATION_JUMPCUT"), jint>(); }
inline jint WindowManager_LayoutParams::ROTATION_ANIMATION_ROTATE_() { return get_static_field<SCAPIX_META_STRING("ROTATION_ANIMATION_ROTATE"), jint>(); }
inline jint WindowManager_LayoutParams::ROTATION_ANIMATION_SEAMLESS_() { return get_static_field<SCAPIX_META_STRING("ROTATION_ANIMATION_SEAMLESS"), jint>(); }
inline jint WindowManager_LayoutParams::SCREEN_BRIGHTNESS_CHANGED_() { return get_static_field<SCAPIX_META_STRING("SCREEN_BRIGHTNESS_CHANGED"), jint>(); }
inline jint WindowManager_LayoutParams::SCREEN_ORIENTATION_CHANGED_() { return get_static_field<SCAPIX_META_STRING("SCREEN_ORIENTATION_CHANGED"), jint>(); }
inline jint WindowManager_LayoutParams::SOFT_INPUT_ADJUST_NOTHING_() { return get_static_field<SCAPIX_META_STRING("SOFT_INPUT_ADJUST_NOTHING"), jint>(); }
inline jint WindowManager_LayoutParams::SOFT_INPUT_ADJUST_PAN_() { return get_static_field<SCAPIX_META_STRING("SOFT_INPUT_ADJUST_PAN"), jint>(); }
inline jint WindowManager_LayoutParams::SOFT_INPUT_ADJUST_RESIZE_() { return get_static_field<SCAPIX_META_STRING("SOFT_INPUT_ADJUST_RESIZE"), jint>(); }
inline jint WindowManager_LayoutParams::SOFT_INPUT_ADJUST_UNSPECIFIED_() { return get_static_field<SCAPIX_META_STRING("SOFT_INPUT_ADJUST_UNSPECIFIED"), jint>(); }
inline jint WindowManager_LayoutParams::SOFT_INPUT_IS_FORWARD_NAVIGATION_() { return get_static_field<SCAPIX_META_STRING("SOFT_INPUT_IS_FORWARD_NAVIGATION"), jint>(); }
inline jint WindowManager_LayoutParams::SOFT_INPUT_MASK_ADJUST_() { return get_static_field<SCAPIX_META_STRING("SOFT_INPUT_MASK_ADJUST"), jint>(); }
inline jint WindowManager_LayoutParams::SOFT_INPUT_MASK_STATE_() { return get_static_field<SCAPIX_META_STRING("SOFT_INPUT_MASK_STATE"), jint>(); }
inline jint WindowManager_LayoutParams::SOFT_INPUT_MODE_CHANGED_() { return get_static_field<SCAPIX_META_STRING("SOFT_INPUT_MODE_CHANGED"), jint>(); }
inline jint WindowManager_LayoutParams::SOFT_INPUT_STATE_ALWAYS_HIDDEN_() { return get_static_field<SCAPIX_META_STRING("SOFT_INPUT_STATE_ALWAYS_HIDDEN"), jint>(); }
inline jint WindowManager_LayoutParams::SOFT_INPUT_STATE_ALWAYS_VISIBLE_() { return get_static_field<SCAPIX_META_STRING("SOFT_INPUT_STATE_ALWAYS_VISIBLE"), jint>(); }
inline jint WindowManager_LayoutParams::SOFT_INPUT_STATE_HIDDEN_() { return get_static_field<SCAPIX_META_STRING("SOFT_INPUT_STATE_HIDDEN"), jint>(); }
inline jint WindowManager_LayoutParams::SOFT_INPUT_STATE_UNCHANGED_() { return get_static_field<SCAPIX_META_STRING("SOFT_INPUT_STATE_UNCHANGED"), jint>(); }
inline jint WindowManager_LayoutParams::SOFT_INPUT_STATE_UNSPECIFIED_() { return get_static_field<SCAPIX_META_STRING("SOFT_INPUT_STATE_UNSPECIFIED"), jint>(); }
inline jint WindowManager_LayoutParams::SOFT_INPUT_STATE_VISIBLE_() { return get_static_field<SCAPIX_META_STRING("SOFT_INPUT_STATE_VISIBLE"), jint>(); }
inline jint WindowManager_LayoutParams::TITLE_CHANGED_() { return get_static_field<SCAPIX_META_STRING("TITLE_CHANGED"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_ACCESSIBILITY_OVERLAY_() { return get_static_field<SCAPIX_META_STRING("TYPE_ACCESSIBILITY_OVERLAY"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_APPLICATION_() { return get_static_field<SCAPIX_META_STRING("TYPE_APPLICATION"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_APPLICATION_ATTACHED_DIALOG_() { return get_static_field<SCAPIX_META_STRING("TYPE_APPLICATION_ATTACHED_DIALOG"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_APPLICATION_MEDIA_() { return get_static_field<SCAPIX_META_STRING("TYPE_APPLICATION_MEDIA"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_APPLICATION_OVERLAY_() { return get_static_field<SCAPIX_META_STRING("TYPE_APPLICATION_OVERLAY"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_APPLICATION_PANEL_() { return get_static_field<SCAPIX_META_STRING("TYPE_APPLICATION_PANEL"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_APPLICATION_STARTING_() { return get_static_field<SCAPIX_META_STRING("TYPE_APPLICATION_STARTING"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_APPLICATION_SUB_PANEL_() { return get_static_field<SCAPIX_META_STRING("TYPE_APPLICATION_SUB_PANEL"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_BASE_APPLICATION_() { return get_static_field<SCAPIX_META_STRING("TYPE_BASE_APPLICATION"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_CHANGED_() { return get_static_field<SCAPIX_META_STRING("TYPE_CHANGED"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_DRAWN_APPLICATION_() { return get_static_field<SCAPIX_META_STRING("TYPE_DRAWN_APPLICATION"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_INPUT_METHOD_() { return get_static_field<SCAPIX_META_STRING("TYPE_INPUT_METHOD"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_INPUT_METHOD_DIALOG_() { return get_static_field<SCAPIX_META_STRING("TYPE_INPUT_METHOD_DIALOG"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_KEYGUARD_DIALOG_() { return get_static_field<SCAPIX_META_STRING("TYPE_KEYGUARD_DIALOG"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_PHONE_() { return get_static_field<SCAPIX_META_STRING("TYPE_PHONE"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_PRIORITY_PHONE_() { return get_static_field<SCAPIX_META_STRING("TYPE_PRIORITY_PHONE"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_PRIVATE_PRESENTATION_() { return get_static_field<SCAPIX_META_STRING("TYPE_PRIVATE_PRESENTATION"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_SEARCH_BAR_() { return get_static_field<SCAPIX_META_STRING("TYPE_SEARCH_BAR"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_STATUS_BAR_() { return get_static_field<SCAPIX_META_STRING("TYPE_STATUS_BAR"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_STATUS_BAR_PANEL_() { return get_static_field<SCAPIX_META_STRING("TYPE_STATUS_BAR_PANEL"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_SYSTEM_ALERT_() { return get_static_field<SCAPIX_META_STRING("TYPE_SYSTEM_ALERT"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_SYSTEM_DIALOG_() { return get_static_field<SCAPIX_META_STRING("TYPE_SYSTEM_DIALOG"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_SYSTEM_ERROR_() { return get_static_field<SCAPIX_META_STRING("TYPE_SYSTEM_ERROR"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_SYSTEM_OVERLAY_() { return get_static_field<SCAPIX_META_STRING("TYPE_SYSTEM_OVERLAY"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_TOAST_() { return get_static_field<SCAPIX_META_STRING("TYPE_TOAST"), jint>(); }
inline jint WindowManager_LayoutParams::TYPE_WALLPAPER_() { return get_static_field<SCAPIX_META_STRING("TYPE_WALLPAPER"), jint>(); }
inline jfloat WindowManager_LayoutParams::alpha() { return get_field<SCAPIX_META_STRING("alpha"), jfloat>(); }
inline void WindowManager_LayoutParams::alpha(jfloat v) { set_field<SCAPIX_META_STRING("alpha"), jfloat>(v); }
inline jfloat WindowManager_LayoutParams::buttonBrightness() { return get_field<SCAPIX_META_STRING("buttonBrightness"), jfloat>(); }
inline void WindowManager_LayoutParams::buttonBrightness(jfloat v) { set_field<SCAPIX_META_STRING("buttonBrightness"), jfloat>(v); }
inline jfloat WindowManager_LayoutParams::dimAmount() { return get_field<SCAPIX_META_STRING("dimAmount"), jfloat>(); }
inline void WindowManager_LayoutParams::dimAmount(jfloat v) { set_field<SCAPIX_META_STRING("dimAmount"), jfloat>(v); }
inline jint WindowManager_LayoutParams::flags() { return get_field<SCAPIX_META_STRING("flags"), jint>(); }
inline void WindowManager_LayoutParams::flags(jint v) { set_field<SCAPIX_META_STRING("flags"), jint>(v); }
inline jint WindowManager_LayoutParams::format() { return get_field<SCAPIX_META_STRING("format"), jint>(); }
inline void WindowManager_LayoutParams::format(jint v) { set_field<SCAPIX_META_STRING("format"), jint>(v); }
inline jint WindowManager_LayoutParams::gravity() { return get_field<SCAPIX_META_STRING("gravity"), jint>(); }
inline void WindowManager_LayoutParams::gravity(jint v) { set_field<SCAPIX_META_STRING("gravity"), jint>(v); }
inline jfloat WindowManager_LayoutParams::horizontalMargin() { return get_field<SCAPIX_META_STRING("horizontalMargin"), jfloat>(); }
inline void WindowManager_LayoutParams::horizontalMargin(jfloat v) { set_field<SCAPIX_META_STRING("horizontalMargin"), jfloat>(v); }
inline jfloat WindowManager_LayoutParams::horizontalWeight() { return get_field<SCAPIX_META_STRING("horizontalWeight"), jfloat>(); }
inline void WindowManager_LayoutParams::horizontalWeight(jfloat v) { set_field<SCAPIX_META_STRING("horizontalWeight"), jfloat>(v); }
inline jint WindowManager_LayoutParams::layoutInDisplayCutoutMode() { return get_field<SCAPIX_META_STRING("layoutInDisplayCutoutMode"), jint>(); }
inline void WindowManager_LayoutParams::layoutInDisplayCutoutMode(jint v) { set_field<SCAPIX_META_STRING("layoutInDisplayCutoutMode"), jint>(v); }
inline jint WindowManager_LayoutParams::memoryType() { return get_field<SCAPIX_META_STRING("memoryType"), jint>(); }
inline void WindowManager_LayoutParams::memoryType(jint v) { set_field<SCAPIX_META_STRING("memoryType"), jint>(v); }
inline ref<java::lang::String> WindowManager_LayoutParams::packageName() { return get_field<SCAPIX_META_STRING("packageName"), ref<java::lang::String>>(); }
inline void WindowManager_LayoutParams::packageName(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("packageName"), ref<java::lang::String>>(v); }
inline jint WindowManager_LayoutParams::preferredDisplayModeId() { return get_field<SCAPIX_META_STRING("preferredDisplayModeId"), jint>(); }
inline void WindowManager_LayoutParams::preferredDisplayModeId(jint v) { set_field<SCAPIX_META_STRING("preferredDisplayModeId"), jint>(v); }
inline jfloat WindowManager_LayoutParams::preferredRefreshRate() { return get_field<SCAPIX_META_STRING("preferredRefreshRate"), jfloat>(); }
inline void WindowManager_LayoutParams::preferredRefreshRate(jfloat v) { set_field<SCAPIX_META_STRING("preferredRefreshRate"), jfloat>(v); }
inline jint WindowManager_LayoutParams::rotationAnimation() { return get_field<SCAPIX_META_STRING("rotationAnimation"), jint>(); }
inline void WindowManager_LayoutParams::rotationAnimation(jint v) { set_field<SCAPIX_META_STRING("rotationAnimation"), jint>(v); }
inline jfloat WindowManager_LayoutParams::screenBrightness() { return get_field<SCAPIX_META_STRING("screenBrightness"), jfloat>(); }
inline void WindowManager_LayoutParams::screenBrightness(jfloat v) { set_field<SCAPIX_META_STRING("screenBrightness"), jfloat>(v); }
inline jint WindowManager_LayoutParams::screenOrientation() { return get_field<SCAPIX_META_STRING("screenOrientation"), jint>(); }
inline void WindowManager_LayoutParams::screenOrientation(jint v) { set_field<SCAPIX_META_STRING("screenOrientation"), jint>(v); }
inline jint WindowManager_LayoutParams::softInputMode() { return get_field<SCAPIX_META_STRING("softInputMode"), jint>(); }
inline void WindowManager_LayoutParams::softInputMode(jint v) { set_field<SCAPIX_META_STRING("softInputMode"), jint>(v); }
inline jint WindowManager_LayoutParams::systemUiVisibility() { return get_field<SCAPIX_META_STRING("systemUiVisibility"), jint>(); }
inline void WindowManager_LayoutParams::systemUiVisibility(jint v) { set_field<SCAPIX_META_STRING("systemUiVisibility"), jint>(v); }
inline ref<android::os::IBinder> WindowManager_LayoutParams::token() { return get_field<SCAPIX_META_STRING("token"), ref<android::os::IBinder>>(); }
inline void WindowManager_LayoutParams::token(ref<android::os::IBinder> v) { set_field<SCAPIX_META_STRING("token"), ref<android::os::IBinder>>(v); }
inline jint WindowManager_LayoutParams::type() { return get_field<SCAPIX_META_STRING("type"), jint>(); }
inline void WindowManager_LayoutParams::type(jint v) { set_field<SCAPIX_META_STRING("type"), jint>(v); }
inline jfloat WindowManager_LayoutParams::verticalMargin() { return get_field<SCAPIX_META_STRING("verticalMargin"), jfloat>(); }
inline void WindowManager_LayoutParams::verticalMargin(jfloat v) { set_field<SCAPIX_META_STRING("verticalMargin"), jfloat>(v); }
inline jfloat WindowManager_LayoutParams::verticalWeight() { return get_field<SCAPIX_META_STRING("verticalWeight"), jfloat>(); }
inline void WindowManager_LayoutParams::verticalWeight(jfloat v) { set_field<SCAPIX_META_STRING("verticalWeight"), jfloat>(v); }
inline jint WindowManager_LayoutParams::windowAnimations() { return get_field<SCAPIX_META_STRING("windowAnimations"), jint>(); }
inline void WindowManager_LayoutParams::windowAnimations(jint v) { set_field<SCAPIX_META_STRING("windowAnimations"), jint>(v); }
inline jint WindowManager_LayoutParams::x() { return get_field<SCAPIX_META_STRING("x"), jint>(); }
inline void WindowManager_LayoutParams::x(jint v) { set_field<SCAPIX_META_STRING("x"), jint>(v); }
inline jint WindowManager_LayoutParams::y() { return get_field<SCAPIX_META_STRING("y"), jint>(); }
inline void WindowManager_LayoutParams::y(jint v) { set_field<SCAPIX_META_STRING("y"), jint>(v); }
inline ref<WindowManager_LayoutParams> WindowManager_LayoutParams::new_object() { return base_::new_object(); }
inline ref<WindowManager_LayoutParams> WindowManager_LayoutParams::new_object(jint _type) { return base_::new_object(_type); }
inline ref<WindowManager_LayoutParams> WindowManager_LayoutParams::new_object(jint _type, jint _flags) { return base_::new_object(_type, _flags); }
inline ref<WindowManager_LayoutParams> WindowManager_LayoutParams::new_object(jint _type, jint _flags, jint _format) { return base_::new_object(_type, _flags, _format); }
inline ref<WindowManager_LayoutParams> WindowManager_LayoutParams::new_object(jint w, jint h, jint _type, jint _flags, jint _format) { return base_::new_object(w, h, _type, _flags, _format); }
inline ref<WindowManager_LayoutParams> WindowManager_LayoutParams::new_object(jint w, jint h, jint xpos, jint ypos, jint _type, jint _flags, jint _format) { return base_::new_object(w, h, xpos, ypos, _type, _flags, _format); }
inline ref<WindowManager_LayoutParams> WindowManager_LayoutParams::new_object(ref<android::os::Parcel> in) { return base_::new_object(in); }
inline jboolean WindowManager_LayoutParams::mayUseInputMethod(jint flags) { return call_static_method<SCAPIX_META_STRING("mayUseInputMethod"), jboolean>(flags); }
inline void WindowManager_LayoutParams::setTitle(ref<java::lang::CharSequence> title) { return call_method<SCAPIX_META_STRING("setTitle"), void>(title); }
inline ref<java::lang::CharSequence> WindowManager_LayoutParams::getTitle() { return call_method<SCAPIX_META_STRING("getTitle"), ref<java::lang::CharSequence>>(); }
inline void WindowManager_LayoutParams::setColorMode(jint colorMode) { return call_method<SCAPIX_META_STRING("setColorMode"), void>(colorMode); }
inline jint WindowManager_LayoutParams::getColorMode() { return call_method<SCAPIX_META_STRING("getColorMode"), jint>(); }
inline jint WindowManager_LayoutParams::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void WindowManager_LayoutParams::writeToParcel(ref<android::os::Parcel> out, jint parcelableFlags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(out, parcelableFlags); }
inline jint WindowManager_LayoutParams::copyFrom(ref<android::view::WindowManager_LayoutParams> o) { return call_method<SCAPIX_META_STRING("copyFrom"), jint>(o); }
inline ref<java::lang::String> WindowManager_LayoutParams::debug(ref<java::lang::String> output) { return call_method<SCAPIX_META_STRING("debug"), ref<java::lang::String>>(output); }
inline ref<java::lang::String> WindowManager_LayoutParams::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::view
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_WINDOWMANAGER_LAYOUTPARAMS_H
