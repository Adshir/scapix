// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewParent.h>
#include <scapix/java_api/android/view/ViewManager.h>

#ifndef SCAPIX_ANDROID_VIEW_VIEWGROUP_H
#define SCAPIX_ANDROID_VIEW_VIEWGROUP_H

namespace scapix::java_api {

namespace android::animation { class LayoutTransition; }
namespace android::content { class Context; }
namespace android::content::res { class Configuration; }
namespace android::graphics { class Point; }
namespace android::graphics { class Rect; }
namespace android::graphics { class Region; }
namespace android::os { class Bundle; }
namespace android::util { class AttributeSet; }
namespace android::view { class ActionMode; }
namespace android::view { class ActionMode_Callback; }
namespace android::view { class DragEvent; }
namespace android::view { class KeyEvent; }
namespace android::view { class MotionEvent; }
namespace android::view { class PointerIcon; }
namespace android::view { class ViewGroup_LayoutParams; }
namespace android::view { class ViewGroup_OnHierarchyChangeListener; }
namespace android::view { class ViewGroupOverlay; }
namespace android::view { class ViewStructure; }
namespace android::view { class WindowInsets; }
namespace android::view::accessibility { class AccessibilityEvent; }
namespace android::view::animation { class Animation_AnimationListener; }
namespace android::view::animation { class LayoutAnimationController; }
namespace java::lang { class CharSequence; }
namespace java::util { class ArrayList; }
namespace java::util { class Collection; }
namespace android::view { class ViewGroup_MarginLayoutParams; }

namespace android::view {

class ViewGroup : public object_base<SCAPIX_META_STRING("android/view/ViewGroup"),
	android::view::View,
	android::view::ViewParent,
	android::view::ViewManager>
{
public:

	using OnHierarchyChangeListener = ViewGroup_OnHierarchyChangeListener;
	using MarginLayoutParams = ViewGroup_MarginLayoutParams;
	using LayoutParams = ViewGroup_LayoutParams;

	static jint FOCUS_AFTER_DESCENDANTS_();
	static jint FOCUS_BEFORE_DESCENDANTS_();
	static jint FOCUS_BLOCK_DESCENDANTS_();
	static jint LAYOUT_MODE_CLIP_BOUNDS_();
	static jint LAYOUT_MODE_OPTICAL_BOUNDS_();
	static jint PERSISTENT_ALL_CACHES_();
	static jint PERSISTENT_ANIMATION_CACHE_();
	static jint PERSISTENT_NO_CACHE_();
	static jint PERSISTENT_SCROLLING_CACHE_();

	static ref<ViewGroup> new_object(ref<android::content::Context> context);
	static ref<ViewGroup> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<ViewGroup> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<ViewGroup> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	jint getDescendantFocusability();
	void setDescendantFocusability(jint focusability);
	void requestChildFocus(ref<android::view::View> child, ref<android::view::View> focused);
	void focusableViewAvailable(ref<android::view::View> v);
	jboolean showContextMenuForChild(ref<android::view::View> originalView);
	jboolean showContextMenuForChild(ref<android::view::View> originalView, jfloat x, jfloat y);
	ref<android::view::ActionMode> startActionModeForChild(ref<android::view::View> originalView, ref<android::view::ActionMode_Callback> callback);
	ref<android::view::ActionMode> startActionModeForChild(ref<android::view::View> originalView, ref<android::view::ActionMode_Callback> callback, jint type);
	ref<android::view::View> focusSearch(ref<android::view::View> focused, jint direction);
	jboolean requestChildRectangleOnScreen(ref<android::view::View> child, ref<android::graphics::Rect> rectangle, jboolean immediate);
	jboolean requestSendAccessibilityEvent(ref<android::view::View> child, ref<android::view::accessibility::AccessibilityEvent> event);
	jboolean onRequestSendAccessibilityEvent(ref<android::view::View> child, ref<android::view::accessibility::AccessibilityEvent> event);
	void childHasTransientStateChanged(ref<android::view::View> child, jboolean childHasTransientState);
	jboolean hasTransientState();
	jboolean dispatchUnhandledMove(ref<android::view::View> focused, jint direction);
	void clearChildFocus(ref<android::view::View> child);
	void clearFocus();
	ref<android::view::View> getFocusedChild();
	jboolean hasFocus();
	ref<android::view::View> findFocus();
	void addFocusables(ref<java::util::ArrayList> views, jint direction, jint focusableMode);
	void addKeyboardNavigationClusters(ref<java::util::Collection> views, jint direction);
	void setTouchscreenBlocksFocus(jboolean touchscreenBlocksFocus);
	jboolean getTouchscreenBlocksFocus();
	void findViewsWithText(ref<java::util::ArrayList> outViews, ref<java::lang::CharSequence> text, jint flags);
	void dispatchWindowFocusChanged(jboolean hasFocus);
	void addTouchables(ref<java::util::ArrayList> views);
	void dispatchDisplayHint(jint hint);
	void dispatchWindowVisibilityChanged(jint visibility);
	void dispatchConfigurationChanged(ref<android::content::res::Configuration> newConfig);
	void recomputeViewAttributes(ref<android::view::View> child);
	void bringChildToFront(ref<android::view::View> child);
	jboolean dispatchDragEvent(ref<android::view::DragEvent> event);
	void dispatchWindowSystemUiVisiblityChanged(jint visible);
	void dispatchSystemUiVisibilityChanged(jint visible);
	jboolean dispatchKeyEventPreIme(ref<android::view::KeyEvent> event);
	jboolean dispatchKeyEvent(ref<android::view::KeyEvent> event);
	jboolean dispatchKeyShortcutEvent(ref<android::view::KeyEvent> event);
	jboolean dispatchTrackballEvent(ref<android::view::MotionEvent> event);
	jboolean dispatchCapturedPointerEvent(ref<android::view::MotionEvent> event);
	void dispatchPointerCaptureChanged(jboolean hasCapture);
	ref<android::view::PointerIcon> onResolvePointerIcon(ref<android::view::MotionEvent> event, jint pointerIndex);
	void addChildrenForAccessibility(ref<java::util::ArrayList> outChildren);
	jboolean onInterceptHoverEvent(ref<android::view::MotionEvent> event);
	jboolean dispatchTouchEvent(ref<android::view::MotionEvent> ev);
	void setMotionEventSplittingEnabled(jboolean split);
	jboolean isMotionEventSplittingEnabled();
	jboolean isTransitionGroup();
	void setTransitionGroup(jboolean isTransitionGroup);
	void requestDisallowInterceptTouchEvent(jboolean disallowIntercept);
	jboolean onInterceptTouchEvent(ref<android::view::MotionEvent> ev);
	jboolean requestFocus(jint direction, ref<android::graphics::Rect> previouslyFocusedRect);
	jboolean restoreDefaultFocus();
	void dispatchStartTemporaryDetach();
	void dispatchFinishTemporaryDetach();
	void dispatchProvideStructure(ref<android::view::ViewStructure> structure);
	void dispatchProvideAutofillStructure(ref<android::view::ViewStructure> structure, jint flags);
	ref<java::lang::CharSequence> getAccessibilityClassName();
	void notifySubtreeAccessibilityStateChanged(ref<android::view::View> child, ref<android::view::View> source, jint changeType);
	jboolean onNestedPrePerformAccessibilityAction(ref<android::view::View> target, jint action, ref<android::os::Bundle> args);
	ref<android::view::ViewGroupOverlay> getOverlay();
	jboolean getClipChildren();
	void setClipChildren(jboolean clipChildren);
	void setClipToPadding(jboolean clipToPadding);
	jboolean getClipToPadding();
	void dispatchSetSelected(jboolean selected);
	void dispatchSetActivated(jboolean activated);
	void dispatchDrawableHotspotChanged(jfloat x, jfloat y);
	void addView(ref<android::view::View> child);
	void addView(ref<android::view::View> child, jint index);
	void addView(ref<android::view::View> child, jint width, jint height);
	void addView(ref<android::view::View> child, ref<android::view::ViewGroup_LayoutParams> params);
	void addView(ref<android::view::View> child, jint index, ref<android::view::ViewGroup_LayoutParams> params);
	void updateViewLayout(ref<android::view::View> view, ref<android::view::ViewGroup_LayoutParams> params);
	void setOnHierarchyChangeListener(ref<android::view::ViewGroup_OnHierarchyChangeListener> listener);
	void onViewAdded(ref<android::view::View> child);
	void onViewRemoved(ref<android::view::View> child);
	void removeView(ref<android::view::View> view);
	void removeViewInLayout(ref<android::view::View> view);
	void removeViewsInLayout(jint start, jint count);
	void removeViewAt(jint index);
	void removeViews(jint start, jint count);
	void setLayoutTransition(ref<android::animation::LayoutTransition> transition);
	ref<android::animation::LayoutTransition> getLayoutTransition();
	void removeAllViews();
	void removeAllViewsInLayout();
	void onDescendantInvalidated(ref<android::view::View> child, ref<android::view::View> target);
	void invalidateChild(ref<android::view::View> child, ref<android::graphics::Rect> dirty);
	ref<android::view::ViewParent> invalidateChildInParent(ref<link::java::array<jint>> location, ref<android::graphics::Rect> dirty);
	void offsetDescendantRectToMyCoords(ref<android::view::View> descendant, ref<android::graphics::Rect> rect);
	void offsetRectIntoDescendantCoords(ref<android::view::View> descendant, ref<android::graphics::Rect> rect);
	jboolean getChildVisibleRect(ref<android::view::View> child, ref<android::graphics::Rect> r, ref<android::graphics::Point> offset);
	void layout(jint l, jint t, jint r, jint b);
	void startLayoutAnimation();
	void scheduleLayoutAnimation();
	void setLayoutAnimation(ref<android::view::animation::LayoutAnimationController> controller);
	ref<android::view::animation::LayoutAnimationController> getLayoutAnimation();
	jboolean isAnimationCacheEnabled();
	void setAnimationCacheEnabled(jboolean enabled);
	jboolean isAlwaysDrawnWithCacheEnabled();
	void setAlwaysDrawnWithCacheEnabled(jboolean always);
	jint getPersistentDrawingCache();
	void setPersistentDrawingCache(jint drawingCacheToKeep);
	jint getLayoutMode();
	void setLayoutMode(jint layoutMode);
	ref<android::view::ViewGroup_LayoutParams> generateLayoutParams(ref<android::util::AttributeSet> attrs);
	jint indexOfChild(ref<android::view::View> child);
	jint getChildCount();
	ref<android::view::View> getChildAt(jint index);
	static jint getChildMeasureSpec(jint spec, jint padding, jint childDimension);
	void clearDisappearingChildren();
	void startViewTransition(ref<android::view::View> view);
	void endViewTransition(ref<android::view::View> view);
	jboolean gatherTransparentRegion(ref<android::graphics::Region> region);
	void requestTransparentRegion(ref<android::view::View> child);
	ref<android::view::WindowInsets> dispatchApplyWindowInsets(ref<android::view::WindowInsets> insets);
	ref<android::view::animation::Animation_AnimationListener> getLayoutAnimationListener();
	void jumpDrawablesToCurrentState();
	void setAddStatesFromChildren(jboolean addsStates);
	jboolean addStatesFromChildren();
	void childDrawableStateChanged(ref<android::view::View> child);
	void setLayoutAnimationListener(ref<android::view::animation::Animation_AnimationListener> animationListener);
	jboolean shouldDelayChildPressedState();
	jboolean onStartNestedScroll(ref<android::view::View> child, ref<android::view::View> target, jint nestedScrollAxes);
	void onNestedScrollAccepted(ref<android::view::View> child, ref<android::view::View> target, jint axes);
	void onStopNestedScroll(ref<android::view::View> child);
	void onNestedScroll(ref<android::view::View> target, jint dxConsumed, jint dyConsumed, jint dxUnconsumed, jint dyUnconsumed);
	void onNestedPreScroll(ref<android::view::View> target, jint dx, jint dy, ref<link::java::array<jint>> consumed);
	jboolean onNestedFling(ref<android::view::View> target, jfloat velocityX, jfloat velocityY, jboolean consumed);
	jboolean onNestedPreFling(ref<android::view::View> target, jfloat velocityX, jfloat velocityY);
	jint getNestedScrollAxes();

protected:

	ViewGroup(handle_type h) : base_(h) {}

};

} // namespace android::view
} // namespace scapix::java_api

#include <scapix/java_api/android/animation/LayoutTransition.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/Configuration.h>
#include <scapix/java_api/android/graphics/Point.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/Region.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/ActionMode.h>
#include <scapix/java_api/android/view/ActionMode_Callback.h>
#include <scapix/java_api/android/view/DragEvent.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/PointerIcon.h>
#include <scapix/java_api/android/view/ViewGroup_LayoutParams.h>
#include <scapix/java_api/android/view/ViewGroup_OnHierarchyChangeListener.h>
#include <scapix/java_api/android/view/ViewGroupOverlay.h>
#include <scapix/java_api/android/view/ViewStructure.h>
#include <scapix/java_api/android/view/WindowInsets.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#include <scapix/java_api/android/view/animation/Animation_AnimationListener.h>
#include <scapix/java_api/android/view/animation/LayoutAnimationController.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/util/ArrayList.h>
#include <scapix/java_api/java/util/Collection.h>

namespace scapix::java_api {
namespace android::view {

inline jint ViewGroup::FOCUS_AFTER_DESCENDANTS_() { return get_static_field<SCAPIX_META_STRING("FOCUS_AFTER_DESCENDANTS"), jint>(); }
inline jint ViewGroup::FOCUS_BEFORE_DESCENDANTS_() { return get_static_field<SCAPIX_META_STRING("FOCUS_BEFORE_DESCENDANTS"), jint>(); }
inline jint ViewGroup::FOCUS_BLOCK_DESCENDANTS_() { return get_static_field<SCAPIX_META_STRING("FOCUS_BLOCK_DESCENDANTS"), jint>(); }
inline jint ViewGroup::LAYOUT_MODE_CLIP_BOUNDS_() { return get_static_field<SCAPIX_META_STRING("LAYOUT_MODE_CLIP_BOUNDS"), jint>(); }
inline jint ViewGroup::LAYOUT_MODE_OPTICAL_BOUNDS_() { return get_static_field<SCAPIX_META_STRING("LAYOUT_MODE_OPTICAL_BOUNDS"), jint>(); }
inline jint ViewGroup::PERSISTENT_ALL_CACHES_() { return get_static_field<SCAPIX_META_STRING("PERSISTENT_ALL_CACHES"), jint>(); }
inline jint ViewGroup::PERSISTENT_ANIMATION_CACHE_() { return get_static_field<SCAPIX_META_STRING("PERSISTENT_ANIMATION_CACHE"), jint>(); }
inline jint ViewGroup::PERSISTENT_NO_CACHE_() { return get_static_field<SCAPIX_META_STRING("PERSISTENT_NO_CACHE"), jint>(); }
inline jint ViewGroup::PERSISTENT_SCROLLING_CACHE_() { return get_static_field<SCAPIX_META_STRING("PERSISTENT_SCROLLING_CACHE"), jint>(); }
inline ref<ViewGroup> ViewGroup::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<ViewGroup> ViewGroup::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<ViewGroup> ViewGroup::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<ViewGroup> ViewGroup::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline jint ViewGroup::getDescendantFocusability() { return call_method<SCAPIX_META_STRING("getDescendantFocusability"), jint>(); }
inline void ViewGroup::setDescendantFocusability(jint focusability) { return call_method<SCAPIX_META_STRING("setDescendantFocusability"), void>(focusability); }
inline void ViewGroup::requestChildFocus(ref<android::view::View> child, ref<android::view::View> focused) { return call_method<SCAPIX_META_STRING("requestChildFocus"), void>(child, focused); }
inline void ViewGroup::focusableViewAvailable(ref<android::view::View> v) { return call_method<SCAPIX_META_STRING("focusableViewAvailable"), void>(v); }
inline jboolean ViewGroup::showContextMenuForChild(ref<android::view::View> originalView) { return call_method<SCAPIX_META_STRING("showContextMenuForChild"), jboolean>(originalView); }
inline jboolean ViewGroup::showContextMenuForChild(ref<android::view::View> originalView, jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("showContextMenuForChild"), jboolean>(originalView, x, y); }
inline ref<android::view::ActionMode> ViewGroup::startActionModeForChild(ref<android::view::View> originalView, ref<android::view::ActionMode_Callback> callback) { return call_method<SCAPIX_META_STRING("startActionModeForChild"), ref<android::view::ActionMode>>(originalView, callback); }
inline ref<android::view::ActionMode> ViewGroup::startActionModeForChild(ref<android::view::View> originalView, ref<android::view::ActionMode_Callback> callback, jint type) { return call_method<SCAPIX_META_STRING("startActionModeForChild"), ref<android::view::ActionMode>>(originalView, callback, type); }
inline ref<android::view::View> ViewGroup::focusSearch(ref<android::view::View> focused, jint direction) { return call_method<SCAPIX_META_STRING("focusSearch"), ref<android::view::View>>(focused, direction); }
inline jboolean ViewGroup::requestChildRectangleOnScreen(ref<android::view::View> child, ref<android::graphics::Rect> rectangle, jboolean immediate) { return call_method<SCAPIX_META_STRING("requestChildRectangleOnScreen"), jboolean>(child, rectangle, immediate); }
inline jboolean ViewGroup::requestSendAccessibilityEvent(ref<android::view::View> child, ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<SCAPIX_META_STRING("requestSendAccessibilityEvent"), jboolean>(child, event); }
inline jboolean ViewGroup::onRequestSendAccessibilityEvent(ref<android::view::View> child, ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<SCAPIX_META_STRING("onRequestSendAccessibilityEvent"), jboolean>(child, event); }
inline void ViewGroup::childHasTransientStateChanged(ref<android::view::View> child, jboolean childHasTransientState) { return call_method<SCAPIX_META_STRING("childHasTransientStateChanged"), void>(child, childHasTransientState); }
inline jboolean ViewGroup::hasTransientState() { return call_method<SCAPIX_META_STRING("hasTransientState"), jboolean>(); }
inline jboolean ViewGroup::dispatchUnhandledMove(ref<android::view::View> focused, jint direction) { return call_method<SCAPIX_META_STRING("dispatchUnhandledMove"), jboolean>(focused, direction); }
inline void ViewGroup::clearChildFocus(ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("clearChildFocus"), void>(child); }
inline void ViewGroup::clearFocus() { return call_method<SCAPIX_META_STRING("clearFocus"), void>(); }
inline ref<android::view::View> ViewGroup::getFocusedChild() { return call_method<SCAPIX_META_STRING("getFocusedChild"), ref<android::view::View>>(); }
inline jboolean ViewGroup::hasFocus() { return call_method<SCAPIX_META_STRING("hasFocus"), jboolean>(); }
inline ref<android::view::View> ViewGroup::findFocus() { return call_method<SCAPIX_META_STRING("findFocus"), ref<android::view::View>>(); }
inline void ViewGroup::addFocusables(ref<java::util::ArrayList> views, jint direction, jint focusableMode) { return call_method<SCAPIX_META_STRING("addFocusables"), void>(views, direction, focusableMode); }
inline void ViewGroup::addKeyboardNavigationClusters(ref<java::util::Collection> views, jint direction) { return call_method<SCAPIX_META_STRING("addKeyboardNavigationClusters"), void>(views, direction); }
inline void ViewGroup::setTouchscreenBlocksFocus(jboolean touchscreenBlocksFocus) { return call_method<SCAPIX_META_STRING("setTouchscreenBlocksFocus"), void>(touchscreenBlocksFocus); }
inline jboolean ViewGroup::getTouchscreenBlocksFocus() { return call_method<SCAPIX_META_STRING("getTouchscreenBlocksFocus"), jboolean>(); }
inline void ViewGroup::findViewsWithText(ref<java::util::ArrayList> outViews, ref<java::lang::CharSequence> text, jint flags) { return call_method<SCAPIX_META_STRING("findViewsWithText"), void>(outViews, text, flags); }
inline void ViewGroup::dispatchWindowFocusChanged(jboolean hasFocus) { return call_method<SCAPIX_META_STRING("dispatchWindowFocusChanged"), void>(hasFocus); }
inline void ViewGroup::addTouchables(ref<java::util::ArrayList> views) { return call_method<SCAPIX_META_STRING("addTouchables"), void>(views); }
inline void ViewGroup::dispatchDisplayHint(jint hint) { return call_method<SCAPIX_META_STRING("dispatchDisplayHint"), void>(hint); }
inline void ViewGroup::dispatchWindowVisibilityChanged(jint visibility) { return call_method<SCAPIX_META_STRING("dispatchWindowVisibilityChanged"), void>(visibility); }
inline void ViewGroup::dispatchConfigurationChanged(ref<android::content::res::Configuration> newConfig) { return call_method<SCAPIX_META_STRING("dispatchConfigurationChanged"), void>(newConfig); }
inline void ViewGroup::recomputeViewAttributes(ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("recomputeViewAttributes"), void>(child); }
inline void ViewGroup::bringChildToFront(ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("bringChildToFront"), void>(child); }
inline jboolean ViewGroup::dispatchDragEvent(ref<android::view::DragEvent> event) { return call_method<SCAPIX_META_STRING("dispatchDragEvent"), jboolean>(event); }
inline void ViewGroup::dispatchWindowSystemUiVisiblityChanged(jint visible) { return call_method<SCAPIX_META_STRING("dispatchWindowSystemUiVisiblityChanged"), void>(visible); }
inline void ViewGroup::dispatchSystemUiVisibilityChanged(jint visible) { return call_method<SCAPIX_META_STRING("dispatchSystemUiVisibilityChanged"), void>(visible); }
inline jboolean ViewGroup::dispatchKeyEventPreIme(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("dispatchKeyEventPreIme"), jboolean>(event); }
inline jboolean ViewGroup::dispatchKeyEvent(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("dispatchKeyEvent"), jboolean>(event); }
inline jboolean ViewGroup::dispatchKeyShortcutEvent(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("dispatchKeyShortcutEvent"), jboolean>(event); }
inline jboolean ViewGroup::dispatchTrackballEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("dispatchTrackballEvent"), jboolean>(event); }
inline jboolean ViewGroup::dispatchCapturedPointerEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("dispatchCapturedPointerEvent"), jboolean>(event); }
inline void ViewGroup::dispatchPointerCaptureChanged(jboolean hasCapture) { return call_method<SCAPIX_META_STRING("dispatchPointerCaptureChanged"), void>(hasCapture); }
inline ref<android::view::PointerIcon> ViewGroup::onResolvePointerIcon(ref<android::view::MotionEvent> event, jint pointerIndex) { return call_method<SCAPIX_META_STRING("onResolvePointerIcon"), ref<android::view::PointerIcon>>(event, pointerIndex); }
inline void ViewGroup::addChildrenForAccessibility(ref<java::util::ArrayList> outChildren) { return call_method<SCAPIX_META_STRING("addChildrenForAccessibility"), void>(outChildren); }
inline jboolean ViewGroup::onInterceptHoverEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onInterceptHoverEvent"), jboolean>(event); }
inline jboolean ViewGroup::dispatchTouchEvent(ref<android::view::MotionEvent> ev) { return call_method<SCAPIX_META_STRING("dispatchTouchEvent"), jboolean>(ev); }
inline void ViewGroup::setMotionEventSplittingEnabled(jboolean split) { return call_method<SCAPIX_META_STRING("setMotionEventSplittingEnabled"), void>(split); }
inline jboolean ViewGroup::isMotionEventSplittingEnabled() { return call_method<SCAPIX_META_STRING("isMotionEventSplittingEnabled"), jboolean>(); }
inline jboolean ViewGroup::isTransitionGroup() { return call_method<SCAPIX_META_STRING("isTransitionGroup"), jboolean>(); }
inline void ViewGroup::setTransitionGroup(jboolean isTransitionGroup) { return call_method<SCAPIX_META_STRING("setTransitionGroup"), void>(isTransitionGroup); }
inline void ViewGroup::requestDisallowInterceptTouchEvent(jboolean disallowIntercept) { return call_method<SCAPIX_META_STRING("requestDisallowInterceptTouchEvent"), void>(disallowIntercept); }
inline jboolean ViewGroup::onInterceptTouchEvent(ref<android::view::MotionEvent> ev) { return call_method<SCAPIX_META_STRING("onInterceptTouchEvent"), jboolean>(ev); }
inline jboolean ViewGroup::requestFocus(jint direction, ref<android::graphics::Rect> previouslyFocusedRect) { return call_method<SCAPIX_META_STRING("requestFocus"), jboolean>(direction, previouslyFocusedRect); }
inline jboolean ViewGroup::restoreDefaultFocus() { return call_method<SCAPIX_META_STRING("restoreDefaultFocus"), jboolean>(); }
inline void ViewGroup::dispatchStartTemporaryDetach() { return call_method<SCAPIX_META_STRING("dispatchStartTemporaryDetach"), void>(); }
inline void ViewGroup::dispatchFinishTemporaryDetach() { return call_method<SCAPIX_META_STRING("dispatchFinishTemporaryDetach"), void>(); }
inline void ViewGroup::dispatchProvideStructure(ref<android::view::ViewStructure> structure) { return call_method<SCAPIX_META_STRING("dispatchProvideStructure"), void>(structure); }
inline void ViewGroup::dispatchProvideAutofillStructure(ref<android::view::ViewStructure> structure, jint flags) { return call_method<SCAPIX_META_STRING("dispatchProvideAutofillStructure"), void>(structure, flags); }
inline ref<java::lang::CharSequence> ViewGroup::getAccessibilityClassName() { return call_method<SCAPIX_META_STRING("getAccessibilityClassName"), ref<java::lang::CharSequence>>(); }
inline void ViewGroup::notifySubtreeAccessibilityStateChanged(ref<android::view::View> child, ref<android::view::View> source, jint changeType) { return call_method<SCAPIX_META_STRING("notifySubtreeAccessibilityStateChanged"), void>(child, source, changeType); }
inline jboolean ViewGroup::onNestedPrePerformAccessibilityAction(ref<android::view::View> target, jint action, ref<android::os::Bundle> args) { return call_method<SCAPIX_META_STRING("onNestedPrePerformAccessibilityAction"), jboolean>(target, action, args); }
inline ref<android::view::ViewGroupOverlay> ViewGroup::getOverlay() { return call_method<SCAPIX_META_STRING("getOverlay"), ref<android::view::ViewGroupOverlay>>(); }
inline jboolean ViewGroup::getClipChildren() { return call_method<SCAPIX_META_STRING("getClipChildren"), jboolean>(); }
inline void ViewGroup::setClipChildren(jboolean clipChildren) { return call_method<SCAPIX_META_STRING("setClipChildren"), void>(clipChildren); }
inline void ViewGroup::setClipToPadding(jboolean clipToPadding) { return call_method<SCAPIX_META_STRING("setClipToPadding"), void>(clipToPadding); }
inline jboolean ViewGroup::getClipToPadding() { return call_method<SCAPIX_META_STRING("getClipToPadding"), jboolean>(); }
inline void ViewGroup::dispatchSetSelected(jboolean selected) { return call_method<SCAPIX_META_STRING("dispatchSetSelected"), void>(selected); }
inline void ViewGroup::dispatchSetActivated(jboolean activated) { return call_method<SCAPIX_META_STRING("dispatchSetActivated"), void>(activated); }
inline void ViewGroup::dispatchDrawableHotspotChanged(jfloat x, jfloat y) { return call_method<SCAPIX_META_STRING("dispatchDrawableHotspotChanged"), void>(x, y); }
inline void ViewGroup::addView(ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("addView"), void>(child); }
inline void ViewGroup::addView(ref<android::view::View> child, jint index) { return call_method<SCAPIX_META_STRING("addView"), void>(child, index); }
inline void ViewGroup::addView(ref<android::view::View> child, jint width, jint height) { return call_method<SCAPIX_META_STRING("addView"), void>(child, width, height); }
inline void ViewGroup::addView(ref<android::view::View> child, ref<android::view::ViewGroup_LayoutParams> params) { return call_method<SCAPIX_META_STRING("addView"), void>(child, params); }
inline void ViewGroup::addView(ref<android::view::View> child, jint index, ref<android::view::ViewGroup_LayoutParams> params) { return call_method<SCAPIX_META_STRING("addView"), void>(child, index, params); }
inline void ViewGroup::updateViewLayout(ref<android::view::View> view, ref<android::view::ViewGroup_LayoutParams> params) { return call_method<SCAPIX_META_STRING("updateViewLayout"), void>(view, params); }
inline void ViewGroup::setOnHierarchyChangeListener(ref<android::view::ViewGroup_OnHierarchyChangeListener> listener) { return call_method<SCAPIX_META_STRING("setOnHierarchyChangeListener"), void>(listener); }
inline void ViewGroup::onViewAdded(ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("onViewAdded"), void>(child); }
inline void ViewGroup::onViewRemoved(ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("onViewRemoved"), void>(child); }
inline void ViewGroup::removeView(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("removeView"), void>(view); }
inline void ViewGroup::removeViewInLayout(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("removeViewInLayout"), void>(view); }
inline void ViewGroup::removeViewsInLayout(jint start, jint count) { return call_method<SCAPIX_META_STRING("removeViewsInLayout"), void>(start, count); }
inline void ViewGroup::removeViewAt(jint index) { return call_method<SCAPIX_META_STRING("removeViewAt"), void>(index); }
inline void ViewGroup::removeViews(jint start, jint count) { return call_method<SCAPIX_META_STRING("removeViews"), void>(start, count); }
inline void ViewGroup::setLayoutTransition(ref<android::animation::LayoutTransition> transition) { return call_method<SCAPIX_META_STRING("setLayoutTransition"), void>(transition); }
inline ref<android::animation::LayoutTransition> ViewGroup::getLayoutTransition() { return call_method<SCAPIX_META_STRING("getLayoutTransition"), ref<android::animation::LayoutTransition>>(); }
inline void ViewGroup::removeAllViews() { return call_method<SCAPIX_META_STRING("removeAllViews"), void>(); }
inline void ViewGroup::removeAllViewsInLayout() { return call_method<SCAPIX_META_STRING("removeAllViewsInLayout"), void>(); }
inline void ViewGroup::onDescendantInvalidated(ref<android::view::View> child, ref<android::view::View> target) { return call_method<SCAPIX_META_STRING("onDescendantInvalidated"), void>(child, target); }
inline void ViewGroup::invalidateChild(ref<android::view::View> child, ref<android::graphics::Rect> dirty) { return call_method<SCAPIX_META_STRING("invalidateChild"), void>(child, dirty); }
inline ref<android::view::ViewParent> ViewGroup::invalidateChildInParent(ref<link::java::array<jint>> location, ref<android::graphics::Rect> dirty) { return call_method<SCAPIX_META_STRING("invalidateChildInParent"), ref<android::view::ViewParent>>(location, dirty); }
inline void ViewGroup::offsetDescendantRectToMyCoords(ref<android::view::View> descendant, ref<android::graphics::Rect> rect) { return call_method<SCAPIX_META_STRING("offsetDescendantRectToMyCoords"), void>(descendant, rect); }
inline void ViewGroup::offsetRectIntoDescendantCoords(ref<android::view::View> descendant, ref<android::graphics::Rect> rect) { return call_method<SCAPIX_META_STRING("offsetRectIntoDescendantCoords"), void>(descendant, rect); }
inline jboolean ViewGroup::getChildVisibleRect(ref<android::view::View> child, ref<android::graphics::Rect> r, ref<android::graphics::Point> offset) { return call_method<SCAPIX_META_STRING("getChildVisibleRect"), jboolean>(child, r, offset); }
inline void ViewGroup::layout(jint l, jint t, jint r, jint b) { return call_method<SCAPIX_META_STRING("layout"), void>(l, t, r, b); }
inline void ViewGroup::startLayoutAnimation() { return call_method<SCAPIX_META_STRING("startLayoutAnimation"), void>(); }
inline void ViewGroup::scheduleLayoutAnimation() { return call_method<SCAPIX_META_STRING("scheduleLayoutAnimation"), void>(); }
inline void ViewGroup::setLayoutAnimation(ref<android::view::animation::LayoutAnimationController> controller) { return call_method<SCAPIX_META_STRING("setLayoutAnimation"), void>(controller); }
inline ref<android::view::animation::LayoutAnimationController> ViewGroup::getLayoutAnimation() { return call_method<SCAPIX_META_STRING("getLayoutAnimation"), ref<android::view::animation::LayoutAnimationController>>(); }
inline jboolean ViewGroup::isAnimationCacheEnabled() { return call_method<SCAPIX_META_STRING("isAnimationCacheEnabled"), jboolean>(); }
inline void ViewGroup::setAnimationCacheEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setAnimationCacheEnabled"), void>(enabled); }
inline jboolean ViewGroup::isAlwaysDrawnWithCacheEnabled() { return call_method<SCAPIX_META_STRING("isAlwaysDrawnWithCacheEnabled"), jboolean>(); }
inline void ViewGroup::setAlwaysDrawnWithCacheEnabled(jboolean always) { return call_method<SCAPIX_META_STRING("setAlwaysDrawnWithCacheEnabled"), void>(always); }
inline jint ViewGroup::getPersistentDrawingCache() { return call_method<SCAPIX_META_STRING("getPersistentDrawingCache"), jint>(); }
inline void ViewGroup::setPersistentDrawingCache(jint drawingCacheToKeep) { return call_method<SCAPIX_META_STRING("setPersistentDrawingCache"), void>(drawingCacheToKeep); }
inline jint ViewGroup::getLayoutMode() { return call_method<SCAPIX_META_STRING("getLayoutMode"), jint>(); }
inline void ViewGroup::setLayoutMode(jint layoutMode) { return call_method<SCAPIX_META_STRING("setLayoutMode"), void>(layoutMode); }
inline ref<android::view::ViewGroup_LayoutParams> ViewGroup::generateLayoutParams(ref<android::util::AttributeSet> attrs) { return call_method<SCAPIX_META_STRING("generateLayoutParams"), ref<android::view::ViewGroup_LayoutParams>>(attrs); }
inline jint ViewGroup::indexOfChild(ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("indexOfChild"), jint>(child); }
inline jint ViewGroup::getChildCount() { return call_method<SCAPIX_META_STRING("getChildCount"), jint>(); }
inline ref<android::view::View> ViewGroup::getChildAt(jint index) { return call_method<SCAPIX_META_STRING("getChildAt"), ref<android::view::View>>(index); }
inline jint ViewGroup::getChildMeasureSpec(jint spec, jint padding, jint childDimension) { return call_static_method<SCAPIX_META_STRING("getChildMeasureSpec"), jint>(spec, padding, childDimension); }
inline void ViewGroup::clearDisappearingChildren() { return call_method<SCAPIX_META_STRING("clearDisappearingChildren"), void>(); }
inline void ViewGroup::startViewTransition(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("startViewTransition"), void>(view); }
inline void ViewGroup::endViewTransition(ref<android::view::View> view) { return call_method<SCAPIX_META_STRING("endViewTransition"), void>(view); }
inline jboolean ViewGroup::gatherTransparentRegion(ref<android::graphics::Region> region) { return call_method<SCAPIX_META_STRING("gatherTransparentRegion"), jboolean>(region); }
inline void ViewGroup::requestTransparentRegion(ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("requestTransparentRegion"), void>(child); }
inline ref<android::view::WindowInsets> ViewGroup::dispatchApplyWindowInsets(ref<android::view::WindowInsets> insets) { return call_method<SCAPIX_META_STRING("dispatchApplyWindowInsets"), ref<android::view::WindowInsets>>(insets); }
inline ref<android::view::animation::Animation_AnimationListener> ViewGroup::getLayoutAnimationListener() { return call_method<SCAPIX_META_STRING("getLayoutAnimationListener"), ref<android::view::animation::Animation_AnimationListener>>(); }
inline void ViewGroup::jumpDrawablesToCurrentState() { return call_method<SCAPIX_META_STRING("jumpDrawablesToCurrentState"), void>(); }
inline void ViewGroup::setAddStatesFromChildren(jboolean addsStates) { return call_method<SCAPIX_META_STRING("setAddStatesFromChildren"), void>(addsStates); }
inline jboolean ViewGroup::addStatesFromChildren() { return call_method<SCAPIX_META_STRING("addStatesFromChildren"), jboolean>(); }
inline void ViewGroup::childDrawableStateChanged(ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("childDrawableStateChanged"), void>(child); }
inline void ViewGroup::setLayoutAnimationListener(ref<android::view::animation::Animation_AnimationListener> animationListener) { return call_method<SCAPIX_META_STRING("setLayoutAnimationListener"), void>(animationListener); }
inline jboolean ViewGroup::shouldDelayChildPressedState() { return call_method<SCAPIX_META_STRING("shouldDelayChildPressedState"), jboolean>(); }
inline jboolean ViewGroup::onStartNestedScroll(ref<android::view::View> child, ref<android::view::View> target, jint nestedScrollAxes) { return call_method<SCAPIX_META_STRING("onStartNestedScroll"), jboolean>(child, target, nestedScrollAxes); }
inline void ViewGroup::onNestedScrollAccepted(ref<android::view::View> child, ref<android::view::View> target, jint axes) { return call_method<SCAPIX_META_STRING("onNestedScrollAccepted"), void>(child, target, axes); }
inline void ViewGroup::onStopNestedScroll(ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("onStopNestedScroll"), void>(child); }
inline void ViewGroup::onNestedScroll(ref<android::view::View> target, jint dxConsumed, jint dyConsumed, jint dxUnconsumed, jint dyUnconsumed) { return call_method<SCAPIX_META_STRING("onNestedScroll"), void>(target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed); }
inline void ViewGroup::onNestedPreScroll(ref<android::view::View> target, jint dx, jint dy, ref<link::java::array<jint>> consumed) { return call_method<SCAPIX_META_STRING("onNestedPreScroll"), void>(target, dx, dy, consumed); }
inline jboolean ViewGroup::onNestedFling(ref<android::view::View> target, jfloat velocityX, jfloat velocityY, jboolean consumed) { return call_method<SCAPIX_META_STRING("onNestedFling"), jboolean>(target, velocityX, velocityY, consumed); }
inline jboolean ViewGroup::onNestedPreFling(ref<android::view::View> target, jfloat velocityX, jfloat velocityY) { return call_method<SCAPIX_META_STRING("onNestedPreFling"), jboolean>(target, velocityX, velocityY); }
inline jint ViewGroup::getNestedScrollAxes() { return call_method<SCAPIX_META_STRING("getNestedScrollAxes"), jint>(); }

} // namespace android::view
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_VIEW_VIEWGROUP_H
