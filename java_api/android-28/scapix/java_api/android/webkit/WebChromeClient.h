// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_WEBKIT_WEBCHROMECLIENT_H
#define SCAPIX_ANDROID_WEBKIT_WEBCHROMECLIENT_H

namespace scapix::java_api {

namespace android::graphics { class Bitmap; }
namespace android::os { class Message; }
namespace android::view { class View; }
namespace android::webkit { class ConsoleMessage; }
namespace android::webkit { class GeolocationPermissions_Callback; }
namespace android::webkit { class JsPromptResult; }
namespace android::webkit { class JsResult; }
namespace android::webkit { class PermissionRequest; }
namespace android::webkit { class ValueCallback; }
namespace android::webkit { class WebChromeClient_CustomViewCallback; }
namespace android::webkit { class WebChromeClient_FileChooserParams; }
namespace android::webkit { class WebStorage_QuotaUpdater; }
namespace android::webkit { class WebView; }
namespace java::lang { class String; }

namespace android::webkit {

class WebChromeClient : public object_base<SCAPIX_META_STRING("android/webkit/WebChromeClient"),
	java::lang::Object>
{
public:

	using FileChooserParams = WebChromeClient_FileChooserParams;
	using CustomViewCallback = WebChromeClient_CustomViewCallback;

	static ref<WebChromeClient> new_object();
	void onProgressChanged(ref<android::webkit::WebView> view, jint newProgress);
	void onReceivedTitle(ref<android::webkit::WebView> view, ref<java::lang::String> title);
	void onReceivedIcon(ref<android::webkit::WebView> view, ref<android::graphics::Bitmap> icon);
	void onReceivedTouchIconUrl(ref<android::webkit::WebView> view, ref<java::lang::String> url, jboolean precomposed);
	void onShowCustomView(ref<android::view::View> view, ref<android::webkit::WebChromeClient_CustomViewCallback> callback);
	void onShowCustomView(ref<android::view::View> view, jint requestedOrientation, ref<android::webkit::WebChromeClient_CustomViewCallback> callback);
	void onHideCustomView();
	jboolean onCreateWindow(ref<android::webkit::WebView> view, jboolean isDialog, jboolean isUserGesture, ref<android::os::Message> resultMsg);
	void onRequestFocus(ref<android::webkit::WebView> view);
	void onCloseWindow(ref<android::webkit::WebView> window);
	jboolean onJsAlert(ref<android::webkit::WebView> view, ref<java::lang::String> url, ref<java::lang::String> message, ref<android::webkit::JsResult> result);
	jboolean onJsConfirm(ref<android::webkit::WebView> view, ref<java::lang::String> url, ref<java::lang::String> message, ref<android::webkit::JsResult> result);
	jboolean onJsPrompt(ref<android::webkit::WebView> view, ref<java::lang::String> url, ref<java::lang::String> message, ref<java::lang::String> defaultValue, ref<android::webkit::JsPromptResult> result);
	jboolean onJsBeforeUnload(ref<android::webkit::WebView> view, ref<java::lang::String> url, ref<java::lang::String> message, ref<android::webkit::JsResult> result);
	void onExceededDatabaseQuota(ref<java::lang::String> url, ref<java::lang::String> databaseIdentifier, jlong quota, jlong p4, jlong estimatedDatabaseSize, ref<android::webkit::WebStorage_QuotaUpdater> p6);
	void onReachedMaxAppCacheSize(jlong requiredStorage, jlong p2, ref<android::webkit::WebStorage_QuotaUpdater> quota);
	void onGeolocationPermissionsShowPrompt(ref<java::lang::String> origin, ref<android::webkit::GeolocationPermissions_Callback> callback);
	void onGeolocationPermissionsHidePrompt();
	void onPermissionRequest(ref<android::webkit::PermissionRequest> request);
	void onPermissionRequestCanceled(ref<android::webkit::PermissionRequest> request);
	jboolean onJsTimeout();
	void onConsoleMessage(ref<java::lang::String> message, jint lineNumber, ref<java::lang::String> sourceID);
	jboolean onConsoleMessage(ref<android::webkit::ConsoleMessage> consoleMessage);
	ref<android::graphics::Bitmap> getDefaultVideoPoster();
	ref<android::view::View> getVideoLoadingProgressView();
	void getVisitedHistory(ref<android::webkit::ValueCallback> callback);
	jboolean onShowFileChooser(ref<android::webkit::WebView> webView, ref<android::webkit::ValueCallback> filePathCallback, ref<android::webkit::WebChromeClient_FileChooserParams> fileChooserParams);

protected:

	WebChromeClient(handle_type h) : base_(h) {}

};

} // namespace android::webkit
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/os/Message.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/webkit/ConsoleMessage.h>
#include <scapix/java_api/android/webkit/GeolocationPermissions_Callback.h>
#include <scapix/java_api/android/webkit/JsPromptResult.h>
#include <scapix/java_api/android/webkit/JsResult.h>
#include <scapix/java_api/android/webkit/PermissionRequest.h>
#include <scapix/java_api/android/webkit/ValueCallback.h>
#include <scapix/java_api/android/webkit/WebChromeClient_CustomViewCallback.h>
#include <scapix/java_api/android/webkit/WebChromeClient_FileChooserParams.h>
#include <scapix/java_api/android/webkit/WebStorage_QuotaUpdater.h>
#include <scapix/java_api/android/webkit/WebView.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::webkit {

inline ref<WebChromeClient> WebChromeClient::new_object() { return base_::new_object(); }
inline void WebChromeClient::onProgressChanged(ref<android::webkit::WebView> view, jint newProgress) { return call_method<SCAPIX_META_STRING("onProgressChanged"), void>(view, newProgress); }
inline void WebChromeClient::onReceivedTitle(ref<android::webkit::WebView> view, ref<java::lang::String> title) { return call_method<SCAPIX_META_STRING("onReceivedTitle"), void>(view, title); }
inline void WebChromeClient::onReceivedIcon(ref<android::webkit::WebView> view, ref<android::graphics::Bitmap> icon) { return call_method<SCAPIX_META_STRING("onReceivedIcon"), void>(view, icon); }
inline void WebChromeClient::onReceivedTouchIconUrl(ref<android::webkit::WebView> view, ref<java::lang::String> url, jboolean precomposed) { return call_method<SCAPIX_META_STRING("onReceivedTouchIconUrl"), void>(view, url, precomposed); }
inline void WebChromeClient::onShowCustomView(ref<android::view::View> view, ref<android::webkit::WebChromeClient_CustomViewCallback> callback) { return call_method<SCAPIX_META_STRING("onShowCustomView"), void>(view, callback); }
inline void WebChromeClient::onShowCustomView(ref<android::view::View> view, jint requestedOrientation, ref<android::webkit::WebChromeClient_CustomViewCallback> callback) { return call_method<SCAPIX_META_STRING("onShowCustomView"), void>(view, requestedOrientation, callback); }
inline void WebChromeClient::onHideCustomView() { return call_method<SCAPIX_META_STRING("onHideCustomView"), void>(); }
inline jboolean WebChromeClient::onCreateWindow(ref<android::webkit::WebView> view, jboolean isDialog, jboolean isUserGesture, ref<android::os::Message> resultMsg) { return call_method<SCAPIX_META_STRING("onCreateWindow"), jboolean>(view, isDialog, isUserGesture, resultMsg); }
inline void WebChromeClient::onRequestFocus(ref<android::webkit::WebView> view) { return call_method<SCAPIX_META_STRING("onRequestFocus"), void>(view); }
inline void WebChromeClient::onCloseWindow(ref<android::webkit::WebView> window) { return call_method<SCAPIX_META_STRING("onCloseWindow"), void>(window); }
inline jboolean WebChromeClient::onJsAlert(ref<android::webkit::WebView> view, ref<java::lang::String> url, ref<java::lang::String> message, ref<android::webkit::JsResult> result) { return call_method<SCAPIX_META_STRING("onJsAlert"), jboolean>(view, url, message, result); }
inline jboolean WebChromeClient::onJsConfirm(ref<android::webkit::WebView> view, ref<java::lang::String> url, ref<java::lang::String> message, ref<android::webkit::JsResult> result) { return call_method<SCAPIX_META_STRING("onJsConfirm"), jboolean>(view, url, message, result); }
inline jboolean WebChromeClient::onJsPrompt(ref<android::webkit::WebView> view, ref<java::lang::String> url, ref<java::lang::String> message, ref<java::lang::String> defaultValue, ref<android::webkit::JsPromptResult> result) { return call_method<SCAPIX_META_STRING("onJsPrompt"), jboolean>(view, url, message, defaultValue, result); }
inline jboolean WebChromeClient::onJsBeforeUnload(ref<android::webkit::WebView> view, ref<java::lang::String> url, ref<java::lang::String> message, ref<android::webkit::JsResult> result) { return call_method<SCAPIX_META_STRING("onJsBeforeUnload"), jboolean>(view, url, message, result); }
inline void WebChromeClient::onExceededDatabaseQuota(ref<java::lang::String> url, ref<java::lang::String> databaseIdentifier, jlong quota, jlong p4, jlong estimatedDatabaseSize, ref<android::webkit::WebStorage_QuotaUpdater> p6) { return call_method<SCAPIX_META_STRING("onExceededDatabaseQuota"), void>(url, databaseIdentifier, quota, p4, estimatedDatabaseSize, p6); }
inline void WebChromeClient::onReachedMaxAppCacheSize(jlong requiredStorage, jlong p2, ref<android::webkit::WebStorage_QuotaUpdater> quota) { return call_method<SCAPIX_META_STRING("onReachedMaxAppCacheSize"), void>(requiredStorage, p2, quota); }
inline void WebChromeClient::onGeolocationPermissionsShowPrompt(ref<java::lang::String> origin, ref<android::webkit::GeolocationPermissions_Callback> callback) { return call_method<SCAPIX_META_STRING("onGeolocationPermissionsShowPrompt"), void>(origin, callback); }
inline void WebChromeClient::onGeolocationPermissionsHidePrompt() { return call_method<SCAPIX_META_STRING("onGeolocationPermissionsHidePrompt"), void>(); }
inline void WebChromeClient::onPermissionRequest(ref<android::webkit::PermissionRequest> request) { return call_method<SCAPIX_META_STRING("onPermissionRequest"), void>(request); }
inline void WebChromeClient::onPermissionRequestCanceled(ref<android::webkit::PermissionRequest> request) { return call_method<SCAPIX_META_STRING("onPermissionRequestCanceled"), void>(request); }
inline jboolean WebChromeClient::onJsTimeout() { return call_method<SCAPIX_META_STRING("onJsTimeout"), jboolean>(); }
inline void WebChromeClient::onConsoleMessage(ref<java::lang::String> message, jint lineNumber, ref<java::lang::String> sourceID) { return call_method<SCAPIX_META_STRING("onConsoleMessage"), void>(message, lineNumber, sourceID); }
inline jboolean WebChromeClient::onConsoleMessage(ref<android::webkit::ConsoleMessage> consoleMessage) { return call_method<SCAPIX_META_STRING("onConsoleMessage"), jboolean>(consoleMessage); }
inline ref<android::graphics::Bitmap> WebChromeClient::getDefaultVideoPoster() { return call_method<SCAPIX_META_STRING("getDefaultVideoPoster"), ref<android::graphics::Bitmap>>(); }
inline ref<android::view::View> WebChromeClient::getVideoLoadingProgressView() { return call_method<SCAPIX_META_STRING("getVideoLoadingProgressView"), ref<android::view::View>>(); }
inline void WebChromeClient::getVisitedHistory(ref<android::webkit::ValueCallback> callback) { return call_method<SCAPIX_META_STRING("getVisitedHistory"), void>(callback); }
inline jboolean WebChromeClient::onShowFileChooser(ref<android::webkit::WebView> webView, ref<android::webkit::ValueCallback> filePathCallback, ref<android::webkit::WebChromeClient_FileChooserParams> fileChooserParams) { return call_method<SCAPIX_META_STRING("onShowFileChooser"), jboolean>(webView, filePathCallback, fileChooserParams); }

} // namespace android::webkit
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WEBKIT_WEBCHROMECLIENT_H
