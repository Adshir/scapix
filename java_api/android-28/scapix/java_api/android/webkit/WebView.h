// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/widget/AbsoluteLayout.h>
#include <scapix/java_api/android/view/ViewTreeObserver_OnGlobalFocusChangeListener.h>
#include <scapix/java_api/android/view/ViewGroup_OnHierarchyChangeListener.h>

#ifndef SCAPIX_ANDROID_WEBKIT_WEBVIEW_H
#define SCAPIX_ANDROID_WEBKIT_WEBVIEW_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content::pm { class PackageInfo; }
namespace android::graphics { class Bitmap; }
namespace android::graphics { class Paint; }
namespace android::graphics { class Picture; }
namespace android::graphics { class Rect; }
namespace android::net { class Uri; }
namespace android::net::http { class SslCertificate; }
namespace android::os { class Bundle; }
namespace android::os { class Handler; }
namespace android::os { class Looper; }
namespace android::os { class Message; }
namespace android::print { class PrintDocumentAdapter; }
namespace android::util { class AttributeSet; }
namespace android::util { class SparseArray; }
namespace android::view { class DragEvent; }
namespace android::view { class KeyEvent; }
namespace android::view { class MotionEvent; }
namespace android::view { class View; }
namespace android::view { class ViewGroup_LayoutParams; }
namespace android::view { class ViewStructure; }
namespace android::view::accessibility { class AccessibilityNodeProvider; }
namespace android::view::inputmethod { class EditorInfo; }
namespace android::view::inputmethod { class InputConnection; }
namespace android::view::textclassifier { class TextClassifier; }
namespace android::webkit { class DownloadListener; }
namespace android::webkit { class ValueCallback; }
namespace android::webkit { class WebBackForwardList; }
namespace android::webkit { class WebChromeClient; }
namespace android::webkit { class WebMessage; }
namespace android::webkit { class WebMessagePort; }
namespace android::webkit { class WebSettings; }
namespace android::webkit { class WebView_FindListener; }
namespace android::webkit { class WebView_HitTestResult; }
namespace android::webkit { class WebView_PictureListener; }
namespace android::webkit { class WebView_VisualStateCallback; }
namespace android::webkit { class WebViewClient; }
namespace java::lang { class CharSequence; }
namespace java::lang { class ClassLoader; }
namespace java::lang { class Object; }
namespace java::lang { class Runnable; }
namespace java::lang { class String; }
namespace java::util { class List; }
namespace java::util { class Map; }
namespace android::webkit { class WebView_WebViewTransport; }

namespace android::webkit {

class WebView : public object_base<SCAPIX_META_STRING("android/webkit/WebView"),
	android::widget::AbsoluteLayout,
	android::view::ViewTreeObserver_OnGlobalFocusChangeListener,
	android::view::ViewGroup_OnHierarchyChangeListener>
{
public:

	using WebViewTransport = WebView_WebViewTransport;
	using VisualStateCallback = WebView_VisualStateCallback;
	using PictureListener = WebView_PictureListener;
	using HitTestResult = WebView_HitTestResult;
	using FindListener = WebView_FindListener;

	static jint RENDERER_PRIORITY_BOUND_();
	static jint RENDERER_PRIORITY_IMPORTANT_();
	static jint RENDERER_PRIORITY_WAIVED_();
	static ref<java::lang::String> SCHEME_GEO_();
	static ref<java::lang::String> SCHEME_MAILTO_();
	static ref<java::lang::String> SCHEME_TEL_();

	static ref<WebView> new_object(ref<android::content::Context> context);
	static ref<WebView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<WebView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<WebView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	static ref<WebView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jboolean privateBrowsing);
	void setHorizontalScrollbarOverlay(jboolean overlay);
	void setVerticalScrollbarOverlay(jboolean overlay);
	jboolean overlayHorizontalScrollbar();
	jboolean overlayVerticalScrollbar();
	ref<android::net::http::SslCertificate> getCertificate();
	void setCertificate(ref<android::net::http::SslCertificate> certificate);
	void savePassword(ref<java::lang::String> host, ref<java::lang::String> username, ref<java::lang::String> password);
	void setHttpAuthUsernamePassword(ref<java::lang::String> host, ref<java::lang::String> realm, ref<java::lang::String> username, ref<java::lang::String> password);
	ref<link::java::array<java::lang::String>> getHttpAuthUsernamePassword(ref<java::lang::String> host, ref<java::lang::String> realm);
	void destroy();
	void setNetworkAvailable(jboolean networkUp);
	ref<android::webkit::WebBackForwardList> saveState(ref<android::os::Bundle> outState);
	ref<android::webkit::WebBackForwardList> restoreState(ref<android::os::Bundle> inState);
	void loadUrl(ref<java::lang::String> url, ref<java::util::Map> additionalHttpHeaders);
	void loadUrl(ref<java::lang::String> url);
	void postUrl(ref<java::lang::String> url, ref<link::java::array<jbyte>> postData);
	void loadData(ref<java::lang::String> data, ref<java::lang::String> mimeType, ref<java::lang::String> encoding);
	void loadDataWithBaseURL(ref<java::lang::String> baseUrl, ref<java::lang::String> data, ref<java::lang::String> mimeType, ref<java::lang::String> encoding, ref<java::lang::String> historyUrl);
	void evaluateJavascript(ref<java::lang::String> script, ref<android::webkit::ValueCallback> resultCallback);
	void saveWebArchive(ref<java::lang::String> filename);
	void saveWebArchive(ref<java::lang::String> basename, jboolean autoname, ref<android::webkit::ValueCallback> callback);
	void stopLoading();
	void reload();
	jboolean canGoBack();
	void goBack();
	jboolean canGoForward();
	void goForward();
	jboolean canGoBackOrForward(jint steps);
	void goBackOrForward(jint steps);
	jboolean isPrivateBrowsingEnabled();
	jboolean pageUp(jboolean top);
	jboolean pageDown(jboolean bottom);
	void postVisualStateCallback(jlong requestId, ref<android::webkit::WebView_VisualStateCallback> p2);
	void clearView();
	ref<android::graphics::Picture> capturePicture();
	ref<android::print::PrintDocumentAdapter> createPrintDocumentAdapter();
	ref<android::print::PrintDocumentAdapter> createPrintDocumentAdapter(ref<java::lang::String> documentName);
	jfloat getScale();
	void setInitialScale(jint scaleInPercent);
	void invokeZoomPicker();
	ref<android::webkit::WebView_HitTestResult> getHitTestResult();
	void requestFocusNodeHref(ref<android::os::Message> hrefMsg);
	void requestImageRef(ref<android::os::Message> msg);
	ref<java::lang::String> getUrl();
	ref<java::lang::String> getOriginalUrl();
	ref<java::lang::String> getTitle();
	ref<android::graphics::Bitmap> getFavicon();
	jint getProgress();
	jint getContentHeight();
	void pauseTimers();
	void resumeTimers();
	void onPause();
	void onResume();
	void freeMemory();
	void clearCache(jboolean includeDiskFiles);
	void clearFormData();
	void clearHistory();
	void clearSslPreferences();
	static void clearClientCertPreferences(ref<java::lang::Runnable> onCleared);
	static void startSafeBrowsing(ref<android::content::Context> context, ref<android::webkit::ValueCallback> callback);
	static void setSafeBrowsingWhitelist(ref<java::util::List> hosts, ref<android::webkit::ValueCallback> callback);
	static ref<android::net::Uri> getSafeBrowsingPrivacyPolicyUrl();
	ref<android::webkit::WebBackForwardList> copyBackForwardList();
	void setFindListener(ref<android::webkit::WebView_FindListener> listener);
	void findNext(jboolean forward);
	jint findAll(ref<java::lang::String> find);
	void findAllAsync(ref<java::lang::String> find);
	jboolean showFindDialog(ref<java::lang::String> text, jboolean showIme);
	static ref<java::lang::String> findAddress(ref<java::lang::String> addr);
	static void enableSlowWholeDocumentDraw();
	void clearMatches();
	void documentHasImages(ref<android::os::Message> response);
	void setWebViewClient(ref<android::webkit::WebViewClient> client);
	ref<android::webkit::WebViewClient> getWebViewClient();
	void setDownloadListener(ref<android::webkit::DownloadListener> listener);
	void setWebChromeClient(ref<android::webkit::WebChromeClient> client);
	ref<android::webkit::WebChromeClient> getWebChromeClient();
	void setPictureListener(ref<android::webkit::WebView_PictureListener> listener);
	void addJavascriptInterface(ref<java::lang::Object> object, ref<java::lang::String> name);
	void removeJavascriptInterface(ref<java::lang::String> name);
	ref<link::java::array<android::webkit::WebMessagePort>> createWebMessageChannel();
	void postWebMessage(ref<android::webkit::WebMessage> message, ref<android::net::Uri> targetOrigin);
	ref<android::webkit::WebSettings> getSettings();
	static void setWebContentsDebuggingEnabled(jboolean enabled);
	static void setDataDirectorySuffix(ref<java::lang::String> suffix);
	static void disableWebView();
	void onChildViewAdded(ref<android::view::View> parent, ref<android::view::View> child);
	void onChildViewRemoved(ref<android::view::View> p, ref<android::view::View> child);
	void onGlobalFocusChanged(ref<android::view::View> oldFocus, ref<android::view::View> newFocus);
	void setMapTrackballToArrowKeys(jboolean setMap);
	void flingScroll(jint vx, jint vy);
	jboolean canZoomIn();
	jboolean canZoomOut();
	void zoomBy(jfloat zoomFactor);
	jboolean zoomIn();
	jboolean zoomOut();
	void setRendererPriorityPolicy(jint rendererRequestedPriority, jboolean waivedWhenNotVisible);
	jint getRendererRequestedPriority();
	jboolean getRendererPriorityWaivedWhenNotVisible();
	void setTextClassifier(ref<android::view::textclassifier::TextClassifier> textClassifier);
	ref<android::view::textclassifier::TextClassifier> getTextClassifier();
	static ref<java::lang::ClassLoader> getWebViewClassLoader();
	ref<android::os::Looper> getWebViewLooper();
	void setLayoutParams(ref<android::view::ViewGroup_LayoutParams> params);
	void setOverScrollMode(jint mode);
	void setScrollBarStyle(jint style);
	void computeScroll();
	jboolean onHoverEvent(ref<android::view::MotionEvent> event);
	jboolean onTouchEvent(ref<android::view::MotionEvent> event);
	jboolean onGenericMotionEvent(ref<android::view::MotionEvent> event);
	jboolean onTrackballEvent(ref<android::view::MotionEvent> event);
	jboolean onKeyDown(jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onKeyUp(jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onKeyMultiple(jint keyCode, jint repeatCount, ref<android::view::KeyEvent> event);
	ref<android::view::accessibility::AccessibilityNodeProvider> getAccessibilityNodeProvider();
	jboolean shouldDelayChildPressedState();
	ref<java::lang::CharSequence> getAccessibilityClassName();
	void onProvideVirtualStructure(ref<android::view::ViewStructure> structure);
	void onProvideAutofillVirtualStructure(ref<android::view::ViewStructure> structure, jint flags);
	void autofill(ref<android::util::SparseArray> values);
	jboolean isVisibleToUserForAutofill(jint virtualId);
	jboolean performLongClick();
	ref<android::view::inputmethod::InputConnection> onCreateInputConnection(ref<android::view::inputmethod::EditorInfo> outAttrs);
	jboolean onDragEvent(ref<android::view::DragEvent> event);
	void onWindowFocusChanged(jboolean hasWindowFocus);
	jboolean dispatchKeyEvent(ref<android::view::KeyEvent> event);
	jboolean requestFocus(jint direction, ref<android::graphics::Rect> previouslyFocusedRect);
	jboolean requestChildRectangleOnScreen(ref<android::view::View> child, ref<android::graphics::Rect> rect, jboolean immediate);
	void setBackgroundColor(jint color);
	void setLayerType(jint layerType, ref<android::graphics::Paint> paint);
	void onStartTemporaryDetach();
	void onFinishTemporaryDetach();
	ref<android::os::Handler> getHandler();
	ref<android::view::View> findFocus();
	static ref<android::content::pm::PackageInfo> getCurrentWebViewPackage();
	jboolean onCheckIsTextEditor();

protected:

	WebView(handle_type h) : base_(h) {}

};

} // namespace android::webkit
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/pm/PackageInfo.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/Paint.h>
#include <scapix/java_api/android/graphics/Picture.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/net/http/SslCertificate.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/Looper.h>
#include <scapix/java_api/android/os/Message.h>
#include <scapix/java_api/android/print/PrintDocumentAdapter.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/util/SparseArray.h>
#include <scapix/java_api/android/view/DragEvent.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup_LayoutParams.h>
#include <scapix/java_api/android/view/ViewStructure.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeProvider.h>
#include <scapix/java_api/android/view/inputmethod/EditorInfo.h>
#include <scapix/java_api/android/view/inputmethod/InputConnection.h>
#include <scapix/java_api/android/view/textclassifier/TextClassifier.h>
#include <scapix/java_api/android/webkit/DownloadListener.h>
#include <scapix/java_api/android/webkit/ValueCallback.h>
#include <scapix/java_api/android/webkit/WebBackForwardList.h>
#include <scapix/java_api/android/webkit/WebChromeClient.h>
#include <scapix/java_api/android/webkit/WebMessage.h>
#include <scapix/java_api/android/webkit/WebMessagePort.h>
#include <scapix/java_api/android/webkit/WebSettings.h>
#include <scapix/java_api/android/webkit/WebView_FindListener.h>
#include <scapix/java_api/android/webkit/WebView_HitTestResult.h>
#include <scapix/java_api/android/webkit/WebView_PictureListener.h>
#include <scapix/java_api/android/webkit/WebView_VisualStateCallback.h>
#include <scapix/java_api/android/webkit/WebViewClient.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>

namespace scapix::java_api {
namespace android::webkit {

inline jint WebView::RENDERER_PRIORITY_BOUND_() { return get_static_field<SCAPIX_META_STRING("RENDERER_PRIORITY_BOUND"), jint>(); }
inline jint WebView::RENDERER_PRIORITY_IMPORTANT_() { return get_static_field<SCAPIX_META_STRING("RENDERER_PRIORITY_IMPORTANT"), jint>(); }
inline jint WebView::RENDERER_PRIORITY_WAIVED_() { return get_static_field<SCAPIX_META_STRING("RENDERER_PRIORITY_WAIVED"), jint>(); }
inline ref<java::lang::String> WebView::SCHEME_GEO_() { return get_static_field<SCAPIX_META_STRING("SCHEME_GEO"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WebView::SCHEME_MAILTO_() { return get_static_field<SCAPIX_META_STRING("SCHEME_MAILTO"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WebView::SCHEME_TEL_() { return get_static_field<SCAPIX_META_STRING("SCHEME_TEL"), ref<java::lang::String>>(); }
inline ref<WebView> WebView::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<WebView> WebView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<WebView> WebView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<WebView> WebView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline ref<WebView> WebView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jboolean privateBrowsing) { return base_::new_object(context, attrs, defStyleAttr, privateBrowsing); }
inline void WebView::setHorizontalScrollbarOverlay(jboolean overlay) { return call_method<SCAPIX_META_STRING("setHorizontalScrollbarOverlay"), void>(overlay); }
inline void WebView::setVerticalScrollbarOverlay(jboolean overlay) { return call_method<SCAPIX_META_STRING("setVerticalScrollbarOverlay"), void>(overlay); }
inline jboolean WebView::overlayHorizontalScrollbar() { return call_method<SCAPIX_META_STRING("overlayHorizontalScrollbar"), jboolean>(); }
inline jboolean WebView::overlayVerticalScrollbar() { return call_method<SCAPIX_META_STRING("overlayVerticalScrollbar"), jboolean>(); }
inline ref<android::net::http::SslCertificate> WebView::getCertificate() { return call_method<SCAPIX_META_STRING("getCertificate"), ref<android::net::http::SslCertificate>>(); }
inline void WebView::setCertificate(ref<android::net::http::SslCertificate> certificate) { return call_method<SCAPIX_META_STRING("setCertificate"), void>(certificate); }
inline void WebView::savePassword(ref<java::lang::String> host, ref<java::lang::String> username, ref<java::lang::String> password) { return call_method<SCAPIX_META_STRING("savePassword"), void>(host, username, password); }
inline void WebView::setHttpAuthUsernamePassword(ref<java::lang::String> host, ref<java::lang::String> realm, ref<java::lang::String> username, ref<java::lang::String> password) { return call_method<SCAPIX_META_STRING("setHttpAuthUsernamePassword"), void>(host, realm, username, password); }
inline ref<link::java::array<java::lang::String>> WebView::getHttpAuthUsernamePassword(ref<java::lang::String> host, ref<java::lang::String> realm) { return call_method<SCAPIX_META_STRING("getHttpAuthUsernamePassword"), ref<link::java::array<java::lang::String>>>(host, realm); }
inline void WebView::destroy() { return call_method<SCAPIX_META_STRING("destroy"), void>(); }
inline void WebView::setNetworkAvailable(jboolean networkUp) { return call_method<SCAPIX_META_STRING("setNetworkAvailable"), void>(networkUp); }
inline ref<android::webkit::WebBackForwardList> WebView::saveState(ref<android::os::Bundle> outState) { return call_method<SCAPIX_META_STRING("saveState"), ref<android::webkit::WebBackForwardList>>(outState); }
inline ref<android::webkit::WebBackForwardList> WebView::restoreState(ref<android::os::Bundle> inState) { return call_method<SCAPIX_META_STRING("restoreState"), ref<android::webkit::WebBackForwardList>>(inState); }
inline void WebView::loadUrl(ref<java::lang::String> url, ref<java::util::Map> additionalHttpHeaders) { return call_method<SCAPIX_META_STRING("loadUrl"), void>(url, additionalHttpHeaders); }
inline void WebView::loadUrl(ref<java::lang::String> url) { return call_method<SCAPIX_META_STRING("loadUrl"), void>(url); }
inline void WebView::postUrl(ref<java::lang::String> url, ref<link::java::array<jbyte>> postData) { return call_method<SCAPIX_META_STRING("postUrl"), void>(url, postData); }
inline void WebView::loadData(ref<java::lang::String> data, ref<java::lang::String> mimeType, ref<java::lang::String> encoding) { return call_method<SCAPIX_META_STRING("loadData"), void>(data, mimeType, encoding); }
inline void WebView::loadDataWithBaseURL(ref<java::lang::String> baseUrl, ref<java::lang::String> data, ref<java::lang::String> mimeType, ref<java::lang::String> encoding, ref<java::lang::String> historyUrl) { return call_method<SCAPIX_META_STRING("loadDataWithBaseURL"), void>(baseUrl, data, mimeType, encoding, historyUrl); }
inline void WebView::evaluateJavascript(ref<java::lang::String> script, ref<android::webkit::ValueCallback> resultCallback) { return call_method<SCAPIX_META_STRING("evaluateJavascript"), void>(script, resultCallback); }
inline void WebView::saveWebArchive(ref<java::lang::String> filename) { return call_method<SCAPIX_META_STRING("saveWebArchive"), void>(filename); }
inline void WebView::saveWebArchive(ref<java::lang::String> basename, jboolean autoname, ref<android::webkit::ValueCallback> callback) { return call_method<SCAPIX_META_STRING("saveWebArchive"), void>(basename, autoname, callback); }
inline void WebView::stopLoading() { return call_method<SCAPIX_META_STRING("stopLoading"), void>(); }
inline void WebView::reload() { return call_method<SCAPIX_META_STRING("reload"), void>(); }
inline jboolean WebView::canGoBack() { return call_method<SCAPIX_META_STRING("canGoBack"), jboolean>(); }
inline void WebView::goBack() { return call_method<SCAPIX_META_STRING("goBack"), void>(); }
inline jboolean WebView::canGoForward() { return call_method<SCAPIX_META_STRING("canGoForward"), jboolean>(); }
inline void WebView::goForward() { return call_method<SCAPIX_META_STRING("goForward"), void>(); }
inline jboolean WebView::canGoBackOrForward(jint steps) { return call_method<SCAPIX_META_STRING("canGoBackOrForward"), jboolean>(steps); }
inline void WebView::goBackOrForward(jint steps) { return call_method<SCAPIX_META_STRING("goBackOrForward"), void>(steps); }
inline jboolean WebView::isPrivateBrowsingEnabled() { return call_method<SCAPIX_META_STRING("isPrivateBrowsingEnabled"), jboolean>(); }
inline jboolean WebView::pageUp(jboolean top) { return call_method<SCAPIX_META_STRING("pageUp"), jboolean>(top); }
inline jboolean WebView::pageDown(jboolean bottom) { return call_method<SCAPIX_META_STRING("pageDown"), jboolean>(bottom); }
inline void WebView::postVisualStateCallback(jlong requestId, ref<android::webkit::WebView_VisualStateCallback> p2) { return call_method<SCAPIX_META_STRING("postVisualStateCallback"), void>(requestId, p2); }
inline void WebView::clearView() { return call_method<SCAPIX_META_STRING("clearView"), void>(); }
inline ref<android::graphics::Picture> WebView::capturePicture() { return call_method<SCAPIX_META_STRING("capturePicture"), ref<android::graphics::Picture>>(); }
inline ref<android::print::PrintDocumentAdapter> WebView::createPrintDocumentAdapter() { return call_method<SCAPIX_META_STRING("createPrintDocumentAdapter"), ref<android::print::PrintDocumentAdapter>>(); }
inline ref<android::print::PrintDocumentAdapter> WebView::createPrintDocumentAdapter(ref<java::lang::String> documentName) { return call_method<SCAPIX_META_STRING("createPrintDocumentAdapter"), ref<android::print::PrintDocumentAdapter>>(documentName); }
inline jfloat WebView::getScale() { return call_method<SCAPIX_META_STRING("getScale"), jfloat>(); }
inline void WebView::setInitialScale(jint scaleInPercent) { return call_method<SCAPIX_META_STRING("setInitialScale"), void>(scaleInPercent); }
inline void WebView::invokeZoomPicker() { return call_method<SCAPIX_META_STRING("invokeZoomPicker"), void>(); }
inline ref<android::webkit::WebView_HitTestResult> WebView::getHitTestResult() { return call_method<SCAPIX_META_STRING("getHitTestResult"), ref<android::webkit::WebView_HitTestResult>>(); }
inline void WebView::requestFocusNodeHref(ref<android::os::Message> hrefMsg) { return call_method<SCAPIX_META_STRING("requestFocusNodeHref"), void>(hrefMsg); }
inline void WebView::requestImageRef(ref<android::os::Message> msg) { return call_method<SCAPIX_META_STRING("requestImageRef"), void>(msg); }
inline ref<java::lang::String> WebView::getUrl() { return call_method<SCAPIX_META_STRING("getUrl"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WebView::getOriginalUrl() { return call_method<SCAPIX_META_STRING("getOriginalUrl"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WebView::getTitle() { return call_method<SCAPIX_META_STRING("getTitle"), ref<java::lang::String>>(); }
inline ref<android::graphics::Bitmap> WebView::getFavicon() { return call_method<SCAPIX_META_STRING("getFavicon"), ref<android::graphics::Bitmap>>(); }
inline jint WebView::getProgress() { return call_method<SCAPIX_META_STRING("getProgress"), jint>(); }
inline jint WebView::getContentHeight() { return call_method<SCAPIX_META_STRING("getContentHeight"), jint>(); }
inline void WebView::pauseTimers() { return call_method<SCAPIX_META_STRING("pauseTimers"), void>(); }
inline void WebView::resumeTimers() { return call_method<SCAPIX_META_STRING("resumeTimers"), void>(); }
inline void WebView::onPause() { return call_method<SCAPIX_META_STRING("onPause"), void>(); }
inline void WebView::onResume() { return call_method<SCAPIX_META_STRING("onResume"), void>(); }
inline void WebView::freeMemory() { return call_method<SCAPIX_META_STRING("freeMemory"), void>(); }
inline void WebView::clearCache(jboolean includeDiskFiles) { return call_method<SCAPIX_META_STRING("clearCache"), void>(includeDiskFiles); }
inline void WebView::clearFormData() { return call_method<SCAPIX_META_STRING("clearFormData"), void>(); }
inline void WebView::clearHistory() { return call_method<SCAPIX_META_STRING("clearHistory"), void>(); }
inline void WebView::clearSslPreferences() { return call_method<SCAPIX_META_STRING("clearSslPreferences"), void>(); }
inline void WebView::clearClientCertPreferences(ref<java::lang::Runnable> onCleared) { return call_static_method<SCAPIX_META_STRING("clearClientCertPreferences"), void>(onCleared); }
inline void WebView::startSafeBrowsing(ref<android::content::Context> context, ref<android::webkit::ValueCallback> callback) { return call_static_method<SCAPIX_META_STRING("startSafeBrowsing"), void>(context, callback); }
inline void WebView::setSafeBrowsingWhitelist(ref<java::util::List> hosts, ref<android::webkit::ValueCallback> callback) { return call_static_method<SCAPIX_META_STRING("setSafeBrowsingWhitelist"), void>(hosts, callback); }
inline ref<android::net::Uri> WebView::getSafeBrowsingPrivacyPolicyUrl() { return call_static_method<SCAPIX_META_STRING("getSafeBrowsingPrivacyPolicyUrl"), ref<android::net::Uri>>(); }
inline ref<android::webkit::WebBackForwardList> WebView::copyBackForwardList() { return call_method<SCAPIX_META_STRING("copyBackForwardList"), ref<android::webkit::WebBackForwardList>>(); }
inline void WebView::setFindListener(ref<android::webkit::WebView_FindListener> listener) { return call_method<SCAPIX_META_STRING("setFindListener"), void>(listener); }
inline void WebView::findNext(jboolean forward) { return call_method<SCAPIX_META_STRING("findNext"), void>(forward); }
inline jint WebView::findAll(ref<java::lang::String> find) { return call_method<SCAPIX_META_STRING("findAll"), jint>(find); }
inline void WebView::findAllAsync(ref<java::lang::String> find) { return call_method<SCAPIX_META_STRING("findAllAsync"), void>(find); }
inline jboolean WebView::showFindDialog(ref<java::lang::String> text, jboolean showIme) { return call_method<SCAPIX_META_STRING("showFindDialog"), jboolean>(text, showIme); }
inline ref<java::lang::String> WebView::findAddress(ref<java::lang::String> addr) { return call_static_method<SCAPIX_META_STRING("findAddress"), ref<java::lang::String>>(addr); }
inline void WebView::enableSlowWholeDocumentDraw() { return call_static_method<SCAPIX_META_STRING("enableSlowWholeDocumentDraw"), void>(); }
inline void WebView::clearMatches() { return call_method<SCAPIX_META_STRING("clearMatches"), void>(); }
inline void WebView::documentHasImages(ref<android::os::Message> response) { return call_method<SCAPIX_META_STRING("documentHasImages"), void>(response); }
inline void WebView::setWebViewClient(ref<android::webkit::WebViewClient> client) { return call_method<SCAPIX_META_STRING("setWebViewClient"), void>(client); }
inline ref<android::webkit::WebViewClient> WebView::getWebViewClient() { return call_method<SCAPIX_META_STRING("getWebViewClient"), ref<android::webkit::WebViewClient>>(); }
inline void WebView::setDownloadListener(ref<android::webkit::DownloadListener> listener) { return call_method<SCAPIX_META_STRING("setDownloadListener"), void>(listener); }
inline void WebView::setWebChromeClient(ref<android::webkit::WebChromeClient> client) { return call_method<SCAPIX_META_STRING("setWebChromeClient"), void>(client); }
inline ref<android::webkit::WebChromeClient> WebView::getWebChromeClient() { return call_method<SCAPIX_META_STRING("getWebChromeClient"), ref<android::webkit::WebChromeClient>>(); }
inline void WebView::setPictureListener(ref<android::webkit::WebView_PictureListener> listener) { return call_method<SCAPIX_META_STRING("setPictureListener"), void>(listener); }
inline void WebView::addJavascriptInterface(ref<java::lang::Object> object, ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("addJavascriptInterface"), void>(object, name); }
inline void WebView::removeJavascriptInterface(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("removeJavascriptInterface"), void>(name); }
inline ref<link::java::array<android::webkit::WebMessagePort>> WebView::createWebMessageChannel() { return call_method<SCAPIX_META_STRING("createWebMessageChannel"), ref<link::java::array<android::webkit::WebMessagePort>>>(); }
inline void WebView::postWebMessage(ref<android::webkit::WebMessage> message, ref<android::net::Uri> targetOrigin) { return call_method<SCAPIX_META_STRING("postWebMessage"), void>(message, targetOrigin); }
inline ref<android::webkit::WebSettings> WebView::getSettings() { return call_method<SCAPIX_META_STRING("getSettings"), ref<android::webkit::WebSettings>>(); }
inline void WebView::setWebContentsDebuggingEnabled(jboolean enabled) { return call_static_method<SCAPIX_META_STRING("setWebContentsDebuggingEnabled"), void>(enabled); }
inline void WebView::setDataDirectorySuffix(ref<java::lang::String> suffix) { return call_static_method<SCAPIX_META_STRING("setDataDirectorySuffix"), void>(suffix); }
inline void WebView::disableWebView() { return call_static_method<SCAPIX_META_STRING("disableWebView"), void>(); }
inline void WebView::onChildViewAdded(ref<android::view::View> parent, ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("onChildViewAdded"), void>(parent, child); }
inline void WebView::onChildViewRemoved(ref<android::view::View> p, ref<android::view::View> child) { return call_method<SCAPIX_META_STRING("onChildViewRemoved"), void>(p, child); }
inline void WebView::onGlobalFocusChanged(ref<android::view::View> oldFocus, ref<android::view::View> newFocus) { return call_method<SCAPIX_META_STRING("onGlobalFocusChanged"), void>(oldFocus, newFocus); }
inline void WebView::setMapTrackballToArrowKeys(jboolean setMap) { return call_method<SCAPIX_META_STRING("setMapTrackballToArrowKeys"), void>(setMap); }
inline void WebView::flingScroll(jint vx, jint vy) { return call_method<SCAPIX_META_STRING("flingScroll"), void>(vx, vy); }
inline jboolean WebView::canZoomIn() { return call_method<SCAPIX_META_STRING("canZoomIn"), jboolean>(); }
inline jboolean WebView::canZoomOut() { return call_method<SCAPIX_META_STRING("canZoomOut"), jboolean>(); }
inline void WebView::zoomBy(jfloat zoomFactor) { return call_method<SCAPIX_META_STRING("zoomBy"), void>(zoomFactor); }
inline jboolean WebView::zoomIn() { return call_method<SCAPIX_META_STRING("zoomIn"), jboolean>(); }
inline jboolean WebView::zoomOut() { return call_method<SCAPIX_META_STRING("zoomOut"), jboolean>(); }
inline void WebView::setRendererPriorityPolicy(jint rendererRequestedPriority, jboolean waivedWhenNotVisible) { return call_method<SCAPIX_META_STRING("setRendererPriorityPolicy"), void>(rendererRequestedPriority, waivedWhenNotVisible); }
inline jint WebView::getRendererRequestedPriority() { return call_method<SCAPIX_META_STRING("getRendererRequestedPriority"), jint>(); }
inline jboolean WebView::getRendererPriorityWaivedWhenNotVisible() { return call_method<SCAPIX_META_STRING("getRendererPriorityWaivedWhenNotVisible"), jboolean>(); }
inline void WebView::setTextClassifier(ref<android::view::textclassifier::TextClassifier> textClassifier) { return call_method<SCAPIX_META_STRING("setTextClassifier"), void>(textClassifier); }
inline ref<android::view::textclassifier::TextClassifier> WebView::getTextClassifier() { return call_method<SCAPIX_META_STRING("getTextClassifier"), ref<android::view::textclassifier::TextClassifier>>(); }
inline ref<java::lang::ClassLoader> WebView::getWebViewClassLoader() { return call_static_method<SCAPIX_META_STRING("getWebViewClassLoader"), ref<java::lang::ClassLoader>>(); }
inline ref<android::os::Looper> WebView::getWebViewLooper() { return call_method<SCAPIX_META_STRING("getWebViewLooper"), ref<android::os::Looper>>(); }
inline void WebView::setLayoutParams(ref<android::view::ViewGroup_LayoutParams> params) { return call_method<SCAPIX_META_STRING("setLayoutParams"), void>(params); }
inline void WebView::setOverScrollMode(jint mode) { return call_method<SCAPIX_META_STRING("setOverScrollMode"), void>(mode); }
inline void WebView::setScrollBarStyle(jint style) { return call_method<SCAPIX_META_STRING("setScrollBarStyle"), void>(style); }
inline void WebView::computeScroll() { return call_method<SCAPIX_META_STRING("computeScroll"), void>(); }
inline jboolean WebView::onHoverEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onHoverEvent"), jboolean>(event); }
inline jboolean WebView::onTouchEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onTouchEvent"), jboolean>(event); }
inline jboolean WebView::onGenericMotionEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onGenericMotionEvent"), jboolean>(event); }
inline jboolean WebView::onTrackballEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("onTrackballEvent"), jboolean>(event); }
inline jboolean WebView::onKeyDown(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyDown"), jboolean>(keyCode, event); }
inline jboolean WebView::onKeyUp(jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyUp"), jboolean>(keyCode, event); }
inline jboolean WebView::onKeyMultiple(jint keyCode, jint repeatCount, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyMultiple"), jboolean>(keyCode, repeatCount, event); }
inline ref<android::view::accessibility::AccessibilityNodeProvider> WebView::getAccessibilityNodeProvider() { return call_method<SCAPIX_META_STRING("getAccessibilityNodeProvider"), ref<android::view::accessibility::AccessibilityNodeProvider>>(); }
inline jboolean WebView::shouldDelayChildPressedState() { return call_method<SCAPIX_META_STRING("shouldDelayChildPressedState"), jboolean>(); }
inline ref<java::lang::CharSequence> WebView::getAccessibilityClassName() { return call_method<SCAPIX_META_STRING("getAccessibilityClassName"), ref<java::lang::CharSequence>>(); }
inline void WebView::onProvideVirtualStructure(ref<android::view::ViewStructure> structure) { return call_method<SCAPIX_META_STRING("onProvideVirtualStructure"), void>(structure); }
inline void WebView::onProvideAutofillVirtualStructure(ref<android::view::ViewStructure> structure, jint flags) { return call_method<SCAPIX_META_STRING("onProvideAutofillVirtualStructure"), void>(structure, flags); }
inline void WebView::autofill(ref<android::util::SparseArray> values) { return call_method<SCAPIX_META_STRING("autofill"), void>(values); }
inline jboolean WebView::isVisibleToUserForAutofill(jint virtualId) { return call_method<SCAPIX_META_STRING("isVisibleToUserForAutofill"), jboolean>(virtualId); }
inline jboolean WebView::performLongClick() { return call_method<SCAPIX_META_STRING("performLongClick"), jboolean>(); }
inline ref<android::view::inputmethod::InputConnection> WebView::onCreateInputConnection(ref<android::view::inputmethod::EditorInfo> outAttrs) { return call_method<SCAPIX_META_STRING("onCreateInputConnection"), ref<android::view::inputmethod::InputConnection>>(outAttrs); }
inline jboolean WebView::onDragEvent(ref<android::view::DragEvent> event) { return call_method<SCAPIX_META_STRING("onDragEvent"), jboolean>(event); }
inline void WebView::onWindowFocusChanged(jboolean hasWindowFocus) { return call_method<SCAPIX_META_STRING("onWindowFocusChanged"), void>(hasWindowFocus); }
inline jboolean WebView::dispatchKeyEvent(ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("dispatchKeyEvent"), jboolean>(event); }
inline jboolean WebView::requestFocus(jint direction, ref<android::graphics::Rect> previouslyFocusedRect) { return call_method<SCAPIX_META_STRING("requestFocus"), jboolean>(direction, previouslyFocusedRect); }
inline jboolean WebView::requestChildRectangleOnScreen(ref<android::view::View> child, ref<android::graphics::Rect> rect, jboolean immediate) { return call_method<SCAPIX_META_STRING("requestChildRectangleOnScreen"), jboolean>(child, rect, immediate); }
inline void WebView::setBackgroundColor(jint color) { return call_method<SCAPIX_META_STRING("setBackgroundColor"), void>(color); }
inline void WebView::setLayerType(jint layerType, ref<android::graphics::Paint> paint) { return call_method<SCAPIX_META_STRING("setLayerType"), void>(layerType, paint); }
inline void WebView::onStartTemporaryDetach() { return call_method<SCAPIX_META_STRING("onStartTemporaryDetach"), void>(); }
inline void WebView::onFinishTemporaryDetach() { return call_method<SCAPIX_META_STRING("onFinishTemporaryDetach"), void>(); }
inline ref<android::os::Handler> WebView::getHandler() { return call_method<SCAPIX_META_STRING("getHandler"), ref<android::os::Handler>>(); }
inline ref<android::view::View> WebView::findFocus() { return call_method<SCAPIX_META_STRING("findFocus"), ref<android::view::View>>(); }
inline ref<android::content::pm::PackageInfo> WebView::getCurrentWebViewPackage() { return call_static_method<SCAPIX_META_STRING("getCurrentWebViewPackage"), ref<android::content::pm::PackageInfo>>(); }
inline jboolean WebView::onCheckIsTextEditor() { return call_method<SCAPIX_META_STRING("onCheckIsTextEditor"), jboolean>(); }

} // namespace android::webkit
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WEBKIT_WEBVIEW_H
