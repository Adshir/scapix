// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_WEBKIT_WEBSETTINGS_H
#define SCAPIX_ANDROID_WEBKIT_WEBSETTINGS_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::webkit { class WebSettings_LayoutAlgorithm; }
namespace android::webkit { class WebSettings_PluginState; }
namespace android::webkit { class WebSettings_RenderPriority; }
namespace android::webkit { class WebSettings_TextSize; }
namespace android::webkit { class WebSettings_ZoomDensity; }
namespace java::lang { class String; }

namespace android::webkit {

class WebSettings : public object_base<SCAPIX_META_STRING("android/webkit/WebSettings"),
	java::lang::Object>
{
public:

	using ZoomDensity = WebSettings_ZoomDensity;
	using TextSize = WebSettings_TextSize;
	using RenderPriority = WebSettings_RenderPriority;
	using PluginState = WebSettings_PluginState;
	using LayoutAlgorithm = WebSettings_LayoutAlgorithm;

	static jint LOAD_CACHE_ELSE_NETWORK_();
	static jint LOAD_CACHE_ONLY_();
	static jint LOAD_DEFAULT_();
	static jint LOAD_NORMAL_();
	static jint LOAD_NO_CACHE_();
	static jint MENU_ITEM_NONE_();
	static jint MENU_ITEM_PROCESS_TEXT_();
	static jint MENU_ITEM_SHARE_();
	static jint MENU_ITEM_WEB_SEARCH_();
	static jint MIXED_CONTENT_ALWAYS_ALLOW_();
	static jint MIXED_CONTENT_COMPATIBILITY_MODE_();
	static jint MIXED_CONTENT_NEVER_ALLOW_();

	static ref<WebSettings> new_object();
	void setSupportZoom(jboolean p1);
	jboolean supportZoom();
	void setMediaPlaybackRequiresUserGesture(jboolean p1);
	jboolean getMediaPlaybackRequiresUserGesture();
	void setBuiltInZoomControls(jboolean p1);
	jboolean getBuiltInZoomControls();
	void setDisplayZoomControls(jboolean p1);
	jboolean getDisplayZoomControls();
	void setAllowFileAccess(jboolean p1);
	jboolean getAllowFileAccess();
	void setAllowContentAccess(jboolean p1);
	jboolean getAllowContentAccess();
	void setLoadWithOverviewMode(jboolean p1);
	jboolean getLoadWithOverviewMode();
	void setEnableSmoothTransition(jboolean p1);
	jboolean enableSmoothTransition();
	void setSaveFormData(jboolean p1);
	jboolean getSaveFormData();
	void setSavePassword(jboolean p1);
	jboolean getSavePassword();
	void setTextZoom(jint p1);
	jint getTextZoom();
	void setTextSize(ref<android::webkit::WebSettings_TextSize> t);
	ref<android::webkit::WebSettings_TextSize> getTextSize();
	void setDefaultZoom(ref<android::webkit::WebSettings_ZoomDensity> p1);
	ref<android::webkit::WebSettings_ZoomDensity> getDefaultZoom();
	void setLightTouchEnabled(jboolean p1);
	jboolean getLightTouchEnabled();
	void setUseWideViewPort(jboolean p1);
	jboolean getUseWideViewPort();
	void setSupportMultipleWindows(jboolean p1);
	jboolean supportMultipleWindows();
	void setLayoutAlgorithm(ref<android::webkit::WebSettings_LayoutAlgorithm> p1);
	ref<android::webkit::WebSettings_LayoutAlgorithm> getLayoutAlgorithm();
	void setStandardFontFamily(ref<java::lang::String> p1);
	ref<java::lang::String> getStandardFontFamily();
	void setFixedFontFamily(ref<java::lang::String> p1);
	ref<java::lang::String> getFixedFontFamily();
	void setSansSerifFontFamily(ref<java::lang::String> p1);
	ref<java::lang::String> getSansSerifFontFamily();
	void setSerifFontFamily(ref<java::lang::String> p1);
	ref<java::lang::String> getSerifFontFamily();
	void setCursiveFontFamily(ref<java::lang::String> p1);
	ref<java::lang::String> getCursiveFontFamily();
	void setFantasyFontFamily(ref<java::lang::String> p1);
	ref<java::lang::String> getFantasyFontFamily();
	void setMinimumFontSize(jint p1);
	jint getMinimumFontSize();
	void setMinimumLogicalFontSize(jint p1);
	jint getMinimumLogicalFontSize();
	void setDefaultFontSize(jint p1);
	jint getDefaultFontSize();
	void setDefaultFixedFontSize(jint p1);
	jint getDefaultFixedFontSize();
	void setLoadsImagesAutomatically(jboolean p1);
	jboolean getLoadsImagesAutomatically();
	void setBlockNetworkImage(jboolean p1);
	jboolean getBlockNetworkImage();
	void setBlockNetworkLoads(jboolean p1);
	jboolean getBlockNetworkLoads();
	void setJavaScriptEnabled(jboolean p1);
	void setAllowUniversalAccessFromFileURLs(jboolean p1);
	void setAllowFileAccessFromFileURLs(jboolean p1);
	void setPluginState(ref<android::webkit::WebSettings_PluginState> p1);
	void setDatabasePath(ref<java::lang::String> p1);
	void setGeolocationDatabasePath(ref<java::lang::String> p1);
	void setAppCacheEnabled(jboolean p1);
	void setAppCachePath(ref<java::lang::String> p1);
	void setAppCacheMaxSize(jlong p1);
	void setDatabaseEnabled(jboolean p1);
	void setDomStorageEnabled(jboolean p1);
	jboolean getDomStorageEnabled();
	ref<java::lang::String> getDatabasePath();
	jboolean getDatabaseEnabled();
	void setGeolocationEnabled(jboolean p1);
	jboolean getJavaScriptEnabled();
	jboolean getAllowUniversalAccessFromFileURLs();
	jboolean getAllowFileAccessFromFileURLs();
	ref<android::webkit::WebSettings_PluginState> getPluginState();
	void setJavaScriptCanOpenWindowsAutomatically(jboolean p1);
	jboolean getJavaScriptCanOpenWindowsAutomatically();
	void setDefaultTextEncodingName(ref<java::lang::String> p1);
	ref<java::lang::String> getDefaultTextEncodingName();
	void setUserAgentString(ref<java::lang::String> p1);
	ref<java::lang::String> getUserAgentString();
	static ref<java::lang::String> getDefaultUserAgent(ref<android::content::Context> context);
	void setNeedInitialFocus(jboolean p1);
	void setRenderPriority(ref<android::webkit::WebSettings_RenderPriority> p1);
	void setCacheMode(jint p1);
	jint getCacheMode();
	void setMixedContentMode(jint p1);
	jint getMixedContentMode();
	void setOffscreenPreRaster(jboolean p1);
	jboolean getOffscreenPreRaster();
	void setSafeBrowsingEnabled(jboolean p1);
	jboolean getSafeBrowsingEnabled();
	void setDisabledActionModeMenuItems(jint p1);
	jint getDisabledActionModeMenuItems();

protected:

	WebSettings(handle_type h) : base_(h) {}

};

} // namespace android::webkit
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/webkit/WebSettings_LayoutAlgorithm.h>
#include <scapix/java_api/android/webkit/WebSettings_PluginState.h>
#include <scapix/java_api/android/webkit/WebSettings_RenderPriority.h>
#include <scapix/java_api/android/webkit/WebSettings_TextSize.h>
#include <scapix/java_api/android/webkit/WebSettings_ZoomDensity.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::webkit {

inline jint WebSettings::LOAD_CACHE_ELSE_NETWORK_() { return get_static_field<SCAPIX_META_STRING("LOAD_CACHE_ELSE_NETWORK"), jint>(); }
inline jint WebSettings::LOAD_CACHE_ONLY_() { return get_static_field<SCAPIX_META_STRING("LOAD_CACHE_ONLY"), jint>(); }
inline jint WebSettings::LOAD_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("LOAD_DEFAULT"), jint>(); }
inline jint WebSettings::LOAD_NORMAL_() { return get_static_field<SCAPIX_META_STRING("LOAD_NORMAL"), jint>(); }
inline jint WebSettings::LOAD_NO_CACHE_() { return get_static_field<SCAPIX_META_STRING("LOAD_NO_CACHE"), jint>(); }
inline jint WebSettings::MENU_ITEM_NONE_() { return get_static_field<SCAPIX_META_STRING("MENU_ITEM_NONE"), jint>(); }
inline jint WebSettings::MENU_ITEM_PROCESS_TEXT_() { return get_static_field<SCAPIX_META_STRING("MENU_ITEM_PROCESS_TEXT"), jint>(); }
inline jint WebSettings::MENU_ITEM_SHARE_() { return get_static_field<SCAPIX_META_STRING("MENU_ITEM_SHARE"), jint>(); }
inline jint WebSettings::MENU_ITEM_WEB_SEARCH_() { return get_static_field<SCAPIX_META_STRING("MENU_ITEM_WEB_SEARCH"), jint>(); }
inline jint WebSettings::MIXED_CONTENT_ALWAYS_ALLOW_() { return get_static_field<SCAPIX_META_STRING("MIXED_CONTENT_ALWAYS_ALLOW"), jint>(); }
inline jint WebSettings::MIXED_CONTENT_COMPATIBILITY_MODE_() { return get_static_field<SCAPIX_META_STRING("MIXED_CONTENT_COMPATIBILITY_MODE"), jint>(); }
inline jint WebSettings::MIXED_CONTENT_NEVER_ALLOW_() { return get_static_field<SCAPIX_META_STRING("MIXED_CONTENT_NEVER_ALLOW"), jint>(); }
inline ref<WebSettings> WebSettings::new_object() { return base_::new_object(); }
inline void WebSettings::setSupportZoom(jboolean p1) { return call_method<SCAPIX_META_STRING("setSupportZoom"), void>(p1); }
inline jboolean WebSettings::supportZoom() { return call_method<SCAPIX_META_STRING("supportZoom"), jboolean>(); }
inline void WebSettings::setMediaPlaybackRequiresUserGesture(jboolean p1) { return call_method<SCAPIX_META_STRING("setMediaPlaybackRequiresUserGesture"), void>(p1); }
inline jboolean WebSettings::getMediaPlaybackRequiresUserGesture() { return call_method<SCAPIX_META_STRING("getMediaPlaybackRequiresUserGesture"), jboolean>(); }
inline void WebSettings::setBuiltInZoomControls(jboolean p1) { return call_method<SCAPIX_META_STRING("setBuiltInZoomControls"), void>(p1); }
inline jboolean WebSettings::getBuiltInZoomControls() { return call_method<SCAPIX_META_STRING("getBuiltInZoomControls"), jboolean>(); }
inline void WebSettings::setDisplayZoomControls(jboolean p1) { return call_method<SCAPIX_META_STRING("setDisplayZoomControls"), void>(p1); }
inline jboolean WebSettings::getDisplayZoomControls() { return call_method<SCAPIX_META_STRING("getDisplayZoomControls"), jboolean>(); }
inline void WebSettings::setAllowFileAccess(jboolean p1) { return call_method<SCAPIX_META_STRING("setAllowFileAccess"), void>(p1); }
inline jboolean WebSettings::getAllowFileAccess() { return call_method<SCAPIX_META_STRING("getAllowFileAccess"), jboolean>(); }
inline void WebSettings::setAllowContentAccess(jboolean p1) { return call_method<SCAPIX_META_STRING("setAllowContentAccess"), void>(p1); }
inline jboolean WebSettings::getAllowContentAccess() { return call_method<SCAPIX_META_STRING("getAllowContentAccess"), jboolean>(); }
inline void WebSettings::setLoadWithOverviewMode(jboolean p1) { return call_method<SCAPIX_META_STRING("setLoadWithOverviewMode"), void>(p1); }
inline jboolean WebSettings::getLoadWithOverviewMode() { return call_method<SCAPIX_META_STRING("getLoadWithOverviewMode"), jboolean>(); }
inline void WebSettings::setEnableSmoothTransition(jboolean p1) { return call_method<SCAPIX_META_STRING("setEnableSmoothTransition"), void>(p1); }
inline jboolean WebSettings::enableSmoothTransition() { return call_method<SCAPIX_META_STRING("enableSmoothTransition"), jboolean>(); }
inline void WebSettings::setSaveFormData(jboolean p1) { return call_method<SCAPIX_META_STRING("setSaveFormData"), void>(p1); }
inline jboolean WebSettings::getSaveFormData() { return call_method<SCAPIX_META_STRING("getSaveFormData"), jboolean>(); }
inline void WebSettings::setSavePassword(jboolean p1) { return call_method<SCAPIX_META_STRING("setSavePassword"), void>(p1); }
inline jboolean WebSettings::getSavePassword() { return call_method<SCAPIX_META_STRING("getSavePassword"), jboolean>(); }
inline void WebSettings::setTextZoom(jint p1) { return call_method<SCAPIX_META_STRING("setTextZoom"), void>(p1); }
inline jint WebSettings::getTextZoom() { return call_method<SCAPIX_META_STRING("getTextZoom"), jint>(); }
inline void WebSettings::setTextSize(ref<android::webkit::WebSettings_TextSize> t) { return call_method<SCAPIX_META_STRING("setTextSize"), void>(t); }
inline ref<android::webkit::WebSettings_TextSize> WebSettings::getTextSize() { return call_method<SCAPIX_META_STRING("getTextSize"), ref<android::webkit::WebSettings_TextSize>>(); }
inline void WebSettings::setDefaultZoom(ref<android::webkit::WebSettings_ZoomDensity> p1) { return call_method<SCAPIX_META_STRING("setDefaultZoom"), void>(p1); }
inline ref<android::webkit::WebSettings_ZoomDensity> WebSettings::getDefaultZoom() { return call_method<SCAPIX_META_STRING("getDefaultZoom"), ref<android::webkit::WebSettings_ZoomDensity>>(); }
inline void WebSettings::setLightTouchEnabled(jboolean p1) { return call_method<SCAPIX_META_STRING("setLightTouchEnabled"), void>(p1); }
inline jboolean WebSettings::getLightTouchEnabled() { return call_method<SCAPIX_META_STRING("getLightTouchEnabled"), jboolean>(); }
inline void WebSettings::setUseWideViewPort(jboolean p1) { return call_method<SCAPIX_META_STRING("setUseWideViewPort"), void>(p1); }
inline jboolean WebSettings::getUseWideViewPort() { return call_method<SCAPIX_META_STRING("getUseWideViewPort"), jboolean>(); }
inline void WebSettings::setSupportMultipleWindows(jboolean p1) { return call_method<SCAPIX_META_STRING("setSupportMultipleWindows"), void>(p1); }
inline jboolean WebSettings::supportMultipleWindows() { return call_method<SCAPIX_META_STRING("supportMultipleWindows"), jboolean>(); }
inline void WebSettings::setLayoutAlgorithm(ref<android::webkit::WebSettings_LayoutAlgorithm> p1) { return call_method<SCAPIX_META_STRING("setLayoutAlgorithm"), void>(p1); }
inline ref<android::webkit::WebSettings_LayoutAlgorithm> WebSettings::getLayoutAlgorithm() { return call_method<SCAPIX_META_STRING("getLayoutAlgorithm"), ref<android::webkit::WebSettings_LayoutAlgorithm>>(); }
inline void WebSettings::setStandardFontFamily(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setStandardFontFamily"), void>(p1); }
inline ref<java::lang::String> WebSettings::getStandardFontFamily() { return call_method<SCAPIX_META_STRING("getStandardFontFamily"), ref<java::lang::String>>(); }
inline void WebSettings::setFixedFontFamily(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setFixedFontFamily"), void>(p1); }
inline ref<java::lang::String> WebSettings::getFixedFontFamily() { return call_method<SCAPIX_META_STRING("getFixedFontFamily"), ref<java::lang::String>>(); }
inline void WebSettings::setSansSerifFontFamily(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setSansSerifFontFamily"), void>(p1); }
inline ref<java::lang::String> WebSettings::getSansSerifFontFamily() { return call_method<SCAPIX_META_STRING("getSansSerifFontFamily"), ref<java::lang::String>>(); }
inline void WebSettings::setSerifFontFamily(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setSerifFontFamily"), void>(p1); }
inline ref<java::lang::String> WebSettings::getSerifFontFamily() { return call_method<SCAPIX_META_STRING("getSerifFontFamily"), ref<java::lang::String>>(); }
inline void WebSettings::setCursiveFontFamily(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setCursiveFontFamily"), void>(p1); }
inline ref<java::lang::String> WebSettings::getCursiveFontFamily() { return call_method<SCAPIX_META_STRING("getCursiveFontFamily"), ref<java::lang::String>>(); }
inline void WebSettings::setFantasyFontFamily(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setFantasyFontFamily"), void>(p1); }
inline ref<java::lang::String> WebSettings::getFantasyFontFamily() { return call_method<SCAPIX_META_STRING("getFantasyFontFamily"), ref<java::lang::String>>(); }
inline void WebSettings::setMinimumFontSize(jint p1) { return call_method<SCAPIX_META_STRING("setMinimumFontSize"), void>(p1); }
inline jint WebSettings::getMinimumFontSize() { return call_method<SCAPIX_META_STRING("getMinimumFontSize"), jint>(); }
inline void WebSettings::setMinimumLogicalFontSize(jint p1) { return call_method<SCAPIX_META_STRING("setMinimumLogicalFontSize"), void>(p1); }
inline jint WebSettings::getMinimumLogicalFontSize() { return call_method<SCAPIX_META_STRING("getMinimumLogicalFontSize"), jint>(); }
inline void WebSettings::setDefaultFontSize(jint p1) { return call_method<SCAPIX_META_STRING("setDefaultFontSize"), void>(p1); }
inline jint WebSettings::getDefaultFontSize() { return call_method<SCAPIX_META_STRING("getDefaultFontSize"), jint>(); }
inline void WebSettings::setDefaultFixedFontSize(jint p1) { return call_method<SCAPIX_META_STRING("setDefaultFixedFontSize"), void>(p1); }
inline jint WebSettings::getDefaultFixedFontSize() { return call_method<SCAPIX_META_STRING("getDefaultFixedFontSize"), jint>(); }
inline void WebSettings::setLoadsImagesAutomatically(jboolean p1) { return call_method<SCAPIX_META_STRING("setLoadsImagesAutomatically"), void>(p1); }
inline jboolean WebSettings::getLoadsImagesAutomatically() { return call_method<SCAPIX_META_STRING("getLoadsImagesAutomatically"), jboolean>(); }
inline void WebSettings::setBlockNetworkImage(jboolean p1) { return call_method<SCAPIX_META_STRING("setBlockNetworkImage"), void>(p1); }
inline jboolean WebSettings::getBlockNetworkImage() { return call_method<SCAPIX_META_STRING("getBlockNetworkImage"), jboolean>(); }
inline void WebSettings::setBlockNetworkLoads(jboolean p1) { return call_method<SCAPIX_META_STRING("setBlockNetworkLoads"), void>(p1); }
inline jboolean WebSettings::getBlockNetworkLoads() { return call_method<SCAPIX_META_STRING("getBlockNetworkLoads"), jboolean>(); }
inline void WebSettings::setJavaScriptEnabled(jboolean p1) { return call_method<SCAPIX_META_STRING("setJavaScriptEnabled"), void>(p1); }
inline void WebSettings::setAllowUniversalAccessFromFileURLs(jboolean p1) { return call_method<SCAPIX_META_STRING("setAllowUniversalAccessFromFileURLs"), void>(p1); }
inline void WebSettings::setAllowFileAccessFromFileURLs(jboolean p1) { return call_method<SCAPIX_META_STRING("setAllowFileAccessFromFileURLs"), void>(p1); }
inline void WebSettings::setPluginState(ref<android::webkit::WebSettings_PluginState> p1) { return call_method<SCAPIX_META_STRING("setPluginState"), void>(p1); }
inline void WebSettings::setDatabasePath(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setDatabasePath"), void>(p1); }
inline void WebSettings::setGeolocationDatabasePath(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setGeolocationDatabasePath"), void>(p1); }
inline void WebSettings::setAppCacheEnabled(jboolean p1) { return call_method<SCAPIX_META_STRING("setAppCacheEnabled"), void>(p1); }
inline void WebSettings::setAppCachePath(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setAppCachePath"), void>(p1); }
inline void WebSettings::setAppCacheMaxSize(jlong p1) { return call_method<SCAPIX_META_STRING("setAppCacheMaxSize"), void>(p1); }
inline void WebSettings::setDatabaseEnabled(jboolean p1) { return call_method<SCAPIX_META_STRING("setDatabaseEnabled"), void>(p1); }
inline void WebSettings::setDomStorageEnabled(jboolean p1) { return call_method<SCAPIX_META_STRING("setDomStorageEnabled"), void>(p1); }
inline jboolean WebSettings::getDomStorageEnabled() { return call_method<SCAPIX_META_STRING("getDomStorageEnabled"), jboolean>(); }
inline ref<java::lang::String> WebSettings::getDatabasePath() { return call_method<SCAPIX_META_STRING("getDatabasePath"), ref<java::lang::String>>(); }
inline jboolean WebSettings::getDatabaseEnabled() { return call_method<SCAPIX_META_STRING("getDatabaseEnabled"), jboolean>(); }
inline void WebSettings::setGeolocationEnabled(jboolean p1) { return call_method<SCAPIX_META_STRING("setGeolocationEnabled"), void>(p1); }
inline jboolean WebSettings::getJavaScriptEnabled() { return call_method<SCAPIX_META_STRING("getJavaScriptEnabled"), jboolean>(); }
inline jboolean WebSettings::getAllowUniversalAccessFromFileURLs() { return call_method<SCAPIX_META_STRING("getAllowUniversalAccessFromFileURLs"), jboolean>(); }
inline jboolean WebSettings::getAllowFileAccessFromFileURLs() { return call_method<SCAPIX_META_STRING("getAllowFileAccessFromFileURLs"), jboolean>(); }
inline ref<android::webkit::WebSettings_PluginState> WebSettings::getPluginState() { return call_method<SCAPIX_META_STRING("getPluginState"), ref<android::webkit::WebSettings_PluginState>>(); }
inline void WebSettings::setJavaScriptCanOpenWindowsAutomatically(jboolean p1) { return call_method<SCAPIX_META_STRING("setJavaScriptCanOpenWindowsAutomatically"), void>(p1); }
inline jboolean WebSettings::getJavaScriptCanOpenWindowsAutomatically() { return call_method<SCAPIX_META_STRING("getJavaScriptCanOpenWindowsAutomatically"), jboolean>(); }
inline void WebSettings::setDefaultTextEncodingName(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setDefaultTextEncodingName"), void>(p1); }
inline ref<java::lang::String> WebSettings::getDefaultTextEncodingName() { return call_method<SCAPIX_META_STRING("getDefaultTextEncodingName"), ref<java::lang::String>>(); }
inline void WebSettings::setUserAgentString(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("setUserAgentString"), void>(p1); }
inline ref<java::lang::String> WebSettings::getUserAgentString() { return call_method<SCAPIX_META_STRING("getUserAgentString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> WebSettings::getDefaultUserAgent(ref<android::content::Context> context) { return call_static_method<SCAPIX_META_STRING("getDefaultUserAgent"), ref<java::lang::String>>(context); }
inline void WebSettings::setNeedInitialFocus(jboolean p1) { return call_method<SCAPIX_META_STRING("setNeedInitialFocus"), void>(p1); }
inline void WebSettings::setRenderPriority(ref<android::webkit::WebSettings_RenderPriority> p1) { return call_method<SCAPIX_META_STRING("setRenderPriority"), void>(p1); }
inline void WebSettings::setCacheMode(jint p1) { return call_method<SCAPIX_META_STRING("setCacheMode"), void>(p1); }
inline jint WebSettings::getCacheMode() { return call_method<SCAPIX_META_STRING("getCacheMode"), jint>(); }
inline void WebSettings::setMixedContentMode(jint p1) { return call_method<SCAPIX_META_STRING("setMixedContentMode"), void>(p1); }
inline jint WebSettings::getMixedContentMode() { return call_method<SCAPIX_META_STRING("getMixedContentMode"), jint>(); }
inline void WebSettings::setOffscreenPreRaster(jboolean p1) { return call_method<SCAPIX_META_STRING("setOffscreenPreRaster"), void>(p1); }
inline jboolean WebSettings::getOffscreenPreRaster() { return call_method<SCAPIX_META_STRING("getOffscreenPreRaster"), jboolean>(); }
inline void WebSettings::setSafeBrowsingEnabled(jboolean p1) { return call_method<SCAPIX_META_STRING("setSafeBrowsingEnabled"), void>(p1); }
inline jboolean WebSettings::getSafeBrowsingEnabled() { return call_method<SCAPIX_META_STRING("getSafeBrowsingEnabled"), jboolean>(); }
inline void WebSettings::setDisabledActionModeMenuItems(jint p1) { return call_method<SCAPIX_META_STRING("setDisabledActionModeMenuItems"), void>(p1); }
inline jint WebSettings::getDisabledActionModeMenuItems() { return call_method<SCAPIX_META_STRING("getDisabledActionModeMenuItems"), jint>(); }

} // namespace android::webkit
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WEBKIT_WEBSETTINGS_H
