// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_WEBKIT_URLUTIL_H
#define SCAPIX_ANDROID_WEBKIT_URLUTIL_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace android::webkit {

class URLUtil : public object_base<SCAPIX_META_STRING("android/webkit/URLUtil"),
	java::lang::Object>
{
public:

	static ref<URLUtil> new_object();
	static ref<java::lang::String> guessUrl(ref<java::lang::String> inUrl);
	static ref<java::lang::String> composeSearchUrl(ref<java::lang::String> inQuery, ref<java::lang::String> template_, ref<java::lang::String> queryPlaceHolder);
	static ref<link::java::array<jbyte>> decode(ref<link::java::array<jbyte>> url);
	static jboolean isAssetUrl(ref<java::lang::String> url);
	static jboolean isCookielessProxyUrl(ref<java::lang::String> url);
	static jboolean isFileUrl(ref<java::lang::String> url);
	static jboolean isAboutUrl(ref<java::lang::String> url);
	static jboolean isDataUrl(ref<java::lang::String> url);
	static jboolean isJavaScriptUrl(ref<java::lang::String> url);
	static jboolean isHttpUrl(ref<java::lang::String> url);
	static jboolean isHttpsUrl(ref<java::lang::String> url);
	static jboolean isNetworkUrl(ref<java::lang::String> url);
	static jboolean isContentUrl(ref<java::lang::String> url);
	static jboolean isValidUrl(ref<java::lang::String> url);
	static ref<java::lang::String> stripAnchor(ref<java::lang::String> url);
	static ref<java::lang::String> guessFileName(ref<java::lang::String> url, ref<java::lang::String> contentDisposition, ref<java::lang::String> mimeType);

protected:

	URLUtil(handle_type h) : base_(h) {}

};

} // namespace android::webkit
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::webkit {

inline ref<URLUtil> URLUtil::new_object() { return base_::new_object(); }
inline ref<java::lang::String> URLUtil::guessUrl(ref<java::lang::String> inUrl) { return call_static_method<SCAPIX_META_STRING("guessUrl"), ref<java::lang::String>>(inUrl); }
inline ref<java::lang::String> URLUtil::composeSearchUrl(ref<java::lang::String> inQuery, ref<java::lang::String> template_, ref<java::lang::String> queryPlaceHolder) { return call_static_method<SCAPIX_META_STRING("composeSearchUrl"), ref<java::lang::String>>(inQuery, template_, queryPlaceHolder); }
inline ref<link::java::array<jbyte>> URLUtil::decode(ref<link::java::array<jbyte>> url) { return call_static_method<SCAPIX_META_STRING("decode"), ref<link::java::array<jbyte>>>(url); }
inline jboolean URLUtil::isAssetUrl(ref<java::lang::String> url) { return call_static_method<SCAPIX_META_STRING("isAssetUrl"), jboolean>(url); }
inline jboolean URLUtil::isCookielessProxyUrl(ref<java::lang::String> url) { return call_static_method<SCAPIX_META_STRING("isCookielessProxyUrl"), jboolean>(url); }
inline jboolean URLUtil::isFileUrl(ref<java::lang::String> url) { return call_static_method<SCAPIX_META_STRING("isFileUrl"), jboolean>(url); }
inline jboolean URLUtil::isAboutUrl(ref<java::lang::String> url) { return call_static_method<SCAPIX_META_STRING("isAboutUrl"), jboolean>(url); }
inline jboolean URLUtil::isDataUrl(ref<java::lang::String> url) { return call_static_method<SCAPIX_META_STRING("isDataUrl"), jboolean>(url); }
inline jboolean URLUtil::isJavaScriptUrl(ref<java::lang::String> url) { return call_static_method<SCAPIX_META_STRING("isJavaScriptUrl"), jboolean>(url); }
inline jboolean URLUtil::isHttpUrl(ref<java::lang::String> url) { return call_static_method<SCAPIX_META_STRING("isHttpUrl"), jboolean>(url); }
inline jboolean URLUtil::isHttpsUrl(ref<java::lang::String> url) { return call_static_method<SCAPIX_META_STRING("isHttpsUrl"), jboolean>(url); }
inline jboolean URLUtil::isNetworkUrl(ref<java::lang::String> url) { return call_static_method<SCAPIX_META_STRING("isNetworkUrl"), jboolean>(url); }
inline jboolean URLUtil::isContentUrl(ref<java::lang::String> url) { return call_static_method<SCAPIX_META_STRING("isContentUrl"), jboolean>(url); }
inline jboolean URLUtil::isValidUrl(ref<java::lang::String> url) { return call_static_method<SCAPIX_META_STRING("isValidUrl"), jboolean>(url); }
inline ref<java::lang::String> URLUtil::stripAnchor(ref<java::lang::String> url) { return call_static_method<SCAPIX_META_STRING("stripAnchor"), ref<java::lang::String>>(url); }
inline ref<java::lang::String> URLUtil::guessFileName(ref<java::lang::String> url, ref<java::lang::String> contentDisposition, ref<java::lang::String> mimeType) { return call_static_method<SCAPIX_META_STRING("guessFileName"), ref<java::lang::String>>(url, contentDisposition, mimeType); }

} // namespace android::webkit
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_WEBKIT_URLUTIL_H
