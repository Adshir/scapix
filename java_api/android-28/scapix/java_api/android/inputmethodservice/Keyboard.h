// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_INPUTMETHODSERVICE_KEYBOARD_H
#define SCAPIX_ANDROID_INPUTMETHODSERVICE_KEYBOARD_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace java::lang { class CharSequence; }
namespace java::util { class List; }
namespace android::inputmethodservice { class Keyboard_Row; }
namespace android::inputmethodservice { class Keyboard_Key; }

namespace android::inputmethodservice {

class Keyboard : public object_base<SCAPIX_META_STRING("android/inputmethodservice/Keyboard"),
	java::lang::Object>
{
public:

	using Row = Keyboard_Row;
	using Key = Keyboard_Key;

	static jint EDGE_BOTTOM_();
	static jint EDGE_LEFT_();
	static jint EDGE_RIGHT_();
	static jint EDGE_TOP_();
	static jint KEYCODE_ALT_();
	static jint KEYCODE_CANCEL_();
	static jint KEYCODE_DELETE_();
	static jint KEYCODE_DONE_();
	static jint KEYCODE_MODE_CHANGE_();
	static jint KEYCODE_SHIFT_();

	static ref<Keyboard> new_object(ref<android::content::Context> context, jint xmlLayoutResId);
	static ref<Keyboard> new_object(ref<android::content::Context> context, jint xmlLayoutResId, jint modeId, jint width, jint height);
	static ref<Keyboard> new_object(ref<android::content::Context> context, jint xmlLayoutResId, jint modeId);
	static ref<Keyboard> new_object(ref<android::content::Context> context, jint layoutTemplateResId, ref<java::lang::CharSequence> characters, jint columns, jint horizontalPadding);
	ref<java::util::List> getKeys();
	ref<java::util::List> getModifierKeys();
	jint getHeight();
	jint getMinWidth();
	jboolean setShifted(jboolean shiftState);
	jboolean isShifted();
	jint getShiftKeyIndex();
	ref<link::java::array<jint>> getNearestKeys(jint x, jint y);

protected:

	Keyboard(handle_type h) : base_(h) {}

};

} // namespace android::inputmethodservice
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::inputmethodservice {

inline jint Keyboard::EDGE_BOTTOM_() { return get_static_field<SCAPIX_META_STRING("EDGE_BOTTOM"), jint>(); }
inline jint Keyboard::EDGE_LEFT_() { return get_static_field<SCAPIX_META_STRING("EDGE_LEFT"), jint>(); }
inline jint Keyboard::EDGE_RIGHT_() { return get_static_field<SCAPIX_META_STRING("EDGE_RIGHT"), jint>(); }
inline jint Keyboard::EDGE_TOP_() { return get_static_field<SCAPIX_META_STRING("EDGE_TOP"), jint>(); }
inline jint Keyboard::KEYCODE_ALT_() { return get_static_field<SCAPIX_META_STRING("KEYCODE_ALT"), jint>(); }
inline jint Keyboard::KEYCODE_CANCEL_() { return get_static_field<SCAPIX_META_STRING("KEYCODE_CANCEL"), jint>(); }
inline jint Keyboard::KEYCODE_DELETE_() { return get_static_field<SCAPIX_META_STRING("KEYCODE_DELETE"), jint>(); }
inline jint Keyboard::KEYCODE_DONE_() { return get_static_field<SCAPIX_META_STRING("KEYCODE_DONE"), jint>(); }
inline jint Keyboard::KEYCODE_MODE_CHANGE_() { return get_static_field<SCAPIX_META_STRING("KEYCODE_MODE_CHANGE"), jint>(); }
inline jint Keyboard::KEYCODE_SHIFT_() { return get_static_field<SCAPIX_META_STRING("KEYCODE_SHIFT"), jint>(); }
inline ref<Keyboard> Keyboard::new_object(ref<android::content::Context> context, jint xmlLayoutResId) { return base_::new_object(context, xmlLayoutResId); }
inline ref<Keyboard> Keyboard::new_object(ref<android::content::Context> context, jint xmlLayoutResId, jint modeId, jint width, jint height) { return base_::new_object(context, xmlLayoutResId, modeId, width, height); }
inline ref<Keyboard> Keyboard::new_object(ref<android::content::Context> context, jint xmlLayoutResId, jint modeId) { return base_::new_object(context, xmlLayoutResId, modeId); }
inline ref<Keyboard> Keyboard::new_object(ref<android::content::Context> context, jint layoutTemplateResId, ref<java::lang::CharSequence> characters, jint columns, jint horizontalPadding) { return base_::new_object(context, layoutTemplateResId, characters, columns, horizontalPadding); }
inline ref<java::util::List> Keyboard::getKeys() { return call_method<SCAPIX_META_STRING("getKeys"), ref<java::util::List>>(); }
inline ref<java::util::List> Keyboard::getModifierKeys() { return call_method<SCAPIX_META_STRING("getModifierKeys"), ref<java::util::List>>(); }
inline jint Keyboard::getHeight() { return call_method<SCAPIX_META_STRING("getHeight"), jint>(); }
inline jint Keyboard::getMinWidth() { return call_method<SCAPIX_META_STRING("getMinWidth"), jint>(); }
inline jboolean Keyboard::setShifted(jboolean shiftState) { return call_method<SCAPIX_META_STRING("setShifted"), jboolean>(shiftState); }
inline jboolean Keyboard::isShifted() { return call_method<SCAPIX_META_STRING("isShifted"), jboolean>(); }
inline jint Keyboard::getShiftKeyIndex() { return call_method<SCAPIX_META_STRING("getShiftKeyIndex"), jint>(); }
inline ref<link::java::array<jint>> Keyboard::getNearestKeys(jint x, jint y) { return call_method<SCAPIX_META_STRING("getNearestKeys"), ref<link::java::array<jint>>>(x, y); }

} // namespace android::inputmethodservice
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_INPUTMETHODSERVICE_KEYBOARD_H
