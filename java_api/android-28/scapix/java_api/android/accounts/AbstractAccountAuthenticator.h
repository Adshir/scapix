// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_ACCOUNTS_ABSTRACTACCOUNTAUTHENTICATOR_H
#define SCAPIX_ANDROID_ACCOUNTS_ABSTRACTACCOUNTAUTHENTICATOR_H

namespace scapix::java_api {

namespace android::accounts { class Account; }
namespace android::accounts { class AccountAuthenticatorResponse; }
namespace android::content { class Context; }
namespace android::os { class Bundle; }
namespace android::os { class IBinder; }
namespace java::lang { class String; }

namespace android::accounts {

class AbstractAccountAuthenticator : public object_base<SCAPIX_META_STRING("android/accounts/AbstractAccountAuthenticator"),
	java::lang::Object>
{
public:

	static ref<java::lang::String> KEY_CUSTOM_TOKEN_EXPIRY_();

	static ref<AbstractAccountAuthenticator> new_object(ref<android::content::Context> context);
	ref<android::os::IBinder> getIBinder();
	ref<android::os::Bundle> editProperties(ref<android::accounts::AccountAuthenticatorResponse> p1, ref<java::lang::String> p2);
	ref<android::os::Bundle> addAccount(ref<android::accounts::AccountAuthenticatorResponse> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<link::java::array<java::lang::String>> p4, ref<android::os::Bundle> p5);
	ref<android::os::Bundle> confirmCredentials(ref<android::accounts::AccountAuthenticatorResponse> p1, ref<android::accounts::Account> p2, ref<android::os::Bundle> p3);
	ref<android::os::Bundle> getAuthToken(ref<android::accounts::AccountAuthenticatorResponse> p1, ref<android::accounts::Account> p2, ref<java::lang::String> p3, ref<android::os::Bundle> p4);
	ref<java::lang::String> getAuthTokenLabel(ref<java::lang::String> p1);
	ref<android::os::Bundle> updateCredentials(ref<android::accounts::AccountAuthenticatorResponse> p1, ref<android::accounts::Account> p2, ref<java::lang::String> p3, ref<android::os::Bundle> p4);
	ref<android::os::Bundle> hasFeatures(ref<android::accounts::AccountAuthenticatorResponse> p1, ref<android::accounts::Account> p2, ref<link::java::array<java::lang::String>> p3);
	ref<android::os::Bundle> getAccountRemovalAllowed(ref<android::accounts::AccountAuthenticatorResponse> response, ref<android::accounts::Account> account);
	ref<android::os::Bundle> getAccountCredentialsForCloning(ref<android::accounts::AccountAuthenticatorResponse> response, ref<android::accounts::Account> account);
	ref<android::os::Bundle> addAccountFromCredentials(ref<android::accounts::AccountAuthenticatorResponse> response, ref<android::accounts::Account> account, ref<android::os::Bundle> accountCredentials);
	ref<android::os::Bundle> startAddAccountSession(ref<android::accounts::AccountAuthenticatorResponse> response, ref<java::lang::String> accountType, ref<java::lang::String> authTokenType, ref<link::java::array<java::lang::String>> requiredFeatures, ref<android::os::Bundle> options);
	ref<android::os::Bundle> startUpdateCredentialsSession(ref<android::accounts::AccountAuthenticatorResponse> response, ref<android::accounts::Account> account, ref<java::lang::String> authTokenType, ref<android::os::Bundle> options);
	ref<android::os::Bundle> finishSession(ref<android::accounts::AccountAuthenticatorResponse> response, ref<java::lang::String> accountType, ref<android::os::Bundle> sessionBundle);
	ref<android::os::Bundle> isCredentialsUpdateSuggested(ref<android::accounts::AccountAuthenticatorResponse> response, ref<android::accounts::Account> account, ref<java::lang::String> statusToken);

protected:

	AbstractAccountAuthenticator(handle_type h) : base_(h) {}

};

} // namespace android::accounts
} // namespace scapix::java_api

#include <scapix/java_api/android/accounts/Account.h>
#include <scapix/java_api/android/accounts/AccountAuthenticatorResponse.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::accounts {

inline ref<java::lang::String> AbstractAccountAuthenticator::KEY_CUSTOM_TOKEN_EXPIRY_() { return get_static_field<SCAPIX_META_STRING("KEY_CUSTOM_TOKEN_EXPIRY"), ref<java::lang::String>>(); }
inline ref<AbstractAccountAuthenticator> AbstractAccountAuthenticator::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<android::os::IBinder> AbstractAccountAuthenticator::getIBinder() { return call_method<SCAPIX_META_STRING("getIBinder"), ref<android::os::IBinder>>(); }
inline ref<android::os::Bundle> AbstractAccountAuthenticator::editProperties(ref<android::accounts::AccountAuthenticatorResponse> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("editProperties"), ref<android::os::Bundle>>(p1, p2); }
inline ref<android::os::Bundle> AbstractAccountAuthenticator::addAccount(ref<android::accounts::AccountAuthenticatorResponse> p1, ref<java::lang::String> p2, ref<java::lang::String> p3, ref<link::java::array<java::lang::String>> p4, ref<android::os::Bundle> p5) { return call_method<SCAPIX_META_STRING("addAccount"), ref<android::os::Bundle>>(p1, p2, p3, p4, p5); }
inline ref<android::os::Bundle> AbstractAccountAuthenticator::confirmCredentials(ref<android::accounts::AccountAuthenticatorResponse> p1, ref<android::accounts::Account> p2, ref<android::os::Bundle> p3) { return call_method<SCAPIX_META_STRING("confirmCredentials"), ref<android::os::Bundle>>(p1, p2, p3); }
inline ref<android::os::Bundle> AbstractAccountAuthenticator::getAuthToken(ref<android::accounts::AccountAuthenticatorResponse> p1, ref<android::accounts::Account> p2, ref<java::lang::String> p3, ref<android::os::Bundle> p4) { return call_method<SCAPIX_META_STRING("getAuthToken"), ref<android::os::Bundle>>(p1, p2, p3, p4); }
inline ref<java::lang::String> AbstractAccountAuthenticator::getAuthTokenLabel(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getAuthTokenLabel"), ref<java::lang::String>>(p1); }
inline ref<android::os::Bundle> AbstractAccountAuthenticator::updateCredentials(ref<android::accounts::AccountAuthenticatorResponse> p1, ref<android::accounts::Account> p2, ref<java::lang::String> p3, ref<android::os::Bundle> p4) { return call_method<SCAPIX_META_STRING("updateCredentials"), ref<android::os::Bundle>>(p1, p2, p3, p4); }
inline ref<android::os::Bundle> AbstractAccountAuthenticator::hasFeatures(ref<android::accounts::AccountAuthenticatorResponse> p1, ref<android::accounts::Account> p2, ref<link::java::array<java::lang::String>> p3) { return call_method<SCAPIX_META_STRING("hasFeatures"), ref<android::os::Bundle>>(p1, p2, p3); }
inline ref<android::os::Bundle> AbstractAccountAuthenticator::getAccountRemovalAllowed(ref<android::accounts::AccountAuthenticatorResponse> response, ref<android::accounts::Account> account) { return call_method<SCAPIX_META_STRING("getAccountRemovalAllowed"), ref<android::os::Bundle>>(response, account); }
inline ref<android::os::Bundle> AbstractAccountAuthenticator::getAccountCredentialsForCloning(ref<android::accounts::AccountAuthenticatorResponse> response, ref<android::accounts::Account> account) { return call_method<SCAPIX_META_STRING("getAccountCredentialsForCloning"), ref<android::os::Bundle>>(response, account); }
inline ref<android::os::Bundle> AbstractAccountAuthenticator::addAccountFromCredentials(ref<android::accounts::AccountAuthenticatorResponse> response, ref<android::accounts::Account> account, ref<android::os::Bundle> accountCredentials) { return call_method<SCAPIX_META_STRING("addAccountFromCredentials"), ref<android::os::Bundle>>(response, account, accountCredentials); }
inline ref<android::os::Bundle> AbstractAccountAuthenticator::startAddAccountSession(ref<android::accounts::AccountAuthenticatorResponse> response, ref<java::lang::String> accountType, ref<java::lang::String> authTokenType, ref<link::java::array<java::lang::String>> requiredFeatures, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startAddAccountSession"), ref<android::os::Bundle>>(response, accountType, authTokenType, requiredFeatures, options); }
inline ref<android::os::Bundle> AbstractAccountAuthenticator::startUpdateCredentialsSession(ref<android::accounts::AccountAuthenticatorResponse> response, ref<android::accounts::Account> account, ref<java::lang::String> authTokenType, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("startUpdateCredentialsSession"), ref<android::os::Bundle>>(response, account, authTokenType, options); }
inline ref<android::os::Bundle> AbstractAccountAuthenticator::finishSession(ref<android::accounts::AccountAuthenticatorResponse> response, ref<java::lang::String> accountType, ref<android::os::Bundle> sessionBundle) { return call_method<SCAPIX_META_STRING("finishSession"), ref<android::os::Bundle>>(response, accountType, sessionBundle); }
inline ref<android::os::Bundle> AbstractAccountAuthenticator::isCredentialsUpdateSuggested(ref<android::accounts::AccountAuthenticatorResponse> response, ref<android::accounts::Account> account, ref<java::lang::String> statusToken) { return call_method<SCAPIX_META_STRING("isCredentialsUpdateSuggested"), ref<android::os::Bundle>>(response, account, statusToken); }

} // namespace android::accounts
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_ACCOUNTS_ABSTRACTACCOUNTAUTHENTICATOR_H
