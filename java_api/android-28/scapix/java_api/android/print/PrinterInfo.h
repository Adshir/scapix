// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_PRINT_PRINTERINFO_H
#define SCAPIX_ANDROID_PRINT_PRINTERINFO_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace android::print { class PrinterCapabilitiesInfo; }
namespace android::print { class PrinterId; }
namespace java::lang { class String; }
namespace android::print { class PrinterInfo_Builder; }

namespace android::print {

class PrinterInfo : public object_base<SCAPIX_META_STRING("android/print/PrinterInfo"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = PrinterInfo_Builder;

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint STATUS_BUSY_();
	static jint STATUS_IDLE_();
	static jint STATUS_UNAVAILABLE_();

	ref<android::print::PrinterId> getId();
	ref<java::lang::String> getName();
	jint getStatus();
	ref<java::lang::String> getDescription();
	ref<android::print::PrinterCapabilitiesInfo> getCapabilities();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> parcel, jint flags);
	jint hashCode();
	jboolean equals(ref<java::lang::Object> obj);
	ref<java::lang::String> toString();

protected:

	PrinterInfo(handle_type h) : base_(h) {}

};

} // namespace android::print
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/print/PrinterCapabilitiesInfo.h>
#include <scapix/java_api/android/print/PrinterId.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::print {

inline ref<android::os::Parcelable_Creator> PrinterInfo::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint PrinterInfo::STATUS_BUSY_() { return get_static_field<SCAPIX_META_STRING("STATUS_BUSY"), jint>(); }
inline jint PrinterInfo::STATUS_IDLE_() { return get_static_field<SCAPIX_META_STRING("STATUS_IDLE"), jint>(); }
inline jint PrinterInfo::STATUS_UNAVAILABLE_() { return get_static_field<SCAPIX_META_STRING("STATUS_UNAVAILABLE"), jint>(); }
inline ref<android::print::PrinterId> PrinterInfo::getId() { return call_method<SCAPIX_META_STRING("getId"), ref<android::print::PrinterId>>(); }
inline ref<java::lang::String> PrinterInfo::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline jint PrinterInfo::getStatus() { return call_method<SCAPIX_META_STRING("getStatus"), jint>(); }
inline ref<java::lang::String> PrinterInfo::getDescription() { return call_method<SCAPIX_META_STRING("getDescription"), ref<java::lang::String>>(); }
inline ref<android::print::PrinterCapabilitiesInfo> PrinterInfo::getCapabilities() { return call_method<SCAPIX_META_STRING("getCapabilities"), ref<android::print::PrinterCapabilitiesInfo>>(); }
inline jint PrinterInfo::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void PrinterInfo::writeToParcel(ref<android::os::Parcel> parcel, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(parcel, flags); }
inline jint PrinterInfo::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean PrinterInfo::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline ref<java::lang::String> PrinterInfo::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::print
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_PRINT_PRINTERINFO_H
