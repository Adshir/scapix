// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/android/text/GetChars.h>
#include <scapix/java_api/android/text/Spannable.h>
#include <scapix/java_api/android/text/Editable.h>
#include <scapix/java_api/java/lang/Appendable.h>

#ifndef SCAPIX_ANDROID_TEXT_SPANNABLESTRINGBUILDER_H
#define SCAPIX_ANDROID_TEXT_SPANNABLESTRINGBUILDER_H

namespace scapix::java_api {

namespace android::graphics { class Paint; }
namespace android::text { class InputFilter; }
namespace java::lang { class Class; }
namespace java::lang { class String; }

namespace android::text {

class SpannableStringBuilder : public object_base<SCAPIX_META_STRING("android/text/SpannableStringBuilder"),
	java::lang::Object,
	java::lang::CharSequence,
	android::text::GetChars,
	android::text::Spannable,
	android::text::Editable,
	java::lang::Appendable>
{
public:

	static ref<SpannableStringBuilder> new_object();
	static ref<SpannableStringBuilder> new_object(ref<java::lang::CharSequence> text);
	static ref<SpannableStringBuilder> new_object(ref<java::lang::CharSequence> text, jint start, jint end);
	static ref<android::text::SpannableStringBuilder> valueOf(ref<java::lang::CharSequence> source);
	jchar charAt(jint where);
	jint length();
	ref<android::text::SpannableStringBuilder> insert(jint where, ref<java::lang::CharSequence> tb, jint start, jint end);
	ref<android::text::SpannableStringBuilder> insert(jint where, ref<java::lang::CharSequence> tb);
	ref<android::text::SpannableStringBuilder> delete_(jint start, jint end);
	void clear();
	void clearSpans();
	ref<android::text::SpannableStringBuilder> append(ref<java::lang::CharSequence> text);
	ref<android::text::SpannableStringBuilder> append(ref<java::lang::CharSequence> text, ref<java::lang::Object> what, jint flags);
	ref<android::text::SpannableStringBuilder> append(ref<java::lang::CharSequence> text, jint start, jint end);
	ref<android::text::SpannableStringBuilder> append(jchar text);
	ref<android::text::SpannableStringBuilder> replace(jint start, jint end, ref<java::lang::CharSequence> tb);
	ref<android::text::SpannableStringBuilder> replace(jint start, jint end, ref<java::lang::CharSequence> tb, jint tbstart, jint tbend);
	void setSpan(ref<java::lang::Object> what, jint start, jint end, jint flags);
	void removeSpan(ref<java::lang::Object> what);
	jint getSpanStart(ref<java::lang::Object> what);
	jint getSpanEnd(ref<java::lang::Object> what);
	jint getSpanFlags(ref<java::lang::Object> what);
	ref<link::java::array<java::lang::Object>> getSpans(jint queryStart, jint queryEnd, ref<java::lang::Class> kind);
	jint nextSpanTransition(jint start, jint limit, ref<java::lang::Class> kind);
	ref<java::lang::CharSequence> subSequence(jint start, jint end);
	void getChars(jint start, jint end, ref<link::java::array<jchar>> dest, jint destoff);
	ref<java::lang::String> toString();
	jint getTextWatcherDepth();
	jint getTextRunCursor(jint contextStart, jint contextEnd, jint dir, jint offset, jint cursorOpt, ref<android::graphics::Paint> p);
	void setFilters(ref<link::java::array<android::text::InputFilter>> filters);
	ref<link::java::array<android::text::InputFilter>> getFilters();
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();

protected:

	SpannableStringBuilder(handle_type h) : base_(h) {}

};

} // namespace android::text
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Paint.h>
#include <scapix/java_api/android/text/InputFilter.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::text {

inline ref<SpannableStringBuilder> SpannableStringBuilder::new_object() { return base_::new_object(); }
inline ref<SpannableStringBuilder> SpannableStringBuilder::new_object(ref<java::lang::CharSequence> text) { return base_::new_object(text); }
inline ref<SpannableStringBuilder> SpannableStringBuilder::new_object(ref<java::lang::CharSequence> text, jint start, jint end) { return base_::new_object(text, start, end); }
inline ref<android::text::SpannableStringBuilder> SpannableStringBuilder::valueOf(ref<java::lang::CharSequence> source) { return call_static_method<SCAPIX_META_STRING("valueOf"), ref<android::text::SpannableStringBuilder>>(source); }
inline jchar SpannableStringBuilder::charAt(jint where) { return call_method<SCAPIX_META_STRING("charAt"), jchar>(where); }
inline jint SpannableStringBuilder::length() { return call_method<SCAPIX_META_STRING("length"), jint>(); }
inline ref<android::text::SpannableStringBuilder> SpannableStringBuilder::insert(jint where, ref<java::lang::CharSequence> tb, jint start, jint end) { return call_method<SCAPIX_META_STRING("insert"), ref<android::text::SpannableStringBuilder>>(where, tb, start, end); }
inline ref<android::text::SpannableStringBuilder> SpannableStringBuilder::insert(jint where, ref<java::lang::CharSequence> tb) { return call_method<SCAPIX_META_STRING("insert"), ref<android::text::SpannableStringBuilder>>(where, tb); }
inline ref<android::text::SpannableStringBuilder> SpannableStringBuilder::delete_(jint start, jint end) { return call_method<SCAPIX_META_STRING("delete"), ref<android::text::SpannableStringBuilder>>(start, end); }
inline void SpannableStringBuilder::clear() { return call_method<SCAPIX_META_STRING("clear"), void>(); }
inline void SpannableStringBuilder::clearSpans() { return call_method<SCAPIX_META_STRING("clearSpans"), void>(); }
inline ref<android::text::SpannableStringBuilder> SpannableStringBuilder::append(ref<java::lang::CharSequence> text) { return call_method<SCAPIX_META_STRING("append"), ref<android::text::SpannableStringBuilder>>(text); }
inline ref<android::text::SpannableStringBuilder> SpannableStringBuilder::append(ref<java::lang::CharSequence> text, ref<java::lang::Object> what, jint flags) { return call_method<SCAPIX_META_STRING("append"), ref<android::text::SpannableStringBuilder>>(text, what, flags); }
inline ref<android::text::SpannableStringBuilder> SpannableStringBuilder::append(ref<java::lang::CharSequence> text, jint start, jint end) { return call_method<SCAPIX_META_STRING("append"), ref<android::text::SpannableStringBuilder>>(text, start, end); }
inline ref<android::text::SpannableStringBuilder> SpannableStringBuilder::append(jchar text) { return call_method<SCAPIX_META_STRING("append"), ref<android::text::SpannableStringBuilder>>(text); }
inline ref<android::text::SpannableStringBuilder> SpannableStringBuilder::replace(jint start, jint end, ref<java::lang::CharSequence> tb) { return call_method<SCAPIX_META_STRING("replace"), ref<android::text::SpannableStringBuilder>>(start, end, tb); }
inline ref<android::text::SpannableStringBuilder> SpannableStringBuilder::replace(jint start, jint end, ref<java::lang::CharSequence> tb, jint tbstart, jint tbend) { return call_method<SCAPIX_META_STRING("replace"), ref<android::text::SpannableStringBuilder>>(start, end, tb, tbstart, tbend); }
inline void SpannableStringBuilder::setSpan(ref<java::lang::Object> what, jint start, jint end, jint flags) { return call_method<SCAPIX_META_STRING("setSpan"), void>(what, start, end, flags); }
inline void SpannableStringBuilder::removeSpan(ref<java::lang::Object> what) { return call_method<SCAPIX_META_STRING("removeSpan"), void>(what); }
inline jint SpannableStringBuilder::getSpanStart(ref<java::lang::Object> what) { return call_method<SCAPIX_META_STRING("getSpanStart"), jint>(what); }
inline jint SpannableStringBuilder::getSpanEnd(ref<java::lang::Object> what) { return call_method<SCAPIX_META_STRING("getSpanEnd"), jint>(what); }
inline jint SpannableStringBuilder::getSpanFlags(ref<java::lang::Object> what) { return call_method<SCAPIX_META_STRING("getSpanFlags"), jint>(what); }
inline ref<link::java::array<java::lang::Object>> SpannableStringBuilder::getSpans(jint queryStart, jint queryEnd, ref<java::lang::Class> kind) { return call_method<SCAPIX_META_STRING("getSpans"), ref<link::java::array<java::lang::Object>>>(queryStart, queryEnd, kind); }
inline jint SpannableStringBuilder::nextSpanTransition(jint start, jint limit, ref<java::lang::Class> kind) { return call_method<SCAPIX_META_STRING("nextSpanTransition"), jint>(start, limit, kind); }
inline ref<java::lang::CharSequence> SpannableStringBuilder::subSequence(jint start, jint end) { return call_method<SCAPIX_META_STRING("subSequence"), ref<java::lang::CharSequence>>(start, end); }
inline void SpannableStringBuilder::getChars(jint start, jint end, ref<link::java::array<jchar>> dest, jint destoff) { return call_method<SCAPIX_META_STRING("getChars"), void>(start, end, dest, destoff); }
inline ref<java::lang::String> SpannableStringBuilder::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint SpannableStringBuilder::getTextWatcherDepth() { return call_method<SCAPIX_META_STRING("getTextWatcherDepth"), jint>(); }
inline jint SpannableStringBuilder::getTextRunCursor(jint contextStart, jint contextEnd, jint dir, jint offset, jint cursorOpt, ref<android::graphics::Paint> p) { return call_method<SCAPIX_META_STRING("getTextRunCursor"), jint>(contextStart, contextEnd, dir, offset, cursorOpt, p); }
inline void SpannableStringBuilder::setFilters(ref<link::java::array<android::text::InputFilter>> filters) { return call_method<SCAPIX_META_STRING("setFilters"), void>(filters); }
inline ref<link::java::array<android::text::InputFilter>> SpannableStringBuilder::getFilters() { return call_method<SCAPIX_META_STRING("getFilters"), ref<link::java::array<android::text::InputFilter>>>(); }
inline jboolean SpannableStringBuilder::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint SpannableStringBuilder::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }

} // namespace android::text
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TEXT_SPANNABLESTRINGBUILDER_H
