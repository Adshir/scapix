// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/text/style/MetricAffectingSpan.h>
#include <scapix/java_api/android/text/ParcelableSpan.h>

#ifndef SCAPIX_ANDROID_TEXT_STYLE_TYPEFACESPAN_H
#define SCAPIX_ANDROID_TEXT_STYLE_TYPEFACESPAN_H

namespace scapix::java_api {

namespace android::graphics { class Typeface; }
namespace android::os { class Parcel; }
namespace android::text { class TextPaint; }
namespace java::lang { class String; }

namespace android::text::style {

class TypefaceSpan : public object_base<SCAPIX_META_STRING("android/text/style/TypefaceSpan"),
	android::text::style::MetricAffectingSpan,
	android::text::ParcelableSpan>
{
public:

	static ref<TypefaceSpan> new_object(ref<java::lang::String> family);
	static ref<TypefaceSpan> new_object(ref<android::graphics::Typeface> typeface);
	static ref<TypefaceSpan> new_object(ref<android::os::Parcel> src);
	jint getSpanTypeId();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	ref<java::lang::String> getFamily();
	ref<android::graphics::Typeface> getTypeface();
	void updateDrawState(ref<android::text::TextPaint> ds);
	void updateMeasureState(ref<android::text::TextPaint> paint);

protected:

	TypefaceSpan(handle_type h) : base_(h) {}

};

} // namespace android::text::style
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Typeface.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/text/TextPaint.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::text::style {

inline ref<TypefaceSpan> TypefaceSpan::new_object(ref<java::lang::String> family) { return base_::new_object(family); }
inline ref<TypefaceSpan> TypefaceSpan::new_object(ref<android::graphics::Typeface> typeface) { return base_::new_object(typeface); }
inline ref<TypefaceSpan> TypefaceSpan::new_object(ref<android::os::Parcel> src) { return base_::new_object(src); }
inline jint TypefaceSpan::getSpanTypeId() { return call_method<SCAPIX_META_STRING("getSpanTypeId"), jint>(); }
inline jint TypefaceSpan::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void TypefaceSpan::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline ref<java::lang::String> TypefaceSpan::getFamily() { return call_method<SCAPIX_META_STRING("getFamily"), ref<java::lang::String>>(); }
inline ref<android::graphics::Typeface> TypefaceSpan::getTypeface() { return call_method<SCAPIX_META_STRING("getTypeface"), ref<android::graphics::Typeface>>(); }
inline void TypefaceSpan::updateDrawState(ref<android::text::TextPaint> ds) { return call_method<SCAPIX_META_STRING("updateDrawState"), void>(ds); }
inline void TypefaceSpan::updateMeasureState(ref<android::text::TextPaint> paint) { return call_method<SCAPIX_META_STRING("updateMeasureState"), void>(paint); }

} // namespace android::text::style
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TEXT_STYLE_TYPEFACESPAN_H
