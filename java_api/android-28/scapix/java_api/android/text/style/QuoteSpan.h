// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/text/style/LeadingMarginSpan.h>
#include <scapix/java_api/android/text/ParcelableSpan.h>

#ifndef SCAPIX_ANDROID_TEXT_STYLE_QUOTESPAN_H
#define SCAPIX_ANDROID_TEXT_STYLE_QUOTESPAN_H

namespace scapix::java_api {

namespace android::graphics { class Canvas; }
namespace android::graphics { class Paint; }
namespace android::os { class Parcel; }
namespace android::text { class Layout; }
namespace java::lang { class CharSequence; }

namespace android::text::style {

class QuoteSpan : public object_base<SCAPIX_META_STRING("android/text/style/QuoteSpan"),
	java::lang::Object,
	android::text::style::LeadingMarginSpan,
	android::text::ParcelableSpan>
{
public:

	static jint STANDARD_COLOR_();
	static jint STANDARD_GAP_WIDTH_PX_();
	static jint STANDARD_STRIPE_WIDTH_PX_();

	static ref<QuoteSpan> new_object();
	static ref<QuoteSpan> new_object(jint color);
	static ref<QuoteSpan> new_object(jint color, jint stripeWidth, jint gapWidth);
	static ref<QuoteSpan> new_object(ref<android::os::Parcel> src);
	jint getSpanTypeId();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	jint getColor();
	jint getStripeWidth();
	jint getGapWidth();
	jint getLeadingMargin(jboolean first);
	void drawLeadingMargin(ref<android::graphics::Canvas> c, ref<android::graphics::Paint> p, jint x, jint dir, jint top, jint baseline, jint bottom, ref<java::lang::CharSequence> text, jint start, jint end, jboolean first, ref<android::text::Layout> layout);

protected:

	QuoteSpan(handle_type h) : base_(h) {}

};

} // namespace android::text::style
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Paint.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/text/Layout.h>
#include <scapix/java_api/java/lang/CharSequence.h>

namespace scapix::java_api {
namespace android::text::style {

inline jint QuoteSpan::STANDARD_COLOR_() { return get_static_field<SCAPIX_META_STRING("STANDARD_COLOR"), jint>(); }
inline jint QuoteSpan::STANDARD_GAP_WIDTH_PX_() { return get_static_field<SCAPIX_META_STRING("STANDARD_GAP_WIDTH_PX"), jint>(); }
inline jint QuoteSpan::STANDARD_STRIPE_WIDTH_PX_() { return get_static_field<SCAPIX_META_STRING("STANDARD_STRIPE_WIDTH_PX"), jint>(); }
inline ref<QuoteSpan> QuoteSpan::new_object() { return base_::new_object(); }
inline ref<QuoteSpan> QuoteSpan::new_object(jint color) { return base_::new_object(color); }
inline ref<QuoteSpan> QuoteSpan::new_object(jint color, jint stripeWidth, jint gapWidth) { return base_::new_object(color, stripeWidth, gapWidth); }
inline ref<QuoteSpan> QuoteSpan::new_object(ref<android::os::Parcel> src) { return base_::new_object(src); }
inline jint QuoteSpan::getSpanTypeId() { return call_method<SCAPIX_META_STRING("getSpanTypeId"), jint>(); }
inline jint QuoteSpan::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void QuoteSpan::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline jint QuoteSpan::getColor() { return call_method<SCAPIX_META_STRING("getColor"), jint>(); }
inline jint QuoteSpan::getStripeWidth() { return call_method<SCAPIX_META_STRING("getStripeWidth"), jint>(); }
inline jint QuoteSpan::getGapWidth() { return call_method<SCAPIX_META_STRING("getGapWidth"), jint>(); }
inline jint QuoteSpan::getLeadingMargin(jboolean first) { return call_method<SCAPIX_META_STRING("getLeadingMargin"), jint>(first); }
inline void QuoteSpan::drawLeadingMargin(ref<android::graphics::Canvas> c, ref<android::graphics::Paint> p, jint x, jint dir, jint top, jint baseline, jint bottom, ref<java::lang::CharSequence> text, jint start, jint end, jboolean first, ref<android::text::Layout> layout) { return call_method<SCAPIX_META_STRING("drawLeadingMargin"), void>(c, p, x, dir, top, baseline, bottom, text, start, end, first, layout); }

} // namespace android::text::style
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TEXT_STYLE_QUOTESPAN_H
