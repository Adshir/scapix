// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/CharSequence.h>

#ifndef SCAPIX_ANDROID_TEXT_SPANNED_H
#define SCAPIX_ANDROID_TEXT_SPANNED_H

namespace scapix::java_api {

namespace java::lang { class Class; }

namespace android::text {

class Spanned : public object_base<SCAPIX_META_STRING("android/text/Spanned"),
	java::lang::Object,
	java::lang::CharSequence>
{
public:

	static jint SPAN_COMPOSING_();
	static jint SPAN_EXCLUSIVE_EXCLUSIVE_();
	static jint SPAN_EXCLUSIVE_INCLUSIVE_();
	static jint SPAN_INCLUSIVE_EXCLUSIVE_();
	static jint SPAN_INCLUSIVE_INCLUSIVE_();
	static jint SPAN_INTERMEDIATE_();
	static jint SPAN_MARK_MARK_();
	static jint SPAN_MARK_POINT_();
	static jint SPAN_PARAGRAPH_();
	static jint SPAN_POINT_MARK_();
	static jint SPAN_POINT_MARK_MASK_();
	static jint SPAN_POINT_POINT_();
	static jint SPAN_PRIORITY_();
	static jint SPAN_PRIORITY_SHIFT_();
	static jint SPAN_USER_();
	static jint SPAN_USER_SHIFT_();

	ref<link::java::array<java::lang::Object>> getSpans(jint p1, jint p2, ref<java::lang::Class> p3);
	jint getSpanStart(ref<java::lang::Object> p1);
	jint getSpanEnd(ref<java::lang::Object> p1);
	jint getSpanFlags(ref<java::lang::Object> p1);
	jint nextSpanTransition(jint p1, jint p2, ref<java::lang::Class> p3);

protected:

	Spanned(handle_type h) : base_(h) {}

};

} // namespace android::text
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Class.h>

namespace scapix::java_api {
namespace android::text {

inline jint Spanned::SPAN_COMPOSING_() { return get_static_field<SCAPIX_META_STRING("SPAN_COMPOSING"), jint>(); }
inline jint Spanned::SPAN_EXCLUSIVE_EXCLUSIVE_() { return get_static_field<SCAPIX_META_STRING("SPAN_EXCLUSIVE_EXCLUSIVE"), jint>(); }
inline jint Spanned::SPAN_EXCLUSIVE_INCLUSIVE_() { return get_static_field<SCAPIX_META_STRING("SPAN_EXCLUSIVE_INCLUSIVE"), jint>(); }
inline jint Spanned::SPAN_INCLUSIVE_EXCLUSIVE_() { return get_static_field<SCAPIX_META_STRING("SPAN_INCLUSIVE_EXCLUSIVE"), jint>(); }
inline jint Spanned::SPAN_INCLUSIVE_INCLUSIVE_() { return get_static_field<SCAPIX_META_STRING("SPAN_INCLUSIVE_INCLUSIVE"), jint>(); }
inline jint Spanned::SPAN_INTERMEDIATE_() { return get_static_field<SCAPIX_META_STRING("SPAN_INTERMEDIATE"), jint>(); }
inline jint Spanned::SPAN_MARK_MARK_() { return get_static_field<SCAPIX_META_STRING("SPAN_MARK_MARK"), jint>(); }
inline jint Spanned::SPAN_MARK_POINT_() { return get_static_field<SCAPIX_META_STRING("SPAN_MARK_POINT"), jint>(); }
inline jint Spanned::SPAN_PARAGRAPH_() { return get_static_field<SCAPIX_META_STRING("SPAN_PARAGRAPH"), jint>(); }
inline jint Spanned::SPAN_POINT_MARK_() { return get_static_field<SCAPIX_META_STRING("SPAN_POINT_MARK"), jint>(); }
inline jint Spanned::SPAN_POINT_MARK_MASK_() { return get_static_field<SCAPIX_META_STRING("SPAN_POINT_MARK_MASK"), jint>(); }
inline jint Spanned::SPAN_POINT_POINT_() { return get_static_field<SCAPIX_META_STRING("SPAN_POINT_POINT"), jint>(); }
inline jint Spanned::SPAN_PRIORITY_() { return get_static_field<SCAPIX_META_STRING("SPAN_PRIORITY"), jint>(); }
inline jint Spanned::SPAN_PRIORITY_SHIFT_() { return get_static_field<SCAPIX_META_STRING("SPAN_PRIORITY_SHIFT"), jint>(); }
inline jint Spanned::SPAN_USER_() { return get_static_field<SCAPIX_META_STRING("SPAN_USER"), jint>(); }
inline jint Spanned::SPAN_USER_SHIFT_() { return get_static_field<SCAPIX_META_STRING("SPAN_USER_SHIFT"), jint>(); }
inline ref<link::java::array<java::lang::Object>> Spanned::getSpans(jint p1, jint p2, ref<java::lang::Class> p3) { return call_method<SCAPIX_META_STRING("getSpans"), ref<link::java::array<java::lang::Object>>>(p1, p2, p3); }
inline jint Spanned::getSpanStart(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("getSpanStart"), jint>(p1); }
inline jint Spanned::getSpanEnd(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("getSpanEnd"), jint>(p1); }
inline jint Spanned::getSpanFlags(ref<java::lang::Object> p1) { return call_method<SCAPIX_META_STRING("getSpanFlags"), jint>(p1); }
inline jint Spanned::nextSpanTransition(jint p1, jint p2, ref<java::lang::Class> p3) { return call_method<SCAPIX_META_STRING("nextSpanTransition"), jint>(p1, p2, p3); }

} // namespace android::text
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TEXT_SPANNED_H
