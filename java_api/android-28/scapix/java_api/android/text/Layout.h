// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_TEXT_LAYOUT_H
#define SCAPIX_ANDROID_TEXT_LAYOUT_H

namespace scapix::java_api {

namespace android::graphics { class Canvas; }
namespace android::graphics { class Paint; }
namespace android::graphics { class Path; }
namespace android::graphics { class Rect; }
namespace android::text { class Layout_Alignment; }
namespace android::text { class Layout_Directions; }
namespace android::text { class TextPaint; }
namespace java::lang { class CharSequence; }

namespace android::text {

class Layout : public object_base<SCAPIX_META_STRING("android/text/Layout"),
	java::lang::Object>
{
public:

	using Directions = Layout_Directions;
	using Alignment = Layout_Alignment;

	static jint BREAK_STRATEGY_BALANCED_();
	static jint BREAK_STRATEGY_HIGH_QUALITY_();
	static jint BREAK_STRATEGY_SIMPLE_();
	static jfloat DEFAULT_LINESPACING_ADDITION_();
	static jfloat DEFAULT_LINESPACING_MULTIPLIER_();
	static jint DIR_LEFT_TO_RIGHT_();
	static jint DIR_RIGHT_TO_LEFT_();
	static jint HYPHENATION_FREQUENCY_FULL_();
	static jint HYPHENATION_FREQUENCY_NONE_();
	static jint HYPHENATION_FREQUENCY_NORMAL_();
	static jint JUSTIFICATION_MODE_INTER_WORD_();
	static jint JUSTIFICATION_MODE_NONE_();

	static jfloat getDesiredWidth(ref<java::lang::CharSequence> source, ref<android::text::TextPaint> paint);
	static jfloat getDesiredWidth(ref<java::lang::CharSequence> source, jint start, jint end, ref<android::text::TextPaint> paint);
	void draw(ref<android::graphics::Canvas> c);
	void draw(ref<android::graphics::Canvas> canvas, ref<android::graphics::Path> highlight, ref<android::graphics::Paint> highlightPaint, jint cursorOffsetVertical);
	ref<java::lang::CharSequence> getText();
	ref<android::text::TextPaint> getPaint();
	jint getWidth();
	jint getEllipsizedWidth();
	void increaseWidthTo(jint wid);
	jint getHeight();
	ref<android::text::Layout_Alignment> getAlignment();
	jfloat getSpacingMultiplier();
	jfloat getSpacingAdd();
	jint getLineCount();
	jint getLineBounds(jint line, ref<android::graphics::Rect> bounds);
	jint getLineTop(jint p1);
	jint getLineDescent(jint p1);
	jint getLineStart(jint p1);
	jint getParagraphDirection(jint p1);
	jboolean getLineContainsTab(jint p1);
	ref<android::text::Layout_Directions> getLineDirections(jint p1);
	jint getTopPadding();
	jint getBottomPadding();
	jboolean isRtlCharAt(jint offset);
	jfloat getPrimaryHorizontal(jint offset);
	jfloat getSecondaryHorizontal(jint offset);
	jfloat getLineLeft(jint line);
	jfloat getLineRight(jint line);
	jfloat getLineMax(jint line);
	jfloat getLineWidth(jint line);
	jint getLineForVertical(jint vertical);
	jint getLineForOffset(jint offset);
	jint getOffsetForHorizontal(jint line, jfloat horiz);
	jint getLineEnd(jint line);
	jint getLineVisibleEnd(jint line);
	jint getLineBottom(jint line);
	jint getLineBaseline(jint line);
	jint getLineAscent(jint line);
	jint getOffsetToLeftOf(jint offset);
	jint getOffsetToRightOf(jint offset);
	void getCursorPath(jint point, ref<android::graphics::Path> dest, ref<java::lang::CharSequence> editingBuffer);
	void getSelectionPath(jint start, jint end, ref<android::graphics::Path> dest);
	ref<android::text::Layout_Alignment> getParagraphAlignment(jint line);
	jint getParagraphLeft(jint line);
	jint getParagraphRight(jint line);
	jint getEllipsisStart(jint p1);
	jint getEllipsisCount(jint p1);

protected:

	Layout(handle_type h) : base_(h) {}

};

} // namespace android::text
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Paint.h>
#include <scapix/java_api/android/graphics/Path.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/text/Layout_Alignment.h>
#include <scapix/java_api/android/text/Layout_Directions.h>
#include <scapix/java_api/android/text/TextPaint.h>
#include <scapix/java_api/java/lang/CharSequence.h>

namespace scapix::java_api {
namespace android::text {

inline jint Layout::BREAK_STRATEGY_BALANCED_() { return get_static_field<SCAPIX_META_STRING("BREAK_STRATEGY_BALANCED"), jint>(); }
inline jint Layout::BREAK_STRATEGY_HIGH_QUALITY_() { return get_static_field<SCAPIX_META_STRING("BREAK_STRATEGY_HIGH_QUALITY"), jint>(); }
inline jint Layout::BREAK_STRATEGY_SIMPLE_() { return get_static_field<SCAPIX_META_STRING("BREAK_STRATEGY_SIMPLE"), jint>(); }
inline jfloat Layout::DEFAULT_LINESPACING_ADDITION_() { return get_static_field<SCAPIX_META_STRING("DEFAULT_LINESPACING_ADDITION"), jfloat>(); }
inline jfloat Layout::DEFAULT_LINESPACING_MULTIPLIER_() { return get_static_field<SCAPIX_META_STRING("DEFAULT_LINESPACING_MULTIPLIER"), jfloat>(); }
inline jint Layout::DIR_LEFT_TO_RIGHT_() { return get_static_field<SCAPIX_META_STRING("DIR_LEFT_TO_RIGHT"), jint>(); }
inline jint Layout::DIR_RIGHT_TO_LEFT_() { return get_static_field<SCAPIX_META_STRING("DIR_RIGHT_TO_LEFT"), jint>(); }
inline jint Layout::HYPHENATION_FREQUENCY_FULL_() { return get_static_field<SCAPIX_META_STRING("HYPHENATION_FREQUENCY_FULL"), jint>(); }
inline jint Layout::HYPHENATION_FREQUENCY_NONE_() { return get_static_field<SCAPIX_META_STRING("HYPHENATION_FREQUENCY_NONE"), jint>(); }
inline jint Layout::HYPHENATION_FREQUENCY_NORMAL_() { return get_static_field<SCAPIX_META_STRING("HYPHENATION_FREQUENCY_NORMAL"), jint>(); }
inline jint Layout::JUSTIFICATION_MODE_INTER_WORD_() { return get_static_field<SCAPIX_META_STRING("JUSTIFICATION_MODE_INTER_WORD"), jint>(); }
inline jint Layout::JUSTIFICATION_MODE_NONE_() { return get_static_field<SCAPIX_META_STRING("JUSTIFICATION_MODE_NONE"), jint>(); }
inline jfloat Layout::getDesiredWidth(ref<java::lang::CharSequence> source, ref<android::text::TextPaint> paint) { return call_static_method<SCAPIX_META_STRING("getDesiredWidth"), jfloat>(source, paint); }
inline jfloat Layout::getDesiredWidth(ref<java::lang::CharSequence> source, jint start, jint end, ref<android::text::TextPaint> paint) { return call_static_method<SCAPIX_META_STRING("getDesiredWidth"), jfloat>(source, start, end, paint); }
inline void Layout::draw(ref<android::graphics::Canvas> c) { return call_method<SCAPIX_META_STRING("draw"), void>(c); }
inline void Layout::draw(ref<android::graphics::Canvas> canvas, ref<android::graphics::Path> highlight, ref<android::graphics::Paint> highlightPaint, jint cursorOffsetVertical) { return call_method<SCAPIX_META_STRING("draw"), void>(canvas, highlight, highlightPaint, cursorOffsetVertical); }
inline ref<java::lang::CharSequence> Layout::getText() { return call_method<SCAPIX_META_STRING("getText"), ref<java::lang::CharSequence>>(); }
inline ref<android::text::TextPaint> Layout::getPaint() { return call_method<SCAPIX_META_STRING("getPaint"), ref<android::text::TextPaint>>(); }
inline jint Layout::getWidth() { return call_method<SCAPIX_META_STRING("getWidth"), jint>(); }
inline jint Layout::getEllipsizedWidth() { return call_method<SCAPIX_META_STRING("getEllipsizedWidth"), jint>(); }
inline void Layout::increaseWidthTo(jint wid) { return call_method<SCAPIX_META_STRING("increaseWidthTo"), void>(wid); }
inline jint Layout::getHeight() { return call_method<SCAPIX_META_STRING("getHeight"), jint>(); }
inline ref<android::text::Layout_Alignment> Layout::getAlignment() { return call_method<SCAPIX_META_STRING("getAlignment"), ref<android::text::Layout_Alignment>>(); }
inline jfloat Layout::getSpacingMultiplier() { return call_method<SCAPIX_META_STRING("getSpacingMultiplier"), jfloat>(); }
inline jfloat Layout::getSpacingAdd() { return call_method<SCAPIX_META_STRING("getSpacingAdd"), jfloat>(); }
inline jint Layout::getLineCount() { return call_method<SCAPIX_META_STRING("getLineCount"), jint>(); }
inline jint Layout::getLineBounds(jint line, ref<android::graphics::Rect> bounds) { return call_method<SCAPIX_META_STRING("getLineBounds"), jint>(line, bounds); }
inline jint Layout::getLineTop(jint p1) { return call_method<SCAPIX_META_STRING("getLineTop"), jint>(p1); }
inline jint Layout::getLineDescent(jint p1) { return call_method<SCAPIX_META_STRING("getLineDescent"), jint>(p1); }
inline jint Layout::getLineStart(jint p1) { return call_method<SCAPIX_META_STRING("getLineStart"), jint>(p1); }
inline jint Layout::getParagraphDirection(jint p1) { return call_method<SCAPIX_META_STRING("getParagraphDirection"), jint>(p1); }
inline jboolean Layout::getLineContainsTab(jint p1) { return call_method<SCAPIX_META_STRING("getLineContainsTab"), jboolean>(p1); }
inline ref<android::text::Layout_Directions> Layout::getLineDirections(jint p1) { return call_method<SCAPIX_META_STRING("getLineDirections"), ref<android::text::Layout_Directions>>(p1); }
inline jint Layout::getTopPadding() { return call_method<SCAPIX_META_STRING("getTopPadding"), jint>(); }
inline jint Layout::getBottomPadding() { return call_method<SCAPIX_META_STRING("getBottomPadding"), jint>(); }
inline jboolean Layout::isRtlCharAt(jint offset) { return call_method<SCAPIX_META_STRING("isRtlCharAt"), jboolean>(offset); }
inline jfloat Layout::getPrimaryHorizontal(jint offset) { return call_method<SCAPIX_META_STRING("getPrimaryHorizontal"), jfloat>(offset); }
inline jfloat Layout::getSecondaryHorizontal(jint offset) { return call_method<SCAPIX_META_STRING("getSecondaryHorizontal"), jfloat>(offset); }
inline jfloat Layout::getLineLeft(jint line) { return call_method<SCAPIX_META_STRING("getLineLeft"), jfloat>(line); }
inline jfloat Layout::getLineRight(jint line) { return call_method<SCAPIX_META_STRING("getLineRight"), jfloat>(line); }
inline jfloat Layout::getLineMax(jint line) { return call_method<SCAPIX_META_STRING("getLineMax"), jfloat>(line); }
inline jfloat Layout::getLineWidth(jint line) { return call_method<SCAPIX_META_STRING("getLineWidth"), jfloat>(line); }
inline jint Layout::getLineForVertical(jint vertical) { return call_method<SCAPIX_META_STRING("getLineForVertical"), jint>(vertical); }
inline jint Layout::getLineForOffset(jint offset) { return call_method<SCAPIX_META_STRING("getLineForOffset"), jint>(offset); }
inline jint Layout::getOffsetForHorizontal(jint line, jfloat horiz) { return call_method<SCAPIX_META_STRING("getOffsetForHorizontal"), jint>(line, horiz); }
inline jint Layout::getLineEnd(jint line) { return call_method<SCAPIX_META_STRING("getLineEnd"), jint>(line); }
inline jint Layout::getLineVisibleEnd(jint line) { return call_method<SCAPIX_META_STRING("getLineVisibleEnd"), jint>(line); }
inline jint Layout::getLineBottom(jint line) { return call_method<SCAPIX_META_STRING("getLineBottom"), jint>(line); }
inline jint Layout::getLineBaseline(jint line) { return call_method<SCAPIX_META_STRING("getLineBaseline"), jint>(line); }
inline jint Layout::getLineAscent(jint line) { return call_method<SCAPIX_META_STRING("getLineAscent"), jint>(line); }
inline jint Layout::getOffsetToLeftOf(jint offset) { return call_method<SCAPIX_META_STRING("getOffsetToLeftOf"), jint>(offset); }
inline jint Layout::getOffsetToRightOf(jint offset) { return call_method<SCAPIX_META_STRING("getOffsetToRightOf"), jint>(offset); }
inline void Layout::getCursorPath(jint point, ref<android::graphics::Path> dest, ref<java::lang::CharSequence> editingBuffer) { return call_method<SCAPIX_META_STRING("getCursorPath"), void>(point, dest, editingBuffer); }
inline void Layout::getSelectionPath(jint start, jint end, ref<android::graphics::Path> dest) { return call_method<SCAPIX_META_STRING("getSelectionPath"), void>(start, end, dest); }
inline ref<android::text::Layout_Alignment> Layout::getParagraphAlignment(jint line) { return call_method<SCAPIX_META_STRING("getParagraphAlignment"), ref<android::text::Layout_Alignment>>(line); }
inline jint Layout::getParagraphLeft(jint line) { return call_method<SCAPIX_META_STRING("getParagraphLeft"), jint>(line); }
inline jint Layout::getParagraphRight(jint line) { return call_method<SCAPIX_META_STRING("getParagraphRight"), jint>(line); }
inline jint Layout::getEllipsisStart(jint p1) { return call_method<SCAPIX_META_STRING("getEllipsisStart"), jint>(p1); }
inline jint Layout::getEllipsisCount(jint p1) { return call_method<SCAPIX_META_STRING("getEllipsisCount"), jint>(p1); }

} // namespace android::text
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TEXT_LAYOUT_H
