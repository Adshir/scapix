// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/text/method/BaseKeyListener.h>
#include <scapix/java_api/android/text/SpanWatcher.h>

#ifndef SCAPIX_ANDROID_TEXT_METHOD_MULTITAPKEYLISTENER_H
#define SCAPIX_ANDROID_TEXT_METHOD_MULTITAPKEYLISTENER_H

namespace scapix::java_api {

namespace android::text { class Editable; }
namespace android::text { class Spannable; }
namespace android::text::method { class TextKeyListener_Capitalize; }
namespace android::view { class KeyEvent; }
namespace android::view { class View; }
namespace java::lang { class Object; }

namespace android::text::method {

class MultiTapKeyListener : public object_base<SCAPIX_META_STRING("android/text/method/MultiTapKeyListener"),
	android::text::method::BaseKeyListener,
	android::text::SpanWatcher>
{
public:

	static ref<MultiTapKeyListener> new_object(ref<android::text::method::TextKeyListener_Capitalize> cap, jboolean autotext);
	static ref<android::text::method::MultiTapKeyListener> getInstance(jboolean autotext, ref<android::text::method::TextKeyListener_Capitalize> cap);
	jint getInputType();
	jboolean onKeyDown(ref<android::view::View> view, ref<android::text::Editable> content, jint keyCode, ref<android::view::KeyEvent> event);
	void onSpanChanged(ref<android::text::Spannable> buf, ref<java::lang::Object> what, jint s, jint e, jint start, jint stop);
	void onSpanAdded(ref<android::text::Spannable> s, ref<java::lang::Object> what, jint start, jint end);
	void onSpanRemoved(ref<android::text::Spannable> s, ref<java::lang::Object> what, jint start, jint end);

protected:

	MultiTapKeyListener(handle_type h) : base_(h) {}

};

} // namespace android::text::method
} // namespace scapix::java_api

#include <scapix/java_api/android/text/Editable.h>
#include <scapix/java_api/android/text/Spannable.h>
#include <scapix/java_api/android/text/method/TextKeyListener_Capitalize.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/java/lang/Object.h>

namespace scapix::java_api {
namespace android::text::method {

inline ref<MultiTapKeyListener> MultiTapKeyListener::new_object(ref<android::text::method::TextKeyListener_Capitalize> cap, jboolean autotext) { return base_::new_object(cap, autotext); }
inline ref<android::text::method::MultiTapKeyListener> MultiTapKeyListener::getInstance(jboolean autotext, ref<android::text::method::TextKeyListener_Capitalize> cap) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<android::text::method::MultiTapKeyListener>>(autotext, cap); }
inline jint MultiTapKeyListener::getInputType() { return call_method<SCAPIX_META_STRING("getInputType"), jint>(); }
inline jboolean MultiTapKeyListener::onKeyDown(ref<android::view::View> view, ref<android::text::Editable> content, jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyDown"), jboolean>(view, content, keyCode, event); }
inline void MultiTapKeyListener::onSpanChanged(ref<android::text::Spannable> buf, ref<java::lang::Object> what, jint s, jint e, jint start, jint stop) { return call_method<SCAPIX_META_STRING("onSpanChanged"), void>(buf, what, s, e, start, stop); }
inline void MultiTapKeyListener::onSpanAdded(ref<android::text::Spannable> s, ref<java::lang::Object> what, jint start, jint end) { return call_method<SCAPIX_META_STRING("onSpanAdded"), void>(s, what, start, end); }
inline void MultiTapKeyListener::onSpanRemoved(ref<android::text::Spannable> s, ref<java::lang::Object> what, jint start, jint end) { return call_method<SCAPIX_META_STRING("onSpanRemoved"), void>(s, what, start, end); }

} // namespace android::text::method
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TEXT_METHOD_MULTITAPKEYLISTENER_H
