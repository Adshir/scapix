// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/text/method/BaseKeyListener.h>
#include <scapix/java_api/android/text/SpanWatcher.h>

#ifndef SCAPIX_ANDROID_TEXT_METHOD_TEXTKEYLISTENER_H
#define SCAPIX_ANDROID_TEXT_METHOD_TEXTKEYLISTENER_H

namespace scapix::java_api {

namespace android::text { class Editable; }
namespace android::text { class Spannable; }
namespace android::text::method { class TextKeyListener_Capitalize; }
namespace android::view { class KeyEvent; }
namespace android::view { class View; }
namespace java::lang { class CharSequence; }
namespace java::lang { class Object; }

namespace android::text::method {

class TextKeyListener : public object_base<SCAPIX_META_STRING("android/text/method/TextKeyListener"),
	android::text::method::BaseKeyListener,
	android::text::SpanWatcher>
{
public:

	using Capitalize = TextKeyListener_Capitalize;

	static ref<TextKeyListener> new_object(ref<android::text::method::TextKeyListener_Capitalize> cap, jboolean autotext);
	static ref<android::text::method::TextKeyListener> getInstance(jboolean autotext, ref<android::text::method::TextKeyListener_Capitalize> cap);
	static ref<android::text::method::TextKeyListener> getInstance();
	static jboolean shouldCap(ref<android::text::method::TextKeyListener_Capitalize> cap, ref<java::lang::CharSequence> cs, jint off);
	jint getInputType();
	jboolean onKeyDown(ref<android::view::View> view, ref<android::text::Editable> content, jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onKeyUp(ref<android::view::View> view, ref<android::text::Editable> content, jint keyCode, ref<android::view::KeyEvent> event);
	jboolean onKeyOther(ref<android::view::View> view, ref<android::text::Editable> content, ref<android::view::KeyEvent> event);
	static void clear(ref<android::text::Editable> e);
	void onSpanAdded(ref<android::text::Spannable> s, ref<java::lang::Object> what, jint start, jint end);
	void onSpanRemoved(ref<android::text::Spannable> s, ref<java::lang::Object> what, jint start, jint end);
	void onSpanChanged(ref<android::text::Spannable> s, ref<java::lang::Object> what, jint start, jint end, jint st, jint en);
	void release();

protected:

	TextKeyListener(handle_type h) : base_(h) {}

};

} // namespace android::text::method
} // namespace scapix::java_api

#include <scapix/java_api/android/text/Editable.h>
#include <scapix/java_api/android/text/Spannable.h>
#include <scapix/java_api/android/text/method/TextKeyListener_Capitalize.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Object.h>

namespace scapix::java_api {
namespace android::text::method {

inline ref<TextKeyListener> TextKeyListener::new_object(ref<android::text::method::TextKeyListener_Capitalize> cap, jboolean autotext) { return base_::new_object(cap, autotext); }
inline ref<android::text::method::TextKeyListener> TextKeyListener::getInstance(jboolean autotext, ref<android::text::method::TextKeyListener_Capitalize> cap) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<android::text::method::TextKeyListener>>(autotext, cap); }
inline ref<android::text::method::TextKeyListener> TextKeyListener::getInstance() { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<android::text::method::TextKeyListener>>(); }
inline jboolean TextKeyListener::shouldCap(ref<android::text::method::TextKeyListener_Capitalize> cap, ref<java::lang::CharSequence> cs, jint off) { return call_static_method<SCAPIX_META_STRING("shouldCap"), jboolean>(cap, cs, off); }
inline jint TextKeyListener::getInputType() { return call_method<SCAPIX_META_STRING("getInputType"), jint>(); }
inline jboolean TextKeyListener::onKeyDown(ref<android::view::View> view, ref<android::text::Editable> content, jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyDown"), jboolean>(view, content, keyCode, event); }
inline jboolean TextKeyListener::onKeyUp(ref<android::view::View> view, ref<android::text::Editable> content, jint keyCode, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyUp"), jboolean>(view, content, keyCode, event); }
inline jboolean TextKeyListener::onKeyOther(ref<android::view::View> view, ref<android::text::Editable> content, ref<android::view::KeyEvent> event) { return call_method<SCAPIX_META_STRING("onKeyOther"), jboolean>(view, content, event); }
inline void TextKeyListener::clear(ref<android::text::Editable> e) { return call_static_method<SCAPIX_META_STRING("clear"), void>(e); }
inline void TextKeyListener::onSpanAdded(ref<android::text::Spannable> s, ref<java::lang::Object> what, jint start, jint end) { return call_method<SCAPIX_META_STRING("onSpanAdded"), void>(s, what, start, end); }
inline void TextKeyListener::onSpanRemoved(ref<android::text::Spannable> s, ref<java::lang::Object> what, jint start, jint end) { return call_method<SCAPIX_META_STRING("onSpanRemoved"), void>(s, what, start, end); }
inline void TextKeyListener::onSpanChanged(ref<android::text::Spannable> s, ref<java::lang::Object> what, jint start, jint end, jint st, jint en) { return call_method<SCAPIX_META_STRING("onSpanChanged"), void>(s, what, start, end, st, en); }
inline void TextKeyListener::release() { return call_method<SCAPIX_META_STRING("release"), void>(); }

} // namespace android::text::method
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TEXT_METHOD_TEXTKEYLISTENER_H
