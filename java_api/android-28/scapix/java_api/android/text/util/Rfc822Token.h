// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_TEXT_UTIL_RFC822TOKEN_H
#define SCAPIX_ANDROID_TEXT_UTIL_RFC822TOKEN_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace android::text::util {

class Rfc822Token : public object_base<SCAPIX_META_STRING("android/text/util/Rfc822Token"),
	java::lang::Object>
{
public:

	static ref<Rfc822Token> new_object(ref<java::lang::String> name, ref<java::lang::String> address, ref<java::lang::String> comment);
	ref<java::lang::String> getName();
	ref<java::lang::String> getAddress();
	ref<java::lang::String> getComment();
	void setName(ref<java::lang::String> name);
	void setAddress(ref<java::lang::String> address);
	void setComment(ref<java::lang::String> comment);
	ref<java::lang::String> toString();
	static ref<java::lang::String> quoteNameIfNecessary(ref<java::lang::String> name);
	static ref<java::lang::String> quoteName(ref<java::lang::String> name);
	static ref<java::lang::String> quoteComment(ref<java::lang::String> comment);
	jint hashCode();
	jboolean equals(ref<java::lang::Object> o);

protected:

	Rfc822Token(handle_type h) : base_(h) {}

};

} // namespace android::text::util
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::text::util {

inline ref<Rfc822Token> Rfc822Token::new_object(ref<java::lang::String> name, ref<java::lang::String> address, ref<java::lang::String> comment) { return base_::new_object(name, address, comment); }
inline ref<java::lang::String> Rfc822Token::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Rfc822Token::getAddress() { return call_method<SCAPIX_META_STRING("getAddress"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Rfc822Token::getComment() { return call_method<SCAPIX_META_STRING("getComment"), ref<java::lang::String>>(); }
inline void Rfc822Token::setName(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("setName"), void>(name); }
inline void Rfc822Token::setAddress(ref<java::lang::String> address) { return call_method<SCAPIX_META_STRING("setAddress"), void>(address); }
inline void Rfc822Token::setComment(ref<java::lang::String> comment) { return call_method<SCAPIX_META_STRING("setComment"), void>(comment); }
inline ref<java::lang::String> Rfc822Token::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Rfc822Token::quoteNameIfNecessary(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("quoteNameIfNecessary"), ref<java::lang::String>>(name); }
inline ref<java::lang::String> Rfc822Token::quoteName(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("quoteName"), ref<java::lang::String>>(name); }
inline ref<java::lang::String> Rfc822Token::quoteComment(ref<java::lang::String> comment) { return call_static_method<SCAPIX_META_STRING("quoteComment"), ref<java::lang::String>>(comment); }
inline jint Rfc822Token::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean Rfc822Token::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }

} // namespace android::text::util
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TEXT_UTIL_RFC822TOKEN_H
