// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/text/NoCopySpan.h>

#ifndef SCAPIX_ANDROID_TEXT_SPANWATCHER_H
#define SCAPIX_ANDROID_TEXT_SPANWATCHER_H

namespace scapix::java_api {

namespace android::text { class Spannable; }

namespace android::text {

class SpanWatcher : public object_base<SCAPIX_META_STRING("android/text/SpanWatcher"),
	java::lang::Object,
	android::text::NoCopySpan>
{
public:

	void onSpanAdded(ref<android::text::Spannable> p1, ref<java::lang::Object> p2, jint p3, jint p4);
	void onSpanRemoved(ref<android::text::Spannable> p1, ref<java::lang::Object> p2, jint p3, jint p4);
	void onSpanChanged(ref<android::text::Spannable> p1, ref<java::lang::Object> p2, jint p3, jint p4, jint p5, jint p6);

protected:

	SpanWatcher(handle_type h) : base_(h) {}

};

} // namespace android::text
} // namespace scapix::java_api

#include <scapix/java_api/android/text/Spannable.h>

namespace scapix::java_api {
namespace android::text {

inline void SpanWatcher::onSpanAdded(ref<android::text::Spannable> p1, ref<java::lang::Object> p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("onSpanAdded"), void>(p1, p2, p3, p4); }
inline void SpanWatcher::onSpanRemoved(ref<android::text::Spannable> p1, ref<java::lang::Object> p2, jint p3, jint p4) { return call_method<SCAPIX_META_STRING("onSpanRemoved"), void>(p1, p2, p3, p4); }
inline void SpanWatcher::onSpanChanged(ref<android::text::Spannable> p1, ref<java::lang::Object> p2, jint p3, jint p4, jint p5, jint p6) { return call_method<SCAPIX_META_STRING("onSpanChanged"), void>(p1, p2, p3, p4, p5, p6); }

} // namespace android::text
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TEXT_SPANWATCHER_H
