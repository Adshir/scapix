// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_TEXT_HTML_H
#define SCAPIX_ANDROID_TEXT_HTML_H

namespace scapix::java_api {

namespace android::text { class Html_ImageGetter; }
namespace android::text { class Html_TagHandler; }
namespace android::text { class Spanned; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::text {

class Html : public object_base<SCAPIX_META_STRING("android/text/Html"),
	java::lang::Object>
{
public:

	using TagHandler = Html_TagHandler;
	using ImageGetter = Html_ImageGetter;

	static jint FROM_HTML_MODE_COMPACT_();
	static jint FROM_HTML_MODE_LEGACY_();
	static jint FROM_HTML_OPTION_USE_CSS_COLORS_();
	static jint FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE_();
	static jint FROM_HTML_SEPARATOR_LINE_BREAK_DIV_();
	static jint FROM_HTML_SEPARATOR_LINE_BREAK_HEADING_();
	static jint FROM_HTML_SEPARATOR_LINE_BREAK_LIST_();
	static jint FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM_();
	static jint FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH_();
	static jint TO_HTML_PARAGRAPH_LINES_CONSECUTIVE_();
	static jint TO_HTML_PARAGRAPH_LINES_INDIVIDUAL_();

	static ref<android::text::Spanned> fromHtml(ref<java::lang::String> source);
	static ref<android::text::Spanned> fromHtml(ref<java::lang::String> source, jint flags);
	static ref<android::text::Spanned> fromHtml(ref<java::lang::String> source, ref<android::text::Html_ImageGetter> imageGetter, ref<android::text::Html_TagHandler> tagHandler);
	static ref<android::text::Spanned> fromHtml(ref<java::lang::String> source, jint flags, ref<android::text::Html_ImageGetter> imageGetter, ref<android::text::Html_TagHandler> tagHandler);
	static ref<java::lang::String> toHtml(ref<android::text::Spanned> text);
	static ref<java::lang::String> toHtml(ref<android::text::Spanned> text, jint option);
	static ref<java::lang::String> escapeHtml(ref<java::lang::CharSequence> text);

protected:

	Html(handle_type h) : base_(h) {}

};

} // namespace android::text
} // namespace scapix::java_api

#include <scapix/java_api/android/text/Html_ImageGetter.h>
#include <scapix/java_api/android/text/Html_TagHandler.h>
#include <scapix/java_api/android/text/Spanned.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::text {

inline jint Html::FROM_HTML_MODE_COMPACT_() { return get_static_field<SCAPIX_META_STRING("FROM_HTML_MODE_COMPACT"), jint>(); }
inline jint Html::FROM_HTML_MODE_LEGACY_() { return get_static_field<SCAPIX_META_STRING("FROM_HTML_MODE_LEGACY"), jint>(); }
inline jint Html::FROM_HTML_OPTION_USE_CSS_COLORS_() { return get_static_field<SCAPIX_META_STRING("FROM_HTML_OPTION_USE_CSS_COLORS"), jint>(); }
inline jint Html::FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE_() { return get_static_field<SCAPIX_META_STRING("FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE"), jint>(); }
inline jint Html::FROM_HTML_SEPARATOR_LINE_BREAK_DIV_() { return get_static_field<SCAPIX_META_STRING("FROM_HTML_SEPARATOR_LINE_BREAK_DIV"), jint>(); }
inline jint Html::FROM_HTML_SEPARATOR_LINE_BREAK_HEADING_() { return get_static_field<SCAPIX_META_STRING("FROM_HTML_SEPARATOR_LINE_BREAK_HEADING"), jint>(); }
inline jint Html::FROM_HTML_SEPARATOR_LINE_BREAK_LIST_() { return get_static_field<SCAPIX_META_STRING("FROM_HTML_SEPARATOR_LINE_BREAK_LIST"), jint>(); }
inline jint Html::FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM_() { return get_static_field<SCAPIX_META_STRING("FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM"), jint>(); }
inline jint Html::FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH_() { return get_static_field<SCAPIX_META_STRING("FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH"), jint>(); }
inline jint Html::TO_HTML_PARAGRAPH_LINES_CONSECUTIVE_() { return get_static_field<SCAPIX_META_STRING("TO_HTML_PARAGRAPH_LINES_CONSECUTIVE"), jint>(); }
inline jint Html::TO_HTML_PARAGRAPH_LINES_INDIVIDUAL_() { return get_static_field<SCAPIX_META_STRING("TO_HTML_PARAGRAPH_LINES_INDIVIDUAL"), jint>(); }
inline ref<android::text::Spanned> Html::fromHtml(ref<java::lang::String> source) { return call_static_method<SCAPIX_META_STRING("fromHtml"), ref<android::text::Spanned>>(source); }
inline ref<android::text::Spanned> Html::fromHtml(ref<java::lang::String> source, jint flags) { return call_static_method<SCAPIX_META_STRING("fromHtml"), ref<android::text::Spanned>>(source, flags); }
inline ref<android::text::Spanned> Html::fromHtml(ref<java::lang::String> source, ref<android::text::Html_ImageGetter> imageGetter, ref<android::text::Html_TagHandler> tagHandler) { return call_static_method<SCAPIX_META_STRING("fromHtml"), ref<android::text::Spanned>>(source, imageGetter, tagHandler); }
inline ref<android::text::Spanned> Html::fromHtml(ref<java::lang::String> source, jint flags, ref<android::text::Html_ImageGetter> imageGetter, ref<android::text::Html_TagHandler> tagHandler) { return call_static_method<SCAPIX_META_STRING("fromHtml"), ref<android::text::Spanned>>(source, flags, imageGetter, tagHandler); }
inline ref<java::lang::String> Html::toHtml(ref<android::text::Spanned> text) { return call_static_method<SCAPIX_META_STRING("toHtml"), ref<java::lang::String>>(text); }
inline ref<java::lang::String> Html::toHtml(ref<android::text::Spanned> text, jint option) { return call_static_method<SCAPIX_META_STRING("toHtml"), ref<java::lang::String>>(text, option); }
inline ref<java::lang::String> Html::escapeHtml(ref<java::lang::CharSequence> text) { return call_static_method<SCAPIX_META_STRING("escapeHtml"), ref<java::lang::String>>(text); }

} // namespace android::text
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TEXT_HTML_H
