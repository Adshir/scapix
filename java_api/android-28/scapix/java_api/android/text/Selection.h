// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_TEXT_SELECTION_H
#define SCAPIX_ANDROID_TEXT_SELECTION_H

namespace scapix::java_api {

namespace android::text { class Layout; }
namespace android::text { class Spannable; }
namespace java::lang { class CharSequence; }

namespace android::text {

class Selection : public object_base<SCAPIX_META_STRING("android/text/Selection"),
	java::lang::Object>
{
public:

	static ref<java::lang::Object> SELECTION_END_();
	static ref<java::lang::Object> SELECTION_START_();

	static jint getSelectionStart(ref<java::lang::CharSequence> text);
	static jint getSelectionEnd(ref<java::lang::CharSequence> text);
	static void setSelection(ref<android::text::Spannable> text, jint start, jint stop);
	static void setSelection(ref<android::text::Spannable> text, jint index);
	static void selectAll(ref<android::text::Spannable> text);
	static void extendSelection(ref<android::text::Spannable> text, jint index);
	static void removeSelection(ref<android::text::Spannable> text);
	static jboolean moveUp(ref<android::text::Spannable> text, ref<android::text::Layout> layout);
	static jboolean moveDown(ref<android::text::Spannable> text, ref<android::text::Layout> layout);
	static jboolean moveLeft(ref<android::text::Spannable> text, ref<android::text::Layout> layout);
	static jboolean moveRight(ref<android::text::Spannable> text, ref<android::text::Layout> layout);
	static jboolean extendUp(ref<android::text::Spannable> text, ref<android::text::Layout> layout);
	static jboolean extendDown(ref<android::text::Spannable> text, ref<android::text::Layout> layout);
	static jboolean extendLeft(ref<android::text::Spannable> text, ref<android::text::Layout> layout);
	static jboolean extendRight(ref<android::text::Spannable> text, ref<android::text::Layout> layout);
	static jboolean extendToLeftEdge(ref<android::text::Spannable> text, ref<android::text::Layout> layout);
	static jboolean extendToRightEdge(ref<android::text::Spannable> text, ref<android::text::Layout> layout);
	static jboolean moveToLeftEdge(ref<android::text::Spannable> text, ref<android::text::Layout> layout);
	static jboolean moveToRightEdge(ref<android::text::Spannable> text, ref<android::text::Layout> layout);

protected:

	Selection(handle_type h) : base_(h) {}

};

} // namespace android::text
} // namespace scapix::java_api

#include <scapix/java_api/android/text/Layout.h>
#include <scapix/java_api/android/text/Spannable.h>
#include <scapix/java_api/java/lang/CharSequence.h>

namespace scapix::java_api {
namespace android::text {

inline ref<java::lang::Object> Selection::SELECTION_END_() { return get_static_field<SCAPIX_META_STRING("SELECTION_END"), ref<java::lang::Object>>(); }
inline ref<java::lang::Object> Selection::SELECTION_START_() { return get_static_field<SCAPIX_META_STRING("SELECTION_START"), ref<java::lang::Object>>(); }
inline jint Selection::getSelectionStart(ref<java::lang::CharSequence> text) { return call_static_method<SCAPIX_META_STRING("getSelectionStart"), jint>(text); }
inline jint Selection::getSelectionEnd(ref<java::lang::CharSequence> text) { return call_static_method<SCAPIX_META_STRING("getSelectionEnd"), jint>(text); }
inline void Selection::setSelection(ref<android::text::Spannable> text, jint start, jint stop) { return call_static_method<SCAPIX_META_STRING("setSelection"), void>(text, start, stop); }
inline void Selection::setSelection(ref<android::text::Spannable> text, jint index) { return call_static_method<SCAPIX_META_STRING("setSelection"), void>(text, index); }
inline void Selection::selectAll(ref<android::text::Spannable> text) { return call_static_method<SCAPIX_META_STRING("selectAll"), void>(text); }
inline void Selection::extendSelection(ref<android::text::Spannable> text, jint index) { return call_static_method<SCAPIX_META_STRING("extendSelection"), void>(text, index); }
inline void Selection::removeSelection(ref<android::text::Spannable> text) { return call_static_method<SCAPIX_META_STRING("removeSelection"), void>(text); }
inline jboolean Selection::moveUp(ref<android::text::Spannable> text, ref<android::text::Layout> layout) { return call_static_method<SCAPIX_META_STRING("moveUp"), jboolean>(text, layout); }
inline jboolean Selection::moveDown(ref<android::text::Spannable> text, ref<android::text::Layout> layout) { return call_static_method<SCAPIX_META_STRING("moveDown"), jboolean>(text, layout); }
inline jboolean Selection::moveLeft(ref<android::text::Spannable> text, ref<android::text::Layout> layout) { return call_static_method<SCAPIX_META_STRING("moveLeft"), jboolean>(text, layout); }
inline jboolean Selection::moveRight(ref<android::text::Spannable> text, ref<android::text::Layout> layout) { return call_static_method<SCAPIX_META_STRING("moveRight"), jboolean>(text, layout); }
inline jboolean Selection::extendUp(ref<android::text::Spannable> text, ref<android::text::Layout> layout) { return call_static_method<SCAPIX_META_STRING("extendUp"), jboolean>(text, layout); }
inline jboolean Selection::extendDown(ref<android::text::Spannable> text, ref<android::text::Layout> layout) { return call_static_method<SCAPIX_META_STRING("extendDown"), jboolean>(text, layout); }
inline jboolean Selection::extendLeft(ref<android::text::Spannable> text, ref<android::text::Layout> layout) { return call_static_method<SCAPIX_META_STRING("extendLeft"), jboolean>(text, layout); }
inline jboolean Selection::extendRight(ref<android::text::Spannable> text, ref<android::text::Layout> layout) { return call_static_method<SCAPIX_META_STRING("extendRight"), jboolean>(text, layout); }
inline jboolean Selection::extendToLeftEdge(ref<android::text::Spannable> text, ref<android::text::Layout> layout) { return call_static_method<SCAPIX_META_STRING("extendToLeftEdge"), jboolean>(text, layout); }
inline jboolean Selection::extendToRightEdge(ref<android::text::Spannable> text, ref<android::text::Layout> layout) { return call_static_method<SCAPIX_META_STRING("extendToRightEdge"), jboolean>(text, layout); }
inline jboolean Selection::moveToLeftEdge(ref<android::text::Spannable> text, ref<android::text::Layout> layout) { return call_static_method<SCAPIX_META_STRING("moveToLeftEdge"), jboolean>(text, layout); }
inline jboolean Selection::moveToRightEdge(ref<android::text::Spannable> text, ref<android::text::Layout> layout) { return call_static_method<SCAPIX_META_STRING("moveToRightEdge"), jboolean>(text, layout); }

} // namespace android::text
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TEXT_SELECTION_H
