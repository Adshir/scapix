// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_TEXT_FORMAT_DATEUTILS_H
#define SCAPIX_ANDROID_TEXT_FORMAT_DATEUTILS_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::lang { class StringBuilder; }
namespace java::util { class Formatter; }

namespace android::text::format {

class DateUtils : public object_base<SCAPIX_META_STRING("android/text/format/DateUtils"),
	java::lang::Object>
{
public:

	static ref<java::lang::String> ABBREV_MONTH_FORMAT_();
	static ref<java::lang::String> ABBREV_WEEKDAY_FORMAT_();
	static jlong DAY_IN_MILLIS_();
	static jint FORMAT_12HOUR_();
	static jint FORMAT_24HOUR_();
	static jint FORMAT_ABBREV_ALL_();
	static jint FORMAT_ABBREV_MONTH_();
	static jint FORMAT_ABBREV_RELATIVE_();
	static jint FORMAT_ABBREV_TIME_();
	static jint FORMAT_ABBREV_WEEKDAY_();
	static jint FORMAT_CAP_AMPM_();
	static jint FORMAT_CAP_MIDNIGHT_();
	static jint FORMAT_CAP_NOON_();
	static jint FORMAT_CAP_NOON_MIDNIGHT_();
	static jint FORMAT_NO_MIDNIGHT_();
	static jint FORMAT_NO_MONTH_DAY_();
	static jint FORMAT_NO_NOON_();
	static jint FORMAT_NO_NOON_MIDNIGHT_();
	static jint FORMAT_NO_YEAR_();
	static jint FORMAT_NUMERIC_DATE_();
	static jint FORMAT_SHOW_DATE_();
	static jint FORMAT_SHOW_TIME_();
	static jint FORMAT_SHOW_WEEKDAY_();
	static jint FORMAT_SHOW_YEAR_();
	static jint FORMAT_UTC_();
	static jlong HOUR_IN_MILLIS_();
	static ref<java::lang::String> HOUR_MINUTE_24_();
	static jint LENGTH_LONG_();
	static jint LENGTH_MEDIUM_();
	static jint LENGTH_SHORT_();
	static jint LENGTH_SHORTER_();
	static jint LENGTH_SHORTEST_();
	static jlong MINUTE_IN_MILLIS_();
	static ref<java::lang::String> MONTH_DAY_FORMAT_();
	static ref<java::lang::String> MONTH_FORMAT_();
	static ref<java::lang::String> NUMERIC_MONTH_FORMAT_();
	static jlong SECOND_IN_MILLIS_();
	static ref<java::lang::String> WEEKDAY_FORMAT_();
	static jlong WEEK_IN_MILLIS_();
	static ref<java::lang::String> YEAR_FORMAT_();
	static ref<java::lang::String> YEAR_FORMAT_TWO_DIGITS_();
	static jlong YEAR_IN_MILLIS_();
	static ref<link::java::array<jint>> sameMonthTable();
	static ref<link::java::array<jint>> sameYearTable();

	static ref<DateUtils> new_object();
	static ref<java::lang::String> getDayOfWeekString(jint dayOfWeek, jint abbrev);
	static ref<java::lang::String> getAMPMString(jint ampm);
	static ref<java::lang::String> getMonthString(jint month, jint abbrev);
	static ref<java::lang::CharSequence> getRelativeTimeSpanString(jlong startTime);
	static ref<java::lang::CharSequence> getRelativeTimeSpanString(jlong time, jlong p2, jlong now);
	static ref<java::lang::CharSequence> getRelativeTimeSpanString(jlong time, jlong p2, jlong now, jint p4);
	static ref<java::lang::CharSequence> getRelativeDateTimeString(ref<android::content::Context> c, jlong time, jlong p3, jlong minResolution, jint p5);
	static ref<java::lang::String> formatElapsedTime(jlong elapsedSeconds);
	static ref<java::lang::String> formatElapsedTime(ref<java::lang::StringBuilder> recycle, jlong elapsedSeconds);
	static ref<java::lang::CharSequence> formatSameDayTime(jlong then, jlong p2, jint now, jint p4);
	static jboolean isToday(jlong when);
	static ref<java::lang::String> formatDateRange(ref<android::content::Context> context, jlong startMillis, jlong p3, jint endMillis);
	static ref<java::util::Formatter> formatDateRange(ref<android::content::Context> context, ref<java::util::Formatter> formatter, jlong startMillis, jlong p4, jint endMillis);
	static ref<java::util::Formatter> formatDateRange(ref<android::content::Context> context, ref<java::util::Formatter> formatter, jlong startMillis, jlong p4, jint endMillis, ref<java::lang::String> p6);
	static ref<java::lang::String> formatDateTime(ref<android::content::Context> context, jlong millis, jint p3);
	static ref<java::lang::CharSequence> getRelativeTimeSpanString(ref<android::content::Context> c, jlong millis, jboolean p3);
	static ref<java::lang::CharSequence> getRelativeTimeSpanString(ref<android::content::Context> c, jlong millis);

protected:

	DateUtils(handle_type h) : base_(h) {}

};

} // namespace android::text::format
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuilder.h>
#include <scapix/java_api/java/util/Formatter.h>

namespace scapix::java_api {
namespace android::text::format {

inline ref<java::lang::String> DateUtils::ABBREV_MONTH_FORMAT_() { return get_static_field<SCAPIX_META_STRING("ABBREV_MONTH_FORMAT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DateUtils::ABBREV_WEEKDAY_FORMAT_() { return get_static_field<SCAPIX_META_STRING("ABBREV_WEEKDAY_FORMAT"), ref<java::lang::String>>(); }
inline jlong DateUtils::DAY_IN_MILLIS_() { return get_static_field<SCAPIX_META_STRING("DAY_IN_MILLIS"), jlong>(); }
inline jint DateUtils::FORMAT_12HOUR_() { return get_static_field<SCAPIX_META_STRING("FORMAT_12HOUR"), jint>(); }
inline jint DateUtils::FORMAT_24HOUR_() { return get_static_field<SCAPIX_META_STRING("FORMAT_24HOUR"), jint>(); }
inline jint DateUtils::FORMAT_ABBREV_ALL_() { return get_static_field<SCAPIX_META_STRING("FORMAT_ABBREV_ALL"), jint>(); }
inline jint DateUtils::FORMAT_ABBREV_MONTH_() { return get_static_field<SCAPIX_META_STRING("FORMAT_ABBREV_MONTH"), jint>(); }
inline jint DateUtils::FORMAT_ABBREV_RELATIVE_() { return get_static_field<SCAPIX_META_STRING("FORMAT_ABBREV_RELATIVE"), jint>(); }
inline jint DateUtils::FORMAT_ABBREV_TIME_() { return get_static_field<SCAPIX_META_STRING("FORMAT_ABBREV_TIME"), jint>(); }
inline jint DateUtils::FORMAT_ABBREV_WEEKDAY_() { return get_static_field<SCAPIX_META_STRING("FORMAT_ABBREV_WEEKDAY"), jint>(); }
inline jint DateUtils::FORMAT_CAP_AMPM_() { return get_static_field<SCAPIX_META_STRING("FORMAT_CAP_AMPM"), jint>(); }
inline jint DateUtils::FORMAT_CAP_MIDNIGHT_() { return get_static_field<SCAPIX_META_STRING("FORMAT_CAP_MIDNIGHT"), jint>(); }
inline jint DateUtils::FORMAT_CAP_NOON_() { return get_static_field<SCAPIX_META_STRING("FORMAT_CAP_NOON"), jint>(); }
inline jint DateUtils::FORMAT_CAP_NOON_MIDNIGHT_() { return get_static_field<SCAPIX_META_STRING("FORMAT_CAP_NOON_MIDNIGHT"), jint>(); }
inline jint DateUtils::FORMAT_NO_MIDNIGHT_() { return get_static_field<SCAPIX_META_STRING("FORMAT_NO_MIDNIGHT"), jint>(); }
inline jint DateUtils::FORMAT_NO_MONTH_DAY_() { return get_static_field<SCAPIX_META_STRING("FORMAT_NO_MONTH_DAY"), jint>(); }
inline jint DateUtils::FORMAT_NO_NOON_() { return get_static_field<SCAPIX_META_STRING("FORMAT_NO_NOON"), jint>(); }
inline jint DateUtils::FORMAT_NO_NOON_MIDNIGHT_() { return get_static_field<SCAPIX_META_STRING("FORMAT_NO_NOON_MIDNIGHT"), jint>(); }
inline jint DateUtils::FORMAT_NO_YEAR_() { return get_static_field<SCAPIX_META_STRING("FORMAT_NO_YEAR"), jint>(); }
inline jint DateUtils::FORMAT_NUMERIC_DATE_() { return get_static_field<SCAPIX_META_STRING("FORMAT_NUMERIC_DATE"), jint>(); }
inline jint DateUtils::FORMAT_SHOW_DATE_() { return get_static_field<SCAPIX_META_STRING("FORMAT_SHOW_DATE"), jint>(); }
inline jint DateUtils::FORMAT_SHOW_TIME_() { return get_static_field<SCAPIX_META_STRING("FORMAT_SHOW_TIME"), jint>(); }
inline jint DateUtils::FORMAT_SHOW_WEEKDAY_() { return get_static_field<SCAPIX_META_STRING("FORMAT_SHOW_WEEKDAY"), jint>(); }
inline jint DateUtils::FORMAT_SHOW_YEAR_() { return get_static_field<SCAPIX_META_STRING("FORMAT_SHOW_YEAR"), jint>(); }
inline jint DateUtils::FORMAT_UTC_() { return get_static_field<SCAPIX_META_STRING("FORMAT_UTC"), jint>(); }
inline jlong DateUtils::HOUR_IN_MILLIS_() { return get_static_field<SCAPIX_META_STRING("HOUR_IN_MILLIS"), jlong>(); }
inline ref<java::lang::String> DateUtils::HOUR_MINUTE_24_() { return get_static_field<SCAPIX_META_STRING("HOUR_MINUTE_24"), ref<java::lang::String>>(); }
inline jint DateUtils::LENGTH_LONG_() { return get_static_field<SCAPIX_META_STRING("LENGTH_LONG"), jint>(); }
inline jint DateUtils::LENGTH_MEDIUM_() { return get_static_field<SCAPIX_META_STRING("LENGTH_MEDIUM"), jint>(); }
inline jint DateUtils::LENGTH_SHORT_() { return get_static_field<SCAPIX_META_STRING("LENGTH_SHORT"), jint>(); }
inline jint DateUtils::LENGTH_SHORTER_() { return get_static_field<SCAPIX_META_STRING("LENGTH_SHORTER"), jint>(); }
inline jint DateUtils::LENGTH_SHORTEST_() { return get_static_field<SCAPIX_META_STRING("LENGTH_SHORTEST"), jint>(); }
inline jlong DateUtils::MINUTE_IN_MILLIS_() { return get_static_field<SCAPIX_META_STRING("MINUTE_IN_MILLIS"), jlong>(); }
inline ref<java::lang::String> DateUtils::MONTH_DAY_FORMAT_() { return get_static_field<SCAPIX_META_STRING("MONTH_DAY_FORMAT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DateUtils::MONTH_FORMAT_() { return get_static_field<SCAPIX_META_STRING("MONTH_FORMAT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DateUtils::NUMERIC_MONTH_FORMAT_() { return get_static_field<SCAPIX_META_STRING("NUMERIC_MONTH_FORMAT"), ref<java::lang::String>>(); }
inline jlong DateUtils::SECOND_IN_MILLIS_() { return get_static_field<SCAPIX_META_STRING("SECOND_IN_MILLIS"), jlong>(); }
inline ref<java::lang::String> DateUtils::WEEKDAY_FORMAT_() { return get_static_field<SCAPIX_META_STRING("WEEKDAY_FORMAT"), ref<java::lang::String>>(); }
inline jlong DateUtils::WEEK_IN_MILLIS_() { return get_static_field<SCAPIX_META_STRING("WEEK_IN_MILLIS"), jlong>(); }
inline ref<java::lang::String> DateUtils::YEAR_FORMAT_() { return get_static_field<SCAPIX_META_STRING("YEAR_FORMAT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> DateUtils::YEAR_FORMAT_TWO_DIGITS_() { return get_static_field<SCAPIX_META_STRING("YEAR_FORMAT_TWO_DIGITS"), ref<java::lang::String>>(); }
inline jlong DateUtils::YEAR_IN_MILLIS_() { return get_static_field<SCAPIX_META_STRING("YEAR_IN_MILLIS"), jlong>(); }
inline ref<link::java::array<jint>> DateUtils::sameMonthTable() { return get_static_field<SCAPIX_META_STRING("sameMonthTable"), ref<link::java::array<jint>>>(); }
inline ref<link::java::array<jint>> DateUtils::sameYearTable() { return get_static_field<SCAPIX_META_STRING("sameYearTable"), ref<link::java::array<jint>>>(); }
inline ref<DateUtils> DateUtils::new_object() { return base_::new_object(); }
inline ref<java::lang::String> DateUtils::getDayOfWeekString(jint dayOfWeek, jint abbrev) { return call_static_method<SCAPIX_META_STRING("getDayOfWeekString"), ref<java::lang::String>>(dayOfWeek, abbrev); }
inline ref<java::lang::String> DateUtils::getAMPMString(jint ampm) { return call_static_method<SCAPIX_META_STRING("getAMPMString"), ref<java::lang::String>>(ampm); }
inline ref<java::lang::String> DateUtils::getMonthString(jint month, jint abbrev) { return call_static_method<SCAPIX_META_STRING("getMonthString"), ref<java::lang::String>>(month, abbrev); }
inline ref<java::lang::CharSequence> DateUtils::getRelativeTimeSpanString(jlong startTime) { return call_static_method<SCAPIX_META_STRING("getRelativeTimeSpanString"), ref<java::lang::CharSequence>>(startTime); }
inline ref<java::lang::CharSequence> DateUtils::getRelativeTimeSpanString(jlong time, jlong p2, jlong now) { return call_static_method<SCAPIX_META_STRING("getRelativeTimeSpanString"), ref<java::lang::CharSequence>>(time, p2, now); }
inline ref<java::lang::CharSequence> DateUtils::getRelativeTimeSpanString(jlong time, jlong p2, jlong now, jint p4) { return call_static_method<SCAPIX_META_STRING("getRelativeTimeSpanString"), ref<java::lang::CharSequence>>(time, p2, now, p4); }
inline ref<java::lang::CharSequence> DateUtils::getRelativeDateTimeString(ref<android::content::Context> c, jlong time, jlong p3, jlong minResolution, jint p5) { return call_static_method<SCAPIX_META_STRING("getRelativeDateTimeString"), ref<java::lang::CharSequence>>(c, time, p3, minResolution, p5); }
inline ref<java::lang::String> DateUtils::formatElapsedTime(jlong elapsedSeconds) { return call_static_method<SCAPIX_META_STRING("formatElapsedTime"), ref<java::lang::String>>(elapsedSeconds); }
inline ref<java::lang::String> DateUtils::formatElapsedTime(ref<java::lang::StringBuilder> recycle, jlong elapsedSeconds) { return call_static_method<SCAPIX_META_STRING("formatElapsedTime"), ref<java::lang::String>>(recycle, elapsedSeconds); }
inline ref<java::lang::CharSequence> DateUtils::formatSameDayTime(jlong then, jlong p2, jint now, jint p4) { return call_static_method<SCAPIX_META_STRING("formatSameDayTime"), ref<java::lang::CharSequence>>(then, p2, now, p4); }
inline jboolean DateUtils::isToday(jlong when) { return call_static_method<SCAPIX_META_STRING("isToday"), jboolean>(when); }
inline ref<java::lang::String> DateUtils::formatDateRange(ref<android::content::Context> context, jlong startMillis, jlong p3, jint endMillis) { return call_static_method<SCAPIX_META_STRING("formatDateRange"), ref<java::lang::String>>(context, startMillis, p3, endMillis); }
inline ref<java::util::Formatter> DateUtils::formatDateRange(ref<android::content::Context> context, ref<java::util::Formatter> formatter, jlong startMillis, jlong p4, jint endMillis) { return call_static_method<SCAPIX_META_STRING("formatDateRange"), ref<java::util::Formatter>>(context, formatter, startMillis, p4, endMillis); }
inline ref<java::util::Formatter> DateUtils::formatDateRange(ref<android::content::Context> context, ref<java::util::Formatter> formatter, jlong startMillis, jlong p4, jint endMillis, ref<java::lang::String> p6) { return call_static_method<SCAPIX_META_STRING("formatDateRange"), ref<java::util::Formatter>>(context, formatter, startMillis, p4, endMillis, p6); }
inline ref<java::lang::String> DateUtils::formatDateTime(ref<android::content::Context> context, jlong millis, jint p3) { return call_static_method<SCAPIX_META_STRING("formatDateTime"), ref<java::lang::String>>(context, millis, p3); }
inline ref<java::lang::CharSequence> DateUtils::getRelativeTimeSpanString(ref<android::content::Context> c, jlong millis, jboolean p3) { return call_static_method<SCAPIX_META_STRING("getRelativeTimeSpanString"), ref<java::lang::CharSequence>>(c, millis, p3); }
inline ref<java::lang::CharSequence> DateUtils::getRelativeTimeSpanString(ref<android::content::Context> c, jlong millis) { return call_static_method<SCAPIX_META_STRING("getRelativeTimeSpanString"), ref<java::lang::CharSequence>>(c, millis); }

} // namespace android::text::format
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TEXT_FORMAT_DATEUTILS_H
