// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_TEXT_FORMAT_TIME_H
#define SCAPIX_ANDROID_TEXT_FORMAT_TIME_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace android::text::format {

class Time : public object_base<SCAPIX_META_STRING("android/text/format/Time"),
	java::lang::Object>
{
public:

	static jint EPOCH_JULIAN_DAY_();
	static jint FRIDAY_();
	static jint HOUR_();
	static jint MINUTE_();
	static jint MONDAY_();
	static jint MONDAY_BEFORE_JULIAN_EPOCH_();
	static jint MONTH_();
	static jint MONTH_DAY_();
	static jint SATURDAY_();
	static jint SECOND_();
	static jint SUNDAY_();
	static jint THURSDAY_();
	static ref<java::lang::String> TIMEZONE_UTC_();
	static jint TUESDAY_();
	static jint WEDNESDAY_();
	static jint WEEK_DAY_();
	static jint WEEK_NUM_();
	static jint YEAR_();
	static jint YEAR_DAY_();
	jboolean allDay();
	void allDay(jboolean);
	jlong gmtoff();
	void gmtoff(jlong);
	jint hour();
	void hour(jint);
	jint isDst();
	void isDst(jint);
	jint minute();
	void minute(jint);
	jint month();
	void month(jint);
	jint monthDay();
	void monthDay(jint);
	jint second();
	void second(jint);
	ref<java::lang::String> timezone();
	void timezone(ref<java::lang::String>);
	jint weekDay();
	void weekDay(jint);
	jint year();
	void year(jint);
	jint yearDay();
	void yearDay(jint);

	static ref<Time> new_object(ref<java::lang::String> timezoneId);
	static ref<Time> new_object();
	static ref<Time> new_object(ref<android::text::format::Time> other);
	jlong normalize(jboolean ignoreDst);
	void switchTimezone(ref<java::lang::String> timezone);
	jint getActualMaximum(jint field);
	void clear(ref<java::lang::String> timezoneId);
	static jint compare(ref<android::text::format::Time> a, ref<android::text::format::Time> b);
	ref<java::lang::String> format(ref<java::lang::String> format);
	ref<java::lang::String> toString();
	jboolean parse(ref<java::lang::String> s);
	jboolean parse3339(ref<java::lang::String> s);
	static ref<java::lang::String> getCurrentTimezone();
	void setToNow();
	jlong toMillis(jboolean ignoreDst);
	void set(jlong millis);
	ref<java::lang::String> format2445();
	void set(ref<android::text::format::Time> that);
	void set(jint second, jint minute, jint hour, jint monthDay, jint month, jint year);
	void set(jint monthDay, jint month, jint year);
	jboolean before(ref<android::text::format::Time> that);
	jboolean after(ref<android::text::format::Time> that);
	jint getWeekNumber();
	ref<java::lang::String> format3339(jboolean allDay);
	static jboolean isEpoch(ref<android::text::format::Time> time);
	static jint getJulianDay(jlong millis, jlong p2);
	jlong setJulianDay(jint julianDay);
	static jint getWeeksSinceEpochFromJulianDay(jint julianDay, jint firstDayOfWeek);
	static jint getJulianMondayFromWeeksSinceEpoch(jint week);

protected:

	Time(handle_type h) : base_(h) {}

};

} // namespace android::text::format
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::text::format {

inline jint Time::EPOCH_JULIAN_DAY_() { return get_static_field<SCAPIX_META_STRING("EPOCH_JULIAN_DAY"), jint>(); }
inline jint Time::FRIDAY_() { return get_static_field<SCAPIX_META_STRING("FRIDAY"), jint>(); }
inline jint Time::HOUR_() { return get_static_field<SCAPIX_META_STRING("HOUR"), jint>(); }
inline jint Time::MINUTE_() { return get_static_field<SCAPIX_META_STRING("MINUTE"), jint>(); }
inline jint Time::MONDAY_() { return get_static_field<SCAPIX_META_STRING("MONDAY"), jint>(); }
inline jint Time::MONDAY_BEFORE_JULIAN_EPOCH_() { return get_static_field<SCAPIX_META_STRING("MONDAY_BEFORE_JULIAN_EPOCH"), jint>(); }
inline jint Time::MONTH_() { return get_static_field<SCAPIX_META_STRING("MONTH"), jint>(); }
inline jint Time::MONTH_DAY_() { return get_static_field<SCAPIX_META_STRING("MONTH_DAY"), jint>(); }
inline jint Time::SATURDAY_() { return get_static_field<SCAPIX_META_STRING("SATURDAY"), jint>(); }
inline jint Time::SECOND_() { return get_static_field<SCAPIX_META_STRING("SECOND"), jint>(); }
inline jint Time::SUNDAY_() { return get_static_field<SCAPIX_META_STRING("SUNDAY"), jint>(); }
inline jint Time::THURSDAY_() { return get_static_field<SCAPIX_META_STRING("THURSDAY"), jint>(); }
inline ref<java::lang::String> Time::TIMEZONE_UTC_() { return get_static_field<SCAPIX_META_STRING("TIMEZONE_UTC"), ref<java::lang::String>>(); }
inline jint Time::TUESDAY_() { return get_static_field<SCAPIX_META_STRING("TUESDAY"), jint>(); }
inline jint Time::WEDNESDAY_() { return get_static_field<SCAPIX_META_STRING("WEDNESDAY"), jint>(); }
inline jint Time::WEEK_DAY_() { return get_static_field<SCAPIX_META_STRING("WEEK_DAY"), jint>(); }
inline jint Time::WEEK_NUM_() { return get_static_field<SCAPIX_META_STRING("WEEK_NUM"), jint>(); }
inline jint Time::YEAR_() { return get_static_field<SCAPIX_META_STRING("YEAR"), jint>(); }
inline jint Time::YEAR_DAY_() { return get_static_field<SCAPIX_META_STRING("YEAR_DAY"), jint>(); }
inline jboolean Time::allDay() { return get_field<SCAPIX_META_STRING("allDay"), jboolean>(); }
inline void Time::allDay(jboolean v) { set_field<SCAPIX_META_STRING("allDay"), jboolean>(v); }
inline jlong Time::gmtoff() { return get_field<SCAPIX_META_STRING("gmtoff"), jlong>(); }
inline void Time::gmtoff(jlong v) { set_field<SCAPIX_META_STRING("gmtoff"), jlong>(v); }
inline jint Time::hour() { return get_field<SCAPIX_META_STRING("hour"), jint>(); }
inline void Time::hour(jint v) { set_field<SCAPIX_META_STRING("hour"), jint>(v); }
inline jint Time::isDst() { return get_field<SCAPIX_META_STRING("isDst"), jint>(); }
inline void Time::isDst(jint v) { set_field<SCAPIX_META_STRING("isDst"), jint>(v); }
inline jint Time::minute() { return get_field<SCAPIX_META_STRING("minute"), jint>(); }
inline void Time::minute(jint v) { set_field<SCAPIX_META_STRING("minute"), jint>(v); }
inline jint Time::month() { return get_field<SCAPIX_META_STRING("month"), jint>(); }
inline void Time::month(jint v) { set_field<SCAPIX_META_STRING("month"), jint>(v); }
inline jint Time::monthDay() { return get_field<SCAPIX_META_STRING("monthDay"), jint>(); }
inline void Time::monthDay(jint v) { set_field<SCAPIX_META_STRING("monthDay"), jint>(v); }
inline jint Time::second() { return get_field<SCAPIX_META_STRING("second"), jint>(); }
inline void Time::second(jint v) { set_field<SCAPIX_META_STRING("second"), jint>(v); }
inline ref<java::lang::String> Time::timezone() { return get_field<SCAPIX_META_STRING("timezone"), ref<java::lang::String>>(); }
inline void Time::timezone(ref<java::lang::String> v) { set_field<SCAPIX_META_STRING("timezone"), ref<java::lang::String>>(v); }
inline jint Time::weekDay() { return get_field<SCAPIX_META_STRING("weekDay"), jint>(); }
inline void Time::weekDay(jint v) { set_field<SCAPIX_META_STRING("weekDay"), jint>(v); }
inline jint Time::year() { return get_field<SCAPIX_META_STRING("year"), jint>(); }
inline void Time::year(jint v) { set_field<SCAPIX_META_STRING("year"), jint>(v); }
inline jint Time::yearDay() { return get_field<SCAPIX_META_STRING("yearDay"), jint>(); }
inline void Time::yearDay(jint v) { set_field<SCAPIX_META_STRING("yearDay"), jint>(v); }
inline ref<Time> Time::new_object(ref<java::lang::String> timezoneId) { return base_::new_object(timezoneId); }
inline ref<Time> Time::new_object() { return base_::new_object(); }
inline ref<Time> Time::new_object(ref<android::text::format::Time> other) { return base_::new_object(other); }
inline jlong Time::normalize(jboolean ignoreDst) { return call_method<SCAPIX_META_STRING("normalize"), jlong>(ignoreDst); }
inline void Time::switchTimezone(ref<java::lang::String> timezone) { return call_method<SCAPIX_META_STRING("switchTimezone"), void>(timezone); }
inline jint Time::getActualMaximum(jint field) { return call_method<SCAPIX_META_STRING("getActualMaximum"), jint>(field); }
inline void Time::clear(ref<java::lang::String> timezoneId) { return call_method<SCAPIX_META_STRING("clear"), void>(timezoneId); }
inline jint Time::compare(ref<android::text::format::Time> a, ref<android::text::format::Time> b) { return call_static_method<SCAPIX_META_STRING("compare"), jint>(a, b); }
inline ref<java::lang::String> Time::format(ref<java::lang::String> format) { return call_method<SCAPIX_META_STRING("format"), ref<java::lang::String>>(format); }
inline ref<java::lang::String> Time::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean Time::parse(ref<java::lang::String> s) { return call_method<SCAPIX_META_STRING("parse"), jboolean>(s); }
inline jboolean Time::parse3339(ref<java::lang::String> s) { return call_method<SCAPIX_META_STRING("parse3339"), jboolean>(s); }
inline ref<java::lang::String> Time::getCurrentTimezone() { return call_static_method<SCAPIX_META_STRING("getCurrentTimezone"), ref<java::lang::String>>(); }
inline void Time::setToNow() { return call_method<SCAPIX_META_STRING("setToNow"), void>(); }
inline jlong Time::toMillis(jboolean ignoreDst) { return call_method<SCAPIX_META_STRING("toMillis"), jlong>(ignoreDst); }
inline void Time::set(jlong millis) { return call_method<SCAPIX_META_STRING("set"), void>(millis); }
inline ref<java::lang::String> Time::format2445() { return call_method<SCAPIX_META_STRING("format2445"), ref<java::lang::String>>(); }
inline void Time::set(ref<android::text::format::Time> that) { return call_method<SCAPIX_META_STRING("set"), void>(that); }
inline void Time::set(jint second, jint minute, jint hour, jint monthDay, jint month, jint year) { return call_method<SCAPIX_META_STRING("set"), void>(second, minute, hour, monthDay, month, year); }
inline void Time::set(jint monthDay, jint month, jint year) { return call_method<SCAPIX_META_STRING("set"), void>(monthDay, month, year); }
inline jboolean Time::before(ref<android::text::format::Time> that) { return call_method<SCAPIX_META_STRING("before"), jboolean>(that); }
inline jboolean Time::after(ref<android::text::format::Time> that) { return call_method<SCAPIX_META_STRING("after"), jboolean>(that); }
inline jint Time::getWeekNumber() { return call_method<SCAPIX_META_STRING("getWeekNumber"), jint>(); }
inline ref<java::lang::String> Time::format3339(jboolean allDay) { return call_method<SCAPIX_META_STRING("format3339"), ref<java::lang::String>>(allDay); }
inline jboolean Time::isEpoch(ref<android::text::format::Time> time) { return call_static_method<SCAPIX_META_STRING("isEpoch"), jboolean>(time); }
inline jint Time::getJulianDay(jlong millis, jlong p2) { return call_static_method<SCAPIX_META_STRING("getJulianDay"), jint>(millis, p2); }
inline jlong Time::setJulianDay(jint julianDay) { return call_method<SCAPIX_META_STRING("setJulianDay"), jlong>(julianDay); }
inline jint Time::getWeeksSinceEpochFromJulianDay(jint julianDay, jint firstDayOfWeek) { return call_static_method<SCAPIX_META_STRING("getWeeksSinceEpochFromJulianDay"), jint>(julianDay, firstDayOfWeek); }
inline jint Time::getJulianMondayFromWeeksSinceEpoch(jint week) { return call_static_method<SCAPIX_META_STRING("getJulianMondayFromWeeksSinceEpoch"), jint>(week); }

} // namespace android::text::format
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TEXT_FORMAT_TIME_H
