// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_TEXT_BIDIFORMATTER_H
#define SCAPIX_ANDROID_TEXT_BIDIFORMATTER_H

namespace scapix::java_api {

namespace android::text { class TextDirectionHeuristic; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::util { class Locale; }
namespace android::text { class BidiFormatter_Builder; }

namespace android::text {

class BidiFormatter : public object_base<SCAPIX_META_STRING("android/text/BidiFormatter"),
	java::lang::Object>
{
public:

	using Builder = BidiFormatter_Builder;

	static ref<android::text::BidiFormatter> getInstance();
	static ref<android::text::BidiFormatter> getInstance(jboolean rtlContext);
	static ref<android::text::BidiFormatter> getInstance(ref<java::util::Locale> locale);
	jboolean isRtlContext();
	jboolean getStereoReset();
	jboolean isRtl(ref<java::lang::String> str);
	jboolean isRtl(ref<java::lang::CharSequence> str);
	ref<java::lang::String> unicodeWrap(ref<java::lang::String> str, ref<android::text::TextDirectionHeuristic> heuristic, jboolean isolate);
	ref<java::lang::CharSequence> unicodeWrap(ref<java::lang::CharSequence> str, ref<android::text::TextDirectionHeuristic> heuristic, jboolean isolate);
	ref<java::lang::String> unicodeWrap(ref<java::lang::String> str, ref<android::text::TextDirectionHeuristic> heuristic);
	ref<java::lang::CharSequence> unicodeWrap(ref<java::lang::CharSequence> str, ref<android::text::TextDirectionHeuristic> heuristic);
	ref<java::lang::String> unicodeWrap(ref<java::lang::String> str, jboolean isolate);
	ref<java::lang::CharSequence> unicodeWrap(ref<java::lang::CharSequence> str, jboolean isolate);
	ref<java::lang::String> unicodeWrap(ref<java::lang::String> str);
	ref<java::lang::CharSequence> unicodeWrap(ref<java::lang::CharSequence> str);

protected:

	BidiFormatter(handle_type h) : base_(h) {}

};

} // namespace android::text
} // namespace scapix::java_api

#include <scapix/java_api/android/text/TextDirectionHeuristic.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>

namespace scapix::java_api {
namespace android::text {

inline ref<android::text::BidiFormatter> BidiFormatter::getInstance() { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<android::text::BidiFormatter>>(); }
inline ref<android::text::BidiFormatter> BidiFormatter::getInstance(jboolean rtlContext) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<android::text::BidiFormatter>>(rtlContext); }
inline ref<android::text::BidiFormatter> BidiFormatter::getInstance(ref<java::util::Locale> locale) { return call_static_method<SCAPIX_META_STRING("getInstance"), ref<android::text::BidiFormatter>>(locale); }
inline jboolean BidiFormatter::isRtlContext() { return call_method<SCAPIX_META_STRING("isRtlContext"), jboolean>(); }
inline jboolean BidiFormatter::getStereoReset() { return call_method<SCAPIX_META_STRING("getStereoReset"), jboolean>(); }
inline jboolean BidiFormatter::isRtl(ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("isRtl"), jboolean>(str); }
inline jboolean BidiFormatter::isRtl(ref<java::lang::CharSequence> str) { return call_method<SCAPIX_META_STRING("isRtl"), jboolean>(str); }
inline ref<java::lang::String> BidiFormatter::unicodeWrap(ref<java::lang::String> str, ref<android::text::TextDirectionHeuristic> heuristic, jboolean isolate) { return call_method<SCAPIX_META_STRING("unicodeWrap"), ref<java::lang::String>>(str, heuristic, isolate); }
inline ref<java::lang::CharSequence> BidiFormatter::unicodeWrap(ref<java::lang::CharSequence> str, ref<android::text::TextDirectionHeuristic> heuristic, jboolean isolate) { return call_method<SCAPIX_META_STRING("unicodeWrap"), ref<java::lang::CharSequence>>(str, heuristic, isolate); }
inline ref<java::lang::String> BidiFormatter::unicodeWrap(ref<java::lang::String> str, ref<android::text::TextDirectionHeuristic> heuristic) { return call_method<SCAPIX_META_STRING("unicodeWrap"), ref<java::lang::String>>(str, heuristic); }
inline ref<java::lang::CharSequence> BidiFormatter::unicodeWrap(ref<java::lang::CharSequence> str, ref<android::text::TextDirectionHeuristic> heuristic) { return call_method<SCAPIX_META_STRING("unicodeWrap"), ref<java::lang::CharSequence>>(str, heuristic); }
inline ref<java::lang::String> BidiFormatter::unicodeWrap(ref<java::lang::String> str, jboolean isolate) { return call_method<SCAPIX_META_STRING("unicodeWrap"), ref<java::lang::String>>(str, isolate); }
inline ref<java::lang::CharSequence> BidiFormatter::unicodeWrap(ref<java::lang::CharSequence> str, jboolean isolate) { return call_method<SCAPIX_META_STRING("unicodeWrap"), ref<java::lang::CharSequence>>(str, isolate); }
inline ref<java::lang::String> BidiFormatter::unicodeWrap(ref<java::lang::String> str) { return call_method<SCAPIX_META_STRING("unicodeWrap"), ref<java::lang::String>>(str); }
inline ref<java::lang::CharSequence> BidiFormatter::unicodeWrap(ref<java::lang::CharSequence> str) { return call_method<SCAPIX_META_STRING("unicodeWrap"), ref<java::lang::CharSequence>>(str); }

} // namespace android::text
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TEXT_BIDIFORMATTER_H
