// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/text/Spannable.h>

#ifndef SCAPIX_ANDROID_TEXT_PRECOMPUTEDTEXT_H
#define SCAPIX_ANDROID_TEXT_PRECOMPUTEDTEXT_H

namespace scapix::java_api {

namespace android::graphics { class Rect; }
namespace android::text { class PrecomputedText_Params; }
namespace java::lang { class CharSequence; }
namespace java::lang { class Class; }
namespace java::lang { class String; }

namespace android::text {

class PrecomputedText : public object_base<SCAPIX_META_STRING("android/text/PrecomputedText"),
	java::lang::Object,
	android::text::Spannable>
{
public:

	using Params = PrecomputedText_Params;

	static ref<android::text::PrecomputedText> create(ref<java::lang::CharSequence> text, ref<android::text::PrecomputedText_Params> params);
	ref<android::text::PrecomputedText_Params> getParams();
	jint getParagraphCount();
	jint getParagraphStart(jint paraIndex);
	jint getParagraphEnd(jint paraIndex);
	jfloat getWidth(jint start, jint end);
	void getBounds(jint start, jint end, ref<android::graphics::Rect> bounds);
	void setSpan(ref<java::lang::Object> what, jint start, jint end, jint flags);
	void removeSpan(ref<java::lang::Object> what);
	ref<link::java::array<java::lang::Object>> getSpans(jint start, jint end, ref<java::lang::Class> type);
	jint getSpanStart(ref<java::lang::Object> tag);
	jint getSpanEnd(ref<java::lang::Object> tag);
	jint getSpanFlags(ref<java::lang::Object> tag);
	jint nextSpanTransition(jint start, jint limit, ref<java::lang::Class> type);
	jint length();
	jchar charAt(jint index);
	ref<java::lang::CharSequence> subSequence(jint start, jint end);
	ref<java::lang::String> toString();

protected:

	PrecomputedText(handle_type h) : base_(h) {}

};

} // namespace android::text
} // namespace scapix::java_api

#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/text/PrecomputedText_Params.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::text {

inline ref<android::text::PrecomputedText> PrecomputedText::create(ref<java::lang::CharSequence> text, ref<android::text::PrecomputedText_Params> params) { return call_static_method<SCAPIX_META_STRING("create"), ref<android::text::PrecomputedText>>(text, params); }
inline ref<android::text::PrecomputedText_Params> PrecomputedText::getParams() { return call_method<SCAPIX_META_STRING("getParams"), ref<android::text::PrecomputedText_Params>>(); }
inline jint PrecomputedText::getParagraphCount() { return call_method<SCAPIX_META_STRING("getParagraphCount"), jint>(); }
inline jint PrecomputedText::getParagraphStart(jint paraIndex) { return call_method<SCAPIX_META_STRING("getParagraphStart"), jint>(paraIndex); }
inline jint PrecomputedText::getParagraphEnd(jint paraIndex) { return call_method<SCAPIX_META_STRING("getParagraphEnd"), jint>(paraIndex); }
inline jfloat PrecomputedText::getWidth(jint start, jint end) { return call_method<SCAPIX_META_STRING("getWidth"), jfloat>(start, end); }
inline void PrecomputedText::getBounds(jint start, jint end, ref<android::graphics::Rect> bounds) { return call_method<SCAPIX_META_STRING("getBounds"), void>(start, end, bounds); }
inline void PrecomputedText::setSpan(ref<java::lang::Object> what, jint start, jint end, jint flags) { return call_method<SCAPIX_META_STRING("setSpan"), void>(what, start, end, flags); }
inline void PrecomputedText::removeSpan(ref<java::lang::Object> what) { return call_method<SCAPIX_META_STRING("removeSpan"), void>(what); }
inline ref<link::java::array<java::lang::Object>> PrecomputedText::getSpans(jint start, jint end, ref<java::lang::Class> type) { return call_method<SCAPIX_META_STRING("getSpans"), ref<link::java::array<java::lang::Object>>>(start, end, type); }
inline jint PrecomputedText::getSpanStart(ref<java::lang::Object> tag) { return call_method<SCAPIX_META_STRING("getSpanStart"), jint>(tag); }
inline jint PrecomputedText::getSpanEnd(ref<java::lang::Object> tag) { return call_method<SCAPIX_META_STRING("getSpanEnd"), jint>(tag); }
inline jint PrecomputedText::getSpanFlags(ref<java::lang::Object> tag) { return call_method<SCAPIX_META_STRING("getSpanFlags"), jint>(tag); }
inline jint PrecomputedText::nextSpanTransition(jint start, jint limit, ref<java::lang::Class> type) { return call_method<SCAPIX_META_STRING("nextSpanTransition"), jint>(start, limit, type); }
inline jint PrecomputedText::length() { return call_method<SCAPIX_META_STRING("length"), jint>(); }
inline jchar PrecomputedText::charAt(jint index) { return call_method<SCAPIX_META_STRING("charAt"), jchar>(index); }
inline ref<java::lang::CharSequence> PrecomputedText::subSequence(jint start, jint end) { return call_method<SCAPIX_META_STRING("subSequence"), ref<java::lang::CharSequence>>(start, end); }
inline ref<java::lang::String> PrecomputedText::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::text
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TEXT_PRECOMPUTEDTEXT_H
