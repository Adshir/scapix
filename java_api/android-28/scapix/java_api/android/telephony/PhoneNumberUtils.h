// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_TELEPHONY_PHONENUMBERUTILS_H
#define SCAPIX_ANDROID_TELEPHONY_PHONENUMBERUTILS_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content { class Intent; }
namespace android::text { class Editable; }
namespace android::text { class Spannable; }
namespace android::text::style { class TtsSpan; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::util { class Locale; }

namespace android::telephony {

class PhoneNumberUtils : public object_base<SCAPIX_META_STRING("android/telephony/PhoneNumberUtils"),
	java::lang::Object>
{
public:

	static jint BCD_EXTENDED_TYPE_CALLED_PARTY_();
	static jint BCD_EXTENDED_TYPE_EF_ADN_();
	static jint FORMAT_JAPAN_();
	static jint FORMAT_NANP_();
	static jint FORMAT_UNKNOWN_();
	static jchar PAUSE_();
	static jint TOA_International();
	static jint TOA_Unknown();
	static jchar WAIT_();
	static jchar WILD_();

	static ref<PhoneNumberUtils> new_object();
	static jboolean isISODigit(jchar c);
	static jboolean is12Key(jchar c);
	static jboolean isDialable(jchar c);
	static jboolean isReallyDialable(jchar c);
	static jboolean isNonSeparator(jchar c);
	static jboolean isStartsPostDial(jchar c);
	static ref<java::lang::String> getNumberFromIntent(ref<android::content::Intent> intent, ref<android::content::Context> context);
	static ref<java::lang::String> extractNetworkPortion(ref<java::lang::String> phoneNumber);
	static ref<java::lang::String> stripSeparators(ref<java::lang::String> phoneNumber);
	static ref<java::lang::String> extractPostDialPortion(ref<java::lang::String> phoneNumber);
	static jboolean compare(ref<java::lang::String> a, ref<java::lang::String> b);
	static jboolean compare(ref<android::content::Context> context, ref<java::lang::String> a, ref<java::lang::String> b);
	static ref<java::lang::String> toCallerIDMinMatch(ref<java::lang::String> phoneNumber);
	static ref<java::lang::String> getStrippedReversed(ref<java::lang::String> phoneNumber);
	static ref<java::lang::String> stringFromStringAndTOA(ref<java::lang::String> s, jint TOA_);
	static jint toaFromString(ref<java::lang::String> s);
	static ref<java::lang::String> calledPartyBCDToString(ref<link::java::array<jbyte>> bytes, jint offset, jint length);
	static ref<java::lang::String> calledPartyBCDToString(ref<link::java::array<jbyte>> bytes, jint offset, jint length, jint bcdExtType);
	static ref<java::lang::String> calledPartyBCDFragmentToString(ref<link::java::array<jbyte>> bytes, jint offset, jint length);
	static ref<java::lang::String> calledPartyBCDFragmentToString(ref<link::java::array<jbyte>> bytes, jint offset, jint length, jint bcdExtType);
	static jboolean isWellFormedSmsAddress(ref<java::lang::String> address);
	static jboolean isGlobalPhoneNumber(ref<java::lang::String> phoneNumber);
	static ref<link::java::array<jbyte>> networkPortionToCalledPartyBCD(ref<java::lang::String> s);
	static ref<link::java::array<jbyte>> networkPortionToCalledPartyBCDWithLength(ref<java::lang::String> s);
	static ref<link::java::array<jbyte>> numberToCalledPartyBCD(ref<java::lang::String> number);
	static ref<link::java::array<jbyte>> numberToCalledPartyBCD(ref<java::lang::String> number, jint bcdExtType);
	static ref<java::lang::String> formatNumber(ref<java::lang::String> source);
	static jint getFormatTypeForLocale(ref<java::util::Locale> locale);
	static void formatNumber(ref<android::text::Editable> text, jint defaultFormattingType);
	static void formatNanpNumber(ref<android::text::Editable> text);
	static void formatJapaneseNumber(ref<android::text::Editable> text);
	static ref<java::lang::String> formatNumberToE164(ref<java::lang::String> phoneNumber, ref<java::lang::String> defaultCountryIso);
	static ref<java::lang::String> formatNumberToRFC3966(ref<java::lang::String> phoneNumber, ref<java::lang::String> defaultCountryIso);
	static ref<java::lang::String> formatNumber(ref<java::lang::String> phoneNumber, ref<java::lang::String> defaultCountryIso);
	static ref<java::lang::String> formatNumber(ref<java::lang::String> phoneNumber, ref<java::lang::String> phoneNumberE164, ref<java::lang::String> defaultCountryIso);
	static ref<java::lang::String> normalizeNumber(ref<java::lang::String> phoneNumber);
	static ref<java::lang::String> replaceUnicodeDigits(ref<java::lang::String> number);
	static jboolean isEmergencyNumber(ref<java::lang::String> number);
	static jboolean isLocalEmergencyNumber(ref<android::content::Context> context, ref<java::lang::String> number);
	static jboolean isVoiceMailNumber(ref<java::lang::String> number);
	static ref<java::lang::String> convertKeypadLettersToDigits(ref<java::lang::String> input);
	static ref<java::lang::CharSequence> createTtsSpannable(ref<java::lang::CharSequence> phoneNumber);
	static void addTtsSpan(ref<android::text::Spannable> s, jint start, jint endExclusive);
	static ref<android::text::style::TtsSpan> createTtsSpan(ref<java::lang::String> phoneNumberString);

protected:

	PhoneNumberUtils(handle_type h) : base_(h) {}

};

} // namespace android::telephony
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/text/Editable.h>
#include <scapix/java_api/android/text/Spannable.h>
#include <scapix/java_api/android/text/style/TtsSpan.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>

namespace scapix::java_api {
namespace android::telephony {

inline jint PhoneNumberUtils::BCD_EXTENDED_TYPE_CALLED_PARTY_() { return get_static_field<SCAPIX_META_STRING("BCD_EXTENDED_TYPE_CALLED_PARTY"), jint>(); }
inline jint PhoneNumberUtils::BCD_EXTENDED_TYPE_EF_ADN_() { return get_static_field<SCAPIX_META_STRING("BCD_EXTENDED_TYPE_EF_ADN"), jint>(); }
inline jint PhoneNumberUtils::FORMAT_JAPAN_() { return get_static_field<SCAPIX_META_STRING("FORMAT_JAPAN"), jint>(); }
inline jint PhoneNumberUtils::FORMAT_NANP_() { return get_static_field<SCAPIX_META_STRING("FORMAT_NANP"), jint>(); }
inline jint PhoneNumberUtils::FORMAT_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("FORMAT_UNKNOWN"), jint>(); }
inline jchar PhoneNumberUtils::PAUSE_() { return get_static_field<SCAPIX_META_STRING("PAUSE"), jchar>(); }
inline jint PhoneNumberUtils::TOA_International() { return get_static_field<SCAPIX_META_STRING("TOA_International"), jint>(); }
inline jint PhoneNumberUtils::TOA_Unknown() { return get_static_field<SCAPIX_META_STRING("TOA_Unknown"), jint>(); }
inline jchar PhoneNumberUtils::WAIT_() { return get_static_field<SCAPIX_META_STRING("WAIT"), jchar>(); }
inline jchar PhoneNumberUtils::WILD_() { return get_static_field<SCAPIX_META_STRING("WILD"), jchar>(); }
inline ref<PhoneNumberUtils> PhoneNumberUtils::new_object() { return base_::new_object(); }
inline jboolean PhoneNumberUtils::isISODigit(jchar c) { return call_static_method<SCAPIX_META_STRING("isISODigit"), jboolean>(c); }
inline jboolean PhoneNumberUtils::is12Key(jchar c) { return call_static_method<SCAPIX_META_STRING("is12Key"), jboolean>(c); }
inline jboolean PhoneNumberUtils::isDialable(jchar c) { return call_static_method<SCAPIX_META_STRING("isDialable"), jboolean>(c); }
inline jboolean PhoneNumberUtils::isReallyDialable(jchar c) { return call_static_method<SCAPIX_META_STRING("isReallyDialable"), jboolean>(c); }
inline jboolean PhoneNumberUtils::isNonSeparator(jchar c) { return call_static_method<SCAPIX_META_STRING("isNonSeparator"), jboolean>(c); }
inline jboolean PhoneNumberUtils::isStartsPostDial(jchar c) { return call_static_method<SCAPIX_META_STRING("isStartsPostDial"), jboolean>(c); }
inline ref<java::lang::String> PhoneNumberUtils::getNumberFromIntent(ref<android::content::Intent> intent, ref<android::content::Context> context) { return call_static_method<SCAPIX_META_STRING("getNumberFromIntent"), ref<java::lang::String>>(intent, context); }
inline ref<java::lang::String> PhoneNumberUtils::extractNetworkPortion(ref<java::lang::String> phoneNumber) { return call_static_method<SCAPIX_META_STRING("extractNetworkPortion"), ref<java::lang::String>>(phoneNumber); }
inline ref<java::lang::String> PhoneNumberUtils::stripSeparators(ref<java::lang::String> phoneNumber) { return call_static_method<SCAPIX_META_STRING("stripSeparators"), ref<java::lang::String>>(phoneNumber); }
inline ref<java::lang::String> PhoneNumberUtils::extractPostDialPortion(ref<java::lang::String> phoneNumber) { return call_static_method<SCAPIX_META_STRING("extractPostDialPortion"), ref<java::lang::String>>(phoneNumber); }
inline jboolean PhoneNumberUtils::compare(ref<java::lang::String> a, ref<java::lang::String> b) { return call_static_method<SCAPIX_META_STRING("compare"), jboolean>(a, b); }
inline jboolean PhoneNumberUtils::compare(ref<android::content::Context> context, ref<java::lang::String> a, ref<java::lang::String> b) { return call_static_method<SCAPIX_META_STRING("compare"), jboolean>(context, a, b); }
inline ref<java::lang::String> PhoneNumberUtils::toCallerIDMinMatch(ref<java::lang::String> phoneNumber) { return call_static_method<SCAPIX_META_STRING("toCallerIDMinMatch"), ref<java::lang::String>>(phoneNumber); }
inline ref<java::lang::String> PhoneNumberUtils::getStrippedReversed(ref<java::lang::String> phoneNumber) { return call_static_method<SCAPIX_META_STRING("getStrippedReversed"), ref<java::lang::String>>(phoneNumber); }
inline ref<java::lang::String> PhoneNumberUtils::stringFromStringAndTOA(ref<java::lang::String> s, jint TOA_) { return call_static_method<SCAPIX_META_STRING("stringFromStringAndTOA"), ref<java::lang::String>>(s, TOA_); }
inline jint PhoneNumberUtils::toaFromString(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("toaFromString"), jint>(s); }
inline ref<java::lang::String> PhoneNumberUtils::calledPartyBCDToString(ref<link::java::array<jbyte>> bytes, jint offset, jint length) { return call_static_method<SCAPIX_META_STRING("calledPartyBCDToString"), ref<java::lang::String>>(bytes, offset, length); }
inline ref<java::lang::String> PhoneNumberUtils::calledPartyBCDToString(ref<link::java::array<jbyte>> bytes, jint offset, jint length, jint bcdExtType) { return call_static_method<SCAPIX_META_STRING("calledPartyBCDToString"), ref<java::lang::String>>(bytes, offset, length, bcdExtType); }
inline ref<java::lang::String> PhoneNumberUtils::calledPartyBCDFragmentToString(ref<link::java::array<jbyte>> bytes, jint offset, jint length) { return call_static_method<SCAPIX_META_STRING("calledPartyBCDFragmentToString"), ref<java::lang::String>>(bytes, offset, length); }
inline ref<java::lang::String> PhoneNumberUtils::calledPartyBCDFragmentToString(ref<link::java::array<jbyte>> bytes, jint offset, jint length, jint bcdExtType) { return call_static_method<SCAPIX_META_STRING("calledPartyBCDFragmentToString"), ref<java::lang::String>>(bytes, offset, length, bcdExtType); }
inline jboolean PhoneNumberUtils::isWellFormedSmsAddress(ref<java::lang::String> address) { return call_static_method<SCAPIX_META_STRING("isWellFormedSmsAddress"), jboolean>(address); }
inline jboolean PhoneNumberUtils::isGlobalPhoneNumber(ref<java::lang::String> phoneNumber) { return call_static_method<SCAPIX_META_STRING("isGlobalPhoneNumber"), jboolean>(phoneNumber); }
inline ref<link::java::array<jbyte>> PhoneNumberUtils::networkPortionToCalledPartyBCD(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("networkPortionToCalledPartyBCD"), ref<link::java::array<jbyte>>>(s); }
inline ref<link::java::array<jbyte>> PhoneNumberUtils::networkPortionToCalledPartyBCDWithLength(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("networkPortionToCalledPartyBCDWithLength"), ref<link::java::array<jbyte>>>(s); }
inline ref<link::java::array<jbyte>> PhoneNumberUtils::numberToCalledPartyBCD(ref<java::lang::String> number) { return call_static_method<SCAPIX_META_STRING("numberToCalledPartyBCD"), ref<link::java::array<jbyte>>>(number); }
inline ref<link::java::array<jbyte>> PhoneNumberUtils::numberToCalledPartyBCD(ref<java::lang::String> number, jint bcdExtType) { return call_static_method<SCAPIX_META_STRING("numberToCalledPartyBCD"), ref<link::java::array<jbyte>>>(number, bcdExtType); }
inline ref<java::lang::String> PhoneNumberUtils::formatNumber(ref<java::lang::String> source) { return call_static_method<SCAPIX_META_STRING("formatNumber"), ref<java::lang::String>>(source); }
inline jint PhoneNumberUtils::getFormatTypeForLocale(ref<java::util::Locale> locale) { return call_static_method<SCAPIX_META_STRING("getFormatTypeForLocale"), jint>(locale); }
inline void PhoneNumberUtils::formatNumber(ref<android::text::Editable> text, jint defaultFormattingType) { return call_static_method<SCAPIX_META_STRING("formatNumber"), void>(text, defaultFormattingType); }
inline void PhoneNumberUtils::formatNanpNumber(ref<android::text::Editable> text) { return call_static_method<SCAPIX_META_STRING("formatNanpNumber"), void>(text); }
inline void PhoneNumberUtils::formatJapaneseNumber(ref<android::text::Editable> text) { return call_static_method<SCAPIX_META_STRING("formatJapaneseNumber"), void>(text); }
inline ref<java::lang::String> PhoneNumberUtils::formatNumberToE164(ref<java::lang::String> phoneNumber, ref<java::lang::String> defaultCountryIso) { return call_static_method<SCAPIX_META_STRING("formatNumberToE164"), ref<java::lang::String>>(phoneNumber, defaultCountryIso); }
inline ref<java::lang::String> PhoneNumberUtils::formatNumberToRFC3966(ref<java::lang::String> phoneNumber, ref<java::lang::String> defaultCountryIso) { return call_static_method<SCAPIX_META_STRING("formatNumberToRFC3966"), ref<java::lang::String>>(phoneNumber, defaultCountryIso); }
inline ref<java::lang::String> PhoneNumberUtils::formatNumber(ref<java::lang::String> phoneNumber, ref<java::lang::String> defaultCountryIso) { return call_static_method<SCAPIX_META_STRING("formatNumber"), ref<java::lang::String>>(phoneNumber, defaultCountryIso); }
inline ref<java::lang::String> PhoneNumberUtils::formatNumber(ref<java::lang::String> phoneNumber, ref<java::lang::String> phoneNumberE164, ref<java::lang::String> defaultCountryIso) { return call_static_method<SCAPIX_META_STRING("formatNumber"), ref<java::lang::String>>(phoneNumber, phoneNumberE164, defaultCountryIso); }
inline ref<java::lang::String> PhoneNumberUtils::normalizeNumber(ref<java::lang::String> phoneNumber) { return call_static_method<SCAPIX_META_STRING("normalizeNumber"), ref<java::lang::String>>(phoneNumber); }
inline ref<java::lang::String> PhoneNumberUtils::replaceUnicodeDigits(ref<java::lang::String> number) { return call_static_method<SCAPIX_META_STRING("replaceUnicodeDigits"), ref<java::lang::String>>(number); }
inline jboolean PhoneNumberUtils::isEmergencyNumber(ref<java::lang::String> number) { return call_static_method<SCAPIX_META_STRING("isEmergencyNumber"), jboolean>(number); }
inline jboolean PhoneNumberUtils::isLocalEmergencyNumber(ref<android::content::Context> context, ref<java::lang::String> number) { return call_static_method<SCAPIX_META_STRING("isLocalEmergencyNumber"), jboolean>(context, number); }
inline jboolean PhoneNumberUtils::isVoiceMailNumber(ref<java::lang::String> number) { return call_static_method<SCAPIX_META_STRING("isVoiceMailNumber"), jboolean>(number); }
inline ref<java::lang::String> PhoneNumberUtils::convertKeypadLettersToDigits(ref<java::lang::String> input) { return call_static_method<SCAPIX_META_STRING("convertKeypadLettersToDigits"), ref<java::lang::String>>(input); }
inline ref<java::lang::CharSequence> PhoneNumberUtils::createTtsSpannable(ref<java::lang::CharSequence> phoneNumber) { return call_static_method<SCAPIX_META_STRING("createTtsSpannable"), ref<java::lang::CharSequence>>(phoneNumber); }
inline void PhoneNumberUtils::addTtsSpan(ref<android::text::Spannable> s, jint start, jint endExclusive) { return call_static_method<SCAPIX_META_STRING("addTtsSpan"), void>(s, start, endExclusive); }
inline ref<android::text::style::TtsSpan> PhoneNumberUtils::createTtsSpan(ref<java::lang::String> phoneNumberString) { return call_static_method<SCAPIX_META_STRING("createTtsSpan"), ref<android::text::style::TtsSpan>>(phoneNumberString); }

} // namespace android::telephony
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_TELEPHONY_PHONENUMBERUTILS_H
