// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_MEDIA_MEDIACODEC_CRYPTOINFO_H
#define SCAPIX_ANDROID_MEDIA_MEDIACODEC_CRYPTOINFO_H

namespace scapix::java_api {

namespace android::media { class MediaCodec_CryptoInfo_Pattern; }
namespace java::lang { class String; }

namespace android::media {

class MediaCodec_CryptoInfo : public object_base<SCAPIX_META_STRING("android/media/MediaCodec$CryptoInfo"),
	java::lang::Object>
{
public:

	using Pattern = MediaCodec_CryptoInfo_Pattern;

	ref<link::java::array<jbyte>> iv();
	void iv(ref<link::java::array<jbyte>>);
	ref<link::java::array<jbyte>> key();
	void key(ref<link::java::array<jbyte>>);
	jint mode();
	void mode(jint);
	ref<link::java::array<jint>> numBytesOfClearData();
	void numBytesOfClearData(ref<link::java::array<jint>>);
	ref<link::java::array<jint>> numBytesOfEncryptedData();
	void numBytesOfEncryptedData(ref<link::java::array<jint>>);
	jint numSubSamples();
	void numSubSamples(jint);

	static ref<MediaCodec_CryptoInfo> new_object();
	void set(jint newNumSubSamples, ref<link::java::array<jint>> newNumBytesOfClearData, ref<link::java::array<jint>> newNumBytesOfEncryptedData, ref<link::java::array<jbyte>> newKey, ref<link::java::array<jbyte>> newIV, jint newMode);
	void setPattern(ref<android::media::MediaCodec_CryptoInfo_Pattern> newPattern);
	ref<java::lang::String> toString();

protected:

	MediaCodec_CryptoInfo(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/android/media/MediaCodec_CryptoInfo_Pattern.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::media {

inline ref<link::java::array<jbyte>> MediaCodec_CryptoInfo::iv() { return get_field<SCAPIX_META_STRING("iv"), ref<link::java::array<jbyte>>>(); }
inline void MediaCodec_CryptoInfo::iv(ref<link::java::array<jbyte>> v) { set_field<SCAPIX_META_STRING("iv"), ref<link::java::array<jbyte>>>(v); }
inline ref<link::java::array<jbyte>> MediaCodec_CryptoInfo::key() { return get_field<SCAPIX_META_STRING("key"), ref<link::java::array<jbyte>>>(); }
inline void MediaCodec_CryptoInfo::key(ref<link::java::array<jbyte>> v) { set_field<SCAPIX_META_STRING("key"), ref<link::java::array<jbyte>>>(v); }
inline jint MediaCodec_CryptoInfo::mode() { return get_field<SCAPIX_META_STRING("mode"), jint>(); }
inline void MediaCodec_CryptoInfo::mode(jint v) { set_field<SCAPIX_META_STRING("mode"), jint>(v); }
inline ref<link::java::array<jint>> MediaCodec_CryptoInfo::numBytesOfClearData() { return get_field<SCAPIX_META_STRING("numBytesOfClearData"), ref<link::java::array<jint>>>(); }
inline void MediaCodec_CryptoInfo::numBytesOfClearData(ref<link::java::array<jint>> v) { set_field<SCAPIX_META_STRING("numBytesOfClearData"), ref<link::java::array<jint>>>(v); }
inline ref<link::java::array<jint>> MediaCodec_CryptoInfo::numBytesOfEncryptedData() { return get_field<SCAPIX_META_STRING("numBytesOfEncryptedData"), ref<link::java::array<jint>>>(); }
inline void MediaCodec_CryptoInfo::numBytesOfEncryptedData(ref<link::java::array<jint>> v) { set_field<SCAPIX_META_STRING("numBytesOfEncryptedData"), ref<link::java::array<jint>>>(v); }
inline jint MediaCodec_CryptoInfo::numSubSamples() { return get_field<SCAPIX_META_STRING("numSubSamples"), jint>(); }
inline void MediaCodec_CryptoInfo::numSubSamples(jint v) { set_field<SCAPIX_META_STRING("numSubSamples"), jint>(v); }
inline ref<MediaCodec_CryptoInfo> MediaCodec_CryptoInfo::new_object() { return base_::new_object(); }
inline void MediaCodec_CryptoInfo::set(jint newNumSubSamples, ref<link::java::array<jint>> newNumBytesOfClearData, ref<link::java::array<jint>> newNumBytesOfEncryptedData, ref<link::java::array<jbyte>> newKey, ref<link::java::array<jbyte>> newIV, jint newMode) { return call_method<SCAPIX_META_STRING("set"), void>(newNumSubSamples, newNumBytesOfClearData, newNumBytesOfEncryptedData, newKey, newIV, newMode); }
inline void MediaCodec_CryptoInfo::setPattern(ref<android::media::MediaCodec_CryptoInfo_Pattern> newPattern) { return call_method<SCAPIX_META_STRING("setPattern"), void>(newPattern); }
inline ref<java::lang::String> MediaCodec_CryptoInfo::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_MEDIACODEC_CRYPTOINFO_H
