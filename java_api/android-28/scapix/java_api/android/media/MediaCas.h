// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_ANDROID_MEDIA_MEDIACAS_H
#define SCAPIX_ANDROID_MEDIA_MEDIACAS_H

namespace scapix::java_api {

namespace android::media { class MediaCas_EventListener; }
namespace android::media { class MediaCas_PluginDescriptor; }
namespace android::media { class MediaCas_Session; }
namespace android::os { class Handler; }
namespace java::lang { class String; }

namespace android::media {

class MediaCas : public object_base<SCAPIX_META_STRING("android/media/MediaCas"),
	java::lang::Object,
	java::lang::AutoCloseable>
{
public:

	using Session = MediaCas_Session;
	using PluginDescriptor = MediaCas_PluginDescriptor;
	using EventListener = MediaCas_EventListener;

	static ref<MediaCas> new_object(jint CA_system_id);
	static jboolean isSystemIdSupported(jint CA_system_id);
	static ref<link::java::array<android::media::MediaCas_PluginDescriptor>> enumeratePlugins();
	void setEventListener(ref<android::media::MediaCas_EventListener> listener, ref<android::os::Handler> handler);
	void setPrivateData(ref<link::java::array<jbyte>> data);
	ref<android::media::MediaCas_Session> openSession();
	void processEmm(ref<link::java::array<jbyte>> data, jint offset, jint length);
	void processEmm(ref<link::java::array<jbyte>> data);
	void sendEvent(jint event, jint arg, ref<link::java::array<jbyte>> data);
	void provision(ref<java::lang::String> provisionString);
	void refreshEntitlements(jint refreshType, ref<link::java::array<jbyte>> refreshData);
	void close();

protected:

	MediaCas(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/android/media/MediaCas_EventListener.h>
#include <scapix/java_api/android/media/MediaCas_PluginDescriptor.h>
#include <scapix/java_api/android/media/MediaCas_Session.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::media {

inline ref<MediaCas> MediaCas::new_object(jint CA_system_id) { return base_::new_object(CA_system_id); }
inline jboolean MediaCas::isSystemIdSupported(jint CA_system_id) { return call_static_method<SCAPIX_META_STRING("isSystemIdSupported"), jboolean>(CA_system_id); }
inline ref<link::java::array<android::media::MediaCas_PluginDescriptor>> MediaCas::enumeratePlugins() { return call_static_method<SCAPIX_META_STRING("enumeratePlugins"), ref<link::java::array<android::media::MediaCas_PluginDescriptor>>>(); }
inline void MediaCas::setEventListener(ref<android::media::MediaCas_EventListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("setEventListener"), void>(listener, handler); }
inline void MediaCas::setPrivateData(ref<link::java::array<jbyte>> data) { return call_method<SCAPIX_META_STRING("setPrivateData"), void>(data); }
inline ref<android::media::MediaCas_Session> MediaCas::openSession() { return call_method<SCAPIX_META_STRING("openSession"), ref<android::media::MediaCas_Session>>(); }
inline void MediaCas::processEmm(ref<link::java::array<jbyte>> data, jint offset, jint length) { return call_method<SCAPIX_META_STRING("processEmm"), void>(data, offset, length); }
inline void MediaCas::processEmm(ref<link::java::array<jbyte>> data) { return call_method<SCAPIX_META_STRING("processEmm"), void>(data); }
inline void MediaCas::sendEvent(jint event, jint arg, ref<link::java::array<jbyte>> data) { return call_method<SCAPIX_META_STRING("sendEvent"), void>(event, arg, data); }
inline void MediaCas::provision(ref<java::lang::String> provisionString) { return call_method<SCAPIX_META_STRING("provision"), void>(provisionString); }
inline void MediaCas::refreshEntitlements(jint refreshType, ref<link::java::array<jbyte>> refreshData) { return call_method<SCAPIX_META_STRING("refreshEntitlements"), void>(refreshType, refreshData); }
inline void MediaCas::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_MEDIACAS_H
