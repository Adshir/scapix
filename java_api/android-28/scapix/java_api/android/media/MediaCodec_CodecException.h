// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/IllegalStateException.h>

#ifndef SCAPIX_ANDROID_MEDIA_MEDIACODEC_CODECEXCEPTION_H
#define SCAPIX_ANDROID_MEDIA_MEDIACODEC_CODECEXCEPTION_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace android::media {

class MediaCodec_CodecException : public object_base<SCAPIX_META_STRING("android/media/MediaCodec$CodecException"),
	java::lang::IllegalStateException>
{
public:

	static jint ERROR_INSUFFICIENT_RESOURCE_();
	static jint ERROR_RECLAIMED_();

	jboolean isTransient();
	jboolean isRecoverable();
	jint getErrorCode();
	ref<java::lang::String> getDiagnosticInfo();

protected:

	MediaCodec_CodecException(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::media {

inline jint MediaCodec_CodecException::ERROR_INSUFFICIENT_RESOURCE_() { return get_static_field<SCAPIX_META_STRING("ERROR_INSUFFICIENT_RESOURCE"), jint>(); }
inline jint MediaCodec_CodecException::ERROR_RECLAIMED_() { return get_static_field<SCAPIX_META_STRING("ERROR_RECLAIMED"), jint>(); }
inline jboolean MediaCodec_CodecException::isTransient() { return call_method<SCAPIX_META_STRING("isTransient"), jboolean>(); }
inline jboolean MediaCodec_CodecException::isRecoverable() { return call_method<SCAPIX_META_STRING("isRecoverable"), jboolean>(); }
inline jint MediaCodec_CodecException::getErrorCode() { return call_method<SCAPIX_META_STRING("getErrorCode"), jint>(); }
inline ref<java::lang::String> MediaCodec_CodecException::getDiagnosticInfo() { return call_method<SCAPIX_META_STRING("getDiagnosticInfo"), ref<java::lang::String>>(); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_MEDIACODEC_CODECEXCEPTION_H
