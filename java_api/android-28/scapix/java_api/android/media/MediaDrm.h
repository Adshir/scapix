// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_ANDROID_MEDIA_MEDIADRM_H
#define SCAPIX_ANDROID_MEDIA_MEDIADRM_H

namespace scapix::java_api {

namespace android::media { class MediaDrm_CryptoSession; }
namespace android::media { class MediaDrm_KeyRequest; }
namespace android::media { class MediaDrm_OnEventListener; }
namespace android::media { class MediaDrm_OnExpirationUpdateListener; }
namespace android::media { class MediaDrm_OnKeyStatusChangeListener; }
namespace android::media { class MediaDrm_ProvisionRequest; }
namespace android::os { class Handler; }
namespace android::os { class PersistableBundle; }
namespace java::lang { class String; }
namespace java::util { class HashMap; }
namespace java::util { class List; }
namespace java::util { class UUID; }
namespace android::media { class MediaDrm_SecurityLevel; }
namespace android::media { class MediaDrm_MetricsConstants; }
namespace android::media { class MediaDrm_MediaDrmStateException; }
namespace android::media { class MediaDrm_KeyStatus; }
namespace android::media { class MediaDrm_HdcpLevel; }

namespace android::media {

class MediaDrm : public object_base<SCAPIX_META_STRING("android/media/MediaDrm"),
	java::lang::Object,
	java::lang::AutoCloseable>
{
public:

	using SecurityLevel = MediaDrm_SecurityLevel;
	using ProvisionRequest = MediaDrm_ProvisionRequest;
	using OnKeyStatusChangeListener = MediaDrm_OnKeyStatusChangeListener;
	using OnExpirationUpdateListener = MediaDrm_OnExpirationUpdateListener;
	using OnEventListener = MediaDrm_OnEventListener;
	using MetricsConstants = MediaDrm_MetricsConstants;
	using MediaDrmStateException = MediaDrm_MediaDrmStateException;
	using KeyStatus = MediaDrm_KeyStatus;
	using KeyRequest = MediaDrm_KeyRequest;
	using HdcpLevel = MediaDrm_HdcpLevel;
	using CryptoSession = MediaDrm_CryptoSession;

	static jint EVENT_KEY_EXPIRED_();
	static jint EVENT_KEY_REQUIRED_();
	static jint EVENT_PROVISION_REQUIRED_();
	static jint EVENT_SESSION_RECLAIMED_();
	static jint EVENT_VENDOR_DEFINED_();
	static jint HDCP_LEVEL_UNKNOWN_();
	static jint HDCP_NONE_();
	static jint HDCP_NO_DIGITAL_OUTPUT_();
	static jint HDCP_V1_();
	static jint HDCP_V2_();
	static jint HDCP_V2_1_();
	static jint HDCP_V2_2_();
	static jint KEY_TYPE_OFFLINE_();
	static jint KEY_TYPE_RELEASE_();
	static jint KEY_TYPE_STREAMING_();
	static ref<java::lang::String> PROPERTY_ALGORITHMS_();
	static ref<java::lang::String> PROPERTY_DESCRIPTION_();
	static ref<java::lang::String> PROPERTY_DEVICE_UNIQUE_ID_();
	static ref<java::lang::String> PROPERTY_VENDOR_();
	static ref<java::lang::String> PROPERTY_VERSION_();
	static jint SECURITY_LEVEL_HW_SECURE_ALL_();
	static jint SECURITY_LEVEL_HW_SECURE_CRYPTO_();
	static jint SECURITY_LEVEL_HW_SECURE_DECODE_();
	static jint SECURITY_LEVEL_SW_SECURE_CRYPTO_();
	static jint SECURITY_LEVEL_SW_SECURE_DECODE_();
	static jint SECURITY_LEVEL_UNKNOWN_();

	static ref<MediaDrm> new_object(ref<java::util::UUID> uuid);
	static jboolean isCryptoSchemeSupported(ref<java::util::UUID> uuid);
	static jboolean isCryptoSchemeSupported(ref<java::util::UUID> uuid, ref<java::lang::String> mimeType);
	void setOnExpirationUpdateListener(ref<android::media::MediaDrm_OnExpirationUpdateListener> listener, ref<android::os::Handler> handler);
	void setOnKeyStatusChangeListener(ref<android::media::MediaDrm_OnKeyStatusChangeListener> listener, ref<android::os::Handler> handler);
	void setOnEventListener(ref<android::media::MediaDrm_OnEventListener> listener);
	ref<link::java::array<jbyte>> openSession();
	ref<link::java::array<jbyte>> openSession(jint p1);
	void closeSession(ref<link::java::array<jbyte>> p1);
	ref<android::media::MediaDrm_KeyRequest> getKeyRequest(ref<link::java::array<jbyte>> p1, ref<link::java::array<jbyte>> p2, ref<java::lang::String> p3, jint p4, ref<java::util::HashMap> p5);
	ref<link::java::array<jbyte>> provideKeyResponse(ref<link::java::array<jbyte>> p1, ref<link::java::array<jbyte>> p2);
	void restoreKeys(ref<link::java::array<jbyte>> p1, ref<link::java::array<jbyte>> p2);
	void removeKeys(ref<link::java::array<jbyte>> p1);
	ref<java::util::HashMap> queryKeyStatus(ref<link::java::array<jbyte>> p1);
	ref<android::media::MediaDrm_ProvisionRequest> getProvisionRequest();
	void provideProvisionResponse(ref<link::java::array<jbyte>> response);
	ref<java::util::List> getSecureStops();
	ref<java::util::List> getSecureStopIds();
	ref<link::java::array<jbyte>> getSecureStop(ref<link::java::array<jbyte>> p1);
	void releaseSecureStops(ref<link::java::array<jbyte>> p1);
	void removeSecureStop(ref<link::java::array<jbyte>> p1);
	void removeAllSecureStops();
	void releaseAllSecureStops();
	jint getConnectedHdcpLevel();
	jint getMaxHdcpLevel();
	jint getOpenSessionCount();
	jint getMaxSessionCount();
	static jint getMaxSecurityLevel();
	jint getSecurityLevel(ref<link::java::array<jbyte>> p1);
	ref<java::lang::String> getPropertyString(ref<java::lang::String> p1);
	void setPropertyString(ref<java::lang::String> p1, ref<java::lang::String> p2);
	ref<link::java::array<jbyte>> getPropertyByteArray(ref<java::lang::String> p1);
	void setPropertyByteArray(ref<java::lang::String> p1, ref<link::java::array<jbyte>> p2);
	ref<android::os::PersistableBundle> getMetrics();
	ref<android::media::MediaDrm_CryptoSession> getCryptoSession(ref<link::java::array<jbyte>> sessionId, ref<java::lang::String> cipherAlgorithm, ref<java::lang::String> macAlgorithm);
	void close();
	void release();

protected:

	MediaDrm(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/android/media/MediaDrm_CryptoSession.h>
#include <scapix/java_api/android/media/MediaDrm_KeyRequest.h>
#include <scapix/java_api/android/media/MediaDrm_OnEventListener.h>
#include <scapix/java_api/android/media/MediaDrm_OnExpirationUpdateListener.h>
#include <scapix/java_api/android/media/MediaDrm_OnKeyStatusChangeListener.h>
#include <scapix/java_api/android/media/MediaDrm_ProvisionRequest.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/HashMap.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/UUID.h>

namespace scapix::java_api {
namespace android::media {

inline jint MediaDrm::EVENT_KEY_EXPIRED_() { return get_static_field<SCAPIX_META_STRING("EVENT_KEY_EXPIRED"), jint>(); }
inline jint MediaDrm::EVENT_KEY_REQUIRED_() { return get_static_field<SCAPIX_META_STRING("EVENT_KEY_REQUIRED"), jint>(); }
inline jint MediaDrm::EVENT_PROVISION_REQUIRED_() { return get_static_field<SCAPIX_META_STRING("EVENT_PROVISION_REQUIRED"), jint>(); }
inline jint MediaDrm::EVENT_SESSION_RECLAIMED_() { return get_static_field<SCAPIX_META_STRING("EVENT_SESSION_RECLAIMED"), jint>(); }
inline jint MediaDrm::EVENT_VENDOR_DEFINED_() { return get_static_field<SCAPIX_META_STRING("EVENT_VENDOR_DEFINED"), jint>(); }
inline jint MediaDrm::HDCP_LEVEL_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("HDCP_LEVEL_UNKNOWN"), jint>(); }
inline jint MediaDrm::HDCP_NONE_() { return get_static_field<SCAPIX_META_STRING("HDCP_NONE"), jint>(); }
inline jint MediaDrm::HDCP_NO_DIGITAL_OUTPUT_() { return get_static_field<SCAPIX_META_STRING("HDCP_NO_DIGITAL_OUTPUT"), jint>(); }
inline jint MediaDrm::HDCP_V1_() { return get_static_field<SCAPIX_META_STRING("HDCP_V1"), jint>(); }
inline jint MediaDrm::HDCP_V2_() { return get_static_field<SCAPIX_META_STRING("HDCP_V2"), jint>(); }
inline jint MediaDrm::HDCP_V2_1_() { return get_static_field<SCAPIX_META_STRING("HDCP_V2_1"), jint>(); }
inline jint MediaDrm::HDCP_V2_2_() { return get_static_field<SCAPIX_META_STRING("HDCP_V2_2"), jint>(); }
inline jint MediaDrm::KEY_TYPE_OFFLINE_() { return get_static_field<SCAPIX_META_STRING("KEY_TYPE_OFFLINE"), jint>(); }
inline jint MediaDrm::KEY_TYPE_RELEASE_() { return get_static_field<SCAPIX_META_STRING("KEY_TYPE_RELEASE"), jint>(); }
inline jint MediaDrm::KEY_TYPE_STREAMING_() { return get_static_field<SCAPIX_META_STRING("KEY_TYPE_STREAMING"), jint>(); }
inline ref<java::lang::String> MediaDrm::PROPERTY_ALGORITHMS_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_ALGORITHMS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaDrm::PROPERTY_DESCRIPTION_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_DESCRIPTION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaDrm::PROPERTY_DEVICE_UNIQUE_ID_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_DEVICE_UNIQUE_ID"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaDrm::PROPERTY_VENDOR_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_VENDOR"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaDrm::PROPERTY_VERSION_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_VERSION"), ref<java::lang::String>>(); }
inline jint MediaDrm::SECURITY_LEVEL_HW_SECURE_ALL_() { return get_static_field<SCAPIX_META_STRING("SECURITY_LEVEL_HW_SECURE_ALL"), jint>(); }
inline jint MediaDrm::SECURITY_LEVEL_HW_SECURE_CRYPTO_() { return get_static_field<SCAPIX_META_STRING("SECURITY_LEVEL_HW_SECURE_CRYPTO"), jint>(); }
inline jint MediaDrm::SECURITY_LEVEL_HW_SECURE_DECODE_() { return get_static_field<SCAPIX_META_STRING("SECURITY_LEVEL_HW_SECURE_DECODE"), jint>(); }
inline jint MediaDrm::SECURITY_LEVEL_SW_SECURE_CRYPTO_() { return get_static_field<SCAPIX_META_STRING("SECURITY_LEVEL_SW_SECURE_CRYPTO"), jint>(); }
inline jint MediaDrm::SECURITY_LEVEL_SW_SECURE_DECODE_() { return get_static_field<SCAPIX_META_STRING("SECURITY_LEVEL_SW_SECURE_DECODE"), jint>(); }
inline jint MediaDrm::SECURITY_LEVEL_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("SECURITY_LEVEL_UNKNOWN"), jint>(); }
inline ref<MediaDrm> MediaDrm::new_object(ref<java::util::UUID> uuid) { return base_::new_object(uuid); }
inline jboolean MediaDrm::isCryptoSchemeSupported(ref<java::util::UUID> uuid) { return call_static_method<SCAPIX_META_STRING("isCryptoSchemeSupported"), jboolean>(uuid); }
inline jboolean MediaDrm::isCryptoSchemeSupported(ref<java::util::UUID> uuid, ref<java::lang::String> mimeType) { return call_static_method<SCAPIX_META_STRING("isCryptoSchemeSupported"), jboolean>(uuid, mimeType); }
inline void MediaDrm::setOnExpirationUpdateListener(ref<android::media::MediaDrm_OnExpirationUpdateListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("setOnExpirationUpdateListener"), void>(listener, handler); }
inline void MediaDrm::setOnKeyStatusChangeListener(ref<android::media::MediaDrm_OnKeyStatusChangeListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("setOnKeyStatusChangeListener"), void>(listener, handler); }
inline void MediaDrm::setOnEventListener(ref<android::media::MediaDrm_OnEventListener> listener) { return call_method<SCAPIX_META_STRING("setOnEventListener"), void>(listener); }
inline ref<link::java::array<jbyte>> MediaDrm::openSession() { return call_method<SCAPIX_META_STRING("openSession"), ref<link::java::array<jbyte>>>(); }
inline ref<link::java::array<jbyte>> MediaDrm::openSession(jint p1) { return call_method<SCAPIX_META_STRING("openSession"), ref<link::java::array<jbyte>>>(p1); }
inline void MediaDrm::closeSession(ref<link::java::array<jbyte>> p1) { return call_method<SCAPIX_META_STRING("closeSession"), void>(p1); }
inline ref<android::media::MediaDrm_KeyRequest> MediaDrm::getKeyRequest(ref<link::java::array<jbyte>> p1, ref<link::java::array<jbyte>> p2, ref<java::lang::String> p3, jint p4, ref<java::util::HashMap> p5) { return call_method<SCAPIX_META_STRING("getKeyRequest"), ref<android::media::MediaDrm_KeyRequest>>(p1, p2, p3, p4, p5); }
inline ref<link::java::array<jbyte>> MediaDrm::provideKeyResponse(ref<link::java::array<jbyte>> p1, ref<link::java::array<jbyte>> p2) { return call_method<SCAPIX_META_STRING("provideKeyResponse"), ref<link::java::array<jbyte>>>(p1, p2); }
inline void MediaDrm::restoreKeys(ref<link::java::array<jbyte>> p1, ref<link::java::array<jbyte>> p2) { return call_method<SCAPIX_META_STRING("restoreKeys"), void>(p1, p2); }
inline void MediaDrm::removeKeys(ref<link::java::array<jbyte>> p1) { return call_method<SCAPIX_META_STRING("removeKeys"), void>(p1); }
inline ref<java::util::HashMap> MediaDrm::queryKeyStatus(ref<link::java::array<jbyte>> p1) { return call_method<SCAPIX_META_STRING("queryKeyStatus"), ref<java::util::HashMap>>(p1); }
inline ref<android::media::MediaDrm_ProvisionRequest> MediaDrm::getProvisionRequest() { return call_method<SCAPIX_META_STRING("getProvisionRequest"), ref<android::media::MediaDrm_ProvisionRequest>>(); }
inline void MediaDrm::provideProvisionResponse(ref<link::java::array<jbyte>> response) { return call_method<SCAPIX_META_STRING("provideProvisionResponse"), void>(response); }
inline ref<java::util::List> MediaDrm::getSecureStops() { return call_method<SCAPIX_META_STRING("getSecureStops"), ref<java::util::List>>(); }
inline ref<java::util::List> MediaDrm::getSecureStopIds() { return call_method<SCAPIX_META_STRING("getSecureStopIds"), ref<java::util::List>>(); }
inline ref<link::java::array<jbyte>> MediaDrm::getSecureStop(ref<link::java::array<jbyte>> p1) { return call_method<SCAPIX_META_STRING("getSecureStop"), ref<link::java::array<jbyte>>>(p1); }
inline void MediaDrm::releaseSecureStops(ref<link::java::array<jbyte>> p1) { return call_method<SCAPIX_META_STRING("releaseSecureStops"), void>(p1); }
inline void MediaDrm::removeSecureStop(ref<link::java::array<jbyte>> p1) { return call_method<SCAPIX_META_STRING("removeSecureStop"), void>(p1); }
inline void MediaDrm::removeAllSecureStops() { return call_method<SCAPIX_META_STRING("removeAllSecureStops"), void>(); }
inline void MediaDrm::releaseAllSecureStops() { return call_method<SCAPIX_META_STRING("releaseAllSecureStops"), void>(); }
inline jint MediaDrm::getConnectedHdcpLevel() { return call_method<SCAPIX_META_STRING("getConnectedHdcpLevel"), jint>(); }
inline jint MediaDrm::getMaxHdcpLevel() { return call_method<SCAPIX_META_STRING("getMaxHdcpLevel"), jint>(); }
inline jint MediaDrm::getOpenSessionCount() { return call_method<SCAPIX_META_STRING("getOpenSessionCount"), jint>(); }
inline jint MediaDrm::getMaxSessionCount() { return call_method<SCAPIX_META_STRING("getMaxSessionCount"), jint>(); }
inline jint MediaDrm::getMaxSecurityLevel() { return call_static_method<SCAPIX_META_STRING("getMaxSecurityLevel"), jint>(); }
inline jint MediaDrm::getSecurityLevel(ref<link::java::array<jbyte>> p1) { return call_method<SCAPIX_META_STRING("getSecurityLevel"), jint>(p1); }
inline ref<java::lang::String> MediaDrm::getPropertyString(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getPropertyString"), ref<java::lang::String>>(p1); }
inline void MediaDrm::setPropertyString(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("setPropertyString"), void>(p1, p2); }
inline ref<link::java::array<jbyte>> MediaDrm::getPropertyByteArray(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getPropertyByteArray"), ref<link::java::array<jbyte>>>(p1); }
inline void MediaDrm::setPropertyByteArray(ref<java::lang::String> p1, ref<link::java::array<jbyte>> p2) { return call_method<SCAPIX_META_STRING("setPropertyByteArray"), void>(p1, p2); }
inline ref<android::os::PersistableBundle> MediaDrm::getMetrics() { return call_method<SCAPIX_META_STRING("getMetrics"), ref<android::os::PersistableBundle>>(); }
inline ref<android::media::MediaDrm_CryptoSession> MediaDrm::getCryptoSession(ref<link::java::array<jbyte>> sessionId, ref<java::lang::String> cipherAlgorithm, ref<java::lang::String> macAlgorithm) { return call_method<SCAPIX_META_STRING("getCryptoSession"), ref<android::media::MediaDrm_CryptoSession>>(sessionId, cipherAlgorithm, macAlgorithm); }
inline void MediaDrm::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void MediaDrm::release() { return call_method<SCAPIX_META_STRING("release"), void>(); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_MEDIADRM_H
