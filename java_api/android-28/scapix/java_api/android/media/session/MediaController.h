// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_MEDIA_SESSION_MEDIACONTROLLER_H
#define SCAPIX_ANDROID_MEDIA_SESSION_MEDIACONTROLLER_H

namespace scapix::java_api {

namespace android::app { class PendingIntent; }
namespace android::content { class Context; }
namespace android::media { class MediaMetadata; }
namespace android::media::session { class MediaController_Callback; }
namespace android::media::session { class MediaController_PlaybackInfo; }
namespace android::media::session { class MediaController_TransportControls; }
namespace android::media::session { class MediaSession_Token; }
namespace android::media::session { class PlaybackState; }
namespace android::os { class Bundle; }
namespace android::os { class Handler; }
namespace android::os { class ResultReceiver; }
namespace android::view { class KeyEvent; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::util { class List; }

namespace android::media::session {

class MediaController : public object_base<SCAPIX_META_STRING("android/media/session/MediaController"),
	java::lang::Object>
{
public:

	using TransportControls = MediaController_TransportControls;
	using PlaybackInfo = MediaController_PlaybackInfo;
	using Callback = MediaController_Callback;

	static ref<MediaController> new_object(ref<android::content::Context> context, ref<android::media::session::MediaSession_Token> token);
	ref<android::media::session::MediaController_TransportControls> getTransportControls();
	jboolean dispatchMediaButtonEvent(ref<android::view::KeyEvent> keyEvent);
	ref<android::media::session::PlaybackState> getPlaybackState();
	ref<android::media::MediaMetadata> getMetadata();
	ref<java::util::List> getQueue();
	ref<java::lang::CharSequence> getQueueTitle();
	ref<android::os::Bundle> getExtras();
	jint getRatingType();
	jlong getFlags();
	ref<android::media::session::MediaController_PlaybackInfo> getPlaybackInfo();
	ref<android::app::PendingIntent> getSessionActivity();
	ref<android::media::session::MediaSession_Token> getSessionToken();
	void setVolumeTo(jint value, jint flags);
	void adjustVolume(jint direction, jint flags);
	void registerCallback(ref<android::media::session::MediaController_Callback> callback);
	void registerCallback(ref<android::media::session::MediaController_Callback> callback, ref<android::os::Handler> handler);
	void unregisterCallback(ref<android::media::session::MediaController_Callback> callback);
	void sendCommand(ref<java::lang::String> command, ref<android::os::Bundle> args, ref<android::os::ResultReceiver> cb);
	ref<java::lang::String> getPackageName();

protected:

	MediaController(handle_type h) : base_(h) {}

};

} // namespace android::media::session
} // namespace scapix::java_api

#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/media/MediaMetadata.h>
#include <scapix/java_api/android/media/session/MediaController_Callback.h>
#include <scapix/java_api/android/media/session/MediaController_PlaybackInfo.h>
#include <scapix/java_api/android/media/session/MediaController_TransportControls.h>
#include <scapix/java_api/android/media/session/MediaSession_Token.h>
#include <scapix/java_api/android/media/session/PlaybackState.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/ResultReceiver.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::media::session {

inline ref<MediaController> MediaController::new_object(ref<android::content::Context> context, ref<android::media::session::MediaSession_Token> token) { return base_::new_object(context, token); }
inline ref<android::media::session::MediaController_TransportControls> MediaController::getTransportControls() { return call_method<SCAPIX_META_STRING("getTransportControls"), ref<android::media::session::MediaController_TransportControls>>(); }
inline jboolean MediaController::dispatchMediaButtonEvent(ref<android::view::KeyEvent> keyEvent) { return call_method<SCAPIX_META_STRING("dispatchMediaButtonEvent"), jboolean>(keyEvent); }
inline ref<android::media::session::PlaybackState> MediaController::getPlaybackState() { return call_method<SCAPIX_META_STRING("getPlaybackState"), ref<android::media::session::PlaybackState>>(); }
inline ref<android::media::MediaMetadata> MediaController::getMetadata() { return call_method<SCAPIX_META_STRING("getMetadata"), ref<android::media::MediaMetadata>>(); }
inline ref<java::util::List> MediaController::getQueue() { return call_method<SCAPIX_META_STRING("getQueue"), ref<java::util::List>>(); }
inline ref<java::lang::CharSequence> MediaController::getQueueTitle() { return call_method<SCAPIX_META_STRING("getQueueTitle"), ref<java::lang::CharSequence>>(); }
inline ref<android::os::Bundle> MediaController::getExtras() { return call_method<SCAPIX_META_STRING("getExtras"), ref<android::os::Bundle>>(); }
inline jint MediaController::getRatingType() { return call_method<SCAPIX_META_STRING("getRatingType"), jint>(); }
inline jlong MediaController::getFlags() { return call_method<SCAPIX_META_STRING("getFlags"), jlong>(); }
inline ref<android::media::session::MediaController_PlaybackInfo> MediaController::getPlaybackInfo() { return call_method<SCAPIX_META_STRING("getPlaybackInfo"), ref<android::media::session::MediaController_PlaybackInfo>>(); }
inline ref<android::app::PendingIntent> MediaController::getSessionActivity() { return call_method<SCAPIX_META_STRING("getSessionActivity"), ref<android::app::PendingIntent>>(); }
inline ref<android::media::session::MediaSession_Token> MediaController::getSessionToken() { return call_method<SCAPIX_META_STRING("getSessionToken"), ref<android::media::session::MediaSession_Token>>(); }
inline void MediaController::setVolumeTo(jint value, jint flags) { return call_method<SCAPIX_META_STRING("setVolumeTo"), void>(value, flags); }
inline void MediaController::adjustVolume(jint direction, jint flags) { return call_method<SCAPIX_META_STRING("adjustVolume"), void>(direction, flags); }
inline void MediaController::registerCallback(ref<android::media::session::MediaController_Callback> callback) { return call_method<SCAPIX_META_STRING("registerCallback"), void>(callback); }
inline void MediaController::registerCallback(ref<android::media::session::MediaController_Callback> callback, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("registerCallback"), void>(callback, handler); }
inline void MediaController::unregisterCallback(ref<android::media::session::MediaController_Callback> callback) { return call_method<SCAPIX_META_STRING("unregisterCallback"), void>(callback); }
inline void MediaController::sendCommand(ref<java::lang::String> command, ref<android::os::Bundle> args, ref<android::os::ResultReceiver> cb) { return call_method<SCAPIX_META_STRING("sendCommand"), void>(command, args, cb); }
inline ref<java::lang::String> MediaController::getPackageName() { return call_method<SCAPIX_META_STRING("getPackageName"), ref<java::lang::String>>(); }

} // namespace android::media::session
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_SESSION_MEDIACONTROLLER_H
