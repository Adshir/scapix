// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_MEDIA_AUDIODEVICEINFO_H
#define SCAPIX_ANDROID_MEDIA_AUDIODEVICEINFO_H

namespace scapix::java_api {

namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::media {

class AudioDeviceInfo : public object_base<SCAPIX_META_STRING("android/media/AudioDeviceInfo"),
	java::lang::Object>
{
public:

	static jint TYPE_AUX_LINE_();
	static jint TYPE_BLUETOOTH_A2DP_();
	static jint TYPE_BLUETOOTH_SCO_();
	static jint TYPE_BUILTIN_EARPIECE_();
	static jint TYPE_BUILTIN_MIC_();
	static jint TYPE_BUILTIN_SPEAKER_();
	static jint TYPE_BUS_();
	static jint TYPE_DOCK_();
	static jint TYPE_FM_();
	static jint TYPE_FM_TUNER_();
	static jint TYPE_HDMI_();
	static jint TYPE_HDMI_ARC_();
	static jint TYPE_HEARING_AID_();
	static jint TYPE_IP_();
	static jint TYPE_LINE_ANALOG_();
	static jint TYPE_LINE_DIGITAL_();
	static jint TYPE_TELEPHONY_();
	static jint TYPE_TV_TUNER_();
	static jint TYPE_UNKNOWN_();
	static jint TYPE_USB_ACCESSORY_();
	static jint TYPE_USB_DEVICE_();
	static jint TYPE_USB_HEADSET_();
	static jint TYPE_WIRED_HEADPHONES_();
	static jint TYPE_WIRED_HEADSET_();

	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	jint getId();
	ref<java::lang::CharSequence> getProductName();
	ref<java::lang::String> getAddress();
	jboolean isSource();
	jboolean isSink();
	ref<link::java::array<jint>> getSampleRates();
	ref<link::java::array<jint>> getChannelMasks();
	ref<link::java::array<jint>> getChannelIndexMasks();
	ref<link::java::array<jint>> getChannelCounts();
	ref<link::java::array<jint>> getEncodings();
	jint getType();

protected:

	AudioDeviceInfo(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::media {

inline jint AudioDeviceInfo::TYPE_AUX_LINE_() { return get_static_field<SCAPIX_META_STRING("TYPE_AUX_LINE"), jint>(); }
inline jint AudioDeviceInfo::TYPE_BLUETOOTH_A2DP_() { return get_static_field<SCAPIX_META_STRING("TYPE_BLUETOOTH_A2DP"), jint>(); }
inline jint AudioDeviceInfo::TYPE_BLUETOOTH_SCO_() { return get_static_field<SCAPIX_META_STRING("TYPE_BLUETOOTH_SCO"), jint>(); }
inline jint AudioDeviceInfo::TYPE_BUILTIN_EARPIECE_() { return get_static_field<SCAPIX_META_STRING("TYPE_BUILTIN_EARPIECE"), jint>(); }
inline jint AudioDeviceInfo::TYPE_BUILTIN_MIC_() { return get_static_field<SCAPIX_META_STRING("TYPE_BUILTIN_MIC"), jint>(); }
inline jint AudioDeviceInfo::TYPE_BUILTIN_SPEAKER_() { return get_static_field<SCAPIX_META_STRING("TYPE_BUILTIN_SPEAKER"), jint>(); }
inline jint AudioDeviceInfo::TYPE_BUS_() { return get_static_field<SCAPIX_META_STRING("TYPE_BUS"), jint>(); }
inline jint AudioDeviceInfo::TYPE_DOCK_() { return get_static_field<SCAPIX_META_STRING("TYPE_DOCK"), jint>(); }
inline jint AudioDeviceInfo::TYPE_FM_() { return get_static_field<SCAPIX_META_STRING("TYPE_FM"), jint>(); }
inline jint AudioDeviceInfo::TYPE_FM_TUNER_() { return get_static_field<SCAPIX_META_STRING("TYPE_FM_TUNER"), jint>(); }
inline jint AudioDeviceInfo::TYPE_HDMI_() { return get_static_field<SCAPIX_META_STRING("TYPE_HDMI"), jint>(); }
inline jint AudioDeviceInfo::TYPE_HDMI_ARC_() { return get_static_field<SCAPIX_META_STRING("TYPE_HDMI_ARC"), jint>(); }
inline jint AudioDeviceInfo::TYPE_HEARING_AID_() { return get_static_field<SCAPIX_META_STRING("TYPE_HEARING_AID"), jint>(); }
inline jint AudioDeviceInfo::TYPE_IP_() { return get_static_field<SCAPIX_META_STRING("TYPE_IP"), jint>(); }
inline jint AudioDeviceInfo::TYPE_LINE_ANALOG_() { return get_static_field<SCAPIX_META_STRING("TYPE_LINE_ANALOG"), jint>(); }
inline jint AudioDeviceInfo::TYPE_LINE_DIGITAL_() { return get_static_field<SCAPIX_META_STRING("TYPE_LINE_DIGITAL"), jint>(); }
inline jint AudioDeviceInfo::TYPE_TELEPHONY_() { return get_static_field<SCAPIX_META_STRING("TYPE_TELEPHONY"), jint>(); }
inline jint AudioDeviceInfo::TYPE_TV_TUNER_() { return get_static_field<SCAPIX_META_STRING("TYPE_TV_TUNER"), jint>(); }
inline jint AudioDeviceInfo::TYPE_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("TYPE_UNKNOWN"), jint>(); }
inline jint AudioDeviceInfo::TYPE_USB_ACCESSORY_() { return get_static_field<SCAPIX_META_STRING("TYPE_USB_ACCESSORY"), jint>(); }
inline jint AudioDeviceInfo::TYPE_USB_DEVICE_() { return get_static_field<SCAPIX_META_STRING("TYPE_USB_DEVICE"), jint>(); }
inline jint AudioDeviceInfo::TYPE_USB_HEADSET_() { return get_static_field<SCAPIX_META_STRING("TYPE_USB_HEADSET"), jint>(); }
inline jint AudioDeviceInfo::TYPE_WIRED_HEADPHONES_() { return get_static_field<SCAPIX_META_STRING("TYPE_WIRED_HEADPHONES"), jint>(); }
inline jint AudioDeviceInfo::TYPE_WIRED_HEADSET_() { return get_static_field<SCAPIX_META_STRING("TYPE_WIRED_HEADSET"), jint>(); }
inline jboolean AudioDeviceInfo::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint AudioDeviceInfo::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jint AudioDeviceInfo::getId() { return call_method<SCAPIX_META_STRING("getId"), jint>(); }
inline ref<java::lang::CharSequence> AudioDeviceInfo::getProductName() { return call_method<SCAPIX_META_STRING("getProductName"), ref<java::lang::CharSequence>>(); }
inline ref<java::lang::String> AudioDeviceInfo::getAddress() { return call_method<SCAPIX_META_STRING("getAddress"), ref<java::lang::String>>(); }
inline jboolean AudioDeviceInfo::isSource() { return call_method<SCAPIX_META_STRING("isSource"), jboolean>(); }
inline jboolean AudioDeviceInfo::isSink() { return call_method<SCAPIX_META_STRING("isSink"), jboolean>(); }
inline ref<link::java::array<jint>> AudioDeviceInfo::getSampleRates() { return call_method<SCAPIX_META_STRING("getSampleRates"), ref<link::java::array<jint>>>(); }
inline ref<link::java::array<jint>> AudioDeviceInfo::getChannelMasks() { return call_method<SCAPIX_META_STRING("getChannelMasks"), ref<link::java::array<jint>>>(); }
inline ref<link::java::array<jint>> AudioDeviceInfo::getChannelIndexMasks() { return call_method<SCAPIX_META_STRING("getChannelIndexMasks"), ref<link::java::array<jint>>>(); }
inline ref<link::java::array<jint>> AudioDeviceInfo::getChannelCounts() { return call_method<SCAPIX_META_STRING("getChannelCounts"), ref<link::java::array<jint>>>(); }
inline ref<link::java::array<jint>> AudioDeviceInfo::getEncodings() { return call_method<SCAPIX_META_STRING("getEncodings"), ref<link::java::array<jint>>>(); }
inline jint AudioDeviceInfo::getType() { return call_method<SCAPIX_META_STRING("getType"), jint>(); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_AUDIODEVICEINFO_H
