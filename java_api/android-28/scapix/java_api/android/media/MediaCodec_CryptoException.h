// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/RuntimeException.h>

#ifndef SCAPIX_ANDROID_MEDIA_MEDIACODEC_CRYPTOEXCEPTION_H
#define SCAPIX_ANDROID_MEDIA_MEDIACODEC_CRYPTOEXCEPTION_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace android::media {

class MediaCodec_CryptoException : public object_base<SCAPIX_META_STRING("android/media/MediaCodec$CryptoException"),
	java::lang::RuntimeException>
{
public:

	static jint ERROR_INSUFFICIENT_OUTPUT_PROTECTION_();
	static jint ERROR_KEY_EXPIRED_();
	static jint ERROR_NO_KEY_();
	static jint ERROR_RESOURCE_BUSY_();
	static jint ERROR_SESSION_NOT_OPENED_();
	static jint ERROR_UNSUPPORTED_OPERATION_();

	static ref<MediaCodec_CryptoException> new_object(jint errorCode, ref<java::lang::String> detailMessage);
	jint getErrorCode();

protected:

	MediaCodec_CryptoException(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::media {

inline jint MediaCodec_CryptoException::ERROR_INSUFFICIENT_OUTPUT_PROTECTION_() { return get_static_field<SCAPIX_META_STRING("ERROR_INSUFFICIENT_OUTPUT_PROTECTION"), jint>(); }
inline jint MediaCodec_CryptoException::ERROR_KEY_EXPIRED_() { return get_static_field<SCAPIX_META_STRING("ERROR_KEY_EXPIRED"), jint>(); }
inline jint MediaCodec_CryptoException::ERROR_NO_KEY_() { return get_static_field<SCAPIX_META_STRING("ERROR_NO_KEY"), jint>(); }
inline jint MediaCodec_CryptoException::ERROR_RESOURCE_BUSY_() { return get_static_field<SCAPIX_META_STRING("ERROR_RESOURCE_BUSY"), jint>(); }
inline jint MediaCodec_CryptoException::ERROR_SESSION_NOT_OPENED_() { return get_static_field<SCAPIX_META_STRING("ERROR_SESSION_NOT_OPENED"), jint>(); }
inline jint MediaCodec_CryptoException::ERROR_UNSUPPORTED_OPERATION_() { return get_static_field<SCAPIX_META_STRING("ERROR_UNSUPPORTED_OPERATION"), jint>(); }
inline ref<MediaCodec_CryptoException> MediaCodec_CryptoException::new_object(jint errorCode, ref<java::lang::String> detailMessage) { return base_::new_object(errorCode, detailMessage); }
inline jint MediaCodec_CryptoException::getErrorCode() { return call_method<SCAPIX_META_STRING("getErrorCode"), jint>(); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_MEDIACODEC_CRYPTOEXCEPTION_H
