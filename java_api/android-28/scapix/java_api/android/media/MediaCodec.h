// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_MEDIA_MEDIACODEC_H
#define SCAPIX_ANDROID_MEDIA_MEDIACODEC_H

namespace scapix::java_api {

namespace android::media { class Image; }
namespace android::media { class MediaCodec_BufferInfo; }
namespace android::media { class MediaCodec_Callback; }
namespace android::media { class MediaCodec_CryptoInfo; }
namespace android::media { class MediaCodec_OnFrameRenderedListener; }
namespace android::media { class MediaCodecInfo; }
namespace android::media { class MediaCrypto; }
namespace android::media { class MediaDescrambler; }
namespace android::media { class MediaFormat; }
namespace android::os { class Bundle; }
namespace android::os { class Handler; }
namespace android::os { class PersistableBundle; }
namespace android::view { class Surface; }
namespace java::lang { class String; }
namespace java::nio { class ByteBuffer; }
namespace android::media { class MediaCodec_MetricsConstants; }
namespace android::media { class MediaCodec_CryptoException; }
namespace android::media { class MediaCodec_CodecException; }

namespace android::media {

class MediaCodec : public object_base<SCAPIX_META_STRING("android/media/MediaCodec"),
	java::lang::Object>
{
public:

	using OnFrameRenderedListener = MediaCodec_OnFrameRenderedListener;
	using MetricsConstants = MediaCodec_MetricsConstants;
	using CryptoInfo = MediaCodec_CryptoInfo;
	using CryptoException = MediaCodec_CryptoException;
	using CodecException = MediaCodec_CodecException;
	using Callback = MediaCodec_Callback;
	using BufferInfo = MediaCodec_BufferInfo;

	static jint BUFFER_FLAG_CODEC_CONFIG_();
	static jint BUFFER_FLAG_END_OF_STREAM_();
	static jint BUFFER_FLAG_KEY_FRAME_();
	static jint BUFFER_FLAG_PARTIAL_FRAME_();
	static jint BUFFER_FLAG_SYNC_FRAME_();
	static jint CONFIGURE_FLAG_ENCODE_();
	static jint CRYPTO_MODE_AES_CBC_();
	static jint CRYPTO_MODE_AES_CTR_();
	static jint CRYPTO_MODE_UNENCRYPTED_();
	static jint INFO_OUTPUT_BUFFERS_CHANGED_();
	static jint INFO_OUTPUT_FORMAT_CHANGED_();
	static jint INFO_TRY_AGAIN_LATER_();
	static ref<java::lang::String> PARAMETER_KEY_REQUEST_SYNC_FRAME_();
	static ref<java::lang::String> PARAMETER_KEY_SUSPEND_();
	static ref<java::lang::String> PARAMETER_KEY_VIDEO_BITRATE_();
	static jint VIDEO_SCALING_MODE_SCALE_TO_FIT_();
	static jint VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING_();

	static ref<android::media::MediaCodec> createDecoderByType(ref<java::lang::String> type);
	static ref<android::media::MediaCodec> createEncoderByType(ref<java::lang::String> type);
	static ref<android::media::MediaCodec> createByCodecName(ref<java::lang::String> name);
	void reset();
	void release();
	void configure(ref<android::media::MediaFormat> format, ref<android::view::Surface> surface, ref<android::media::MediaCrypto> crypto, jint flags);
	void configure(ref<android::media::MediaFormat> format, ref<android::view::Surface> surface, jint flags, ref<android::media::MediaDescrambler> descrambler);
	void setOutputSurface(ref<android::view::Surface> surface);
	static ref<android::view::Surface> createPersistentInputSurface();
	void setInputSurface(ref<android::view::Surface> surface);
	ref<android::view::Surface> createInputSurface();
	void start();
	void stop();
	void flush();
	void queueInputBuffer(jint index, jint offset, jint size, jlong presentationTimeUs, jint p5);
	void queueSecureInputBuffer(jint index, jint offset, ref<android::media::MediaCodec_CryptoInfo> info, jlong presentationTimeUs, jint p5);
	jint dequeueInputBuffer(jlong timeoutUs);
	jint dequeueOutputBuffer(ref<android::media::MediaCodec_BufferInfo> info, jlong timeoutUs);
	void releaseOutputBuffer(jint index, jboolean render);
	void releaseOutputBuffer(jint index, jlong renderTimestampNs);
	void signalEndOfInputStream();
	ref<android::media::MediaFormat> getOutputFormat();
	ref<android::media::MediaFormat> getInputFormat();
	ref<android::media::MediaFormat> getOutputFormat(jint index);
	ref<link::java::array<java::nio::ByteBuffer>> getInputBuffers();
	ref<link::java::array<java::nio::ByteBuffer>> getOutputBuffers();
	ref<java::nio::ByteBuffer> getInputBuffer(jint index);
	ref<android::media::Image> getInputImage(jint index);
	ref<java::nio::ByteBuffer> getOutputBuffer(jint index);
	ref<android::media::Image> getOutputImage(jint index);
	void setVideoScalingMode(jint p1);
	ref<java::lang::String> getName();
	ref<android::os::PersistableBundle> getMetrics();
	void setParameters(ref<android::os::Bundle> params);
	void setCallback(ref<android::media::MediaCodec_Callback> cb, ref<android::os::Handler> handler);
	void setCallback(ref<android::media::MediaCodec_Callback> cb);
	void setOnFrameRenderedListener(ref<android::media::MediaCodec_OnFrameRenderedListener> listener, ref<android::os::Handler> handler);
	ref<android::media::MediaCodecInfo> getCodecInfo();

protected:

	MediaCodec(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/android/media/Image.h>
#include <scapix/java_api/android/media/MediaCodec_BufferInfo.h>
#include <scapix/java_api/android/media/MediaCodec_Callback.h>
#include <scapix/java_api/android/media/MediaCodec_CryptoInfo.h>
#include <scapix/java_api/android/media/MediaCodec_OnFrameRenderedListener.h>
#include <scapix/java_api/android/media/MediaCodecInfo.h>
#include <scapix/java_api/android/media/MediaCrypto.h>
#include <scapix/java_api/android/media/MediaDescrambler.h>
#include <scapix/java_api/android/media/MediaFormat.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>

namespace scapix::java_api {
namespace android::media {

inline jint MediaCodec::BUFFER_FLAG_CODEC_CONFIG_() { return get_static_field<SCAPIX_META_STRING("BUFFER_FLAG_CODEC_CONFIG"), jint>(); }
inline jint MediaCodec::BUFFER_FLAG_END_OF_STREAM_() { return get_static_field<SCAPIX_META_STRING("BUFFER_FLAG_END_OF_STREAM"), jint>(); }
inline jint MediaCodec::BUFFER_FLAG_KEY_FRAME_() { return get_static_field<SCAPIX_META_STRING("BUFFER_FLAG_KEY_FRAME"), jint>(); }
inline jint MediaCodec::BUFFER_FLAG_PARTIAL_FRAME_() { return get_static_field<SCAPIX_META_STRING("BUFFER_FLAG_PARTIAL_FRAME"), jint>(); }
inline jint MediaCodec::BUFFER_FLAG_SYNC_FRAME_() { return get_static_field<SCAPIX_META_STRING("BUFFER_FLAG_SYNC_FRAME"), jint>(); }
inline jint MediaCodec::CONFIGURE_FLAG_ENCODE_() { return get_static_field<SCAPIX_META_STRING("CONFIGURE_FLAG_ENCODE"), jint>(); }
inline jint MediaCodec::CRYPTO_MODE_AES_CBC_() { return get_static_field<SCAPIX_META_STRING("CRYPTO_MODE_AES_CBC"), jint>(); }
inline jint MediaCodec::CRYPTO_MODE_AES_CTR_() { return get_static_field<SCAPIX_META_STRING("CRYPTO_MODE_AES_CTR"), jint>(); }
inline jint MediaCodec::CRYPTO_MODE_UNENCRYPTED_() { return get_static_field<SCAPIX_META_STRING("CRYPTO_MODE_UNENCRYPTED"), jint>(); }
inline jint MediaCodec::INFO_OUTPUT_BUFFERS_CHANGED_() { return get_static_field<SCAPIX_META_STRING("INFO_OUTPUT_BUFFERS_CHANGED"), jint>(); }
inline jint MediaCodec::INFO_OUTPUT_FORMAT_CHANGED_() { return get_static_field<SCAPIX_META_STRING("INFO_OUTPUT_FORMAT_CHANGED"), jint>(); }
inline jint MediaCodec::INFO_TRY_AGAIN_LATER_() { return get_static_field<SCAPIX_META_STRING("INFO_TRY_AGAIN_LATER"), jint>(); }
inline ref<java::lang::String> MediaCodec::PARAMETER_KEY_REQUEST_SYNC_FRAME_() { return get_static_field<SCAPIX_META_STRING("PARAMETER_KEY_REQUEST_SYNC_FRAME"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaCodec::PARAMETER_KEY_SUSPEND_() { return get_static_field<SCAPIX_META_STRING("PARAMETER_KEY_SUSPEND"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaCodec::PARAMETER_KEY_VIDEO_BITRATE_() { return get_static_field<SCAPIX_META_STRING("PARAMETER_KEY_VIDEO_BITRATE"), ref<java::lang::String>>(); }
inline jint MediaCodec::VIDEO_SCALING_MODE_SCALE_TO_FIT_() { return get_static_field<SCAPIX_META_STRING("VIDEO_SCALING_MODE_SCALE_TO_FIT"), jint>(); }
inline jint MediaCodec::VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING_() { return get_static_field<SCAPIX_META_STRING("VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING"), jint>(); }
inline ref<android::media::MediaCodec> MediaCodec::createDecoderByType(ref<java::lang::String> type) { return call_static_method<SCAPIX_META_STRING("createDecoderByType"), ref<android::media::MediaCodec>>(type); }
inline ref<android::media::MediaCodec> MediaCodec::createEncoderByType(ref<java::lang::String> type) { return call_static_method<SCAPIX_META_STRING("createEncoderByType"), ref<android::media::MediaCodec>>(type); }
inline ref<android::media::MediaCodec> MediaCodec::createByCodecName(ref<java::lang::String> name) { return call_static_method<SCAPIX_META_STRING("createByCodecName"), ref<android::media::MediaCodec>>(name); }
inline void MediaCodec::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline void MediaCodec::release() { return call_method<SCAPIX_META_STRING("release"), void>(); }
inline void MediaCodec::configure(ref<android::media::MediaFormat> format, ref<android::view::Surface> surface, ref<android::media::MediaCrypto> crypto, jint flags) { return call_method<SCAPIX_META_STRING("configure"), void>(format, surface, crypto, flags); }
inline void MediaCodec::configure(ref<android::media::MediaFormat> format, ref<android::view::Surface> surface, jint flags, ref<android::media::MediaDescrambler> descrambler) { return call_method<SCAPIX_META_STRING("configure"), void>(format, surface, flags, descrambler); }
inline void MediaCodec::setOutputSurface(ref<android::view::Surface> surface) { return call_method<SCAPIX_META_STRING("setOutputSurface"), void>(surface); }
inline ref<android::view::Surface> MediaCodec::createPersistentInputSurface() { return call_static_method<SCAPIX_META_STRING("createPersistentInputSurface"), ref<android::view::Surface>>(); }
inline void MediaCodec::setInputSurface(ref<android::view::Surface> surface) { return call_method<SCAPIX_META_STRING("setInputSurface"), void>(surface); }
inline ref<android::view::Surface> MediaCodec::createInputSurface() { return call_method<SCAPIX_META_STRING("createInputSurface"), ref<android::view::Surface>>(); }
inline void MediaCodec::start() { return call_method<SCAPIX_META_STRING("start"), void>(); }
inline void MediaCodec::stop() { return call_method<SCAPIX_META_STRING("stop"), void>(); }
inline void MediaCodec::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline void MediaCodec::queueInputBuffer(jint index, jint offset, jint size, jlong presentationTimeUs, jint p5) { return call_method<SCAPIX_META_STRING("queueInputBuffer"), void>(index, offset, size, presentationTimeUs, p5); }
inline void MediaCodec::queueSecureInputBuffer(jint index, jint offset, ref<android::media::MediaCodec_CryptoInfo> info, jlong presentationTimeUs, jint p5) { return call_method<SCAPIX_META_STRING("queueSecureInputBuffer"), void>(index, offset, info, presentationTimeUs, p5); }
inline jint MediaCodec::dequeueInputBuffer(jlong timeoutUs) { return call_method<SCAPIX_META_STRING("dequeueInputBuffer"), jint>(timeoutUs); }
inline jint MediaCodec::dequeueOutputBuffer(ref<android::media::MediaCodec_BufferInfo> info, jlong timeoutUs) { return call_method<SCAPIX_META_STRING("dequeueOutputBuffer"), jint>(info, timeoutUs); }
inline void MediaCodec::releaseOutputBuffer(jint index, jboolean render) { return call_method<SCAPIX_META_STRING("releaseOutputBuffer"), void>(index, render); }
inline void MediaCodec::releaseOutputBuffer(jint index, jlong renderTimestampNs) { return call_method<SCAPIX_META_STRING("releaseOutputBuffer"), void>(index, renderTimestampNs); }
inline void MediaCodec::signalEndOfInputStream() { return call_method<SCAPIX_META_STRING("signalEndOfInputStream"), void>(); }
inline ref<android::media::MediaFormat> MediaCodec::getOutputFormat() { return call_method<SCAPIX_META_STRING("getOutputFormat"), ref<android::media::MediaFormat>>(); }
inline ref<android::media::MediaFormat> MediaCodec::getInputFormat() { return call_method<SCAPIX_META_STRING("getInputFormat"), ref<android::media::MediaFormat>>(); }
inline ref<android::media::MediaFormat> MediaCodec::getOutputFormat(jint index) { return call_method<SCAPIX_META_STRING("getOutputFormat"), ref<android::media::MediaFormat>>(index); }
inline ref<link::java::array<java::nio::ByteBuffer>> MediaCodec::getInputBuffers() { return call_method<SCAPIX_META_STRING("getInputBuffers"), ref<link::java::array<java::nio::ByteBuffer>>>(); }
inline ref<link::java::array<java::nio::ByteBuffer>> MediaCodec::getOutputBuffers() { return call_method<SCAPIX_META_STRING("getOutputBuffers"), ref<link::java::array<java::nio::ByteBuffer>>>(); }
inline ref<java::nio::ByteBuffer> MediaCodec::getInputBuffer(jint index) { return call_method<SCAPIX_META_STRING("getInputBuffer"), ref<java::nio::ByteBuffer>>(index); }
inline ref<android::media::Image> MediaCodec::getInputImage(jint index) { return call_method<SCAPIX_META_STRING("getInputImage"), ref<android::media::Image>>(index); }
inline ref<java::nio::ByteBuffer> MediaCodec::getOutputBuffer(jint index) { return call_method<SCAPIX_META_STRING("getOutputBuffer"), ref<java::nio::ByteBuffer>>(index); }
inline ref<android::media::Image> MediaCodec::getOutputImage(jint index) { return call_method<SCAPIX_META_STRING("getOutputImage"), ref<android::media::Image>>(index); }
inline void MediaCodec::setVideoScalingMode(jint p1) { return call_method<SCAPIX_META_STRING("setVideoScalingMode"), void>(p1); }
inline ref<java::lang::String> MediaCodec::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<android::os::PersistableBundle> MediaCodec::getMetrics() { return call_method<SCAPIX_META_STRING("getMetrics"), ref<android::os::PersistableBundle>>(); }
inline void MediaCodec::setParameters(ref<android::os::Bundle> params) { return call_method<SCAPIX_META_STRING("setParameters"), void>(params); }
inline void MediaCodec::setCallback(ref<android::media::MediaCodec_Callback> cb, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("setCallback"), void>(cb, handler); }
inline void MediaCodec::setCallback(ref<android::media::MediaCodec_Callback> cb) { return call_method<SCAPIX_META_STRING("setCallback"), void>(cb); }
inline void MediaCodec::setOnFrameRenderedListener(ref<android::media::MediaCodec_OnFrameRenderedListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("setOnFrameRenderedListener"), void>(listener, handler); }
inline ref<android::media::MediaCodecInfo> MediaCodec::getCodecInfo() { return call_method<SCAPIX_META_STRING("getCodecInfo"), ref<android::media::MediaCodecInfo>>(); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_MEDIACODEC_H
