// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_MEDIA_MIDI_MIDIDEVICEINFO_H
#define SCAPIX_ANDROID_MEDIA_MIDI_MIDIDEVICEINFO_H

namespace scapix::java_api {

namespace android::media::midi { class MidiDeviceInfo_PortInfo; }
namespace android::os { class Bundle; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }

namespace android::media::midi {

class MidiDeviceInfo : public object_base<SCAPIX_META_STRING("android/media/midi/MidiDeviceInfo"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using PortInfo = MidiDeviceInfo_PortInfo;

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static ref<java::lang::String> PROPERTY_BLUETOOTH_DEVICE_();
	static ref<java::lang::String> PROPERTY_MANUFACTURER_();
	static ref<java::lang::String> PROPERTY_NAME_();
	static ref<java::lang::String> PROPERTY_PRODUCT_();
	static ref<java::lang::String> PROPERTY_SERIAL_NUMBER_();
	static ref<java::lang::String> PROPERTY_USB_DEVICE_();
	static ref<java::lang::String> PROPERTY_VERSION_();
	static jint TYPE_BLUETOOTH_();
	static jint TYPE_USB_();
	static jint TYPE_VIRTUAL_();

	jint getType();
	jint getId();
	jint getInputPortCount();
	jint getOutputPortCount();
	ref<link::java::array<android::media::midi::MidiDeviceInfo_PortInfo>> getPorts();
	ref<android::os::Bundle> getProperties();
	jboolean isPrivate();
	jboolean equals(ref<java::lang::Object> o);
	jint hashCode();
	ref<java::lang::String> toString();
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> parcel, jint flags);

protected:

	MidiDeviceInfo(handle_type h) : base_(h) {}

};

} // namespace android::media::midi
} // namespace scapix::java_api

#include <scapix/java_api/android/media/midi/MidiDeviceInfo_PortInfo.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::media::midi {

inline ref<android::os::Parcelable_Creator> MidiDeviceInfo::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<java::lang::String> MidiDeviceInfo::PROPERTY_BLUETOOTH_DEVICE_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_BLUETOOTH_DEVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MidiDeviceInfo::PROPERTY_MANUFACTURER_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_MANUFACTURER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MidiDeviceInfo::PROPERTY_NAME_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_NAME"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MidiDeviceInfo::PROPERTY_PRODUCT_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_PRODUCT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MidiDeviceInfo::PROPERTY_SERIAL_NUMBER_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_SERIAL_NUMBER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MidiDeviceInfo::PROPERTY_USB_DEVICE_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_USB_DEVICE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MidiDeviceInfo::PROPERTY_VERSION_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_VERSION"), ref<java::lang::String>>(); }
inline jint MidiDeviceInfo::TYPE_BLUETOOTH_() { return get_static_field<SCAPIX_META_STRING("TYPE_BLUETOOTH"), jint>(); }
inline jint MidiDeviceInfo::TYPE_USB_() { return get_static_field<SCAPIX_META_STRING("TYPE_USB"), jint>(); }
inline jint MidiDeviceInfo::TYPE_VIRTUAL_() { return get_static_field<SCAPIX_META_STRING("TYPE_VIRTUAL"), jint>(); }
inline jint MidiDeviceInfo::getType() { return call_method<SCAPIX_META_STRING("getType"), jint>(); }
inline jint MidiDeviceInfo::getId() { return call_method<SCAPIX_META_STRING("getId"), jint>(); }
inline jint MidiDeviceInfo::getInputPortCount() { return call_method<SCAPIX_META_STRING("getInputPortCount"), jint>(); }
inline jint MidiDeviceInfo::getOutputPortCount() { return call_method<SCAPIX_META_STRING("getOutputPortCount"), jint>(); }
inline ref<link::java::array<android::media::midi::MidiDeviceInfo_PortInfo>> MidiDeviceInfo::getPorts() { return call_method<SCAPIX_META_STRING("getPorts"), ref<link::java::array<android::media::midi::MidiDeviceInfo_PortInfo>>>(); }
inline ref<android::os::Bundle> MidiDeviceInfo::getProperties() { return call_method<SCAPIX_META_STRING("getProperties"), ref<android::os::Bundle>>(); }
inline jboolean MidiDeviceInfo::isPrivate() { return call_method<SCAPIX_META_STRING("isPrivate"), jboolean>(); }
inline jboolean MidiDeviceInfo::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint MidiDeviceInfo::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline ref<java::lang::String> MidiDeviceInfo::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint MidiDeviceInfo::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void MidiDeviceInfo::writeToParcel(ref<android::os::Parcel> parcel, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(parcel, flags); }

} // namespace android::media::midi
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_MIDI_MIDIDEVICEINFO_H
