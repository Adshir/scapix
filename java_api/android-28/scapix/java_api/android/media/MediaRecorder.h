// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/media/AudioRouting.h>

#ifndef SCAPIX_ANDROID_MEDIA_MEDIARECORDER_H
#define SCAPIX_ANDROID_MEDIA_MEDIARECORDER_H

namespace scapix::java_api {

namespace android::hardware { class Camera; }
namespace android::media { class AudioDeviceInfo; }
namespace android::media { class AudioRouting_OnRoutingChangedListener; }
namespace android::media { class CamcorderProfile; }
namespace android::media { class MediaRecorder_OnErrorListener; }
namespace android::media { class MediaRecorder_OnInfoListener; }
namespace android::os { class Handler; }
namespace android::os { class PersistableBundle; }
namespace android::view { class Surface; }
namespace java::io { class File; }
namespace java::io { class FileDescriptor; }
namespace java::lang { class String; }
namespace java::util { class List; }
namespace android::media { class MediaRecorder_VideoSource; }
namespace android::media { class MediaRecorder_VideoEncoder; }
namespace android::media { class MediaRecorder_OutputFormat; }
namespace android::media { class MediaRecorder_MetricsConstants; }
namespace android::media { class MediaRecorder_AudioSource; }
namespace android::media { class MediaRecorder_AudioEncoder; }

namespace android::media {

class MediaRecorder : public object_base<SCAPIX_META_STRING("android/media/MediaRecorder"),
	java::lang::Object,
	android::media::AudioRouting>
{
public:

	using VideoSource = MediaRecorder_VideoSource;
	using VideoEncoder = MediaRecorder_VideoEncoder;
	using OutputFormat = MediaRecorder_OutputFormat;
	using OnInfoListener = MediaRecorder_OnInfoListener;
	using OnErrorListener = MediaRecorder_OnErrorListener;
	using MetricsConstants = MediaRecorder_MetricsConstants;
	using AudioSource = MediaRecorder_AudioSource;
	using AudioEncoder = MediaRecorder_AudioEncoder;

	static jint MEDIA_ERROR_SERVER_DIED_();
	static jint MEDIA_RECORDER_ERROR_UNKNOWN_();
	static jint MEDIA_RECORDER_INFO_MAX_DURATION_REACHED_();
	static jint MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING_();
	static jint MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED_();
	static jint MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED_();
	static jint MEDIA_RECORDER_INFO_UNKNOWN_();

	static ref<MediaRecorder> new_object();
	void setCamera(ref<android::hardware::Camera> p1);
	ref<android::view::Surface> getSurface();
	void setInputSurface(ref<android::view::Surface> surface);
	void setPreviewDisplay(ref<android::view::Surface> sv);
	void setAudioSource(jint p1);
	static jint getAudioSourceMax();
	void setVideoSource(jint p1);
	void setProfile(ref<android::media::CamcorderProfile> profile);
	void setCaptureRate(jdouble fps);
	void setOrientationHint(jint degrees);
	void setLocation(jfloat latitude, jfloat longitude);
	void setOutputFormat(jint p1);
	void setVideoSize(jint p1, jint p2);
	void setVideoFrameRate(jint p1);
	void setMaxDuration(jint p1);
	void setMaxFileSize(jlong p1);
	void setAudioEncoder(jint p1);
	void setVideoEncoder(jint p1);
	void setAudioSamplingRate(jint samplingRate);
	void setAudioChannels(jint numChannels);
	void setAudioEncodingBitRate(jint bitRate);
	void setVideoEncodingBitRate(jint bitRate);
	void setVideoEncodingProfileLevel(jint profile, jint level);
	void setOutputFile(ref<java::io::FileDescriptor> fd);
	void setOutputFile(ref<java::io::File> file);
	void setNextOutputFile(ref<java::io::FileDescriptor> fd);
	void setOutputFile(ref<java::lang::String> path);
	void setNextOutputFile(ref<java::io::File> file);
	void prepare();
	void start();
	void stop();
	void pause();
	void resume();
	void reset();
	jint getMaxAmplitude();
	void setOnErrorListener(ref<android::media::MediaRecorder_OnErrorListener> l);
	void setOnInfoListener(ref<android::media::MediaRecorder_OnInfoListener> listener);
	jboolean setPreferredDevice(ref<android::media::AudioDeviceInfo> deviceInfo);
	ref<android::media::AudioDeviceInfo> getPreferredDevice();
	ref<android::media::AudioDeviceInfo> getRoutedDevice();
	void addOnRoutingChangedListener(ref<android::media::AudioRouting_OnRoutingChangedListener> listener, ref<android::os::Handler> handler);
	void removeOnRoutingChangedListener(ref<android::media::AudioRouting_OnRoutingChangedListener> listener);
	ref<java::util::List> getActiveMicrophones();
	void release();
	ref<android::os::PersistableBundle> getMetrics();

protected:

	MediaRecorder(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/android/hardware/Camera.h>
#include <scapix/java_api/android/media/AudioDeviceInfo.h>
#include <scapix/java_api/android/media/AudioRouting_OnRoutingChangedListener.h>
#include <scapix/java_api/android/media/CamcorderProfile.h>
#include <scapix/java_api/android/media/MediaRecorder_OnErrorListener.h>
#include <scapix/java_api/android/media/MediaRecorder_OnInfoListener.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::media {

inline jint MediaRecorder::MEDIA_ERROR_SERVER_DIED_() { return get_static_field<SCAPIX_META_STRING("MEDIA_ERROR_SERVER_DIED"), jint>(); }
inline jint MediaRecorder::MEDIA_RECORDER_ERROR_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("MEDIA_RECORDER_ERROR_UNKNOWN"), jint>(); }
inline jint MediaRecorder::MEDIA_RECORDER_INFO_MAX_DURATION_REACHED_() { return get_static_field<SCAPIX_META_STRING("MEDIA_RECORDER_INFO_MAX_DURATION_REACHED"), jint>(); }
inline jint MediaRecorder::MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING_() { return get_static_field<SCAPIX_META_STRING("MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING"), jint>(); }
inline jint MediaRecorder::MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED_() { return get_static_field<SCAPIX_META_STRING("MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED"), jint>(); }
inline jint MediaRecorder::MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED_() { return get_static_field<SCAPIX_META_STRING("MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED"), jint>(); }
inline jint MediaRecorder::MEDIA_RECORDER_INFO_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("MEDIA_RECORDER_INFO_UNKNOWN"), jint>(); }
inline ref<MediaRecorder> MediaRecorder::new_object() { return base_::new_object(); }
inline void MediaRecorder::setCamera(ref<android::hardware::Camera> p1) { return call_method<SCAPIX_META_STRING("setCamera"), void>(p1); }
inline ref<android::view::Surface> MediaRecorder::getSurface() { return call_method<SCAPIX_META_STRING("getSurface"), ref<android::view::Surface>>(); }
inline void MediaRecorder::setInputSurface(ref<android::view::Surface> surface) { return call_method<SCAPIX_META_STRING("setInputSurface"), void>(surface); }
inline void MediaRecorder::setPreviewDisplay(ref<android::view::Surface> sv) { return call_method<SCAPIX_META_STRING("setPreviewDisplay"), void>(sv); }
inline void MediaRecorder::setAudioSource(jint p1) { return call_method<SCAPIX_META_STRING("setAudioSource"), void>(p1); }
inline jint MediaRecorder::getAudioSourceMax() { return call_static_method<SCAPIX_META_STRING("getAudioSourceMax"), jint>(); }
inline void MediaRecorder::setVideoSource(jint p1) { return call_method<SCAPIX_META_STRING("setVideoSource"), void>(p1); }
inline void MediaRecorder::setProfile(ref<android::media::CamcorderProfile> profile) { return call_method<SCAPIX_META_STRING("setProfile"), void>(profile); }
inline void MediaRecorder::setCaptureRate(jdouble fps) { return call_method<SCAPIX_META_STRING("setCaptureRate"), void>(fps); }
inline void MediaRecorder::setOrientationHint(jint degrees) { return call_method<SCAPIX_META_STRING("setOrientationHint"), void>(degrees); }
inline void MediaRecorder::setLocation(jfloat latitude, jfloat longitude) { return call_method<SCAPIX_META_STRING("setLocation"), void>(latitude, longitude); }
inline void MediaRecorder::setOutputFormat(jint p1) { return call_method<SCAPIX_META_STRING("setOutputFormat"), void>(p1); }
inline void MediaRecorder::setVideoSize(jint p1, jint p2) { return call_method<SCAPIX_META_STRING("setVideoSize"), void>(p1, p2); }
inline void MediaRecorder::setVideoFrameRate(jint p1) { return call_method<SCAPIX_META_STRING("setVideoFrameRate"), void>(p1); }
inline void MediaRecorder::setMaxDuration(jint p1) { return call_method<SCAPIX_META_STRING("setMaxDuration"), void>(p1); }
inline void MediaRecorder::setMaxFileSize(jlong p1) { return call_method<SCAPIX_META_STRING("setMaxFileSize"), void>(p1); }
inline void MediaRecorder::setAudioEncoder(jint p1) { return call_method<SCAPIX_META_STRING("setAudioEncoder"), void>(p1); }
inline void MediaRecorder::setVideoEncoder(jint p1) { return call_method<SCAPIX_META_STRING("setVideoEncoder"), void>(p1); }
inline void MediaRecorder::setAudioSamplingRate(jint samplingRate) { return call_method<SCAPIX_META_STRING("setAudioSamplingRate"), void>(samplingRate); }
inline void MediaRecorder::setAudioChannels(jint numChannels) { return call_method<SCAPIX_META_STRING("setAudioChannels"), void>(numChannels); }
inline void MediaRecorder::setAudioEncodingBitRate(jint bitRate) { return call_method<SCAPIX_META_STRING("setAudioEncodingBitRate"), void>(bitRate); }
inline void MediaRecorder::setVideoEncodingBitRate(jint bitRate) { return call_method<SCAPIX_META_STRING("setVideoEncodingBitRate"), void>(bitRate); }
inline void MediaRecorder::setVideoEncodingProfileLevel(jint profile, jint level) { return call_method<SCAPIX_META_STRING("setVideoEncodingProfileLevel"), void>(profile, level); }
inline void MediaRecorder::setOutputFile(ref<java::io::FileDescriptor> fd) { return call_method<SCAPIX_META_STRING("setOutputFile"), void>(fd); }
inline void MediaRecorder::setOutputFile(ref<java::io::File> file) { return call_method<SCAPIX_META_STRING("setOutputFile"), void>(file); }
inline void MediaRecorder::setNextOutputFile(ref<java::io::FileDescriptor> fd) { return call_method<SCAPIX_META_STRING("setNextOutputFile"), void>(fd); }
inline void MediaRecorder::setOutputFile(ref<java::lang::String> path) { return call_method<SCAPIX_META_STRING("setOutputFile"), void>(path); }
inline void MediaRecorder::setNextOutputFile(ref<java::io::File> file) { return call_method<SCAPIX_META_STRING("setNextOutputFile"), void>(file); }
inline void MediaRecorder::prepare() { return call_method<SCAPIX_META_STRING("prepare"), void>(); }
inline void MediaRecorder::start() { return call_method<SCAPIX_META_STRING("start"), void>(); }
inline void MediaRecorder::stop() { return call_method<SCAPIX_META_STRING("stop"), void>(); }
inline void MediaRecorder::pause() { return call_method<SCAPIX_META_STRING("pause"), void>(); }
inline void MediaRecorder::resume() { return call_method<SCAPIX_META_STRING("resume"), void>(); }
inline void MediaRecorder::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline jint MediaRecorder::getMaxAmplitude() { return call_method<SCAPIX_META_STRING("getMaxAmplitude"), jint>(); }
inline void MediaRecorder::setOnErrorListener(ref<android::media::MediaRecorder_OnErrorListener> l) { return call_method<SCAPIX_META_STRING("setOnErrorListener"), void>(l); }
inline void MediaRecorder::setOnInfoListener(ref<android::media::MediaRecorder_OnInfoListener> listener) { return call_method<SCAPIX_META_STRING("setOnInfoListener"), void>(listener); }
inline jboolean MediaRecorder::setPreferredDevice(ref<android::media::AudioDeviceInfo> deviceInfo) { return call_method<SCAPIX_META_STRING("setPreferredDevice"), jboolean>(deviceInfo); }
inline ref<android::media::AudioDeviceInfo> MediaRecorder::getPreferredDevice() { return call_method<SCAPIX_META_STRING("getPreferredDevice"), ref<android::media::AudioDeviceInfo>>(); }
inline ref<android::media::AudioDeviceInfo> MediaRecorder::getRoutedDevice() { return call_method<SCAPIX_META_STRING("getRoutedDevice"), ref<android::media::AudioDeviceInfo>>(); }
inline void MediaRecorder::addOnRoutingChangedListener(ref<android::media::AudioRouting_OnRoutingChangedListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("addOnRoutingChangedListener"), void>(listener, handler); }
inline void MediaRecorder::removeOnRoutingChangedListener(ref<android::media::AudioRouting_OnRoutingChangedListener> listener) { return call_method<SCAPIX_META_STRING("removeOnRoutingChangedListener"), void>(listener); }
inline ref<java::util::List> MediaRecorder::getActiveMicrophones() { return call_method<SCAPIX_META_STRING("getActiveMicrophones"), ref<java::util::List>>(); }
inline void MediaRecorder::release() { return call_method<SCAPIX_META_STRING("release"), void>(); }
inline ref<android::os::PersistableBundle> MediaRecorder::getMetrics() { return call_method<SCAPIX_META_STRING("getMetrics"), ref<android::os::PersistableBundle>>(); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_MEDIARECORDER_H
