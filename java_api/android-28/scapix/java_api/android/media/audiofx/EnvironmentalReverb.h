// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/media/audiofx/AudioEffect.h>

#ifndef SCAPIX_ANDROID_MEDIA_AUDIOFX_ENVIRONMENTALREVERB_H
#define SCAPIX_ANDROID_MEDIA_AUDIOFX_ENVIRONMENTALREVERB_H

namespace scapix::java_api {

namespace android::media::audiofx { class EnvironmentalReverb_OnParameterChangeListener; }
namespace android::media::audiofx { class EnvironmentalReverb_Settings; }

namespace android::media::audiofx {

class EnvironmentalReverb : public object_base<SCAPIX_META_STRING("android/media/audiofx/EnvironmentalReverb"),
	android::media::audiofx::AudioEffect>
{
public:

	using Settings = EnvironmentalReverb_Settings;
	using OnParameterChangeListener = EnvironmentalReverb_OnParameterChangeListener;

	static jint PARAM_DECAY_HF_RATIO_();
	static jint PARAM_DECAY_TIME_();
	static jint PARAM_DENSITY_();
	static jint PARAM_DIFFUSION_();
	static jint PARAM_REFLECTIONS_DELAY_();
	static jint PARAM_REFLECTIONS_LEVEL_();
	static jint PARAM_REVERB_DELAY_();
	static jint PARAM_REVERB_LEVEL_();
	static jint PARAM_ROOM_HF_LEVEL_();
	static jint PARAM_ROOM_LEVEL_();

	static ref<EnvironmentalReverb> new_object(jint priority, jint audioSession);
	void setRoomLevel(jshort room);
	jshort getRoomLevel();
	void setRoomHFLevel(jshort roomHF);
	jshort getRoomHFLevel();
	void setDecayTime(jint decayTime);
	jint getDecayTime();
	void setDecayHFRatio(jshort decayHFRatio);
	jshort getDecayHFRatio();
	void setReflectionsLevel(jshort reflectionsLevel);
	jshort getReflectionsLevel();
	void setReflectionsDelay(jint reflectionsDelay);
	jint getReflectionsDelay();
	void setReverbLevel(jshort reverbLevel);
	jshort getReverbLevel();
	void setReverbDelay(jint reverbDelay);
	jint getReverbDelay();
	void setDiffusion(jshort diffusion);
	jshort getDiffusion();
	void setDensity(jshort density);
	jshort getDensity();
	void setParameterListener(ref<android::media::audiofx::EnvironmentalReverb_OnParameterChangeListener> listener);
	ref<android::media::audiofx::EnvironmentalReverb_Settings> getProperties();
	void setProperties(ref<android::media::audiofx::EnvironmentalReverb_Settings> settings);

protected:

	EnvironmentalReverb(handle_type h) : base_(h) {}

};

} // namespace android::media::audiofx
} // namespace scapix::java_api

#include <scapix/java_api/android/media/audiofx/EnvironmentalReverb_OnParameterChangeListener.h>
#include <scapix/java_api/android/media/audiofx/EnvironmentalReverb_Settings.h>

namespace scapix::java_api {
namespace android::media::audiofx {

inline jint EnvironmentalReverb::PARAM_DECAY_HF_RATIO_() { return get_static_field<SCAPIX_META_STRING("PARAM_DECAY_HF_RATIO"), jint>(); }
inline jint EnvironmentalReverb::PARAM_DECAY_TIME_() { return get_static_field<SCAPIX_META_STRING("PARAM_DECAY_TIME"), jint>(); }
inline jint EnvironmentalReverb::PARAM_DENSITY_() { return get_static_field<SCAPIX_META_STRING("PARAM_DENSITY"), jint>(); }
inline jint EnvironmentalReverb::PARAM_DIFFUSION_() { return get_static_field<SCAPIX_META_STRING("PARAM_DIFFUSION"), jint>(); }
inline jint EnvironmentalReverb::PARAM_REFLECTIONS_DELAY_() { return get_static_field<SCAPIX_META_STRING("PARAM_REFLECTIONS_DELAY"), jint>(); }
inline jint EnvironmentalReverb::PARAM_REFLECTIONS_LEVEL_() { return get_static_field<SCAPIX_META_STRING("PARAM_REFLECTIONS_LEVEL"), jint>(); }
inline jint EnvironmentalReverb::PARAM_REVERB_DELAY_() { return get_static_field<SCAPIX_META_STRING("PARAM_REVERB_DELAY"), jint>(); }
inline jint EnvironmentalReverb::PARAM_REVERB_LEVEL_() { return get_static_field<SCAPIX_META_STRING("PARAM_REVERB_LEVEL"), jint>(); }
inline jint EnvironmentalReverb::PARAM_ROOM_HF_LEVEL_() { return get_static_field<SCAPIX_META_STRING("PARAM_ROOM_HF_LEVEL"), jint>(); }
inline jint EnvironmentalReverb::PARAM_ROOM_LEVEL_() { return get_static_field<SCAPIX_META_STRING("PARAM_ROOM_LEVEL"), jint>(); }
inline ref<EnvironmentalReverb> EnvironmentalReverb::new_object(jint priority, jint audioSession) { return base_::new_object(priority, audioSession); }
inline void EnvironmentalReverb::setRoomLevel(jshort room) { return call_method<SCAPIX_META_STRING("setRoomLevel"), void>(room); }
inline jshort EnvironmentalReverb::getRoomLevel() { return call_method<SCAPIX_META_STRING("getRoomLevel"), jshort>(); }
inline void EnvironmentalReverb::setRoomHFLevel(jshort roomHF) { return call_method<SCAPIX_META_STRING("setRoomHFLevel"), void>(roomHF); }
inline jshort EnvironmentalReverb::getRoomHFLevel() { return call_method<SCAPIX_META_STRING("getRoomHFLevel"), jshort>(); }
inline void EnvironmentalReverb::setDecayTime(jint decayTime) { return call_method<SCAPIX_META_STRING("setDecayTime"), void>(decayTime); }
inline jint EnvironmentalReverb::getDecayTime() { return call_method<SCAPIX_META_STRING("getDecayTime"), jint>(); }
inline void EnvironmentalReverb::setDecayHFRatio(jshort decayHFRatio) { return call_method<SCAPIX_META_STRING("setDecayHFRatio"), void>(decayHFRatio); }
inline jshort EnvironmentalReverb::getDecayHFRatio() { return call_method<SCAPIX_META_STRING("getDecayHFRatio"), jshort>(); }
inline void EnvironmentalReverb::setReflectionsLevel(jshort reflectionsLevel) { return call_method<SCAPIX_META_STRING("setReflectionsLevel"), void>(reflectionsLevel); }
inline jshort EnvironmentalReverb::getReflectionsLevel() { return call_method<SCAPIX_META_STRING("getReflectionsLevel"), jshort>(); }
inline void EnvironmentalReverb::setReflectionsDelay(jint reflectionsDelay) { return call_method<SCAPIX_META_STRING("setReflectionsDelay"), void>(reflectionsDelay); }
inline jint EnvironmentalReverb::getReflectionsDelay() { return call_method<SCAPIX_META_STRING("getReflectionsDelay"), jint>(); }
inline void EnvironmentalReverb::setReverbLevel(jshort reverbLevel) { return call_method<SCAPIX_META_STRING("setReverbLevel"), void>(reverbLevel); }
inline jshort EnvironmentalReverb::getReverbLevel() { return call_method<SCAPIX_META_STRING("getReverbLevel"), jshort>(); }
inline void EnvironmentalReverb::setReverbDelay(jint reverbDelay) { return call_method<SCAPIX_META_STRING("setReverbDelay"), void>(reverbDelay); }
inline jint EnvironmentalReverb::getReverbDelay() { return call_method<SCAPIX_META_STRING("getReverbDelay"), jint>(); }
inline void EnvironmentalReverb::setDiffusion(jshort diffusion) { return call_method<SCAPIX_META_STRING("setDiffusion"), void>(diffusion); }
inline jshort EnvironmentalReverb::getDiffusion() { return call_method<SCAPIX_META_STRING("getDiffusion"), jshort>(); }
inline void EnvironmentalReverb::setDensity(jshort density) { return call_method<SCAPIX_META_STRING("setDensity"), void>(density); }
inline jshort EnvironmentalReverb::getDensity() { return call_method<SCAPIX_META_STRING("getDensity"), jshort>(); }
inline void EnvironmentalReverb::setParameterListener(ref<android::media::audiofx::EnvironmentalReverb_OnParameterChangeListener> listener) { return call_method<SCAPIX_META_STRING("setParameterListener"), void>(listener); }
inline ref<android::media::audiofx::EnvironmentalReverb_Settings> EnvironmentalReverb::getProperties() { return call_method<SCAPIX_META_STRING("getProperties"), ref<android::media::audiofx::EnvironmentalReverb_Settings>>(); }
inline void EnvironmentalReverb::setProperties(ref<android::media::audiofx::EnvironmentalReverb_Settings> settings) { return call_method<SCAPIX_META_STRING("setProperties"), void>(settings); }

} // namespace android::media::audiofx
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_AUDIOFX_ENVIRONMENTALREVERB_H
