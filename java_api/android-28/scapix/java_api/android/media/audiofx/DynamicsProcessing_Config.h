// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_CONFIG_H
#define SCAPIX_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_CONFIG_H

namespace scapix::java_api {

namespace android::media::audiofx { class DynamicsProcessing_Channel; }
namespace android::media::audiofx { class DynamicsProcessing_Eq; }
namespace android::media::audiofx { class DynamicsProcessing_EqBand; }
namespace android::media::audiofx { class DynamicsProcessing_Limiter; }
namespace android::media::audiofx { class DynamicsProcessing_Mbc; }
namespace android::media::audiofx { class DynamicsProcessing_MbcBand; }
namespace java::lang { class String; }
namespace android::media::audiofx { class DynamicsProcessing_Config_Builder; }

namespace android::media::audiofx {

class DynamicsProcessing_Config : public object_base<SCAPIX_META_STRING("android/media/audiofx/DynamicsProcessing$Config"),
	java::lang::Object>
{
public:

	using Builder = DynamicsProcessing_Config_Builder;

	ref<java::lang::String> toString();
	jint getVariant();
	jfloat getPreferredFrameDuration();
	jboolean isPreEqInUse();
	jint getPreEqBandCount();
	jboolean isMbcInUse();
	jint getMbcBandCount();
	jboolean isPostEqInUse();
	jint getPostEqBandCount();
	jboolean isLimiterInUse();
	ref<android::media::audiofx::DynamicsProcessing_Channel> getChannelByChannelIndex(jint channelIndex);
	void setChannelTo(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Channel> channel);
	void setAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Channel> channel);
	jfloat getInputGainByChannelIndex(jint channelIndex);
	void setInputGainByChannelIndex(jint channelIndex, jfloat inputGain);
	void setInputGainAllChannelsTo(jfloat inputGain);
	ref<android::media::audiofx::DynamicsProcessing_Eq> getPreEqByChannelIndex(jint channelIndex);
	void setPreEqByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Eq> preEq);
	void setPreEqAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Eq> preEq);
	ref<android::media::audiofx::DynamicsProcessing_EqBand> getPreEqBandByChannelIndex(jint channelIndex, jint band);
	void setPreEqBandByChannelIndex(jint channelIndex, jint band, ref<android::media::audiofx::DynamicsProcessing_EqBand> preEqBand);
	void setPreEqBandAllChannelsTo(jint band, ref<android::media::audiofx::DynamicsProcessing_EqBand> preEqBand);
	ref<android::media::audiofx::DynamicsProcessing_Mbc> getMbcByChannelIndex(jint channelIndex);
	void setMbcByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Mbc> mbc);
	void setMbcAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Mbc> mbc);
	ref<android::media::audiofx::DynamicsProcessing_MbcBand> getMbcBandByChannelIndex(jint channelIndex, jint band);
	void setMbcBandByChannelIndex(jint channelIndex, jint band, ref<android::media::audiofx::DynamicsProcessing_MbcBand> mbcBand);
	void setMbcBandAllChannelsTo(jint band, ref<android::media::audiofx::DynamicsProcessing_MbcBand> mbcBand);
	ref<android::media::audiofx::DynamicsProcessing_Eq> getPostEqByChannelIndex(jint channelIndex);
	void setPostEqByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Eq> postEq);
	void setPostEqAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Eq> postEq);
	ref<android::media::audiofx::DynamicsProcessing_EqBand> getPostEqBandByChannelIndex(jint channelIndex, jint band);
	void setPostEqBandByChannelIndex(jint channelIndex, jint band, ref<android::media::audiofx::DynamicsProcessing_EqBand> postEqBand);
	void setPostEqBandAllChannelsTo(jint band, ref<android::media::audiofx::DynamicsProcessing_EqBand> postEqBand);
	ref<android::media::audiofx::DynamicsProcessing_Limiter> getLimiterByChannelIndex(jint channelIndex);
	void setLimiterByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Limiter> limiter);
	void setLimiterAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Limiter> limiter);

protected:

	DynamicsProcessing_Config(handle_type h) : base_(h) {}

};

} // namespace android::media::audiofx
} // namespace scapix::java_api

#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Channel.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Eq.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_EqBand.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Limiter.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Mbc.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_MbcBand.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::media::audiofx {

inline ref<java::lang::String> DynamicsProcessing_Config::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint DynamicsProcessing_Config::getVariant() { return call_method<SCAPIX_META_STRING("getVariant"), jint>(); }
inline jfloat DynamicsProcessing_Config::getPreferredFrameDuration() { return call_method<SCAPIX_META_STRING("getPreferredFrameDuration"), jfloat>(); }
inline jboolean DynamicsProcessing_Config::isPreEqInUse() { return call_method<SCAPIX_META_STRING("isPreEqInUse"), jboolean>(); }
inline jint DynamicsProcessing_Config::getPreEqBandCount() { return call_method<SCAPIX_META_STRING("getPreEqBandCount"), jint>(); }
inline jboolean DynamicsProcessing_Config::isMbcInUse() { return call_method<SCAPIX_META_STRING("isMbcInUse"), jboolean>(); }
inline jint DynamicsProcessing_Config::getMbcBandCount() { return call_method<SCAPIX_META_STRING("getMbcBandCount"), jint>(); }
inline jboolean DynamicsProcessing_Config::isPostEqInUse() { return call_method<SCAPIX_META_STRING("isPostEqInUse"), jboolean>(); }
inline jint DynamicsProcessing_Config::getPostEqBandCount() { return call_method<SCAPIX_META_STRING("getPostEqBandCount"), jint>(); }
inline jboolean DynamicsProcessing_Config::isLimiterInUse() { return call_method<SCAPIX_META_STRING("isLimiterInUse"), jboolean>(); }
inline ref<android::media::audiofx::DynamicsProcessing_Channel> DynamicsProcessing_Config::getChannelByChannelIndex(jint channelIndex) { return call_method<SCAPIX_META_STRING("getChannelByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_Channel>>(channelIndex); }
inline void DynamicsProcessing_Config::setChannelTo(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Channel> channel) { return call_method<SCAPIX_META_STRING("setChannelTo"), void>(channelIndex, channel); }
inline void DynamicsProcessing_Config::setAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Channel> channel) { return call_method<SCAPIX_META_STRING("setAllChannelsTo"), void>(channel); }
inline jfloat DynamicsProcessing_Config::getInputGainByChannelIndex(jint channelIndex) { return call_method<SCAPIX_META_STRING("getInputGainByChannelIndex"), jfloat>(channelIndex); }
inline void DynamicsProcessing_Config::setInputGainByChannelIndex(jint channelIndex, jfloat inputGain) { return call_method<SCAPIX_META_STRING("setInputGainByChannelIndex"), void>(channelIndex, inputGain); }
inline void DynamicsProcessing_Config::setInputGainAllChannelsTo(jfloat inputGain) { return call_method<SCAPIX_META_STRING("setInputGainAllChannelsTo"), void>(inputGain); }
inline ref<android::media::audiofx::DynamicsProcessing_Eq> DynamicsProcessing_Config::getPreEqByChannelIndex(jint channelIndex) { return call_method<SCAPIX_META_STRING("getPreEqByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_Eq>>(channelIndex); }
inline void DynamicsProcessing_Config::setPreEqByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Eq> preEq) { return call_method<SCAPIX_META_STRING("setPreEqByChannelIndex"), void>(channelIndex, preEq); }
inline void DynamicsProcessing_Config::setPreEqAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Eq> preEq) { return call_method<SCAPIX_META_STRING("setPreEqAllChannelsTo"), void>(preEq); }
inline ref<android::media::audiofx::DynamicsProcessing_EqBand> DynamicsProcessing_Config::getPreEqBandByChannelIndex(jint channelIndex, jint band) { return call_method<SCAPIX_META_STRING("getPreEqBandByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_EqBand>>(channelIndex, band); }
inline void DynamicsProcessing_Config::setPreEqBandByChannelIndex(jint channelIndex, jint band, ref<android::media::audiofx::DynamicsProcessing_EqBand> preEqBand) { return call_method<SCAPIX_META_STRING("setPreEqBandByChannelIndex"), void>(channelIndex, band, preEqBand); }
inline void DynamicsProcessing_Config::setPreEqBandAllChannelsTo(jint band, ref<android::media::audiofx::DynamicsProcessing_EqBand> preEqBand) { return call_method<SCAPIX_META_STRING("setPreEqBandAllChannelsTo"), void>(band, preEqBand); }
inline ref<android::media::audiofx::DynamicsProcessing_Mbc> DynamicsProcessing_Config::getMbcByChannelIndex(jint channelIndex) { return call_method<SCAPIX_META_STRING("getMbcByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_Mbc>>(channelIndex); }
inline void DynamicsProcessing_Config::setMbcByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Mbc> mbc) { return call_method<SCAPIX_META_STRING("setMbcByChannelIndex"), void>(channelIndex, mbc); }
inline void DynamicsProcessing_Config::setMbcAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Mbc> mbc) { return call_method<SCAPIX_META_STRING("setMbcAllChannelsTo"), void>(mbc); }
inline ref<android::media::audiofx::DynamicsProcessing_MbcBand> DynamicsProcessing_Config::getMbcBandByChannelIndex(jint channelIndex, jint band) { return call_method<SCAPIX_META_STRING("getMbcBandByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_MbcBand>>(channelIndex, band); }
inline void DynamicsProcessing_Config::setMbcBandByChannelIndex(jint channelIndex, jint band, ref<android::media::audiofx::DynamicsProcessing_MbcBand> mbcBand) { return call_method<SCAPIX_META_STRING("setMbcBandByChannelIndex"), void>(channelIndex, band, mbcBand); }
inline void DynamicsProcessing_Config::setMbcBandAllChannelsTo(jint band, ref<android::media::audiofx::DynamicsProcessing_MbcBand> mbcBand) { return call_method<SCAPIX_META_STRING("setMbcBandAllChannelsTo"), void>(band, mbcBand); }
inline ref<android::media::audiofx::DynamicsProcessing_Eq> DynamicsProcessing_Config::getPostEqByChannelIndex(jint channelIndex) { return call_method<SCAPIX_META_STRING("getPostEqByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_Eq>>(channelIndex); }
inline void DynamicsProcessing_Config::setPostEqByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Eq> postEq) { return call_method<SCAPIX_META_STRING("setPostEqByChannelIndex"), void>(channelIndex, postEq); }
inline void DynamicsProcessing_Config::setPostEqAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Eq> postEq) { return call_method<SCAPIX_META_STRING("setPostEqAllChannelsTo"), void>(postEq); }
inline ref<android::media::audiofx::DynamicsProcessing_EqBand> DynamicsProcessing_Config::getPostEqBandByChannelIndex(jint channelIndex, jint band) { return call_method<SCAPIX_META_STRING("getPostEqBandByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_EqBand>>(channelIndex, band); }
inline void DynamicsProcessing_Config::setPostEqBandByChannelIndex(jint channelIndex, jint band, ref<android::media::audiofx::DynamicsProcessing_EqBand> postEqBand) { return call_method<SCAPIX_META_STRING("setPostEqBandByChannelIndex"), void>(channelIndex, band, postEqBand); }
inline void DynamicsProcessing_Config::setPostEqBandAllChannelsTo(jint band, ref<android::media::audiofx::DynamicsProcessing_EqBand> postEqBand) { return call_method<SCAPIX_META_STRING("setPostEqBandAllChannelsTo"), void>(band, postEqBand); }
inline ref<android::media::audiofx::DynamicsProcessing_Limiter> DynamicsProcessing_Config::getLimiterByChannelIndex(jint channelIndex) { return call_method<SCAPIX_META_STRING("getLimiterByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_Limiter>>(channelIndex); }
inline void DynamicsProcessing_Config::setLimiterByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Limiter> limiter) { return call_method<SCAPIX_META_STRING("setLimiterByChannelIndex"), void>(channelIndex, limiter); }
inline void DynamicsProcessing_Config::setLimiterAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Limiter> limiter) { return call_method<SCAPIX_META_STRING("setLimiterAllChannelsTo"), void>(limiter); }

} // namespace android::media::audiofx
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_CONFIG_H
