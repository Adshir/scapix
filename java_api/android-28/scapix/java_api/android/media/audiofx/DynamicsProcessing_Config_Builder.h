// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_CONFIG_BUILDER_H
#define SCAPIX_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_CONFIG_BUILDER_H

namespace scapix::java_api {

namespace android::media::audiofx { class DynamicsProcessing_Channel; }
namespace android::media::audiofx { class DynamicsProcessing_Config; }
namespace android::media::audiofx { class DynamicsProcessing_Eq; }
namespace android::media::audiofx { class DynamicsProcessing_Limiter; }
namespace android::media::audiofx { class DynamicsProcessing_Mbc; }

namespace android::media::audiofx {

class DynamicsProcessing_Config_Builder : public object_base<SCAPIX_META_STRING("android/media/audiofx/DynamicsProcessing$Config$Builder"),
	java::lang::Object>
{
public:

	static ref<DynamicsProcessing_Config_Builder> new_object(jint variant, jint channelCount, jboolean preEqInUse, jint preEqBandCount, jboolean mbcInUse, jint mbcBandCount, jboolean postEqInUse, jint postEqBandCount, jboolean limiterInUse);
	ref<android::media::audiofx::DynamicsProcessing_Config_Builder> setPreferredFrameDuration(jfloat frameDuration);
	ref<android::media::audiofx::DynamicsProcessing_Config_Builder> setInputGainByChannelIndex(jint channelIndex, jfloat inputGain);
	ref<android::media::audiofx::DynamicsProcessing_Config_Builder> setInputGainAllChannelsTo(jfloat inputGain);
	ref<android::media::audiofx::DynamicsProcessing_Config_Builder> setChannelTo(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Channel> channel);
	ref<android::media::audiofx::DynamicsProcessing_Config_Builder> setAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Channel> channel);
	ref<android::media::audiofx::DynamicsProcessing_Config_Builder> setPreEqByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Eq> preEq);
	ref<android::media::audiofx::DynamicsProcessing_Config_Builder> setPreEqAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Eq> preEq);
	ref<android::media::audiofx::DynamicsProcessing_Config_Builder> setMbcByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Mbc> mbc);
	ref<android::media::audiofx::DynamicsProcessing_Config_Builder> setMbcAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Mbc> mbc);
	ref<android::media::audiofx::DynamicsProcessing_Config_Builder> setPostEqByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Eq> postEq);
	ref<android::media::audiofx::DynamicsProcessing_Config_Builder> setPostEqAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Eq> postEq);
	ref<android::media::audiofx::DynamicsProcessing_Config_Builder> setLimiterByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Limiter> limiter);
	ref<android::media::audiofx::DynamicsProcessing_Config_Builder> setLimiterAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Limiter> limiter);
	ref<android::media::audiofx::DynamicsProcessing_Config> build();

protected:

	DynamicsProcessing_Config_Builder(handle_type h) : base_(h) {}

};

} // namespace android::media::audiofx
} // namespace scapix::java_api

#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Channel.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Config.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Eq.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Limiter.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Mbc.h>

namespace scapix::java_api {
namespace android::media::audiofx {

inline ref<DynamicsProcessing_Config_Builder> DynamicsProcessing_Config_Builder::new_object(jint variant, jint channelCount, jboolean preEqInUse, jint preEqBandCount, jboolean mbcInUse, jint mbcBandCount, jboolean postEqInUse, jint postEqBandCount, jboolean limiterInUse) { return base_::new_object(variant, channelCount, preEqInUse, preEqBandCount, mbcInUse, mbcBandCount, postEqInUse, postEqBandCount, limiterInUse); }
inline ref<android::media::audiofx::DynamicsProcessing_Config_Builder> DynamicsProcessing_Config_Builder::setPreferredFrameDuration(jfloat frameDuration) { return call_method<SCAPIX_META_STRING("setPreferredFrameDuration"), ref<android::media::audiofx::DynamicsProcessing_Config_Builder>>(frameDuration); }
inline ref<android::media::audiofx::DynamicsProcessing_Config_Builder> DynamicsProcessing_Config_Builder::setInputGainByChannelIndex(jint channelIndex, jfloat inputGain) { return call_method<SCAPIX_META_STRING("setInputGainByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_Config_Builder>>(channelIndex, inputGain); }
inline ref<android::media::audiofx::DynamicsProcessing_Config_Builder> DynamicsProcessing_Config_Builder::setInputGainAllChannelsTo(jfloat inputGain) { return call_method<SCAPIX_META_STRING("setInputGainAllChannelsTo"), ref<android::media::audiofx::DynamicsProcessing_Config_Builder>>(inputGain); }
inline ref<android::media::audiofx::DynamicsProcessing_Config_Builder> DynamicsProcessing_Config_Builder::setChannelTo(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Channel> channel) { return call_method<SCAPIX_META_STRING("setChannelTo"), ref<android::media::audiofx::DynamicsProcessing_Config_Builder>>(channelIndex, channel); }
inline ref<android::media::audiofx::DynamicsProcessing_Config_Builder> DynamicsProcessing_Config_Builder::setAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Channel> channel) { return call_method<SCAPIX_META_STRING("setAllChannelsTo"), ref<android::media::audiofx::DynamicsProcessing_Config_Builder>>(channel); }
inline ref<android::media::audiofx::DynamicsProcessing_Config_Builder> DynamicsProcessing_Config_Builder::setPreEqByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Eq> preEq) { return call_method<SCAPIX_META_STRING("setPreEqByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_Config_Builder>>(channelIndex, preEq); }
inline ref<android::media::audiofx::DynamicsProcessing_Config_Builder> DynamicsProcessing_Config_Builder::setPreEqAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Eq> preEq) { return call_method<SCAPIX_META_STRING("setPreEqAllChannelsTo"), ref<android::media::audiofx::DynamicsProcessing_Config_Builder>>(preEq); }
inline ref<android::media::audiofx::DynamicsProcessing_Config_Builder> DynamicsProcessing_Config_Builder::setMbcByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Mbc> mbc) { return call_method<SCAPIX_META_STRING("setMbcByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_Config_Builder>>(channelIndex, mbc); }
inline ref<android::media::audiofx::DynamicsProcessing_Config_Builder> DynamicsProcessing_Config_Builder::setMbcAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Mbc> mbc) { return call_method<SCAPIX_META_STRING("setMbcAllChannelsTo"), ref<android::media::audiofx::DynamicsProcessing_Config_Builder>>(mbc); }
inline ref<android::media::audiofx::DynamicsProcessing_Config_Builder> DynamicsProcessing_Config_Builder::setPostEqByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Eq> postEq) { return call_method<SCAPIX_META_STRING("setPostEqByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_Config_Builder>>(channelIndex, postEq); }
inline ref<android::media::audiofx::DynamicsProcessing_Config_Builder> DynamicsProcessing_Config_Builder::setPostEqAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Eq> postEq) { return call_method<SCAPIX_META_STRING("setPostEqAllChannelsTo"), ref<android::media::audiofx::DynamicsProcessing_Config_Builder>>(postEq); }
inline ref<android::media::audiofx::DynamicsProcessing_Config_Builder> DynamicsProcessing_Config_Builder::setLimiterByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Limiter> limiter) { return call_method<SCAPIX_META_STRING("setLimiterByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_Config_Builder>>(channelIndex, limiter); }
inline ref<android::media::audiofx::DynamicsProcessing_Config_Builder> DynamicsProcessing_Config_Builder::setLimiterAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Limiter> limiter) { return call_method<SCAPIX_META_STRING("setLimiterAllChannelsTo"), ref<android::media::audiofx::DynamicsProcessing_Config_Builder>>(limiter); }
inline ref<android::media::audiofx::DynamicsProcessing_Config> DynamicsProcessing_Config_Builder::build() { return call_method<SCAPIX_META_STRING("build"), ref<android::media::audiofx::DynamicsProcessing_Config>>(); }

} // namespace android::media::audiofx
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_CONFIG_BUILDER_H
