// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_MEDIA_AUDIOFX_VISUALIZER_H
#define SCAPIX_ANDROID_MEDIA_AUDIOFX_VISUALIZER_H

namespace scapix::java_api {

namespace android::media::audiofx { class Visualizer_MeasurementPeakRms; }
namespace android::media::audiofx { class Visualizer_OnDataCaptureListener; }

namespace android::media::audiofx {

class Visualizer : public object_base<SCAPIX_META_STRING("android/media/audiofx/Visualizer"),
	java::lang::Object>
{
public:

	using OnDataCaptureListener = Visualizer_OnDataCaptureListener;
	using MeasurementPeakRms = Visualizer_MeasurementPeakRms;

	static jint ALREADY_EXISTS_();
	static jint ERROR_();
	static jint ERROR_BAD_VALUE_();
	static jint ERROR_DEAD_OBJECT_();
	static jint ERROR_INVALID_OPERATION_();
	static jint ERROR_NO_INIT_();
	static jint ERROR_NO_MEMORY_();
	static jint MEASUREMENT_MODE_NONE_();
	static jint MEASUREMENT_MODE_PEAK_RMS_();
	static jint SCALING_MODE_AS_PLAYED_();
	static jint SCALING_MODE_NORMALIZED_();
	static jint STATE_ENABLED_();
	static jint STATE_INITIALIZED_();
	static jint STATE_UNINITIALIZED_();
	static jint SUCCESS_();

	static ref<Visualizer> new_object(jint audioSession);
	void release();
	jint setEnabled(jboolean enabled);
	jboolean getEnabled();
	static ref<link::java::array<jint>> getCaptureSizeRange();
	static jint getMaxCaptureRate();
	jint setCaptureSize(jint size);
	jint getCaptureSize();
	jint setScalingMode(jint mode);
	jint getScalingMode();
	jint setMeasurementMode(jint mode);
	jint getMeasurementMode();
	jint getSamplingRate();
	jint getWaveForm(ref<link::java::array<jbyte>> waveform);
	jint getFft(ref<link::java::array<jbyte>> fft);
	jint getMeasurementPeakRms(ref<android::media::audiofx::Visualizer_MeasurementPeakRms> measurement);
	jint setDataCaptureListener(ref<android::media::audiofx::Visualizer_OnDataCaptureListener> listener, jint rate, jboolean waveform, jboolean fft);

protected:

	Visualizer(handle_type h) : base_(h) {}

};

} // namespace android::media::audiofx
} // namespace scapix::java_api

#include <scapix/java_api/android/media/audiofx/Visualizer_MeasurementPeakRms.h>
#include <scapix/java_api/android/media/audiofx/Visualizer_OnDataCaptureListener.h>

namespace scapix::java_api {
namespace android::media::audiofx {

inline jint Visualizer::ALREADY_EXISTS_() { return get_static_field<SCAPIX_META_STRING("ALREADY_EXISTS"), jint>(); }
inline jint Visualizer::ERROR_() { return get_static_field<SCAPIX_META_STRING("ERROR"), jint>(); }
inline jint Visualizer::ERROR_BAD_VALUE_() { return get_static_field<SCAPIX_META_STRING("ERROR_BAD_VALUE"), jint>(); }
inline jint Visualizer::ERROR_DEAD_OBJECT_() { return get_static_field<SCAPIX_META_STRING("ERROR_DEAD_OBJECT"), jint>(); }
inline jint Visualizer::ERROR_INVALID_OPERATION_() { return get_static_field<SCAPIX_META_STRING("ERROR_INVALID_OPERATION"), jint>(); }
inline jint Visualizer::ERROR_NO_INIT_() { return get_static_field<SCAPIX_META_STRING("ERROR_NO_INIT"), jint>(); }
inline jint Visualizer::ERROR_NO_MEMORY_() { return get_static_field<SCAPIX_META_STRING("ERROR_NO_MEMORY"), jint>(); }
inline jint Visualizer::MEASUREMENT_MODE_NONE_() { return get_static_field<SCAPIX_META_STRING("MEASUREMENT_MODE_NONE"), jint>(); }
inline jint Visualizer::MEASUREMENT_MODE_PEAK_RMS_() { return get_static_field<SCAPIX_META_STRING("MEASUREMENT_MODE_PEAK_RMS"), jint>(); }
inline jint Visualizer::SCALING_MODE_AS_PLAYED_() { return get_static_field<SCAPIX_META_STRING("SCALING_MODE_AS_PLAYED"), jint>(); }
inline jint Visualizer::SCALING_MODE_NORMALIZED_() { return get_static_field<SCAPIX_META_STRING("SCALING_MODE_NORMALIZED"), jint>(); }
inline jint Visualizer::STATE_ENABLED_() { return get_static_field<SCAPIX_META_STRING("STATE_ENABLED"), jint>(); }
inline jint Visualizer::STATE_INITIALIZED_() { return get_static_field<SCAPIX_META_STRING("STATE_INITIALIZED"), jint>(); }
inline jint Visualizer::STATE_UNINITIALIZED_() { return get_static_field<SCAPIX_META_STRING("STATE_UNINITIALIZED"), jint>(); }
inline jint Visualizer::SUCCESS_() { return get_static_field<SCAPIX_META_STRING("SUCCESS"), jint>(); }
inline ref<Visualizer> Visualizer::new_object(jint audioSession) { return base_::new_object(audioSession); }
inline void Visualizer::release() { return call_method<SCAPIX_META_STRING("release"), void>(); }
inline jint Visualizer::setEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setEnabled"), jint>(enabled); }
inline jboolean Visualizer::getEnabled() { return call_method<SCAPIX_META_STRING("getEnabled"), jboolean>(); }
inline ref<link::java::array<jint>> Visualizer::getCaptureSizeRange() { return call_static_method<SCAPIX_META_STRING("getCaptureSizeRange"), ref<link::java::array<jint>>>(); }
inline jint Visualizer::getMaxCaptureRate() { return call_static_method<SCAPIX_META_STRING("getMaxCaptureRate"), jint>(); }
inline jint Visualizer::setCaptureSize(jint size) { return call_method<SCAPIX_META_STRING("setCaptureSize"), jint>(size); }
inline jint Visualizer::getCaptureSize() { return call_method<SCAPIX_META_STRING("getCaptureSize"), jint>(); }
inline jint Visualizer::setScalingMode(jint mode) { return call_method<SCAPIX_META_STRING("setScalingMode"), jint>(mode); }
inline jint Visualizer::getScalingMode() { return call_method<SCAPIX_META_STRING("getScalingMode"), jint>(); }
inline jint Visualizer::setMeasurementMode(jint mode) { return call_method<SCAPIX_META_STRING("setMeasurementMode"), jint>(mode); }
inline jint Visualizer::getMeasurementMode() { return call_method<SCAPIX_META_STRING("getMeasurementMode"), jint>(); }
inline jint Visualizer::getSamplingRate() { return call_method<SCAPIX_META_STRING("getSamplingRate"), jint>(); }
inline jint Visualizer::getWaveForm(ref<link::java::array<jbyte>> waveform) { return call_method<SCAPIX_META_STRING("getWaveForm"), jint>(waveform); }
inline jint Visualizer::getFft(ref<link::java::array<jbyte>> fft) { return call_method<SCAPIX_META_STRING("getFft"), jint>(fft); }
inline jint Visualizer::getMeasurementPeakRms(ref<android::media::audiofx::Visualizer_MeasurementPeakRms> measurement) { return call_method<SCAPIX_META_STRING("getMeasurementPeakRms"), jint>(measurement); }
inline jint Visualizer::setDataCaptureListener(ref<android::media::audiofx::Visualizer_OnDataCaptureListener> listener, jint rate, jboolean waveform, jboolean fft) { return call_method<SCAPIX_META_STRING("setDataCaptureListener"), jint>(listener, rate, waveform, fft); }

} // namespace android::media::audiofx
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_AUDIOFX_VISUALIZER_H
