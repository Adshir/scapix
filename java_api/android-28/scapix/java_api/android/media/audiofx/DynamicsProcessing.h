// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/media/audiofx/AudioEffect.h>

#ifndef SCAPIX_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_H
#define SCAPIX_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_H

namespace scapix::java_api {

namespace android::media::audiofx { class DynamicsProcessing_Channel; }
namespace android::media::audiofx { class DynamicsProcessing_Config; }
namespace android::media::audiofx { class DynamicsProcessing_Eq; }
namespace android::media::audiofx { class DynamicsProcessing_EqBand; }
namespace android::media::audiofx { class DynamicsProcessing_Limiter; }
namespace android::media::audiofx { class DynamicsProcessing_Mbc; }
namespace android::media::audiofx { class DynamicsProcessing_MbcBand; }
namespace android::media::audiofx { class DynamicsProcessing_Stage; }
namespace android::media::audiofx { class DynamicsProcessing_BandStage; }
namespace android::media::audiofx { class DynamicsProcessing_BandBase; }

namespace android::media::audiofx {

class DynamicsProcessing : public object_base<SCAPIX_META_STRING("android/media/audiofx/DynamicsProcessing"),
	android::media::audiofx::AudioEffect>
{
public:

	using Stage = DynamicsProcessing_Stage;
	using MbcBand = DynamicsProcessing_MbcBand;
	using Mbc = DynamicsProcessing_Mbc;
	using Limiter = DynamicsProcessing_Limiter;
	using EqBand = DynamicsProcessing_EqBand;
	using Eq = DynamicsProcessing_Eq;
	using Config = DynamicsProcessing_Config;
	using Channel = DynamicsProcessing_Channel;
	using BandStage = DynamicsProcessing_BandStage;
	using BandBase = DynamicsProcessing_BandBase;

	static jint VARIANT_FAVOR_FREQUENCY_RESOLUTION_();
	static jint VARIANT_FAVOR_TIME_RESOLUTION_();

	static ref<DynamicsProcessing> new_object(jint audioSession);
	static ref<DynamicsProcessing> new_object(jint priority, jint audioSession, ref<android::media::audiofx::DynamicsProcessing_Config> cfg);
	ref<android::media::audiofx::DynamicsProcessing_Config> getConfig();
	ref<android::media::audiofx::DynamicsProcessing_Channel> getChannelByChannelIndex(jint channelIndex);
	void setChannelTo(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Channel> channel);
	void setAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Channel> channel);
	jfloat getInputGainByChannelIndex(jint channelIndex);
	void setInputGainbyChannel(jint channelIndex, jfloat inputGain);
	void setInputGainAllChannelsTo(jfloat inputGain);
	ref<android::media::audiofx::DynamicsProcessing_Eq> getPreEqByChannelIndex(jint channelIndex);
	void setPreEqByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Eq> preEq);
	void setPreEqAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Eq> preEq);
	ref<android::media::audiofx::DynamicsProcessing_EqBand> getPreEqBandByChannelIndex(jint channelIndex, jint band);
	void setPreEqBandByChannelIndex(jint channelIndex, jint band, ref<android::media::audiofx::DynamicsProcessing_EqBand> preEqBand);
	void setPreEqBandAllChannelsTo(jint band, ref<android::media::audiofx::DynamicsProcessing_EqBand> preEqBand);
	ref<android::media::audiofx::DynamicsProcessing_Mbc> getMbcByChannelIndex(jint channelIndex);
	void setMbcByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Mbc> mbc);
	void setMbcAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Mbc> mbc);
	ref<android::media::audiofx::DynamicsProcessing_MbcBand> getMbcBandByChannelIndex(jint channelIndex, jint band);
	void setMbcBandByChannelIndex(jint channelIndex, jint band, ref<android::media::audiofx::DynamicsProcessing_MbcBand> mbcBand);
	void setMbcBandAllChannelsTo(jint band, ref<android::media::audiofx::DynamicsProcessing_MbcBand> mbcBand);
	ref<android::media::audiofx::DynamicsProcessing_Eq> getPostEqByChannelIndex(jint channelIndex);
	void setPostEqByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Eq> postEq);
	void setPostEqAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Eq> postEq);
	ref<android::media::audiofx::DynamicsProcessing_EqBand> getPostEqBandByChannelIndex(jint channelIndex, jint band);
	void setPostEqBandByChannelIndex(jint channelIndex, jint band, ref<android::media::audiofx::DynamicsProcessing_EqBand> postEqBand);
	void setPostEqBandAllChannelsTo(jint band, ref<android::media::audiofx::DynamicsProcessing_EqBand> postEqBand);
	ref<android::media::audiofx::DynamicsProcessing_Limiter> getLimiterByChannelIndex(jint channelIndex);
	void setLimiterByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Limiter> limiter);
	void setLimiterAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Limiter> limiter);
	jint getChannelCount();

protected:

	DynamicsProcessing(handle_type h) : base_(h) {}

};

} // namespace android::media::audiofx
} // namespace scapix::java_api

#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Channel.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Config.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Eq.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_EqBand.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Limiter.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Mbc.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_MbcBand.h>

namespace scapix::java_api {
namespace android::media::audiofx {

inline jint DynamicsProcessing::VARIANT_FAVOR_FREQUENCY_RESOLUTION_() { return get_static_field<SCAPIX_META_STRING("VARIANT_FAVOR_FREQUENCY_RESOLUTION"), jint>(); }
inline jint DynamicsProcessing::VARIANT_FAVOR_TIME_RESOLUTION_() { return get_static_field<SCAPIX_META_STRING("VARIANT_FAVOR_TIME_RESOLUTION"), jint>(); }
inline ref<DynamicsProcessing> DynamicsProcessing::new_object(jint audioSession) { return base_::new_object(audioSession); }
inline ref<DynamicsProcessing> DynamicsProcessing::new_object(jint priority, jint audioSession, ref<android::media::audiofx::DynamicsProcessing_Config> cfg) { return base_::new_object(priority, audioSession, cfg); }
inline ref<android::media::audiofx::DynamicsProcessing_Config> DynamicsProcessing::getConfig() { return call_method<SCAPIX_META_STRING("getConfig"), ref<android::media::audiofx::DynamicsProcessing_Config>>(); }
inline ref<android::media::audiofx::DynamicsProcessing_Channel> DynamicsProcessing::getChannelByChannelIndex(jint channelIndex) { return call_method<SCAPIX_META_STRING("getChannelByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_Channel>>(channelIndex); }
inline void DynamicsProcessing::setChannelTo(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Channel> channel) { return call_method<SCAPIX_META_STRING("setChannelTo"), void>(channelIndex, channel); }
inline void DynamicsProcessing::setAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Channel> channel) { return call_method<SCAPIX_META_STRING("setAllChannelsTo"), void>(channel); }
inline jfloat DynamicsProcessing::getInputGainByChannelIndex(jint channelIndex) { return call_method<SCAPIX_META_STRING("getInputGainByChannelIndex"), jfloat>(channelIndex); }
inline void DynamicsProcessing::setInputGainbyChannel(jint channelIndex, jfloat inputGain) { return call_method<SCAPIX_META_STRING("setInputGainbyChannel"), void>(channelIndex, inputGain); }
inline void DynamicsProcessing::setInputGainAllChannelsTo(jfloat inputGain) { return call_method<SCAPIX_META_STRING("setInputGainAllChannelsTo"), void>(inputGain); }
inline ref<android::media::audiofx::DynamicsProcessing_Eq> DynamicsProcessing::getPreEqByChannelIndex(jint channelIndex) { return call_method<SCAPIX_META_STRING("getPreEqByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_Eq>>(channelIndex); }
inline void DynamicsProcessing::setPreEqByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Eq> preEq) { return call_method<SCAPIX_META_STRING("setPreEqByChannelIndex"), void>(channelIndex, preEq); }
inline void DynamicsProcessing::setPreEqAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Eq> preEq) { return call_method<SCAPIX_META_STRING("setPreEqAllChannelsTo"), void>(preEq); }
inline ref<android::media::audiofx::DynamicsProcessing_EqBand> DynamicsProcessing::getPreEqBandByChannelIndex(jint channelIndex, jint band) { return call_method<SCAPIX_META_STRING("getPreEqBandByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_EqBand>>(channelIndex, band); }
inline void DynamicsProcessing::setPreEqBandByChannelIndex(jint channelIndex, jint band, ref<android::media::audiofx::DynamicsProcessing_EqBand> preEqBand) { return call_method<SCAPIX_META_STRING("setPreEqBandByChannelIndex"), void>(channelIndex, band, preEqBand); }
inline void DynamicsProcessing::setPreEqBandAllChannelsTo(jint band, ref<android::media::audiofx::DynamicsProcessing_EqBand> preEqBand) { return call_method<SCAPIX_META_STRING("setPreEqBandAllChannelsTo"), void>(band, preEqBand); }
inline ref<android::media::audiofx::DynamicsProcessing_Mbc> DynamicsProcessing::getMbcByChannelIndex(jint channelIndex) { return call_method<SCAPIX_META_STRING("getMbcByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_Mbc>>(channelIndex); }
inline void DynamicsProcessing::setMbcByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Mbc> mbc) { return call_method<SCAPIX_META_STRING("setMbcByChannelIndex"), void>(channelIndex, mbc); }
inline void DynamicsProcessing::setMbcAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Mbc> mbc) { return call_method<SCAPIX_META_STRING("setMbcAllChannelsTo"), void>(mbc); }
inline ref<android::media::audiofx::DynamicsProcessing_MbcBand> DynamicsProcessing::getMbcBandByChannelIndex(jint channelIndex, jint band) { return call_method<SCAPIX_META_STRING("getMbcBandByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_MbcBand>>(channelIndex, band); }
inline void DynamicsProcessing::setMbcBandByChannelIndex(jint channelIndex, jint band, ref<android::media::audiofx::DynamicsProcessing_MbcBand> mbcBand) { return call_method<SCAPIX_META_STRING("setMbcBandByChannelIndex"), void>(channelIndex, band, mbcBand); }
inline void DynamicsProcessing::setMbcBandAllChannelsTo(jint band, ref<android::media::audiofx::DynamicsProcessing_MbcBand> mbcBand) { return call_method<SCAPIX_META_STRING("setMbcBandAllChannelsTo"), void>(band, mbcBand); }
inline ref<android::media::audiofx::DynamicsProcessing_Eq> DynamicsProcessing::getPostEqByChannelIndex(jint channelIndex) { return call_method<SCAPIX_META_STRING("getPostEqByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_Eq>>(channelIndex); }
inline void DynamicsProcessing::setPostEqByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Eq> postEq) { return call_method<SCAPIX_META_STRING("setPostEqByChannelIndex"), void>(channelIndex, postEq); }
inline void DynamicsProcessing::setPostEqAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Eq> postEq) { return call_method<SCAPIX_META_STRING("setPostEqAllChannelsTo"), void>(postEq); }
inline ref<android::media::audiofx::DynamicsProcessing_EqBand> DynamicsProcessing::getPostEqBandByChannelIndex(jint channelIndex, jint band) { return call_method<SCAPIX_META_STRING("getPostEqBandByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_EqBand>>(channelIndex, band); }
inline void DynamicsProcessing::setPostEqBandByChannelIndex(jint channelIndex, jint band, ref<android::media::audiofx::DynamicsProcessing_EqBand> postEqBand) { return call_method<SCAPIX_META_STRING("setPostEqBandByChannelIndex"), void>(channelIndex, band, postEqBand); }
inline void DynamicsProcessing::setPostEqBandAllChannelsTo(jint band, ref<android::media::audiofx::DynamicsProcessing_EqBand> postEqBand) { return call_method<SCAPIX_META_STRING("setPostEqBandAllChannelsTo"), void>(band, postEqBand); }
inline ref<android::media::audiofx::DynamicsProcessing_Limiter> DynamicsProcessing::getLimiterByChannelIndex(jint channelIndex) { return call_method<SCAPIX_META_STRING("getLimiterByChannelIndex"), ref<android::media::audiofx::DynamicsProcessing_Limiter>>(channelIndex); }
inline void DynamicsProcessing::setLimiterByChannelIndex(jint channelIndex, ref<android::media::audiofx::DynamicsProcessing_Limiter> limiter) { return call_method<SCAPIX_META_STRING("setLimiterByChannelIndex"), void>(channelIndex, limiter); }
inline void DynamicsProcessing::setLimiterAllChannelsTo(ref<android::media::audiofx::DynamicsProcessing_Limiter> limiter) { return call_method<SCAPIX_META_STRING("setLimiterAllChannelsTo"), void>(limiter); }
inline jint DynamicsProcessing::getChannelCount() { return call_method<SCAPIX_META_STRING("getChannelCount"), jint>(); }

} // namespace android::media::audiofx
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_H
