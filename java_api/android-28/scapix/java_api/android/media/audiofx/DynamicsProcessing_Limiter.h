// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Stage.h>

#ifndef SCAPIX_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_LIMITER_H
#define SCAPIX_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_LIMITER_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace android::media::audiofx {

class DynamicsProcessing_Limiter : public object_base<SCAPIX_META_STRING("android/media/audiofx/DynamicsProcessing$Limiter"),
	android::media::audiofx::DynamicsProcessing_Stage>
{
public:

	static ref<DynamicsProcessing_Limiter> new_object(jboolean inUse, jboolean enabled, jint linkGroup, jfloat attackTime, jfloat releaseTime, jfloat ratio, jfloat threshold, jfloat postGain);
	static ref<DynamicsProcessing_Limiter> new_object(ref<android::media::audiofx::DynamicsProcessing_Limiter> cfg);
	ref<java::lang::String> toString();
	jint getLinkGroup();
	void setLinkGroup(jint linkGroup);
	jfloat getAttackTime();
	void setAttackTime(jfloat attackTime);
	jfloat getReleaseTime();
	void setReleaseTime(jfloat releaseTime);
	jfloat getRatio();
	void setRatio(jfloat ratio);
	jfloat getThreshold();
	void setThreshold(jfloat threshold);
	jfloat getPostGain();
	void setPostGain(jfloat postGain);

protected:

	DynamicsProcessing_Limiter(handle_type h) : base_(h) {}

};

} // namespace android::media::audiofx
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::media::audiofx {

inline ref<DynamicsProcessing_Limiter> DynamicsProcessing_Limiter::new_object(jboolean inUse, jboolean enabled, jint linkGroup, jfloat attackTime, jfloat releaseTime, jfloat ratio, jfloat threshold, jfloat postGain) { return base_::new_object(inUse, enabled, linkGroup, attackTime, releaseTime, ratio, threshold, postGain); }
inline ref<DynamicsProcessing_Limiter> DynamicsProcessing_Limiter::new_object(ref<android::media::audiofx::DynamicsProcessing_Limiter> cfg) { return base_::new_object(cfg); }
inline ref<java::lang::String> DynamicsProcessing_Limiter::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint DynamicsProcessing_Limiter::getLinkGroup() { return call_method<SCAPIX_META_STRING("getLinkGroup"), jint>(); }
inline void DynamicsProcessing_Limiter::setLinkGroup(jint linkGroup) { return call_method<SCAPIX_META_STRING("setLinkGroup"), void>(linkGroup); }
inline jfloat DynamicsProcessing_Limiter::getAttackTime() { return call_method<SCAPIX_META_STRING("getAttackTime"), jfloat>(); }
inline void DynamicsProcessing_Limiter::setAttackTime(jfloat attackTime) { return call_method<SCAPIX_META_STRING("setAttackTime"), void>(attackTime); }
inline jfloat DynamicsProcessing_Limiter::getReleaseTime() { return call_method<SCAPIX_META_STRING("getReleaseTime"), jfloat>(); }
inline void DynamicsProcessing_Limiter::setReleaseTime(jfloat releaseTime) { return call_method<SCAPIX_META_STRING("setReleaseTime"), void>(releaseTime); }
inline jfloat DynamicsProcessing_Limiter::getRatio() { return call_method<SCAPIX_META_STRING("getRatio"), jfloat>(); }
inline void DynamicsProcessing_Limiter::setRatio(jfloat ratio) { return call_method<SCAPIX_META_STRING("setRatio"), void>(ratio); }
inline jfloat DynamicsProcessing_Limiter::getThreshold() { return call_method<SCAPIX_META_STRING("getThreshold"), jfloat>(); }
inline void DynamicsProcessing_Limiter::setThreshold(jfloat threshold) { return call_method<SCAPIX_META_STRING("setThreshold"), void>(threshold); }
inline jfloat DynamicsProcessing_Limiter::getPostGain() { return call_method<SCAPIX_META_STRING("getPostGain"), jfloat>(); }
inline void DynamicsProcessing_Limiter::setPostGain(jfloat postGain) { return call_method<SCAPIX_META_STRING("setPostGain"), void>(postGain); }

} // namespace android::media::audiofx
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_LIMITER_H
