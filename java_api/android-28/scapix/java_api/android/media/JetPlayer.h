// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_MEDIA_JETPLAYER_H
#define SCAPIX_ANDROID_MEDIA_JETPLAYER_H

namespace scapix::java_api {

namespace android::content::res { class AssetFileDescriptor; }
namespace android::media { class JetPlayer_OnJetEventListener; }
namespace android::os { class Handler; }
namespace java::lang { class String; }

namespace android::media {

class JetPlayer : public object_base<SCAPIX_META_STRING("android/media/JetPlayer"),
	java::lang::Object>
{
public:

	using OnJetEventListener = JetPlayer_OnJetEventListener;

	static ref<android::media::JetPlayer> getJetPlayer();
	ref<java::lang::Object> clone();
	void release();
	static jint getMaxTracks();
	jboolean loadJetFile(ref<java::lang::String> path);
	jboolean loadJetFile(ref<android::content::res::AssetFileDescriptor> afd);
	jboolean closeJetFile();
	jboolean play();
	jboolean pause();
	jboolean queueJetSegment(jint segmentNum, jint libNum, jint repeatCount, jint transpose, jint muteFlags, jbyte userID);
	jboolean queueJetSegmentMuteArray(jint segmentNum, jint libNum, jint repeatCount, jint transpose, ref<link::java::array<jboolean>> muteArray, jbyte userID);
	jboolean setMuteFlags(jint muteFlags, jboolean sync);
	jboolean setMuteArray(ref<link::java::array<jboolean>> muteArray, jboolean sync);
	jboolean setMuteFlag(jint trackId, jboolean muteFlag, jboolean sync);
	jboolean triggerClip(jint clipId);
	jboolean clearQueue();
	void setEventListener(ref<android::media::JetPlayer_OnJetEventListener> listener);
	void setEventListener(ref<android::media::JetPlayer_OnJetEventListener> listener, ref<android::os::Handler> handler);

protected:

	JetPlayer(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/android/content/res/AssetFileDescriptor.h>
#include <scapix/java_api/android/media/JetPlayer_OnJetEventListener.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::media {

inline ref<android::media::JetPlayer> JetPlayer::getJetPlayer() { return call_static_method<SCAPIX_META_STRING("getJetPlayer"), ref<android::media::JetPlayer>>(); }
inline ref<java::lang::Object> JetPlayer::clone() { return call_method<SCAPIX_META_STRING("clone"), ref<java::lang::Object>>(); }
inline void JetPlayer::release() { return call_method<SCAPIX_META_STRING("release"), void>(); }
inline jint JetPlayer::getMaxTracks() { return call_static_method<SCAPIX_META_STRING("getMaxTracks"), jint>(); }
inline jboolean JetPlayer::loadJetFile(ref<java::lang::String> path) { return call_method<SCAPIX_META_STRING("loadJetFile"), jboolean>(path); }
inline jboolean JetPlayer::loadJetFile(ref<android::content::res::AssetFileDescriptor> afd) { return call_method<SCAPIX_META_STRING("loadJetFile"), jboolean>(afd); }
inline jboolean JetPlayer::closeJetFile() { return call_method<SCAPIX_META_STRING("closeJetFile"), jboolean>(); }
inline jboolean JetPlayer::play() { return call_method<SCAPIX_META_STRING("play"), jboolean>(); }
inline jboolean JetPlayer::pause() { return call_method<SCAPIX_META_STRING("pause"), jboolean>(); }
inline jboolean JetPlayer::queueJetSegment(jint segmentNum, jint libNum, jint repeatCount, jint transpose, jint muteFlags, jbyte userID) { return call_method<SCAPIX_META_STRING("queueJetSegment"), jboolean>(segmentNum, libNum, repeatCount, transpose, muteFlags, userID); }
inline jboolean JetPlayer::queueJetSegmentMuteArray(jint segmentNum, jint libNum, jint repeatCount, jint transpose, ref<link::java::array<jboolean>> muteArray, jbyte userID) { return call_method<SCAPIX_META_STRING("queueJetSegmentMuteArray"), jboolean>(segmentNum, libNum, repeatCount, transpose, muteArray, userID); }
inline jboolean JetPlayer::setMuteFlags(jint muteFlags, jboolean sync) { return call_method<SCAPIX_META_STRING("setMuteFlags"), jboolean>(muteFlags, sync); }
inline jboolean JetPlayer::setMuteArray(ref<link::java::array<jboolean>> muteArray, jboolean sync) { return call_method<SCAPIX_META_STRING("setMuteArray"), jboolean>(muteArray, sync); }
inline jboolean JetPlayer::setMuteFlag(jint trackId, jboolean muteFlag, jboolean sync) { return call_method<SCAPIX_META_STRING("setMuteFlag"), jboolean>(trackId, muteFlag, sync); }
inline jboolean JetPlayer::triggerClip(jint clipId) { return call_method<SCAPIX_META_STRING("triggerClip"), jboolean>(clipId); }
inline jboolean JetPlayer::clearQueue() { return call_method<SCAPIX_META_STRING("clearQueue"), jboolean>(); }
inline void JetPlayer::setEventListener(ref<android::media::JetPlayer_OnJetEventListener> listener) { return call_method<SCAPIX_META_STRING("setEventListener"), void>(listener); }
inline void JetPlayer::setEventListener(ref<android::media::JetPlayer_OnJetEventListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("setEventListener"), void>(listener, handler); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_JETPLAYER_H
