// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_MEDIA_VOLUMESHAPER_CONFIGURATION_H
#define SCAPIX_ANDROID_MEDIA_VOLUMESHAPER_CONFIGURATION_H

namespace scapix::java_api {

namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class String; }
namespace android::media { class VolumeShaper_Configuration_Builder; }

namespace android::media {

class VolumeShaper_Configuration : public object_base<SCAPIX_META_STRING("android/media/VolumeShaper$Configuration"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = VolumeShaper_Configuration_Builder;

	static ref<android::os::Parcelable_Creator> CREATOR_();
	static ref<android::media::VolumeShaper_Configuration> CUBIC_RAMP_();
	static jint INTERPOLATOR_TYPE_CUBIC_();
	static jint INTERPOLATOR_TYPE_CUBIC_MONOTONIC_();
	static jint INTERPOLATOR_TYPE_LINEAR_();
	static jint INTERPOLATOR_TYPE_STEP_();
	static ref<android::media::VolumeShaper_Configuration> LINEAR_RAMP_();
	static ref<android::media::VolumeShaper_Configuration> SCURVE_RAMP_();
	static ref<android::media::VolumeShaper_Configuration> SINE_RAMP_();

	static jint getMaximumCurvePoints();
	ref<java::lang::String> toString();
	jint hashCode();
	jboolean equals(ref<java::lang::Object> o);
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> dest, jint flags);
	jint getInterpolatorType();
	jlong getDuration();
	ref<link::java::array<jfloat>> getTimes();
	ref<link::java::array<jfloat>> getVolumes();

protected:

	VolumeShaper_Configuration(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::media {

inline ref<android::os::Parcelable_Creator> VolumeShaper_Configuration::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline ref<android::media::VolumeShaper_Configuration> VolumeShaper_Configuration::CUBIC_RAMP_() { return get_static_field<SCAPIX_META_STRING("CUBIC_RAMP"), ref<android::media::VolumeShaper_Configuration>>(); }
inline jint VolumeShaper_Configuration::INTERPOLATOR_TYPE_CUBIC_() { return get_static_field<SCAPIX_META_STRING("INTERPOLATOR_TYPE_CUBIC"), jint>(); }
inline jint VolumeShaper_Configuration::INTERPOLATOR_TYPE_CUBIC_MONOTONIC_() { return get_static_field<SCAPIX_META_STRING("INTERPOLATOR_TYPE_CUBIC_MONOTONIC"), jint>(); }
inline jint VolumeShaper_Configuration::INTERPOLATOR_TYPE_LINEAR_() { return get_static_field<SCAPIX_META_STRING("INTERPOLATOR_TYPE_LINEAR"), jint>(); }
inline jint VolumeShaper_Configuration::INTERPOLATOR_TYPE_STEP_() { return get_static_field<SCAPIX_META_STRING("INTERPOLATOR_TYPE_STEP"), jint>(); }
inline ref<android::media::VolumeShaper_Configuration> VolumeShaper_Configuration::LINEAR_RAMP_() { return get_static_field<SCAPIX_META_STRING("LINEAR_RAMP"), ref<android::media::VolumeShaper_Configuration>>(); }
inline ref<android::media::VolumeShaper_Configuration> VolumeShaper_Configuration::SCURVE_RAMP_() { return get_static_field<SCAPIX_META_STRING("SCURVE_RAMP"), ref<android::media::VolumeShaper_Configuration>>(); }
inline ref<android::media::VolumeShaper_Configuration> VolumeShaper_Configuration::SINE_RAMP_() { return get_static_field<SCAPIX_META_STRING("SINE_RAMP"), ref<android::media::VolumeShaper_Configuration>>(); }
inline jint VolumeShaper_Configuration::getMaximumCurvePoints() { return call_static_method<SCAPIX_META_STRING("getMaximumCurvePoints"), jint>(); }
inline ref<java::lang::String> VolumeShaper_Configuration::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jint VolumeShaper_Configuration::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean VolumeShaper_Configuration::equals(ref<java::lang::Object> o) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(o); }
inline jint VolumeShaper_Configuration::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void VolumeShaper_Configuration::writeToParcel(ref<android::os::Parcel> dest, jint flags) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(dest, flags); }
inline jint VolumeShaper_Configuration::getInterpolatorType() { return call_method<SCAPIX_META_STRING("getInterpolatorType"), jint>(); }
inline jlong VolumeShaper_Configuration::getDuration() { return call_method<SCAPIX_META_STRING("getDuration"), jlong>(); }
inline ref<link::java::array<jfloat>> VolumeShaper_Configuration::getTimes() { return call_method<SCAPIX_META_STRING("getTimes"), ref<link::java::array<jfloat>>>(); }
inline ref<link::java::array<jfloat>> VolumeShaper_Configuration::getVolumes() { return call_method<SCAPIX_META_STRING("getVolumes"), ref<link::java::array<jfloat>>>(); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_VOLUMESHAPER_CONFIGURATION_H
