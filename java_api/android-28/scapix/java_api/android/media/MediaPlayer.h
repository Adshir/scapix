// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/media/VolumeAutomation.h>
#include <scapix/java_api/android/media/AudioRouting.h>

#ifndef SCAPIX_ANDROID_MEDIA_MEDIAPLAYER_H
#define SCAPIX_ANDROID_MEDIA_MEDIAPLAYER_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::content::res { class AssetFileDescriptor; }
namespace android::media { class AudioAttributes; }
namespace android::media { class AudioDeviceInfo; }
namespace android::media { class AudioRouting_OnRoutingChangedListener; }
namespace android::media { class MediaDataSource; }
namespace android::media { class MediaDrm_KeyRequest; }
namespace android::media { class MediaPlayer_DrmInfo; }
namespace android::media { class MediaPlayer_OnBufferingUpdateListener; }
namespace android::media { class MediaPlayer_OnCompletionListener; }
namespace android::media { class MediaPlayer_OnDrmConfigHelper; }
namespace android::media { class MediaPlayer_OnDrmInfoListener; }
namespace android::media { class MediaPlayer_OnDrmPreparedListener; }
namespace android::media { class MediaPlayer_OnErrorListener; }
namespace android::media { class MediaPlayer_OnInfoListener; }
namespace android::media { class MediaPlayer_OnMediaTimeDiscontinuityListener; }
namespace android::media { class MediaPlayer_OnPreparedListener; }
namespace android::media { class MediaPlayer_OnSeekCompleteListener; }
namespace android::media { class MediaPlayer_OnSubtitleDataListener; }
namespace android::media { class MediaPlayer_OnTimedMetaDataAvailableListener; }
namespace android::media { class MediaPlayer_OnTimedTextListener; }
namespace android::media { class MediaPlayer_OnVideoSizeChangedListener; }
namespace android::media { class MediaPlayer_TrackInfo; }
namespace android::media { class MediaTimestamp; }
namespace android::media { class PlaybackParams; }
namespace android::media { class SyncParams; }
namespace android::media { class VolumeShaper; }
namespace android::media { class VolumeShaper_Configuration; }
namespace android::net { class Uri; }
namespace android::os { class Handler; }
namespace android::os { class PersistableBundle; }
namespace android::view { class Surface; }
namespace android::view { class SurfaceHolder; }
namespace java::io { class FileDescriptor; }
namespace java::lang { class String; }
namespace java::util { class List; }
namespace java::util { class Map; }
namespace java::util { class UUID; }
namespace android::media { class MediaPlayer_ProvisioningServerErrorException; }
namespace android::media { class MediaPlayer_ProvisioningNetworkErrorException; }
namespace android::media { class MediaPlayer_NoDrmSchemeException; }
namespace android::media { class MediaPlayer_MetricsConstants; }

namespace android::media {

class MediaPlayer : public object_base<SCAPIX_META_STRING("android/media/MediaPlayer"),
	java::lang::Object,
	android::media::VolumeAutomation,
	android::media::AudioRouting>
{
public:

	using TrackInfo = MediaPlayer_TrackInfo;
	using ProvisioningServerErrorException = MediaPlayer_ProvisioningServerErrorException;
	using ProvisioningNetworkErrorException = MediaPlayer_ProvisioningNetworkErrorException;
	using OnVideoSizeChangedListener = MediaPlayer_OnVideoSizeChangedListener;
	using OnTimedTextListener = MediaPlayer_OnTimedTextListener;
	using OnTimedMetaDataAvailableListener = MediaPlayer_OnTimedMetaDataAvailableListener;
	using OnSubtitleDataListener = MediaPlayer_OnSubtitleDataListener;
	using OnSeekCompleteListener = MediaPlayer_OnSeekCompleteListener;
	using OnPreparedListener = MediaPlayer_OnPreparedListener;
	using OnMediaTimeDiscontinuityListener = MediaPlayer_OnMediaTimeDiscontinuityListener;
	using OnInfoListener = MediaPlayer_OnInfoListener;
	using OnErrorListener = MediaPlayer_OnErrorListener;
	using OnDrmPreparedListener = MediaPlayer_OnDrmPreparedListener;
	using OnDrmInfoListener = MediaPlayer_OnDrmInfoListener;
	using OnDrmConfigHelper = MediaPlayer_OnDrmConfigHelper;
	using OnCompletionListener = MediaPlayer_OnCompletionListener;
	using OnBufferingUpdateListener = MediaPlayer_OnBufferingUpdateListener;
	using NoDrmSchemeException = MediaPlayer_NoDrmSchemeException;
	using MetricsConstants = MediaPlayer_MetricsConstants;
	using DrmInfo = MediaPlayer_DrmInfo;

	static jint MEDIA_ERROR_IO_();
	static jint MEDIA_ERROR_MALFORMED_();
	static jint MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK_();
	static jint MEDIA_ERROR_SERVER_DIED_();
	static jint MEDIA_ERROR_TIMED_OUT_();
	static jint MEDIA_ERROR_UNKNOWN_();
	static jint MEDIA_ERROR_UNSUPPORTED_();
	static jint MEDIA_INFO_AUDIO_NOT_PLAYING_();
	static jint MEDIA_INFO_BAD_INTERLEAVING_();
	static jint MEDIA_INFO_BUFFERING_END_();
	static jint MEDIA_INFO_BUFFERING_START_();
	static jint MEDIA_INFO_METADATA_UPDATE_();
	static jint MEDIA_INFO_NOT_SEEKABLE_();
	static jint MEDIA_INFO_STARTED_AS_NEXT_();
	static jint MEDIA_INFO_SUBTITLE_TIMED_OUT_();
	static jint MEDIA_INFO_UNKNOWN_();
	static jint MEDIA_INFO_UNSUPPORTED_SUBTITLE_();
	static jint MEDIA_INFO_VIDEO_NOT_PLAYING_();
	static jint MEDIA_INFO_VIDEO_RENDERING_START_();
	static jint MEDIA_INFO_VIDEO_TRACK_LAGGING_();
	static ref<java::lang::String> MEDIA_MIMETYPE_TEXT_SUBRIP_();
	static jint PREPARE_DRM_STATUS_PREPARATION_ERROR_();
	static jint PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR_();
	static jint PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR_();
	static jint PREPARE_DRM_STATUS_SUCCESS_();
	static jint SEEK_CLOSEST_();
	static jint SEEK_CLOSEST_SYNC_();
	static jint SEEK_NEXT_SYNC_();
	static jint SEEK_PREVIOUS_SYNC_();
	static jint VIDEO_SCALING_MODE_SCALE_TO_FIT_();
	static jint VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING_();

	static ref<MediaPlayer> new_object();
	void setDisplay(ref<android::view::SurfaceHolder> sh);
	void setSurface(ref<android::view::Surface> surface);
	void setVideoScalingMode(jint mode);
	static ref<android::media::MediaPlayer> create(ref<android::content::Context> context, ref<android::net::Uri> uri);
	static ref<android::media::MediaPlayer> create(ref<android::content::Context> context, ref<android::net::Uri> uri, ref<android::view::SurfaceHolder> holder);
	static ref<android::media::MediaPlayer> create(ref<android::content::Context> context, ref<android::net::Uri> uri, ref<android::view::SurfaceHolder> holder, ref<android::media::AudioAttributes> audioAttributes, jint audioSessionId);
	static ref<android::media::MediaPlayer> create(ref<android::content::Context> context, jint resid);
	static ref<android::media::MediaPlayer> create(ref<android::content::Context> context, jint resid, ref<android::media::AudioAttributes> audioAttributes, jint audioSessionId);
	void setDataSource(ref<android::content::Context> context, ref<android::net::Uri> uri);
	void setDataSource(ref<android::content::Context> context, ref<android::net::Uri> uri, ref<java::util::Map> headers, ref<java::util::List> cookies);
	void setDataSource(ref<android::content::Context> context, ref<android::net::Uri> uri, ref<java::util::Map> headers);
	void setDataSource(ref<java::lang::String> path);
	void setDataSource(ref<android::content::res::AssetFileDescriptor> afd);
	void setDataSource(ref<java::io::FileDescriptor> fd);
	void setDataSource(ref<java::io::FileDescriptor> fd, jlong offset, jlong p3);
	void setDataSource(ref<android::media::MediaDataSource> dataSource);
	void prepare();
	void prepareAsync();
	void start();
	void stop();
	void pause();
	ref<android::media::VolumeShaper> createVolumeShaper(ref<android::media::VolumeShaper_Configuration> configuration);
	jboolean setPreferredDevice(ref<android::media::AudioDeviceInfo> deviceInfo);
	ref<android::media::AudioDeviceInfo> getPreferredDevice();
	ref<android::media::AudioDeviceInfo> getRoutedDevice();
	void addOnRoutingChangedListener(ref<android::media::AudioRouting_OnRoutingChangedListener> listener, ref<android::os::Handler> handler);
	void removeOnRoutingChangedListener(ref<android::media::AudioRouting_OnRoutingChangedListener> listener);
	void setWakeMode(ref<android::content::Context> context, jint mode);
	void setScreenOnWhilePlaying(jboolean screenOn);
	jint getVideoWidth();
	jint getVideoHeight();
	ref<android::os::PersistableBundle> getMetrics();
	jboolean isPlaying();
	void setPlaybackParams(ref<android::media::PlaybackParams> p1);
	ref<android::media::PlaybackParams> getPlaybackParams();
	void setSyncParams(ref<android::media::SyncParams> p1);
	ref<android::media::SyncParams> getSyncParams();
	void seekTo(jlong msec, jint p2);
	void seekTo(jint msec);
	ref<android::media::MediaTimestamp> getTimestamp();
	jint getCurrentPosition();
	jint getDuration();
	void setNextMediaPlayer(ref<android::media::MediaPlayer> p1);
	void release();
	void reset();
	void setAudioStreamType(jint streamtype);
	void setAudioAttributes(ref<android::media::AudioAttributes> attributes);
	void setLooping(jboolean p1);
	jboolean isLooping();
	void setVolume(jfloat leftVolume, jfloat rightVolume);
	void setAudioSessionId(jint p1);
	jint getAudioSessionId();
	void attachAuxEffect(jint p1);
	void setAuxEffectSendLevel(jfloat level);
	ref<link::java::array<android::media::MediaPlayer_TrackInfo>> getTrackInfo();
	void addTimedTextSource(ref<java::lang::String> path, ref<java::lang::String> mimeType);
	void addTimedTextSource(ref<android::content::Context> context, ref<android::net::Uri> uri, ref<java::lang::String> mimeType);
	void addTimedTextSource(ref<java::io::FileDescriptor> fd, ref<java::lang::String> mimeType);
	void addTimedTextSource(ref<java::io::FileDescriptor> fd, jlong offset, jlong p3, ref<java::lang::String> length);
	jint getSelectedTrack(jint trackType);
	void selectTrack(jint index);
	void deselectTrack(jint index);
	void setOnPreparedListener(ref<android::media::MediaPlayer_OnPreparedListener> listener);
	void setOnCompletionListener(ref<android::media::MediaPlayer_OnCompletionListener> listener);
	void setOnBufferingUpdateListener(ref<android::media::MediaPlayer_OnBufferingUpdateListener> listener);
	void setOnSeekCompleteListener(ref<android::media::MediaPlayer_OnSeekCompleteListener> listener);
	void setOnVideoSizeChangedListener(ref<android::media::MediaPlayer_OnVideoSizeChangedListener> listener);
	void setOnTimedTextListener(ref<android::media::MediaPlayer_OnTimedTextListener> listener);
	void setOnSubtitleDataListener(ref<android::media::MediaPlayer_OnSubtitleDataListener> listener, ref<android::os::Handler> handler);
	void setOnSubtitleDataListener(ref<android::media::MediaPlayer_OnSubtitleDataListener> listener);
	void clearOnSubtitleDataListener();
	void setOnMediaTimeDiscontinuityListener(ref<android::media::MediaPlayer_OnMediaTimeDiscontinuityListener> listener, ref<android::os::Handler> handler);
	void setOnMediaTimeDiscontinuityListener(ref<android::media::MediaPlayer_OnMediaTimeDiscontinuityListener> listener);
	void clearOnMediaTimeDiscontinuityListener();
	void setOnTimedMetaDataAvailableListener(ref<android::media::MediaPlayer_OnTimedMetaDataAvailableListener> listener);
	void setOnErrorListener(ref<android::media::MediaPlayer_OnErrorListener> listener);
	void setOnInfoListener(ref<android::media::MediaPlayer_OnInfoListener> listener);
	void setOnDrmConfigHelper(ref<android::media::MediaPlayer_OnDrmConfigHelper> listener);
	void setOnDrmInfoListener(ref<android::media::MediaPlayer_OnDrmInfoListener> listener);
	void setOnDrmInfoListener(ref<android::media::MediaPlayer_OnDrmInfoListener> listener, ref<android::os::Handler> handler);
	void setOnDrmPreparedListener(ref<android::media::MediaPlayer_OnDrmPreparedListener> listener);
	void setOnDrmPreparedListener(ref<android::media::MediaPlayer_OnDrmPreparedListener> listener, ref<android::os::Handler> handler);
	ref<android::media::MediaPlayer_DrmInfo> getDrmInfo();
	void prepareDrm(ref<java::util::UUID> uuid);
	void releaseDrm();
	ref<android::media::MediaDrm_KeyRequest> getKeyRequest(ref<link::java::array<jbyte>> keySetId, ref<link::java::array<jbyte>> initData, ref<java::lang::String> mimeType, jint keyType, ref<java::util::Map> optionalParameters);
	ref<link::java::array<jbyte>> provideKeyResponse(ref<link::java::array<jbyte>> keySetId, ref<link::java::array<jbyte>> response);
	void restoreKeys(ref<link::java::array<jbyte>> keySetId);
	ref<java::lang::String> getDrmPropertyString(ref<java::lang::String> propertyName);
	void setDrmPropertyString(ref<java::lang::String> propertyName, ref<java::lang::String> value);

protected:

	MediaPlayer(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/AssetFileDescriptor.h>
#include <scapix/java_api/android/media/AudioAttributes.h>
#include <scapix/java_api/android/media/AudioDeviceInfo.h>
#include <scapix/java_api/android/media/AudioRouting_OnRoutingChangedListener.h>
#include <scapix/java_api/android/media/MediaDataSource.h>
#include <scapix/java_api/android/media/MediaDrm_KeyRequest.h>
#include <scapix/java_api/android/media/MediaPlayer_DrmInfo.h>
#include <scapix/java_api/android/media/MediaPlayer_OnBufferingUpdateListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnCompletionListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnDrmConfigHelper.h>
#include <scapix/java_api/android/media/MediaPlayer_OnDrmInfoListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnDrmPreparedListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnErrorListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnInfoListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnMediaTimeDiscontinuityListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnPreparedListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnSeekCompleteListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnSubtitleDataListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnTimedMetaDataAvailableListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnTimedTextListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnVideoSizeChangedListener.h>
#include <scapix/java_api/android/media/MediaPlayer_TrackInfo.h>
#include <scapix/java_api/android/media/MediaTimestamp.h>
#include <scapix/java_api/android/media/PlaybackParams.h>
#include <scapix/java_api/android/media/SyncParams.h>
#include <scapix/java_api/android/media/VolumeShaper.h>
#include <scapix/java_api/android/media/VolumeShaper_Configuration.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/android/view/SurfaceHolder.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/UUID.h>

namespace scapix::java_api {
namespace android::media {

inline jint MediaPlayer::MEDIA_ERROR_IO_() { return get_static_field<SCAPIX_META_STRING("MEDIA_ERROR_IO"), jint>(); }
inline jint MediaPlayer::MEDIA_ERROR_MALFORMED_() { return get_static_field<SCAPIX_META_STRING("MEDIA_ERROR_MALFORMED"), jint>(); }
inline jint MediaPlayer::MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK_() { return get_static_field<SCAPIX_META_STRING("MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK"), jint>(); }
inline jint MediaPlayer::MEDIA_ERROR_SERVER_DIED_() { return get_static_field<SCAPIX_META_STRING("MEDIA_ERROR_SERVER_DIED"), jint>(); }
inline jint MediaPlayer::MEDIA_ERROR_TIMED_OUT_() { return get_static_field<SCAPIX_META_STRING("MEDIA_ERROR_TIMED_OUT"), jint>(); }
inline jint MediaPlayer::MEDIA_ERROR_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("MEDIA_ERROR_UNKNOWN"), jint>(); }
inline jint MediaPlayer::MEDIA_ERROR_UNSUPPORTED_() { return get_static_field<SCAPIX_META_STRING("MEDIA_ERROR_UNSUPPORTED"), jint>(); }
inline jint MediaPlayer::MEDIA_INFO_AUDIO_NOT_PLAYING_() { return get_static_field<SCAPIX_META_STRING("MEDIA_INFO_AUDIO_NOT_PLAYING"), jint>(); }
inline jint MediaPlayer::MEDIA_INFO_BAD_INTERLEAVING_() { return get_static_field<SCAPIX_META_STRING("MEDIA_INFO_BAD_INTERLEAVING"), jint>(); }
inline jint MediaPlayer::MEDIA_INFO_BUFFERING_END_() { return get_static_field<SCAPIX_META_STRING("MEDIA_INFO_BUFFERING_END"), jint>(); }
inline jint MediaPlayer::MEDIA_INFO_BUFFERING_START_() { return get_static_field<SCAPIX_META_STRING("MEDIA_INFO_BUFFERING_START"), jint>(); }
inline jint MediaPlayer::MEDIA_INFO_METADATA_UPDATE_() { return get_static_field<SCAPIX_META_STRING("MEDIA_INFO_METADATA_UPDATE"), jint>(); }
inline jint MediaPlayer::MEDIA_INFO_NOT_SEEKABLE_() { return get_static_field<SCAPIX_META_STRING("MEDIA_INFO_NOT_SEEKABLE"), jint>(); }
inline jint MediaPlayer::MEDIA_INFO_STARTED_AS_NEXT_() { return get_static_field<SCAPIX_META_STRING("MEDIA_INFO_STARTED_AS_NEXT"), jint>(); }
inline jint MediaPlayer::MEDIA_INFO_SUBTITLE_TIMED_OUT_() { return get_static_field<SCAPIX_META_STRING("MEDIA_INFO_SUBTITLE_TIMED_OUT"), jint>(); }
inline jint MediaPlayer::MEDIA_INFO_UNKNOWN_() { return get_static_field<SCAPIX_META_STRING("MEDIA_INFO_UNKNOWN"), jint>(); }
inline jint MediaPlayer::MEDIA_INFO_UNSUPPORTED_SUBTITLE_() { return get_static_field<SCAPIX_META_STRING("MEDIA_INFO_UNSUPPORTED_SUBTITLE"), jint>(); }
inline jint MediaPlayer::MEDIA_INFO_VIDEO_NOT_PLAYING_() { return get_static_field<SCAPIX_META_STRING("MEDIA_INFO_VIDEO_NOT_PLAYING"), jint>(); }
inline jint MediaPlayer::MEDIA_INFO_VIDEO_RENDERING_START_() { return get_static_field<SCAPIX_META_STRING("MEDIA_INFO_VIDEO_RENDERING_START"), jint>(); }
inline jint MediaPlayer::MEDIA_INFO_VIDEO_TRACK_LAGGING_() { return get_static_field<SCAPIX_META_STRING("MEDIA_INFO_VIDEO_TRACK_LAGGING"), jint>(); }
inline ref<java::lang::String> MediaPlayer::MEDIA_MIMETYPE_TEXT_SUBRIP_() { return get_static_field<SCAPIX_META_STRING("MEDIA_MIMETYPE_TEXT_SUBRIP"), ref<java::lang::String>>(); }
inline jint MediaPlayer::PREPARE_DRM_STATUS_PREPARATION_ERROR_() { return get_static_field<SCAPIX_META_STRING("PREPARE_DRM_STATUS_PREPARATION_ERROR"), jint>(); }
inline jint MediaPlayer::PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR_() { return get_static_field<SCAPIX_META_STRING("PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR"), jint>(); }
inline jint MediaPlayer::PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR_() { return get_static_field<SCAPIX_META_STRING("PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR"), jint>(); }
inline jint MediaPlayer::PREPARE_DRM_STATUS_SUCCESS_() { return get_static_field<SCAPIX_META_STRING("PREPARE_DRM_STATUS_SUCCESS"), jint>(); }
inline jint MediaPlayer::SEEK_CLOSEST_() { return get_static_field<SCAPIX_META_STRING("SEEK_CLOSEST"), jint>(); }
inline jint MediaPlayer::SEEK_CLOSEST_SYNC_() { return get_static_field<SCAPIX_META_STRING("SEEK_CLOSEST_SYNC"), jint>(); }
inline jint MediaPlayer::SEEK_NEXT_SYNC_() { return get_static_field<SCAPIX_META_STRING("SEEK_NEXT_SYNC"), jint>(); }
inline jint MediaPlayer::SEEK_PREVIOUS_SYNC_() { return get_static_field<SCAPIX_META_STRING("SEEK_PREVIOUS_SYNC"), jint>(); }
inline jint MediaPlayer::VIDEO_SCALING_MODE_SCALE_TO_FIT_() { return get_static_field<SCAPIX_META_STRING("VIDEO_SCALING_MODE_SCALE_TO_FIT"), jint>(); }
inline jint MediaPlayer::VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING_() { return get_static_field<SCAPIX_META_STRING("VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING"), jint>(); }
inline ref<MediaPlayer> MediaPlayer::new_object() { return base_::new_object(); }
inline void MediaPlayer::setDisplay(ref<android::view::SurfaceHolder> sh) { return call_method<SCAPIX_META_STRING("setDisplay"), void>(sh); }
inline void MediaPlayer::setSurface(ref<android::view::Surface> surface) { return call_method<SCAPIX_META_STRING("setSurface"), void>(surface); }
inline void MediaPlayer::setVideoScalingMode(jint mode) { return call_method<SCAPIX_META_STRING("setVideoScalingMode"), void>(mode); }
inline ref<android::media::MediaPlayer> MediaPlayer::create(ref<android::content::Context> context, ref<android::net::Uri> uri) { return call_static_method<SCAPIX_META_STRING("create"), ref<android::media::MediaPlayer>>(context, uri); }
inline ref<android::media::MediaPlayer> MediaPlayer::create(ref<android::content::Context> context, ref<android::net::Uri> uri, ref<android::view::SurfaceHolder> holder) { return call_static_method<SCAPIX_META_STRING("create"), ref<android::media::MediaPlayer>>(context, uri, holder); }
inline ref<android::media::MediaPlayer> MediaPlayer::create(ref<android::content::Context> context, ref<android::net::Uri> uri, ref<android::view::SurfaceHolder> holder, ref<android::media::AudioAttributes> audioAttributes, jint audioSessionId) { return call_static_method<SCAPIX_META_STRING("create"), ref<android::media::MediaPlayer>>(context, uri, holder, audioAttributes, audioSessionId); }
inline ref<android::media::MediaPlayer> MediaPlayer::create(ref<android::content::Context> context, jint resid) { return call_static_method<SCAPIX_META_STRING("create"), ref<android::media::MediaPlayer>>(context, resid); }
inline ref<android::media::MediaPlayer> MediaPlayer::create(ref<android::content::Context> context, jint resid, ref<android::media::AudioAttributes> audioAttributes, jint audioSessionId) { return call_static_method<SCAPIX_META_STRING("create"), ref<android::media::MediaPlayer>>(context, resid, audioAttributes, audioSessionId); }
inline void MediaPlayer::setDataSource(ref<android::content::Context> context, ref<android::net::Uri> uri) { return call_method<SCAPIX_META_STRING("setDataSource"), void>(context, uri); }
inline void MediaPlayer::setDataSource(ref<android::content::Context> context, ref<android::net::Uri> uri, ref<java::util::Map> headers, ref<java::util::List> cookies) { return call_method<SCAPIX_META_STRING("setDataSource"), void>(context, uri, headers, cookies); }
inline void MediaPlayer::setDataSource(ref<android::content::Context> context, ref<android::net::Uri> uri, ref<java::util::Map> headers) { return call_method<SCAPIX_META_STRING("setDataSource"), void>(context, uri, headers); }
inline void MediaPlayer::setDataSource(ref<java::lang::String> path) { return call_method<SCAPIX_META_STRING("setDataSource"), void>(path); }
inline void MediaPlayer::setDataSource(ref<android::content::res::AssetFileDescriptor> afd) { return call_method<SCAPIX_META_STRING("setDataSource"), void>(afd); }
inline void MediaPlayer::setDataSource(ref<java::io::FileDescriptor> fd) { return call_method<SCAPIX_META_STRING("setDataSource"), void>(fd); }
inline void MediaPlayer::setDataSource(ref<java::io::FileDescriptor> fd, jlong offset, jlong p3) { return call_method<SCAPIX_META_STRING("setDataSource"), void>(fd, offset, p3); }
inline void MediaPlayer::setDataSource(ref<android::media::MediaDataSource> dataSource) { return call_method<SCAPIX_META_STRING("setDataSource"), void>(dataSource); }
inline void MediaPlayer::prepare() { return call_method<SCAPIX_META_STRING("prepare"), void>(); }
inline void MediaPlayer::prepareAsync() { return call_method<SCAPIX_META_STRING("prepareAsync"), void>(); }
inline void MediaPlayer::start() { return call_method<SCAPIX_META_STRING("start"), void>(); }
inline void MediaPlayer::stop() { return call_method<SCAPIX_META_STRING("stop"), void>(); }
inline void MediaPlayer::pause() { return call_method<SCAPIX_META_STRING("pause"), void>(); }
inline ref<android::media::VolumeShaper> MediaPlayer::createVolumeShaper(ref<android::media::VolumeShaper_Configuration> configuration) { return call_method<SCAPIX_META_STRING("createVolumeShaper"), ref<android::media::VolumeShaper>>(configuration); }
inline jboolean MediaPlayer::setPreferredDevice(ref<android::media::AudioDeviceInfo> deviceInfo) { return call_method<SCAPIX_META_STRING("setPreferredDevice"), jboolean>(deviceInfo); }
inline ref<android::media::AudioDeviceInfo> MediaPlayer::getPreferredDevice() { return call_method<SCAPIX_META_STRING("getPreferredDevice"), ref<android::media::AudioDeviceInfo>>(); }
inline ref<android::media::AudioDeviceInfo> MediaPlayer::getRoutedDevice() { return call_method<SCAPIX_META_STRING("getRoutedDevice"), ref<android::media::AudioDeviceInfo>>(); }
inline void MediaPlayer::addOnRoutingChangedListener(ref<android::media::AudioRouting_OnRoutingChangedListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("addOnRoutingChangedListener"), void>(listener, handler); }
inline void MediaPlayer::removeOnRoutingChangedListener(ref<android::media::AudioRouting_OnRoutingChangedListener> listener) { return call_method<SCAPIX_META_STRING("removeOnRoutingChangedListener"), void>(listener); }
inline void MediaPlayer::setWakeMode(ref<android::content::Context> context, jint mode) { return call_method<SCAPIX_META_STRING("setWakeMode"), void>(context, mode); }
inline void MediaPlayer::setScreenOnWhilePlaying(jboolean screenOn) { return call_method<SCAPIX_META_STRING("setScreenOnWhilePlaying"), void>(screenOn); }
inline jint MediaPlayer::getVideoWidth() { return call_method<SCAPIX_META_STRING("getVideoWidth"), jint>(); }
inline jint MediaPlayer::getVideoHeight() { return call_method<SCAPIX_META_STRING("getVideoHeight"), jint>(); }
inline ref<android::os::PersistableBundle> MediaPlayer::getMetrics() { return call_method<SCAPIX_META_STRING("getMetrics"), ref<android::os::PersistableBundle>>(); }
inline jboolean MediaPlayer::isPlaying() { return call_method<SCAPIX_META_STRING("isPlaying"), jboolean>(); }
inline void MediaPlayer::setPlaybackParams(ref<android::media::PlaybackParams> p1) { return call_method<SCAPIX_META_STRING("setPlaybackParams"), void>(p1); }
inline ref<android::media::PlaybackParams> MediaPlayer::getPlaybackParams() { return call_method<SCAPIX_META_STRING("getPlaybackParams"), ref<android::media::PlaybackParams>>(); }
inline void MediaPlayer::setSyncParams(ref<android::media::SyncParams> p1) { return call_method<SCAPIX_META_STRING("setSyncParams"), void>(p1); }
inline ref<android::media::SyncParams> MediaPlayer::getSyncParams() { return call_method<SCAPIX_META_STRING("getSyncParams"), ref<android::media::SyncParams>>(); }
inline void MediaPlayer::seekTo(jlong msec, jint p2) { return call_method<SCAPIX_META_STRING("seekTo"), void>(msec, p2); }
inline void MediaPlayer::seekTo(jint msec) { return call_method<SCAPIX_META_STRING("seekTo"), void>(msec); }
inline ref<android::media::MediaTimestamp> MediaPlayer::getTimestamp() { return call_method<SCAPIX_META_STRING("getTimestamp"), ref<android::media::MediaTimestamp>>(); }
inline jint MediaPlayer::getCurrentPosition() { return call_method<SCAPIX_META_STRING("getCurrentPosition"), jint>(); }
inline jint MediaPlayer::getDuration() { return call_method<SCAPIX_META_STRING("getDuration"), jint>(); }
inline void MediaPlayer::setNextMediaPlayer(ref<android::media::MediaPlayer> p1) { return call_method<SCAPIX_META_STRING("setNextMediaPlayer"), void>(p1); }
inline void MediaPlayer::release() { return call_method<SCAPIX_META_STRING("release"), void>(); }
inline void MediaPlayer::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline void MediaPlayer::setAudioStreamType(jint streamtype) { return call_method<SCAPIX_META_STRING("setAudioStreamType"), void>(streamtype); }
inline void MediaPlayer::setAudioAttributes(ref<android::media::AudioAttributes> attributes) { return call_method<SCAPIX_META_STRING("setAudioAttributes"), void>(attributes); }
inline void MediaPlayer::setLooping(jboolean p1) { return call_method<SCAPIX_META_STRING("setLooping"), void>(p1); }
inline jboolean MediaPlayer::isLooping() { return call_method<SCAPIX_META_STRING("isLooping"), jboolean>(); }
inline void MediaPlayer::setVolume(jfloat leftVolume, jfloat rightVolume) { return call_method<SCAPIX_META_STRING("setVolume"), void>(leftVolume, rightVolume); }
inline void MediaPlayer::setAudioSessionId(jint p1) { return call_method<SCAPIX_META_STRING("setAudioSessionId"), void>(p1); }
inline jint MediaPlayer::getAudioSessionId() { return call_method<SCAPIX_META_STRING("getAudioSessionId"), jint>(); }
inline void MediaPlayer::attachAuxEffect(jint p1) { return call_method<SCAPIX_META_STRING("attachAuxEffect"), void>(p1); }
inline void MediaPlayer::setAuxEffectSendLevel(jfloat level) { return call_method<SCAPIX_META_STRING("setAuxEffectSendLevel"), void>(level); }
inline ref<link::java::array<android::media::MediaPlayer_TrackInfo>> MediaPlayer::getTrackInfo() { return call_method<SCAPIX_META_STRING("getTrackInfo"), ref<link::java::array<android::media::MediaPlayer_TrackInfo>>>(); }
inline void MediaPlayer::addTimedTextSource(ref<java::lang::String> path, ref<java::lang::String> mimeType) { return call_method<SCAPIX_META_STRING("addTimedTextSource"), void>(path, mimeType); }
inline void MediaPlayer::addTimedTextSource(ref<android::content::Context> context, ref<android::net::Uri> uri, ref<java::lang::String> mimeType) { return call_method<SCAPIX_META_STRING("addTimedTextSource"), void>(context, uri, mimeType); }
inline void MediaPlayer::addTimedTextSource(ref<java::io::FileDescriptor> fd, ref<java::lang::String> mimeType) { return call_method<SCAPIX_META_STRING("addTimedTextSource"), void>(fd, mimeType); }
inline void MediaPlayer::addTimedTextSource(ref<java::io::FileDescriptor> fd, jlong offset, jlong p3, ref<java::lang::String> length) { return call_method<SCAPIX_META_STRING("addTimedTextSource"), void>(fd, offset, p3, length); }
inline jint MediaPlayer::getSelectedTrack(jint trackType) { return call_method<SCAPIX_META_STRING("getSelectedTrack"), jint>(trackType); }
inline void MediaPlayer::selectTrack(jint index) { return call_method<SCAPIX_META_STRING("selectTrack"), void>(index); }
inline void MediaPlayer::deselectTrack(jint index) { return call_method<SCAPIX_META_STRING("deselectTrack"), void>(index); }
inline void MediaPlayer::setOnPreparedListener(ref<android::media::MediaPlayer_OnPreparedListener> listener) { return call_method<SCAPIX_META_STRING("setOnPreparedListener"), void>(listener); }
inline void MediaPlayer::setOnCompletionListener(ref<android::media::MediaPlayer_OnCompletionListener> listener) { return call_method<SCAPIX_META_STRING("setOnCompletionListener"), void>(listener); }
inline void MediaPlayer::setOnBufferingUpdateListener(ref<android::media::MediaPlayer_OnBufferingUpdateListener> listener) { return call_method<SCAPIX_META_STRING("setOnBufferingUpdateListener"), void>(listener); }
inline void MediaPlayer::setOnSeekCompleteListener(ref<android::media::MediaPlayer_OnSeekCompleteListener> listener) { return call_method<SCAPIX_META_STRING("setOnSeekCompleteListener"), void>(listener); }
inline void MediaPlayer::setOnVideoSizeChangedListener(ref<android::media::MediaPlayer_OnVideoSizeChangedListener> listener) { return call_method<SCAPIX_META_STRING("setOnVideoSizeChangedListener"), void>(listener); }
inline void MediaPlayer::setOnTimedTextListener(ref<android::media::MediaPlayer_OnTimedTextListener> listener) { return call_method<SCAPIX_META_STRING("setOnTimedTextListener"), void>(listener); }
inline void MediaPlayer::setOnSubtitleDataListener(ref<android::media::MediaPlayer_OnSubtitleDataListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("setOnSubtitleDataListener"), void>(listener, handler); }
inline void MediaPlayer::setOnSubtitleDataListener(ref<android::media::MediaPlayer_OnSubtitleDataListener> listener) { return call_method<SCAPIX_META_STRING("setOnSubtitleDataListener"), void>(listener); }
inline void MediaPlayer::clearOnSubtitleDataListener() { return call_method<SCAPIX_META_STRING("clearOnSubtitleDataListener"), void>(); }
inline void MediaPlayer::setOnMediaTimeDiscontinuityListener(ref<android::media::MediaPlayer_OnMediaTimeDiscontinuityListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("setOnMediaTimeDiscontinuityListener"), void>(listener, handler); }
inline void MediaPlayer::setOnMediaTimeDiscontinuityListener(ref<android::media::MediaPlayer_OnMediaTimeDiscontinuityListener> listener) { return call_method<SCAPIX_META_STRING("setOnMediaTimeDiscontinuityListener"), void>(listener); }
inline void MediaPlayer::clearOnMediaTimeDiscontinuityListener() { return call_method<SCAPIX_META_STRING("clearOnMediaTimeDiscontinuityListener"), void>(); }
inline void MediaPlayer::setOnTimedMetaDataAvailableListener(ref<android::media::MediaPlayer_OnTimedMetaDataAvailableListener> listener) { return call_method<SCAPIX_META_STRING("setOnTimedMetaDataAvailableListener"), void>(listener); }
inline void MediaPlayer::setOnErrorListener(ref<android::media::MediaPlayer_OnErrorListener> listener) { return call_method<SCAPIX_META_STRING("setOnErrorListener"), void>(listener); }
inline void MediaPlayer::setOnInfoListener(ref<android::media::MediaPlayer_OnInfoListener> listener) { return call_method<SCAPIX_META_STRING("setOnInfoListener"), void>(listener); }
inline void MediaPlayer::setOnDrmConfigHelper(ref<android::media::MediaPlayer_OnDrmConfigHelper> listener) { return call_method<SCAPIX_META_STRING("setOnDrmConfigHelper"), void>(listener); }
inline void MediaPlayer::setOnDrmInfoListener(ref<android::media::MediaPlayer_OnDrmInfoListener> listener) { return call_method<SCAPIX_META_STRING("setOnDrmInfoListener"), void>(listener); }
inline void MediaPlayer::setOnDrmInfoListener(ref<android::media::MediaPlayer_OnDrmInfoListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("setOnDrmInfoListener"), void>(listener, handler); }
inline void MediaPlayer::setOnDrmPreparedListener(ref<android::media::MediaPlayer_OnDrmPreparedListener> listener) { return call_method<SCAPIX_META_STRING("setOnDrmPreparedListener"), void>(listener); }
inline void MediaPlayer::setOnDrmPreparedListener(ref<android::media::MediaPlayer_OnDrmPreparedListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("setOnDrmPreparedListener"), void>(listener, handler); }
inline ref<android::media::MediaPlayer_DrmInfo> MediaPlayer::getDrmInfo() { return call_method<SCAPIX_META_STRING("getDrmInfo"), ref<android::media::MediaPlayer_DrmInfo>>(); }
inline void MediaPlayer::prepareDrm(ref<java::util::UUID> uuid) { return call_method<SCAPIX_META_STRING("prepareDrm"), void>(uuid); }
inline void MediaPlayer::releaseDrm() { return call_method<SCAPIX_META_STRING("releaseDrm"), void>(); }
inline ref<android::media::MediaDrm_KeyRequest> MediaPlayer::getKeyRequest(ref<link::java::array<jbyte>> keySetId, ref<link::java::array<jbyte>> initData, ref<java::lang::String> mimeType, jint keyType, ref<java::util::Map> optionalParameters) { return call_method<SCAPIX_META_STRING("getKeyRequest"), ref<android::media::MediaDrm_KeyRequest>>(keySetId, initData, mimeType, keyType, optionalParameters); }
inline ref<link::java::array<jbyte>> MediaPlayer::provideKeyResponse(ref<link::java::array<jbyte>> keySetId, ref<link::java::array<jbyte>> response) { return call_method<SCAPIX_META_STRING("provideKeyResponse"), ref<link::java::array<jbyte>>>(keySetId, response); }
inline void MediaPlayer::restoreKeys(ref<link::java::array<jbyte>> keySetId) { return call_method<SCAPIX_META_STRING("restoreKeys"), void>(keySetId); }
inline ref<java::lang::String> MediaPlayer::getDrmPropertyString(ref<java::lang::String> propertyName) { return call_method<SCAPIX_META_STRING("getDrmPropertyString"), ref<java::lang::String>>(propertyName); }
inline void MediaPlayer::setDrmPropertyString(ref<java::lang::String> propertyName, ref<java::lang::String> value) { return call_method<SCAPIX_META_STRING("setDrmPropertyString"), void>(propertyName, value); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_MEDIAPLAYER_H
