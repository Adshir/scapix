// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_MEDIA_MEDIASYNC_H
#define SCAPIX_ANDROID_MEDIA_MEDIASYNC_H

namespace scapix::java_api {

namespace android::media { class AudioTrack; }
namespace android::media { class MediaSync_Callback; }
namespace android::media { class MediaSync_OnErrorListener; }
namespace android::media { class MediaTimestamp; }
namespace android::media { class PlaybackParams; }
namespace android::media { class SyncParams; }
namespace android::os { class Handler; }
namespace android::view { class Surface; }
namespace java::nio { class ByteBuffer; }

namespace android::media {

class MediaSync : public object_base<SCAPIX_META_STRING("android/media/MediaSync"),
	java::lang::Object>
{
public:

	using OnErrorListener = MediaSync_OnErrorListener;
	using Callback = MediaSync_Callback;

	static jint MEDIASYNC_ERROR_AUDIOTRACK_FAIL_();
	static jint MEDIASYNC_ERROR_SURFACE_FAIL_();

	static ref<MediaSync> new_object();
	void release();
	void setCallback(ref<android::media::MediaSync_Callback> cb, ref<android::os::Handler> handler);
	void setOnErrorListener(ref<android::media::MediaSync_OnErrorListener> listener, ref<android::os::Handler> handler);
	void setSurface(ref<android::view::Surface> surface);
	void setAudioTrack(ref<android::media::AudioTrack> audioTrack);
	ref<android::view::Surface> createInputSurface();
	void setPlaybackParams(ref<android::media::PlaybackParams> params);
	ref<android::media::PlaybackParams> getPlaybackParams();
	void setSyncParams(ref<android::media::SyncParams> params);
	ref<android::media::SyncParams> getSyncParams();
	void flush();
	ref<android::media::MediaTimestamp> getTimestamp();
	void queueAudio(ref<java::nio::ByteBuffer> audioData, jint bufferId, jlong presentationTimeUs);

protected:

	MediaSync(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/android/media/AudioTrack.h>
#include <scapix/java_api/android/media/MediaSync_Callback.h>
#include <scapix/java_api/android/media/MediaSync_OnErrorListener.h>
#include <scapix/java_api/android/media/MediaTimestamp.h>
#include <scapix/java_api/android/media/PlaybackParams.h>
#include <scapix/java_api/android/media/SyncParams.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>

namespace scapix::java_api {
namespace android::media {

inline jint MediaSync::MEDIASYNC_ERROR_AUDIOTRACK_FAIL_() { return get_static_field<SCAPIX_META_STRING("MEDIASYNC_ERROR_AUDIOTRACK_FAIL"), jint>(); }
inline jint MediaSync::MEDIASYNC_ERROR_SURFACE_FAIL_() { return get_static_field<SCAPIX_META_STRING("MEDIASYNC_ERROR_SURFACE_FAIL"), jint>(); }
inline ref<MediaSync> MediaSync::new_object() { return base_::new_object(); }
inline void MediaSync::release() { return call_method<SCAPIX_META_STRING("release"), void>(); }
inline void MediaSync::setCallback(ref<android::media::MediaSync_Callback> cb, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("setCallback"), void>(cb, handler); }
inline void MediaSync::setOnErrorListener(ref<android::media::MediaSync_OnErrorListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("setOnErrorListener"), void>(listener, handler); }
inline void MediaSync::setSurface(ref<android::view::Surface> surface) { return call_method<SCAPIX_META_STRING("setSurface"), void>(surface); }
inline void MediaSync::setAudioTrack(ref<android::media::AudioTrack> audioTrack) { return call_method<SCAPIX_META_STRING("setAudioTrack"), void>(audioTrack); }
inline ref<android::view::Surface> MediaSync::createInputSurface() { return call_method<SCAPIX_META_STRING("createInputSurface"), ref<android::view::Surface>>(); }
inline void MediaSync::setPlaybackParams(ref<android::media::PlaybackParams> params) { return call_method<SCAPIX_META_STRING("setPlaybackParams"), void>(params); }
inline ref<android::media::PlaybackParams> MediaSync::getPlaybackParams() { return call_method<SCAPIX_META_STRING("getPlaybackParams"), ref<android::media::PlaybackParams>>(); }
inline void MediaSync::setSyncParams(ref<android::media::SyncParams> params) { return call_method<SCAPIX_META_STRING("setSyncParams"), void>(params); }
inline ref<android::media::SyncParams> MediaSync::getSyncParams() { return call_method<SCAPIX_META_STRING("getSyncParams"), ref<android::media::SyncParams>>(); }
inline void MediaSync::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline ref<android::media::MediaTimestamp> MediaSync::getTimestamp() { return call_method<SCAPIX_META_STRING("getTimestamp"), ref<android::media::MediaTimestamp>>(); }
inline void MediaSync::queueAudio(ref<java::nio::ByteBuffer> audioData, jint bufferId, jlong presentationTimeUs) { return call_method<SCAPIX_META_STRING("queueAudio"), void>(audioData, bufferId, presentationTimeUs); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_MEDIASYNC_H
