// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_MEDIA_MEDIAFORMAT_H
#define SCAPIX_ANDROID_MEDIA_MEDIAFORMAT_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::nio { class ByteBuffer; }

namespace android::media {

class MediaFormat : public object_base<SCAPIX_META_STRING("android/media/MediaFormat"),
	java::lang::Object>
{
public:

	static jint COLOR_RANGE_FULL_();
	static jint COLOR_RANGE_LIMITED_();
	static jint COLOR_STANDARD_BT2020_();
	static jint COLOR_STANDARD_BT601_NTSC_();
	static jint COLOR_STANDARD_BT601_PAL_();
	static jint COLOR_STANDARD_BT709_();
	static jint COLOR_TRANSFER_HLG_();
	static jint COLOR_TRANSFER_LINEAR_();
	static jint COLOR_TRANSFER_SDR_VIDEO_();
	static jint COLOR_TRANSFER_ST2084_();
	static ref<java::lang::String> KEY_AAC_DRC_ATTENUATION_FACTOR_();
	static ref<java::lang::String> KEY_AAC_DRC_BOOST_FACTOR_();
	static ref<java::lang::String> KEY_AAC_DRC_EFFECT_TYPE_();
	static ref<java::lang::String> KEY_AAC_DRC_HEAVY_COMPRESSION_();
	static ref<java::lang::String> KEY_AAC_DRC_TARGET_REFERENCE_LEVEL_();
	static ref<java::lang::String> KEY_AAC_ENCODED_TARGET_LEVEL_();
	static ref<java::lang::String> KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT_();
	static ref<java::lang::String> KEY_AAC_PROFILE_();
	static ref<java::lang::String> KEY_AAC_SBR_MODE_();
	static ref<java::lang::String> KEY_AUDIO_SESSION_ID_();
	static ref<java::lang::String> KEY_BITRATE_MODE_();
	static ref<java::lang::String> KEY_BIT_RATE_();
	static ref<java::lang::String> KEY_CAPTURE_RATE_();
	static ref<java::lang::String> KEY_CHANNEL_COUNT_();
	static ref<java::lang::String> KEY_CHANNEL_MASK_();
	static ref<java::lang::String> KEY_COLOR_FORMAT_();
	static ref<java::lang::String> KEY_COLOR_RANGE_();
	static ref<java::lang::String> KEY_COLOR_STANDARD_();
	static ref<java::lang::String> KEY_COLOR_TRANSFER_();
	static ref<java::lang::String> KEY_COMPLEXITY_();
	static ref<java::lang::String> KEY_DURATION_();
	static ref<java::lang::String> KEY_FLAC_COMPRESSION_LEVEL_();
	static ref<java::lang::String> KEY_FRAME_RATE_();
	static ref<java::lang::String> KEY_GRID_COLUMNS_();
	static ref<java::lang::String> KEY_GRID_ROWS_();
	static ref<java::lang::String> KEY_HDR_STATIC_INFO_();
	static ref<java::lang::String> KEY_HEIGHT_();
	static ref<java::lang::String> KEY_INTRA_REFRESH_PERIOD_();
	static ref<java::lang::String> KEY_IS_ADTS_();
	static ref<java::lang::String> KEY_IS_AUTOSELECT_();
	static ref<java::lang::String> KEY_IS_DEFAULT_();
	static ref<java::lang::String> KEY_IS_FORCED_SUBTITLE_();
	static ref<java::lang::String> KEY_I_FRAME_INTERVAL_();
	static ref<java::lang::String> KEY_LANGUAGE_();
	static ref<java::lang::String> KEY_LATENCY_();
	static ref<java::lang::String> KEY_LEVEL_();
	static ref<java::lang::String> KEY_MAX_HEIGHT_();
	static ref<java::lang::String> KEY_MAX_INPUT_SIZE_();
	static ref<java::lang::String> KEY_MAX_WIDTH_();
	static ref<java::lang::String> KEY_MIME_();
	static ref<java::lang::String> KEY_OPERATING_RATE_();
	static ref<java::lang::String> KEY_OUTPUT_REORDER_DEPTH_();
	static ref<java::lang::String> KEY_PCM_ENCODING_();
	static ref<java::lang::String> KEY_PRIORITY_();
	static ref<java::lang::String> KEY_PROFILE_();
	static ref<java::lang::String> KEY_PUSH_BLANK_BUFFERS_ON_STOP_();
	static ref<java::lang::String> KEY_QUALITY_();
	static ref<java::lang::String> KEY_REPEAT_PREVIOUS_FRAME_AFTER_();
	static ref<java::lang::String> KEY_ROTATION_();
	static ref<java::lang::String> KEY_SAMPLE_RATE_();
	static ref<java::lang::String> KEY_SLICE_HEIGHT_();
	static ref<java::lang::String> KEY_STRIDE_();
	static ref<java::lang::String> KEY_TEMPORAL_LAYERING_();
	static ref<java::lang::String> KEY_TILE_HEIGHT_();
	static ref<java::lang::String> KEY_TILE_WIDTH_();
	static ref<java::lang::String> KEY_TRACK_ID_();
	static ref<java::lang::String> KEY_WIDTH_();
	static ref<java::lang::String> MIMETYPE_AUDIO_AAC_();
	static ref<java::lang::String> MIMETYPE_AUDIO_AC3_();
	static ref<java::lang::String> MIMETYPE_AUDIO_AMR_NB_();
	static ref<java::lang::String> MIMETYPE_AUDIO_AMR_WB_();
	static ref<java::lang::String> MIMETYPE_AUDIO_EAC3_();
	static ref<java::lang::String> MIMETYPE_AUDIO_FLAC_();
	static ref<java::lang::String> MIMETYPE_AUDIO_G711_ALAW_();
	static ref<java::lang::String> MIMETYPE_AUDIO_G711_MLAW_();
	static ref<java::lang::String> MIMETYPE_AUDIO_MPEG_();
	static ref<java::lang::String> MIMETYPE_AUDIO_MSGSM_();
	static ref<java::lang::String> MIMETYPE_AUDIO_OPUS_();
	static ref<java::lang::String> MIMETYPE_AUDIO_QCELP_();
	static ref<java::lang::String> MIMETYPE_AUDIO_RAW_();
	static ref<java::lang::String> MIMETYPE_AUDIO_SCRAMBLED_();
	static ref<java::lang::String> MIMETYPE_AUDIO_VORBIS_();
	static ref<java::lang::String> MIMETYPE_IMAGE_ANDROID_HEIC_();
	static ref<java::lang::String> MIMETYPE_TEXT_CEA_608_();
	static ref<java::lang::String> MIMETYPE_TEXT_CEA_708_();
	static ref<java::lang::String> MIMETYPE_TEXT_SUBRIP_();
	static ref<java::lang::String> MIMETYPE_TEXT_VTT_();
	static ref<java::lang::String> MIMETYPE_VIDEO_AVC_();
	static ref<java::lang::String> MIMETYPE_VIDEO_DOLBY_VISION_();
	static ref<java::lang::String> MIMETYPE_VIDEO_H263_();
	static ref<java::lang::String> MIMETYPE_VIDEO_HEVC_();
	static ref<java::lang::String> MIMETYPE_VIDEO_MPEG2_();
	static ref<java::lang::String> MIMETYPE_VIDEO_MPEG4_();
	static ref<java::lang::String> MIMETYPE_VIDEO_RAW_();
	static ref<java::lang::String> MIMETYPE_VIDEO_SCRAMBLED_();
	static ref<java::lang::String> MIMETYPE_VIDEO_VP8_();
	static ref<java::lang::String> MIMETYPE_VIDEO_VP9_();

	static ref<MediaFormat> new_object();
	jboolean containsKey(ref<java::lang::String> name);
	jint getInteger(ref<java::lang::String> name);
	jlong getLong(ref<java::lang::String> name);
	jfloat getFloat(ref<java::lang::String> name);
	ref<java::lang::String> getString(ref<java::lang::String> name);
	ref<java::nio::ByteBuffer> getByteBuffer(ref<java::lang::String> name);
	jboolean getFeatureEnabled(ref<java::lang::String> feature);
	void setInteger(ref<java::lang::String> name, jint value);
	void setLong(ref<java::lang::String> name, jlong value);
	void setFloat(ref<java::lang::String> name, jfloat value);
	void setString(ref<java::lang::String> name, ref<java::lang::String> value);
	void setByteBuffer(ref<java::lang::String> name, ref<java::nio::ByteBuffer> bytes);
	void setFeatureEnabled(ref<java::lang::String> feature, jboolean enabled);
	static ref<android::media::MediaFormat> createAudioFormat(ref<java::lang::String> mime, jint sampleRate, jint channelCount);
	static ref<android::media::MediaFormat> createSubtitleFormat(ref<java::lang::String> mime, ref<java::lang::String> language);
	static ref<android::media::MediaFormat> createVideoFormat(ref<java::lang::String> mime, jint width, jint height);
	ref<java::lang::String> toString();

protected:

	MediaFormat(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>

namespace scapix::java_api {
namespace android::media {

inline jint MediaFormat::COLOR_RANGE_FULL_() { return get_static_field<SCAPIX_META_STRING("COLOR_RANGE_FULL"), jint>(); }
inline jint MediaFormat::COLOR_RANGE_LIMITED_() { return get_static_field<SCAPIX_META_STRING("COLOR_RANGE_LIMITED"), jint>(); }
inline jint MediaFormat::COLOR_STANDARD_BT2020_() { return get_static_field<SCAPIX_META_STRING("COLOR_STANDARD_BT2020"), jint>(); }
inline jint MediaFormat::COLOR_STANDARD_BT601_NTSC_() { return get_static_field<SCAPIX_META_STRING("COLOR_STANDARD_BT601_NTSC"), jint>(); }
inline jint MediaFormat::COLOR_STANDARD_BT601_PAL_() { return get_static_field<SCAPIX_META_STRING("COLOR_STANDARD_BT601_PAL"), jint>(); }
inline jint MediaFormat::COLOR_STANDARD_BT709_() { return get_static_field<SCAPIX_META_STRING("COLOR_STANDARD_BT709"), jint>(); }
inline jint MediaFormat::COLOR_TRANSFER_HLG_() { return get_static_field<SCAPIX_META_STRING("COLOR_TRANSFER_HLG"), jint>(); }
inline jint MediaFormat::COLOR_TRANSFER_LINEAR_() { return get_static_field<SCAPIX_META_STRING("COLOR_TRANSFER_LINEAR"), jint>(); }
inline jint MediaFormat::COLOR_TRANSFER_SDR_VIDEO_() { return get_static_field<SCAPIX_META_STRING("COLOR_TRANSFER_SDR_VIDEO"), jint>(); }
inline jint MediaFormat::COLOR_TRANSFER_ST2084_() { return get_static_field<SCAPIX_META_STRING("COLOR_TRANSFER_ST2084"), jint>(); }
inline ref<java::lang::String> MediaFormat::KEY_AAC_DRC_ATTENUATION_FACTOR_() { return get_static_field<SCAPIX_META_STRING("KEY_AAC_DRC_ATTENUATION_FACTOR"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_AAC_DRC_BOOST_FACTOR_() { return get_static_field<SCAPIX_META_STRING("KEY_AAC_DRC_BOOST_FACTOR"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_AAC_DRC_EFFECT_TYPE_() { return get_static_field<SCAPIX_META_STRING("KEY_AAC_DRC_EFFECT_TYPE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_AAC_DRC_HEAVY_COMPRESSION_() { return get_static_field<SCAPIX_META_STRING("KEY_AAC_DRC_HEAVY_COMPRESSION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_AAC_DRC_TARGET_REFERENCE_LEVEL_() { return get_static_field<SCAPIX_META_STRING("KEY_AAC_DRC_TARGET_REFERENCE_LEVEL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_AAC_ENCODED_TARGET_LEVEL_() { return get_static_field<SCAPIX_META_STRING("KEY_AAC_ENCODED_TARGET_LEVEL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT_() { return get_static_field<SCAPIX_META_STRING("KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_AAC_PROFILE_() { return get_static_field<SCAPIX_META_STRING("KEY_AAC_PROFILE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_AAC_SBR_MODE_() { return get_static_field<SCAPIX_META_STRING("KEY_AAC_SBR_MODE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_AUDIO_SESSION_ID_() { return get_static_field<SCAPIX_META_STRING("KEY_AUDIO_SESSION_ID"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_BITRATE_MODE_() { return get_static_field<SCAPIX_META_STRING("KEY_BITRATE_MODE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_BIT_RATE_() { return get_static_field<SCAPIX_META_STRING("KEY_BIT_RATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_CAPTURE_RATE_() { return get_static_field<SCAPIX_META_STRING("KEY_CAPTURE_RATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_CHANNEL_COUNT_() { return get_static_field<SCAPIX_META_STRING("KEY_CHANNEL_COUNT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_CHANNEL_MASK_() { return get_static_field<SCAPIX_META_STRING("KEY_CHANNEL_MASK"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_COLOR_FORMAT_() { return get_static_field<SCAPIX_META_STRING("KEY_COLOR_FORMAT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_COLOR_RANGE_() { return get_static_field<SCAPIX_META_STRING("KEY_COLOR_RANGE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_COLOR_STANDARD_() { return get_static_field<SCAPIX_META_STRING("KEY_COLOR_STANDARD"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_COLOR_TRANSFER_() { return get_static_field<SCAPIX_META_STRING("KEY_COLOR_TRANSFER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_COMPLEXITY_() { return get_static_field<SCAPIX_META_STRING("KEY_COMPLEXITY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_DURATION_() { return get_static_field<SCAPIX_META_STRING("KEY_DURATION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_FLAC_COMPRESSION_LEVEL_() { return get_static_field<SCAPIX_META_STRING("KEY_FLAC_COMPRESSION_LEVEL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_FRAME_RATE_() { return get_static_field<SCAPIX_META_STRING("KEY_FRAME_RATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_GRID_COLUMNS_() { return get_static_field<SCAPIX_META_STRING("KEY_GRID_COLUMNS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_GRID_ROWS_() { return get_static_field<SCAPIX_META_STRING("KEY_GRID_ROWS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_HDR_STATIC_INFO_() { return get_static_field<SCAPIX_META_STRING("KEY_HDR_STATIC_INFO"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_HEIGHT_() { return get_static_field<SCAPIX_META_STRING("KEY_HEIGHT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_INTRA_REFRESH_PERIOD_() { return get_static_field<SCAPIX_META_STRING("KEY_INTRA_REFRESH_PERIOD"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_IS_ADTS_() { return get_static_field<SCAPIX_META_STRING("KEY_IS_ADTS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_IS_AUTOSELECT_() { return get_static_field<SCAPIX_META_STRING("KEY_IS_AUTOSELECT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_IS_DEFAULT_() { return get_static_field<SCAPIX_META_STRING("KEY_IS_DEFAULT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_IS_FORCED_SUBTITLE_() { return get_static_field<SCAPIX_META_STRING("KEY_IS_FORCED_SUBTITLE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_I_FRAME_INTERVAL_() { return get_static_field<SCAPIX_META_STRING("KEY_I_FRAME_INTERVAL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_LANGUAGE_() { return get_static_field<SCAPIX_META_STRING("KEY_LANGUAGE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_LATENCY_() { return get_static_field<SCAPIX_META_STRING("KEY_LATENCY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_LEVEL_() { return get_static_field<SCAPIX_META_STRING("KEY_LEVEL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_MAX_HEIGHT_() { return get_static_field<SCAPIX_META_STRING("KEY_MAX_HEIGHT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_MAX_INPUT_SIZE_() { return get_static_field<SCAPIX_META_STRING("KEY_MAX_INPUT_SIZE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_MAX_WIDTH_() { return get_static_field<SCAPIX_META_STRING("KEY_MAX_WIDTH"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_MIME_() { return get_static_field<SCAPIX_META_STRING("KEY_MIME"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_OPERATING_RATE_() { return get_static_field<SCAPIX_META_STRING("KEY_OPERATING_RATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_OUTPUT_REORDER_DEPTH_() { return get_static_field<SCAPIX_META_STRING("KEY_OUTPUT_REORDER_DEPTH"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_PCM_ENCODING_() { return get_static_field<SCAPIX_META_STRING("KEY_PCM_ENCODING"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_PRIORITY_() { return get_static_field<SCAPIX_META_STRING("KEY_PRIORITY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_PROFILE_() { return get_static_field<SCAPIX_META_STRING("KEY_PROFILE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_PUSH_BLANK_BUFFERS_ON_STOP_() { return get_static_field<SCAPIX_META_STRING("KEY_PUSH_BLANK_BUFFERS_ON_STOP"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_QUALITY_() { return get_static_field<SCAPIX_META_STRING("KEY_QUALITY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_REPEAT_PREVIOUS_FRAME_AFTER_() { return get_static_field<SCAPIX_META_STRING("KEY_REPEAT_PREVIOUS_FRAME_AFTER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_ROTATION_() { return get_static_field<SCAPIX_META_STRING("KEY_ROTATION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_SAMPLE_RATE_() { return get_static_field<SCAPIX_META_STRING("KEY_SAMPLE_RATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_SLICE_HEIGHT_() { return get_static_field<SCAPIX_META_STRING("KEY_SLICE_HEIGHT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_STRIDE_() { return get_static_field<SCAPIX_META_STRING("KEY_STRIDE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_TEMPORAL_LAYERING_() { return get_static_field<SCAPIX_META_STRING("KEY_TEMPORAL_LAYERING"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_TILE_HEIGHT_() { return get_static_field<SCAPIX_META_STRING("KEY_TILE_HEIGHT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_TILE_WIDTH_() { return get_static_field<SCAPIX_META_STRING("KEY_TILE_WIDTH"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_TRACK_ID_() { return get_static_field<SCAPIX_META_STRING("KEY_TRACK_ID"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::KEY_WIDTH_() { return get_static_field<SCAPIX_META_STRING("KEY_WIDTH"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_AUDIO_AAC_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_AUDIO_AAC"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_AUDIO_AC3_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_AUDIO_AC3"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_AUDIO_AMR_NB_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_AUDIO_AMR_NB"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_AUDIO_AMR_WB_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_AUDIO_AMR_WB"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_AUDIO_EAC3_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_AUDIO_EAC3"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_AUDIO_FLAC_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_AUDIO_FLAC"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_AUDIO_G711_ALAW_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_AUDIO_G711_ALAW"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_AUDIO_G711_MLAW_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_AUDIO_G711_MLAW"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_AUDIO_MPEG_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_AUDIO_MPEG"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_AUDIO_MSGSM_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_AUDIO_MSGSM"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_AUDIO_OPUS_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_AUDIO_OPUS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_AUDIO_QCELP_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_AUDIO_QCELP"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_AUDIO_RAW_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_AUDIO_RAW"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_AUDIO_SCRAMBLED_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_AUDIO_SCRAMBLED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_AUDIO_VORBIS_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_AUDIO_VORBIS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_IMAGE_ANDROID_HEIC_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_IMAGE_ANDROID_HEIC"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_TEXT_CEA_608_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_TEXT_CEA_608"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_TEXT_CEA_708_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_TEXT_CEA_708"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_TEXT_SUBRIP_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_TEXT_SUBRIP"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_TEXT_VTT_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_TEXT_VTT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_VIDEO_AVC_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_VIDEO_AVC"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_VIDEO_DOLBY_VISION_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_VIDEO_DOLBY_VISION"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_VIDEO_H263_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_VIDEO_H263"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_VIDEO_HEVC_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_VIDEO_HEVC"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_VIDEO_MPEG2_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_VIDEO_MPEG2"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_VIDEO_MPEG4_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_VIDEO_MPEG4"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_VIDEO_RAW_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_VIDEO_RAW"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_VIDEO_SCRAMBLED_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_VIDEO_SCRAMBLED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_VIDEO_VP8_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_VIDEO_VP8"), ref<java::lang::String>>(); }
inline ref<java::lang::String> MediaFormat::MIMETYPE_VIDEO_VP9_() { return get_static_field<SCAPIX_META_STRING("MIMETYPE_VIDEO_VP9"), ref<java::lang::String>>(); }
inline ref<MediaFormat> MediaFormat::new_object() { return base_::new_object(); }
inline jboolean MediaFormat::containsKey(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("containsKey"), jboolean>(name); }
inline jint MediaFormat::getInteger(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getInteger"), jint>(name); }
inline jlong MediaFormat::getLong(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(name); }
inline jfloat MediaFormat::getFloat(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(name); }
inline ref<java::lang::String> MediaFormat::getString(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(name); }
inline ref<java::nio::ByteBuffer> MediaFormat::getByteBuffer(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getByteBuffer"), ref<java::nio::ByteBuffer>>(name); }
inline jboolean MediaFormat::getFeatureEnabled(ref<java::lang::String> feature) { return call_method<SCAPIX_META_STRING("getFeatureEnabled"), jboolean>(feature); }
inline void MediaFormat::setInteger(ref<java::lang::String> name, jint value) { return call_method<SCAPIX_META_STRING("setInteger"), void>(name, value); }
inline void MediaFormat::setLong(ref<java::lang::String> name, jlong value) { return call_method<SCAPIX_META_STRING("setLong"), void>(name, value); }
inline void MediaFormat::setFloat(ref<java::lang::String> name, jfloat value) { return call_method<SCAPIX_META_STRING("setFloat"), void>(name, value); }
inline void MediaFormat::setString(ref<java::lang::String> name, ref<java::lang::String> value) { return call_method<SCAPIX_META_STRING("setString"), void>(name, value); }
inline void MediaFormat::setByteBuffer(ref<java::lang::String> name, ref<java::nio::ByteBuffer> bytes) { return call_method<SCAPIX_META_STRING("setByteBuffer"), void>(name, bytes); }
inline void MediaFormat::setFeatureEnabled(ref<java::lang::String> feature, jboolean enabled) { return call_method<SCAPIX_META_STRING("setFeatureEnabled"), void>(feature, enabled); }
inline ref<android::media::MediaFormat> MediaFormat::createAudioFormat(ref<java::lang::String> mime, jint sampleRate, jint channelCount) { return call_static_method<SCAPIX_META_STRING("createAudioFormat"), ref<android::media::MediaFormat>>(mime, sampleRate, channelCount); }
inline ref<android::media::MediaFormat> MediaFormat::createSubtitleFormat(ref<java::lang::String> mime, ref<java::lang::String> language) { return call_static_method<SCAPIX_META_STRING("createSubtitleFormat"), ref<android::media::MediaFormat>>(mime, language); }
inline ref<android::media::MediaFormat> MediaFormat::createVideoFormat(ref<java::lang::String> mime, jint width, jint height) { return call_static_method<SCAPIX_META_STRING("createVideoFormat"), ref<android::media::MediaFormat>>(mime, width, height); }
inline ref<java::lang::String> MediaFormat::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_MEDIAFORMAT_H
