// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/media/AudioRouting.h>

#ifndef SCAPIX_ANDROID_MEDIA_AUDIORECORD_H
#define SCAPIX_ANDROID_MEDIA_AUDIORECORD_H

namespace scapix::java_api {

namespace android::media { class AudioDeviceInfo; }
namespace android::media { class AudioFormat; }
namespace android::media { class AudioRecord_OnRecordPositionUpdateListener; }
namespace android::media { class AudioRecord_OnRoutingChangedListener; }
namespace android::media { class AudioRouting_OnRoutingChangedListener; }
namespace android::media { class AudioTimestamp; }
namespace android::media { class MediaSyncEvent; }
namespace android::os { class Handler; }
namespace android::os { class PersistableBundle; }
namespace java::nio { class ByteBuffer; }
namespace java::util { class List; }
namespace android::media { class AudioRecord_MetricsConstants; }
namespace android::media { class AudioRecord_Builder; }

namespace android::media {

class AudioRecord : public object_base<SCAPIX_META_STRING("android/media/AudioRecord"),
	java::lang::Object,
	android::media::AudioRouting>
{
public:

	using OnRoutingChangedListener = AudioRecord_OnRoutingChangedListener;
	using OnRecordPositionUpdateListener = AudioRecord_OnRecordPositionUpdateListener;
	using MetricsConstants = AudioRecord_MetricsConstants;
	using Builder = AudioRecord_Builder;

	static jint ERROR_();
	static jint ERROR_BAD_VALUE_();
	static jint ERROR_DEAD_OBJECT_();
	static jint ERROR_INVALID_OPERATION_();
	static jint READ_BLOCKING_();
	static jint READ_NON_BLOCKING_();
	static jint RECORDSTATE_RECORDING_();
	static jint RECORDSTATE_STOPPED_();
	static jint STATE_INITIALIZED_();
	static jint STATE_UNINITIALIZED_();
	static jint SUCCESS_();

	static ref<AudioRecord> new_object(jint audioSource, jint sampleRateInHz, jint channelConfig, jint audioFormat, jint bufferSizeInBytes);
	void release();
	jint getSampleRate();
	jint getAudioSource();
	jint getAudioFormat();
	jint getChannelConfiguration();
	ref<android::media::AudioFormat> getFormat();
	jint getChannelCount();
	jint getState();
	jint getRecordingState();
	jint getBufferSizeInFrames();
	jint getNotificationMarkerPosition();
	jint getPositionNotificationPeriod();
	jint getTimestamp(ref<android::media::AudioTimestamp> outTimestamp, jint timebase);
	static jint getMinBufferSize(jint sampleRateInHz, jint channelConfig, jint audioFormat);
	jint getAudioSessionId();
	void startRecording();
	void startRecording(ref<android::media::MediaSyncEvent> syncEvent);
	void stop();
	jint read(ref<link::java::array<jbyte>> audioData, jint offsetInBytes, jint sizeInBytes);
	jint read(ref<link::java::array<jbyte>> audioData, jint offsetInBytes, jint sizeInBytes, jint readMode);
	jint read(ref<link::java::array<jshort>> audioData, jint offsetInShorts, jint sizeInShorts);
	jint read(ref<link::java::array<jshort>> audioData, jint offsetInShorts, jint sizeInShorts, jint readMode);
	jint read(ref<link::java::array<jfloat>> audioData, jint offsetInFloats, jint sizeInFloats, jint readMode);
	jint read(ref<java::nio::ByteBuffer> audioBuffer, jint sizeInBytes);
	jint read(ref<java::nio::ByteBuffer> audioBuffer, jint sizeInBytes, jint readMode);
	ref<android::os::PersistableBundle> getMetrics();
	void setRecordPositionUpdateListener(ref<android::media::AudioRecord_OnRecordPositionUpdateListener> listener);
	void setRecordPositionUpdateListener(ref<android::media::AudioRecord_OnRecordPositionUpdateListener> listener, ref<android::os::Handler> handler);
	jint setNotificationMarkerPosition(jint markerInFrames);
	ref<android::media::AudioDeviceInfo> getRoutedDevice();
	void addOnRoutingChangedListener(ref<android::media::AudioRouting_OnRoutingChangedListener> listener, ref<android::os::Handler> handler);
	void removeOnRoutingChangedListener(ref<android::media::AudioRouting_OnRoutingChangedListener> listener);
	void addOnRoutingChangedListener(ref<android::media::AudioRecord_OnRoutingChangedListener> listener, ref<android::os::Handler> handler);
	void removeOnRoutingChangedListener(ref<android::media::AudioRecord_OnRoutingChangedListener> listener);
	jint setPositionNotificationPeriod(jint periodInFrames);
	jboolean setPreferredDevice(ref<android::media::AudioDeviceInfo> deviceInfo);
	ref<android::media::AudioDeviceInfo> getPreferredDevice();
	ref<java::util::List> getActiveMicrophones();

protected:

	AudioRecord(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/android/media/AudioDeviceInfo.h>
#include <scapix/java_api/android/media/AudioFormat.h>
#include <scapix/java_api/android/media/AudioRecord_OnRecordPositionUpdateListener.h>
#include <scapix/java_api/android/media/AudioRecord_OnRoutingChangedListener.h>
#include <scapix/java_api/android/media/AudioRouting_OnRoutingChangedListener.h>
#include <scapix/java_api/android/media/AudioTimestamp.h>
#include <scapix/java_api/android/media/MediaSyncEvent.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::media {

inline jint AudioRecord::ERROR_() { return get_static_field<SCAPIX_META_STRING("ERROR"), jint>(); }
inline jint AudioRecord::ERROR_BAD_VALUE_() { return get_static_field<SCAPIX_META_STRING("ERROR_BAD_VALUE"), jint>(); }
inline jint AudioRecord::ERROR_DEAD_OBJECT_() { return get_static_field<SCAPIX_META_STRING("ERROR_DEAD_OBJECT"), jint>(); }
inline jint AudioRecord::ERROR_INVALID_OPERATION_() { return get_static_field<SCAPIX_META_STRING("ERROR_INVALID_OPERATION"), jint>(); }
inline jint AudioRecord::READ_BLOCKING_() { return get_static_field<SCAPIX_META_STRING("READ_BLOCKING"), jint>(); }
inline jint AudioRecord::READ_NON_BLOCKING_() { return get_static_field<SCAPIX_META_STRING("READ_NON_BLOCKING"), jint>(); }
inline jint AudioRecord::RECORDSTATE_RECORDING_() { return get_static_field<SCAPIX_META_STRING("RECORDSTATE_RECORDING"), jint>(); }
inline jint AudioRecord::RECORDSTATE_STOPPED_() { return get_static_field<SCAPIX_META_STRING("RECORDSTATE_STOPPED"), jint>(); }
inline jint AudioRecord::STATE_INITIALIZED_() { return get_static_field<SCAPIX_META_STRING("STATE_INITIALIZED"), jint>(); }
inline jint AudioRecord::STATE_UNINITIALIZED_() { return get_static_field<SCAPIX_META_STRING("STATE_UNINITIALIZED"), jint>(); }
inline jint AudioRecord::SUCCESS_() { return get_static_field<SCAPIX_META_STRING("SUCCESS"), jint>(); }
inline ref<AudioRecord> AudioRecord::new_object(jint audioSource, jint sampleRateInHz, jint channelConfig, jint audioFormat, jint bufferSizeInBytes) { return base_::new_object(audioSource, sampleRateInHz, channelConfig, audioFormat, bufferSizeInBytes); }
inline void AudioRecord::release() { return call_method<SCAPIX_META_STRING("release"), void>(); }
inline jint AudioRecord::getSampleRate() { return call_method<SCAPIX_META_STRING("getSampleRate"), jint>(); }
inline jint AudioRecord::getAudioSource() { return call_method<SCAPIX_META_STRING("getAudioSource"), jint>(); }
inline jint AudioRecord::getAudioFormat() { return call_method<SCAPIX_META_STRING("getAudioFormat"), jint>(); }
inline jint AudioRecord::getChannelConfiguration() { return call_method<SCAPIX_META_STRING("getChannelConfiguration"), jint>(); }
inline ref<android::media::AudioFormat> AudioRecord::getFormat() { return call_method<SCAPIX_META_STRING("getFormat"), ref<android::media::AudioFormat>>(); }
inline jint AudioRecord::getChannelCount() { return call_method<SCAPIX_META_STRING("getChannelCount"), jint>(); }
inline jint AudioRecord::getState() { return call_method<SCAPIX_META_STRING("getState"), jint>(); }
inline jint AudioRecord::getRecordingState() { return call_method<SCAPIX_META_STRING("getRecordingState"), jint>(); }
inline jint AudioRecord::getBufferSizeInFrames() { return call_method<SCAPIX_META_STRING("getBufferSizeInFrames"), jint>(); }
inline jint AudioRecord::getNotificationMarkerPosition() { return call_method<SCAPIX_META_STRING("getNotificationMarkerPosition"), jint>(); }
inline jint AudioRecord::getPositionNotificationPeriod() { return call_method<SCAPIX_META_STRING("getPositionNotificationPeriod"), jint>(); }
inline jint AudioRecord::getTimestamp(ref<android::media::AudioTimestamp> outTimestamp, jint timebase) { return call_method<SCAPIX_META_STRING("getTimestamp"), jint>(outTimestamp, timebase); }
inline jint AudioRecord::getMinBufferSize(jint sampleRateInHz, jint channelConfig, jint audioFormat) { return call_static_method<SCAPIX_META_STRING("getMinBufferSize"), jint>(sampleRateInHz, channelConfig, audioFormat); }
inline jint AudioRecord::getAudioSessionId() { return call_method<SCAPIX_META_STRING("getAudioSessionId"), jint>(); }
inline void AudioRecord::startRecording() { return call_method<SCAPIX_META_STRING("startRecording"), void>(); }
inline void AudioRecord::startRecording(ref<android::media::MediaSyncEvent> syncEvent) { return call_method<SCAPIX_META_STRING("startRecording"), void>(syncEvent); }
inline void AudioRecord::stop() { return call_method<SCAPIX_META_STRING("stop"), void>(); }
inline jint AudioRecord::read(ref<link::java::array<jbyte>> audioData, jint offsetInBytes, jint sizeInBytes) { return call_method<SCAPIX_META_STRING("read"), jint>(audioData, offsetInBytes, sizeInBytes); }
inline jint AudioRecord::read(ref<link::java::array<jbyte>> audioData, jint offsetInBytes, jint sizeInBytes, jint readMode) { return call_method<SCAPIX_META_STRING("read"), jint>(audioData, offsetInBytes, sizeInBytes, readMode); }
inline jint AudioRecord::read(ref<link::java::array<jshort>> audioData, jint offsetInShorts, jint sizeInShorts) { return call_method<SCAPIX_META_STRING("read"), jint>(audioData, offsetInShorts, sizeInShorts); }
inline jint AudioRecord::read(ref<link::java::array<jshort>> audioData, jint offsetInShorts, jint sizeInShorts, jint readMode) { return call_method<SCAPIX_META_STRING("read"), jint>(audioData, offsetInShorts, sizeInShorts, readMode); }
inline jint AudioRecord::read(ref<link::java::array<jfloat>> audioData, jint offsetInFloats, jint sizeInFloats, jint readMode) { return call_method<SCAPIX_META_STRING("read"), jint>(audioData, offsetInFloats, sizeInFloats, readMode); }
inline jint AudioRecord::read(ref<java::nio::ByteBuffer> audioBuffer, jint sizeInBytes) { return call_method<SCAPIX_META_STRING("read"), jint>(audioBuffer, sizeInBytes); }
inline jint AudioRecord::read(ref<java::nio::ByteBuffer> audioBuffer, jint sizeInBytes, jint readMode) { return call_method<SCAPIX_META_STRING("read"), jint>(audioBuffer, sizeInBytes, readMode); }
inline ref<android::os::PersistableBundle> AudioRecord::getMetrics() { return call_method<SCAPIX_META_STRING("getMetrics"), ref<android::os::PersistableBundle>>(); }
inline void AudioRecord::setRecordPositionUpdateListener(ref<android::media::AudioRecord_OnRecordPositionUpdateListener> listener) { return call_method<SCAPIX_META_STRING("setRecordPositionUpdateListener"), void>(listener); }
inline void AudioRecord::setRecordPositionUpdateListener(ref<android::media::AudioRecord_OnRecordPositionUpdateListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("setRecordPositionUpdateListener"), void>(listener, handler); }
inline jint AudioRecord::setNotificationMarkerPosition(jint markerInFrames) { return call_method<SCAPIX_META_STRING("setNotificationMarkerPosition"), jint>(markerInFrames); }
inline ref<android::media::AudioDeviceInfo> AudioRecord::getRoutedDevice() { return call_method<SCAPIX_META_STRING("getRoutedDevice"), ref<android::media::AudioDeviceInfo>>(); }
inline void AudioRecord::addOnRoutingChangedListener(ref<android::media::AudioRouting_OnRoutingChangedListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("addOnRoutingChangedListener"), void>(listener, handler); }
inline void AudioRecord::removeOnRoutingChangedListener(ref<android::media::AudioRouting_OnRoutingChangedListener> listener) { return call_method<SCAPIX_META_STRING("removeOnRoutingChangedListener"), void>(listener); }
inline void AudioRecord::addOnRoutingChangedListener(ref<android::media::AudioRecord_OnRoutingChangedListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("addOnRoutingChangedListener"), void>(listener, handler); }
inline void AudioRecord::removeOnRoutingChangedListener(ref<android::media::AudioRecord_OnRoutingChangedListener> listener) { return call_method<SCAPIX_META_STRING("removeOnRoutingChangedListener"), void>(listener); }
inline jint AudioRecord::setPositionNotificationPeriod(jint periodInFrames) { return call_method<SCAPIX_META_STRING("setPositionNotificationPeriod"), jint>(periodInFrames); }
inline jboolean AudioRecord::setPreferredDevice(ref<android::media::AudioDeviceInfo> deviceInfo) { return call_method<SCAPIX_META_STRING("setPreferredDevice"), jboolean>(deviceInfo); }
inline ref<android::media::AudioDeviceInfo> AudioRecord::getPreferredDevice() { return call_method<SCAPIX_META_STRING("getPreferredDevice"), ref<android::media::AudioDeviceInfo>>(); }
inline ref<java::util::List> AudioRecord::getActiveMicrophones() { return call_method<SCAPIX_META_STRING("getActiveMicrophones"), ref<java::util::List>>(); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_AUDIORECORD_H
