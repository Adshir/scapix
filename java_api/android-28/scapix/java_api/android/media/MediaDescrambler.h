// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_ANDROID_MEDIA_MEDIADESCRAMBLER_H
#define SCAPIX_ANDROID_MEDIA_MEDIADESCRAMBLER_H

namespace scapix::java_api {

namespace android::media { class MediaCas_Session; }
namespace android::media { class MediaCodec_CryptoInfo; }
namespace java::lang { class String; }
namespace java::nio { class ByteBuffer; }

namespace android::media {

class MediaDescrambler : public object_base<SCAPIX_META_STRING("android/media/MediaDescrambler"),
	java::lang::Object,
	java::lang::AutoCloseable>
{
public:

	static jbyte SCRAMBLE_CONTROL_EVEN_KEY_();
	static jbyte SCRAMBLE_CONTROL_ODD_KEY_();
	static jbyte SCRAMBLE_CONTROL_RESERVED_();
	static jbyte SCRAMBLE_CONTROL_UNSCRAMBLED_();
	static jbyte SCRAMBLE_FLAG_PES_HEADER_();

	static ref<MediaDescrambler> new_object(jint CA_system_id);
	jboolean requiresSecureDecoderComponent(ref<java::lang::String> mime);
	void setMediaCasSession(ref<android::media::MediaCas_Session> session);
	jint descramble(ref<java::nio::ByteBuffer> srcBuf, ref<java::nio::ByteBuffer> dstBuf, ref<android::media::MediaCodec_CryptoInfo> cryptoInfo);
	void close();

protected:

	MediaDescrambler(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/android/media/MediaCas_Session.h>
#include <scapix/java_api/android/media/MediaCodec_CryptoInfo.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>

namespace scapix::java_api {
namespace android::media {

inline jbyte MediaDescrambler::SCRAMBLE_CONTROL_EVEN_KEY_() { return get_static_field<SCAPIX_META_STRING("SCRAMBLE_CONTROL_EVEN_KEY"), jbyte>(); }
inline jbyte MediaDescrambler::SCRAMBLE_CONTROL_ODD_KEY_() { return get_static_field<SCAPIX_META_STRING("SCRAMBLE_CONTROL_ODD_KEY"), jbyte>(); }
inline jbyte MediaDescrambler::SCRAMBLE_CONTROL_RESERVED_() { return get_static_field<SCAPIX_META_STRING("SCRAMBLE_CONTROL_RESERVED"), jbyte>(); }
inline jbyte MediaDescrambler::SCRAMBLE_CONTROL_UNSCRAMBLED_() { return get_static_field<SCAPIX_META_STRING("SCRAMBLE_CONTROL_UNSCRAMBLED"), jbyte>(); }
inline jbyte MediaDescrambler::SCRAMBLE_FLAG_PES_HEADER_() { return get_static_field<SCAPIX_META_STRING("SCRAMBLE_FLAG_PES_HEADER"), jbyte>(); }
inline ref<MediaDescrambler> MediaDescrambler::new_object(jint CA_system_id) { return base_::new_object(CA_system_id); }
inline jboolean MediaDescrambler::requiresSecureDecoderComponent(ref<java::lang::String> mime) { return call_method<SCAPIX_META_STRING("requiresSecureDecoderComponent"), jboolean>(mime); }
inline void MediaDescrambler::setMediaCasSession(ref<android::media::MediaCas_Session> session) { return call_method<SCAPIX_META_STRING("setMediaCasSession"), void>(session); }
inline jint MediaDescrambler::descramble(ref<java::nio::ByteBuffer> srcBuf, ref<java::nio::ByteBuffer> dstBuf, ref<android::media::MediaCodec_CryptoInfo> cryptoInfo) { return call_method<SCAPIX_META_STRING("descramble"), jint>(srcBuf, dstBuf, cryptoInfo); }
inline void MediaDescrambler::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_MEDIADESCRAMBLER_H
