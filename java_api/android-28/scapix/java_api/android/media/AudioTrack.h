// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/media/AudioRouting.h>
#include <scapix/java_api/android/media/VolumeAutomation.h>

#ifndef SCAPIX_ANDROID_MEDIA_AUDIOTRACK_H
#define SCAPIX_ANDROID_MEDIA_AUDIOTRACK_H

namespace scapix::java_api {

namespace android::media { class AudioAttributes; }
namespace android::media { class AudioDeviceInfo; }
namespace android::media { class AudioFormat; }
namespace android::media { class AudioPresentation; }
namespace android::media { class AudioRouting_OnRoutingChangedListener; }
namespace android::media { class AudioTimestamp; }
namespace android::media { class AudioTrack_OnPlaybackPositionUpdateListener; }
namespace android::media { class AudioTrack_OnRoutingChangedListener; }
namespace android::media { class PlaybackParams; }
namespace android::media { class VolumeShaper; }
namespace android::media { class VolumeShaper_Configuration; }
namespace android::os { class Handler; }
namespace android::os { class PersistableBundle; }
namespace java::nio { class ByteBuffer; }
namespace android::media { class AudioTrack_MetricsConstants; }
namespace android::media { class AudioTrack_Builder; }

namespace android::media {

class AudioTrack : public object_base<SCAPIX_META_STRING("android/media/AudioTrack"),
	java::lang::Object,
	android::media::AudioRouting,
	android::media::VolumeAutomation>
{
public:

	using OnRoutingChangedListener = AudioTrack_OnRoutingChangedListener;
	using OnPlaybackPositionUpdateListener = AudioTrack_OnPlaybackPositionUpdateListener;
	using MetricsConstants = AudioTrack_MetricsConstants;
	using Builder = AudioTrack_Builder;

	static jint ERROR_();
	static jint ERROR_BAD_VALUE_();
	static jint ERROR_DEAD_OBJECT_();
	static jint ERROR_INVALID_OPERATION_();
	static jint MODE_STATIC_();
	static jint MODE_STREAM_();
	static jint PERFORMANCE_MODE_LOW_LATENCY_();
	static jint PERFORMANCE_MODE_NONE_();
	static jint PERFORMANCE_MODE_POWER_SAVING_();
	static jint PLAYSTATE_PAUSED_();
	static jint PLAYSTATE_PLAYING_();
	static jint PLAYSTATE_STOPPED_();
	static jint STATE_INITIALIZED_();
	static jint STATE_NO_STATIC_DATA_();
	static jint STATE_UNINITIALIZED_();
	static jint SUCCESS_();
	static jint WRITE_BLOCKING_();
	static jint WRITE_NON_BLOCKING_();

	static ref<AudioTrack> new_object(jint streamType, jint sampleRateInHz, jint channelConfig, jint audioFormat, jint bufferSizeInBytes, jint mode);
	static ref<AudioTrack> new_object(jint streamType, jint sampleRateInHz, jint channelConfig, jint audioFormat, jint bufferSizeInBytes, jint mode, jint sessionId);
	static ref<AudioTrack> new_object(ref<android::media::AudioAttributes> attributes, ref<android::media::AudioFormat> format, jint bufferSizeInBytes, jint mode, jint sessionId);
	void release();
	static jfloat getMinVolume();
	static jfloat getMaxVolume();
	jint getSampleRate();
	jint getPlaybackRate();
	ref<android::media::PlaybackParams> getPlaybackParams();
	jint getAudioFormat();
	jint getStreamType();
	jint getChannelConfiguration();
	ref<android::media::AudioFormat> getFormat();
	jint getChannelCount();
	jint getState();
	jint getPlayState();
	jint getBufferSizeInFrames();
	jint setBufferSizeInFrames(jint bufferSizeInFrames);
	jint getBufferCapacityInFrames();
	jint getNotificationMarkerPosition();
	jint getPositionNotificationPeriod();
	jint getPlaybackHeadPosition();
	jint getUnderrunCount();
	jint getPerformanceMode();
	static jint getNativeOutputSampleRate(jint streamType);
	static jint getMinBufferSize(jint sampleRateInHz, jint channelConfig, jint audioFormat);
	jint getAudioSessionId();
	jboolean getTimestamp(ref<android::media::AudioTimestamp> timestamp);
	ref<android::os::PersistableBundle> getMetrics();
	void setPlaybackPositionUpdateListener(ref<android::media::AudioTrack_OnPlaybackPositionUpdateListener> listener);
	void setPlaybackPositionUpdateListener(ref<android::media::AudioTrack_OnPlaybackPositionUpdateListener> listener, ref<android::os::Handler> handler);
	jint setStereoVolume(jfloat leftGain, jfloat rightGain);
	jint setVolume(jfloat gain);
	ref<android::media::VolumeShaper> createVolumeShaper(ref<android::media::VolumeShaper_Configuration> configuration);
	jint setPlaybackRate(jint sampleRateInHz);
	void setPlaybackParams(ref<android::media::PlaybackParams> params);
	jint setNotificationMarkerPosition(jint markerInFrames);
	jint setPositionNotificationPeriod(jint periodInFrames);
	jint setPlaybackHeadPosition(jint positionInFrames);
	jint setLoopPoints(jint startInFrames, jint endInFrames, jint loopCount);
	jint setPresentation(ref<android::media::AudioPresentation> presentation);
	void play();
	void stop();
	void pause();
	void flush();
	jint write(ref<link::java::array<jbyte>> audioData, jint offsetInBytes, jint sizeInBytes);
	jint write(ref<link::java::array<jbyte>> audioData, jint offsetInBytes, jint sizeInBytes, jint writeMode);
	jint write(ref<link::java::array<jshort>> audioData, jint offsetInShorts, jint sizeInShorts);
	jint write(ref<link::java::array<jshort>> audioData, jint offsetInShorts, jint sizeInShorts, jint writeMode);
	jint write(ref<link::java::array<jfloat>> audioData, jint offsetInFloats, jint sizeInFloats, jint writeMode);
	jint write(ref<java::nio::ByteBuffer> audioData, jint sizeInBytes, jint writeMode);
	jint write(ref<java::nio::ByteBuffer> audioData, jint sizeInBytes, jint writeMode, jlong timestamp);
	jint reloadStaticData();
	jint attachAuxEffect(jint effectId);
	jint setAuxEffectSendLevel(jfloat level);
	jboolean setPreferredDevice(ref<android::media::AudioDeviceInfo> deviceInfo);
	ref<android::media::AudioDeviceInfo> getPreferredDevice();
	ref<android::media::AudioDeviceInfo> getRoutedDevice();
	void addOnRoutingChangedListener(ref<android::media::AudioRouting_OnRoutingChangedListener> listener, ref<android::os::Handler> handler);
	void removeOnRoutingChangedListener(ref<android::media::AudioRouting_OnRoutingChangedListener> listener);
	void addOnRoutingChangedListener(ref<android::media::AudioTrack_OnRoutingChangedListener> listener, ref<android::os::Handler> handler);
	void removeOnRoutingChangedListener(ref<android::media::AudioTrack_OnRoutingChangedListener> listener);

protected:

	AudioTrack(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/android/media/AudioAttributes.h>
#include <scapix/java_api/android/media/AudioDeviceInfo.h>
#include <scapix/java_api/android/media/AudioFormat.h>
#include <scapix/java_api/android/media/AudioPresentation.h>
#include <scapix/java_api/android/media/AudioRouting_OnRoutingChangedListener.h>
#include <scapix/java_api/android/media/AudioTimestamp.h>
#include <scapix/java_api/android/media/AudioTrack_OnPlaybackPositionUpdateListener.h>
#include <scapix/java_api/android/media/AudioTrack_OnRoutingChangedListener.h>
#include <scapix/java_api/android/media/PlaybackParams.h>
#include <scapix/java_api/android/media/VolumeShaper.h>
#include <scapix/java_api/android/media/VolumeShaper_Configuration.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>

namespace scapix::java_api {
namespace android::media {

inline jint AudioTrack::ERROR_() { return get_static_field<SCAPIX_META_STRING("ERROR"), jint>(); }
inline jint AudioTrack::ERROR_BAD_VALUE_() { return get_static_field<SCAPIX_META_STRING("ERROR_BAD_VALUE"), jint>(); }
inline jint AudioTrack::ERROR_DEAD_OBJECT_() { return get_static_field<SCAPIX_META_STRING("ERROR_DEAD_OBJECT"), jint>(); }
inline jint AudioTrack::ERROR_INVALID_OPERATION_() { return get_static_field<SCAPIX_META_STRING("ERROR_INVALID_OPERATION"), jint>(); }
inline jint AudioTrack::MODE_STATIC_() { return get_static_field<SCAPIX_META_STRING("MODE_STATIC"), jint>(); }
inline jint AudioTrack::MODE_STREAM_() { return get_static_field<SCAPIX_META_STRING("MODE_STREAM"), jint>(); }
inline jint AudioTrack::PERFORMANCE_MODE_LOW_LATENCY_() { return get_static_field<SCAPIX_META_STRING("PERFORMANCE_MODE_LOW_LATENCY"), jint>(); }
inline jint AudioTrack::PERFORMANCE_MODE_NONE_() { return get_static_field<SCAPIX_META_STRING("PERFORMANCE_MODE_NONE"), jint>(); }
inline jint AudioTrack::PERFORMANCE_MODE_POWER_SAVING_() { return get_static_field<SCAPIX_META_STRING("PERFORMANCE_MODE_POWER_SAVING"), jint>(); }
inline jint AudioTrack::PLAYSTATE_PAUSED_() { return get_static_field<SCAPIX_META_STRING("PLAYSTATE_PAUSED"), jint>(); }
inline jint AudioTrack::PLAYSTATE_PLAYING_() { return get_static_field<SCAPIX_META_STRING("PLAYSTATE_PLAYING"), jint>(); }
inline jint AudioTrack::PLAYSTATE_STOPPED_() { return get_static_field<SCAPIX_META_STRING("PLAYSTATE_STOPPED"), jint>(); }
inline jint AudioTrack::STATE_INITIALIZED_() { return get_static_field<SCAPIX_META_STRING("STATE_INITIALIZED"), jint>(); }
inline jint AudioTrack::STATE_NO_STATIC_DATA_() { return get_static_field<SCAPIX_META_STRING("STATE_NO_STATIC_DATA"), jint>(); }
inline jint AudioTrack::STATE_UNINITIALIZED_() { return get_static_field<SCAPIX_META_STRING("STATE_UNINITIALIZED"), jint>(); }
inline jint AudioTrack::SUCCESS_() { return get_static_field<SCAPIX_META_STRING("SUCCESS"), jint>(); }
inline jint AudioTrack::WRITE_BLOCKING_() { return get_static_field<SCAPIX_META_STRING("WRITE_BLOCKING"), jint>(); }
inline jint AudioTrack::WRITE_NON_BLOCKING_() { return get_static_field<SCAPIX_META_STRING("WRITE_NON_BLOCKING"), jint>(); }
inline ref<AudioTrack> AudioTrack::new_object(jint streamType, jint sampleRateInHz, jint channelConfig, jint audioFormat, jint bufferSizeInBytes, jint mode) { return base_::new_object(streamType, sampleRateInHz, channelConfig, audioFormat, bufferSizeInBytes, mode); }
inline ref<AudioTrack> AudioTrack::new_object(jint streamType, jint sampleRateInHz, jint channelConfig, jint audioFormat, jint bufferSizeInBytes, jint mode, jint sessionId) { return base_::new_object(streamType, sampleRateInHz, channelConfig, audioFormat, bufferSizeInBytes, mode, sessionId); }
inline ref<AudioTrack> AudioTrack::new_object(ref<android::media::AudioAttributes> attributes, ref<android::media::AudioFormat> format, jint bufferSizeInBytes, jint mode, jint sessionId) { return base_::new_object(attributes, format, bufferSizeInBytes, mode, sessionId); }
inline void AudioTrack::release() { return call_method<SCAPIX_META_STRING("release"), void>(); }
inline jfloat AudioTrack::getMinVolume() { return call_static_method<SCAPIX_META_STRING("getMinVolume"), jfloat>(); }
inline jfloat AudioTrack::getMaxVolume() { return call_static_method<SCAPIX_META_STRING("getMaxVolume"), jfloat>(); }
inline jint AudioTrack::getSampleRate() { return call_method<SCAPIX_META_STRING("getSampleRate"), jint>(); }
inline jint AudioTrack::getPlaybackRate() { return call_method<SCAPIX_META_STRING("getPlaybackRate"), jint>(); }
inline ref<android::media::PlaybackParams> AudioTrack::getPlaybackParams() { return call_method<SCAPIX_META_STRING("getPlaybackParams"), ref<android::media::PlaybackParams>>(); }
inline jint AudioTrack::getAudioFormat() { return call_method<SCAPIX_META_STRING("getAudioFormat"), jint>(); }
inline jint AudioTrack::getStreamType() { return call_method<SCAPIX_META_STRING("getStreamType"), jint>(); }
inline jint AudioTrack::getChannelConfiguration() { return call_method<SCAPIX_META_STRING("getChannelConfiguration"), jint>(); }
inline ref<android::media::AudioFormat> AudioTrack::getFormat() { return call_method<SCAPIX_META_STRING("getFormat"), ref<android::media::AudioFormat>>(); }
inline jint AudioTrack::getChannelCount() { return call_method<SCAPIX_META_STRING("getChannelCount"), jint>(); }
inline jint AudioTrack::getState() { return call_method<SCAPIX_META_STRING("getState"), jint>(); }
inline jint AudioTrack::getPlayState() { return call_method<SCAPIX_META_STRING("getPlayState"), jint>(); }
inline jint AudioTrack::getBufferSizeInFrames() { return call_method<SCAPIX_META_STRING("getBufferSizeInFrames"), jint>(); }
inline jint AudioTrack::setBufferSizeInFrames(jint bufferSizeInFrames) { return call_method<SCAPIX_META_STRING("setBufferSizeInFrames"), jint>(bufferSizeInFrames); }
inline jint AudioTrack::getBufferCapacityInFrames() { return call_method<SCAPIX_META_STRING("getBufferCapacityInFrames"), jint>(); }
inline jint AudioTrack::getNotificationMarkerPosition() { return call_method<SCAPIX_META_STRING("getNotificationMarkerPosition"), jint>(); }
inline jint AudioTrack::getPositionNotificationPeriod() { return call_method<SCAPIX_META_STRING("getPositionNotificationPeriod"), jint>(); }
inline jint AudioTrack::getPlaybackHeadPosition() { return call_method<SCAPIX_META_STRING("getPlaybackHeadPosition"), jint>(); }
inline jint AudioTrack::getUnderrunCount() { return call_method<SCAPIX_META_STRING("getUnderrunCount"), jint>(); }
inline jint AudioTrack::getPerformanceMode() { return call_method<SCAPIX_META_STRING("getPerformanceMode"), jint>(); }
inline jint AudioTrack::getNativeOutputSampleRate(jint streamType) { return call_static_method<SCAPIX_META_STRING("getNativeOutputSampleRate"), jint>(streamType); }
inline jint AudioTrack::getMinBufferSize(jint sampleRateInHz, jint channelConfig, jint audioFormat) { return call_static_method<SCAPIX_META_STRING("getMinBufferSize"), jint>(sampleRateInHz, channelConfig, audioFormat); }
inline jint AudioTrack::getAudioSessionId() { return call_method<SCAPIX_META_STRING("getAudioSessionId"), jint>(); }
inline jboolean AudioTrack::getTimestamp(ref<android::media::AudioTimestamp> timestamp) { return call_method<SCAPIX_META_STRING("getTimestamp"), jboolean>(timestamp); }
inline ref<android::os::PersistableBundle> AudioTrack::getMetrics() { return call_method<SCAPIX_META_STRING("getMetrics"), ref<android::os::PersistableBundle>>(); }
inline void AudioTrack::setPlaybackPositionUpdateListener(ref<android::media::AudioTrack_OnPlaybackPositionUpdateListener> listener) { return call_method<SCAPIX_META_STRING("setPlaybackPositionUpdateListener"), void>(listener); }
inline void AudioTrack::setPlaybackPositionUpdateListener(ref<android::media::AudioTrack_OnPlaybackPositionUpdateListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("setPlaybackPositionUpdateListener"), void>(listener, handler); }
inline jint AudioTrack::setStereoVolume(jfloat leftGain, jfloat rightGain) { return call_method<SCAPIX_META_STRING("setStereoVolume"), jint>(leftGain, rightGain); }
inline jint AudioTrack::setVolume(jfloat gain) { return call_method<SCAPIX_META_STRING("setVolume"), jint>(gain); }
inline ref<android::media::VolumeShaper> AudioTrack::createVolumeShaper(ref<android::media::VolumeShaper_Configuration> configuration) { return call_method<SCAPIX_META_STRING("createVolumeShaper"), ref<android::media::VolumeShaper>>(configuration); }
inline jint AudioTrack::setPlaybackRate(jint sampleRateInHz) { return call_method<SCAPIX_META_STRING("setPlaybackRate"), jint>(sampleRateInHz); }
inline void AudioTrack::setPlaybackParams(ref<android::media::PlaybackParams> params) { return call_method<SCAPIX_META_STRING("setPlaybackParams"), void>(params); }
inline jint AudioTrack::setNotificationMarkerPosition(jint markerInFrames) { return call_method<SCAPIX_META_STRING("setNotificationMarkerPosition"), jint>(markerInFrames); }
inline jint AudioTrack::setPositionNotificationPeriod(jint periodInFrames) { return call_method<SCAPIX_META_STRING("setPositionNotificationPeriod"), jint>(periodInFrames); }
inline jint AudioTrack::setPlaybackHeadPosition(jint positionInFrames) { return call_method<SCAPIX_META_STRING("setPlaybackHeadPosition"), jint>(positionInFrames); }
inline jint AudioTrack::setLoopPoints(jint startInFrames, jint endInFrames, jint loopCount) { return call_method<SCAPIX_META_STRING("setLoopPoints"), jint>(startInFrames, endInFrames, loopCount); }
inline jint AudioTrack::setPresentation(ref<android::media::AudioPresentation> presentation) { return call_method<SCAPIX_META_STRING("setPresentation"), jint>(presentation); }
inline void AudioTrack::play() { return call_method<SCAPIX_META_STRING("play"), void>(); }
inline void AudioTrack::stop() { return call_method<SCAPIX_META_STRING("stop"), void>(); }
inline void AudioTrack::pause() { return call_method<SCAPIX_META_STRING("pause"), void>(); }
inline void AudioTrack::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }
inline jint AudioTrack::write(ref<link::java::array<jbyte>> audioData, jint offsetInBytes, jint sizeInBytes) { return call_method<SCAPIX_META_STRING("write"), jint>(audioData, offsetInBytes, sizeInBytes); }
inline jint AudioTrack::write(ref<link::java::array<jbyte>> audioData, jint offsetInBytes, jint sizeInBytes, jint writeMode) { return call_method<SCAPIX_META_STRING("write"), jint>(audioData, offsetInBytes, sizeInBytes, writeMode); }
inline jint AudioTrack::write(ref<link::java::array<jshort>> audioData, jint offsetInShorts, jint sizeInShorts) { return call_method<SCAPIX_META_STRING("write"), jint>(audioData, offsetInShorts, sizeInShorts); }
inline jint AudioTrack::write(ref<link::java::array<jshort>> audioData, jint offsetInShorts, jint sizeInShorts, jint writeMode) { return call_method<SCAPIX_META_STRING("write"), jint>(audioData, offsetInShorts, sizeInShorts, writeMode); }
inline jint AudioTrack::write(ref<link::java::array<jfloat>> audioData, jint offsetInFloats, jint sizeInFloats, jint writeMode) { return call_method<SCAPIX_META_STRING("write"), jint>(audioData, offsetInFloats, sizeInFloats, writeMode); }
inline jint AudioTrack::write(ref<java::nio::ByteBuffer> audioData, jint sizeInBytes, jint writeMode) { return call_method<SCAPIX_META_STRING("write"), jint>(audioData, sizeInBytes, writeMode); }
inline jint AudioTrack::write(ref<java::nio::ByteBuffer> audioData, jint sizeInBytes, jint writeMode, jlong timestamp) { return call_method<SCAPIX_META_STRING("write"), jint>(audioData, sizeInBytes, writeMode, timestamp); }
inline jint AudioTrack::reloadStaticData() { return call_method<SCAPIX_META_STRING("reloadStaticData"), jint>(); }
inline jint AudioTrack::attachAuxEffect(jint effectId) { return call_method<SCAPIX_META_STRING("attachAuxEffect"), jint>(effectId); }
inline jint AudioTrack::setAuxEffectSendLevel(jfloat level) { return call_method<SCAPIX_META_STRING("setAuxEffectSendLevel"), jint>(level); }
inline jboolean AudioTrack::setPreferredDevice(ref<android::media::AudioDeviceInfo> deviceInfo) { return call_method<SCAPIX_META_STRING("setPreferredDevice"), jboolean>(deviceInfo); }
inline ref<android::media::AudioDeviceInfo> AudioTrack::getPreferredDevice() { return call_method<SCAPIX_META_STRING("getPreferredDevice"), ref<android::media::AudioDeviceInfo>>(); }
inline ref<android::media::AudioDeviceInfo> AudioTrack::getRoutedDevice() { return call_method<SCAPIX_META_STRING("getRoutedDevice"), ref<android::media::AudioDeviceInfo>>(); }
inline void AudioTrack::addOnRoutingChangedListener(ref<android::media::AudioRouting_OnRoutingChangedListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("addOnRoutingChangedListener"), void>(listener, handler); }
inline void AudioTrack::removeOnRoutingChangedListener(ref<android::media::AudioRouting_OnRoutingChangedListener> listener) { return call_method<SCAPIX_META_STRING("removeOnRoutingChangedListener"), void>(listener); }
inline void AudioTrack::addOnRoutingChangedListener(ref<android::media::AudioTrack_OnRoutingChangedListener> listener, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("addOnRoutingChangedListener"), void>(listener, handler); }
inline void AudioTrack::removeOnRoutingChangedListener(ref<android::media::AudioTrack_OnRoutingChangedListener> listener) { return call_method<SCAPIX_META_STRING("removeOnRoutingChangedListener"), void>(listener); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_AUDIOTRACK_H
