// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_MEDIA_AUDIOMANAGER_H
#define SCAPIX_ANDROID_MEDIA_AUDIOMANAGER_H

namespace scapix::java_api {

namespace android::app { class PendingIntent; }
namespace android::content { class ComponentName; }
namespace android::media { class AudioDeviceCallback; }
namespace android::media { class AudioDeviceInfo; }
namespace android::media { class AudioFocusRequest; }
namespace android::media { class AudioManager_AudioPlaybackCallback; }
namespace android::media { class AudioManager_AudioRecordingCallback; }
namespace android::media { class AudioManager_OnAudioFocusChangeListener; }
namespace android::media { class RemoteControlClient; }
namespace android::media { class RemoteController; }
namespace android::os { class Handler; }
namespace android::view { class KeyEvent; }
namespace java::lang { class String; }
namespace java::util { class List; }

namespace android::media {

class AudioManager : public object_base<SCAPIX_META_STRING("android/media/AudioManager"),
	java::lang::Object>
{
public:

	using OnAudioFocusChangeListener = AudioManager_OnAudioFocusChangeListener;
	using AudioRecordingCallback = AudioManager_AudioRecordingCallback;
	using AudioPlaybackCallback = AudioManager_AudioPlaybackCallback;

	static ref<java::lang::String> ACTION_AUDIO_BECOMING_NOISY_();
	static ref<java::lang::String> ACTION_HDMI_AUDIO_PLUG_();
	static ref<java::lang::String> ACTION_HEADSET_PLUG_();
	static ref<java::lang::String> ACTION_MICROPHONE_MUTE_CHANGED_();
	static ref<java::lang::String> ACTION_SCO_AUDIO_STATE_CHANGED_();
	static ref<java::lang::String> ACTION_SCO_AUDIO_STATE_UPDATED_();
	static jint ADJUST_LOWER_();
	static jint ADJUST_MUTE_();
	static jint ADJUST_RAISE_();
	static jint ADJUST_SAME_();
	static jint ADJUST_TOGGLE_MUTE_();
	static jint ADJUST_UNMUTE_();
	static jint AUDIOFOCUS_GAIN_();
	static jint AUDIOFOCUS_GAIN_TRANSIENT_();
	static jint AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE_();
	static jint AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK_();
	static jint AUDIOFOCUS_LOSS_();
	static jint AUDIOFOCUS_LOSS_TRANSIENT_();
	static jint AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK_();
	static jint AUDIOFOCUS_NONE_();
	static jint AUDIOFOCUS_REQUEST_DELAYED_();
	static jint AUDIOFOCUS_REQUEST_FAILED_();
	static jint AUDIOFOCUS_REQUEST_GRANTED_();
	static jint AUDIO_SESSION_ID_GENERATE_();
	static jint ERROR_();
	static jint ERROR_DEAD_OBJECT_();
	static ref<java::lang::String> EXTRA_AUDIO_PLUG_STATE_();
	static ref<java::lang::String> EXTRA_ENCODINGS_();
	static ref<java::lang::String> EXTRA_MAX_CHANNEL_COUNT_();
	static ref<java::lang::String> EXTRA_RINGER_MODE_();
	static ref<java::lang::String> EXTRA_SCO_AUDIO_PREVIOUS_STATE_();
	static ref<java::lang::String> EXTRA_SCO_AUDIO_STATE_();
	static ref<java::lang::String> EXTRA_VIBRATE_SETTING_();
	static ref<java::lang::String> EXTRA_VIBRATE_TYPE_();
	static jint FLAG_ALLOW_RINGER_MODES_();
	static jint FLAG_PLAY_SOUND_();
	static jint FLAG_REMOVE_SOUND_AND_VIBRATE_();
	static jint FLAG_SHOW_UI_();
	static jint FLAG_VIBRATE_();
	static jint FX_FOCUS_NAVIGATION_DOWN_();
	static jint FX_FOCUS_NAVIGATION_LEFT_();
	static jint FX_FOCUS_NAVIGATION_RIGHT_();
	static jint FX_FOCUS_NAVIGATION_UP_();
	static jint FX_KEYPRESS_DELETE_();
	static jint FX_KEYPRESS_INVALID_();
	static jint FX_KEYPRESS_RETURN_();
	static jint FX_KEYPRESS_SPACEBAR_();
	static jint FX_KEYPRESS_STANDARD_();
	static jint FX_KEY_CLICK_();
	static jint GET_DEVICES_ALL_();
	static jint GET_DEVICES_INPUTS_();
	static jint GET_DEVICES_OUTPUTS_();
	static jint MODE_CURRENT_();
	static jint MODE_INVALID_();
	static jint MODE_IN_CALL_();
	static jint MODE_IN_COMMUNICATION_();
	static jint MODE_NORMAL_();
	static jint MODE_RINGTONE_();
	static jint NUM_STREAMS_();
	static ref<java::lang::String> PROPERTY_OUTPUT_FRAMES_PER_BUFFER_();
	static ref<java::lang::String> PROPERTY_OUTPUT_SAMPLE_RATE_();
	static ref<java::lang::String> PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED_();
	static ref<java::lang::String> PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND_();
	static ref<java::lang::String> PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND_();
	static ref<java::lang::String> RINGER_MODE_CHANGED_ACTION_();
	static jint RINGER_MODE_NORMAL_();
	static jint RINGER_MODE_SILENT_();
	static jint RINGER_MODE_VIBRATE_();
	static jint ROUTE_ALL_();
	static jint ROUTE_BLUETOOTH_();
	static jint ROUTE_BLUETOOTH_A2DP_();
	static jint ROUTE_BLUETOOTH_SCO_();
	static jint ROUTE_EARPIECE_();
	static jint ROUTE_HEADSET_();
	static jint ROUTE_SPEAKER_();
	static jint SCO_AUDIO_STATE_CONNECTED_();
	static jint SCO_AUDIO_STATE_CONNECTING_();
	static jint SCO_AUDIO_STATE_DISCONNECTED_();
	static jint SCO_AUDIO_STATE_ERROR_();
	static jint STREAM_ACCESSIBILITY_();
	static jint STREAM_ALARM_();
	static jint STREAM_DTMF_();
	static jint STREAM_MUSIC_();
	static jint STREAM_NOTIFICATION_();
	static jint STREAM_RING_();
	static jint STREAM_SYSTEM_();
	static jint STREAM_VOICE_CALL_();
	static jint USE_DEFAULT_STREAM_TYPE_();
	static ref<java::lang::String> VIBRATE_SETTING_CHANGED_ACTION_();
	static jint VIBRATE_SETTING_OFF_();
	static jint VIBRATE_SETTING_ON_();
	static jint VIBRATE_SETTING_ONLY_SILENT_();
	static jint VIBRATE_TYPE_NOTIFICATION_();
	static jint VIBRATE_TYPE_RINGER_();

	void dispatchMediaKeyEvent(ref<android::view::KeyEvent> keyEvent);
	jboolean isVolumeFixed();
	void adjustStreamVolume(jint streamType, jint direction, jint flags);
	void adjustVolume(jint direction, jint flags);
	void adjustSuggestedStreamVolume(jint direction, jint suggestedStreamType, jint flags);
	jint getRingerMode();
	jint getStreamMaxVolume(jint streamType);
	jint getStreamMinVolume(jint streamType);
	jint getStreamVolume(jint streamType);
	jfloat getStreamVolumeDb(jint streamType, jint index, jint deviceType);
	void setRingerMode(jint ringerMode);
	void setStreamVolume(jint streamType, jint index, jint flags);
	void setStreamSolo(jint streamType, jboolean state);
	void setStreamMute(jint streamType, jboolean state);
	jboolean isStreamMute(jint streamType);
	jboolean shouldVibrate(jint vibrateType);
	jint getVibrateSetting(jint vibrateType);
	void setVibrateSetting(jint vibrateType, jint vibrateSetting);
	void setSpeakerphoneOn(jboolean on);
	jboolean isSpeakerphoneOn();
	jboolean isBluetoothScoAvailableOffCall();
	void startBluetoothSco();
	void stopBluetoothSco();
	void setBluetoothScoOn(jboolean on);
	jboolean isBluetoothScoOn();
	void setBluetoothA2dpOn(jboolean on);
	jboolean isBluetoothA2dpOn();
	void setWiredHeadsetOn(jboolean on);
	jboolean isWiredHeadsetOn();
	void setMicrophoneMute(jboolean on);
	jboolean isMicrophoneMute();
	void setMode(jint mode);
	jint getMode();
	void setRouting(jint mode, jint routes, jint mask);
	jint getRouting(jint mode);
	jboolean isMusicActive();
	jint generateAudioSessionId();
	void setParameters(ref<java::lang::String> keyValuePairs);
	ref<java::lang::String> getParameters(ref<java::lang::String> keys);
	void playSoundEffect(jint effectType);
	void playSoundEffect(jint effectType, jfloat volume);
	void loadSoundEffects();
	void unloadSoundEffects();
	jint requestAudioFocus(ref<android::media::AudioManager_OnAudioFocusChangeListener> l, jint streamType, jint durationHint);
	jint requestAudioFocus(ref<android::media::AudioFocusRequest> focusRequest);
	jint abandonAudioFocusRequest(ref<android::media::AudioFocusRequest> focusRequest);
	jint abandonAudioFocus(ref<android::media::AudioManager_OnAudioFocusChangeListener> l);
	void registerMediaButtonEventReceiver(ref<android::content::ComponentName> eventReceiver);
	void registerMediaButtonEventReceiver(ref<android::app::PendingIntent> eventReceiver);
	void unregisterMediaButtonEventReceiver(ref<android::content::ComponentName> eventReceiver);
	void unregisterMediaButtonEventReceiver(ref<android::app::PendingIntent> eventReceiver);
	void registerRemoteControlClient(ref<android::media::RemoteControlClient> rcClient);
	void unregisterRemoteControlClient(ref<android::media::RemoteControlClient> rcClient);
	jboolean registerRemoteController(ref<android::media::RemoteController> rctlr);
	void unregisterRemoteController(ref<android::media::RemoteController> rctlr);
	void registerAudioPlaybackCallback(ref<android::media::AudioManager_AudioPlaybackCallback> cb, ref<android::os::Handler> handler);
	void unregisterAudioPlaybackCallback(ref<android::media::AudioManager_AudioPlaybackCallback> cb);
	ref<java::util::List> getActivePlaybackConfigurations();
	void registerAudioRecordingCallback(ref<android::media::AudioManager_AudioRecordingCallback> cb, ref<android::os::Handler> handler);
	void unregisterAudioRecordingCallback(ref<android::media::AudioManager_AudioRecordingCallback> cb);
	ref<java::util::List> getActiveRecordingConfigurations();
	ref<java::lang::String> getProperty(ref<java::lang::String> key);
	ref<link::java::array<android::media::AudioDeviceInfo>> getDevices(jint flags);
	void registerAudioDeviceCallback(ref<android::media::AudioDeviceCallback> callback, ref<android::os::Handler> handler);
	void unregisterAudioDeviceCallback(ref<android::media::AudioDeviceCallback> callback);
	ref<java::util::List> getMicrophones();

protected:

	AudioManager(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/media/AudioDeviceCallback.h>
#include <scapix/java_api/android/media/AudioDeviceInfo.h>
#include <scapix/java_api/android/media/AudioFocusRequest.h>
#include <scapix/java_api/android/media/AudioManager_AudioPlaybackCallback.h>
#include <scapix/java_api/android/media/AudioManager_AudioRecordingCallback.h>
#include <scapix/java_api/android/media/AudioManager_OnAudioFocusChangeListener.h>
#include <scapix/java_api/android/media/RemoteControlClient.h>
#include <scapix/java_api/android/media/RemoteController.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>

namespace scapix::java_api {
namespace android::media {

inline ref<java::lang::String> AudioManager::ACTION_AUDIO_BECOMING_NOISY_() { return get_static_field<SCAPIX_META_STRING("ACTION_AUDIO_BECOMING_NOISY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::ACTION_HDMI_AUDIO_PLUG_() { return get_static_field<SCAPIX_META_STRING("ACTION_HDMI_AUDIO_PLUG"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::ACTION_HEADSET_PLUG_() { return get_static_field<SCAPIX_META_STRING("ACTION_HEADSET_PLUG"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::ACTION_MICROPHONE_MUTE_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_MICROPHONE_MUTE_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::ACTION_SCO_AUDIO_STATE_CHANGED_() { return get_static_field<SCAPIX_META_STRING("ACTION_SCO_AUDIO_STATE_CHANGED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::ACTION_SCO_AUDIO_STATE_UPDATED_() { return get_static_field<SCAPIX_META_STRING("ACTION_SCO_AUDIO_STATE_UPDATED"), ref<java::lang::String>>(); }
inline jint AudioManager::ADJUST_LOWER_() { return get_static_field<SCAPIX_META_STRING("ADJUST_LOWER"), jint>(); }
inline jint AudioManager::ADJUST_MUTE_() { return get_static_field<SCAPIX_META_STRING("ADJUST_MUTE"), jint>(); }
inline jint AudioManager::ADJUST_RAISE_() { return get_static_field<SCAPIX_META_STRING("ADJUST_RAISE"), jint>(); }
inline jint AudioManager::ADJUST_SAME_() { return get_static_field<SCAPIX_META_STRING("ADJUST_SAME"), jint>(); }
inline jint AudioManager::ADJUST_TOGGLE_MUTE_() { return get_static_field<SCAPIX_META_STRING("ADJUST_TOGGLE_MUTE"), jint>(); }
inline jint AudioManager::ADJUST_UNMUTE_() { return get_static_field<SCAPIX_META_STRING("ADJUST_UNMUTE"), jint>(); }
inline jint AudioManager::AUDIOFOCUS_GAIN_() { return get_static_field<SCAPIX_META_STRING("AUDIOFOCUS_GAIN"), jint>(); }
inline jint AudioManager::AUDIOFOCUS_GAIN_TRANSIENT_() { return get_static_field<SCAPIX_META_STRING("AUDIOFOCUS_GAIN_TRANSIENT"), jint>(); }
inline jint AudioManager::AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE_() { return get_static_field<SCAPIX_META_STRING("AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE"), jint>(); }
inline jint AudioManager::AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK_() { return get_static_field<SCAPIX_META_STRING("AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK"), jint>(); }
inline jint AudioManager::AUDIOFOCUS_LOSS_() { return get_static_field<SCAPIX_META_STRING("AUDIOFOCUS_LOSS"), jint>(); }
inline jint AudioManager::AUDIOFOCUS_LOSS_TRANSIENT_() { return get_static_field<SCAPIX_META_STRING("AUDIOFOCUS_LOSS_TRANSIENT"), jint>(); }
inline jint AudioManager::AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK_() { return get_static_field<SCAPIX_META_STRING("AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK"), jint>(); }
inline jint AudioManager::AUDIOFOCUS_NONE_() { return get_static_field<SCAPIX_META_STRING("AUDIOFOCUS_NONE"), jint>(); }
inline jint AudioManager::AUDIOFOCUS_REQUEST_DELAYED_() { return get_static_field<SCAPIX_META_STRING("AUDIOFOCUS_REQUEST_DELAYED"), jint>(); }
inline jint AudioManager::AUDIOFOCUS_REQUEST_FAILED_() { return get_static_field<SCAPIX_META_STRING("AUDIOFOCUS_REQUEST_FAILED"), jint>(); }
inline jint AudioManager::AUDIOFOCUS_REQUEST_GRANTED_() { return get_static_field<SCAPIX_META_STRING("AUDIOFOCUS_REQUEST_GRANTED"), jint>(); }
inline jint AudioManager::AUDIO_SESSION_ID_GENERATE_() { return get_static_field<SCAPIX_META_STRING("AUDIO_SESSION_ID_GENERATE"), jint>(); }
inline jint AudioManager::ERROR_() { return get_static_field<SCAPIX_META_STRING("ERROR"), jint>(); }
inline jint AudioManager::ERROR_DEAD_OBJECT_() { return get_static_field<SCAPIX_META_STRING("ERROR_DEAD_OBJECT"), jint>(); }
inline ref<java::lang::String> AudioManager::EXTRA_AUDIO_PLUG_STATE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_AUDIO_PLUG_STATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::EXTRA_ENCODINGS_() { return get_static_field<SCAPIX_META_STRING("EXTRA_ENCODINGS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::EXTRA_MAX_CHANNEL_COUNT_() { return get_static_field<SCAPIX_META_STRING("EXTRA_MAX_CHANNEL_COUNT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::EXTRA_RINGER_MODE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_RINGER_MODE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::EXTRA_SCO_AUDIO_PREVIOUS_STATE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_SCO_AUDIO_PREVIOUS_STATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::EXTRA_SCO_AUDIO_STATE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_SCO_AUDIO_STATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::EXTRA_VIBRATE_SETTING_() { return get_static_field<SCAPIX_META_STRING("EXTRA_VIBRATE_SETTING"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::EXTRA_VIBRATE_TYPE_() { return get_static_field<SCAPIX_META_STRING("EXTRA_VIBRATE_TYPE"), ref<java::lang::String>>(); }
inline jint AudioManager::FLAG_ALLOW_RINGER_MODES_() { return get_static_field<SCAPIX_META_STRING("FLAG_ALLOW_RINGER_MODES"), jint>(); }
inline jint AudioManager::FLAG_PLAY_SOUND_() { return get_static_field<SCAPIX_META_STRING("FLAG_PLAY_SOUND"), jint>(); }
inline jint AudioManager::FLAG_REMOVE_SOUND_AND_VIBRATE_() { return get_static_field<SCAPIX_META_STRING("FLAG_REMOVE_SOUND_AND_VIBRATE"), jint>(); }
inline jint AudioManager::FLAG_SHOW_UI_() { return get_static_field<SCAPIX_META_STRING("FLAG_SHOW_UI"), jint>(); }
inline jint AudioManager::FLAG_VIBRATE_() { return get_static_field<SCAPIX_META_STRING("FLAG_VIBRATE"), jint>(); }
inline jint AudioManager::FX_FOCUS_NAVIGATION_DOWN_() { return get_static_field<SCAPIX_META_STRING("FX_FOCUS_NAVIGATION_DOWN"), jint>(); }
inline jint AudioManager::FX_FOCUS_NAVIGATION_LEFT_() { return get_static_field<SCAPIX_META_STRING("FX_FOCUS_NAVIGATION_LEFT"), jint>(); }
inline jint AudioManager::FX_FOCUS_NAVIGATION_RIGHT_() { return get_static_field<SCAPIX_META_STRING("FX_FOCUS_NAVIGATION_RIGHT"), jint>(); }
inline jint AudioManager::FX_FOCUS_NAVIGATION_UP_() { return get_static_field<SCAPIX_META_STRING("FX_FOCUS_NAVIGATION_UP"), jint>(); }
inline jint AudioManager::FX_KEYPRESS_DELETE_() { return get_static_field<SCAPIX_META_STRING("FX_KEYPRESS_DELETE"), jint>(); }
inline jint AudioManager::FX_KEYPRESS_INVALID_() { return get_static_field<SCAPIX_META_STRING("FX_KEYPRESS_INVALID"), jint>(); }
inline jint AudioManager::FX_KEYPRESS_RETURN_() { return get_static_field<SCAPIX_META_STRING("FX_KEYPRESS_RETURN"), jint>(); }
inline jint AudioManager::FX_KEYPRESS_SPACEBAR_() { return get_static_field<SCAPIX_META_STRING("FX_KEYPRESS_SPACEBAR"), jint>(); }
inline jint AudioManager::FX_KEYPRESS_STANDARD_() { return get_static_field<SCAPIX_META_STRING("FX_KEYPRESS_STANDARD"), jint>(); }
inline jint AudioManager::FX_KEY_CLICK_() { return get_static_field<SCAPIX_META_STRING("FX_KEY_CLICK"), jint>(); }
inline jint AudioManager::GET_DEVICES_ALL_() { return get_static_field<SCAPIX_META_STRING("GET_DEVICES_ALL"), jint>(); }
inline jint AudioManager::GET_DEVICES_INPUTS_() { return get_static_field<SCAPIX_META_STRING("GET_DEVICES_INPUTS"), jint>(); }
inline jint AudioManager::GET_DEVICES_OUTPUTS_() { return get_static_field<SCAPIX_META_STRING("GET_DEVICES_OUTPUTS"), jint>(); }
inline jint AudioManager::MODE_CURRENT_() { return get_static_field<SCAPIX_META_STRING("MODE_CURRENT"), jint>(); }
inline jint AudioManager::MODE_INVALID_() { return get_static_field<SCAPIX_META_STRING("MODE_INVALID"), jint>(); }
inline jint AudioManager::MODE_IN_CALL_() { return get_static_field<SCAPIX_META_STRING("MODE_IN_CALL"), jint>(); }
inline jint AudioManager::MODE_IN_COMMUNICATION_() { return get_static_field<SCAPIX_META_STRING("MODE_IN_COMMUNICATION"), jint>(); }
inline jint AudioManager::MODE_NORMAL_() { return get_static_field<SCAPIX_META_STRING("MODE_NORMAL"), jint>(); }
inline jint AudioManager::MODE_RINGTONE_() { return get_static_field<SCAPIX_META_STRING("MODE_RINGTONE"), jint>(); }
inline jint AudioManager::NUM_STREAMS_() { return get_static_field<SCAPIX_META_STRING("NUM_STREAMS"), jint>(); }
inline ref<java::lang::String> AudioManager::PROPERTY_OUTPUT_FRAMES_PER_BUFFER_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_OUTPUT_FRAMES_PER_BUFFER"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::PROPERTY_OUTPUT_SAMPLE_RATE_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_OUTPUT_SAMPLE_RATE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND_() { return get_static_field<SCAPIX_META_STRING("PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AudioManager::RINGER_MODE_CHANGED_ACTION_() { return get_static_field<SCAPIX_META_STRING("RINGER_MODE_CHANGED_ACTION"), ref<java::lang::String>>(); }
inline jint AudioManager::RINGER_MODE_NORMAL_() { return get_static_field<SCAPIX_META_STRING("RINGER_MODE_NORMAL"), jint>(); }
inline jint AudioManager::RINGER_MODE_SILENT_() { return get_static_field<SCAPIX_META_STRING("RINGER_MODE_SILENT"), jint>(); }
inline jint AudioManager::RINGER_MODE_VIBRATE_() { return get_static_field<SCAPIX_META_STRING("RINGER_MODE_VIBRATE"), jint>(); }
inline jint AudioManager::ROUTE_ALL_() { return get_static_field<SCAPIX_META_STRING("ROUTE_ALL"), jint>(); }
inline jint AudioManager::ROUTE_BLUETOOTH_() { return get_static_field<SCAPIX_META_STRING("ROUTE_BLUETOOTH"), jint>(); }
inline jint AudioManager::ROUTE_BLUETOOTH_A2DP_() { return get_static_field<SCAPIX_META_STRING("ROUTE_BLUETOOTH_A2DP"), jint>(); }
inline jint AudioManager::ROUTE_BLUETOOTH_SCO_() { return get_static_field<SCAPIX_META_STRING("ROUTE_BLUETOOTH_SCO"), jint>(); }
inline jint AudioManager::ROUTE_EARPIECE_() { return get_static_field<SCAPIX_META_STRING("ROUTE_EARPIECE"), jint>(); }
inline jint AudioManager::ROUTE_HEADSET_() { return get_static_field<SCAPIX_META_STRING("ROUTE_HEADSET"), jint>(); }
inline jint AudioManager::ROUTE_SPEAKER_() { return get_static_field<SCAPIX_META_STRING("ROUTE_SPEAKER"), jint>(); }
inline jint AudioManager::SCO_AUDIO_STATE_CONNECTED_() { return get_static_field<SCAPIX_META_STRING("SCO_AUDIO_STATE_CONNECTED"), jint>(); }
inline jint AudioManager::SCO_AUDIO_STATE_CONNECTING_() { return get_static_field<SCAPIX_META_STRING("SCO_AUDIO_STATE_CONNECTING"), jint>(); }
inline jint AudioManager::SCO_AUDIO_STATE_DISCONNECTED_() { return get_static_field<SCAPIX_META_STRING("SCO_AUDIO_STATE_DISCONNECTED"), jint>(); }
inline jint AudioManager::SCO_AUDIO_STATE_ERROR_() { return get_static_field<SCAPIX_META_STRING("SCO_AUDIO_STATE_ERROR"), jint>(); }
inline jint AudioManager::STREAM_ACCESSIBILITY_() { return get_static_field<SCAPIX_META_STRING("STREAM_ACCESSIBILITY"), jint>(); }
inline jint AudioManager::STREAM_ALARM_() { return get_static_field<SCAPIX_META_STRING("STREAM_ALARM"), jint>(); }
inline jint AudioManager::STREAM_DTMF_() { return get_static_field<SCAPIX_META_STRING("STREAM_DTMF"), jint>(); }
inline jint AudioManager::STREAM_MUSIC_() { return get_static_field<SCAPIX_META_STRING("STREAM_MUSIC"), jint>(); }
inline jint AudioManager::STREAM_NOTIFICATION_() { return get_static_field<SCAPIX_META_STRING("STREAM_NOTIFICATION"), jint>(); }
inline jint AudioManager::STREAM_RING_() { return get_static_field<SCAPIX_META_STRING("STREAM_RING"), jint>(); }
inline jint AudioManager::STREAM_SYSTEM_() { return get_static_field<SCAPIX_META_STRING("STREAM_SYSTEM"), jint>(); }
inline jint AudioManager::STREAM_VOICE_CALL_() { return get_static_field<SCAPIX_META_STRING("STREAM_VOICE_CALL"), jint>(); }
inline jint AudioManager::USE_DEFAULT_STREAM_TYPE_() { return get_static_field<SCAPIX_META_STRING("USE_DEFAULT_STREAM_TYPE"), jint>(); }
inline ref<java::lang::String> AudioManager::VIBRATE_SETTING_CHANGED_ACTION_() { return get_static_field<SCAPIX_META_STRING("VIBRATE_SETTING_CHANGED_ACTION"), ref<java::lang::String>>(); }
inline jint AudioManager::VIBRATE_SETTING_OFF_() { return get_static_field<SCAPIX_META_STRING("VIBRATE_SETTING_OFF"), jint>(); }
inline jint AudioManager::VIBRATE_SETTING_ON_() { return get_static_field<SCAPIX_META_STRING("VIBRATE_SETTING_ON"), jint>(); }
inline jint AudioManager::VIBRATE_SETTING_ONLY_SILENT_() { return get_static_field<SCAPIX_META_STRING("VIBRATE_SETTING_ONLY_SILENT"), jint>(); }
inline jint AudioManager::VIBRATE_TYPE_NOTIFICATION_() { return get_static_field<SCAPIX_META_STRING("VIBRATE_TYPE_NOTIFICATION"), jint>(); }
inline jint AudioManager::VIBRATE_TYPE_RINGER_() { return get_static_field<SCAPIX_META_STRING("VIBRATE_TYPE_RINGER"), jint>(); }
inline void AudioManager::dispatchMediaKeyEvent(ref<android::view::KeyEvent> keyEvent) { return call_method<SCAPIX_META_STRING("dispatchMediaKeyEvent"), void>(keyEvent); }
inline jboolean AudioManager::isVolumeFixed() { return call_method<SCAPIX_META_STRING("isVolumeFixed"), jboolean>(); }
inline void AudioManager::adjustStreamVolume(jint streamType, jint direction, jint flags) { return call_method<SCAPIX_META_STRING("adjustStreamVolume"), void>(streamType, direction, flags); }
inline void AudioManager::adjustVolume(jint direction, jint flags) { return call_method<SCAPIX_META_STRING("adjustVolume"), void>(direction, flags); }
inline void AudioManager::adjustSuggestedStreamVolume(jint direction, jint suggestedStreamType, jint flags) { return call_method<SCAPIX_META_STRING("adjustSuggestedStreamVolume"), void>(direction, suggestedStreamType, flags); }
inline jint AudioManager::getRingerMode() { return call_method<SCAPIX_META_STRING("getRingerMode"), jint>(); }
inline jint AudioManager::getStreamMaxVolume(jint streamType) { return call_method<SCAPIX_META_STRING("getStreamMaxVolume"), jint>(streamType); }
inline jint AudioManager::getStreamMinVolume(jint streamType) { return call_method<SCAPIX_META_STRING("getStreamMinVolume"), jint>(streamType); }
inline jint AudioManager::getStreamVolume(jint streamType) { return call_method<SCAPIX_META_STRING("getStreamVolume"), jint>(streamType); }
inline jfloat AudioManager::getStreamVolumeDb(jint streamType, jint index, jint deviceType) { return call_method<SCAPIX_META_STRING("getStreamVolumeDb"), jfloat>(streamType, index, deviceType); }
inline void AudioManager::setRingerMode(jint ringerMode) { return call_method<SCAPIX_META_STRING("setRingerMode"), void>(ringerMode); }
inline void AudioManager::setStreamVolume(jint streamType, jint index, jint flags) { return call_method<SCAPIX_META_STRING("setStreamVolume"), void>(streamType, index, flags); }
inline void AudioManager::setStreamSolo(jint streamType, jboolean state) { return call_method<SCAPIX_META_STRING("setStreamSolo"), void>(streamType, state); }
inline void AudioManager::setStreamMute(jint streamType, jboolean state) { return call_method<SCAPIX_META_STRING("setStreamMute"), void>(streamType, state); }
inline jboolean AudioManager::isStreamMute(jint streamType) { return call_method<SCAPIX_META_STRING("isStreamMute"), jboolean>(streamType); }
inline jboolean AudioManager::shouldVibrate(jint vibrateType) { return call_method<SCAPIX_META_STRING("shouldVibrate"), jboolean>(vibrateType); }
inline jint AudioManager::getVibrateSetting(jint vibrateType) { return call_method<SCAPIX_META_STRING("getVibrateSetting"), jint>(vibrateType); }
inline void AudioManager::setVibrateSetting(jint vibrateType, jint vibrateSetting) { return call_method<SCAPIX_META_STRING("setVibrateSetting"), void>(vibrateType, vibrateSetting); }
inline void AudioManager::setSpeakerphoneOn(jboolean on) { return call_method<SCAPIX_META_STRING("setSpeakerphoneOn"), void>(on); }
inline jboolean AudioManager::isSpeakerphoneOn() { return call_method<SCAPIX_META_STRING("isSpeakerphoneOn"), jboolean>(); }
inline jboolean AudioManager::isBluetoothScoAvailableOffCall() { return call_method<SCAPIX_META_STRING("isBluetoothScoAvailableOffCall"), jboolean>(); }
inline void AudioManager::startBluetoothSco() { return call_method<SCAPIX_META_STRING("startBluetoothSco"), void>(); }
inline void AudioManager::stopBluetoothSco() { return call_method<SCAPIX_META_STRING("stopBluetoothSco"), void>(); }
inline void AudioManager::setBluetoothScoOn(jboolean on) { return call_method<SCAPIX_META_STRING("setBluetoothScoOn"), void>(on); }
inline jboolean AudioManager::isBluetoothScoOn() { return call_method<SCAPIX_META_STRING("isBluetoothScoOn"), jboolean>(); }
inline void AudioManager::setBluetoothA2dpOn(jboolean on) { return call_method<SCAPIX_META_STRING("setBluetoothA2dpOn"), void>(on); }
inline jboolean AudioManager::isBluetoothA2dpOn() { return call_method<SCAPIX_META_STRING("isBluetoothA2dpOn"), jboolean>(); }
inline void AudioManager::setWiredHeadsetOn(jboolean on) { return call_method<SCAPIX_META_STRING("setWiredHeadsetOn"), void>(on); }
inline jboolean AudioManager::isWiredHeadsetOn() { return call_method<SCAPIX_META_STRING("isWiredHeadsetOn"), jboolean>(); }
inline void AudioManager::setMicrophoneMute(jboolean on) { return call_method<SCAPIX_META_STRING("setMicrophoneMute"), void>(on); }
inline jboolean AudioManager::isMicrophoneMute() { return call_method<SCAPIX_META_STRING("isMicrophoneMute"), jboolean>(); }
inline void AudioManager::setMode(jint mode) { return call_method<SCAPIX_META_STRING("setMode"), void>(mode); }
inline jint AudioManager::getMode() { return call_method<SCAPIX_META_STRING("getMode"), jint>(); }
inline void AudioManager::setRouting(jint mode, jint routes, jint mask) { return call_method<SCAPIX_META_STRING("setRouting"), void>(mode, routes, mask); }
inline jint AudioManager::getRouting(jint mode) { return call_method<SCAPIX_META_STRING("getRouting"), jint>(mode); }
inline jboolean AudioManager::isMusicActive() { return call_method<SCAPIX_META_STRING("isMusicActive"), jboolean>(); }
inline jint AudioManager::generateAudioSessionId() { return call_method<SCAPIX_META_STRING("generateAudioSessionId"), jint>(); }
inline void AudioManager::setParameters(ref<java::lang::String> keyValuePairs) { return call_method<SCAPIX_META_STRING("setParameters"), void>(keyValuePairs); }
inline ref<java::lang::String> AudioManager::getParameters(ref<java::lang::String> keys) { return call_method<SCAPIX_META_STRING("getParameters"), ref<java::lang::String>>(keys); }
inline void AudioManager::playSoundEffect(jint effectType) { return call_method<SCAPIX_META_STRING("playSoundEffect"), void>(effectType); }
inline void AudioManager::playSoundEffect(jint effectType, jfloat volume) { return call_method<SCAPIX_META_STRING("playSoundEffect"), void>(effectType, volume); }
inline void AudioManager::loadSoundEffects() { return call_method<SCAPIX_META_STRING("loadSoundEffects"), void>(); }
inline void AudioManager::unloadSoundEffects() { return call_method<SCAPIX_META_STRING("unloadSoundEffects"), void>(); }
inline jint AudioManager::requestAudioFocus(ref<android::media::AudioManager_OnAudioFocusChangeListener> l, jint streamType, jint durationHint) { return call_method<SCAPIX_META_STRING("requestAudioFocus"), jint>(l, streamType, durationHint); }
inline jint AudioManager::requestAudioFocus(ref<android::media::AudioFocusRequest> focusRequest) { return call_method<SCAPIX_META_STRING("requestAudioFocus"), jint>(focusRequest); }
inline jint AudioManager::abandonAudioFocusRequest(ref<android::media::AudioFocusRequest> focusRequest) { return call_method<SCAPIX_META_STRING("abandonAudioFocusRequest"), jint>(focusRequest); }
inline jint AudioManager::abandonAudioFocus(ref<android::media::AudioManager_OnAudioFocusChangeListener> l) { return call_method<SCAPIX_META_STRING("abandonAudioFocus"), jint>(l); }
inline void AudioManager::registerMediaButtonEventReceiver(ref<android::content::ComponentName> eventReceiver) { return call_method<SCAPIX_META_STRING("registerMediaButtonEventReceiver"), void>(eventReceiver); }
inline void AudioManager::registerMediaButtonEventReceiver(ref<android::app::PendingIntent> eventReceiver) { return call_method<SCAPIX_META_STRING("registerMediaButtonEventReceiver"), void>(eventReceiver); }
inline void AudioManager::unregisterMediaButtonEventReceiver(ref<android::content::ComponentName> eventReceiver) { return call_method<SCAPIX_META_STRING("unregisterMediaButtonEventReceiver"), void>(eventReceiver); }
inline void AudioManager::unregisterMediaButtonEventReceiver(ref<android::app::PendingIntent> eventReceiver) { return call_method<SCAPIX_META_STRING("unregisterMediaButtonEventReceiver"), void>(eventReceiver); }
inline void AudioManager::registerRemoteControlClient(ref<android::media::RemoteControlClient> rcClient) { return call_method<SCAPIX_META_STRING("registerRemoteControlClient"), void>(rcClient); }
inline void AudioManager::unregisterRemoteControlClient(ref<android::media::RemoteControlClient> rcClient) { return call_method<SCAPIX_META_STRING("unregisterRemoteControlClient"), void>(rcClient); }
inline jboolean AudioManager::registerRemoteController(ref<android::media::RemoteController> rctlr) { return call_method<SCAPIX_META_STRING("registerRemoteController"), jboolean>(rctlr); }
inline void AudioManager::unregisterRemoteController(ref<android::media::RemoteController> rctlr) { return call_method<SCAPIX_META_STRING("unregisterRemoteController"), void>(rctlr); }
inline void AudioManager::registerAudioPlaybackCallback(ref<android::media::AudioManager_AudioPlaybackCallback> cb, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("registerAudioPlaybackCallback"), void>(cb, handler); }
inline void AudioManager::unregisterAudioPlaybackCallback(ref<android::media::AudioManager_AudioPlaybackCallback> cb) { return call_method<SCAPIX_META_STRING("unregisterAudioPlaybackCallback"), void>(cb); }
inline ref<java::util::List> AudioManager::getActivePlaybackConfigurations() { return call_method<SCAPIX_META_STRING("getActivePlaybackConfigurations"), ref<java::util::List>>(); }
inline void AudioManager::registerAudioRecordingCallback(ref<android::media::AudioManager_AudioRecordingCallback> cb, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("registerAudioRecordingCallback"), void>(cb, handler); }
inline void AudioManager::unregisterAudioRecordingCallback(ref<android::media::AudioManager_AudioRecordingCallback> cb) { return call_method<SCAPIX_META_STRING("unregisterAudioRecordingCallback"), void>(cb); }
inline ref<java::util::List> AudioManager::getActiveRecordingConfigurations() { return call_method<SCAPIX_META_STRING("getActiveRecordingConfigurations"), ref<java::util::List>>(); }
inline ref<java::lang::String> AudioManager::getProperty(ref<java::lang::String> key) { return call_method<SCAPIX_META_STRING("getProperty"), ref<java::lang::String>>(key); }
inline ref<link::java::array<android::media::AudioDeviceInfo>> AudioManager::getDevices(jint flags) { return call_method<SCAPIX_META_STRING("getDevices"), ref<link::java::array<android::media::AudioDeviceInfo>>>(flags); }
inline void AudioManager::registerAudioDeviceCallback(ref<android::media::AudioDeviceCallback> callback, ref<android::os::Handler> handler) { return call_method<SCAPIX_META_STRING("registerAudioDeviceCallback"), void>(callback, handler); }
inline void AudioManager::unregisterAudioDeviceCallback(ref<android::media::AudioDeviceCallback> callback) { return call_method<SCAPIX_META_STRING("unregisterAudioDeviceCallback"), void>(callback); }
inline ref<java::util::List> AudioManager::getMicrophones() { return call_method<SCAPIX_META_STRING("getMicrophones"), ref<java::util::List>>(); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_AUDIOMANAGER_H
