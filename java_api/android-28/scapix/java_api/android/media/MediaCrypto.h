// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_MEDIA_MEDIACRYPTO_H
#define SCAPIX_ANDROID_MEDIA_MEDIACRYPTO_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util { class UUID; }

namespace android::media {

class MediaCrypto : public object_base<SCAPIX_META_STRING("android/media/MediaCrypto"),
	java::lang::Object>
{
public:

	static ref<MediaCrypto> new_object(ref<java::util::UUID> uuid, ref<link::java::array<jbyte>> initData);
	static jboolean isCryptoSchemeSupported(ref<java::util::UUID> uuid);
	jboolean requiresSecureDecoderComponent(ref<java::lang::String> p1);
	void setMediaDrmSession(ref<link::java::array<jbyte>> p1);
	void release();

protected:

	MediaCrypto(handle_type h) : base_(h) {}

};

} // namespace android::media
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/UUID.h>

namespace scapix::java_api {
namespace android::media {

inline ref<MediaCrypto> MediaCrypto::new_object(ref<java::util::UUID> uuid, ref<link::java::array<jbyte>> initData) { return base_::new_object(uuid, initData); }
inline jboolean MediaCrypto::isCryptoSchemeSupported(ref<java::util::UUID> uuid) { return call_static_method<SCAPIX_META_STRING("isCryptoSchemeSupported"), jboolean>(uuid); }
inline jboolean MediaCrypto::requiresSecureDecoderComponent(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("requiresSecureDecoderComponent"), jboolean>(p1); }
inline void MediaCrypto::setMediaDrmSession(ref<link::java::array<jbyte>> p1) { return call_method<SCAPIX_META_STRING("setMediaDrmSession"), void>(p1); }
inline void MediaCrypto::release() { return call_method<SCAPIX_META_STRING("release"), void>(); }

} // namespace android::media
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_MEDIA_MEDIACRYPTO_H
