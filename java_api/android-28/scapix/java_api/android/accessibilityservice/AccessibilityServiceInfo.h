// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_ANDROID_ACCESSIBILITYSERVICE_ACCESSIBILITYSERVICEINFO_H
#define SCAPIX_ANDROID_ACCESSIBILITYSERVICE_ACCESSIBILITYSERVICEINFO_H

namespace scapix::java_api {

namespace android::content::pm { class PackageManager; }
namespace android::content::pm { class ResolveInfo; }
namespace android::os { class Parcel; }
namespace android::os { class Parcelable_Creator; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }

namespace android::accessibilityservice {

class AccessibilityServiceInfo : public object_base<SCAPIX_META_STRING("android/accessibilityservice/AccessibilityServiceInfo"),
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jint CAPABILITY_CAN_CONTROL_MAGNIFICATION_();
	static jint CAPABILITY_CAN_PERFORM_GESTURES_();
	static jint CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY_();
	static jint CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS_();
	static jint CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES_();
	static jint CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION_();
	static jint CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT_();
	static ref<android::os::Parcelable_Creator> CREATOR_();
	static jint DEFAULT_();
	static jint FEEDBACK_ALL_MASK_();
	static jint FEEDBACK_AUDIBLE_();
	static jint FEEDBACK_BRAILLE_();
	static jint FEEDBACK_GENERIC_();
	static jint FEEDBACK_HAPTIC_();
	static jint FEEDBACK_SPOKEN_();
	static jint FEEDBACK_VISUAL_();
	static jint FLAG_ENABLE_ACCESSIBILITY_VOLUME_();
	static jint FLAG_INCLUDE_NOT_IMPORTANT_VIEWS_();
	static jint FLAG_REPORT_VIEW_IDS_();
	static jint FLAG_REQUEST_ACCESSIBILITY_BUTTON_();
	static jint FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY_();
	static jint FLAG_REQUEST_FILTER_KEY_EVENTS_();
	static jint FLAG_REQUEST_FINGERPRINT_GESTURES_();
	static jint FLAG_REQUEST_TOUCH_EXPLORATION_MODE_();
	static jint FLAG_RETRIEVE_INTERACTIVE_WINDOWS_();
	jint eventTypes();
	void eventTypes(jint);
	jint feedbackType();
	void feedbackType(jint);
	jint flags();
	void flags(jint);
	jlong notificationTimeout();
	void notificationTimeout(jlong);
	ref<link::java::array<java::lang::String>> packageNames();
	void packageNames(ref<link::java::array<java::lang::String>>);

	static ref<AccessibilityServiceInfo> new_object();
	ref<java::lang::String> getId();
	ref<android::content::pm::ResolveInfo> getResolveInfo();
	ref<java::lang::String> getSettingsActivityName();
	jboolean getCanRetrieveWindowContent();
	jint getCapabilities();
	ref<java::lang::CharSequence> loadSummary(ref<android::content::pm::PackageManager> packageManager);
	ref<java::lang::String> getDescription();
	ref<java::lang::String> loadDescription(ref<android::content::pm::PackageManager> packageManager);
	jint describeContents();
	void writeToParcel(ref<android::os::Parcel> parcel, jint flagz);
	jint hashCode();
	jboolean equals(ref<java::lang::Object> obj);
	ref<java::lang::String> toString();
	static ref<java::lang::String> feedbackTypeToString(jint feedbackType);
	static ref<java::lang::String> flagToString(jint flag);
	static ref<java::lang::String> capabilityToString(jint capability);

protected:

	AccessibilityServiceInfo(handle_type h) : base_(h) {}

};

} // namespace android::accessibilityservice
} // namespace scapix::java_api

#include <scapix/java_api/android/content/pm/PackageManager.h>
#include <scapix/java_api/android/content/pm/ResolveInfo.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::accessibilityservice {

inline jint AccessibilityServiceInfo::CAPABILITY_CAN_CONTROL_MAGNIFICATION_() { return get_static_field<SCAPIX_META_STRING("CAPABILITY_CAN_CONTROL_MAGNIFICATION"), jint>(); }
inline jint AccessibilityServiceInfo::CAPABILITY_CAN_PERFORM_GESTURES_() { return get_static_field<SCAPIX_META_STRING("CAPABILITY_CAN_PERFORM_GESTURES"), jint>(); }
inline jint AccessibilityServiceInfo::CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY_() { return get_static_field<SCAPIX_META_STRING("CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY"), jint>(); }
inline jint AccessibilityServiceInfo::CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS_() { return get_static_field<SCAPIX_META_STRING("CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS"), jint>(); }
inline jint AccessibilityServiceInfo::CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES_() { return get_static_field<SCAPIX_META_STRING("CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES"), jint>(); }
inline jint AccessibilityServiceInfo::CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION_() { return get_static_field<SCAPIX_META_STRING("CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION"), jint>(); }
inline jint AccessibilityServiceInfo::CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT_() { return get_static_field<SCAPIX_META_STRING("CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT"), jint>(); }
inline ref<android::os::Parcelable_Creator> AccessibilityServiceInfo::CREATOR_() { return get_static_field<SCAPIX_META_STRING("CREATOR"), ref<android::os::Parcelable_Creator>>(); }
inline jint AccessibilityServiceInfo::DEFAULT_() { return get_static_field<SCAPIX_META_STRING("DEFAULT"), jint>(); }
inline jint AccessibilityServiceInfo::FEEDBACK_ALL_MASK_() { return get_static_field<SCAPIX_META_STRING("FEEDBACK_ALL_MASK"), jint>(); }
inline jint AccessibilityServiceInfo::FEEDBACK_AUDIBLE_() { return get_static_field<SCAPIX_META_STRING("FEEDBACK_AUDIBLE"), jint>(); }
inline jint AccessibilityServiceInfo::FEEDBACK_BRAILLE_() { return get_static_field<SCAPIX_META_STRING("FEEDBACK_BRAILLE"), jint>(); }
inline jint AccessibilityServiceInfo::FEEDBACK_GENERIC_() { return get_static_field<SCAPIX_META_STRING("FEEDBACK_GENERIC"), jint>(); }
inline jint AccessibilityServiceInfo::FEEDBACK_HAPTIC_() { return get_static_field<SCAPIX_META_STRING("FEEDBACK_HAPTIC"), jint>(); }
inline jint AccessibilityServiceInfo::FEEDBACK_SPOKEN_() { return get_static_field<SCAPIX_META_STRING("FEEDBACK_SPOKEN"), jint>(); }
inline jint AccessibilityServiceInfo::FEEDBACK_VISUAL_() { return get_static_field<SCAPIX_META_STRING("FEEDBACK_VISUAL"), jint>(); }
inline jint AccessibilityServiceInfo::FLAG_ENABLE_ACCESSIBILITY_VOLUME_() { return get_static_field<SCAPIX_META_STRING("FLAG_ENABLE_ACCESSIBILITY_VOLUME"), jint>(); }
inline jint AccessibilityServiceInfo::FLAG_INCLUDE_NOT_IMPORTANT_VIEWS_() { return get_static_field<SCAPIX_META_STRING("FLAG_INCLUDE_NOT_IMPORTANT_VIEWS"), jint>(); }
inline jint AccessibilityServiceInfo::FLAG_REPORT_VIEW_IDS_() { return get_static_field<SCAPIX_META_STRING("FLAG_REPORT_VIEW_IDS"), jint>(); }
inline jint AccessibilityServiceInfo::FLAG_REQUEST_ACCESSIBILITY_BUTTON_() { return get_static_field<SCAPIX_META_STRING("FLAG_REQUEST_ACCESSIBILITY_BUTTON"), jint>(); }
inline jint AccessibilityServiceInfo::FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY_() { return get_static_field<SCAPIX_META_STRING("FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY"), jint>(); }
inline jint AccessibilityServiceInfo::FLAG_REQUEST_FILTER_KEY_EVENTS_() { return get_static_field<SCAPIX_META_STRING("FLAG_REQUEST_FILTER_KEY_EVENTS"), jint>(); }
inline jint AccessibilityServiceInfo::FLAG_REQUEST_FINGERPRINT_GESTURES_() { return get_static_field<SCAPIX_META_STRING("FLAG_REQUEST_FINGERPRINT_GESTURES"), jint>(); }
inline jint AccessibilityServiceInfo::FLAG_REQUEST_TOUCH_EXPLORATION_MODE_() { return get_static_field<SCAPIX_META_STRING("FLAG_REQUEST_TOUCH_EXPLORATION_MODE"), jint>(); }
inline jint AccessibilityServiceInfo::FLAG_RETRIEVE_INTERACTIVE_WINDOWS_() { return get_static_field<SCAPIX_META_STRING("FLAG_RETRIEVE_INTERACTIVE_WINDOWS"), jint>(); }
inline jint AccessibilityServiceInfo::eventTypes() { return get_field<SCAPIX_META_STRING("eventTypes"), jint>(); }
inline void AccessibilityServiceInfo::eventTypes(jint v) { set_field<SCAPIX_META_STRING("eventTypes"), jint>(v); }
inline jint AccessibilityServiceInfo::feedbackType() { return get_field<SCAPIX_META_STRING("feedbackType"), jint>(); }
inline void AccessibilityServiceInfo::feedbackType(jint v) { set_field<SCAPIX_META_STRING("feedbackType"), jint>(v); }
inline jint AccessibilityServiceInfo::flags() { return get_field<SCAPIX_META_STRING("flags"), jint>(); }
inline void AccessibilityServiceInfo::flags(jint v) { set_field<SCAPIX_META_STRING("flags"), jint>(v); }
inline jlong AccessibilityServiceInfo::notificationTimeout() { return get_field<SCAPIX_META_STRING("notificationTimeout"), jlong>(); }
inline void AccessibilityServiceInfo::notificationTimeout(jlong v) { set_field<SCAPIX_META_STRING("notificationTimeout"), jlong>(v); }
inline ref<link::java::array<java::lang::String>> AccessibilityServiceInfo::packageNames() { return get_field<SCAPIX_META_STRING("packageNames"), ref<link::java::array<java::lang::String>>>(); }
inline void AccessibilityServiceInfo::packageNames(ref<link::java::array<java::lang::String>> v) { set_field<SCAPIX_META_STRING("packageNames"), ref<link::java::array<java::lang::String>>>(v); }
inline ref<AccessibilityServiceInfo> AccessibilityServiceInfo::new_object() { return base_::new_object(); }
inline ref<java::lang::String> AccessibilityServiceInfo::getId() { return call_method<SCAPIX_META_STRING("getId"), ref<java::lang::String>>(); }
inline ref<android::content::pm::ResolveInfo> AccessibilityServiceInfo::getResolveInfo() { return call_method<SCAPIX_META_STRING("getResolveInfo"), ref<android::content::pm::ResolveInfo>>(); }
inline ref<java::lang::String> AccessibilityServiceInfo::getSettingsActivityName() { return call_method<SCAPIX_META_STRING("getSettingsActivityName"), ref<java::lang::String>>(); }
inline jboolean AccessibilityServiceInfo::getCanRetrieveWindowContent() { return call_method<SCAPIX_META_STRING("getCanRetrieveWindowContent"), jboolean>(); }
inline jint AccessibilityServiceInfo::getCapabilities() { return call_method<SCAPIX_META_STRING("getCapabilities"), jint>(); }
inline ref<java::lang::CharSequence> AccessibilityServiceInfo::loadSummary(ref<android::content::pm::PackageManager> packageManager) { return call_method<SCAPIX_META_STRING("loadSummary"), ref<java::lang::CharSequence>>(packageManager); }
inline ref<java::lang::String> AccessibilityServiceInfo::getDescription() { return call_method<SCAPIX_META_STRING("getDescription"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AccessibilityServiceInfo::loadDescription(ref<android::content::pm::PackageManager> packageManager) { return call_method<SCAPIX_META_STRING("loadDescription"), ref<java::lang::String>>(packageManager); }
inline jint AccessibilityServiceInfo::describeContents() { return call_method<SCAPIX_META_STRING("describeContents"), jint>(); }
inline void AccessibilityServiceInfo::writeToParcel(ref<android::os::Parcel> parcel, jint flagz) { return call_method<SCAPIX_META_STRING("writeToParcel"), void>(parcel, flagz); }
inline jint AccessibilityServiceInfo::hashCode() { return call_method<SCAPIX_META_STRING("hashCode"), jint>(); }
inline jboolean AccessibilityServiceInfo::equals(ref<java::lang::Object> obj) { return call_method<SCAPIX_META_STRING("equals"), jboolean>(obj); }
inline ref<java::lang::String> AccessibilityServiceInfo::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> AccessibilityServiceInfo::feedbackTypeToString(jint feedbackType) { return call_static_method<SCAPIX_META_STRING("feedbackTypeToString"), ref<java::lang::String>>(feedbackType); }
inline ref<java::lang::String> AccessibilityServiceInfo::flagToString(jint flag) { return call_static_method<SCAPIX_META_STRING("flagToString"), ref<java::lang::String>>(flag); }
inline ref<java::lang::String> AccessibilityServiceInfo::capabilityToString(jint capability) { return call_static_method<SCAPIX_META_STRING("capabilityToString"), ref<java::lang::String>>(capability); }

} // namespace android::accessibilityservice
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_ACCESSIBILITYSERVICE_ACCESSIBILITYSERVICEINFO_H
