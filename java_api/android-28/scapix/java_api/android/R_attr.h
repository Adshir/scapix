// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_R_ATTR_H
#define SCAPIX_ANDROID_R_ATTR_H

namespace scapix::java_api {


namespace android {

class R_attr : public object_base<SCAPIX_META_STRING("android/R$attr"),
	java::lang::Object>
{
public:

	static jint absListViewStyle();
	static jint accessibilityEventTypes();
	static jint accessibilityFeedbackType();
	static jint accessibilityFlags();
	static jint accessibilityHeading();
	static jint accessibilityLiveRegion();
	static jint accessibilityPaneTitle();
	static jint accessibilityTraversalAfter();
	static jint accessibilityTraversalBefore();
	static jint accountPreferences();
	static jint accountType();
	static jint action();
	static jint actionBarDivider();
	static jint actionBarItemBackground();
	static jint actionBarPopupTheme();
	static jint actionBarSize();
	static jint actionBarSplitStyle();
	static jint actionBarStyle();
	static jint actionBarTabBarStyle();
	static jint actionBarTabStyle();
	static jint actionBarTabTextStyle();
	static jint actionBarTheme();
	static jint actionBarWidgetTheme();
	static jint actionButtonStyle();
	static jint actionDropDownStyle();
	static jint actionLayout();
	static jint actionMenuTextAppearance();
	static jint actionMenuTextColor();
	static jint actionModeBackground();
	static jint actionModeCloseButtonStyle();
	static jint actionModeCloseDrawable();
	static jint actionModeCopyDrawable();
	static jint actionModeCutDrawable();
	static jint actionModeFindDrawable();
	static jint actionModePasteDrawable();
	static jint actionModeSelectAllDrawable();
	static jint actionModeShareDrawable();
	static jint actionModeSplitBackground();
	static jint actionModeStyle();
	static jint actionModeWebSearchDrawable();
	static jint actionOverflowButtonStyle();
	static jint actionOverflowMenuStyle();
	static jint actionProviderClass();
	static jint actionViewClass();
	static jint activatedBackgroundIndicator();
	static jint activityCloseEnterAnimation();
	static jint activityCloseExitAnimation();
	static jint activityOpenEnterAnimation();
	static jint activityOpenExitAnimation();
	static jint addPrintersActivity();
	static jint addStatesFromChildren();
	static jint adjustViewBounds();
	static jint advancedPrintOptionsActivity();
	static jint alertDialogIcon();
	static jint alertDialogStyle();
	static jint alertDialogTheme();
	static jint alignmentMode();
	static jint allContactsName();
	static jint allowBackup();
	static jint allowClearUserData();
	static jint allowEmbedded();
	static jint allowParallelSyncs();
	static jint allowSingleTap();
	static jint allowTaskReparenting();
	static jint allowUndo();
	static jint alpha();
	static jint alphabeticModifiers();
	static jint alphabeticShortcut();
	static jint alwaysDrawnWithCache();
	static jint alwaysRetainTaskState();
	static jint amPmBackgroundColor();
	static jint amPmTextColor();
	static jint ambientShadowAlpha();
	static jint angle();
	static jint animateFirstView();
	static jint animateLayoutChanges();
	static jint animateOnClick();
	static jint animation();
	static jint animationCache();
	static jint animationDuration();
	static jint animationOrder();
	static jint animationResolution();
	static jint antialias();
	static jint anyDensity();
	static jint apduServiceBanner();
	static jint apiKey();
	static jint appCategory();
	static jint appComponentFactory();
	static jint author();
	static jint authorities();
	static jint autoAdvanceViewId();
	static jint autoCompleteTextViewStyle();
	static jint autoLink();
	static jint autoMirrored();
	static jint autoRemoveFromRecents();
	static jint autoSizeMaxTextSize();
	static jint autoSizeMinTextSize();
	static jint autoSizePresetSizes();
	static jint autoSizeStepGranularity();
	static jint autoSizeTextType();
	static jint autoStart();
	static jint autoText();
	static jint autoUrlDetect();
	static jint autoVerify();
	static jint autofillHints();
	static jint autofilledHighlight();
	static jint background();
	static jint backgroundDimAmount();
	static jint backgroundDimEnabled();
	static jint backgroundSplit();
	static jint backgroundStacked();
	static jint backgroundTint();
	static jint backgroundTintMode();
	static jint backupAgent();
	static jint backupInForeground();
	static jint banner();
	static jint baseline();
	static jint baselineAlignBottom();
	static jint baselineAligned();
	static jint baselineAlignedChildIndex();
	static jint bitmap();
	static jint borderlessButtonStyle();
	static jint bottom();
	static jint bottomBright();
	static jint bottomDark();
	static jint bottomLeftRadius();
	static jint bottomMedium();
	static jint bottomOffset();
	static jint bottomRightRadius();
	static jint breadCrumbShortTitle();
	static jint breadCrumbTitle();
	static jint breakStrategy();
	static jint bufferType();
	static jint button();
	static jint buttonBarButtonStyle();
	static jint buttonBarNegativeButtonStyle();
	static jint buttonBarNeutralButtonStyle();
	static jint buttonBarPositiveButtonStyle();
	static jint buttonBarStyle();
	static jint buttonCornerRadius();
	static jint buttonGravity();
	static jint buttonStyle();
	static jint buttonStyleInset();
	static jint buttonStyleSmall();
	static jint buttonStyleToggle();
	static jint buttonTint();
	static jint buttonTintMode();
	static jint cacheColorHint();
	static jint calendarTextColor();
	static jint calendarViewShown();
	static jint calendarViewStyle();
	static jint canControlMagnification();
	static jint canPerformGestures();
	static jint canRecord();
	static jint canRequestEnhancedWebAccessibility();
	static jint canRequestFilterKeyEvents();
	static jint canRequestFingerprintGestures();
	static jint canRequestTouchExplorationMode();
	static jint canRetrieveWindowContent();
	static jint candidatesTextStyleSpans();
	static jint cantSaveState();
	static jint capitalize();
	static jint category();
	static jint centerBright();
	static jint centerColor();
	static jint centerDark();
	static jint centerMedium();
	static jint centerX();
	static jint centerY();
	static jint certDigest();
	static jint checkBoxPreferenceStyle();
	static jint checkMark();
	static jint checkMarkTint();
	static jint checkMarkTintMode();
	static jint checkable();
	static jint checkableBehavior();
	static jint checkboxStyle();
	static jint checked();
	static jint checkedButton();
	static jint checkedTextViewStyle();
	static jint childDivider();
	static jint childIndicator();
	static jint childIndicatorEnd();
	static jint childIndicatorLeft();
	static jint childIndicatorRight();
	static jint childIndicatorStart();
	static jint choiceMode();
	static jint classLoader();
	static jint clearTaskOnLaunch();
	static jint clickable();
	static jint clipChildren();
	static jint clipOrientation();
	static jint clipToPadding();
	static jint closeIcon();
	static jint codes();
	static jint collapseColumns();
	static jint collapseContentDescription();
	static jint collapseIcon();
	static jint color();
	static jint colorAccent();
	static jint colorActivatedHighlight();
	static jint colorBackground();
	static jint colorBackgroundCacheHint();
	static jint colorBackgroundFloating();
	static jint colorButtonNormal();
	static jint colorControlActivated();
	static jint colorControlHighlight();
	static jint colorControlNormal();
	static jint colorEdgeEffect();
	static jint colorError();
	static jint colorFocusedHighlight();
	static jint colorForeground();
	static jint colorForegroundInverse();
	static jint colorLongPressedHighlight();
	static jint colorMode();
	static jint colorMultiSelectHighlight();
	static jint colorPressedHighlight();
	static jint colorPrimary();
	static jint colorPrimaryDark();
	static jint colorSecondary();
	static jint columnCount();
	static jint columnDelay();
	static jint columnOrderPreserved();
	static jint columnWidth();
	static jint commitIcon();
	static jint compatibleWidthLimitDp();
	static jint completionHint();
	static jint completionHintView();
	static jint completionThreshold();
	static jint configChanges();
	static jint configure();
	static jint constantSize();
	static jint content();
	static jint contentAgeHint();
	static jint contentAuthority();
	static jint contentDescription();
	static jint contentInsetEnd();
	static jint contentInsetEndWithActions();
	static jint contentInsetLeft();
	static jint contentInsetRight();
	static jint contentInsetStart();
	static jint contentInsetStartWithNavigation();
	static jint contextClickable();
	static jint contextDescription();
	static jint contextPopupMenuStyle();
	static jint contextUri();
	static jint controlX1();
	static jint controlX2();
	static jint controlY1();
	static jint controlY2();
	static jint countDown();
	static jint country();
	static jint cropToPadding();
	static jint cursorVisible();
	static jint customNavigationLayout();
	static jint customTokens();
	static jint cycles();
	static jint dashGap();
	static jint dashWidth();
	static jint data();
	static jint datePickerDialogTheme();
	static jint datePickerMode();
	static jint datePickerStyle();
	static jint dateTextAppearance();
	static jint dayOfWeekBackground();
	static jint dayOfWeekTextAppearance();
	static jint debuggable();
	static jint defaultFocusHighlightEnabled();
	static jint defaultHeight();
	static jint defaultToDeviceProtectedStorage();
	static jint defaultValue();
	static jint defaultWidth();
	static jint delay();
	static jint dependency();
	static jint descendantFocusability();
	static jint description();
	static jint detachWallpaper();
	static jint detailColumn();
	static jint detailSocialSummary();
	static jint detailsElementBackground();
	static jint dial();
	static jint dialogCornerRadius();
	static jint dialogIcon();
	static jint dialogLayout();
	static jint dialogMessage();
	static jint dialogPreferenceStyle();
	static jint dialogPreferredPadding();
	static jint dialogTheme();
	static jint dialogTitle();
	static jint digits();
	static jint directBootAware();
	static jint direction();
	static jint directionDescriptions();
	static jint directionPriority();
	static jint disableDependentsState();
	static jint disabledAlpha();
	static jint displayOptions();
	static jint dither();
	static jint divider();
	static jint dividerHeight();
	static jint dividerHorizontal();
	static jint dividerPadding();
	static jint dividerVertical();
	static jint documentLaunchMode();
	static jint drawSelectorOnTop();
	static jint drawable();
	static jint drawableBottom();
	static jint drawableEnd();
	static jint drawableLeft();
	static jint drawablePadding();
	static jint drawableRight();
	static jint drawableStart();
	static jint drawableTint();
	static jint drawableTintMode();
	static jint drawableTop();
	static jint drawingCacheQuality();
	static jint dropDownAnchor();
	static jint dropDownHeight();
	static jint dropDownHintAppearance();
	static jint dropDownHorizontalOffset();
	static jint dropDownItemStyle();
	static jint dropDownListViewStyle();
	static jint dropDownSelector();
	static jint dropDownSpinnerStyle();
	static jint dropDownVerticalOffset();
	static jint dropDownWidth();
	static jint duplicateParentState();
	static jint duration();
	static jint editTextBackground();
	static jint editTextColor();
	static jint editTextPreferenceStyle();
	static jint editTextStyle();
	static jint editable();
	static jint editorExtras();
	static jint elegantTextHeight();
	static jint elevation();
	static jint ellipsize();
	static jint ems();
	static jint enableVrMode();
	static jint enabled();
	static jint end();
	static jint endColor();
	static jint endX();
	static jint endY();
	static jint endYear();
	static jint enterFadeDuration();
	static jint entries();
	static jint entryValues();
	static jint eventsInterceptionEnabled();
	static jint excludeClass();
	static jint excludeFromRecents();
	static jint excludeId();
	static jint excludeName();
	static jint exitFadeDuration();
	static jint expandableListPreferredChildIndicatorLeft();
	static jint expandableListPreferredChildIndicatorRight();
	static jint expandableListPreferredChildPaddingLeft();
	static jint expandableListPreferredItemIndicatorLeft();
	static jint expandableListPreferredItemIndicatorRight();
	static jint expandableListPreferredItemPaddingLeft();
	static jint expandableListViewStyle();
	static jint expandableListViewWhiteStyle();
	static jint exported();
	static jint externalService();
	static jint extraTension();
	static jint extractNativeLibs();
	static jint factor();
	static jint fadeDuration();
	static jint fadeEnabled();
	static jint fadeOffset();
	static jint fadeScrollbars();
	static jint fadingEdge();
	static jint fadingEdgeLength();
	static jint fadingMode();
	static jint fallbackLineSpacing();
	static jint fastScrollAlwaysVisible();
	static jint fastScrollEnabled();
	static jint fastScrollOverlayPosition();
	static jint fastScrollPreviewBackgroundLeft();
	static jint fastScrollPreviewBackgroundRight();
	static jint fastScrollStyle();
	static jint fastScrollTextColor();
	static jint fastScrollThumbDrawable();
	static jint fastScrollTrackDrawable();
	static jint fillAfter();
	static jint fillAlpha();
	static jint fillBefore();
	static jint fillColor();
	static jint fillEnabled();
	static jint fillType();
	static jint fillViewport();
	static jint filter();
	static jint filterTouchesWhenObscured();
	static jint fingerprintAuthDrawable();
	static jint finishOnCloseSystemDialogs();
	static jint finishOnTaskLaunch();
	static jint firstBaselineToTopHeight();
	static jint firstDayOfWeek();
	static jint fitsSystemWindows();
	static jint flipInterval();
	static jint focusable();
	static jint focusableInTouchMode();
	static jint focusedByDefault();
	static jint focusedMonthDateColor();
	static jint font();
	static jint fontFamily();
	static jint fontFeatureSettings();
	static jint fontProviderAuthority();
	static jint fontProviderCerts();
	static jint fontProviderPackage();
	static jint fontProviderQuery();
	static jint fontStyle();
	static jint fontVariationSettings();
	static jint fontWeight();
	static jint footerDividersEnabled();
	static jint forceHasOverlappingRendering();
	static jint foreground();
	static jint foregroundGravity();
	static jint foregroundTint();
	static jint foregroundTintMode();
	static jint format();
	static jint format12Hour();
	static jint format24Hour();
	static jint fraction();
	static jint fragment();
	static jint fragmentAllowEnterTransitionOverlap();
	static jint fragmentAllowReturnTransitionOverlap();
	static jint fragmentCloseEnterAnimation();
	static jint fragmentCloseExitAnimation();
	static jint fragmentEnterTransition();
	static jint fragmentExitTransition();
	static jint fragmentFadeEnterAnimation();
	static jint fragmentFadeExitAnimation();
	static jint fragmentOpenEnterAnimation();
	static jint fragmentOpenExitAnimation();
	static jint fragmentReenterTransition();
	static jint fragmentReturnTransition();
	static jint fragmentSharedElementEnterTransition();
	static jint fragmentSharedElementReturnTransition();
	static jint freezesText();
	static jint fromAlpha();
	static jint fromDegrees();
	static jint fromId();
	static jint fromScene();
	static jint fromXDelta();
	static jint fromXScale();
	static jint fromYDelta();
	static jint fromYScale();
	static jint fullBackupContent();
	static jint fullBackupOnly();
	static jint fullBright();
	static jint fullDark();
	static jint functionalTest();
	static jint galleryItemBackground();
	static jint galleryStyle();
	static jint gestureColor();
	static jint gestureStrokeAngleThreshold();
	static jint gestureStrokeLengthThreshold();
	static jint gestureStrokeSquarenessThreshold();
	static jint gestureStrokeType();
	static jint gestureStrokeWidth();
	static jint glEsVersion();
	static jint goIcon();
	static jint gradientRadius();
	static jint grantUriPermissions();
	static jint gravity();
	static jint gridViewStyle();
	static jint groupIndicator();
	static jint hand_hour();
	static jint hand_minute();
	static jint handle();
	static jint handleProfiling();
	static jint hapticFeedbackEnabled();
	static jint hardwareAccelerated();
	static jint hasCode();
	static jint headerAmPmTextAppearance();
	static jint headerBackground();
	static jint headerDayOfMonthTextAppearance();
	static jint headerDividersEnabled();
	static jint headerMonthTextAppearance();
	static jint headerTimeTextAppearance();
	static jint headerYearTextAppearance();
	static jint height();
	static jint hideOnContentScroll();
	static jint hint();
	static jint homeAsUpIndicator();
	static jint homeLayout();
	static jint horizontalDivider();
	static jint horizontalGap();
	static jint horizontalScrollViewStyle();
	static jint horizontalSpacing();
	static jint host();
	static jint hotSpotX();
	static jint hotSpotY();
	static jint hyphenationFrequency();
	static jint icon();
	static jint iconPreview();
	static jint iconSpaceReserved();
	static jint iconTint();
	static jint iconTintMode();
	static jint iconifiedByDefault();
	static jint id();
	static jint ignoreGravity();
	static jint imageButtonStyle();
	static jint imageWellStyle();
	static jint imeActionId();
	static jint imeActionLabel();
	static jint imeExtractEnterAnimation();
	static jint imeExtractExitAnimation();
	static jint imeFullscreenBackground();
	static jint imeOptions();
	static jint imeSubtypeExtraValue();
	static jint imeSubtypeLocale();
	static jint imeSubtypeMode();
	static jint immersive();
	static jint importantForAccessibility();
	static jint importantForAutofill();
	static jint inAnimation();
	static jint includeFontPadding();
	static jint includeInGlobalSearch();
	static jint indeterminate();
	static jint indeterminateBehavior();
	static jint indeterminateDrawable();
	static jint indeterminateDuration();
	static jint indeterminateOnly();
	static jint indeterminateProgressStyle();
	static jint indeterminateTint();
	static jint indeterminateTintMode();
	static jint indicatorEnd();
	static jint indicatorLeft();
	static jint indicatorRight();
	static jint indicatorStart();
	static jint inflatedId();
	static jint initOrder();
	static jint initialKeyguardLayout();
	static jint initialLayout();
	static jint innerRadius();
	static jint innerRadiusRatio();
	static jint inputMethod();
	static jint inputType();
	static jint inset();
	static jint insetBottom();
	static jint insetLeft();
	static jint insetRight();
	static jint insetTop();
	static jint installLocation();
	static jint interpolator();
	static jint isAlwaysSyncable();
	static jint isAsciiCapable();
	static jint isAuxiliary();
	static jint isDefault();
	static jint isFeatureSplit();
	static jint isGame();
	static jint isIndicator();
	static jint isModifier();
	static jint isRepeatable();
	static jint isScrollContainer();
	static jint isStatic();
	static jint isSticky();
	static jint isolatedProcess();
	static jint isolatedSplits();
	static jint itemBackground();
	static jint itemIconDisabledAlpha();
	static jint itemPadding();
	static jint itemTextAppearance();
	static jint justificationMode();
	static jint keepScreenOn();
	static jint key();
	static jint keyBackground();
	static jint keyEdgeFlags();
	static jint keyHeight();
	static jint keyIcon();
	static jint keyLabel();
	static jint keyOutputText();
	static jint keyPreviewHeight();
	static jint keyPreviewLayout();
	static jint keyPreviewOffset();
	static jint keySet();
	static jint keyTextColor();
	static jint keyTextSize();
	static jint keyWidth();
	static jint keyboardLayout();
	static jint keyboardMode();
	static jint keyboardNavigationCluster();
	static jint keycode();
	static jint killAfterRestore();
	static jint label();
	static jint labelFor();
	static jint labelTextSize();
	static jint languageTag();
	static jint largeHeap();
	static jint largeScreens();
	static jint largestWidthLimitDp();
	static jint lastBaselineToBottomHeight();
	static jint launchMode();
	static jint launchTaskBehindSourceAnimation();
	static jint launchTaskBehindTargetAnimation();
	static jint layerType();
	static jint layout();
	static jint layoutAnimation();
	static jint layoutDirection();
	static jint layoutMode();
	static jint layout_above();
	static jint layout_alignBaseline();
	static jint layout_alignBottom();
	static jint layout_alignEnd();
	static jint layout_alignLeft();
	static jint layout_alignParentBottom();
	static jint layout_alignParentEnd();
	static jint layout_alignParentLeft();
	static jint layout_alignParentRight();
	static jint layout_alignParentStart();
	static jint layout_alignParentTop();
	static jint layout_alignRight();
	static jint layout_alignStart();
	static jint layout_alignTop();
	static jint layout_alignWithParentIfMissing();
	static jint layout_below();
	static jint layout_centerHorizontal();
	static jint layout_centerInParent();
	static jint layout_centerVertical();
	static jint layout_column();
	static jint layout_columnSpan();
	static jint layout_columnWeight();
	static jint layout_gravity();
	static jint layout_height();
	static jint layout_margin();
	static jint layout_marginBottom();
	static jint layout_marginEnd();
	static jint layout_marginHorizontal();
	static jint layout_marginLeft();
	static jint layout_marginRight();
	static jint layout_marginStart();
	static jint layout_marginTop();
	static jint layout_marginVertical();
	static jint layout_row();
	static jint layout_rowSpan();
	static jint layout_rowWeight();
	static jint layout_scale();
	static jint layout_span();
	static jint layout_toEndOf();
	static jint layout_toLeftOf();
	static jint layout_toRightOf();
	static jint layout_toStartOf();
	static jint layout_weight();
	static jint layout_width();
	static jint layout_x();
	static jint layout_y();
	static jint left();
	static jint letterSpacing();
	static jint level();
	static jint lineHeight();
	static jint lineSpacingExtra();
	static jint lineSpacingMultiplier();
	static jint lines();
	static jint linksClickable();
	static jint listChoiceBackgroundIndicator();
	static jint listChoiceIndicatorMultiple();
	static jint listChoiceIndicatorSingle();
	static jint listDivider();
	static jint listDividerAlertDialog();
	static jint listMenuViewStyle();
	static jint listPopupWindowStyle();
	static jint listPreferredItemHeight();
	static jint listPreferredItemHeightLarge();
	static jint listPreferredItemHeightSmall();
	static jint listPreferredItemPaddingEnd();
	static jint listPreferredItemPaddingLeft();
	static jint listPreferredItemPaddingRight();
	static jint listPreferredItemPaddingStart();
	static jint listSelector();
	static jint listSeparatorTextViewStyle();
	static jint listViewStyle();
	static jint listViewWhiteStyle();
	static jint lockTaskMode();
	static jint logo();
	static jint logoDescription();
	static jint longClickable();
	static jint loopViews();
	static jint manageSpaceActivity();
	static jint mapViewStyle();
	static jint marqueeRepeatLimit();
	static jint matchOrder();
	static jint max();
	static jint maxAspectRatio();
	static jint maxButtonHeight();
	static jint maxDate();
	static jint maxEms();
	static jint maxHeight();
	static jint maxItemsPerRow();
	static jint maxLength();
	static jint maxLevel();
	static jint maxLines();
	static jint maxLongVersionCode();
	static jint maxRecents();
	static jint maxRows();
	static jint maxSdkVersion();
	static jint maxWidth();
	static jint maximumAngle();
	static jint measureAllChildren();
	static jint measureWithLargestChild();
	static jint mediaRouteButtonStyle();
	static jint mediaRouteTypes();
	static jint menuCategory();
	static jint mimeType();
	static jint min();
	static jint minDate();
	static jint minEms();
	static jint minHeight();
	static jint minLevel();
	static jint minLines();
	static jint minResizeHeight();
	static jint minResizeWidth();
	static jint minSdkVersion();
	static jint minWidth();
	static jint minimumHorizontalAngle();
	static jint minimumVerticalAngle();
	static jint mipMap();
	static jint mirrorForRtl();
	static jint mode();
	static jint moreIcon();
	static jint multiArch();
	static jint multiprocess();
	static jint name();
	static jint navigationBarColor();
	static jint navigationBarDividerColor();
	static jint navigationContentDescription();
	static jint navigationIcon();
	static jint navigationMode();
	static jint negativeButtonText();
	static jint nestedScrollingEnabled();
	static jint networkSecurityConfig();
	static jint nextClusterForward();
	static jint nextFocusDown();
	static jint nextFocusForward();
	static jint nextFocusLeft();
	static jint nextFocusRight();
	static jint nextFocusUp();
	static jint noHistory();
	static jint normalScreens();
	static jint notificationTimeout();
	static jint numColumns();
	static jint numStars();
	static jint numberPickerStyle();
	static jint numbersBackgroundColor();
	static jint numbersInnerTextColor();
	static jint numbersSelectorColor();
	static jint numbersTextColor();
	static jint numeric();
	static jint numericModifiers();
	static jint numericShortcut();
	static jint offset();
	static jint onClick();
	static jint oneshot();
	static jint opacity();
	static jint order();
	static jint orderInCategory();
	static jint ordering();
	static jint orderingFromXml();
	static jint orientation();
	static jint outAnimation();
	static jint outlineAmbientShadowColor();
	static jint outlineProvider();
	static jint outlineSpotShadowColor();
	static jint overScrollFooter();
	static jint overScrollHeader();
	static jint overScrollMode();
	static jint overlapAnchor();
	static jint overridesImplicitlyEnabledSubtype();
	static jint packageNames();
	static jint padding();
	static jint paddingBottom();
	static jint paddingEnd();
	static jint paddingHorizontal();
	static jint paddingLeft();
	static jint paddingMode();
	static jint paddingRight();
	static jint paddingStart();
	static jint paddingTop();
	static jint paddingVertical();
	static jint panelBackground();
	static jint panelColorBackground();
	static jint panelColorForeground();
	static jint panelFullBackground();
	static jint panelTextAppearance();
	static jint parentActivityName();
	static jint password();
	static jint path();
	static jint pathData();
	static jint pathPattern();
	static jint pathPrefix();
	static jint patternPathData();
	static jint permission();
	static jint permissionFlags();
	static jint permissionGroup();
	static jint permissionGroupFlags();
	static jint persistableMode();
	static jint persistent();
	static jint persistentDrawingCache();
	static jint persistentWhenFeatureAvailable();
	static jint phoneNumber();
	static jint pivotX();
	static jint pivotY();
	static jint pointerIcon();
	static jint popupAnimationStyle();
	static jint popupBackground();
	static jint popupCharacters();
	static jint popupElevation();
	static jint popupEnterTransition();
	static jint popupExitTransition();
	static jint popupKeyboard();
	static jint popupLayout();
	static jint popupMenuStyle();
	static jint popupTheme();
	static jint popupWindowStyle();
	static jint port();
	static jint positiveButtonText();
	static jint preferenceCategoryStyle();
	static jint preferenceFragmentStyle();
	static jint preferenceInformationStyle();
	static jint preferenceLayoutChild();
	static jint preferenceScreenStyle();
	static jint preferenceStyle();
	static jint presentationTheme();
	static jint previewImage();
	static jint primaryContentAlpha();
	static jint priority();
	static jint privateImeOptions();
	static jint process();
	static jint progress();
	static jint progressBackgroundTint();
	static jint progressBackgroundTintMode();
	static jint progressBarPadding();
	static jint progressBarStyle();
	static jint progressBarStyleHorizontal();
	static jint progressBarStyleInverse();
	static jint progressBarStyleLarge();
	static jint progressBarStyleLargeInverse();
	static jint progressBarStyleSmall();
	static jint progressBarStyleSmallInverse();
	static jint progressBarStyleSmallTitle();
	static jint progressDrawable();
	static jint progressTint();
	static jint progressTintMode();
	static jint prompt();
	static jint propertyName();
	static jint propertyXName();
	static jint propertyYName();
	static jint protectionLevel();
	static jint publicKey();
	static jint queryActionMsg();
	static jint queryAfterZeroResults();
	static jint queryBackground();
	static jint queryHint();
	static jint quickContactBadgeStyleSmallWindowLarge();
	static jint quickContactBadgeStyleSmallWindowMedium();
	static jint quickContactBadgeStyleSmallWindowSmall();
	static jint quickContactBadgeStyleWindowLarge();
	static jint quickContactBadgeStyleWindowMedium();
	static jint quickContactBadgeStyleWindowSmall();
	static jint radioButtonStyle();
	static jint radius();
	static jint rating();
	static jint ratingBarStyle();
	static jint ratingBarStyleIndicator();
	static jint ratingBarStyleSmall();
	static jint readPermission();
	static jint recognitionService();
	static jint recreateOnConfigChanges();
	static jint recycleEnabled();
	static jint relinquishTaskIdentity();
	static jint reparent();
	static jint reparentWithOverlay();
	static jint repeatCount();
	static jint repeatMode();
	static jint reqFiveWayNav();
	static jint reqHardKeyboard();
	static jint reqKeyboardType();
	static jint reqNavigation();
	static jint reqTouchScreen();
	static jint requireDeviceUnlock();
	static jint required();
	static jint requiredAccountType();
	static jint requiredFeature();
	static jint requiredForAllUsers();
	static jint requiredNotFeature();
	static jint requiresFadingEdge();
	static jint requiresSmallestWidthDp();
	static jint resizeClip();
	static jint resizeMode();
	static jint resizeable();
	static jint resizeableActivity();
	static jint resource();
	static jint restoreAnyVersion();
	static jint restoreNeedsApplication();
	static jint restrictedAccountType();
	static jint restrictionType();
	static jint resumeWhilePausing();
	static jint reversible();
	static jint revisionCode();
	static jint right();
	static jint ringtonePreferenceStyle();
	static jint ringtoneType();
	static jint rotation();
	static jint rotationAnimation();
	static jint rotationX();
	static jint rotationY();
	static jint roundIcon();
	static jint rowCount();
	static jint rowDelay();
	static jint rowEdgeFlags();
	static jint rowHeight();
	static jint rowOrderPreserved();
	static jint saveEnabled();
	static jint scaleGravity();
	static jint scaleHeight();
	static jint scaleType();
	static jint scaleWidth();
	static jint scaleX();
	static jint scaleY();
	static jint scheme();
	static jint screenDensity();
	static jint screenOrientation();
	static jint screenReaderFocusable();
	static jint screenSize();
	static jint scrollHorizontally();
	static jint scrollIndicators();
	static jint scrollViewStyle();
	static jint scrollX();
	static jint scrollY();
	static jint scrollbarAlwaysDrawHorizontalTrack();
	static jint scrollbarAlwaysDrawVerticalTrack();
	static jint scrollbarDefaultDelayBeforeFade();
	static jint scrollbarFadeDuration();
	static jint scrollbarSize();
	static jint scrollbarStyle();
	static jint scrollbarThumbHorizontal();
	static jint scrollbarThumbVertical();
	static jint scrollbarTrackHorizontal();
	static jint scrollbarTrackVertical();
	static jint scrollbars();
	static jint scrollingCache();
	static jint searchButtonText();
	static jint searchHintIcon();
	static jint searchIcon();
	static jint searchMode();
	static jint searchSettingsDescription();
	static jint searchSuggestAuthority();
	static jint searchSuggestIntentAction();
	static jint searchSuggestIntentData();
	static jint searchSuggestPath();
	static jint searchSuggestSelection();
	static jint searchSuggestThreshold();
	static jint searchViewStyle();
	static jint secondaryContentAlpha();
	static jint secondaryProgress();
	static jint secondaryProgressTint();
	static jint secondaryProgressTintMode();
	static jint seekBarStyle();
	static jint segmentedButtonStyle();
	static jint selectAllOnFocus();
	static jint selectable();
	static jint selectableItemBackground();
	static jint selectableItemBackgroundBorderless();
	static jint selectedDateVerticalBar();
	static jint selectedWeekBackgroundColor();
	static jint sessionService();
	static jint settingsActivity();
	static jint setupActivity();
	static jint shadowColor();
	static jint shadowDx();
	static jint shadowDy();
	static jint shadowRadius();
	static jint shape();
	static jint shareInterpolator();
	static jint sharedUserId();
	static jint sharedUserLabel();
	static jint shortcutDisabledMessage();
	static jint shortcutId();
	static jint shortcutLongLabel();
	static jint shortcutShortLabel();
	static jint shouldDisableView();
	static jint showAsAction();
	static jint showDefault();
	static jint showDividers();
	static jint showForAllUsers();
	static jint showMetadataInPreview();
	static jint showOnLockScreen();
	static jint showSilent();
	static jint showText();
	static jint showWeekNumber();
	static jint showWhenLocked();
	static jint shownWeekCount();
	static jint shrinkColumns();
	static jint singleLine();
	static jint singleLineTitle();
	static jint singleUser();
	static jint slideEdge();
	static jint smallIcon();
	static jint smallScreens();
	static jint smoothScrollbar();
	static jint soundEffectsEnabled();
	static jint spacing();
	static jint spinnerDropDownItemStyle();
	static jint spinnerItemStyle();
	static jint spinnerMode();
	static jint spinnerStyle();
	static jint spinnersShown();
	static jint splitMotionEvents();
	static jint splitName();
	static jint splitTrack();
	static jint spotShadowAlpha();
	static jint src();
	static jint ssp();
	static jint sspPattern();
	static jint sspPrefix();
	static jint stackFromBottom();
	static jint stackViewStyle();
	static jint starStyle();
	static jint start();
	static jint startColor();
	static jint startDelay();
	static jint startOffset();
	static jint startX();
	static jint startY();
	static jint startYear();
	static jint stateListAnimator();
	static jint stateNotNeeded();
	static jint state_above_anchor();
	static jint state_accelerated();
	static jint state_activated();
	static jint state_active();
	static jint state_checkable();
	static jint state_checked();
	static jint state_drag_can_accept();
	static jint state_drag_hovered();
	static jint state_empty();
	static jint state_enabled();
	static jint state_expanded();
	static jint state_first();
	static jint state_focused();
	static jint state_hovered();
	static jint state_last();
	static jint state_long_pressable();
	static jint state_middle();
	static jint state_multiline();
	static jint state_pressed();
	static jint state_selected();
	static jint state_single();
	static jint state_window_focused();
	static jint staticWallpaperPreview();
	static jint statusBarColor();
	static jint stepSize();
	static jint stopWithTask();
	static jint streamType();
	static jint stretchColumns();
	static jint stretchMode();
	static jint strokeAlpha();
	static jint strokeColor();
	static jint strokeLineCap();
	static jint strokeLineJoin();
	static jint strokeMiterLimit();
	static jint strokeWidth();
	static jint subMenuArrow();
	static jint submitBackground();
	static jint subtitle();
	static jint subtitleTextAppearance();
	static jint subtitleTextColor();
	static jint subtitleTextStyle();
	static jint subtypeExtraValue();
	static jint subtypeId();
	static jint subtypeLocale();
	static jint suggestActionMsg();
	static jint suggestActionMsgColumn();
	static jint suggestionRowLayout();
	static jint summary();
	static jint summaryColumn();
	static jint summaryOff();
	static jint summaryOn();
	static jint supportsAssist();
	static jint supportsLaunchVoiceAssistFromKeyguard();
	static jint supportsLocalInteraction();
	static jint supportsPictureInPicture();
	static jint supportsRtl();
	static jint supportsSwitchingToNextInputMethod();
	static jint supportsUploading();
	static jint switchMinWidth();
	static jint switchPadding();
	static jint switchPreferenceStyle();
	static jint switchStyle();
	static jint switchTextAppearance();
	static jint switchTextOff();
	static jint switchTextOn();
	static jint syncable();
	static jint tabStripEnabled();
	static jint tabStripLeft();
	static jint tabStripRight();
	static jint tabWidgetStyle();
	static jint tag();
	static jint targetActivity();
	static jint targetClass();
	static jint targetDescriptions();
	static jint targetId();
	static jint targetName();
	static jint targetPackage();
	static jint targetProcesses();
	static jint targetSandboxVersion();
	static jint targetSdkVersion();
	static jint taskAffinity();
	static jint taskCloseEnterAnimation();
	static jint taskCloseExitAnimation();
	static jint taskOpenEnterAnimation();
	static jint taskOpenExitAnimation();
	static jint taskToBackEnterAnimation();
	static jint taskToBackExitAnimation();
	static jint taskToFrontEnterAnimation();
	static jint taskToFrontExitAnimation();
	static jint tension();
	static jint testOnly();
	static jint text();
	static jint textAlignment();
	static jint textAllCaps();
	static jint textAppearance();
	static jint textAppearanceButton();
	static jint textAppearanceInverse();
	static jint textAppearanceLarge();
	static jint textAppearanceLargeInverse();
	static jint textAppearanceLargePopupMenu();
	static jint textAppearanceListItem();
	static jint textAppearanceListItemSecondary();
	static jint textAppearanceListItemSmall();
	static jint textAppearanceMedium();
	static jint textAppearanceMediumInverse();
	static jint textAppearancePopupMenuHeader();
	static jint textAppearanceSearchResultSubtitle();
	static jint textAppearanceSearchResultTitle();
	static jint textAppearanceSmall();
	static jint textAppearanceSmallInverse();
	static jint textAppearanceSmallPopupMenu();
	static jint textCheckMark();
	static jint textCheckMarkInverse();
	static jint textColor();
	static jint textColorAlertDialogListItem();
	static jint textColorHighlight();
	static jint textColorHighlightInverse();
	static jint textColorHint();
	static jint textColorHintInverse();
	static jint textColorLink();
	static jint textColorLinkInverse();
	static jint textColorPrimary();
	static jint textColorPrimaryDisableOnly();
	static jint textColorPrimaryInverse();
	static jint textColorPrimaryInverseDisableOnly();
	static jint textColorPrimaryInverseNoDisable();
	static jint textColorPrimaryNoDisable();
	static jint textColorSecondary();
	static jint textColorSecondaryInverse();
	static jint textColorSecondaryInverseNoDisable();
	static jint textColorSecondaryNoDisable();
	static jint textColorTertiary();
	static jint textColorTertiaryInverse();
	static jint textCursorDrawable();
	static jint textDirection();
	static jint textEditNoPasteWindowLayout();
	static jint textEditPasteWindowLayout();
	static jint textEditSideNoPasteWindowLayout();
	static jint textEditSidePasteWindowLayout();
	static jint textEditSuggestionItemLayout();
	static jint textFilterEnabled();
	static jint textFontWeight();
	static jint textIsSelectable();
	static jint textOff();
	static jint textOn();
	static jint textScaleX();
	static jint textSelectHandle();
	static jint textSelectHandleLeft();
	static jint textSelectHandleRight();
	static jint textSelectHandleWindowStyle();
	static jint textSize();
	static jint textStyle();
	static jint textSuggestionsWindowStyle();
	static jint textViewStyle();
	static jint theme();
	static jint thickness();
	static jint thicknessRatio();
	static jint thumb();
	static jint thumbOffset();
	static jint thumbPosition();
	static jint thumbTextPadding();
	static jint thumbTint();
	static jint thumbTintMode();
	static jint thumbnail();
	static jint tickMark();
	static jint tickMarkTint();
	static jint tickMarkTintMode();
	static jint tileMode();
	static jint tileModeX();
	static jint tileModeY();
	static jint timePickerDialogTheme();
	static jint timePickerMode();
	static jint timePickerStyle();
	static jint timeZone();
	static jint tint();
	static jint tintMode();
	static jint title();
	static jint titleCondensed();
	static jint titleMargin();
	static jint titleMarginBottom();
	static jint titleMarginEnd();
	static jint titleMarginStart();
	static jint titleMarginTop();
	static jint titleTextAppearance();
	static jint titleTextColor();
	static jint titleTextStyle();
	static jint toAlpha();
	static jint toDegrees();
	static jint toId();
	static jint toScene();
	static jint toXDelta();
	static jint toXScale();
	static jint toYDelta();
	static jint toYScale();
	static jint toolbarStyle();
	static jint tooltipText();
	static jint top();
	static jint topBright();
	static jint topDark();
	static jint topLeftRadius();
	static jint topOffset();
	static jint topRightRadius();
	static jint touchscreenBlocksFocus();
	static jint track();
	static jint trackTint();
	static jint trackTintMode();
	static jint transcriptMode();
	static jint transformPivotX();
	static jint transformPivotY();
	static jint transition();
	static jint transitionGroup();
	static jint transitionName();
	static jint transitionOrdering();
	static jint transitionVisibilityMode();
	static jint translateX();
	static jint translateY();
	static jint translationX();
	static jint translationY();
	static jint translationZ();
	static jint trimPathEnd();
	static jint trimPathOffset();
	static jint trimPathStart();
	static jint ttcIndex();
	static jint tunerCount();
	static jint turnScreenOn();
	static jint type();
	static jint typeface();
	static jint uiOptions();
	static jint uncertainGestureColor();
	static jint unfocusedMonthDateColor();
	static jint unselectedAlpha();
	static jint updatePeriodMillis();
	static jint use32bitAbi();
	static jint useDefaultMargins();
	static jint useIntrinsicSizeAsMinimum();
	static jint useLevel();
	static jint userVisible();
	static jint usesCleartextTraffic();
	static jint value();
	static jint valueFrom();
	static jint valueTo();
	static jint valueType();
	static jint variablePadding();
	static jint vendor();
	static jint version();
	static jint versionCode();
	static jint versionCodeMajor();
	static jint versionMajor();
	static jint versionName();
	static jint verticalCorrection();
	static jint verticalDivider();
	static jint verticalGap();
	static jint verticalScrollbarPosition();
	static jint verticalSpacing();
	static jint viewportHeight();
	static jint viewportWidth();
	static jint visibility();
	static jint visible();
	static jint visibleToInstantApps();
	static jint vmSafeMode();
	static jint voiceIcon();
	static jint voiceLanguage();
	static jint voiceLanguageModel();
	static jint voiceMaxResults();
	static jint voicePromptText();
	static jint voiceSearchMode();
	static jint wallpaperCloseEnterAnimation();
	static jint wallpaperCloseExitAnimation();
	static jint wallpaperIntraCloseEnterAnimation();
	static jint wallpaperIntraCloseExitAnimation();
	static jint wallpaperIntraOpenEnterAnimation();
	static jint wallpaperIntraOpenExitAnimation();
	static jint wallpaperOpenEnterAnimation();
	static jint wallpaperOpenExitAnimation();
	static jint webTextViewStyle();
	static jint webViewStyle();
	static jint weekDayTextAppearance();
	static jint weekNumberColor();
	static jint weekSeparatorLineColor();
	static jint weightSum();
	static jint widgetCategory();
	static jint widgetFeatures();
	static jint widgetLayout();
	static jint width();
	static jint windowActionBar();
	static jint windowActionBarOverlay();
	static jint windowActionModeOverlay();
	static jint windowActivityTransitions();
	static jint windowAllowEnterTransitionOverlap();
	static jint windowAllowReturnTransitionOverlap();
	static jint windowAnimationStyle();
	static jint windowBackground();
	static jint windowBackgroundFallback();
	static jint windowClipToOutline();
	static jint windowCloseOnTouchOutside();
	static jint windowContentOverlay();
	static jint windowContentTransitionManager();
	static jint windowContentTransitions();
	static jint windowDisablePreview();
	static jint windowDrawsSystemBarBackgrounds();
	static jint windowElevation();
	static jint windowEnableSplitTouch();
	static jint windowEnterAnimation();
	static jint windowEnterTransition();
	static jint windowExitAnimation();
	static jint windowExitTransition();
	static jint windowFrame();
	static jint windowFullscreen();
	static jint windowHideAnimation();
	static jint windowIsFloating();
	static jint windowIsTranslucent();
	static jint windowLayoutInDisplayCutoutMode();
	static jint windowLightNavigationBar();
	static jint windowLightStatusBar();
	static jint windowMinWidthMajor();
	static jint windowMinWidthMinor();
	static jint windowNoDisplay();
	static jint windowNoTitle();
	static jint windowOverscan();
	static jint windowReenterTransition();
	static jint windowReturnTransition();
	static jint windowSharedElementEnterTransition();
	static jint windowSharedElementExitTransition();
	static jint windowSharedElementReenterTransition();
	static jint windowSharedElementReturnTransition();
	static jint windowSharedElementsUseOverlay();
	static jint windowShowAnimation();
	static jint windowShowWallpaper();
	static jint windowSoftInputMode();
	static jint windowSplashscreenContent();
	static jint windowSwipeToDismiss();
	static jint windowTitleBackgroundStyle();
	static jint windowTitleSize();
	static jint windowTitleStyle();
	static jint windowTransitionBackgroundFadeDuration();
	static jint windowTranslucentNavigation();
	static jint windowTranslucentStatus();
	static jint writePermission();
	static jint x();
	static jint xlargeScreens();
	static jint y();
	static jint yearListItemTextAppearance();
	static jint yearListSelectorColor();
	static jint yesNoPreferenceStyle();
	static jint zAdjustment();

	static ref<R_attr> new_object();

protected:

	R_attr(handle_type h) : base_(h) {}

};

} // namespace android
} // namespace scapix::java_api


namespace scapix::java_api {
namespace android {

inline jint R_attr::absListViewStyle() { return get_static_field<SCAPIX_META_STRING("absListViewStyle"), jint>(); }
inline jint R_attr::accessibilityEventTypes() { return get_static_field<SCAPIX_META_STRING("accessibilityEventTypes"), jint>(); }
inline jint R_attr::accessibilityFeedbackType() { return get_static_field<SCAPIX_META_STRING("accessibilityFeedbackType"), jint>(); }
inline jint R_attr::accessibilityFlags() { return get_static_field<SCAPIX_META_STRING("accessibilityFlags"), jint>(); }
inline jint R_attr::accessibilityHeading() { return get_static_field<SCAPIX_META_STRING("accessibilityHeading"), jint>(); }
inline jint R_attr::accessibilityLiveRegion() { return get_static_field<SCAPIX_META_STRING("accessibilityLiveRegion"), jint>(); }
inline jint R_attr::accessibilityPaneTitle() { return get_static_field<SCAPIX_META_STRING("accessibilityPaneTitle"), jint>(); }
inline jint R_attr::accessibilityTraversalAfter() { return get_static_field<SCAPIX_META_STRING("accessibilityTraversalAfter"), jint>(); }
inline jint R_attr::accessibilityTraversalBefore() { return get_static_field<SCAPIX_META_STRING("accessibilityTraversalBefore"), jint>(); }
inline jint R_attr::accountPreferences() { return get_static_field<SCAPIX_META_STRING("accountPreferences"), jint>(); }
inline jint R_attr::accountType() { return get_static_field<SCAPIX_META_STRING("accountType"), jint>(); }
inline jint R_attr::action() { return get_static_field<SCAPIX_META_STRING("action"), jint>(); }
inline jint R_attr::actionBarDivider() { return get_static_field<SCAPIX_META_STRING("actionBarDivider"), jint>(); }
inline jint R_attr::actionBarItemBackground() { return get_static_field<SCAPIX_META_STRING("actionBarItemBackground"), jint>(); }
inline jint R_attr::actionBarPopupTheme() { return get_static_field<SCAPIX_META_STRING("actionBarPopupTheme"), jint>(); }
inline jint R_attr::actionBarSize() { return get_static_field<SCAPIX_META_STRING("actionBarSize"), jint>(); }
inline jint R_attr::actionBarSplitStyle() { return get_static_field<SCAPIX_META_STRING("actionBarSplitStyle"), jint>(); }
inline jint R_attr::actionBarStyle() { return get_static_field<SCAPIX_META_STRING("actionBarStyle"), jint>(); }
inline jint R_attr::actionBarTabBarStyle() { return get_static_field<SCAPIX_META_STRING("actionBarTabBarStyle"), jint>(); }
inline jint R_attr::actionBarTabStyle() { return get_static_field<SCAPIX_META_STRING("actionBarTabStyle"), jint>(); }
inline jint R_attr::actionBarTabTextStyle() { return get_static_field<SCAPIX_META_STRING("actionBarTabTextStyle"), jint>(); }
inline jint R_attr::actionBarTheme() { return get_static_field<SCAPIX_META_STRING("actionBarTheme"), jint>(); }
inline jint R_attr::actionBarWidgetTheme() { return get_static_field<SCAPIX_META_STRING("actionBarWidgetTheme"), jint>(); }
inline jint R_attr::actionButtonStyle() { return get_static_field<SCAPIX_META_STRING("actionButtonStyle"), jint>(); }
inline jint R_attr::actionDropDownStyle() { return get_static_field<SCAPIX_META_STRING("actionDropDownStyle"), jint>(); }
inline jint R_attr::actionLayout() { return get_static_field<SCAPIX_META_STRING("actionLayout"), jint>(); }
inline jint R_attr::actionMenuTextAppearance() { return get_static_field<SCAPIX_META_STRING("actionMenuTextAppearance"), jint>(); }
inline jint R_attr::actionMenuTextColor() { return get_static_field<SCAPIX_META_STRING("actionMenuTextColor"), jint>(); }
inline jint R_attr::actionModeBackground() { return get_static_field<SCAPIX_META_STRING("actionModeBackground"), jint>(); }
inline jint R_attr::actionModeCloseButtonStyle() { return get_static_field<SCAPIX_META_STRING("actionModeCloseButtonStyle"), jint>(); }
inline jint R_attr::actionModeCloseDrawable() { return get_static_field<SCAPIX_META_STRING("actionModeCloseDrawable"), jint>(); }
inline jint R_attr::actionModeCopyDrawable() { return get_static_field<SCAPIX_META_STRING("actionModeCopyDrawable"), jint>(); }
inline jint R_attr::actionModeCutDrawable() { return get_static_field<SCAPIX_META_STRING("actionModeCutDrawable"), jint>(); }
inline jint R_attr::actionModeFindDrawable() { return get_static_field<SCAPIX_META_STRING("actionModeFindDrawable"), jint>(); }
inline jint R_attr::actionModePasteDrawable() { return get_static_field<SCAPIX_META_STRING("actionModePasteDrawable"), jint>(); }
inline jint R_attr::actionModeSelectAllDrawable() { return get_static_field<SCAPIX_META_STRING("actionModeSelectAllDrawable"), jint>(); }
inline jint R_attr::actionModeShareDrawable() { return get_static_field<SCAPIX_META_STRING("actionModeShareDrawable"), jint>(); }
inline jint R_attr::actionModeSplitBackground() { return get_static_field<SCAPIX_META_STRING("actionModeSplitBackground"), jint>(); }
inline jint R_attr::actionModeStyle() { return get_static_field<SCAPIX_META_STRING("actionModeStyle"), jint>(); }
inline jint R_attr::actionModeWebSearchDrawable() { return get_static_field<SCAPIX_META_STRING("actionModeWebSearchDrawable"), jint>(); }
inline jint R_attr::actionOverflowButtonStyle() { return get_static_field<SCAPIX_META_STRING("actionOverflowButtonStyle"), jint>(); }
inline jint R_attr::actionOverflowMenuStyle() { return get_static_field<SCAPIX_META_STRING("actionOverflowMenuStyle"), jint>(); }
inline jint R_attr::actionProviderClass() { return get_static_field<SCAPIX_META_STRING("actionProviderClass"), jint>(); }
inline jint R_attr::actionViewClass() { return get_static_field<SCAPIX_META_STRING("actionViewClass"), jint>(); }
inline jint R_attr::activatedBackgroundIndicator() { return get_static_field<SCAPIX_META_STRING("activatedBackgroundIndicator"), jint>(); }
inline jint R_attr::activityCloseEnterAnimation() { return get_static_field<SCAPIX_META_STRING("activityCloseEnterAnimation"), jint>(); }
inline jint R_attr::activityCloseExitAnimation() { return get_static_field<SCAPIX_META_STRING("activityCloseExitAnimation"), jint>(); }
inline jint R_attr::activityOpenEnterAnimation() { return get_static_field<SCAPIX_META_STRING("activityOpenEnterAnimation"), jint>(); }
inline jint R_attr::activityOpenExitAnimation() { return get_static_field<SCAPIX_META_STRING("activityOpenExitAnimation"), jint>(); }
inline jint R_attr::addPrintersActivity() { return get_static_field<SCAPIX_META_STRING("addPrintersActivity"), jint>(); }
inline jint R_attr::addStatesFromChildren() { return get_static_field<SCAPIX_META_STRING("addStatesFromChildren"), jint>(); }
inline jint R_attr::adjustViewBounds() { return get_static_field<SCAPIX_META_STRING("adjustViewBounds"), jint>(); }
inline jint R_attr::advancedPrintOptionsActivity() { return get_static_field<SCAPIX_META_STRING("advancedPrintOptionsActivity"), jint>(); }
inline jint R_attr::alertDialogIcon() { return get_static_field<SCAPIX_META_STRING("alertDialogIcon"), jint>(); }
inline jint R_attr::alertDialogStyle() { return get_static_field<SCAPIX_META_STRING("alertDialogStyle"), jint>(); }
inline jint R_attr::alertDialogTheme() { return get_static_field<SCAPIX_META_STRING("alertDialogTheme"), jint>(); }
inline jint R_attr::alignmentMode() { return get_static_field<SCAPIX_META_STRING("alignmentMode"), jint>(); }
inline jint R_attr::allContactsName() { return get_static_field<SCAPIX_META_STRING("allContactsName"), jint>(); }
inline jint R_attr::allowBackup() { return get_static_field<SCAPIX_META_STRING("allowBackup"), jint>(); }
inline jint R_attr::allowClearUserData() { return get_static_field<SCAPIX_META_STRING("allowClearUserData"), jint>(); }
inline jint R_attr::allowEmbedded() { return get_static_field<SCAPIX_META_STRING("allowEmbedded"), jint>(); }
inline jint R_attr::allowParallelSyncs() { return get_static_field<SCAPIX_META_STRING("allowParallelSyncs"), jint>(); }
inline jint R_attr::allowSingleTap() { return get_static_field<SCAPIX_META_STRING("allowSingleTap"), jint>(); }
inline jint R_attr::allowTaskReparenting() { return get_static_field<SCAPIX_META_STRING("allowTaskReparenting"), jint>(); }
inline jint R_attr::allowUndo() { return get_static_field<SCAPIX_META_STRING("allowUndo"), jint>(); }
inline jint R_attr::alpha() { return get_static_field<SCAPIX_META_STRING("alpha"), jint>(); }
inline jint R_attr::alphabeticModifiers() { return get_static_field<SCAPIX_META_STRING("alphabeticModifiers"), jint>(); }
inline jint R_attr::alphabeticShortcut() { return get_static_field<SCAPIX_META_STRING("alphabeticShortcut"), jint>(); }
inline jint R_attr::alwaysDrawnWithCache() { return get_static_field<SCAPIX_META_STRING("alwaysDrawnWithCache"), jint>(); }
inline jint R_attr::alwaysRetainTaskState() { return get_static_field<SCAPIX_META_STRING("alwaysRetainTaskState"), jint>(); }
inline jint R_attr::amPmBackgroundColor() { return get_static_field<SCAPIX_META_STRING("amPmBackgroundColor"), jint>(); }
inline jint R_attr::amPmTextColor() { return get_static_field<SCAPIX_META_STRING("amPmTextColor"), jint>(); }
inline jint R_attr::ambientShadowAlpha() { return get_static_field<SCAPIX_META_STRING("ambientShadowAlpha"), jint>(); }
inline jint R_attr::angle() { return get_static_field<SCAPIX_META_STRING("angle"), jint>(); }
inline jint R_attr::animateFirstView() { return get_static_field<SCAPIX_META_STRING("animateFirstView"), jint>(); }
inline jint R_attr::animateLayoutChanges() { return get_static_field<SCAPIX_META_STRING("animateLayoutChanges"), jint>(); }
inline jint R_attr::animateOnClick() { return get_static_field<SCAPIX_META_STRING("animateOnClick"), jint>(); }
inline jint R_attr::animation() { return get_static_field<SCAPIX_META_STRING("animation"), jint>(); }
inline jint R_attr::animationCache() { return get_static_field<SCAPIX_META_STRING("animationCache"), jint>(); }
inline jint R_attr::animationDuration() { return get_static_field<SCAPIX_META_STRING("animationDuration"), jint>(); }
inline jint R_attr::animationOrder() { return get_static_field<SCAPIX_META_STRING("animationOrder"), jint>(); }
inline jint R_attr::animationResolution() { return get_static_field<SCAPIX_META_STRING("animationResolution"), jint>(); }
inline jint R_attr::antialias() { return get_static_field<SCAPIX_META_STRING("antialias"), jint>(); }
inline jint R_attr::anyDensity() { return get_static_field<SCAPIX_META_STRING("anyDensity"), jint>(); }
inline jint R_attr::apduServiceBanner() { return get_static_field<SCAPIX_META_STRING("apduServiceBanner"), jint>(); }
inline jint R_attr::apiKey() { return get_static_field<SCAPIX_META_STRING("apiKey"), jint>(); }
inline jint R_attr::appCategory() { return get_static_field<SCAPIX_META_STRING("appCategory"), jint>(); }
inline jint R_attr::appComponentFactory() { return get_static_field<SCAPIX_META_STRING("appComponentFactory"), jint>(); }
inline jint R_attr::author() { return get_static_field<SCAPIX_META_STRING("author"), jint>(); }
inline jint R_attr::authorities() { return get_static_field<SCAPIX_META_STRING("authorities"), jint>(); }
inline jint R_attr::autoAdvanceViewId() { return get_static_field<SCAPIX_META_STRING("autoAdvanceViewId"), jint>(); }
inline jint R_attr::autoCompleteTextViewStyle() { return get_static_field<SCAPIX_META_STRING("autoCompleteTextViewStyle"), jint>(); }
inline jint R_attr::autoLink() { return get_static_field<SCAPIX_META_STRING("autoLink"), jint>(); }
inline jint R_attr::autoMirrored() { return get_static_field<SCAPIX_META_STRING("autoMirrored"), jint>(); }
inline jint R_attr::autoRemoveFromRecents() { return get_static_field<SCAPIX_META_STRING("autoRemoveFromRecents"), jint>(); }
inline jint R_attr::autoSizeMaxTextSize() { return get_static_field<SCAPIX_META_STRING("autoSizeMaxTextSize"), jint>(); }
inline jint R_attr::autoSizeMinTextSize() { return get_static_field<SCAPIX_META_STRING("autoSizeMinTextSize"), jint>(); }
inline jint R_attr::autoSizePresetSizes() { return get_static_field<SCAPIX_META_STRING("autoSizePresetSizes"), jint>(); }
inline jint R_attr::autoSizeStepGranularity() { return get_static_field<SCAPIX_META_STRING("autoSizeStepGranularity"), jint>(); }
inline jint R_attr::autoSizeTextType() { return get_static_field<SCAPIX_META_STRING("autoSizeTextType"), jint>(); }
inline jint R_attr::autoStart() { return get_static_field<SCAPIX_META_STRING("autoStart"), jint>(); }
inline jint R_attr::autoText() { return get_static_field<SCAPIX_META_STRING("autoText"), jint>(); }
inline jint R_attr::autoUrlDetect() { return get_static_field<SCAPIX_META_STRING("autoUrlDetect"), jint>(); }
inline jint R_attr::autoVerify() { return get_static_field<SCAPIX_META_STRING("autoVerify"), jint>(); }
inline jint R_attr::autofillHints() { return get_static_field<SCAPIX_META_STRING("autofillHints"), jint>(); }
inline jint R_attr::autofilledHighlight() { return get_static_field<SCAPIX_META_STRING("autofilledHighlight"), jint>(); }
inline jint R_attr::background() { return get_static_field<SCAPIX_META_STRING("background"), jint>(); }
inline jint R_attr::backgroundDimAmount() { return get_static_field<SCAPIX_META_STRING("backgroundDimAmount"), jint>(); }
inline jint R_attr::backgroundDimEnabled() { return get_static_field<SCAPIX_META_STRING("backgroundDimEnabled"), jint>(); }
inline jint R_attr::backgroundSplit() { return get_static_field<SCAPIX_META_STRING("backgroundSplit"), jint>(); }
inline jint R_attr::backgroundStacked() { return get_static_field<SCAPIX_META_STRING("backgroundStacked"), jint>(); }
inline jint R_attr::backgroundTint() { return get_static_field<SCAPIX_META_STRING("backgroundTint"), jint>(); }
inline jint R_attr::backgroundTintMode() { return get_static_field<SCAPIX_META_STRING("backgroundTintMode"), jint>(); }
inline jint R_attr::backupAgent() { return get_static_field<SCAPIX_META_STRING("backupAgent"), jint>(); }
inline jint R_attr::backupInForeground() { return get_static_field<SCAPIX_META_STRING("backupInForeground"), jint>(); }
inline jint R_attr::banner() { return get_static_field<SCAPIX_META_STRING("banner"), jint>(); }
inline jint R_attr::baseline() { return get_static_field<SCAPIX_META_STRING("baseline"), jint>(); }
inline jint R_attr::baselineAlignBottom() { return get_static_field<SCAPIX_META_STRING("baselineAlignBottom"), jint>(); }
inline jint R_attr::baselineAligned() { return get_static_field<SCAPIX_META_STRING("baselineAligned"), jint>(); }
inline jint R_attr::baselineAlignedChildIndex() { return get_static_field<SCAPIX_META_STRING("baselineAlignedChildIndex"), jint>(); }
inline jint R_attr::bitmap() { return get_static_field<SCAPIX_META_STRING("bitmap"), jint>(); }
inline jint R_attr::borderlessButtonStyle() { return get_static_field<SCAPIX_META_STRING("borderlessButtonStyle"), jint>(); }
inline jint R_attr::bottom() { return get_static_field<SCAPIX_META_STRING("bottom"), jint>(); }
inline jint R_attr::bottomBright() { return get_static_field<SCAPIX_META_STRING("bottomBright"), jint>(); }
inline jint R_attr::bottomDark() { return get_static_field<SCAPIX_META_STRING("bottomDark"), jint>(); }
inline jint R_attr::bottomLeftRadius() { return get_static_field<SCAPIX_META_STRING("bottomLeftRadius"), jint>(); }
inline jint R_attr::bottomMedium() { return get_static_field<SCAPIX_META_STRING("bottomMedium"), jint>(); }
inline jint R_attr::bottomOffset() { return get_static_field<SCAPIX_META_STRING("bottomOffset"), jint>(); }
inline jint R_attr::bottomRightRadius() { return get_static_field<SCAPIX_META_STRING("bottomRightRadius"), jint>(); }
inline jint R_attr::breadCrumbShortTitle() { return get_static_field<SCAPIX_META_STRING("breadCrumbShortTitle"), jint>(); }
inline jint R_attr::breadCrumbTitle() { return get_static_field<SCAPIX_META_STRING("breadCrumbTitle"), jint>(); }
inline jint R_attr::breakStrategy() { return get_static_field<SCAPIX_META_STRING("breakStrategy"), jint>(); }
inline jint R_attr::bufferType() { return get_static_field<SCAPIX_META_STRING("bufferType"), jint>(); }
inline jint R_attr::button() { return get_static_field<SCAPIX_META_STRING("button"), jint>(); }
inline jint R_attr::buttonBarButtonStyle() { return get_static_field<SCAPIX_META_STRING("buttonBarButtonStyle"), jint>(); }
inline jint R_attr::buttonBarNegativeButtonStyle() { return get_static_field<SCAPIX_META_STRING("buttonBarNegativeButtonStyle"), jint>(); }
inline jint R_attr::buttonBarNeutralButtonStyle() { return get_static_field<SCAPIX_META_STRING("buttonBarNeutralButtonStyle"), jint>(); }
inline jint R_attr::buttonBarPositiveButtonStyle() { return get_static_field<SCAPIX_META_STRING("buttonBarPositiveButtonStyle"), jint>(); }
inline jint R_attr::buttonBarStyle() { return get_static_field<SCAPIX_META_STRING("buttonBarStyle"), jint>(); }
inline jint R_attr::buttonCornerRadius() { return get_static_field<SCAPIX_META_STRING("buttonCornerRadius"), jint>(); }
inline jint R_attr::buttonGravity() { return get_static_field<SCAPIX_META_STRING("buttonGravity"), jint>(); }
inline jint R_attr::buttonStyle() { return get_static_field<SCAPIX_META_STRING("buttonStyle"), jint>(); }
inline jint R_attr::buttonStyleInset() { return get_static_field<SCAPIX_META_STRING("buttonStyleInset"), jint>(); }
inline jint R_attr::buttonStyleSmall() { return get_static_field<SCAPIX_META_STRING("buttonStyleSmall"), jint>(); }
inline jint R_attr::buttonStyleToggle() { return get_static_field<SCAPIX_META_STRING("buttonStyleToggle"), jint>(); }
inline jint R_attr::buttonTint() { return get_static_field<SCAPIX_META_STRING("buttonTint"), jint>(); }
inline jint R_attr::buttonTintMode() { return get_static_field<SCAPIX_META_STRING("buttonTintMode"), jint>(); }
inline jint R_attr::cacheColorHint() { return get_static_field<SCAPIX_META_STRING("cacheColorHint"), jint>(); }
inline jint R_attr::calendarTextColor() { return get_static_field<SCAPIX_META_STRING("calendarTextColor"), jint>(); }
inline jint R_attr::calendarViewShown() { return get_static_field<SCAPIX_META_STRING("calendarViewShown"), jint>(); }
inline jint R_attr::calendarViewStyle() { return get_static_field<SCAPIX_META_STRING("calendarViewStyle"), jint>(); }
inline jint R_attr::canControlMagnification() { return get_static_field<SCAPIX_META_STRING("canControlMagnification"), jint>(); }
inline jint R_attr::canPerformGestures() { return get_static_field<SCAPIX_META_STRING("canPerformGestures"), jint>(); }
inline jint R_attr::canRecord() { return get_static_field<SCAPIX_META_STRING("canRecord"), jint>(); }
inline jint R_attr::canRequestEnhancedWebAccessibility() { return get_static_field<SCAPIX_META_STRING("canRequestEnhancedWebAccessibility"), jint>(); }
inline jint R_attr::canRequestFilterKeyEvents() { return get_static_field<SCAPIX_META_STRING("canRequestFilterKeyEvents"), jint>(); }
inline jint R_attr::canRequestFingerprintGestures() { return get_static_field<SCAPIX_META_STRING("canRequestFingerprintGestures"), jint>(); }
inline jint R_attr::canRequestTouchExplorationMode() { return get_static_field<SCAPIX_META_STRING("canRequestTouchExplorationMode"), jint>(); }
inline jint R_attr::canRetrieveWindowContent() { return get_static_field<SCAPIX_META_STRING("canRetrieveWindowContent"), jint>(); }
inline jint R_attr::candidatesTextStyleSpans() { return get_static_field<SCAPIX_META_STRING("candidatesTextStyleSpans"), jint>(); }
inline jint R_attr::cantSaveState() { return get_static_field<SCAPIX_META_STRING("cantSaveState"), jint>(); }
inline jint R_attr::capitalize() { return get_static_field<SCAPIX_META_STRING("capitalize"), jint>(); }
inline jint R_attr::category() { return get_static_field<SCAPIX_META_STRING("category"), jint>(); }
inline jint R_attr::centerBright() { return get_static_field<SCAPIX_META_STRING("centerBright"), jint>(); }
inline jint R_attr::centerColor() { return get_static_field<SCAPIX_META_STRING("centerColor"), jint>(); }
inline jint R_attr::centerDark() { return get_static_field<SCAPIX_META_STRING("centerDark"), jint>(); }
inline jint R_attr::centerMedium() { return get_static_field<SCAPIX_META_STRING("centerMedium"), jint>(); }
inline jint R_attr::centerX() { return get_static_field<SCAPIX_META_STRING("centerX"), jint>(); }
inline jint R_attr::centerY() { return get_static_field<SCAPIX_META_STRING("centerY"), jint>(); }
inline jint R_attr::certDigest() { return get_static_field<SCAPIX_META_STRING("certDigest"), jint>(); }
inline jint R_attr::checkBoxPreferenceStyle() { return get_static_field<SCAPIX_META_STRING("checkBoxPreferenceStyle"), jint>(); }
inline jint R_attr::checkMark() { return get_static_field<SCAPIX_META_STRING("checkMark"), jint>(); }
inline jint R_attr::checkMarkTint() { return get_static_field<SCAPIX_META_STRING("checkMarkTint"), jint>(); }
inline jint R_attr::checkMarkTintMode() { return get_static_field<SCAPIX_META_STRING("checkMarkTintMode"), jint>(); }
inline jint R_attr::checkable() { return get_static_field<SCAPIX_META_STRING("checkable"), jint>(); }
inline jint R_attr::checkableBehavior() { return get_static_field<SCAPIX_META_STRING("checkableBehavior"), jint>(); }
inline jint R_attr::checkboxStyle() { return get_static_field<SCAPIX_META_STRING("checkboxStyle"), jint>(); }
inline jint R_attr::checked() { return get_static_field<SCAPIX_META_STRING("checked"), jint>(); }
inline jint R_attr::checkedButton() { return get_static_field<SCAPIX_META_STRING("checkedButton"), jint>(); }
inline jint R_attr::checkedTextViewStyle() { return get_static_field<SCAPIX_META_STRING("checkedTextViewStyle"), jint>(); }
inline jint R_attr::childDivider() { return get_static_field<SCAPIX_META_STRING("childDivider"), jint>(); }
inline jint R_attr::childIndicator() { return get_static_field<SCAPIX_META_STRING("childIndicator"), jint>(); }
inline jint R_attr::childIndicatorEnd() { return get_static_field<SCAPIX_META_STRING("childIndicatorEnd"), jint>(); }
inline jint R_attr::childIndicatorLeft() { return get_static_field<SCAPIX_META_STRING("childIndicatorLeft"), jint>(); }
inline jint R_attr::childIndicatorRight() { return get_static_field<SCAPIX_META_STRING("childIndicatorRight"), jint>(); }
inline jint R_attr::childIndicatorStart() { return get_static_field<SCAPIX_META_STRING("childIndicatorStart"), jint>(); }
inline jint R_attr::choiceMode() { return get_static_field<SCAPIX_META_STRING("choiceMode"), jint>(); }
inline jint R_attr::classLoader() { return get_static_field<SCAPIX_META_STRING("classLoader"), jint>(); }
inline jint R_attr::clearTaskOnLaunch() { return get_static_field<SCAPIX_META_STRING("clearTaskOnLaunch"), jint>(); }
inline jint R_attr::clickable() { return get_static_field<SCAPIX_META_STRING("clickable"), jint>(); }
inline jint R_attr::clipChildren() { return get_static_field<SCAPIX_META_STRING("clipChildren"), jint>(); }
inline jint R_attr::clipOrientation() { return get_static_field<SCAPIX_META_STRING("clipOrientation"), jint>(); }
inline jint R_attr::clipToPadding() { return get_static_field<SCAPIX_META_STRING("clipToPadding"), jint>(); }
inline jint R_attr::closeIcon() { return get_static_field<SCAPIX_META_STRING("closeIcon"), jint>(); }
inline jint R_attr::codes() { return get_static_field<SCAPIX_META_STRING("codes"), jint>(); }
inline jint R_attr::collapseColumns() { return get_static_field<SCAPIX_META_STRING("collapseColumns"), jint>(); }
inline jint R_attr::collapseContentDescription() { return get_static_field<SCAPIX_META_STRING("collapseContentDescription"), jint>(); }
inline jint R_attr::collapseIcon() { return get_static_field<SCAPIX_META_STRING("collapseIcon"), jint>(); }
inline jint R_attr::color() { return get_static_field<SCAPIX_META_STRING("color"), jint>(); }
inline jint R_attr::colorAccent() { return get_static_field<SCAPIX_META_STRING("colorAccent"), jint>(); }
inline jint R_attr::colorActivatedHighlight() { return get_static_field<SCAPIX_META_STRING("colorActivatedHighlight"), jint>(); }
inline jint R_attr::colorBackground() { return get_static_field<SCAPIX_META_STRING("colorBackground"), jint>(); }
inline jint R_attr::colorBackgroundCacheHint() { return get_static_field<SCAPIX_META_STRING("colorBackgroundCacheHint"), jint>(); }
inline jint R_attr::colorBackgroundFloating() { return get_static_field<SCAPIX_META_STRING("colorBackgroundFloating"), jint>(); }
inline jint R_attr::colorButtonNormal() { return get_static_field<SCAPIX_META_STRING("colorButtonNormal"), jint>(); }
inline jint R_attr::colorControlActivated() { return get_static_field<SCAPIX_META_STRING("colorControlActivated"), jint>(); }
inline jint R_attr::colorControlHighlight() { return get_static_field<SCAPIX_META_STRING("colorControlHighlight"), jint>(); }
inline jint R_attr::colorControlNormal() { return get_static_field<SCAPIX_META_STRING("colorControlNormal"), jint>(); }
inline jint R_attr::colorEdgeEffect() { return get_static_field<SCAPIX_META_STRING("colorEdgeEffect"), jint>(); }
inline jint R_attr::colorError() { return get_static_field<SCAPIX_META_STRING("colorError"), jint>(); }
inline jint R_attr::colorFocusedHighlight() { return get_static_field<SCAPIX_META_STRING("colorFocusedHighlight"), jint>(); }
inline jint R_attr::colorForeground() { return get_static_field<SCAPIX_META_STRING("colorForeground"), jint>(); }
inline jint R_attr::colorForegroundInverse() { return get_static_field<SCAPIX_META_STRING("colorForegroundInverse"), jint>(); }
inline jint R_attr::colorLongPressedHighlight() { return get_static_field<SCAPIX_META_STRING("colorLongPressedHighlight"), jint>(); }
inline jint R_attr::colorMode() { return get_static_field<SCAPIX_META_STRING("colorMode"), jint>(); }
inline jint R_attr::colorMultiSelectHighlight() { return get_static_field<SCAPIX_META_STRING("colorMultiSelectHighlight"), jint>(); }
inline jint R_attr::colorPressedHighlight() { return get_static_field<SCAPIX_META_STRING("colorPressedHighlight"), jint>(); }
inline jint R_attr::colorPrimary() { return get_static_field<SCAPIX_META_STRING("colorPrimary"), jint>(); }
inline jint R_attr::colorPrimaryDark() { return get_static_field<SCAPIX_META_STRING("colorPrimaryDark"), jint>(); }
inline jint R_attr::colorSecondary() { return get_static_field<SCAPIX_META_STRING("colorSecondary"), jint>(); }
inline jint R_attr::columnCount() { return get_static_field<SCAPIX_META_STRING("columnCount"), jint>(); }
inline jint R_attr::columnDelay() { return get_static_field<SCAPIX_META_STRING("columnDelay"), jint>(); }
inline jint R_attr::columnOrderPreserved() { return get_static_field<SCAPIX_META_STRING("columnOrderPreserved"), jint>(); }
inline jint R_attr::columnWidth() { return get_static_field<SCAPIX_META_STRING("columnWidth"), jint>(); }
inline jint R_attr::commitIcon() { return get_static_field<SCAPIX_META_STRING("commitIcon"), jint>(); }
inline jint R_attr::compatibleWidthLimitDp() { return get_static_field<SCAPIX_META_STRING("compatibleWidthLimitDp"), jint>(); }
inline jint R_attr::completionHint() { return get_static_field<SCAPIX_META_STRING("completionHint"), jint>(); }
inline jint R_attr::completionHintView() { return get_static_field<SCAPIX_META_STRING("completionHintView"), jint>(); }
inline jint R_attr::completionThreshold() { return get_static_field<SCAPIX_META_STRING("completionThreshold"), jint>(); }
inline jint R_attr::configChanges() { return get_static_field<SCAPIX_META_STRING("configChanges"), jint>(); }
inline jint R_attr::configure() { return get_static_field<SCAPIX_META_STRING("configure"), jint>(); }
inline jint R_attr::constantSize() { return get_static_field<SCAPIX_META_STRING("constantSize"), jint>(); }
inline jint R_attr::content() { return get_static_field<SCAPIX_META_STRING("content"), jint>(); }
inline jint R_attr::contentAgeHint() { return get_static_field<SCAPIX_META_STRING("contentAgeHint"), jint>(); }
inline jint R_attr::contentAuthority() { return get_static_field<SCAPIX_META_STRING("contentAuthority"), jint>(); }
inline jint R_attr::contentDescription() { return get_static_field<SCAPIX_META_STRING("contentDescription"), jint>(); }
inline jint R_attr::contentInsetEnd() { return get_static_field<SCAPIX_META_STRING("contentInsetEnd"), jint>(); }
inline jint R_attr::contentInsetEndWithActions() { return get_static_field<SCAPIX_META_STRING("contentInsetEndWithActions"), jint>(); }
inline jint R_attr::contentInsetLeft() { return get_static_field<SCAPIX_META_STRING("contentInsetLeft"), jint>(); }
inline jint R_attr::contentInsetRight() { return get_static_field<SCAPIX_META_STRING("contentInsetRight"), jint>(); }
inline jint R_attr::contentInsetStart() { return get_static_field<SCAPIX_META_STRING("contentInsetStart"), jint>(); }
inline jint R_attr::contentInsetStartWithNavigation() { return get_static_field<SCAPIX_META_STRING("contentInsetStartWithNavigation"), jint>(); }
inline jint R_attr::contextClickable() { return get_static_field<SCAPIX_META_STRING("contextClickable"), jint>(); }
inline jint R_attr::contextDescription() { return get_static_field<SCAPIX_META_STRING("contextDescription"), jint>(); }
inline jint R_attr::contextPopupMenuStyle() { return get_static_field<SCAPIX_META_STRING("contextPopupMenuStyle"), jint>(); }
inline jint R_attr::contextUri() { return get_static_field<SCAPIX_META_STRING("contextUri"), jint>(); }
inline jint R_attr::controlX1() { return get_static_field<SCAPIX_META_STRING("controlX1"), jint>(); }
inline jint R_attr::controlX2() { return get_static_field<SCAPIX_META_STRING("controlX2"), jint>(); }
inline jint R_attr::controlY1() { return get_static_field<SCAPIX_META_STRING("controlY1"), jint>(); }
inline jint R_attr::controlY2() { return get_static_field<SCAPIX_META_STRING("controlY2"), jint>(); }
inline jint R_attr::countDown() { return get_static_field<SCAPIX_META_STRING("countDown"), jint>(); }
inline jint R_attr::country() { return get_static_field<SCAPIX_META_STRING("country"), jint>(); }
inline jint R_attr::cropToPadding() { return get_static_field<SCAPIX_META_STRING("cropToPadding"), jint>(); }
inline jint R_attr::cursorVisible() { return get_static_field<SCAPIX_META_STRING("cursorVisible"), jint>(); }
inline jint R_attr::customNavigationLayout() { return get_static_field<SCAPIX_META_STRING("customNavigationLayout"), jint>(); }
inline jint R_attr::customTokens() { return get_static_field<SCAPIX_META_STRING("customTokens"), jint>(); }
inline jint R_attr::cycles() { return get_static_field<SCAPIX_META_STRING("cycles"), jint>(); }
inline jint R_attr::dashGap() { return get_static_field<SCAPIX_META_STRING("dashGap"), jint>(); }
inline jint R_attr::dashWidth() { return get_static_field<SCAPIX_META_STRING("dashWidth"), jint>(); }
inline jint R_attr::data() { return get_static_field<SCAPIX_META_STRING("data"), jint>(); }
inline jint R_attr::datePickerDialogTheme() { return get_static_field<SCAPIX_META_STRING("datePickerDialogTheme"), jint>(); }
inline jint R_attr::datePickerMode() { return get_static_field<SCAPIX_META_STRING("datePickerMode"), jint>(); }
inline jint R_attr::datePickerStyle() { return get_static_field<SCAPIX_META_STRING("datePickerStyle"), jint>(); }
inline jint R_attr::dateTextAppearance() { return get_static_field<SCAPIX_META_STRING("dateTextAppearance"), jint>(); }
inline jint R_attr::dayOfWeekBackground() { return get_static_field<SCAPIX_META_STRING("dayOfWeekBackground"), jint>(); }
inline jint R_attr::dayOfWeekTextAppearance() { return get_static_field<SCAPIX_META_STRING("dayOfWeekTextAppearance"), jint>(); }
inline jint R_attr::debuggable() { return get_static_field<SCAPIX_META_STRING("debuggable"), jint>(); }
inline jint R_attr::defaultFocusHighlightEnabled() { return get_static_field<SCAPIX_META_STRING("defaultFocusHighlightEnabled"), jint>(); }
inline jint R_attr::defaultHeight() { return get_static_field<SCAPIX_META_STRING("defaultHeight"), jint>(); }
inline jint R_attr::defaultToDeviceProtectedStorage() { return get_static_field<SCAPIX_META_STRING("defaultToDeviceProtectedStorage"), jint>(); }
inline jint R_attr::defaultValue() { return get_static_field<SCAPIX_META_STRING("defaultValue"), jint>(); }
inline jint R_attr::defaultWidth() { return get_static_field<SCAPIX_META_STRING("defaultWidth"), jint>(); }
inline jint R_attr::delay() { return get_static_field<SCAPIX_META_STRING("delay"), jint>(); }
inline jint R_attr::dependency() { return get_static_field<SCAPIX_META_STRING("dependency"), jint>(); }
inline jint R_attr::descendantFocusability() { return get_static_field<SCAPIX_META_STRING("descendantFocusability"), jint>(); }
inline jint R_attr::description() { return get_static_field<SCAPIX_META_STRING("description"), jint>(); }
inline jint R_attr::detachWallpaper() { return get_static_field<SCAPIX_META_STRING("detachWallpaper"), jint>(); }
inline jint R_attr::detailColumn() { return get_static_field<SCAPIX_META_STRING("detailColumn"), jint>(); }
inline jint R_attr::detailSocialSummary() { return get_static_field<SCAPIX_META_STRING("detailSocialSummary"), jint>(); }
inline jint R_attr::detailsElementBackground() { return get_static_field<SCAPIX_META_STRING("detailsElementBackground"), jint>(); }
inline jint R_attr::dial() { return get_static_field<SCAPIX_META_STRING("dial"), jint>(); }
inline jint R_attr::dialogCornerRadius() { return get_static_field<SCAPIX_META_STRING("dialogCornerRadius"), jint>(); }
inline jint R_attr::dialogIcon() { return get_static_field<SCAPIX_META_STRING("dialogIcon"), jint>(); }
inline jint R_attr::dialogLayout() { return get_static_field<SCAPIX_META_STRING("dialogLayout"), jint>(); }
inline jint R_attr::dialogMessage() { return get_static_field<SCAPIX_META_STRING("dialogMessage"), jint>(); }
inline jint R_attr::dialogPreferenceStyle() { return get_static_field<SCAPIX_META_STRING("dialogPreferenceStyle"), jint>(); }
inline jint R_attr::dialogPreferredPadding() { return get_static_field<SCAPIX_META_STRING("dialogPreferredPadding"), jint>(); }
inline jint R_attr::dialogTheme() { return get_static_field<SCAPIX_META_STRING("dialogTheme"), jint>(); }
inline jint R_attr::dialogTitle() { return get_static_field<SCAPIX_META_STRING("dialogTitle"), jint>(); }
inline jint R_attr::digits() { return get_static_field<SCAPIX_META_STRING("digits"), jint>(); }
inline jint R_attr::directBootAware() { return get_static_field<SCAPIX_META_STRING("directBootAware"), jint>(); }
inline jint R_attr::direction() { return get_static_field<SCAPIX_META_STRING("direction"), jint>(); }
inline jint R_attr::directionDescriptions() { return get_static_field<SCAPIX_META_STRING("directionDescriptions"), jint>(); }
inline jint R_attr::directionPriority() { return get_static_field<SCAPIX_META_STRING("directionPriority"), jint>(); }
inline jint R_attr::disableDependentsState() { return get_static_field<SCAPIX_META_STRING("disableDependentsState"), jint>(); }
inline jint R_attr::disabledAlpha() { return get_static_field<SCAPIX_META_STRING("disabledAlpha"), jint>(); }
inline jint R_attr::displayOptions() { return get_static_field<SCAPIX_META_STRING("displayOptions"), jint>(); }
inline jint R_attr::dither() { return get_static_field<SCAPIX_META_STRING("dither"), jint>(); }
inline jint R_attr::divider() { return get_static_field<SCAPIX_META_STRING("divider"), jint>(); }
inline jint R_attr::dividerHeight() { return get_static_field<SCAPIX_META_STRING("dividerHeight"), jint>(); }
inline jint R_attr::dividerHorizontal() { return get_static_field<SCAPIX_META_STRING("dividerHorizontal"), jint>(); }
inline jint R_attr::dividerPadding() { return get_static_field<SCAPIX_META_STRING("dividerPadding"), jint>(); }
inline jint R_attr::dividerVertical() { return get_static_field<SCAPIX_META_STRING("dividerVertical"), jint>(); }
inline jint R_attr::documentLaunchMode() { return get_static_field<SCAPIX_META_STRING("documentLaunchMode"), jint>(); }
inline jint R_attr::drawSelectorOnTop() { return get_static_field<SCAPIX_META_STRING("drawSelectorOnTop"), jint>(); }
inline jint R_attr::drawable() { return get_static_field<SCAPIX_META_STRING("drawable"), jint>(); }
inline jint R_attr::drawableBottom() { return get_static_field<SCAPIX_META_STRING("drawableBottom"), jint>(); }
inline jint R_attr::drawableEnd() { return get_static_field<SCAPIX_META_STRING("drawableEnd"), jint>(); }
inline jint R_attr::drawableLeft() { return get_static_field<SCAPIX_META_STRING("drawableLeft"), jint>(); }
inline jint R_attr::drawablePadding() { return get_static_field<SCAPIX_META_STRING("drawablePadding"), jint>(); }
inline jint R_attr::drawableRight() { return get_static_field<SCAPIX_META_STRING("drawableRight"), jint>(); }
inline jint R_attr::drawableStart() { return get_static_field<SCAPIX_META_STRING("drawableStart"), jint>(); }
inline jint R_attr::drawableTint() { return get_static_field<SCAPIX_META_STRING("drawableTint"), jint>(); }
inline jint R_attr::drawableTintMode() { return get_static_field<SCAPIX_META_STRING("drawableTintMode"), jint>(); }
inline jint R_attr::drawableTop() { return get_static_field<SCAPIX_META_STRING("drawableTop"), jint>(); }
inline jint R_attr::drawingCacheQuality() { return get_static_field<SCAPIX_META_STRING("drawingCacheQuality"), jint>(); }
inline jint R_attr::dropDownAnchor() { return get_static_field<SCAPIX_META_STRING("dropDownAnchor"), jint>(); }
inline jint R_attr::dropDownHeight() { return get_static_field<SCAPIX_META_STRING("dropDownHeight"), jint>(); }
inline jint R_attr::dropDownHintAppearance() { return get_static_field<SCAPIX_META_STRING("dropDownHintAppearance"), jint>(); }
inline jint R_attr::dropDownHorizontalOffset() { return get_static_field<SCAPIX_META_STRING("dropDownHorizontalOffset"), jint>(); }
inline jint R_attr::dropDownItemStyle() { return get_static_field<SCAPIX_META_STRING("dropDownItemStyle"), jint>(); }
inline jint R_attr::dropDownListViewStyle() { return get_static_field<SCAPIX_META_STRING("dropDownListViewStyle"), jint>(); }
inline jint R_attr::dropDownSelector() { return get_static_field<SCAPIX_META_STRING("dropDownSelector"), jint>(); }
inline jint R_attr::dropDownSpinnerStyle() { return get_static_field<SCAPIX_META_STRING("dropDownSpinnerStyle"), jint>(); }
inline jint R_attr::dropDownVerticalOffset() { return get_static_field<SCAPIX_META_STRING("dropDownVerticalOffset"), jint>(); }
inline jint R_attr::dropDownWidth() { return get_static_field<SCAPIX_META_STRING("dropDownWidth"), jint>(); }
inline jint R_attr::duplicateParentState() { return get_static_field<SCAPIX_META_STRING("duplicateParentState"), jint>(); }
inline jint R_attr::duration() { return get_static_field<SCAPIX_META_STRING("duration"), jint>(); }
inline jint R_attr::editTextBackground() { return get_static_field<SCAPIX_META_STRING("editTextBackground"), jint>(); }
inline jint R_attr::editTextColor() { return get_static_field<SCAPIX_META_STRING("editTextColor"), jint>(); }
inline jint R_attr::editTextPreferenceStyle() { return get_static_field<SCAPIX_META_STRING("editTextPreferenceStyle"), jint>(); }
inline jint R_attr::editTextStyle() { return get_static_field<SCAPIX_META_STRING("editTextStyle"), jint>(); }
inline jint R_attr::editable() { return get_static_field<SCAPIX_META_STRING("editable"), jint>(); }
inline jint R_attr::editorExtras() { return get_static_field<SCAPIX_META_STRING("editorExtras"), jint>(); }
inline jint R_attr::elegantTextHeight() { return get_static_field<SCAPIX_META_STRING("elegantTextHeight"), jint>(); }
inline jint R_attr::elevation() { return get_static_field<SCAPIX_META_STRING("elevation"), jint>(); }
inline jint R_attr::ellipsize() { return get_static_field<SCAPIX_META_STRING("ellipsize"), jint>(); }
inline jint R_attr::ems() { return get_static_field<SCAPIX_META_STRING("ems"), jint>(); }
inline jint R_attr::enableVrMode() { return get_static_field<SCAPIX_META_STRING("enableVrMode"), jint>(); }
inline jint R_attr::enabled() { return get_static_field<SCAPIX_META_STRING("enabled"), jint>(); }
inline jint R_attr::end() { return get_static_field<SCAPIX_META_STRING("end"), jint>(); }
inline jint R_attr::endColor() { return get_static_field<SCAPIX_META_STRING("endColor"), jint>(); }
inline jint R_attr::endX() { return get_static_field<SCAPIX_META_STRING("endX"), jint>(); }
inline jint R_attr::endY() { return get_static_field<SCAPIX_META_STRING("endY"), jint>(); }
inline jint R_attr::endYear() { return get_static_field<SCAPIX_META_STRING("endYear"), jint>(); }
inline jint R_attr::enterFadeDuration() { return get_static_field<SCAPIX_META_STRING("enterFadeDuration"), jint>(); }
inline jint R_attr::entries() { return get_static_field<SCAPIX_META_STRING("entries"), jint>(); }
inline jint R_attr::entryValues() { return get_static_field<SCAPIX_META_STRING("entryValues"), jint>(); }
inline jint R_attr::eventsInterceptionEnabled() { return get_static_field<SCAPIX_META_STRING("eventsInterceptionEnabled"), jint>(); }
inline jint R_attr::excludeClass() { return get_static_field<SCAPIX_META_STRING("excludeClass"), jint>(); }
inline jint R_attr::excludeFromRecents() { return get_static_field<SCAPIX_META_STRING("excludeFromRecents"), jint>(); }
inline jint R_attr::excludeId() { return get_static_field<SCAPIX_META_STRING("excludeId"), jint>(); }
inline jint R_attr::excludeName() { return get_static_field<SCAPIX_META_STRING("excludeName"), jint>(); }
inline jint R_attr::exitFadeDuration() { return get_static_field<SCAPIX_META_STRING("exitFadeDuration"), jint>(); }
inline jint R_attr::expandableListPreferredChildIndicatorLeft() { return get_static_field<SCAPIX_META_STRING("expandableListPreferredChildIndicatorLeft"), jint>(); }
inline jint R_attr::expandableListPreferredChildIndicatorRight() { return get_static_field<SCAPIX_META_STRING("expandableListPreferredChildIndicatorRight"), jint>(); }
inline jint R_attr::expandableListPreferredChildPaddingLeft() { return get_static_field<SCAPIX_META_STRING("expandableListPreferredChildPaddingLeft"), jint>(); }
inline jint R_attr::expandableListPreferredItemIndicatorLeft() { return get_static_field<SCAPIX_META_STRING("expandableListPreferredItemIndicatorLeft"), jint>(); }
inline jint R_attr::expandableListPreferredItemIndicatorRight() { return get_static_field<SCAPIX_META_STRING("expandableListPreferredItemIndicatorRight"), jint>(); }
inline jint R_attr::expandableListPreferredItemPaddingLeft() { return get_static_field<SCAPIX_META_STRING("expandableListPreferredItemPaddingLeft"), jint>(); }
inline jint R_attr::expandableListViewStyle() { return get_static_field<SCAPIX_META_STRING("expandableListViewStyle"), jint>(); }
inline jint R_attr::expandableListViewWhiteStyle() { return get_static_field<SCAPIX_META_STRING("expandableListViewWhiteStyle"), jint>(); }
inline jint R_attr::exported() { return get_static_field<SCAPIX_META_STRING("exported"), jint>(); }
inline jint R_attr::externalService() { return get_static_field<SCAPIX_META_STRING("externalService"), jint>(); }
inline jint R_attr::extraTension() { return get_static_field<SCAPIX_META_STRING("extraTension"), jint>(); }
inline jint R_attr::extractNativeLibs() { return get_static_field<SCAPIX_META_STRING("extractNativeLibs"), jint>(); }
inline jint R_attr::factor() { return get_static_field<SCAPIX_META_STRING("factor"), jint>(); }
inline jint R_attr::fadeDuration() { return get_static_field<SCAPIX_META_STRING("fadeDuration"), jint>(); }
inline jint R_attr::fadeEnabled() { return get_static_field<SCAPIX_META_STRING("fadeEnabled"), jint>(); }
inline jint R_attr::fadeOffset() { return get_static_field<SCAPIX_META_STRING("fadeOffset"), jint>(); }
inline jint R_attr::fadeScrollbars() { return get_static_field<SCAPIX_META_STRING("fadeScrollbars"), jint>(); }
inline jint R_attr::fadingEdge() { return get_static_field<SCAPIX_META_STRING("fadingEdge"), jint>(); }
inline jint R_attr::fadingEdgeLength() { return get_static_field<SCAPIX_META_STRING("fadingEdgeLength"), jint>(); }
inline jint R_attr::fadingMode() { return get_static_field<SCAPIX_META_STRING("fadingMode"), jint>(); }
inline jint R_attr::fallbackLineSpacing() { return get_static_field<SCAPIX_META_STRING("fallbackLineSpacing"), jint>(); }
inline jint R_attr::fastScrollAlwaysVisible() { return get_static_field<SCAPIX_META_STRING("fastScrollAlwaysVisible"), jint>(); }
inline jint R_attr::fastScrollEnabled() { return get_static_field<SCAPIX_META_STRING("fastScrollEnabled"), jint>(); }
inline jint R_attr::fastScrollOverlayPosition() { return get_static_field<SCAPIX_META_STRING("fastScrollOverlayPosition"), jint>(); }
inline jint R_attr::fastScrollPreviewBackgroundLeft() { return get_static_field<SCAPIX_META_STRING("fastScrollPreviewBackgroundLeft"), jint>(); }
inline jint R_attr::fastScrollPreviewBackgroundRight() { return get_static_field<SCAPIX_META_STRING("fastScrollPreviewBackgroundRight"), jint>(); }
inline jint R_attr::fastScrollStyle() { return get_static_field<SCAPIX_META_STRING("fastScrollStyle"), jint>(); }
inline jint R_attr::fastScrollTextColor() { return get_static_field<SCAPIX_META_STRING("fastScrollTextColor"), jint>(); }
inline jint R_attr::fastScrollThumbDrawable() { return get_static_field<SCAPIX_META_STRING("fastScrollThumbDrawable"), jint>(); }
inline jint R_attr::fastScrollTrackDrawable() { return get_static_field<SCAPIX_META_STRING("fastScrollTrackDrawable"), jint>(); }
inline jint R_attr::fillAfter() { return get_static_field<SCAPIX_META_STRING("fillAfter"), jint>(); }
inline jint R_attr::fillAlpha() { return get_static_field<SCAPIX_META_STRING("fillAlpha"), jint>(); }
inline jint R_attr::fillBefore() { return get_static_field<SCAPIX_META_STRING("fillBefore"), jint>(); }
inline jint R_attr::fillColor() { return get_static_field<SCAPIX_META_STRING("fillColor"), jint>(); }
inline jint R_attr::fillEnabled() { return get_static_field<SCAPIX_META_STRING("fillEnabled"), jint>(); }
inline jint R_attr::fillType() { return get_static_field<SCAPIX_META_STRING("fillType"), jint>(); }
inline jint R_attr::fillViewport() { return get_static_field<SCAPIX_META_STRING("fillViewport"), jint>(); }
inline jint R_attr::filter() { return get_static_field<SCAPIX_META_STRING("filter"), jint>(); }
inline jint R_attr::filterTouchesWhenObscured() { return get_static_field<SCAPIX_META_STRING("filterTouchesWhenObscured"), jint>(); }
inline jint R_attr::fingerprintAuthDrawable() { return get_static_field<SCAPIX_META_STRING("fingerprintAuthDrawable"), jint>(); }
inline jint R_attr::finishOnCloseSystemDialogs() { return get_static_field<SCAPIX_META_STRING("finishOnCloseSystemDialogs"), jint>(); }
inline jint R_attr::finishOnTaskLaunch() { return get_static_field<SCAPIX_META_STRING("finishOnTaskLaunch"), jint>(); }
inline jint R_attr::firstBaselineToTopHeight() { return get_static_field<SCAPIX_META_STRING("firstBaselineToTopHeight"), jint>(); }
inline jint R_attr::firstDayOfWeek() { return get_static_field<SCAPIX_META_STRING("firstDayOfWeek"), jint>(); }
inline jint R_attr::fitsSystemWindows() { return get_static_field<SCAPIX_META_STRING("fitsSystemWindows"), jint>(); }
inline jint R_attr::flipInterval() { return get_static_field<SCAPIX_META_STRING("flipInterval"), jint>(); }
inline jint R_attr::focusable() { return get_static_field<SCAPIX_META_STRING("focusable"), jint>(); }
inline jint R_attr::focusableInTouchMode() { return get_static_field<SCAPIX_META_STRING("focusableInTouchMode"), jint>(); }
inline jint R_attr::focusedByDefault() { return get_static_field<SCAPIX_META_STRING("focusedByDefault"), jint>(); }
inline jint R_attr::focusedMonthDateColor() { return get_static_field<SCAPIX_META_STRING("focusedMonthDateColor"), jint>(); }
inline jint R_attr::font() { return get_static_field<SCAPIX_META_STRING("font"), jint>(); }
inline jint R_attr::fontFamily() { return get_static_field<SCAPIX_META_STRING("fontFamily"), jint>(); }
inline jint R_attr::fontFeatureSettings() { return get_static_field<SCAPIX_META_STRING("fontFeatureSettings"), jint>(); }
inline jint R_attr::fontProviderAuthority() { return get_static_field<SCAPIX_META_STRING("fontProviderAuthority"), jint>(); }
inline jint R_attr::fontProviderCerts() { return get_static_field<SCAPIX_META_STRING("fontProviderCerts"), jint>(); }
inline jint R_attr::fontProviderPackage() { return get_static_field<SCAPIX_META_STRING("fontProviderPackage"), jint>(); }
inline jint R_attr::fontProviderQuery() { return get_static_field<SCAPIX_META_STRING("fontProviderQuery"), jint>(); }
inline jint R_attr::fontStyle() { return get_static_field<SCAPIX_META_STRING("fontStyle"), jint>(); }
inline jint R_attr::fontVariationSettings() { return get_static_field<SCAPIX_META_STRING("fontVariationSettings"), jint>(); }
inline jint R_attr::fontWeight() { return get_static_field<SCAPIX_META_STRING("fontWeight"), jint>(); }
inline jint R_attr::footerDividersEnabled() { return get_static_field<SCAPIX_META_STRING("footerDividersEnabled"), jint>(); }
inline jint R_attr::forceHasOverlappingRendering() { return get_static_field<SCAPIX_META_STRING("forceHasOverlappingRendering"), jint>(); }
inline jint R_attr::foreground() { return get_static_field<SCAPIX_META_STRING("foreground"), jint>(); }
inline jint R_attr::foregroundGravity() { return get_static_field<SCAPIX_META_STRING("foregroundGravity"), jint>(); }
inline jint R_attr::foregroundTint() { return get_static_field<SCAPIX_META_STRING("foregroundTint"), jint>(); }
inline jint R_attr::foregroundTintMode() { return get_static_field<SCAPIX_META_STRING("foregroundTintMode"), jint>(); }
inline jint R_attr::format() { return get_static_field<SCAPIX_META_STRING("format"), jint>(); }
inline jint R_attr::format12Hour() { return get_static_field<SCAPIX_META_STRING("format12Hour"), jint>(); }
inline jint R_attr::format24Hour() { return get_static_field<SCAPIX_META_STRING("format24Hour"), jint>(); }
inline jint R_attr::fraction() { return get_static_field<SCAPIX_META_STRING("fraction"), jint>(); }
inline jint R_attr::fragment() { return get_static_field<SCAPIX_META_STRING("fragment"), jint>(); }
inline jint R_attr::fragmentAllowEnterTransitionOverlap() { return get_static_field<SCAPIX_META_STRING("fragmentAllowEnterTransitionOverlap"), jint>(); }
inline jint R_attr::fragmentAllowReturnTransitionOverlap() { return get_static_field<SCAPIX_META_STRING("fragmentAllowReturnTransitionOverlap"), jint>(); }
inline jint R_attr::fragmentCloseEnterAnimation() { return get_static_field<SCAPIX_META_STRING("fragmentCloseEnterAnimation"), jint>(); }
inline jint R_attr::fragmentCloseExitAnimation() { return get_static_field<SCAPIX_META_STRING("fragmentCloseExitAnimation"), jint>(); }
inline jint R_attr::fragmentEnterTransition() { return get_static_field<SCAPIX_META_STRING("fragmentEnterTransition"), jint>(); }
inline jint R_attr::fragmentExitTransition() { return get_static_field<SCAPIX_META_STRING("fragmentExitTransition"), jint>(); }
inline jint R_attr::fragmentFadeEnterAnimation() { return get_static_field<SCAPIX_META_STRING("fragmentFadeEnterAnimation"), jint>(); }
inline jint R_attr::fragmentFadeExitAnimation() { return get_static_field<SCAPIX_META_STRING("fragmentFadeExitAnimation"), jint>(); }
inline jint R_attr::fragmentOpenEnterAnimation() { return get_static_field<SCAPIX_META_STRING("fragmentOpenEnterAnimation"), jint>(); }
inline jint R_attr::fragmentOpenExitAnimation() { return get_static_field<SCAPIX_META_STRING("fragmentOpenExitAnimation"), jint>(); }
inline jint R_attr::fragmentReenterTransition() { return get_static_field<SCAPIX_META_STRING("fragmentReenterTransition"), jint>(); }
inline jint R_attr::fragmentReturnTransition() { return get_static_field<SCAPIX_META_STRING("fragmentReturnTransition"), jint>(); }
inline jint R_attr::fragmentSharedElementEnterTransition() { return get_static_field<SCAPIX_META_STRING("fragmentSharedElementEnterTransition"), jint>(); }
inline jint R_attr::fragmentSharedElementReturnTransition() { return get_static_field<SCAPIX_META_STRING("fragmentSharedElementReturnTransition"), jint>(); }
inline jint R_attr::freezesText() { return get_static_field<SCAPIX_META_STRING("freezesText"), jint>(); }
inline jint R_attr::fromAlpha() { return get_static_field<SCAPIX_META_STRING("fromAlpha"), jint>(); }
inline jint R_attr::fromDegrees() { return get_static_field<SCAPIX_META_STRING("fromDegrees"), jint>(); }
inline jint R_attr::fromId() { return get_static_field<SCAPIX_META_STRING("fromId"), jint>(); }
inline jint R_attr::fromScene() { return get_static_field<SCAPIX_META_STRING("fromScene"), jint>(); }
inline jint R_attr::fromXDelta() { return get_static_field<SCAPIX_META_STRING("fromXDelta"), jint>(); }
inline jint R_attr::fromXScale() { return get_static_field<SCAPIX_META_STRING("fromXScale"), jint>(); }
inline jint R_attr::fromYDelta() { return get_static_field<SCAPIX_META_STRING("fromYDelta"), jint>(); }
inline jint R_attr::fromYScale() { return get_static_field<SCAPIX_META_STRING("fromYScale"), jint>(); }
inline jint R_attr::fullBackupContent() { return get_static_field<SCAPIX_META_STRING("fullBackupContent"), jint>(); }
inline jint R_attr::fullBackupOnly() { return get_static_field<SCAPIX_META_STRING("fullBackupOnly"), jint>(); }
inline jint R_attr::fullBright() { return get_static_field<SCAPIX_META_STRING("fullBright"), jint>(); }
inline jint R_attr::fullDark() { return get_static_field<SCAPIX_META_STRING("fullDark"), jint>(); }
inline jint R_attr::functionalTest() { return get_static_field<SCAPIX_META_STRING("functionalTest"), jint>(); }
inline jint R_attr::galleryItemBackground() { return get_static_field<SCAPIX_META_STRING("galleryItemBackground"), jint>(); }
inline jint R_attr::galleryStyle() { return get_static_field<SCAPIX_META_STRING("galleryStyle"), jint>(); }
inline jint R_attr::gestureColor() { return get_static_field<SCAPIX_META_STRING("gestureColor"), jint>(); }
inline jint R_attr::gestureStrokeAngleThreshold() { return get_static_field<SCAPIX_META_STRING("gestureStrokeAngleThreshold"), jint>(); }
inline jint R_attr::gestureStrokeLengthThreshold() { return get_static_field<SCAPIX_META_STRING("gestureStrokeLengthThreshold"), jint>(); }
inline jint R_attr::gestureStrokeSquarenessThreshold() { return get_static_field<SCAPIX_META_STRING("gestureStrokeSquarenessThreshold"), jint>(); }
inline jint R_attr::gestureStrokeType() { return get_static_field<SCAPIX_META_STRING("gestureStrokeType"), jint>(); }
inline jint R_attr::gestureStrokeWidth() { return get_static_field<SCAPIX_META_STRING("gestureStrokeWidth"), jint>(); }
inline jint R_attr::glEsVersion() { return get_static_field<SCAPIX_META_STRING("glEsVersion"), jint>(); }
inline jint R_attr::goIcon() { return get_static_field<SCAPIX_META_STRING("goIcon"), jint>(); }
inline jint R_attr::gradientRadius() { return get_static_field<SCAPIX_META_STRING("gradientRadius"), jint>(); }
inline jint R_attr::grantUriPermissions() { return get_static_field<SCAPIX_META_STRING("grantUriPermissions"), jint>(); }
inline jint R_attr::gravity() { return get_static_field<SCAPIX_META_STRING("gravity"), jint>(); }
inline jint R_attr::gridViewStyle() { return get_static_field<SCAPIX_META_STRING("gridViewStyle"), jint>(); }
inline jint R_attr::groupIndicator() { return get_static_field<SCAPIX_META_STRING("groupIndicator"), jint>(); }
inline jint R_attr::hand_hour() { return get_static_field<SCAPIX_META_STRING("hand_hour"), jint>(); }
inline jint R_attr::hand_minute() { return get_static_field<SCAPIX_META_STRING("hand_minute"), jint>(); }
inline jint R_attr::handle() { return get_static_field<SCAPIX_META_STRING("handle"), jint>(); }
inline jint R_attr::handleProfiling() { return get_static_field<SCAPIX_META_STRING("handleProfiling"), jint>(); }
inline jint R_attr::hapticFeedbackEnabled() { return get_static_field<SCAPIX_META_STRING("hapticFeedbackEnabled"), jint>(); }
inline jint R_attr::hardwareAccelerated() { return get_static_field<SCAPIX_META_STRING("hardwareAccelerated"), jint>(); }
inline jint R_attr::hasCode() { return get_static_field<SCAPIX_META_STRING("hasCode"), jint>(); }
inline jint R_attr::headerAmPmTextAppearance() { return get_static_field<SCAPIX_META_STRING("headerAmPmTextAppearance"), jint>(); }
inline jint R_attr::headerBackground() { return get_static_field<SCAPIX_META_STRING("headerBackground"), jint>(); }
inline jint R_attr::headerDayOfMonthTextAppearance() { return get_static_field<SCAPIX_META_STRING("headerDayOfMonthTextAppearance"), jint>(); }
inline jint R_attr::headerDividersEnabled() { return get_static_field<SCAPIX_META_STRING("headerDividersEnabled"), jint>(); }
inline jint R_attr::headerMonthTextAppearance() { return get_static_field<SCAPIX_META_STRING("headerMonthTextAppearance"), jint>(); }
inline jint R_attr::headerTimeTextAppearance() { return get_static_field<SCAPIX_META_STRING("headerTimeTextAppearance"), jint>(); }
inline jint R_attr::headerYearTextAppearance() { return get_static_field<SCAPIX_META_STRING("headerYearTextAppearance"), jint>(); }
inline jint R_attr::height() { return get_static_field<SCAPIX_META_STRING("height"), jint>(); }
inline jint R_attr::hideOnContentScroll() { return get_static_field<SCAPIX_META_STRING("hideOnContentScroll"), jint>(); }
inline jint R_attr::hint() { return get_static_field<SCAPIX_META_STRING("hint"), jint>(); }
inline jint R_attr::homeAsUpIndicator() { return get_static_field<SCAPIX_META_STRING("homeAsUpIndicator"), jint>(); }
inline jint R_attr::homeLayout() { return get_static_field<SCAPIX_META_STRING("homeLayout"), jint>(); }
inline jint R_attr::horizontalDivider() { return get_static_field<SCAPIX_META_STRING("horizontalDivider"), jint>(); }
inline jint R_attr::horizontalGap() { return get_static_field<SCAPIX_META_STRING("horizontalGap"), jint>(); }
inline jint R_attr::horizontalScrollViewStyle() { return get_static_field<SCAPIX_META_STRING("horizontalScrollViewStyle"), jint>(); }
inline jint R_attr::horizontalSpacing() { return get_static_field<SCAPIX_META_STRING("horizontalSpacing"), jint>(); }
inline jint R_attr::host() { return get_static_field<SCAPIX_META_STRING("host"), jint>(); }
inline jint R_attr::hotSpotX() { return get_static_field<SCAPIX_META_STRING("hotSpotX"), jint>(); }
inline jint R_attr::hotSpotY() { return get_static_field<SCAPIX_META_STRING("hotSpotY"), jint>(); }
inline jint R_attr::hyphenationFrequency() { return get_static_field<SCAPIX_META_STRING("hyphenationFrequency"), jint>(); }
inline jint R_attr::icon() { return get_static_field<SCAPIX_META_STRING("icon"), jint>(); }
inline jint R_attr::iconPreview() { return get_static_field<SCAPIX_META_STRING("iconPreview"), jint>(); }
inline jint R_attr::iconSpaceReserved() { return get_static_field<SCAPIX_META_STRING("iconSpaceReserved"), jint>(); }
inline jint R_attr::iconTint() { return get_static_field<SCAPIX_META_STRING("iconTint"), jint>(); }
inline jint R_attr::iconTintMode() { return get_static_field<SCAPIX_META_STRING("iconTintMode"), jint>(); }
inline jint R_attr::iconifiedByDefault() { return get_static_field<SCAPIX_META_STRING("iconifiedByDefault"), jint>(); }
inline jint R_attr::id() { return get_static_field<SCAPIX_META_STRING("id"), jint>(); }
inline jint R_attr::ignoreGravity() { return get_static_field<SCAPIX_META_STRING("ignoreGravity"), jint>(); }
inline jint R_attr::imageButtonStyle() { return get_static_field<SCAPIX_META_STRING("imageButtonStyle"), jint>(); }
inline jint R_attr::imageWellStyle() { return get_static_field<SCAPIX_META_STRING("imageWellStyle"), jint>(); }
inline jint R_attr::imeActionId() { return get_static_field<SCAPIX_META_STRING("imeActionId"), jint>(); }
inline jint R_attr::imeActionLabel() { return get_static_field<SCAPIX_META_STRING("imeActionLabel"), jint>(); }
inline jint R_attr::imeExtractEnterAnimation() { return get_static_field<SCAPIX_META_STRING("imeExtractEnterAnimation"), jint>(); }
inline jint R_attr::imeExtractExitAnimation() { return get_static_field<SCAPIX_META_STRING("imeExtractExitAnimation"), jint>(); }
inline jint R_attr::imeFullscreenBackground() { return get_static_field<SCAPIX_META_STRING("imeFullscreenBackground"), jint>(); }
inline jint R_attr::imeOptions() { return get_static_field<SCAPIX_META_STRING("imeOptions"), jint>(); }
inline jint R_attr::imeSubtypeExtraValue() { return get_static_field<SCAPIX_META_STRING("imeSubtypeExtraValue"), jint>(); }
inline jint R_attr::imeSubtypeLocale() { return get_static_field<SCAPIX_META_STRING("imeSubtypeLocale"), jint>(); }
inline jint R_attr::imeSubtypeMode() { return get_static_field<SCAPIX_META_STRING("imeSubtypeMode"), jint>(); }
inline jint R_attr::immersive() { return get_static_field<SCAPIX_META_STRING("immersive"), jint>(); }
inline jint R_attr::importantForAccessibility() { return get_static_field<SCAPIX_META_STRING("importantForAccessibility"), jint>(); }
inline jint R_attr::importantForAutofill() { return get_static_field<SCAPIX_META_STRING("importantForAutofill"), jint>(); }
inline jint R_attr::inAnimation() { return get_static_field<SCAPIX_META_STRING("inAnimation"), jint>(); }
inline jint R_attr::includeFontPadding() { return get_static_field<SCAPIX_META_STRING("includeFontPadding"), jint>(); }
inline jint R_attr::includeInGlobalSearch() { return get_static_field<SCAPIX_META_STRING("includeInGlobalSearch"), jint>(); }
inline jint R_attr::indeterminate() { return get_static_field<SCAPIX_META_STRING("indeterminate"), jint>(); }
inline jint R_attr::indeterminateBehavior() { return get_static_field<SCAPIX_META_STRING("indeterminateBehavior"), jint>(); }
inline jint R_attr::indeterminateDrawable() { return get_static_field<SCAPIX_META_STRING("indeterminateDrawable"), jint>(); }
inline jint R_attr::indeterminateDuration() { return get_static_field<SCAPIX_META_STRING("indeterminateDuration"), jint>(); }
inline jint R_attr::indeterminateOnly() { return get_static_field<SCAPIX_META_STRING("indeterminateOnly"), jint>(); }
inline jint R_attr::indeterminateProgressStyle() { return get_static_field<SCAPIX_META_STRING("indeterminateProgressStyle"), jint>(); }
inline jint R_attr::indeterminateTint() { return get_static_field<SCAPIX_META_STRING("indeterminateTint"), jint>(); }
inline jint R_attr::indeterminateTintMode() { return get_static_field<SCAPIX_META_STRING("indeterminateTintMode"), jint>(); }
inline jint R_attr::indicatorEnd() { return get_static_field<SCAPIX_META_STRING("indicatorEnd"), jint>(); }
inline jint R_attr::indicatorLeft() { return get_static_field<SCAPIX_META_STRING("indicatorLeft"), jint>(); }
inline jint R_attr::indicatorRight() { return get_static_field<SCAPIX_META_STRING("indicatorRight"), jint>(); }
inline jint R_attr::indicatorStart() { return get_static_field<SCAPIX_META_STRING("indicatorStart"), jint>(); }
inline jint R_attr::inflatedId() { return get_static_field<SCAPIX_META_STRING("inflatedId"), jint>(); }
inline jint R_attr::initOrder() { return get_static_field<SCAPIX_META_STRING("initOrder"), jint>(); }
inline jint R_attr::initialKeyguardLayout() { return get_static_field<SCAPIX_META_STRING("initialKeyguardLayout"), jint>(); }
inline jint R_attr::initialLayout() { return get_static_field<SCAPIX_META_STRING("initialLayout"), jint>(); }
inline jint R_attr::innerRadius() { return get_static_field<SCAPIX_META_STRING("innerRadius"), jint>(); }
inline jint R_attr::innerRadiusRatio() { return get_static_field<SCAPIX_META_STRING("innerRadiusRatio"), jint>(); }
inline jint R_attr::inputMethod() { return get_static_field<SCAPIX_META_STRING("inputMethod"), jint>(); }
inline jint R_attr::inputType() { return get_static_field<SCAPIX_META_STRING("inputType"), jint>(); }
inline jint R_attr::inset() { return get_static_field<SCAPIX_META_STRING("inset"), jint>(); }
inline jint R_attr::insetBottom() { return get_static_field<SCAPIX_META_STRING("insetBottom"), jint>(); }
inline jint R_attr::insetLeft() { return get_static_field<SCAPIX_META_STRING("insetLeft"), jint>(); }
inline jint R_attr::insetRight() { return get_static_field<SCAPIX_META_STRING("insetRight"), jint>(); }
inline jint R_attr::insetTop() { return get_static_field<SCAPIX_META_STRING("insetTop"), jint>(); }
inline jint R_attr::installLocation() { return get_static_field<SCAPIX_META_STRING("installLocation"), jint>(); }
inline jint R_attr::interpolator() { return get_static_field<SCAPIX_META_STRING("interpolator"), jint>(); }
inline jint R_attr::isAlwaysSyncable() { return get_static_field<SCAPIX_META_STRING("isAlwaysSyncable"), jint>(); }
inline jint R_attr::isAsciiCapable() { return get_static_field<SCAPIX_META_STRING("isAsciiCapable"), jint>(); }
inline jint R_attr::isAuxiliary() { return get_static_field<SCAPIX_META_STRING("isAuxiliary"), jint>(); }
inline jint R_attr::isDefault() { return get_static_field<SCAPIX_META_STRING("isDefault"), jint>(); }
inline jint R_attr::isFeatureSplit() { return get_static_field<SCAPIX_META_STRING("isFeatureSplit"), jint>(); }
inline jint R_attr::isGame() { return get_static_field<SCAPIX_META_STRING("isGame"), jint>(); }
inline jint R_attr::isIndicator() { return get_static_field<SCAPIX_META_STRING("isIndicator"), jint>(); }
inline jint R_attr::isModifier() { return get_static_field<SCAPIX_META_STRING("isModifier"), jint>(); }
inline jint R_attr::isRepeatable() { return get_static_field<SCAPIX_META_STRING("isRepeatable"), jint>(); }
inline jint R_attr::isScrollContainer() { return get_static_field<SCAPIX_META_STRING("isScrollContainer"), jint>(); }
inline jint R_attr::isStatic() { return get_static_field<SCAPIX_META_STRING("isStatic"), jint>(); }
inline jint R_attr::isSticky() { return get_static_field<SCAPIX_META_STRING("isSticky"), jint>(); }
inline jint R_attr::isolatedProcess() { return get_static_field<SCAPIX_META_STRING("isolatedProcess"), jint>(); }
inline jint R_attr::isolatedSplits() { return get_static_field<SCAPIX_META_STRING("isolatedSplits"), jint>(); }
inline jint R_attr::itemBackground() { return get_static_field<SCAPIX_META_STRING("itemBackground"), jint>(); }
inline jint R_attr::itemIconDisabledAlpha() { return get_static_field<SCAPIX_META_STRING("itemIconDisabledAlpha"), jint>(); }
inline jint R_attr::itemPadding() { return get_static_field<SCAPIX_META_STRING("itemPadding"), jint>(); }
inline jint R_attr::itemTextAppearance() { return get_static_field<SCAPIX_META_STRING("itemTextAppearance"), jint>(); }
inline jint R_attr::justificationMode() { return get_static_field<SCAPIX_META_STRING("justificationMode"), jint>(); }
inline jint R_attr::keepScreenOn() { return get_static_field<SCAPIX_META_STRING("keepScreenOn"), jint>(); }
inline jint R_attr::key() { return get_static_field<SCAPIX_META_STRING("key"), jint>(); }
inline jint R_attr::keyBackground() { return get_static_field<SCAPIX_META_STRING("keyBackground"), jint>(); }
inline jint R_attr::keyEdgeFlags() { return get_static_field<SCAPIX_META_STRING("keyEdgeFlags"), jint>(); }
inline jint R_attr::keyHeight() { return get_static_field<SCAPIX_META_STRING("keyHeight"), jint>(); }
inline jint R_attr::keyIcon() { return get_static_field<SCAPIX_META_STRING("keyIcon"), jint>(); }
inline jint R_attr::keyLabel() { return get_static_field<SCAPIX_META_STRING("keyLabel"), jint>(); }
inline jint R_attr::keyOutputText() { return get_static_field<SCAPIX_META_STRING("keyOutputText"), jint>(); }
inline jint R_attr::keyPreviewHeight() { return get_static_field<SCAPIX_META_STRING("keyPreviewHeight"), jint>(); }
inline jint R_attr::keyPreviewLayout() { return get_static_field<SCAPIX_META_STRING("keyPreviewLayout"), jint>(); }
inline jint R_attr::keyPreviewOffset() { return get_static_field<SCAPIX_META_STRING("keyPreviewOffset"), jint>(); }
inline jint R_attr::keySet() { return get_static_field<SCAPIX_META_STRING("keySet"), jint>(); }
inline jint R_attr::keyTextColor() { return get_static_field<SCAPIX_META_STRING("keyTextColor"), jint>(); }
inline jint R_attr::keyTextSize() { return get_static_field<SCAPIX_META_STRING("keyTextSize"), jint>(); }
inline jint R_attr::keyWidth() { return get_static_field<SCAPIX_META_STRING("keyWidth"), jint>(); }
inline jint R_attr::keyboardLayout() { return get_static_field<SCAPIX_META_STRING("keyboardLayout"), jint>(); }
inline jint R_attr::keyboardMode() { return get_static_field<SCAPIX_META_STRING("keyboardMode"), jint>(); }
inline jint R_attr::keyboardNavigationCluster() { return get_static_field<SCAPIX_META_STRING("keyboardNavigationCluster"), jint>(); }
inline jint R_attr::keycode() { return get_static_field<SCAPIX_META_STRING("keycode"), jint>(); }
inline jint R_attr::killAfterRestore() { return get_static_field<SCAPIX_META_STRING("killAfterRestore"), jint>(); }
inline jint R_attr::label() { return get_static_field<SCAPIX_META_STRING("label"), jint>(); }
inline jint R_attr::labelFor() { return get_static_field<SCAPIX_META_STRING("labelFor"), jint>(); }
inline jint R_attr::labelTextSize() { return get_static_field<SCAPIX_META_STRING("labelTextSize"), jint>(); }
inline jint R_attr::languageTag() { return get_static_field<SCAPIX_META_STRING("languageTag"), jint>(); }
inline jint R_attr::largeHeap() { return get_static_field<SCAPIX_META_STRING("largeHeap"), jint>(); }
inline jint R_attr::largeScreens() { return get_static_field<SCAPIX_META_STRING("largeScreens"), jint>(); }
inline jint R_attr::largestWidthLimitDp() { return get_static_field<SCAPIX_META_STRING("largestWidthLimitDp"), jint>(); }
inline jint R_attr::lastBaselineToBottomHeight() { return get_static_field<SCAPIX_META_STRING("lastBaselineToBottomHeight"), jint>(); }
inline jint R_attr::launchMode() { return get_static_field<SCAPIX_META_STRING("launchMode"), jint>(); }
inline jint R_attr::launchTaskBehindSourceAnimation() { return get_static_field<SCAPIX_META_STRING("launchTaskBehindSourceAnimation"), jint>(); }
inline jint R_attr::launchTaskBehindTargetAnimation() { return get_static_field<SCAPIX_META_STRING("launchTaskBehindTargetAnimation"), jint>(); }
inline jint R_attr::layerType() { return get_static_field<SCAPIX_META_STRING("layerType"), jint>(); }
inline jint R_attr::layout() { return get_static_field<SCAPIX_META_STRING("layout"), jint>(); }
inline jint R_attr::layoutAnimation() { return get_static_field<SCAPIX_META_STRING("layoutAnimation"), jint>(); }
inline jint R_attr::layoutDirection() { return get_static_field<SCAPIX_META_STRING("layoutDirection"), jint>(); }
inline jint R_attr::layoutMode() { return get_static_field<SCAPIX_META_STRING("layoutMode"), jint>(); }
inline jint R_attr::layout_above() { return get_static_field<SCAPIX_META_STRING("layout_above"), jint>(); }
inline jint R_attr::layout_alignBaseline() { return get_static_field<SCAPIX_META_STRING("layout_alignBaseline"), jint>(); }
inline jint R_attr::layout_alignBottom() { return get_static_field<SCAPIX_META_STRING("layout_alignBottom"), jint>(); }
inline jint R_attr::layout_alignEnd() { return get_static_field<SCAPIX_META_STRING("layout_alignEnd"), jint>(); }
inline jint R_attr::layout_alignLeft() { return get_static_field<SCAPIX_META_STRING("layout_alignLeft"), jint>(); }
inline jint R_attr::layout_alignParentBottom() { return get_static_field<SCAPIX_META_STRING("layout_alignParentBottom"), jint>(); }
inline jint R_attr::layout_alignParentEnd() { return get_static_field<SCAPIX_META_STRING("layout_alignParentEnd"), jint>(); }
inline jint R_attr::layout_alignParentLeft() { return get_static_field<SCAPIX_META_STRING("layout_alignParentLeft"), jint>(); }
inline jint R_attr::layout_alignParentRight() { return get_static_field<SCAPIX_META_STRING("layout_alignParentRight"), jint>(); }
inline jint R_attr::layout_alignParentStart() { return get_static_field<SCAPIX_META_STRING("layout_alignParentStart"), jint>(); }
inline jint R_attr::layout_alignParentTop() { return get_static_field<SCAPIX_META_STRING("layout_alignParentTop"), jint>(); }
inline jint R_attr::layout_alignRight() { return get_static_field<SCAPIX_META_STRING("layout_alignRight"), jint>(); }
inline jint R_attr::layout_alignStart() { return get_static_field<SCAPIX_META_STRING("layout_alignStart"), jint>(); }
inline jint R_attr::layout_alignTop() { return get_static_field<SCAPIX_META_STRING("layout_alignTop"), jint>(); }
inline jint R_attr::layout_alignWithParentIfMissing() { return get_static_field<SCAPIX_META_STRING("layout_alignWithParentIfMissing"), jint>(); }
inline jint R_attr::layout_below() { return get_static_field<SCAPIX_META_STRING("layout_below"), jint>(); }
inline jint R_attr::layout_centerHorizontal() { return get_static_field<SCAPIX_META_STRING("layout_centerHorizontal"), jint>(); }
inline jint R_attr::layout_centerInParent() { return get_static_field<SCAPIX_META_STRING("layout_centerInParent"), jint>(); }
inline jint R_attr::layout_centerVertical() { return get_static_field<SCAPIX_META_STRING("layout_centerVertical"), jint>(); }
inline jint R_attr::layout_column() { return get_static_field<SCAPIX_META_STRING("layout_column"), jint>(); }
inline jint R_attr::layout_columnSpan() { return get_static_field<SCAPIX_META_STRING("layout_columnSpan"), jint>(); }
inline jint R_attr::layout_columnWeight() { return get_static_field<SCAPIX_META_STRING("layout_columnWeight"), jint>(); }
inline jint R_attr::layout_gravity() { return get_static_field<SCAPIX_META_STRING("layout_gravity"), jint>(); }
inline jint R_attr::layout_height() { return get_static_field<SCAPIX_META_STRING("layout_height"), jint>(); }
inline jint R_attr::layout_margin() { return get_static_field<SCAPIX_META_STRING("layout_margin"), jint>(); }
inline jint R_attr::layout_marginBottom() { return get_static_field<SCAPIX_META_STRING("layout_marginBottom"), jint>(); }
inline jint R_attr::layout_marginEnd() { return get_static_field<SCAPIX_META_STRING("layout_marginEnd"), jint>(); }
inline jint R_attr::layout_marginHorizontal() { return get_static_field<SCAPIX_META_STRING("layout_marginHorizontal"), jint>(); }
inline jint R_attr::layout_marginLeft() { return get_static_field<SCAPIX_META_STRING("layout_marginLeft"), jint>(); }
inline jint R_attr::layout_marginRight() { return get_static_field<SCAPIX_META_STRING("layout_marginRight"), jint>(); }
inline jint R_attr::layout_marginStart() { return get_static_field<SCAPIX_META_STRING("layout_marginStart"), jint>(); }
inline jint R_attr::layout_marginTop() { return get_static_field<SCAPIX_META_STRING("layout_marginTop"), jint>(); }
inline jint R_attr::layout_marginVertical() { return get_static_field<SCAPIX_META_STRING("layout_marginVertical"), jint>(); }
inline jint R_attr::layout_row() { return get_static_field<SCAPIX_META_STRING("layout_row"), jint>(); }
inline jint R_attr::layout_rowSpan() { return get_static_field<SCAPIX_META_STRING("layout_rowSpan"), jint>(); }
inline jint R_attr::layout_rowWeight() { return get_static_field<SCAPIX_META_STRING("layout_rowWeight"), jint>(); }
inline jint R_attr::layout_scale() { return get_static_field<SCAPIX_META_STRING("layout_scale"), jint>(); }
inline jint R_attr::layout_span() { return get_static_field<SCAPIX_META_STRING("layout_span"), jint>(); }
inline jint R_attr::layout_toEndOf() { return get_static_field<SCAPIX_META_STRING("layout_toEndOf"), jint>(); }
inline jint R_attr::layout_toLeftOf() { return get_static_field<SCAPIX_META_STRING("layout_toLeftOf"), jint>(); }
inline jint R_attr::layout_toRightOf() { return get_static_field<SCAPIX_META_STRING("layout_toRightOf"), jint>(); }
inline jint R_attr::layout_toStartOf() { return get_static_field<SCAPIX_META_STRING("layout_toStartOf"), jint>(); }
inline jint R_attr::layout_weight() { return get_static_field<SCAPIX_META_STRING("layout_weight"), jint>(); }
inline jint R_attr::layout_width() { return get_static_field<SCAPIX_META_STRING("layout_width"), jint>(); }
inline jint R_attr::layout_x() { return get_static_field<SCAPIX_META_STRING("layout_x"), jint>(); }
inline jint R_attr::layout_y() { return get_static_field<SCAPIX_META_STRING("layout_y"), jint>(); }
inline jint R_attr::left() { return get_static_field<SCAPIX_META_STRING("left"), jint>(); }
inline jint R_attr::letterSpacing() { return get_static_field<SCAPIX_META_STRING("letterSpacing"), jint>(); }
inline jint R_attr::level() { return get_static_field<SCAPIX_META_STRING("level"), jint>(); }
inline jint R_attr::lineHeight() { return get_static_field<SCAPIX_META_STRING("lineHeight"), jint>(); }
inline jint R_attr::lineSpacingExtra() { return get_static_field<SCAPIX_META_STRING("lineSpacingExtra"), jint>(); }
inline jint R_attr::lineSpacingMultiplier() { return get_static_field<SCAPIX_META_STRING("lineSpacingMultiplier"), jint>(); }
inline jint R_attr::lines() { return get_static_field<SCAPIX_META_STRING("lines"), jint>(); }
inline jint R_attr::linksClickable() { return get_static_field<SCAPIX_META_STRING("linksClickable"), jint>(); }
inline jint R_attr::listChoiceBackgroundIndicator() { return get_static_field<SCAPIX_META_STRING("listChoiceBackgroundIndicator"), jint>(); }
inline jint R_attr::listChoiceIndicatorMultiple() { return get_static_field<SCAPIX_META_STRING("listChoiceIndicatorMultiple"), jint>(); }
inline jint R_attr::listChoiceIndicatorSingle() { return get_static_field<SCAPIX_META_STRING("listChoiceIndicatorSingle"), jint>(); }
inline jint R_attr::listDivider() { return get_static_field<SCAPIX_META_STRING("listDivider"), jint>(); }
inline jint R_attr::listDividerAlertDialog() { return get_static_field<SCAPIX_META_STRING("listDividerAlertDialog"), jint>(); }
inline jint R_attr::listMenuViewStyle() { return get_static_field<SCAPIX_META_STRING("listMenuViewStyle"), jint>(); }
inline jint R_attr::listPopupWindowStyle() { return get_static_field<SCAPIX_META_STRING("listPopupWindowStyle"), jint>(); }
inline jint R_attr::listPreferredItemHeight() { return get_static_field<SCAPIX_META_STRING("listPreferredItemHeight"), jint>(); }
inline jint R_attr::listPreferredItemHeightLarge() { return get_static_field<SCAPIX_META_STRING("listPreferredItemHeightLarge"), jint>(); }
inline jint R_attr::listPreferredItemHeightSmall() { return get_static_field<SCAPIX_META_STRING("listPreferredItemHeightSmall"), jint>(); }
inline jint R_attr::listPreferredItemPaddingEnd() { return get_static_field<SCAPIX_META_STRING("listPreferredItemPaddingEnd"), jint>(); }
inline jint R_attr::listPreferredItemPaddingLeft() { return get_static_field<SCAPIX_META_STRING("listPreferredItemPaddingLeft"), jint>(); }
inline jint R_attr::listPreferredItemPaddingRight() { return get_static_field<SCAPIX_META_STRING("listPreferredItemPaddingRight"), jint>(); }
inline jint R_attr::listPreferredItemPaddingStart() { return get_static_field<SCAPIX_META_STRING("listPreferredItemPaddingStart"), jint>(); }
inline jint R_attr::listSelector() { return get_static_field<SCAPIX_META_STRING("listSelector"), jint>(); }
inline jint R_attr::listSeparatorTextViewStyle() { return get_static_field<SCAPIX_META_STRING("listSeparatorTextViewStyle"), jint>(); }
inline jint R_attr::listViewStyle() { return get_static_field<SCAPIX_META_STRING("listViewStyle"), jint>(); }
inline jint R_attr::listViewWhiteStyle() { return get_static_field<SCAPIX_META_STRING("listViewWhiteStyle"), jint>(); }
inline jint R_attr::lockTaskMode() { return get_static_field<SCAPIX_META_STRING("lockTaskMode"), jint>(); }
inline jint R_attr::logo() { return get_static_field<SCAPIX_META_STRING("logo"), jint>(); }
inline jint R_attr::logoDescription() { return get_static_field<SCAPIX_META_STRING("logoDescription"), jint>(); }
inline jint R_attr::longClickable() { return get_static_field<SCAPIX_META_STRING("longClickable"), jint>(); }
inline jint R_attr::loopViews() { return get_static_field<SCAPIX_META_STRING("loopViews"), jint>(); }
inline jint R_attr::manageSpaceActivity() { return get_static_field<SCAPIX_META_STRING("manageSpaceActivity"), jint>(); }
inline jint R_attr::mapViewStyle() { return get_static_field<SCAPIX_META_STRING("mapViewStyle"), jint>(); }
inline jint R_attr::marqueeRepeatLimit() { return get_static_field<SCAPIX_META_STRING("marqueeRepeatLimit"), jint>(); }
inline jint R_attr::matchOrder() { return get_static_field<SCAPIX_META_STRING("matchOrder"), jint>(); }
inline jint R_attr::max() { return get_static_field<SCAPIX_META_STRING("max"), jint>(); }
inline jint R_attr::maxAspectRatio() { return get_static_field<SCAPIX_META_STRING("maxAspectRatio"), jint>(); }
inline jint R_attr::maxButtonHeight() { return get_static_field<SCAPIX_META_STRING("maxButtonHeight"), jint>(); }
inline jint R_attr::maxDate() { return get_static_field<SCAPIX_META_STRING("maxDate"), jint>(); }
inline jint R_attr::maxEms() { return get_static_field<SCAPIX_META_STRING("maxEms"), jint>(); }
inline jint R_attr::maxHeight() { return get_static_field<SCAPIX_META_STRING("maxHeight"), jint>(); }
inline jint R_attr::maxItemsPerRow() { return get_static_field<SCAPIX_META_STRING("maxItemsPerRow"), jint>(); }
inline jint R_attr::maxLength() { return get_static_field<SCAPIX_META_STRING("maxLength"), jint>(); }
inline jint R_attr::maxLevel() { return get_static_field<SCAPIX_META_STRING("maxLevel"), jint>(); }
inline jint R_attr::maxLines() { return get_static_field<SCAPIX_META_STRING("maxLines"), jint>(); }
inline jint R_attr::maxLongVersionCode() { return get_static_field<SCAPIX_META_STRING("maxLongVersionCode"), jint>(); }
inline jint R_attr::maxRecents() { return get_static_field<SCAPIX_META_STRING("maxRecents"), jint>(); }
inline jint R_attr::maxRows() { return get_static_field<SCAPIX_META_STRING("maxRows"), jint>(); }
inline jint R_attr::maxSdkVersion() { return get_static_field<SCAPIX_META_STRING("maxSdkVersion"), jint>(); }
inline jint R_attr::maxWidth() { return get_static_field<SCAPIX_META_STRING("maxWidth"), jint>(); }
inline jint R_attr::maximumAngle() { return get_static_field<SCAPIX_META_STRING("maximumAngle"), jint>(); }
inline jint R_attr::measureAllChildren() { return get_static_field<SCAPIX_META_STRING("measureAllChildren"), jint>(); }
inline jint R_attr::measureWithLargestChild() { return get_static_field<SCAPIX_META_STRING("measureWithLargestChild"), jint>(); }
inline jint R_attr::mediaRouteButtonStyle() { return get_static_field<SCAPIX_META_STRING("mediaRouteButtonStyle"), jint>(); }
inline jint R_attr::mediaRouteTypes() { return get_static_field<SCAPIX_META_STRING("mediaRouteTypes"), jint>(); }
inline jint R_attr::menuCategory() { return get_static_field<SCAPIX_META_STRING("menuCategory"), jint>(); }
inline jint R_attr::mimeType() { return get_static_field<SCAPIX_META_STRING("mimeType"), jint>(); }
inline jint R_attr::min() { return get_static_field<SCAPIX_META_STRING("min"), jint>(); }
inline jint R_attr::minDate() { return get_static_field<SCAPIX_META_STRING("minDate"), jint>(); }
inline jint R_attr::minEms() { return get_static_field<SCAPIX_META_STRING("minEms"), jint>(); }
inline jint R_attr::minHeight() { return get_static_field<SCAPIX_META_STRING("minHeight"), jint>(); }
inline jint R_attr::minLevel() { return get_static_field<SCAPIX_META_STRING("minLevel"), jint>(); }
inline jint R_attr::minLines() { return get_static_field<SCAPIX_META_STRING("minLines"), jint>(); }
inline jint R_attr::minResizeHeight() { return get_static_field<SCAPIX_META_STRING("minResizeHeight"), jint>(); }
inline jint R_attr::minResizeWidth() { return get_static_field<SCAPIX_META_STRING("minResizeWidth"), jint>(); }
inline jint R_attr::minSdkVersion() { return get_static_field<SCAPIX_META_STRING("minSdkVersion"), jint>(); }
inline jint R_attr::minWidth() { return get_static_field<SCAPIX_META_STRING("minWidth"), jint>(); }
inline jint R_attr::minimumHorizontalAngle() { return get_static_field<SCAPIX_META_STRING("minimumHorizontalAngle"), jint>(); }
inline jint R_attr::minimumVerticalAngle() { return get_static_field<SCAPIX_META_STRING("minimumVerticalAngle"), jint>(); }
inline jint R_attr::mipMap() { return get_static_field<SCAPIX_META_STRING("mipMap"), jint>(); }
inline jint R_attr::mirrorForRtl() { return get_static_field<SCAPIX_META_STRING("mirrorForRtl"), jint>(); }
inline jint R_attr::mode() { return get_static_field<SCAPIX_META_STRING("mode"), jint>(); }
inline jint R_attr::moreIcon() { return get_static_field<SCAPIX_META_STRING("moreIcon"), jint>(); }
inline jint R_attr::multiArch() { return get_static_field<SCAPIX_META_STRING("multiArch"), jint>(); }
inline jint R_attr::multiprocess() { return get_static_field<SCAPIX_META_STRING("multiprocess"), jint>(); }
inline jint R_attr::name() { return get_static_field<SCAPIX_META_STRING("name"), jint>(); }
inline jint R_attr::navigationBarColor() { return get_static_field<SCAPIX_META_STRING("navigationBarColor"), jint>(); }
inline jint R_attr::navigationBarDividerColor() { return get_static_field<SCAPIX_META_STRING("navigationBarDividerColor"), jint>(); }
inline jint R_attr::navigationContentDescription() { return get_static_field<SCAPIX_META_STRING("navigationContentDescription"), jint>(); }
inline jint R_attr::navigationIcon() { return get_static_field<SCAPIX_META_STRING("navigationIcon"), jint>(); }
inline jint R_attr::navigationMode() { return get_static_field<SCAPIX_META_STRING("navigationMode"), jint>(); }
inline jint R_attr::negativeButtonText() { return get_static_field<SCAPIX_META_STRING("negativeButtonText"), jint>(); }
inline jint R_attr::nestedScrollingEnabled() { return get_static_field<SCAPIX_META_STRING("nestedScrollingEnabled"), jint>(); }
inline jint R_attr::networkSecurityConfig() { return get_static_field<SCAPIX_META_STRING("networkSecurityConfig"), jint>(); }
inline jint R_attr::nextClusterForward() { return get_static_field<SCAPIX_META_STRING("nextClusterForward"), jint>(); }
inline jint R_attr::nextFocusDown() { return get_static_field<SCAPIX_META_STRING("nextFocusDown"), jint>(); }
inline jint R_attr::nextFocusForward() { return get_static_field<SCAPIX_META_STRING("nextFocusForward"), jint>(); }
inline jint R_attr::nextFocusLeft() { return get_static_field<SCAPIX_META_STRING("nextFocusLeft"), jint>(); }
inline jint R_attr::nextFocusRight() { return get_static_field<SCAPIX_META_STRING("nextFocusRight"), jint>(); }
inline jint R_attr::nextFocusUp() { return get_static_field<SCAPIX_META_STRING("nextFocusUp"), jint>(); }
inline jint R_attr::noHistory() { return get_static_field<SCAPIX_META_STRING("noHistory"), jint>(); }
inline jint R_attr::normalScreens() { return get_static_field<SCAPIX_META_STRING("normalScreens"), jint>(); }
inline jint R_attr::notificationTimeout() { return get_static_field<SCAPIX_META_STRING("notificationTimeout"), jint>(); }
inline jint R_attr::numColumns() { return get_static_field<SCAPIX_META_STRING("numColumns"), jint>(); }
inline jint R_attr::numStars() { return get_static_field<SCAPIX_META_STRING("numStars"), jint>(); }
inline jint R_attr::numberPickerStyle() { return get_static_field<SCAPIX_META_STRING("numberPickerStyle"), jint>(); }
inline jint R_attr::numbersBackgroundColor() { return get_static_field<SCAPIX_META_STRING("numbersBackgroundColor"), jint>(); }
inline jint R_attr::numbersInnerTextColor() { return get_static_field<SCAPIX_META_STRING("numbersInnerTextColor"), jint>(); }
inline jint R_attr::numbersSelectorColor() { return get_static_field<SCAPIX_META_STRING("numbersSelectorColor"), jint>(); }
inline jint R_attr::numbersTextColor() { return get_static_field<SCAPIX_META_STRING("numbersTextColor"), jint>(); }
inline jint R_attr::numeric() { return get_static_field<SCAPIX_META_STRING("numeric"), jint>(); }
inline jint R_attr::numericModifiers() { return get_static_field<SCAPIX_META_STRING("numericModifiers"), jint>(); }
inline jint R_attr::numericShortcut() { return get_static_field<SCAPIX_META_STRING("numericShortcut"), jint>(); }
inline jint R_attr::offset() { return get_static_field<SCAPIX_META_STRING("offset"), jint>(); }
inline jint R_attr::onClick() { return get_static_field<SCAPIX_META_STRING("onClick"), jint>(); }
inline jint R_attr::oneshot() { return get_static_field<SCAPIX_META_STRING("oneshot"), jint>(); }
inline jint R_attr::opacity() { return get_static_field<SCAPIX_META_STRING("opacity"), jint>(); }
inline jint R_attr::order() { return get_static_field<SCAPIX_META_STRING("order"), jint>(); }
inline jint R_attr::orderInCategory() { return get_static_field<SCAPIX_META_STRING("orderInCategory"), jint>(); }
inline jint R_attr::ordering() { return get_static_field<SCAPIX_META_STRING("ordering"), jint>(); }
inline jint R_attr::orderingFromXml() { return get_static_field<SCAPIX_META_STRING("orderingFromXml"), jint>(); }
inline jint R_attr::orientation() { return get_static_field<SCAPIX_META_STRING("orientation"), jint>(); }
inline jint R_attr::outAnimation() { return get_static_field<SCAPIX_META_STRING("outAnimation"), jint>(); }
inline jint R_attr::outlineAmbientShadowColor() { return get_static_field<SCAPIX_META_STRING("outlineAmbientShadowColor"), jint>(); }
inline jint R_attr::outlineProvider() { return get_static_field<SCAPIX_META_STRING("outlineProvider"), jint>(); }
inline jint R_attr::outlineSpotShadowColor() { return get_static_field<SCAPIX_META_STRING("outlineSpotShadowColor"), jint>(); }
inline jint R_attr::overScrollFooter() { return get_static_field<SCAPIX_META_STRING("overScrollFooter"), jint>(); }
inline jint R_attr::overScrollHeader() { return get_static_field<SCAPIX_META_STRING("overScrollHeader"), jint>(); }
inline jint R_attr::overScrollMode() { return get_static_field<SCAPIX_META_STRING("overScrollMode"), jint>(); }
inline jint R_attr::overlapAnchor() { return get_static_field<SCAPIX_META_STRING("overlapAnchor"), jint>(); }
inline jint R_attr::overridesImplicitlyEnabledSubtype() { return get_static_field<SCAPIX_META_STRING("overridesImplicitlyEnabledSubtype"), jint>(); }
inline jint R_attr::packageNames() { return get_static_field<SCAPIX_META_STRING("packageNames"), jint>(); }
inline jint R_attr::padding() { return get_static_field<SCAPIX_META_STRING("padding"), jint>(); }
inline jint R_attr::paddingBottom() { return get_static_field<SCAPIX_META_STRING("paddingBottom"), jint>(); }
inline jint R_attr::paddingEnd() { return get_static_field<SCAPIX_META_STRING("paddingEnd"), jint>(); }
inline jint R_attr::paddingHorizontal() { return get_static_field<SCAPIX_META_STRING("paddingHorizontal"), jint>(); }
inline jint R_attr::paddingLeft() { return get_static_field<SCAPIX_META_STRING("paddingLeft"), jint>(); }
inline jint R_attr::paddingMode() { return get_static_field<SCAPIX_META_STRING("paddingMode"), jint>(); }
inline jint R_attr::paddingRight() { return get_static_field<SCAPIX_META_STRING("paddingRight"), jint>(); }
inline jint R_attr::paddingStart() { return get_static_field<SCAPIX_META_STRING("paddingStart"), jint>(); }
inline jint R_attr::paddingTop() { return get_static_field<SCAPIX_META_STRING("paddingTop"), jint>(); }
inline jint R_attr::paddingVertical() { return get_static_field<SCAPIX_META_STRING("paddingVertical"), jint>(); }
inline jint R_attr::panelBackground() { return get_static_field<SCAPIX_META_STRING("panelBackground"), jint>(); }
inline jint R_attr::panelColorBackground() { return get_static_field<SCAPIX_META_STRING("panelColorBackground"), jint>(); }
inline jint R_attr::panelColorForeground() { return get_static_field<SCAPIX_META_STRING("panelColorForeground"), jint>(); }
inline jint R_attr::panelFullBackground() { return get_static_field<SCAPIX_META_STRING("panelFullBackground"), jint>(); }
inline jint R_attr::panelTextAppearance() { return get_static_field<SCAPIX_META_STRING("panelTextAppearance"), jint>(); }
inline jint R_attr::parentActivityName() { return get_static_field<SCAPIX_META_STRING("parentActivityName"), jint>(); }
inline jint R_attr::password() { return get_static_field<SCAPIX_META_STRING("password"), jint>(); }
inline jint R_attr::path() { return get_static_field<SCAPIX_META_STRING("path"), jint>(); }
inline jint R_attr::pathData() { return get_static_field<SCAPIX_META_STRING("pathData"), jint>(); }
inline jint R_attr::pathPattern() { return get_static_field<SCAPIX_META_STRING("pathPattern"), jint>(); }
inline jint R_attr::pathPrefix() { return get_static_field<SCAPIX_META_STRING("pathPrefix"), jint>(); }
inline jint R_attr::patternPathData() { return get_static_field<SCAPIX_META_STRING("patternPathData"), jint>(); }
inline jint R_attr::permission() { return get_static_field<SCAPIX_META_STRING("permission"), jint>(); }
inline jint R_attr::permissionFlags() { return get_static_field<SCAPIX_META_STRING("permissionFlags"), jint>(); }
inline jint R_attr::permissionGroup() { return get_static_field<SCAPIX_META_STRING("permissionGroup"), jint>(); }
inline jint R_attr::permissionGroupFlags() { return get_static_field<SCAPIX_META_STRING("permissionGroupFlags"), jint>(); }
inline jint R_attr::persistableMode() { return get_static_field<SCAPIX_META_STRING("persistableMode"), jint>(); }
inline jint R_attr::persistent() { return get_static_field<SCAPIX_META_STRING("persistent"), jint>(); }
inline jint R_attr::persistentDrawingCache() { return get_static_field<SCAPIX_META_STRING("persistentDrawingCache"), jint>(); }
inline jint R_attr::persistentWhenFeatureAvailable() { return get_static_field<SCAPIX_META_STRING("persistentWhenFeatureAvailable"), jint>(); }
inline jint R_attr::phoneNumber() { return get_static_field<SCAPIX_META_STRING("phoneNumber"), jint>(); }
inline jint R_attr::pivotX() { return get_static_field<SCAPIX_META_STRING("pivotX"), jint>(); }
inline jint R_attr::pivotY() { return get_static_field<SCAPIX_META_STRING("pivotY"), jint>(); }
inline jint R_attr::pointerIcon() { return get_static_field<SCAPIX_META_STRING("pointerIcon"), jint>(); }
inline jint R_attr::popupAnimationStyle() { return get_static_field<SCAPIX_META_STRING("popupAnimationStyle"), jint>(); }
inline jint R_attr::popupBackground() { return get_static_field<SCAPIX_META_STRING("popupBackground"), jint>(); }
inline jint R_attr::popupCharacters() { return get_static_field<SCAPIX_META_STRING("popupCharacters"), jint>(); }
inline jint R_attr::popupElevation() { return get_static_field<SCAPIX_META_STRING("popupElevation"), jint>(); }
inline jint R_attr::popupEnterTransition() { return get_static_field<SCAPIX_META_STRING("popupEnterTransition"), jint>(); }
inline jint R_attr::popupExitTransition() { return get_static_field<SCAPIX_META_STRING("popupExitTransition"), jint>(); }
inline jint R_attr::popupKeyboard() { return get_static_field<SCAPIX_META_STRING("popupKeyboard"), jint>(); }
inline jint R_attr::popupLayout() { return get_static_field<SCAPIX_META_STRING("popupLayout"), jint>(); }
inline jint R_attr::popupMenuStyle() { return get_static_field<SCAPIX_META_STRING("popupMenuStyle"), jint>(); }
inline jint R_attr::popupTheme() { return get_static_field<SCAPIX_META_STRING("popupTheme"), jint>(); }
inline jint R_attr::popupWindowStyle() { return get_static_field<SCAPIX_META_STRING("popupWindowStyle"), jint>(); }
inline jint R_attr::port() { return get_static_field<SCAPIX_META_STRING("port"), jint>(); }
inline jint R_attr::positiveButtonText() { return get_static_field<SCAPIX_META_STRING("positiveButtonText"), jint>(); }
inline jint R_attr::preferenceCategoryStyle() { return get_static_field<SCAPIX_META_STRING("preferenceCategoryStyle"), jint>(); }
inline jint R_attr::preferenceFragmentStyle() { return get_static_field<SCAPIX_META_STRING("preferenceFragmentStyle"), jint>(); }
inline jint R_attr::preferenceInformationStyle() { return get_static_field<SCAPIX_META_STRING("preferenceInformationStyle"), jint>(); }
inline jint R_attr::preferenceLayoutChild() { return get_static_field<SCAPIX_META_STRING("preferenceLayoutChild"), jint>(); }
inline jint R_attr::preferenceScreenStyle() { return get_static_field<SCAPIX_META_STRING("preferenceScreenStyle"), jint>(); }
inline jint R_attr::preferenceStyle() { return get_static_field<SCAPIX_META_STRING("preferenceStyle"), jint>(); }
inline jint R_attr::presentationTheme() { return get_static_field<SCAPIX_META_STRING("presentationTheme"), jint>(); }
inline jint R_attr::previewImage() { return get_static_field<SCAPIX_META_STRING("previewImage"), jint>(); }
inline jint R_attr::primaryContentAlpha() { return get_static_field<SCAPIX_META_STRING("primaryContentAlpha"), jint>(); }
inline jint R_attr::priority() { return get_static_field<SCAPIX_META_STRING("priority"), jint>(); }
inline jint R_attr::privateImeOptions() { return get_static_field<SCAPIX_META_STRING("privateImeOptions"), jint>(); }
inline jint R_attr::process() { return get_static_field<SCAPIX_META_STRING("process"), jint>(); }
inline jint R_attr::progress() { return get_static_field<SCAPIX_META_STRING("progress"), jint>(); }
inline jint R_attr::progressBackgroundTint() { return get_static_field<SCAPIX_META_STRING("progressBackgroundTint"), jint>(); }
inline jint R_attr::progressBackgroundTintMode() { return get_static_field<SCAPIX_META_STRING("progressBackgroundTintMode"), jint>(); }
inline jint R_attr::progressBarPadding() { return get_static_field<SCAPIX_META_STRING("progressBarPadding"), jint>(); }
inline jint R_attr::progressBarStyle() { return get_static_field<SCAPIX_META_STRING("progressBarStyle"), jint>(); }
inline jint R_attr::progressBarStyleHorizontal() { return get_static_field<SCAPIX_META_STRING("progressBarStyleHorizontal"), jint>(); }
inline jint R_attr::progressBarStyleInverse() { return get_static_field<SCAPIX_META_STRING("progressBarStyleInverse"), jint>(); }
inline jint R_attr::progressBarStyleLarge() { return get_static_field<SCAPIX_META_STRING("progressBarStyleLarge"), jint>(); }
inline jint R_attr::progressBarStyleLargeInverse() { return get_static_field<SCAPIX_META_STRING("progressBarStyleLargeInverse"), jint>(); }
inline jint R_attr::progressBarStyleSmall() { return get_static_field<SCAPIX_META_STRING("progressBarStyleSmall"), jint>(); }
inline jint R_attr::progressBarStyleSmallInverse() { return get_static_field<SCAPIX_META_STRING("progressBarStyleSmallInverse"), jint>(); }
inline jint R_attr::progressBarStyleSmallTitle() { return get_static_field<SCAPIX_META_STRING("progressBarStyleSmallTitle"), jint>(); }
inline jint R_attr::progressDrawable() { return get_static_field<SCAPIX_META_STRING("progressDrawable"), jint>(); }
inline jint R_attr::progressTint() { return get_static_field<SCAPIX_META_STRING("progressTint"), jint>(); }
inline jint R_attr::progressTintMode() { return get_static_field<SCAPIX_META_STRING("progressTintMode"), jint>(); }
inline jint R_attr::prompt() { return get_static_field<SCAPIX_META_STRING("prompt"), jint>(); }
inline jint R_attr::propertyName() { return get_static_field<SCAPIX_META_STRING("propertyName"), jint>(); }
inline jint R_attr::propertyXName() { return get_static_field<SCAPIX_META_STRING("propertyXName"), jint>(); }
inline jint R_attr::propertyYName() { return get_static_field<SCAPIX_META_STRING("propertyYName"), jint>(); }
inline jint R_attr::protectionLevel() { return get_static_field<SCAPIX_META_STRING("protectionLevel"), jint>(); }
inline jint R_attr::publicKey() { return get_static_field<SCAPIX_META_STRING("publicKey"), jint>(); }
inline jint R_attr::queryActionMsg() { return get_static_field<SCAPIX_META_STRING("queryActionMsg"), jint>(); }
inline jint R_attr::queryAfterZeroResults() { return get_static_field<SCAPIX_META_STRING("queryAfterZeroResults"), jint>(); }
inline jint R_attr::queryBackground() { return get_static_field<SCAPIX_META_STRING("queryBackground"), jint>(); }
inline jint R_attr::queryHint() { return get_static_field<SCAPIX_META_STRING("queryHint"), jint>(); }
inline jint R_attr::quickContactBadgeStyleSmallWindowLarge() { return get_static_field<SCAPIX_META_STRING("quickContactBadgeStyleSmallWindowLarge"), jint>(); }
inline jint R_attr::quickContactBadgeStyleSmallWindowMedium() { return get_static_field<SCAPIX_META_STRING("quickContactBadgeStyleSmallWindowMedium"), jint>(); }
inline jint R_attr::quickContactBadgeStyleSmallWindowSmall() { return get_static_field<SCAPIX_META_STRING("quickContactBadgeStyleSmallWindowSmall"), jint>(); }
inline jint R_attr::quickContactBadgeStyleWindowLarge() { return get_static_field<SCAPIX_META_STRING("quickContactBadgeStyleWindowLarge"), jint>(); }
inline jint R_attr::quickContactBadgeStyleWindowMedium() { return get_static_field<SCAPIX_META_STRING("quickContactBadgeStyleWindowMedium"), jint>(); }
inline jint R_attr::quickContactBadgeStyleWindowSmall() { return get_static_field<SCAPIX_META_STRING("quickContactBadgeStyleWindowSmall"), jint>(); }
inline jint R_attr::radioButtonStyle() { return get_static_field<SCAPIX_META_STRING("radioButtonStyle"), jint>(); }
inline jint R_attr::radius() { return get_static_field<SCAPIX_META_STRING("radius"), jint>(); }
inline jint R_attr::rating() { return get_static_field<SCAPIX_META_STRING("rating"), jint>(); }
inline jint R_attr::ratingBarStyle() { return get_static_field<SCAPIX_META_STRING("ratingBarStyle"), jint>(); }
inline jint R_attr::ratingBarStyleIndicator() { return get_static_field<SCAPIX_META_STRING("ratingBarStyleIndicator"), jint>(); }
inline jint R_attr::ratingBarStyleSmall() { return get_static_field<SCAPIX_META_STRING("ratingBarStyleSmall"), jint>(); }
inline jint R_attr::readPermission() { return get_static_field<SCAPIX_META_STRING("readPermission"), jint>(); }
inline jint R_attr::recognitionService() { return get_static_field<SCAPIX_META_STRING("recognitionService"), jint>(); }
inline jint R_attr::recreateOnConfigChanges() { return get_static_field<SCAPIX_META_STRING("recreateOnConfigChanges"), jint>(); }
inline jint R_attr::recycleEnabled() { return get_static_field<SCAPIX_META_STRING("recycleEnabled"), jint>(); }
inline jint R_attr::relinquishTaskIdentity() { return get_static_field<SCAPIX_META_STRING("relinquishTaskIdentity"), jint>(); }
inline jint R_attr::reparent() { return get_static_field<SCAPIX_META_STRING("reparent"), jint>(); }
inline jint R_attr::reparentWithOverlay() { return get_static_field<SCAPIX_META_STRING("reparentWithOverlay"), jint>(); }
inline jint R_attr::repeatCount() { return get_static_field<SCAPIX_META_STRING("repeatCount"), jint>(); }
inline jint R_attr::repeatMode() { return get_static_field<SCAPIX_META_STRING("repeatMode"), jint>(); }
inline jint R_attr::reqFiveWayNav() { return get_static_field<SCAPIX_META_STRING("reqFiveWayNav"), jint>(); }
inline jint R_attr::reqHardKeyboard() { return get_static_field<SCAPIX_META_STRING("reqHardKeyboard"), jint>(); }
inline jint R_attr::reqKeyboardType() { return get_static_field<SCAPIX_META_STRING("reqKeyboardType"), jint>(); }
inline jint R_attr::reqNavigation() { return get_static_field<SCAPIX_META_STRING("reqNavigation"), jint>(); }
inline jint R_attr::reqTouchScreen() { return get_static_field<SCAPIX_META_STRING("reqTouchScreen"), jint>(); }
inline jint R_attr::requireDeviceUnlock() { return get_static_field<SCAPIX_META_STRING("requireDeviceUnlock"), jint>(); }
inline jint R_attr::required() { return get_static_field<SCAPIX_META_STRING("required"), jint>(); }
inline jint R_attr::requiredAccountType() { return get_static_field<SCAPIX_META_STRING("requiredAccountType"), jint>(); }
inline jint R_attr::requiredFeature() { return get_static_field<SCAPIX_META_STRING("requiredFeature"), jint>(); }
inline jint R_attr::requiredForAllUsers() { return get_static_field<SCAPIX_META_STRING("requiredForAllUsers"), jint>(); }
inline jint R_attr::requiredNotFeature() { return get_static_field<SCAPIX_META_STRING("requiredNotFeature"), jint>(); }
inline jint R_attr::requiresFadingEdge() { return get_static_field<SCAPIX_META_STRING("requiresFadingEdge"), jint>(); }
inline jint R_attr::requiresSmallestWidthDp() { return get_static_field<SCAPIX_META_STRING("requiresSmallestWidthDp"), jint>(); }
inline jint R_attr::resizeClip() { return get_static_field<SCAPIX_META_STRING("resizeClip"), jint>(); }
inline jint R_attr::resizeMode() { return get_static_field<SCAPIX_META_STRING("resizeMode"), jint>(); }
inline jint R_attr::resizeable() { return get_static_field<SCAPIX_META_STRING("resizeable"), jint>(); }
inline jint R_attr::resizeableActivity() { return get_static_field<SCAPIX_META_STRING("resizeableActivity"), jint>(); }
inline jint R_attr::resource() { return get_static_field<SCAPIX_META_STRING("resource"), jint>(); }
inline jint R_attr::restoreAnyVersion() { return get_static_field<SCAPIX_META_STRING("restoreAnyVersion"), jint>(); }
inline jint R_attr::restoreNeedsApplication() { return get_static_field<SCAPIX_META_STRING("restoreNeedsApplication"), jint>(); }
inline jint R_attr::restrictedAccountType() { return get_static_field<SCAPIX_META_STRING("restrictedAccountType"), jint>(); }
inline jint R_attr::restrictionType() { return get_static_field<SCAPIX_META_STRING("restrictionType"), jint>(); }
inline jint R_attr::resumeWhilePausing() { return get_static_field<SCAPIX_META_STRING("resumeWhilePausing"), jint>(); }
inline jint R_attr::reversible() { return get_static_field<SCAPIX_META_STRING("reversible"), jint>(); }
inline jint R_attr::revisionCode() { return get_static_field<SCAPIX_META_STRING("revisionCode"), jint>(); }
inline jint R_attr::right() { return get_static_field<SCAPIX_META_STRING("right"), jint>(); }
inline jint R_attr::ringtonePreferenceStyle() { return get_static_field<SCAPIX_META_STRING("ringtonePreferenceStyle"), jint>(); }
inline jint R_attr::ringtoneType() { return get_static_field<SCAPIX_META_STRING("ringtoneType"), jint>(); }
inline jint R_attr::rotation() { return get_static_field<SCAPIX_META_STRING("rotation"), jint>(); }
inline jint R_attr::rotationAnimation() { return get_static_field<SCAPIX_META_STRING("rotationAnimation"), jint>(); }
inline jint R_attr::rotationX() { return get_static_field<SCAPIX_META_STRING("rotationX"), jint>(); }
inline jint R_attr::rotationY() { return get_static_field<SCAPIX_META_STRING("rotationY"), jint>(); }
inline jint R_attr::roundIcon() { return get_static_field<SCAPIX_META_STRING("roundIcon"), jint>(); }
inline jint R_attr::rowCount() { return get_static_field<SCAPIX_META_STRING("rowCount"), jint>(); }
inline jint R_attr::rowDelay() { return get_static_field<SCAPIX_META_STRING("rowDelay"), jint>(); }
inline jint R_attr::rowEdgeFlags() { return get_static_field<SCAPIX_META_STRING("rowEdgeFlags"), jint>(); }
inline jint R_attr::rowHeight() { return get_static_field<SCAPIX_META_STRING("rowHeight"), jint>(); }
inline jint R_attr::rowOrderPreserved() { return get_static_field<SCAPIX_META_STRING("rowOrderPreserved"), jint>(); }
inline jint R_attr::saveEnabled() { return get_static_field<SCAPIX_META_STRING("saveEnabled"), jint>(); }
inline jint R_attr::scaleGravity() { return get_static_field<SCAPIX_META_STRING("scaleGravity"), jint>(); }
inline jint R_attr::scaleHeight() { return get_static_field<SCAPIX_META_STRING("scaleHeight"), jint>(); }
inline jint R_attr::scaleType() { return get_static_field<SCAPIX_META_STRING("scaleType"), jint>(); }
inline jint R_attr::scaleWidth() { return get_static_field<SCAPIX_META_STRING("scaleWidth"), jint>(); }
inline jint R_attr::scaleX() { return get_static_field<SCAPIX_META_STRING("scaleX"), jint>(); }
inline jint R_attr::scaleY() { return get_static_field<SCAPIX_META_STRING("scaleY"), jint>(); }
inline jint R_attr::scheme() { return get_static_field<SCAPIX_META_STRING("scheme"), jint>(); }
inline jint R_attr::screenDensity() { return get_static_field<SCAPIX_META_STRING("screenDensity"), jint>(); }
inline jint R_attr::screenOrientation() { return get_static_field<SCAPIX_META_STRING("screenOrientation"), jint>(); }
inline jint R_attr::screenReaderFocusable() { return get_static_field<SCAPIX_META_STRING("screenReaderFocusable"), jint>(); }
inline jint R_attr::screenSize() { return get_static_field<SCAPIX_META_STRING("screenSize"), jint>(); }
inline jint R_attr::scrollHorizontally() { return get_static_field<SCAPIX_META_STRING("scrollHorizontally"), jint>(); }
inline jint R_attr::scrollIndicators() { return get_static_field<SCAPIX_META_STRING("scrollIndicators"), jint>(); }
inline jint R_attr::scrollViewStyle() { return get_static_field<SCAPIX_META_STRING("scrollViewStyle"), jint>(); }
inline jint R_attr::scrollX() { return get_static_field<SCAPIX_META_STRING("scrollX"), jint>(); }
inline jint R_attr::scrollY() { return get_static_field<SCAPIX_META_STRING("scrollY"), jint>(); }
inline jint R_attr::scrollbarAlwaysDrawHorizontalTrack() { return get_static_field<SCAPIX_META_STRING("scrollbarAlwaysDrawHorizontalTrack"), jint>(); }
inline jint R_attr::scrollbarAlwaysDrawVerticalTrack() { return get_static_field<SCAPIX_META_STRING("scrollbarAlwaysDrawVerticalTrack"), jint>(); }
inline jint R_attr::scrollbarDefaultDelayBeforeFade() { return get_static_field<SCAPIX_META_STRING("scrollbarDefaultDelayBeforeFade"), jint>(); }
inline jint R_attr::scrollbarFadeDuration() { return get_static_field<SCAPIX_META_STRING("scrollbarFadeDuration"), jint>(); }
inline jint R_attr::scrollbarSize() { return get_static_field<SCAPIX_META_STRING("scrollbarSize"), jint>(); }
inline jint R_attr::scrollbarStyle() { return get_static_field<SCAPIX_META_STRING("scrollbarStyle"), jint>(); }
inline jint R_attr::scrollbarThumbHorizontal() { return get_static_field<SCAPIX_META_STRING("scrollbarThumbHorizontal"), jint>(); }
inline jint R_attr::scrollbarThumbVertical() { return get_static_field<SCAPIX_META_STRING("scrollbarThumbVertical"), jint>(); }
inline jint R_attr::scrollbarTrackHorizontal() { return get_static_field<SCAPIX_META_STRING("scrollbarTrackHorizontal"), jint>(); }
inline jint R_attr::scrollbarTrackVertical() { return get_static_field<SCAPIX_META_STRING("scrollbarTrackVertical"), jint>(); }
inline jint R_attr::scrollbars() { return get_static_field<SCAPIX_META_STRING("scrollbars"), jint>(); }
inline jint R_attr::scrollingCache() { return get_static_field<SCAPIX_META_STRING("scrollingCache"), jint>(); }
inline jint R_attr::searchButtonText() { return get_static_field<SCAPIX_META_STRING("searchButtonText"), jint>(); }
inline jint R_attr::searchHintIcon() { return get_static_field<SCAPIX_META_STRING("searchHintIcon"), jint>(); }
inline jint R_attr::searchIcon() { return get_static_field<SCAPIX_META_STRING("searchIcon"), jint>(); }
inline jint R_attr::searchMode() { return get_static_field<SCAPIX_META_STRING("searchMode"), jint>(); }
inline jint R_attr::searchSettingsDescription() { return get_static_field<SCAPIX_META_STRING("searchSettingsDescription"), jint>(); }
inline jint R_attr::searchSuggestAuthority() { return get_static_field<SCAPIX_META_STRING("searchSuggestAuthority"), jint>(); }
inline jint R_attr::searchSuggestIntentAction() { return get_static_field<SCAPIX_META_STRING("searchSuggestIntentAction"), jint>(); }
inline jint R_attr::searchSuggestIntentData() { return get_static_field<SCAPIX_META_STRING("searchSuggestIntentData"), jint>(); }
inline jint R_attr::searchSuggestPath() { return get_static_field<SCAPIX_META_STRING("searchSuggestPath"), jint>(); }
inline jint R_attr::searchSuggestSelection() { return get_static_field<SCAPIX_META_STRING("searchSuggestSelection"), jint>(); }
inline jint R_attr::searchSuggestThreshold() { return get_static_field<SCAPIX_META_STRING("searchSuggestThreshold"), jint>(); }
inline jint R_attr::searchViewStyle() { return get_static_field<SCAPIX_META_STRING("searchViewStyle"), jint>(); }
inline jint R_attr::secondaryContentAlpha() { return get_static_field<SCAPIX_META_STRING("secondaryContentAlpha"), jint>(); }
inline jint R_attr::secondaryProgress() { return get_static_field<SCAPIX_META_STRING("secondaryProgress"), jint>(); }
inline jint R_attr::secondaryProgressTint() { return get_static_field<SCAPIX_META_STRING("secondaryProgressTint"), jint>(); }
inline jint R_attr::secondaryProgressTintMode() { return get_static_field<SCAPIX_META_STRING("secondaryProgressTintMode"), jint>(); }
inline jint R_attr::seekBarStyle() { return get_static_field<SCAPIX_META_STRING("seekBarStyle"), jint>(); }
inline jint R_attr::segmentedButtonStyle() { return get_static_field<SCAPIX_META_STRING("segmentedButtonStyle"), jint>(); }
inline jint R_attr::selectAllOnFocus() { return get_static_field<SCAPIX_META_STRING("selectAllOnFocus"), jint>(); }
inline jint R_attr::selectable() { return get_static_field<SCAPIX_META_STRING("selectable"), jint>(); }
inline jint R_attr::selectableItemBackground() { return get_static_field<SCAPIX_META_STRING("selectableItemBackground"), jint>(); }
inline jint R_attr::selectableItemBackgroundBorderless() { return get_static_field<SCAPIX_META_STRING("selectableItemBackgroundBorderless"), jint>(); }
inline jint R_attr::selectedDateVerticalBar() { return get_static_field<SCAPIX_META_STRING("selectedDateVerticalBar"), jint>(); }
inline jint R_attr::selectedWeekBackgroundColor() { return get_static_field<SCAPIX_META_STRING("selectedWeekBackgroundColor"), jint>(); }
inline jint R_attr::sessionService() { return get_static_field<SCAPIX_META_STRING("sessionService"), jint>(); }
inline jint R_attr::settingsActivity() { return get_static_field<SCAPIX_META_STRING("settingsActivity"), jint>(); }
inline jint R_attr::setupActivity() { return get_static_field<SCAPIX_META_STRING("setupActivity"), jint>(); }
inline jint R_attr::shadowColor() { return get_static_field<SCAPIX_META_STRING("shadowColor"), jint>(); }
inline jint R_attr::shadowDx() { return get_static_field<SCAPIX_META_STRING("shadowDx"), jint>(); }
inline jint R_attr::shadowDy() { return get_static_field<SCAPIX_META_STRING("shadowDy"), jint>(); }
inline jint R_attr::shadowRadius() { return get_static_field<SCAPIX_META_STRING("shadowRadius"), jint>(); }
inline jint R_attr::shape() { return get_static_field<SCAPIX_META_STRING("shape"), jint>(); }
inline jint R_attr::shareInterpolator() { return get_static_field<SCAPIX_META_STRING("shareInterpolator"), jint>(); }
inline jint R_attr::sharedUserId() { return get_static_field<SCAPIX_META_STRING("sharedUserId"), jint>(); }
inline jint R_attr::sharedUserLabel() { return get_static_field<SCAPIX_META_STRING("sharedUserLabel"), jint>(); }
inline jint R_attr::shortcutDisabledMessage() { return get_static_field<SCAPIX_META_STRING("shortcutDisabledMessage"), jint>(); }
inline jint R_attr::shortcutId() { return get_static_field<SCAPIX_META_STRING("shortcutId"), jint>(); }
inline jint R_attr::shortcutLongLabel() { return get_static_field<SCAPIX_META_STRING("shortcutLongLabel"), jint>(); }
inline jint R_attr::shortcutShortLabel() { return get_static_field<SCAPIX_META_STRING("shortcutShortLabel"), jint>(); }
inline jint R_attr::shouldDisableView() { return get_static_field<SCAPIX_META_STRING("shouldDisableView"), jint>(); }
inline jint R_attr::showAsAction() { return get_static_field<SCAPIX_META_STRING("showAsAction"), jint>(); }
inline jint R_attr::showDefault() { return get_static_field<SCAPIX_META_STRING("showDefault"), jint>(); }
inline jint R_attr::showDividers() { return get_static_field<SCAPIX_META_STRING("showDividers"), jint>(); }
inline jint R_attr::showForAllUsers() { return get_static_field<SCAPIX_META_STRING("showForAllUsers"), jint>(); }
inline jint R_attr::showMetadataInPreview() { return get_static_field<SCAPIX_META_STRING("showMetadataInPreview"), jint>(); }
inline jint R_attr::showOnLockScreen() { return get_static_field<SCAPIX_META_STRING("showOnLockScreen"), jint>(); }
inline jint R_attr::showSilent() { return get_static_field<SCAPIX_META_STRING("showSilent"), jint>(); }
inline jint R_attr::showText() { return get_static_field<SCAPIX_META_STRING("showText"), jint>(); }
inline jint R_attr::showWeekNumber() { return get_static_field<SCAPIX_META_STRING("showWeekNumber"), jint>(); }
inline jint R_attr::showWhenLocked() { return get_static_field<SCAPIX_META_STRING("showWhenLocked"), jint>(); }
inline jint R_attr::shownWeekCount() { return get_static_field<SCAPIX_META_STRING("shownWeekCount"), jint>(); }
inline jint R_attr::shrinkColumns() { return get_static_field<SCAPIX_META_STRING("shrinkColumns"), jint>(); }
inline jint R_attr::singleLine() { return get_static_field<SCAPIX_META_STRING("singleLine"), jint>(); }
inline jint R_attr::singleLineTitle() { return get_static_field<SCAPIX_META_STRING("singleLineTitle"), jint>(); }
inline jint R_attr::singleUser() { return get_static_field<SCAPIX_META_STRING("singleUser"), jint>(); }
inline jint R_attr::slideEdge() { return get_static_field<SCAPIX_META_STRING("slideEdge"), jint>(); }
inline jint R_attr::smallIcon() { return get_static_field<SCAPIX_META_STRING("smallIcon"), jint>(); }
inline jint R_attr::smallScreens() { return get_static_field<SCAPIX_META_STRING("smallScreens"), jint>(); }
inline jint R_attr::smoothScrollbar() { return get_static_field<SCAPIX_META_STRING("smoothScrollbar"), jint>(); }
inline jint R_attr::soundEffectsEnabled() { return get_static_field<SCAPIX_META_STRING("soundEffectsEnabled"), jint>(); }
inline jint R_attr::spacing() { return get_static_field<SCAPIX_META_STRING("spacing"), jint>(); }
inline jint R_attr::spinnerDropDownItemStyle() { return get_static_field<SCAPIX_META_STRING("spinnerDropDownItemStyle"), jint>(); }
inline jint R_attr::spinnerItemStyle() { return get_static_field<SCAPIX_META_STRING("spinnerItemStyle"), jint>(); }
inline jint R_attr::spinnerMode() { return get_static_field<SCAPIX_META_STRING("spinnerMode"), jint>(); }
inline jint R_attr::spinnerStyle() { return get_static_field<SCAPIX_META_STRING("spinnerStyle"), jint>(); }
inline jint R_attr::spinnersShown() { return get_static_field<SCAPIX_META_STRING("spinnersShown"), jint>(); }
inline jint R_attr::splitMotionEvents() { return get_static_field<SCAPIX_META_STRING("splitMotionEvents"), jint>(); }
inline jint R_attr::splitName() { return get_static_field<SCAPIX_META_STRING("splitName"), jint>(); }
inline jint R_attr::splitTrack() { return get_static_field<SCAPIX_META_STRING("splitTrack"), jint>(); }
inline jint R_attr::spotShadowAlpha() { return get_static_field<SCAPIX_META_STRING("spotShadowAlpha"), jint>(); }
inline jint R_attr::src() { return get_static_field<SCAPIX_META_STRING("src"), jint>(); }
inline jint R_attr::ssp() { return get_static_field<SCAPIX_META_STRING("ssp"), jint>(); }
inline jint R_attr::sspPattern() { return get_static_field<SCAPIX_META_STRING("sspPattern"), jint>(); }
inline jint R_attr::sspPrefix() { return get_static_field<SCAPIX_META_STRING("sspPrefix"), jint>(); }
inline jint R_attr::stackFromBottom() { return get_static_field<SCAPIX_META_STRING("stackFromBottom"), jint>(); }
inline jint R_attr::stackViewStyle() { return get_static_field<SCAPIX_META_STRING("stackViewStyle"), jint>(); }
inline jint R_attr::starStyle() { return get_static_field<SCAPIX_META_STRING("starStyle"), jint>(); }
inline jint R_attr::start() { return get_static_field<SCAPIX_META_STRING("start"), jint>(); }
inline jint R_attr::startColor() { return get_static_field<SCAPIX_META_STRING("startColor"), jint>(); }
inline jint R_attr::startDelay() { return get_static_field<SCAPIX_META_STRING("startDelay"), jint>(); }
inline jint R_attr::startOffset() { return get_static_field<SCAPIX_META_STRING("startOffset"), jint>(); }
inline jint R_attr::startX() { return get_static_field<SCAPIX_META_STRING("startX"), jint>(); }
inline jint R_attr::startY() { return get_static_field<SCAPIX_META_STRING("startY"), jint>(); }
inline jint R_attr::startYear() { return get_static_field<SCAPIX_META_STRING("startYear"), jint>(); }
inline jint R_attr::stateListAnimator() { return get_static_field<SCAPIX_META_STRING("stateListAnimator"), jint>(); }
inline jint R_attr::stateNotNeeded() { return get_static_field<SCAPIX_META_STRING("stateNotNeeded"), jint>(); }
inline jint R_attr::state_above_anchor() { return get_static_field<SCAPIX_META_STRING("state_above_anchor"), jint>(); }
inline jint R_attr::state_accelerated() { return get_static_field<SCAPIX_META_STRING("state_accelerated"), jint>(); }
inline jint R_attr::state_activated() { return get_static_field<SCAPIX_META_STRING("state_activated"), jint>(); }
inline jint R_attr::state_active() { return get_static_field<SCAPIX_META_STRING("state_active"), jint>(); }
inline jint R_attr::state_checkable() { return get_static_field<SCAPIX_META_STRING("state_checkable"), jint>(); }
inline jint R_attr::state_checked() { return get_static_field<SCAPIX_META_STRING("state_checked"), jint>(); }
inline jint R_attr::state_drag_can_accept() { return get_static_field<SCAPIX_META_STRING("state_drag_can_accept"), jint>(); }
inline jint R_attr::state_drag_hovered() { return get_static_field<SCAPIX_META_STRING("state_drag_hovered"), jint>(); }
inline jint R_attr::state_empty() { return get_static_field<SCAPIX_META_STRING("state_empty"), jint>(); }
inline jint R_attr::state_enabled() { return get_static_field<SCAPIX_META_STRING("state_enabled"), jint>(); }
inline jint R_attr::state_expanded() { return get_static_field<SCAPIX_META_STRING("state_expanded"), jint>(); }
inline jint R_attr::state_first() { return get_static_field<SCAPIX_META_STRING("state_first"), jint>(); }
inline jint R_attr::state_focused() { return get_static_field<SCAPIX_META_STRING("state_focused"), jint>(); }
inline jint R_attr::state_hovered() { return get_static_field<SCAPIX_META_STRING("state_hovered"), jint>(); }
inline jint R_attr::state_last() { return get_static_field<SCAPIX_META_STRING("state_last"), jint>(); }
inline jint R_attr::state_long_pressable() { return get_static_field<SCAPIX_META_STRING("state_long_pressable"), jint>(); }
inline jint R_attr::state_middle() { return get_static_field<SCAPIX_META_STRING("state_middle"), jint>(); }
inline jint R_attr::state_multiline() { return get_static_field<SCAPIX_META_STRING("state_multiline"), jint>(); }
inline jint R_attr::state_pressed() { return get_static_field<SCAPIX_META_STRING("state_pressed"), jint>(); }
inline jint R_attr::state_selected() { return get_static_field<SCAPIX_META_STRING("state_selected"), jint>(); }
inline jint R_attr::state_single() { return get_static_field<SCAPIX_META_STRING("state_single"), jint>(); }
inline jint R_attr::state_window_focused() { return get_static_field<SCAPIX_META_STRING("state_window_focused"), jint>(); }
inline jint R_attr::staticWallpaperPreview() { return get_static_field<SCAPIX_META_STRING("staticWallpaperPreview"), jint>(); }
inline jint R_attr::statusBarColor() { return get_static_field<SCAPIX_META_STRING("statusBarColor"), jint>(); }
inline jint R_attr::stepSize() { return get_static_field<SCAPIX_META_STRING("stepSize"), jint>(); }
inline jint R_attr::stopWithTask() { return get_static_field<SCAPIX_META_STRING("stopWithTask"), jint>(); }
inline jint R_attr::streamType() { return get_static_field<SCAPIX_META_STRING("streamType"), jint>(); }
inline jint R_attr::stretchColumns() { return get_static_field<SCAPIX_META_STRING("stretchColumns"), jint>(); }
inline jint R_attr::stretchMode() { return get_static_field<SCAPIX_META_STRING("stretchMode"), jint>(); }
inline jint R_attr::strokeAlpha() { return get_static_field<SCAPIX_META_STRING("strokeAlpha"), jint>(); }
inline jint R_attr::strokeColor() { return get_static_field<SCAPIX_META_STRING("strokeColor"), jint>(); }
inline jint R_attr::strokeLineCap() { return get_static_field<SCAPIX_META_STRING("strokeLineCap"), jint>(); }
inline jint R_attr::strokeLineJoin() { return get_static_field<SCAPIX_META_STRING("strokeLineJoin"), jint>(); }
inline jint R_attr::strokeMiterLimit() { return get_static_field<SCAPIX_META_STRING("strokeMiterLimit"), jint>(); }
inline jint R_attr::strokeWidth() { return get_static_field<SCAPIX_META_STRING("strokeWidth"), jint>(); }
inline jint R_attr::subMenuArrow() { return get_static_field<SCAPIX_META_STRING("subMenuArrow"), jint>(); }
inline jint R_attr::submitBackground() { return get_static_field<SCAPIX_META_STRING("submitBackground"), jint>(); }
inline jint R_attr::subtitle() { return get_static_field<SCAPIX_META_STRING("subtitle"), jint>(); }
inline jint R_attr::subtitleTextAppearance() { return get_static_field<SCAPIX_META_STRING("subtitleTextAppearance"), jint>(); }
inline jint R_attr::subtitleTextColor() { return get_static_field<SCAPIX_META_STRING("subtitleTextColor"), jint>(); }
inline jint R_attr::subtitleTextStyle() { return get_static_field<SCAPIX_META_STRING("subtitleTextStyle"), jint>(); }
inline jint R_attr::subtypeExtraValue() { return get_static_field<SCAPIX_META_STRING("subtypeExtraValue"), jint>(); }
inline jint R_attr::subtypeId() { return get_static_field<SCAPIX_META_STRING("subtypeId"), jint>(); }
inline jint R_attr::subtypeLocale() { return get_static_field<SCAPIX_META_STRING("subtypeLocale"), jint>(); }
inline jint R_attr::suggestActionMsg() { return get_static_field<SCAPIX_META_STRING("suggestActionMsg"), jint>(); }
inline jint R_attr::suggestActionMsgColumn() { return get_static_field<SCAPIX_META_STRING("suggestActionMsgColumn"), jint>(); }
inline jint R_attr::suggestionRowLayout() { return get_static_field<SCAPIX_META_STRING("suggestionRowLayout"), jint>(); }
inline jint R_attr::summary() { return get_static_field<SCAPIX_META_STRING("summary"), jint>(); }
inline jint R_attr::summaryColumn() { return get_static_field<SCAPIX_META_STRING("summaryColumn"), jint>(); }
inline jint R_attr::summaryOff() { return get_static_field<SCAPIX_META_STRING("summaryOff"), jint>(); }
inline jint R_attr::summaryOn() { return get_static_field<SCAPIX_META_STRING("summaryOn"), jint>(); }
inline jint R_attr::supportsAssist() { return get_static_field<SCAPIX_META_STRING("supportsAssist"), jint>(); }
inline jint R_attr::supportsLaunchVoiceAssistFromKeyguard() { return get_static_field<SCAPIX_META_STRING("supportsLaunchVoiceAssistFromKeyguard"), jint>(); }
inline jint R_attr::supportsLocalInteraction() { return get_static_field<SCAPIX_META_STRING("supportsLocalInteraction"), jint>(); }
inline jint R_attr::supportsPictureInPicture() { return get_static_field<SCAPIX_META_STRING("supportsPictureInPicture"), jint>(); }
inline jint R_attr::supportsRtl() { return get_static_field<SCAPIX_META_STRING("supportsRtl"), jint>(); }
inline jint R_attr::supportsSwitchingToNextInputMethod() { return get_static_field<SCAPIX_META_STRING("supportsSwitchingToNextInputMethod"), jint>(); }
inline jint R_attr::supportsUploading() { return get_static_field<SCAPIX_META_STRING("supportsUploading"), jint>(); }
inline jint R_attr::switchMinWidth() { return get_static_field<SCAPIX_META_STRING("switchMinWidth"), jint>(); }
inline jint R_attr::switchPadding() { return get_static_field<SCAPIX_META_STRING("switchPadding"), jint>(); }
inline jint R_attr::switchPreferenceStyle() { return get_static_field<SCAPIX_META_STRING("switchPreferenceStyle"), jint>(); }
inline jint R_attr::switchStyle() { return get_static_field<SCAPIX_META_STRING("switchStyle"), jint>(); }
inline jint R_attr::switchTextAppearance() { return get_static_field<SCAPIX_META_STRING("switchTextAppearance"), jint>(); }
inline jint R_attr::switchTextOff() { return get_static_field<SCAPIX_META_STRING("switchTextOff"), jint>(); }
inline jint R_attr::switchTextOn() { return get_static_field<SCAPIX_META_STRING("switchTextOn"), jint>(); }
inline jint R_attr::syncable() { return get_static_field<SCAPIX_META_STRING("syncable"), jint>(); }
inline jint R_attr::tabStripEnabled() { return get_static_field<SCAPIX_META_STRING("tabStripEnabled"), jint>(); }
inline jint R_attr::tabStripLeft() { return get_static_field<SCAPIX_META_STRING("tabStripLeft"), jint>(); }
inline jint R_attr::tabStripRight() { return get_static_field<SCAPIX_META_STRING("tabStripRight"), jint>(); }
inline jint R_attr::tabWidgetStyle() { return get_static_field<SCAPIX_META_STRING("tabWidgetStyle"), jint>(); }
inline jint R_attr::tag() { return get_static_field<SCAPIX_META_STRING("tag"), jint>(); }
inline jint R_attr::targetActivity() { return get_static_field<SCAPIX_META_STRING("targetActivity"), jint>(); }
inline jint R_attr::targetClass() { return get_static_field<SCAPIX_META_STRING("targetClass"), jint>(); }
inline jint R_attr::targetDescriptions() { return get_static_field<SCAPIX_META_STRING("targetDescriptions"), jint>(); }
inline jint R_attr::targetId() { return get_static_field<SCAPIX_META_STRING("targetId"), jint>(); }
inline jint R_attr::targetName() { return get_static_field<SCAPIX_META_STRING("targetName"), jint>(); }
inline jint R_attr::targetPackage() { return get_static_field<SCAPIX_META_STRING("targetPackage"), jint>(); }
inline jint R_attr::targetProcesses() { return get_static_field<SCAPIX_META_STRING("targetProcesses"), jint>(); }
inline jint R_attr::targetSandboxVersion() { return get_static_field<SCAPIX_META_STRING("targetSandboxVersion"), jint>(); }
inline jint R_attr::targetSdkVersion() { return get_static_field<SCAPIX_META_STRING("targetSdkVersion"), jint>(); }
inline jint R_attr::taskAffinity() { return get_static_field<SCAPIX_META_STRING("taskAffinity"), jint>(); }
inline jint R_attr::taskCloseEnterAnimation() { return get_static_field<SCAPIX_META_STRING("taskCloseEnterAnimation"), jint>(); }
inline jint R_attr::taskCloseExitAnimation() { return get_static_field<SCAPIX_META_STRING("taskCloseExitAnimation"), jint>(); }
inline jint R_attr::taskOpenEnterAnimation() { return get_static_field<SCAPIX_META_STRING("taskOpenEnterAnimation"), jint>(); }
inline jint R_attr::taskOpenExitAnimation() { return get_static_field<SCAPIX_META_STRING("taskOpenExitAnimation"), jint>(); }
inline jint R_attr::taskToBackEnterAnimation() { return get_static_field<SCAPIX_META_STRING("taskToBackEnterAnimation"), jint>(); }
inline jint R_attr::taskToBackExitAnimation() { return get_static_field<SCAPIX_META_STRING("taskToBackExitAnimation"), jint>(); }
inline jint R_attr::taskToFrontEnterAnimation() { return get_static_field<SCAPIX_META_STRING("taskToFrontEnterAnimation"), jint>(); }
inline jint R_attr::taskToFrontExitAnimation() { return get_static_field<SCAPIX_META_STRING("taskToFrontExitAnimation"), jint>(); }
inline jint R_attr::tension() { return get_static_field<SCAPIX_META_STRING("tension"), jint>(); }
inline jint R_attr::testOnly() { return get_static_field<SCAPIX_META_STRING("testOnly"), jint>(); }
inline jint R_attr::text() { return get_static_field<SCAPIX_META_STRING("text"), jint>(); }
inline jint R_attr::textAlignment() { return get_static_field<SCAPIX_META_STRING("textAlignment"), jint>(); }
inline jint R_attr::textAllCaps() { return get_static_field<SCAPIX_META_STRING("textAllCaps"), jint>(); }
inline jint R_attr::textAppearance() { return get_static_field<SCAPIX_META_STRING("textAppearance"), jint>(); }
inline jint R_attr::textAppearanceButton() { return get_static_field<SCAPIX_META_STRING("textAppearanceButton"), jint>(); }
inline jint R_attr::textAppearanceInverse() { return get_static_field<SCAPIX_META_STRING("textAppearanceInverse"), jint>(); }
inline jint R_attr::textAppearanceLarge() { return get_static_field<SCAPIX_META_STRING("textAppearanceLarge"), jint>(); }
inline jint R_attr::textAppearanceLargeInverse() { return get_static_field<SCAPIX_META_STRING("textAppearanceLargeInverse"), jint>(); }
inline jint R_attr::textAppearanceLargePopupMenu() { return get_static_field<SCAPIX_META_STRING("textAppearanceLargePopupMenu"), jint>(); }
inline jint R_attr::textAppearanceListItem() { return get_static_field<SCAPIX_META_STRING("textAppearanceListItem"), jint>(); }
inline jint R_attr::textAppearanceListItemSecondary() { return get_static_field<SCAPIX_META_STRING("textAppearanceListItemSecondary"), jint>(); }
inline jint R_attr::textAppearanceListItemSmall() { return get_static_field<SCAPIX_META_STRING("textAppearanceListItemSmall"), jint>(); }
inline jint R_attr::textAppearanceMedium() { return get_static_field<SCAPIX_META_STRING("textAppearanceMedium"), jint>(); }
inline jint R_attr::textAppearanceMediumInverse() { return get_static_field<SCAPIX_META_STRING("textAppearanceMediumInverse"), jint>(); }
inline jint R_attr::textAppearancePopupMenuHeader() { return get_static_field<SCAPIX_META_STRING("textAppearancePopupMenuHeader"), jint>(); }
inline jint R_attr::textAppearanceSearchResultSubtitle() { return get_static_field<SCAPIX_META_STRING("textAppearanceSearchResultSubtitle"), jint>(); }
inline jint R_attr::textAppearanceSearchResultTitle() { return get_static_field<SCAPIX_META_STRING("textAppearanceSearchResultTitle"), jint>(); }
inline jint R_attr::textAppearanceSmall() { return get_static_field<SCAPIX_META_STRING("textAppearanceSmall"), jint>(); }
inline jint R_attr::textAppearanceSmallInverse() { return get_static_field<SCAPIX_META_STRING("textAppearanceSmallInverse"), jint>(); }
inline jint R_attr::textAppearanceSmallPopupMenu() { return get_static_field<SCAPIX_META_STRING("textAppearanceSmallPopupMenu"), jint>(); }
inline jint R_attr::textCheckMark() { return get_static_field<SCAPIX_META_STRING("textCheckMark"), jint>(); }
inline jint R_attr::textCheckMarkInverse() { return get_static_field<SCAPIX_META_STRING("textCheckMarkInverse"), jint>(); }
inline jint R_attr::textColor() { return get_static_field<SCAPIX_META_STRING("textColor"), jint>(); }
inline jint R_attr::textColorAlertDialogListItem() { return get_static_field<SCAPIX_META_STRING("textColorAlertDialogListItem"), jint>(); }
inline jint R_attr::textColorHighlight() { return get_static_field<SCAPIX_META_STRING("textColorHighlight"), jint>(); }
inline jint R_attr::textColorHighlightInverse() { return get_static_field<SCAPIX_META_STRING("textColorHighlightInverse"), jint>(); }
inline jint R_attr::textColorHint() { return get_static_field<SCAPIX_META_STRING("textColorHint"), jint>(); }
inline jint R_attr::textColorHintInverse() { return get_static_field<SCAPIX_META_STRING("textColorHintInverse"), jint>(); }
inline jint R_attr::textColorLink() { return get_static_field<SCAPIX_META_STRING("textColorLink"), jint>(); }
inline jint R_attr::textColorLinkInverse() { return get_static_field<SCAPIX_META_STRING("textColorLinkInverse"), jint>(); }
inline jint R_attr::textColorPrimary() { return get_static_field<SCAPIX_META_STRING("textColorPrimary"), jint>(); }
inline jint R_attr::textColorPrimaryDisableOnly() { return get_static_field<SCAPIX_META_STRING("textColorPrimaryDisableOnly"), jint>(); }
inline jint R_attr::textColorPrimaryInverse() { return get_static_field<SCAPIX_META_STRING("textColorPrimaryInverse"), jint>(); }
inline jint R_attr::textColorPrimaryInverseDisableOnly() { return get_static_field<SCAPIX_META_STRING("textColorPrimaryInverseDisableOnly"), jint>(); }
inline jint R_attr::textColorPrimaryInverseNoDisable() { return get_static_field<SCAPIX_META_STRING("textColorPrimaryInverseNoDisable"), jint>(); }
inline jint R_attr::textColorPrimaryNoDisable() { return get_static_field<SCAPIX_META_STRING("textColorPrimaryNoDisable"), jint>(); }
inline jint R_attr::textColorSecondary() { return get_static_field<SCAPIX_META_STRING("textColorSecondary"), jint>(); }
inline jint R_attr::textColorSecondaryInverse() { return get_static_field<SCAPIX_META_STRING("textColorSecondaryInverse"), jint>(); }
inline jint R_attr::textColorSecondaryInverseNoDisable() { return get_static_field<SCAPIX_META_STRING("textColorSecondaryInverseNoDisable"), jint>(); }
inline jint R_attr::textColorSecondaryNoDisable() { return get_static_field<SCAPIX_META_STRING("textColorSecondaryNoDisable"), jint>(); }
inline jint R_attr::textColorTertiary() { return get_static_field<SCAPIX_META_STRING("textColorTertiary"), jint>(); }
inline jint R_attr::textColorTertiaryInverse() { return get_static_field<SCAPIX_META_STRING("textColorTertiaryInverse"), jint>(); }
inline jint R_attr::textCursorDrawable() { return get_static_field<SCAPIX_META_STRING("textCursorDrawable"), jint>(); }
inline jint R_attr::textDirection() { return get_static_field<SCAPIX_META_STRING("textDirection"), jint>(); }
inline jint R_attr::textEditNoPasteWindowLayout() { return get_static_field<SCAPIX_META_STRING("textEditNoPasteWindowLayout"), jint>(); }
inline jint R_attr::textEditPasteWindowLayout() { return get_static_field<SCAPIX_META_STRING("textEditPasteWindowLayout"), jint>(); }
inline jint R_attr::textEditSideNoPasteWindowLayout() { return get_static_field<SCAPIX_META_STRING("textEditSideNoPasteWindowLayout"), jint>(); }
inline jint R_attr::textEditSidePasteWindowLayout() { return get_static_field<SCAPIX_META_STRING("textEditSidePasteWindowLayout"), jint>(); }
inline jint R_attr::textEditSuggestionItemLayout() { return get_static_field<SCAPIX_META_STRING("textEditSuggestionItemLayout"), jint>(); }
inline jint R_attr::textFilterEnabled() { return get_static_field<SCAPIX_META_STRING("textFilterEnabled"), jint>(); }
inline jint R_attr::textFontWeight() { return get_static_field<SCAPIX_META_STRING("textFontWeight"), jint>(); }
inline jint R_attr::textIsSelectable() { return get_static_field<SCAPIX_META_STRING("textIsSelectable"), jint>(); }
inline jint R_attr::textOff() { return get_static_field<SCAPIX_META_STRING("textOff"), jint>(); }
inline jint R_attr::textOn() { return get_static_field<SCAPIX_META_STRING("textOn"), jint>(); }
inline jint R_attr::textScaleX() { return get_static_field<SCAPIX_META_STRING("textScaleX"), jint>(); }
inline jint R_attr::textSelectHandle() { return get_static_field<SCAPIX_META_STRING("textSelectHandle"), jint>(); }
inline jint R_attr::textSelectHandleLeft() { return get_static_field<SCAPIX_META_STRING("textSelectHandleLeft"), jint>(); }
inline jint R_attr::textSelectHandleRight() { return get_static_field<SCAPIX_META_STRING("textSelectHandleRight"), jint>(); }
inline jint R_attr::textSelectHandleWindowStyle() { return get_static_field<SCAPIX_META_STRING("textSelectHandleWindowStyle"), jint>(); }
inline jint R_attr::textSize() { return get_static_field<SCAPIX_META_STRING("textSize"), jint>(); }
inline jint R_attr::textStyle() { return get_static_field<SCAPIX_META_STRING("textStyle"), jint>(); }
inline jint R_attr::textSuggestionsWindowStyle() { return get_static_field<SCAPIX_META_STRING("textSuggestionsWindowStyle"), jint>(); }
inline jint R_attr::textViewStyle() { return get_static_field<SCAPIX_META_STRING("textViewStyle"), jint>(); }
inline jint R_attr::theme() { return get_static_field<SCAPIX_META_STRING("theme"), jint>(); }
inline jint R_attr::thickness() { return get_static_field<SCAPIX_META_STRING("thickness"), jint>(); }
inline jint R_attr::thicknessRatio() { return get_static_field<SCAPIX_META_STRING("thicknessRatio"), jint>(); }
inline jint R_attr::thumb() { return get_static_field<SCAPIX_META_STRING("thumb"), jint>(); }
inline jint R_attr::thumbOffset() { return get_static_field<SCAPIX_META_STRING("thumbOffset"), jint>(); }
inline jint R_attr::thumbPosition() { return get_static_field<SCAPIX_META_STRING("thumbPosition"), jint>(); }
inline jint R_attr::thumbTextPadding() { return get_static_field<SCAPIX_META_STRING("thumbTextPadding"), jint>(); }
inline jint R_attr::thumbTint() { return get_static_field<SCAPIX_META_STRING("thumbTint"), jint>(); }
inline jint R_attr::thumbTintMode() { return get_static_field<SCAPIX_META_STRING("thumbTintMode"), jint>(); }
inline jint R_attr::thumbnail() { return get_static_field<SCAPIX_META_STRING("thumbnail"), jint>(); }
inline jint R_attr::tickMark() { return get_static_field<SCAPIX_META_STRING("tickMark"), jint>(); }
inline jint R_attr::tickMarkTint() { return get_static_field<SCAPIX_META_STRING("tickMarkTint"), jint>(); }
inline jint R_attr::tickMarkTintMode() { return get_static_field<SCAPIX_META_STRING("tickMarkTintMode"), jint>(); }
inline jint R_attr::tileMode() { return get_static_field<SCAPIX_META_STRING("tileMode"), jint>(); }
inline jint R_attr::tileModeX() { return get_static_field<SCAPIX_META_STRING("tileModeX"), jint>(); }
inline jint R_attr::tileModeY() { return get_static_field<SCAPIX_META_STRING("tileModeY"), jint>(); }
inline jint R_attr::timePickerDialogTheme() { return get_static_field<SCAPIX_META_STRING("timePickerDialogTheme"), jint>(); }
inline jint R_attr::timePickerMode() { return get_static_field<SCAPIX_META_STRING("timePickerMode"), jint>(); }
inline jint R_attr::timePickerStyle() { return get_static_field<SCAPIX_META_STRING("timePickerStyle"), jint>(); }
inline jint R_attr::timeZone() { return get_static_field<SCAPIX_META_STRING("timeZone"), jint>(); }
inline jint R_attr::tint() { return get_static_field<SCAPIX_META_STRING("tint"), jint>(); }
inline jint R_attr::tintMode() { return get_static_field<SCAPIX_META_STRING("tintMode"), jint>(); }
inline jint R_attr::title() { return get_static_field<SCAPIX_META_STRING("title"), jint>(); }
inline jint R_attr::titleCondensed() { return get_static_field<SCAPIX_META_STRING("titleCondensed"), jint>(); }
inline jint R_attr::titleMargin() { return get_static_field<SCAPIX_META_STRING("titleMargin"), jint>(); }
inline jint R_attr::titleMarginBottom() { return get_static_field<SCAPIX_META_STRING("titleMarginBottom"), jint>(); }
inline jint R_attr::titleMarginEnd() { return get_static_field<SCAPIX_META_STRING("titleMarginEnd"), jint>(); }
inline jint R_attr::titleMarginStart() { return get_static_field<SCAPIX_META_STRING("titleMarginStart"), jint>(); }
inline jint R_attr::titleMarginTop() { return get_static_field<SCAPIX_META_STRING("titleMarginTop"), jint>(); }
inline jint R_attr::titleTextAppearance() { return get_static_field<SCAPIX_META_STRING("titleTextAppearance"), jint>(); }
inline jint R_attr::titleTextColor() { return get_static_field<SCAPIX_META_STRING("titleTextColor"), jint>(); }
inline jint R_attr::titleTextStyle() { return get_static_field<SCAPIX_META_STRING("titleTextStyle"), jint>(); }
inline jint R_attr::toAlpha() { return get_static_field<SCAPIX_META_STRING("toAlpha"), jint>(); }
inline jint R_attr::toDegrees() { return get_static_field<SCAPIX_META_STRING("toDegrees"), jint>(); }
inline jint R_attr::toId() { return get_static_field<SCAPIX_META_STRING("toId"), jint>(); }
inline jint R_attr::toScene() { return get_static_field<SCAPIX_META_STRING("toScene"), jint>(); }
inline jint R_attr::toXDelta() { return get_static_field<SCAPIX_META_STRING("toXDelta"), jint>(); }
inline jint R_attr::toXScale() { return get_static_field<SCAPIX_META_STRING("toXScale"), jint>(); }
inline jint R_attr::toYDelta() { return get_static_field<SCAPIX_META_STRING("toYDelta"), jint>(); }
inline jint R_attr::toYScale() { return get_static_field<SCAPIX_META_STRING("toYScale"), jint>(); }
inline jint R_attr::toolbarStyle() { return get_static_field<SCAPIX_META_STRING("toolbarStyle"), jint>(); }
inline jint R_attr::tooltipText() { return get_static_field<SCAPIX_META_STRING("tooltipText"), jint>(); }
inline jint R_attr::top() { return get_static_field<SCAPIX_META_STRING("top"), jint>(); }
inline jint R_attr::topBright() { return get_static_field<SCAPIX_META_STRING("topBright"), jint>(); }
inline jint R_attr::topDark() { return get_static_field<SCAPIX_META_STRING("topDark"), jint>(); }
inline jint R_attr::topLeftRadius() { return get_static_field<SCAPIX_META_STRING("topLeftRadius"), jint>(); }
inline jint R_attr::topOffset() { return get_static_field<SCAPIX_META_STRING("topOffset"), jint>(); }
inline jint R_attr::topRightRadius() { return get_static_field<SCAPIX_META_STRING("topRightRadius"), jint>(); }
inline jint R_attr::touchscreenBlocksFocus() { return get_static_field<SCAPIX_META_STRING("touchscreenBlocksFocus"), jint>(); }
inline jint R_attr::track() { return get_static_field<SCAPIX_META_STRING("track"), jint>(); }
inline jint R_attr::trackTint() { return get_static_field<SCAPIX_META_STRING("trackTint"), jint>(); }
inline jint R_attr::trackTintMode() { return get_static_field<SCAPIX_META_STRING("trackTintMode"), jint>(); }
inline jint R_attr::transcriptMode() { return get_static_field<SCAPIX_META_STRING("transcriptMode"), jint>(); }
inline jint R_attr::transformPivotX() { return get_static_field<SCAPIX_META_STRING("transformPivotX"), jint>(); }
inline jint R_attr::transformPivotY() { return get_static_field<SCAPIX_META_STRING("transformPivotY"), jint>(); }
inline jint R_attr::transition() { return get_static_field<SCAPIX_META_STRING("transition"), jint>(); }
inline jint R_attr::transitionGroup() { return get_static_field<SCAPIX_META_STRING("transitionGroup"), jint>(); }
inline jint R_attr::transitionName() { return get_static_field<SCAPIX_META_STRING("transitionName"), jint>(); }
inline jint R_attr::transitionOrdering() { return get_static_field<SCAPIX_META_STRING("transitionOrdering"), jint>(); }
inline jint R_attr::transitionVisibilityMode() { return get_static_field<SCAPIX_META_STRING("transitionVisibilityMode"), jint>(); }
inline jint R_attr::translateX() { return get_static_field<SCAPIX_META_STRING("translateX"), jint>(); }
inline jint R_attr::translateY() { return get_static_field<SCAPIX_META_STRING("translateY"), jint>(); }
inline jint R_attr::translationX() { return get_static_field<SCAPIX_META_STRING("translationX"), jint>(); }
inline jint R_attr::translationY() { return get_static_field<SCAPIX_META_STRING("translationY"), jint>(); }
inline jint R_attr::translationZ() { return get_static_field<SCAPIX_META_STRING("translationZ"), jint>(); }
inline jint R_attr::trimPathEnd() { return get_static_field<SCAPIX_META_STRING("trimPathEnd"), jint>(); }
inline jint R_attr::trimPathOffset() { return get_static_field<SCAPIX_META_STRING("trimPathOffset"), jint>(); }
inline jint R_attr::trimPathStart() { return get_static_field<SCAPIX_META_STRING("trimPathStart"), jint>(); }
inline jint R_attr::ttcIndex() { return get_static_field<SCAPIX_META_STRING("ttcIndex"), jint>(); }
inline jint R_attr::tunerCount() { return get_static_field<SCAPIX_META_STRING("tunerCount"), jint>(); }
inline jint R_attr::turnScreenOn() { return get_static_field<SCAPIX_META_STRING("turnScreenOn"), jint>(); }
inline jint R_attr::type() { return get_static_field<SCAPIX_META_STRING("type"), jint>(); }
inline jint R_attr::typeface() { return get_static_field<SCAPIX_META_STRING("typeface"), jint>(); }
inline jint R_attr::uiOptions() { return get_static_field<SCAPIX_META_STRING("uiOptions"), jint>(); }
inline jint R_attr::uncertainGestureColor() { return get_static_field<SCAPIX_META_STRING("uncertainGestureColor"), jint>(); }
inline jint R_attr::unfocusedMonthDateColor() { return get_static_field<SCAPIX_META_STRING("unfocusedMonthDateColor"), jint>(); }
inline jint R_attr::unselectedAlpha() { return get_static_field<SCAPIX_META_STRING("unselectedAlpha"), jint>(); }
inline jint R_attr::updatePeriodMillis() { return get_static_field<SCAPIX_META_STRING("updatePeriodMillis"), jint>(); }
inline jint R_attr::use32bitAbi() { return get_static_field<SCAPIX_META_STRING("use32bitAbi"), jint>(); }
inline jint R_attr::useDefaultMargins() { return get_static_field<SCAPIX_META_STRING("useDefaultMargins"), jint>(); }
inline jint R_attr::useIntrinsicSizeAsMinimum() { return get_static_field<SCAPIX_META_STRING("useIntrinsicSizeAsMinimum"), jint>(); }
inline jint R_attr::useLevel() { return get_static_field<SCAPIX_META_STRING("useLevel"), jint>(); }
inline jint R_attr::userVisible() { return get_static_field<SCAPIX_META_STRING("userVisible"), jint>(); }
inline jint R_attr::usesCleartextTraffic() { return get_static_field<SCAPIX_META_STRING("usesCleartextTraffic"), jint>(); }
inline jint R_attr::value() { return get_static_field<SCAPIX_META_STRING("value"), jint>(); }
inline jint R_attr::valueFrom() { return get_static_field<SCAPIX_META_STRING("valueFrom"), jint>(); }
inline jint R_attr::valueTo() { return get_static_field<SCAPIX_META_STRING("valueTo"), jint>(); }
inline jint R_attr::valueType() { return get_static_field<SCAPIX_META_STRING("valueType"), jint>(); }
inline jint R_attr::variablePadding() { return get_static_field<SCAPIX_META_STRING("variablePadding"), jint>(); }
inline jint R_attr::vendor() { return get_static_field<SCAPIX_META_STRING("vendor"), jint>(); }
inline jint R_attr::version() { return get_static_field<SCAPIX_META_STRING("version"), jint>(); }
inline jint R_attr::versionCode() { return get_static_field<SCAPIX_META_STRING("versionCode"), jint>(); }
inline jint R_attr::versionCodeMajor() { return get_static_field<SCAPIX_META_STRING("versionCodeMajor"), jint>(); }
inline jint R_attr::versionMajor() { return get_static_field<SCAPIX_META_STRING("versionMajor"), jint>(); }
inline jint R_attr::versionName() { return get_static_field<SCAPIX_META_STRING("versionName"), jint>(); }
inline jint R_attr::verticalCorrection() { return get_static_field<SCAPIX_META_STRING("verticalCorrection"), jint>(); }
inline jint R_attr::verticalDivider() { return get_static_field<SCAPIX_META_STRING("verticalDivider"), jint>(); }
inline jint R_attr::verticalGap() { return get_static_field<SCAPIX_META_STRING("verticalGap"), jint>(); }
inline jint R_attr::verticalScrollbarPosition() { return get_static_field<SCAPIX_META_STRING("verticalScrollbarPosition"), jint>(); }
inline jint R_attr::verticalSpacing() { return get_static_field<SCAPIX_META_STRING("verticalSpacing"), jint>(); }
inline jint R_attr::viewportHeight() { return get_static_field<SCAPIX_META_STRING("viewportHeight"), jint>(); }
inline jint R_attr::viewportWidth() { return get_static_field<SCAPIX_META_STRING("viewportWidth"), jint>(); }
inline jint R_attr::visibility() { return get_static_field<SCAPIX_META_STRING("visibility"), jint>(); }
inline jint R_attr::visible() { return get_static_field<SCAPIX_META_STRING("visible"), jint>(); }
inline jint R_attr::visibleToInstantApps() { return get_static_field<SCAPIX_META_STRING("visibleToInstantApps"), jint>(); }
inline jint R_attr::vmSafeMode() { return get_static_field<SCAPIX_META_STRING("vmSafeMode"), jint>(); }
inline jint R_attr::voiceIcon() { return get_static_field<SCAPIX_META_STRING("voiceIcon"), jint>(); }
inline jint R_attr::voiceLanguage() { return get_static_field<SCAPIX_META_STRING("voiceLanguage"), jint>(); }
inline jint R_attr::voiceLanguageModel() { return get_static_field<SCAPIX_META_STRING("voiceLanguageModel"), jint>(); }
inline jint R_attr::voiceMaxResults() { return get_static_field<SCAPIX_META_STRING("voiceMaxResults"), jint>(); }
inline jint R_attr::voicePromptText() { return get_static_field<SCAPIX_META_STRING("voicePromptText"), jint>(); }
inline jint R_attr::voiceSearchMode() { return get_static_field<SCAPIX_META_STRING("voiceSearchMode"), jint>(); }
inline jint R_attr::wallpaperCloseEnterAnimation() { return get_static_field<SCAPIX_META_STRING("wallpaperCloseEnterAnimation"), jint>(); }
inline jint R_attr::wallpaperCloseExitAnimation() { return get_static_field<SCAPIX_META_STRING("wallpaperCloseExitAnimation"), jint>(); }
inline jint R_attr::wallpaperIntraCloseEnterAnimation() { return get_static_field<SCAPIX_META_STRING("wallpaperIntraCloseEnterAnimation"), jint>(); }
inline jint R_attr::wallpaperIntraCloseExitAnimation() { return get_static_field<SCAPIX_META_STRING("wallpaperIntraCloseExitAnimation"), jint>(); }
inline jint R_attr::wallpaperIntraOpenEnterAnimation() { return get_static_field<SCAPIX_META_STRING("wallpaperIntraOpenEnterAnimation"), jint>(); }
inline jint R_attr::wallpaperIntraOpenExitAnimation() { return get_static_field<SCAPIX_META_STRING("wallpaperIntraOpenExitAnimation"), jint>(); }
inline jint R_attr::wallpaperOpenEnterAnimation() { return get_static_field<SCAPIX_META_STRING("wallpaperOpenEnterAnimation"), jint>(); }
inline jint R_attr::wallpaperOpenExitAnimation() { return get_static_field<SCAPIX_META_STRING("wallpaperOpenExitAnimation"), jint>(); }
inline jint R_attr::webTextViewStyle() { return get_static_field<SCAPIX_META_STRING("webTextViewStyle"), jint>(); }
inline jint R_attr::webViewStyle() { return get_static_field<SCAPIX_META_STRING("webViewStyle"), jint>(); }
inline jint R_attr::weekDayTextAppearance() { return get_static_field<SCAPIX_META_STRING("weekDayTextAppearance"), jint>(); }
inline jint R_attr::weekNumberColor() { return get_static_field<SCAPIX_META_STRING("weekNumberColor"), jint>(); }
inline jint R_attr::weekSeparatorLineColor() { return get_static_field<SCAPIX_META_STRING("weekSeparatorLineColor"), jint>(); }
inline jint R_attr::weightSum() { return get_static_field<SCAPIX_META_STRING("weightSum"), jint>(); }
inline jint R_attr::widgetCategory() { return get_static_field<SCAPIX_META_STRING("widgetCategory"), jint>(); }
inline jint R_attr::widgetFeatures() { return get_static_field<SCAPIX_META_STRING("widgetFeatures"), jint>(); }
inline jint R_attr::widgetLayout() { return get_static_field<SCAPIX_META_STRING("widgetLayout"), jint>(); }
inline jint R_attr::width() { return get_static_field<SCAPIX_META_STRING("width"), jint>(); }
inline jint R_attr::windowActionBar() { return get_static_field<SCAPIX_META_STRING("windowActionBar"), jint>(); }
inline jint R_attr::windowActionBarOverlay() { return get_static_field<SCAPIX_META_STRING("windowActionBarOverlay"), jint>(); }
inline jint R_attr::windowActionModeOverlay() { return get_static_field<SCAPIX_META_STRING("windowActionModeOverlay"), jint>(); }
inline jint R_attr::windowActivityTransitions() { return get_static_field<SCAPIX_META_STRING("windowActivityTransitions"), jint>(); }
inline jint R_attr::windowAllowEnterTransitionOverlap() { return get_static_field<SCAPIX_META_STRING("windowAllowEnterTransitionOverlap"), jint>(); }
inline jint R_attr::windowAllowReturnTransitionOverlap() { return get_static_field<SCAPIX_META_STRING("windowAllowReturnTransitionOverlap"), jint>(); }
inline jint R_attr::windowAnimationStyle() { return get_static_field<SCAPIX_META_STRING("windowAnimationStyle"), jint>(); }
inline jint R_attr::windowBackground() { return get_static_field<SCAPIX_META_STRING("windowBackground"), jint>(); }
inline jint R_attr::windowBackgroundFallback() { return get_static_field<SCAPIX_META_STRING("windowBackgroundFallback"), jint>(); }
inline jint R_attr::windowClipToOutline() { return get_static_field<SCAPIX_META_STRING("windowClipToOutline"), jint>(); }
inline jint R_attr::windowCloseOnTouchOutside() { return get_static_field<SCAPIX_META_STRING("windowCloseOnTouchOutside"), jint>(); }
inline jint R_attr::windowContentOverlay() { return get_static_field<SCAPIX_META_STRING("windowContentOverlay"), jint>(); }
inline jint R_attr::windowContentTransitionManager() { return get_static_field<SCAPIX_META_STRING("windowContentTransitionManager"), jint>(); }
inline jint R_attr::windowContentTransitions() { return get_static_field<SCAPIX_META_STRING("windowContentTransitions"), jint>(); }
inline jint R_attr::windowDisablePreview() { return get_static_field<SCAPIX_META_STRING("windowDisablePreview"), jint>(); }
inline jint R_attr::windowDrawsSystemBarBackgrounds() { return get_static_field<SCAPIX_META_STRING("windowDrawsSystemBarBackgrounds"), jint>(); }
inline jint R_attr::windowElevation() { return get_static_field<SCAPIX_META_STRING("windowElevation"), jint>(); }
inline jint R_attr::windowEnableSplitTouch() { return get_static_field<SCAPIX_META_STRING("windowEnableSplitTouch"), jint>(); }
inline jint R_attr::windowEnterAnimation() { return get_static_field<SCAPIX_META_STRING("windowEnterAnimation"), jint>(); }
inline jint R_attr::windowEnterTransition() { return get_static_field<SCAPIX_META_STRING("windowEnterTransition"), jint>(); }
inline jint R_attr::windowExitAnimation() { return get_static_field<SCAPIX_META_STRING("windowExitAnimation"), jint>(); }
inline jint R_attr::windowExitTransition() { return get_static_field<SCAPIX_META_STRING("windowExitTransition"), jint>(); }
inline jint R_attr::windowFrame() { return get_static_field<SCAPIX_META_STRING("windowFrame"), jint>(); }
inline jint R_attr::windowFullscreen() { return get_static_field<SCAPIX_META_STRING("windowFullscreen"), jint>(); }
inline jint R_attr::windowHideAnimation() { return get_static_field<SCAPIX_META_STRING("windowHideAnimation"), jint>(); }
inline jint R_attr::windowIsFloating() { return get_static_field<SCAPIX_META_STRING("windowIsFloating"), jint>(); }
inline jint R_attr::windowIsTranslucent() { return get_static_field<SCAPIX_META_STRING("windowIsTranslucent"), jint>(); }
inline jint R_attr::windowLayoutInDisplayCutoutMode() { return get_static_field<SCAPIX_META_STRING("windowLayoutInDisplayCutoutMode"), jint>(); }
inline jint R_attr::windowLightNavigationBar() { return get_static_field<SCAPIX_META_STRING("windowLightNavigationBar"), jint>(); }
inline jint R_attr::windowLightStatusBar() { return get_static_field<SCAPIX_META_STRING("windowLightStatusBar"), jint>(); }
inline jint R_attr::windowMinWidthMajor() { return get_static_field<SCAPIX_META_STRING("windowMinWidthMajor"), jint>(); }
inline jint R_attr::windowMinWidthMinor() { return get_static_field<SCAPIX_META_STRING("windowMinWidthMinor"), jint>(); }
inline jint R_attr::windowNoDisplay() { return get_static_field<SCAPIX_META_STRING("windowNoDisplay"), jint>(); }
inline jint R_attr::windowNoTitle() { return get_static_field<SCAPIX_META_STRING("windowNoTitle"), jint>(); }
inline jint R_attr::windowOverscan() { return get_static_field<SCAPIX_META_STRING("windowOverscan"), jint>(); }
inline jint R_attr::windowReenterTransition() { return get_static_field<SCAPIX_META_STRING("windowReenterTransition"), jint>(); }
inline jint R_attr::windowReturnTransition() { return get_static_field<SCAPIX_META_STRING("windowReturnTransition"), jint>(); }
inline jint R_attr::windowSharedElementEnterTransition() { return get_static_field<SCAPIX_META_STRING("windowSharedElementEnterTransition"), jint>(); }
inline jint R_attr::windowSharedElementExitTransition() { return get_static_field<SCAPIX_META_STRING("windowSharedElementExitTransition"), jint>(); }
inline jint R_attr::windowSharedElementReenterTransition() { return get_static_field<SCAPIX_META_STRING("windowSharedElementReenterTransition"), jint>(); }
inline jint R_attr::windowSharedElementReturnTransition() { return get_static_field<SCAPIX_META_STRING("windowSharedElementReturnTransition"), jint>(); }
inline jint R_attr::windowSharedElementsUseOverlay() { return get_static_field<SCAPIX_META_STRING("windowSharedElementsUseOverlay"), jint>(); }
inline jint R_attr::windowShowAnimation() { return get_static_field<SCAPIX_META_STRING("windowShowAnimation"), jint>(); }
inline jint R_attr::windowShowWallpaper() { return get_static_field<SCAPIX_META_STRING("windowShowWallpaper"), jint>(); }
inline jint R_attr::windowSoftInputMode() { return get_static_field<SCAPIX_META_STRING("windowSoftInputMode"), jint>(); }
inline jint R_attr::windowSplashscreenContent() { return get_static_field<SCAPIX_META_STRING("windowSplashscreenContent"), jint>(); }
inline jint R_attr::windowSwipeToDismiss() { return get_static_field<SCAPIX_META_STRING("windowSwipeToDismiss"), jint>(); }
inline jint R_attr::windowTitleBackgroundStyle() { return get_static_field<SCAPIX_META_STRING("windowTitleBackgroundStyle"), jint>(); }
inline jint R_attr::windowTitleSize() { return get_static_field<SCAPIX_META_STRING("windowTitleSize"), jint>(); }
inline jint R_attr::windowTitleStyle() { return get_static_field<SCAPIX_META_STRING("windowTitleStyle"), jint>(); }
inline jint R_attr::windowTransitionBackgroundFadeDuration() { return get_static_field<SCAPIX_META_STRING("windowTransitionBackgroundFadeDuration"), jint>(); }
inline jint R_attr::windowTranslucentNavigation() { return get_static_field<SCAPIX_META_STRING("windowTranslucentNavigation"), jint>(); }
inline jint R_attr::windowTranslucentStatus() { return get_static_field<SCAPIX_META_STRING("windowTranslucentStatus"), jint>(); }
inline jint R_attr::writePermission() { return get_static_field<SCAPIX_META_STRING("writePermission"), jint>(); }
inline jint R_attr::x() { return get_static_field<SCAPIX_META_STRING("x"), jint>(); }
inline jint R_attr::xlargeScreens() { return get_static_field<SCAPIX_META_STRING("xlargeScreens"), jint>(); }
inline jint R_attr::y() { return get_static_field<SCAPIX_META_STRING("y"), jint>(); }
inline jint R_attr::yearListItemTextAppearance() { return get_static_field<SCAPIX_META_STRING("yearListItemTextAppearance"), jint>(); }
inline jint R_attr::yearListSelectorColor() { return get_static_field<SCAPIX_META_STRING("yearListSelectorColor"), jint>(); }
inline jint R_attr::yesNoPreferenceStyle() { return get_static_field<SCAPIX_META_STRING("yesNoPreferenceStyle"), jint>(); }
inline jint R_attr::zAdjustment() { return get_static_field<SCAPIX_META_STRING("zAdjustment"), jint>(); }
inline ref<R_attr> R_attr::new_object() { return base_::new_object(); }

} // namespace android
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_R_ATTR_H
