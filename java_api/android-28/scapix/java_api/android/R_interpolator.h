// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_R_INTERPOLATOR_H
#define SCAPIX_ANDROID_R_INTERPOLATOR_H

namespace scapix::java_api {


namespace android {

class R_interpolator : public object_base<SCAPIX_META_STRING("android/R$interpolator"),
	java::lang::Object>
{
public:

	static jint accelerate_cubic();
	static jint accelerate_decelerate();
	static jint accelerate_quad();
	static jint accelerate_quint();
	static jint anticipate();
	static jint anticipate_overshoot();
	static jint bounce();
	static jint cycle();
	static jint decelerate_cubic();
	static jint decelerate_quad();
	static jint decelerate_quint();
	static jint fast_out_extra_slow_in();
	static jint fast_out_linear_in();
	static jint fast_out_slow_in();
	static jint linear();
	static jint linear_out_slow_in();
	static jint overshoot();

	static ref<R_interpolator> new_object();

protected:

	R_interpolator(handle_type h) : base_(h) {}

};

} // namespace android
} // namespace scapix::java_api


namespace scapix::java_api {
namespace android {

inline jint R_interpolator::accelerate_cubic() { return get_static_field<SCAPIX_META_STRING("accelerate_cubic"), jint>(); }
inline jint R_interpolator::accelerate_decelerate() { return get_static_field<SCAPIX_META_STRING("accelerate_decelerate"), jint>(); }
inline jint R_interpolator::accelerate_quad() { return get_static_field<SCAPIX_META_STRING("accelerate_quad"), jint>(); }
inline jint R_interpolator::accelerate_quint() { return get_static_field<SCAPIX_META_STRING("accelerate_quint"), jint>(); }
inline jint R_interpolator::anticipate() { return get_static_field<SCAPIX_META_STRING("anticipate"), jint>(); }
inline jint R_interpolator::anticipate_overshoot() { return get_static_field<SCAPIX_META_STRING("anticipate_overshoot"), jint>(); }
inline jint R_interpolator::bounce() { return get_static_field<SCAPIX_META_STRING("bounce"), jint>(); }
inline jint R_interpolator::cycle() { return get_static_field<SCAPIX_META_STRING("cycle"), jint>(); }
inline jint R_interpolator::decelerate_cubic() { return get_static_field<SCAPIX_META_STRING("decelerate_cubic"), jint>(); }
inline jint R_interpolator::decelerate_quad() { return get_static_field<SCAPIX_META_STRING("decelerate_quad"), jint>(); }
inline jint R_interpolator::decelerate_quint() { return get_static_field<SCAPIX_META_STRING("decelerate_quint"), jint>(); }
inline jint R_interpolator::fast_out_extra_slow_in() { return get_static_field<SCAPIX_META_STRING("fast_out_extra_slow_in"), jint>(); }
inline jint R_interpolator::fast_out_linear_in() { return get_static_field<SCAPIX_META_STRING("fast_out_linear_in"), jint>(); }
inline jint R_interpolator::fast_out_slow_in() { return get_static_field<SCAPIX_META_STRING("fast_out_slow_in"), jint>(); }
inline jint R_interpolator::linear() { return get_static_field<SCAPIX_META_STRING("linear"), jint>(); }
inline jint R_interpolator::linear_out_slow_in() { return get_static_field<SCAPIX_META_STRING("linear_out_slow_in"), jint>(); }
inline jint R_interpolator::overshoot() { return get_static_field<SCAPIX_META_STRING("overshoot"), jint>(); }
inline ref<R_interpolator> R_interpolator::new_object() { return base_::new_object(); }

} // namespace android
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_R_INTERPOLATOR_H
