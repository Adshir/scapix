// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_PROVIDER_CALENDARCONTRACT_CALENDARCOLUMNS_H
#define SCAPIX_ANDROID_PROVIDER_CALENDARCONTRACT_CALENDARCOLUMNS_H

namespace scapix::java_api {

namespace java::lang { class String; }

namespace android::provider {

class CalendarContract_CalendarColumns : public object_base<SCAPIX_META_STRING("android/provider/CalendarContract$CalendarColumns"),
	java::lang::Object>
{
public:

	static ref<java::lang::String> ALLOWED_ATTENDEE_TYPES_();
	static ref<java::lang::String> ALLOWED_AVAILABILITY_();
	static ref<java::lang::String> ALLOWED_REMINDERS_();
	static ref<java::lang::String> CALENDAR_ACCESS_LEVEL_();
	static ref<java::lang::String> CALENDAR_COLOR_();
	static ref<java::lang::String> CALENDAR_COLOR_KEY_();
	static ref<java::lang::String> CALENDAR_DISPLAY_NAME_();
	static ref<java::lang::String> CALENDAR_TIME_ZONE_();
	static jint CAL_ACCESS_CONTRIBUTOR_();
	static jint CAL_ACCESS_EDITOR_();
	static jint CAL_ACCESS_FREEBUSY_();
	static jint CAL_ACCESS_NONE_();
	static jint CAL_ACCESS_OVERRIDE_();
	static jint CAL_ACCESS_OWNER_();
	static jint CAL_ACCESS_READ_();
	static jint CAL_ACCESS_RESPOND_();
	static jint CAL_ACCESS_ROOT_();
	static ref<java::lang::String> CAN_MODIFY_TIME_ZONE_();
	static ref<java::lang::String> CAN_ORGANIZER_RESPOND_();
	static ref<java::lang::String> IS_PRIMARY_();
	static ref<java::lang::String> MAX_REMINDERS_();
	static ref<java::lang::String> OWNER_ACCOUNT_();
	static ref<java::lang::String> SYNC_EVENTS_();
	static ref<java::lang::String> VISIBLE_();


protected:

	CalendarContract_CalendarColumns(handle_type h) : base_(h) {}

};

} // namespace android::provider
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::provider {

inline ref<java::lang::String> CalendarContract_CalendarColumns::ALLOWED_ATTENDEE_TYPES_() { return get_static_field<SCAPIX_META_STRING("ALLOWED_ATTENDEE_TYPES"), ref<java::lang::String>>(); }
inline ref<java::lang::String> CalendarContract_CalendarColumns::ALLOWED_AVAILABILITY_() { return get_static_field<SCAPIX_META_STRING("ALLOWED_AVAILABILITY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> CalendarContract_CalendarColumns::ALLOWED_REMINDERS_() { return get_static_field<SCAPIX_META_STRING("ALLOWED_REMINDERS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> CalendarContract_CalendarColumns::CALENDAR_ACCESS_LEVEL_() { return get_static_field<SCAPIX_META_STRING("CALENDAR_ACCESS_LEVEL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> CalendarContract_CalendarColumns::CALENDAR_COLOR_() { return get_static_field<SCAPIX_META_STRING("CALENDAR_COLOR"), ref<java::lang::String>>(); }
inline ref<java::lang::String> CalendarContract_CalendarColumns::CALENDAR_COLOR_KEY_() { return get_static_field<SCAPIX_META_STRING("CALENDAR_COLOR_KEY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> CalendarContract_CalendarColumns::CALENDAR_DISPLAY_NAME_() { return get_static_field<SCAPIX_META_STRING("CALENDAR_DISPLAY_NAME"), ref<java::lang::String>>(); }
inline ref<java::lang::String> CalendarContract_CalendarColumns::CALENDAR_TIME_ZONE_() { return get_static_field<SCAPIX_META_STRING("CALENDAR_TIME_ZONE"), ref<java::lang::String>>(); }
inline jint CalendarContract_CalendarColumns::CAL_ACCESS_CONTRIBUTOR_() { return get_static_field<SCAPIX_META_STRING("CAL_ACCESS_CONTRIBUTOR"), jint>(); }
inline jint CalendarContract_CalendarColumns::CAL_ACCESS_EDITOR_() { return get_static_field<SCAPIX_META_STRING("CAL_ACCESS_EDITOR"), jint>(); }
inline jint CalendarContract_CalendarColumns::CAL_ACCESS_FREEBUSY_() { return get_static_field<SCAPIX_META_STRING("CAL_ACCESS_FREEBUSY"), jint>(); }
inline jint CalendarContract_CalendarColumns::CAL_ACCESS_NONE_() { return get_static_field<SCAPIX_META_STRING("CAL_ACCESS_NONE"), jint>(); }
inline jint CalendarContract_CalendarColumns::CAL_ACCESS_OVERRIDE_() { return get_static_field<SCAPIX_META_STRING("CAL_ACCESS_OVERRIDE"), jint>(); }
inline jint CalendarContract_CalendarColumns::CAL_ACCESS_OWNER_() { return get_static_field<SCAPIX_META_STRING("CAL_ACCESS_OWNER"), jint>(); }
inline jint CalendarContract_CalendarColumns::CAL_ACCESS_READ_() { return get_static_field<SCAPIX_META_STRING("CAL_ACCESS_READ"), jint>(); }
inline jint CalendarContract_CalendarColumns::CAL_ACCESS_RESPOND_() { return get_static_field<SCAPIX_META_STRING("CAL_ACCESS_RESPOND"), jint>(); }
inline jint CalendarContract_CalendarColumns::CAL_ACCESS_ROOT_() { return get_static_field<SCAPIX_META_STRING("CAL_ACCESS_ROOT"), jint>(); }
inline ref<java::lang::String> CalendarContract_CalendarColumns::CAN_MODIFY_TIME_ZONE_() { return get_static_field<SCAPIX_META_STRING("CAN_MODIFY_TIME_ZONE"), ref<java::lang::String>>(); }
inline ref<java::lang::String> CalendarContract_CalendarColumns::CAN_ORGANIZER_RESPOND_() { return get_static_field<SCAPIX_META_STRING("CAN_ORGANIZER_RESPOND"), ref<java::lang::String>>(); }
inline ref<java::lang::String> CalendarContract_CalendarColumns::IS_PRIMARY_() { return get_static_field<SCAPIX_META_STRING("IS_PRIMARY"), ref<java::lang::String>>(); }
inline ref<java::lang::String> CalendarContract_CalendarColumns::MAX_REMINDERS_() { return get_static_field<SCAPIX_META_STRING("MAX_REMINDERS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> CalendarContract_CalendarColumns::OWNER_ACCOUNT_() { return get_static_field<SCAPIX_META_STRING("OWNER_ACCOUNT"), ref<java::lang::String>>(); }
inline ref<java::lang::String> CalendarContract_CalendarColumns::SYNC_EVENTS_() { return get_static_field<SCAPIX_META_STRING("SYNC_EVENTS"), ref<java::lang::String>>(); }
inline ref<java::lang::String> CalendarContract_CalendarColumns::VISIBLE_() { return get_static_field<SCAPIX_META_STRING("VISIBLE"), ref<java::lang::String>>(); }

} // namespace android::provider
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_PROVIDER_CALENDARCONTRACT_CALENDARCOLUMNS_H
