// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/content/ContentProvider.h>

#ifndef SCAPIX_ANDROID_PROVIDER_DOCUMENTSPROVIDER_H
#define SCAPIX_ANDROID_PROVIDER_DOCUMENTSPROVIDER_H

namespace scapix::java_api {

namespace android::content { class ContentValues; }
namespace android::content { class Context; }
namespace android::content { class IntentSender; }
namespace android::content::pm { class ProviderInfo; }
namespace android::content::res { class AssetFileDescriptor; }
namespace android::database { class Cursor; }
namespace android::graphics { class Point; }
namespace android::net { class Uri; }
namespace android::os { class Bundle; }
namespace android::os { class CancellationSignal; }
namespace android::os { class ParcelFileDescriptor; }
namespace android::provider { class DocumentsContract_Path; }
namespace java::lang { class String; }

namespace android::provider {

class DocumentsProvider : public object_base<SCAPIX_META_STRING("android/provider/DocumentsProvider"),
	android::content::ContentProvider>
{
public:

	static ref<DocumentsProvider> new_object();
	void attachInfo(ref<android::content::Context> context, ref<android::content::pm::ProviderInfo> info);
	jboolean isChildDocument(ref<java::lang::String> parentDocumentId, ref<java::lang::String> documentId);
	ref<java::lang::String> createDocument(ref<java::lang::String> parentDocumentId, ref<java::lang::String> mimeType, ref<java::lang::String> displayName);
	ref<java::lang::String> renameDocument(ref<java::lang::String> documentId, ref<java::lang::String> displayName);
	void deleteDocument(ref<java::lang::String> documentId);
	ref<java::lang::String> copyDocument(ref<java::lang::String> sourceDocumentId, ref<java::lang::String> targetParentDocumentId);
	ref<java::lang::String> moveDocument(ref<java::lang::String> sourceDocumentId, ref<java::lang::String> sourceParentDocumentId, ref<java::lang::String> targetParentDocumentId);
	void removeDocument(ref<java::lang::String> documentId, ref<java::lang::String> parentDocumentId);
	ref<android::provider::DocumentsContract_Path> findDocumentPath(ref<java::lang::String> parentDocumentId, ref<java::lang::String> childDocumentId);
	ref<android::content::IntentSender> createWebLinkIntent(ref<java::lang::String> documentId, ref<android::os::Bundle> options);
	ref<android::database::Cursor> queryRoots(ref<link::java::array<java::lang::String>> p1);
	ref<android::database::Cursor> queryRecentDocuments(ref<java::lang::String> rootId, ref<link::java::array<java::lang::String>> projection);
	ref<android::database::Cursor> queryDocument(ref<java::lang::String> p1, ref<link::java::array<java::lang::String>> p2);
	ref<android::database::Cursor> queryChildDocuments(ref<java::lang::String> p1, ref<link::java::array<java::lang::String>> p2, ref<java::lang::String> p3);
	ref<android::database::Cursor> queryChildDocuments(ref<java::lang::String> parentDocumentId, ref<link::java::array<java::lang::String>> projection, ref<android::os::Bundle> queryArgs);
	ref<android::database::Cursor> querySearchDocuments(ref<java::lang::String> rootId, ref<java::lang::String> query, ref<link::java::array<java::lang::String>> projection);
	void ejectRoot(ref<java::lang::String> rootId);
	ref<java::lang::String> getDocumentType(ref<java::lang::String> documentId);
	ref<android::os::ParcelFileDescriptor> openDocument(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<android::os::CancellationSignal> p3);
	ref<android::content::res::AssetFileDescriptor> openDocumentThumbnail(ref<java::lang::String> documentId, ref<android::graphics::Point> sizeHint, ref<android::os::CancellationSignal> signal);
	ref<android::content::res::AssetFileDescriptor> openTypedDocument(ref<java::lang::String> documentId, ref<java::lang::String> mimeTypeFilter, ref<android::os::Bundle> opts, ref<android::os::CancellationSignal> signal);
	ref<android::database::Cursor> query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder);
	ref<android::database::Cursor> query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder, ref<android::os::CancellationSignal> cancellationSignal);
	ref<android::database::Cursor> query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<android::os::Bundle> queryArgs, ref<android::os::CancellationSignal> cancellationSignal);
	ref<java::lang::String> getType(ref<android::net::Uri> uri);
	ref<android::net::Uri> canonicalize(ref<android::net::Uri> uri);
	ref<android::net::Uri> insert(ref<android::net::Uri> uri, ref<android::content::ContentValues> values);
	jint delete_(ref<android::net::Uri> uri, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs);
	jint update(ref<android::net::Uri> uri, ref<android::content::ContentValues> values, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs);
	ref<android::os::Bundle> call(ref<java::lang::String> method, ref<java::lang::String> arg, ref<android::os::Bundle> extras);
	void revokeDocumentPermission(ref<java::lang::String> documentId);
	ref<android::os::ParcelFileDescriptor> openFile(ref<android::net::Uri> uri, ref<java::lang::String> mode);
	ref<android::os::ParcelFileDescriptor> openFile(ref<android::net::Uri> uri, ref<java::lang::String> mode, ref<android::os::CancellationSignal> signal);
	ref<android::content::res::AssetFileDescriptor> openAssetFile(ref<android::net::Uri> uri, ref<java::lang::String> mode);
	ref<android::content::res::AssetFileDescriptor> openAssetFile(ref<android::net::Uri> uri, ref<java::lang::String> mode, ref<android::os::CancellationSignal> signal);
	ref<android::content::res::AssetFileDescriptor> openTypedAssetFile(ref<android::net::Uri> uri, ref<java::lang::String> mimeTypeFilter, ref<android::os::Bundle> opts);
	ref<android::content::res::AssetFileDescriptor> openTypedAssetFile(ref<android::net::Uri> uri, ref<java::lang::String> mimeTypeFilter, ref<android::os::Bundle> opts, ref<android::os::CancellationSignal> signal);
	ref<link::java::array<java::lang::String>> getDocumentStreamTypes(ref<java::lang::String> documentId, ref<java::lang::String> mimeTypeFilter);
	ref<link::java::array<java::lang::String>> getStreamTypes(ref<android::net::Uri> uri, ref<java::lang::String> mimeTypeFilter);

protected:

	DocumentsProvider(handle_type h) : base_(h) {}

};

} // namespace android::provider
} // namespace scapix::java_api

#include <scapix/java_api/android/content/ContentValues.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/IntentSender.h>
#include <scapix/java_api/android/content/pm/ProviderInfo.h>
#include <scapix/java_api/android/content/res/AssetFileDescriptor.h>
#include <scapix/java_api/android/database/Cursor.h>
#include <scapix/java_api/android/graphics/Point.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/CancellationSignal.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/android/provider/DocumentsContract_Path.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::provider {

inline ref<DocumentsProvider> DocumentsProvider::new_object() { return base_::new_object(); }
inline void DocumentsProvider::attachInfo(ref<android::content::Context> context, ref<android::content::pm::ProviderInfo> info) { return call_method<SCAPIX_META_STRING("attachInfo"), void>(context, info); }
inline jboolean DocumentsProvider::isChildDocument(ref<java::lang::String> parentDocumentId, ref<java::lang::String> documentId) { return call_method<SCAPIX_META_STRING("isChildDocument"), jboolean>(parentDocumentId, documentId); }
inline ref<java::lang::String> DocumentsProvider::createDocument(ref<java::lang::String> parentDocumentId, ref<java::lang::String> mimeType, ref<java::lang::String> displayName) { return call_method<SCAPIX_META_STRING("createDocument"), ref<java::lang::String>>(parentDocumentId, mimeType, displayName); }
inline ref<java::lang::String> DocumentsProvider::renameDocument(ref<java::lang::String> documentId, ref<java::lang::String> displayName) { return call_method<SCAPIX_META_STRING("renameDocument"), ref<java::lang::String>>(documentId, displayName); }
inline void DocumentsProvider::deleteDocument(ref<java::lang::String> documentId) { return call_method<SCAPIX_META_STRING("deleteDocument"), void>(documentId); }
inline ref<java::lang::String> DocumentsProvider::copyDocument(ref<java::lang::String> sourceDocumentId, ref<java::lang::String> targetParentDocumentId) { return call_method<SCAPIX_META_STRING("copyDocument"), ref<java::lang::String>>(sourceDocumentId, targetParentDocumentId); }
inline ref<java::lang::String> DocumentsProvider::moveDocument(ref<java::lang::String> sourceDocumentId, ref<java::lang::String> sourceParentDocumentId, ref<java::lang::String> targetParentDocumentId) { return call_method<SCAPIX_META_STRING("moveDocument"), ref<java::lang::String>>(sourceDocumentId, sourceParentDocumentId, targetParentDocumentId); }
inline void DocumentsProvider::removeDocument(ref<java::lang::String> documentId, ref<java::lang::String> parentDocumentId) { return call_method<SCAPIX_META_STRING("removeDocument"), void>(documentId, parentDocumentId); }
inline ref<android::provider::DocumentsContract_Path> DocumentsProvider::findDocumentPath(ref<java::lang::String> parentDocumentId, ref<java::lang::String> childDocumentId) { return call_method<SCAPIX_META_STRING("findDocumentPath"), ref<android::provider::DocumentsContract_Path>>(parentDocumentId, childDocumentId); }
inline ref<android::content::IntentSender> DocumentsProvider::createWebLinkIntent(ref<java::lang::String> documentId, ref<android::os::Bundle> options) { return call_method<SCAPIX_META_STRING("createWebLinkIntent"), ref<android::content::IntentSender>>(documentId, options); }
inline ref<android::database::Cursor> DocumentsProvider::queryRoots(ref<link::java::array<java::lang::String>> p1) { return call_method<SCAPIX_META_STRING("queryRoots"), ref<android::database::Cursor>>(p1); }
inline ref<android::database::Cursor> DocumentsProvider::queryRecentDocuments(ref<java::lang::String> rootId, ref<link::java::array<java::lang::String>> projection) { return call_method<SCAPIX_META_STRING("queryRecentDocuments"), ref<android::database::Cursor>>(rootId, projection); }
inline ref<android::database::Cursor> DocumentsProvider::queryDocument(ref<java::lang::String> p1, ref<link::java::array<java::lang::String>> p2) { return call_method<SCAPIX_META_STRING("queryDocument"), ref<android::database::Cursor>>(p1, p2); }
inline ref<android::database::Cursor> DocumentsProvider::queryChildDocuments(ref<java::lang::String> p1, ref<link::java::array<java::lang::String>> p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("queryChildDocuments"), ref<android::database::Cursor>>(p1, p2, p3); }
inline ref<android::database::Cursor> DocumentsProvider::queryChildDocuments(ref<java::lang::String> parentDocumentId, ref<link::java::array<java::lang::String>> projection, ref<android::os::Bundle> queryArgs) { return call_method<SCAPIX_META_STRING("queryChildDocuments"), ref<android::database::Cursor>>(parentDocumentId, projection, queryArgs); }
inline ref<android::database::Cursor> DocumentsProvider::querySearchDocuments(ref<java::lang::String> rootId, ref<java::lang::String> query, ref<link::java::array<java::lang::String>> projection) { return call_method<SCAPIX_META_STRING("querySearchDocuments"), ref<android::database::Cursor>>(rootId, query, projection); }
inline void DocumentsProvider::ejectRoot(ref<java::lang::String> rootId) { return call_method<SCAPIX_META_STRING("ejectRoot"), void>(rootId); }
inline ref<java::lang::String> DocumentsProvider::getDocumentType(ref<java::lang::String> documentId) { return call_method<SCAPIX_META_STRING("getDocumentType"), ref<java::lang::String>>(documentId); }
inline ref<android::os::ParcelFileDescriptor> DocumentsProvider::openDocument(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<android::os::CancellationSignal> p3) { return call_method<SCAPIX_META_STRING("openDocument"), ref<android::os::ParcelFileDescriptor>>(p1, p2, p3); }
inline ref<android::content::res::AssetFileDescriptor> DocumentsProvider::openDocumentThumbnail(ref<java::lang::String> documentId, ref<android::graphics::Point> sizeHint, ref<android::os::CancellationSignal> signal) { return call_method<SCAPIX_META_STRING("openDocumentThumbnail"), ref<android::content::res::AssetFileDescriptor>>(documentId, sizeHint, signal); }
inline ref<android::content::res::AssetFileDescriptor> DocumentsProvider::openTypedDocument(ref<java::lang::String> documentId, ref<java::lang::String> mimeTypeFilter, ref<android::os::Bundle> opts, ref<android::os::CancellationSignal> signal) { return call_method<SCAPIX_META_STRING("openTypedDocument"), ref<android::content::res::AssetFileDescriptor>>(documentId, mimeTypeFilter, opts, signal); }
inline ref<android::database::Cursor> DocumentsProvider::query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder) { return call_method<SCAPIX_META_STRING("query"), ref<android::database::Cursor>>(uri, projection, selection, selectionArgs, sortOrder); }
inline ref<android::database::Cursor> DocumentsProvider::query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> sortOrder, ref<android::os::CancellationSignal> cancellationSignal) { return call_method<SCAPIX_META_STRING("query"), ref<android::database::Cursor>>(uri, projection, selection, selectionArgs, sortOrder, cancellationSignal); }
inline ref<android::database::Cursor> DocumentsProvider::query(ref<android::net::Uri> uri, ref<link::java::array<java::lang::String>> projection, ref<android::os::Bundle> queryArgs, ref<android::os::CancellationSignal> cancellationSignal) { return call_method<SCAPIX_META_STRING("query"), ref<android::database::Cursor>>(uri, projection, queryArgs, cancellationSignal); }
inline ref<java::lang::String> DocumentsProvider::getType(ref<android::net::Uri> uri) { return call_method<SCAPIX_META_STRING("getType"), ref<java::lang::String>>(uri); }
inline ref<android::net::Uri> DocumentsProvider::canonicalize(ref<android::net::Uri> uri) { return call_method<SCAPIX_META_STRING("canonicalize"), ref<android::net::Uri>>(uri); }
inline ref<android::net::Uri> DocumentsProvider::insert(ref<android::net::Uri> uri, ref<android::content::ContentValues> values) { return call_method<SCAPIX_META_STRING("insert"), ref<android::net::Uri>>(uri, values); }
inline jint DocumentsProvider::delete_(ref<android::net::Uri> uri, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs) { return call_method<SCAPIX_META_STRING("delete"), jint>(uri, selection, selectionArgs); }
inline jint DocumentsProvider::update(ref<android::net::Uri> uri, ref<android::content::ContentValues> values, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs) { return call_method<SCAPIX_META_STRING("update"), jint>(uri, values, selection, selectionArgs); }
inline ref<android::os::Bundle> DocumentsProvider::call(ref<java::lang::String> method, ref<java::lang::String> arg, ref<android::os::Bundle> extras) { return call_method<SCAPIX_META_STRING("call"), ref<android::os::Bundle>>(method, arg, extras); }
inline void DocumentsProvider::revokeDocumentPermission(ref<java::lang::String> documentId) { return call_method<SCAPIX_META_STRING("revokeDocumentPermission"), void>(documentId); }
inline ref<android::os::ParcelFileDescriptor> DocumentsProvider::openFile(ref<android::net::Uri> uri, ref<java::lang::String> mode) { return call_method<SCAPIX_META_STRING("openFile"), ref<android::os::ParcelFileDescriptor>>(uri, mode); }
inline ref<android::os::ParcelFileDescriptor> DocumentsProvider::openFile(ref<android::net::Uri> uri, ref<java::lang::String> mode, ref<android::os::CancellationSignal> signal) { return call_method<SCAPIX_META_STRING("openFile"), ref<android::os::ParcelFileDescriptor>>(uri, mode, signal); }
inline ref<android::content::res::AssetFileDescriptor> DocumentsProvider::openAssetFile(ref<android::net::Uri> uri, ref<java::lang::String> mode) { return call_method<SCAPIX_META_STRING("openAssetFile"), ref<android::content::res::AssetFileDescriptor>>(uri, mode); }
inline ref<android::content::res::AssetFileDescriptor> DocumentsProvider::openAssetFile(ref<android::net::Uri> uri, ref<java::lang::String> mode, ref<android::os::CancellationSignal> signal) { return call_method<SCAPIX_META_STRING("openAssetFile"), ref<android::content::res::AssetFileDescriptor>>(uri, mode, signal); }
inline ref<android::content::res::AssetFileDescriptor> DocumentsProvider::openTypedAssetFile(ref<android::net::Uri> uri, ref<java::lang::String> mimeTypeFilter, ref<android::os::Bundle> opts) { return call_method<SCAPIX_META_STRING("openTypedAssetFile"), ref<android::content::res::AssetFileDescriptor>>(uri, mimeTypeFilter, opts); }
inline ref<android::content::res::AssetFileDescriptor> DocumentsProvider::openTypedAssetFile(ref<android::net::Uri> uri, ref<java::lang::String> mimeTypeFilter, ref<android::os::Bundle> opts, ref<android::os::CancellationSignal> signal) { return call_method<SCAPIX_META_STRING("openTypedAssetFile"), ref<android::content::res::AssetFileDescriptor>>(uri, mimeTypeFilter, opts, signal); }
inline ref<link::java::array<java::lang::String>> DocumentsProvider::getDocumentStreamTypes(ref<java::lang::String> documentId, ref<java::lang::String> mimeTypeFilter) { return call_method<SCAPIX_META_STRING("getDocumentStreamTypes"), ref<link::java::array<java::lang::String>>>(documentId, mimeTypeFilter); }
inline ref<link::java::array<java::lang::String>> DocumentsProvider::getStreamTypes(ref<android::net::Uri> uri, ref<java::lang::String> mimeTypeFilter) { return call_method<SCAPIX_META_STRING("getStreamTypes"), ref<link::java::array<java::lang::String>>>(uri, mimeTypeFilter); }

} // namespace android::provider
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_PROVIDER_DOCUMENTSPROVIDER_H
