// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_ANDROID_DATABASE_CURSOR_H
#define SCAPIX_ANDROID_DATABASE_CURSOR_H

namespace scapix::java_api {

namespace android::content { class ContentResolver; }
namespace android::database { class CharArrayBuffer; }
namespace android::database { class ContentObserver; }
namespace android::database { class DataSetObserver; }
namespace android::net { class Uri; }
namespace android::os { class Bundle; }
namespace java::lang { class String; }

namespace android::database {

class Cursor : public object_base<SCAPIX_META_STRING("android/database/Cursor"),
	java::lang::Object,
	java::io::Closeable>
{
public:

	static jint FIELD_TYPE_BLOB_();
	static jint FIELD_TYPE_FLOAT_();
	static jint FIELD_TYPE_INTEGER_();
	static jint FIELD_TYPE_NULL_();
	static jint FIELD_TYPE_STRING_();

	jint getCount();
	jint getPosition();
	jboolean move(jint p1);
	jboolean moveToPosition(jint p1);
	jboolean moveToFirst();
	jboolean moveToLast();
	jboolean moveToNext();
	jboolean moveToPrevious();
	jboolean isFirst();
	jboolean isLast();
	jboolean isBeforeFirst();
	jboolean isAfterLast();
	jint getColumnIndex(ref<java::lang::String> p1);
	jint getColumnIndexOrThrow(ref<java::lang::String> p1);
	ref<java::lang::String> getColumnName(jint p1);
	ref<link::java::array<java::lang::String>> getColumnNames();
	jint getColumnCount();
	ref<link::java::array<jbyte>> getBlob(jint p1);
	ref<java::lang::String> getString(jint p1);
	void copyStringToBuffer(jint p1, ref<android::database::CharArrayBuffer> p2);
	jshort getShort(jint p1);
	jint getInt(jint p1);
	jlong getLong(jint p1);
	jfloat getFloat(jint p1);
	jdouble getDouble(jint p1);
	jint getType(jint p1);
	jboolean isNull(jint p1);
	void deactivate();
	jboolean requery();
	void close();
	jboolean isClosed();
	void registerContentObserver(ref<android::database::ContentObserver> p1);
	void unregisterContentObserver(ref<android::database::ContentObserver> p1);
	void registerDataSetObserver(ref<android::database::DataSetObserver> p1);
	void unregisterDataSetObserver(ref<android::database::DataSetObserver> p1);
	void setNotificationUri(ref<android::content::ContentResolver> p1, ref<android::net::Uri> p2);
	ref<android::net::Uri> getNotificationUri();
	jboolean getWantsAllOnMoveCalls();
	void setExtras(ref<android::os::Bundle> p1);
	ref<android::os::Bundle> getExtras();
	ref<android::os::Bundle> respond(ref<android::os::Bundle> p1);

protected:

	Cursor(handle_type h) : base_(h) {}

};

} // namespace android::database
} // namespace scapix::java_api

#include <scapix/java_api/android/content/ContentResolver.h>
#include <scapix/java_api/android/database/CharArrayBuffer.h>
#include <scapix/java_api/android/database/ContentObserver.h>
#include <scapix/java_api/android/database/DataSetObserver.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::database {

inline jint Cursor::FIELD_TYPE_BLOB_() { return get_static_field<SCAPIX_META_STRING("FIELD_TYPE_BLOB"), jint>(); }
inline jint Cursor::FIELD_TYPE_FLOAT_() { return get_static_field<SCAPIX_META_STRING("FIELD_TYPE_FLOAT"), jint>(); }
inline jint Cursor::FIELD_TYPE_INTEGER_() { return get_static_field<SCAPIX_META_STRING("FIELD_TYPE_INTEGER"), jint>(); }
inline jint Cursor::FIELD_TYPE_NULL_() { return get_static_field<SCAPIX_META_STRING("FIELD_TYPE_NULL"), jint>(); }
inline jint Cursor::FIELD_TYPE_STRING_() { return get_static_field<SCAPIX_META_STRING("FIELD_TYPE_STRING"), jint>(); }
inline jint Cursor::getCount() { return call_method<SCAPIX_META_STRING("getCount"), jint>(); }
inline jint Cursor::getPosition() { return call_method<SCAPIX_META_STRING("getPosition"), jint>(); }
inline jboolean Cursor::move(jint p1) { return call_method<SCAPIX_META_STRING("move"), jboolean>(p1); }
inline jboolean Cursor::moveToPosition(jint p1) { return call_method<SCAPIX_META_STRING("moveToPosition"), jboolean>(p1); }
inline jboolean Cursor::moveToFirst() { return call_method<SCAPIX_META_STRING("moveToFirst"), jboolean>(); }
inline jboolean Cursor::moveToLast() { return call_method<SCAPIX_META_STRING("moveToLast"), jboolean>(); }
inline jboolean Cursor::moveToNext() { return call_method<SCAPIX_META_STRING("moveToNext"), jboolean>(); }
inline jboolean Cursor::moveToPrevious() { return call_method<SCAPIX_META_STRING("moveToPrevious"), jboolean>(); }
inline jboolean Cursor::isFirst() { return call_method<SCAPIX_META_STRING("isFirst"), jboolean>(); }
inline jboolean Cursor::isLast() { return call_method<SCAPIX_META_STRING("isLast"), jboolean>(); }
inline jboolean Cursor::isBeforeFirst() { return call_method<SCAPIX_META_STRING("isBeforeFirst"), jboolean>(); }
inline jboolean Cursor::isAfterLast() { return call_method<SCAPIX_META_STRING("isAfterLast"), jboolean>(); }
inline jint Cursor::getColumnIndex(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getColumnIndex"), jint>(p1); }
inline jint Cursor::getColumnIndexOrThrow(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getColumnIndexOrThrow"), jint>(p1); }
inline ref<java::lang::String> Cursor::getColumnName(jint p1) { return call_method<SCAPIX_META_STRING("getColumnName"), ref<java::lang::String>>(p1); }
inline ref<link::java::array<java::lang::String>> Cursor::getColumnNames() { return call_method<SCAPIX_META_STRING("getColumnNames"), ref<link::java::array<java::lang::String>>>(); }
inline jint Cursor::getColumnCount() { return call_method<SCAPIX_META_STRING("getColumnCount"), jint>(); }
inline ref<link::java::array<jbyte>> Cursor::getBlob(jint p1) { return call_method<SCAPIX_META_STRING("getBlob"), ref<link::java::array<jbyte>>>(p1); }
inline ref<java::lang::String> Cursor::getString(jint p1) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(p1); }
inline void Cursor::copyStringToBuffer(jint p1, ref<android::database::CharArrayBuffer> p2) { return call_method<SCAPIX_META_STRING("copyStringToBuffer"), void>(p1, p2); }
inline jshort Cursor::getShort(jint p1) { return call_method<SCAPIX_META_STRING("getShort"), jshort>(p1); }
inline jint Cursor::getInt(jint p1) { return call_method<SCAPIX_META_STRING("getInt"), jint>(p1); }
inline jlong Cursor::getLong(jint p1) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(p1); }
inline jfloat Cursor::getFloat(jint p1) { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(p1); }
inline jdouble Cursor::getDouble(jint p1) { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(p1); }
inline jint Cursor::getType(jint p1) { return call_method<SCAPIX_META_STRING("getType"), jint>(p1); }
inline jboolean Cursor::isNull(jint p1) { return call_method<SCAPIX_META_STRING("isNull"), jboolean>(p1); }
inline void Cursor::deactivate() { return call_method<SCAPIX_META_STRING("deactivate"), void>(); }
inline jboolean Cursor::requery() { return call_method<SCAPIX_META_STRING("requery"), jboolean>(); }
inline void Cursor::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline jboolean Cursor::isClosed() { return call_method<SCAPIX_META_STRING("isClosed"), jboolean>(); }
inline void Cursor::registerContentObserver(ref<android::database::ContentObserver> p1) { return call_method<SCAPIX_META_STRING("registerContentObserver"), void>(p1); }
inline void Cursor::unregisterContentObserver(ref<android::database::ContentObserver> p1) { return call_method<SCAPIX_META_STRING("unregisterContentObserver"), void>(p1); }
inline void Cursor::registerDataSetObserver(ref<android::database::DataSetObserver> p1) { return call_method<SCAPIX_META_STRING("registerDataSetObserver"), void>(p1); }
inline void Cursor::unregisterDataSetObserver(ref<android::database::DataSetObserver> p1) { return call_method<SCAPIX_META_STRING("unregisterDataSetObserver"), void>(p1); }
inline void Cursor::setNotificationUri(ref<android::content::ContentResolver> p1, ref<android::net::Uri> p2) { return call_method<SCAPIX_META_STRING("setNotificationUri"), void>(p1, p2); }
inline ref<android::net::Uri> Cursor::getNotificationUri() { return call_method<SCAPIX_META_STRING("getNotificationUri"), ref<android::net::Uri>>(); }
inline jboolean Cursor::getWantsAllOnMoveCalls() { return call_method<SCAPIX_META_STRING("getWantsAllOnMoveCalls"), jboolean>(); }
inline void Cursor::setExtras(ref<android::os::Bundle> p1) { return call_method<SCAPIX_META_STRING("setExtras"), void>(p1); }
inline ref<android::os::Bundle> Cursor::getExtras() { return call_method<SCAPIX_META_STRING("getExtras"), ref<android::os::Bundle>>(); }
inline ref<android::os::Bundle> Cursor::respond(ref<android::os::Bundle> p1) { return call_method<SCAPIX_META_STRING("respond"), ref<android::os::Bundle>>(p1); }

} // namespace android::database
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_DATABASE_CURSOR_H
