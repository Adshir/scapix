// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/database/AbstractCursor.h>

#ifndef SCAPIX_ANDROID_DATABASE_MERGECURSOR_H
#define SCAPIX_ANDROID_DATABASE_MERGECURSOR_H

namespace scapix::java_api {

namespace android::database { class ContentObserver; }
namespace android::database { class Cursor; }
namespace android::database { class DataSetObserver; }
namespace java::lang { class String; }

namespace android::database {

class MergeCursor : public object_base<SCAPIX_META_STRING("android/database/MergeCursor"),
	android::database::AbstractCursor>
{
public:

	static ref<MergeCursor> new_object(ref<link::java::array<android::database::Cursor>> cursors);
	jint getCount();
	jboolean onMove(jint oldPosition, jint newPosition);
	ref<java::lang::String> getString(jint column);
	jshort getShort(jint column);
	jint getInt(jint column);
	jlong getLong(jint column);
	jfloat getFloat(jint column);
	jdouble getDouble(jint column);
	jint getType(jint column);
	jboolean isNull(jint column);
	ref<link::java::array<jbyte>> getBlob(jint column);
	ref<link::java::array<java::lang::String>> getColumnNames();
	void deactivate();
	void close();
	void registerContentObserver(ref<android::database::ContentObserver> observer);
	void unregisterContentObserver(ref<android::database::ContentObserver> observer);
	void registerDataSetObserver(ref<android::database::DataSetObserver> observer);
	void unregisterDataSetObserver(ref<android::database::DataSetObserver> observer);
	jboolean requery();

protected:

	MergeCursor(handle_type h) : base_(h) {}

};

} // namespace android::database
} // namespace scapix::java_api

#include <scapix/java_api/android/database/ContentObserver.h>
#include <scapix/java_api/android/database/Cursor.h>
#include <scapix/java_api/android/database/DataSetObserver.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::database {

inline ref<MergeCursor> MergeCursor::new_object(ref<link::java::array<android::database::Cursor>> cursors) { return base_::new_object(cursors); }
inline jint MergeCursor::getCount() { return call_method<SCAPIX_META_STRING("getCount"), jint>(); }
inline jboolean MergeCursor::onMove(jint oldPosition, jint newPosition) { return call_method<SCAPIX_META_STRING("onMove"), jboolean>(oldPosition, newPosition); }
inline ref<java::lang::String> MergeCursor::getString(jint column) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(column); }
inline jshort MergeCursor::getShort(jint column) { return call_method<SCAPIX_META_STRING("getShort"), jshort>(column); }
inline jint MergeCursor::getInt(jint column) { return call_method<SCAPIX_META_STRING("getInt"), jint>(column); }
inline jlong MergeCursor::getLong(jint column) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(column); }
inline jfloat MergeCursor::getFloat(jint column) { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(column); }
inline jdouble MergeCursor::getDouble(jint column) { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(column); }
inline jint MergeCursor::getType(jint column) { return call_method<SCAPIX_META_STRING("getType"), jint>(column); }
inline jboolean MergeCursor::isNull(jint column) { return call_method<SCAPIX_META_STRING("isNull"), jboolean>(column); }
inline ref<link::java::array<jbyte>> MergeCursor::getBlob(jint column) { return call_method<SCAPIX_META_STRING("getBlob"), ref<link::java::array<jbyte>>>(column); }
inline ref<link::java::array<java::lang::String>> MergeCursor::getColumnNames() { return call_method<SCAPIX_META_STRING("getColumnNames"), ref<link::java::array<java::lang::String>>>(); }
inline void MergeCursor::deactivate() { return call_method<SCAPIX_META_STRING("deactivate"), void>(); }
inline void MergeCursor::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void MergeCursor::registerContentObserver(ref<android::database::ContentObserver> observer) { return call_method<SCAPIX_META_STRING("registerContentObserver"), void>(observer); }
inline void MergeCursor::unregisterContentObserver(ref<android::database::ContentObserver> observer) { return call_method<SCAPIX_META_STRING("unregisterContentObserver"), void>(observer); }
inline void MergeCursor::registerDataSetObserver(ref<android::database::DataSetObserver> observer) { return call_method<SCAPIX_META_STRING("registerDataSetObserver"), void>(observer); }
inline void MergeCursor::unregisterDataSetObserver(ref<android::database::DataSetObserver> observer) { return call_method<SCAPIX_META_STRING("unregisterDataSetObserver"), void>(observer); }
inline jboolean MergeCursor::requery() { return call_method<SCAPIX_META_STRING("requery"), jboolean>(); }

} // namespace android::database
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_DATABASE_MERGECURSOR_H
