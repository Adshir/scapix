// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_DATABASE_SQLITE_SQLITEOPENHELPER_H
#define SCAPIX_ANDROID_DATABASE_SQLITE_SQLITEOPENHELPER_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::database { class DatabaseErrorHandler; }
namespace android::database::sqlite { class SQLiteDatabase; }
namespace android::database::sqlite { class SQLiteDatabase_CursorFactory; }
namespace android::database::sqlite { class SQLiteDatabase_OpenParams; }
namespace java::lang { class String; }

namespace android::database::sqlite {

class SQLiteOpenHelper : public object_base<SCAPIX_META_STRING("android/database/sqlite/SQLiteOpenHelper"),
	java::lang::Object>
{
public:

	static ref<SQLiteOpenHelper> new_object(ref<android::content::Context> context, ref<java::lang::String> name, ref<android::database::sqlite::SQLiteDatabase_CursorFactory> factory, jint version);
	static ref<SQLiteOpenHelper> new_object(ref<android::content::Context> context, ref<java::lang::String> name, ref<android::database::sqlite::SQLiteDatabase_CursorFactory> factory, jint version, ref<android::database::DatabaseErrorHandler> errorHandler);
	static ref<SQLiteOpenHelper> new_object(ref<android::content::Context> context, ref<java::lang::String> name, jint version, ref<android::database::sqlite::SQLiteDatabase_OpenParams> openParams);
	ref<java::lang::String> getDatabaseName();
	void setWriteAheadLoggingEnabled(jboolean enabled);
	void setLookasideConfig(jint slotSize, jint slotCount);
	void setOpenParams(ref<android::database::sqlite::SQLiteDatabase_OpenParams> openParams);
	void setIdleConnectionTimeout(jlong idleConnectionTimeoutMs);
	ref<android::database::sqlite::SQLiteDatabase> getWritableDatabase();
	ref<android::database::sqlite::SQLiteDatabase> getReadableDatabase();
	void close();
	void onConfigure(ref<android::database::sqlite::SQLiteDatabase> db);
	void onCreate(ref<android::database::sqlite::SQLiteDatabase> p1);
	void onUpgrade(ref<android::database::sqlite::SQLiteDatabase> p1, jint p2, jint p3);
	void onDowngrade(ref<android::database::sqlite::SQLiteDatabase> db, jint oldVersion, jint newVersion);
	void onOpen(ref<android::database::sqlite::SQLiteDatabase> db);

protected:

	SQLiteOpenHelper(handle_type h) : base_(h) {}

};

} // namespace android::database::sqlite
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/database/DatabaseErrorHandler.h>
#include <scapix/java_api/android/database/sqlite/SQLiteDatabase.h>
#include <scapix/java_api/android/database/sqlite/SQLiteDatabase_CursorFactory.h>
#include <scapix/java_api/android/database/sqlite/SQLiteDatabase_OpenParams.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::database::sqlite {

inline ref<SQLiteOpenHelper> SQLiteOpenHelper::new_object(ref<android::content::Context> context, ref<java::lang::String> name, ref<android::database::sqlite::SQLiteDatabase_CursorFactory> factory, jint version) { return base_::new_object(context, name, factory, version); }
inline ref<SQLiteOpenHelper> SQLiteOpenHelper::new_object(ref<android::content::Context> context, ref<java::lang::String> name, ref<android::database::sqlite::SQLiteDatabase_CursorFactory> factory, jint version, ref<android::database::DatabaseErrorHandler> errorHandler) { return base_::new_object(context, name, factory, version, errorHandler); }
inline ref<SQLiteOpenHelper> SQLiteOpenHelper::new_object(ref<android::content::Context> context, ref<java::lang::String> name, jint version, ref<android::database::sqlite::SQLiteDatabase_OpenParams> openParams) { return base_::new_object(context, name, version, openParams); }
inline ref<java::lang::String> SQLiteOpenHelper::getDatabaseName() { return call_method<SCAPIX_META_STRING("getDatabaseName"), ref<java::lang::String>>(); }
inline void SQLiteOpenHelper::setWriteAheadLoggingEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setWriteAheadLoggingEnabled"), void>(enabled); }
inline void SQLiteOpenHelper::setLookasideConfig(jint slotSize, jint slotCount) { return call_method<SCAPIX_META_STRING("setLookasideConfig"), void>(slotSize, slotCount); }
inline void SQLiteOpenHelper::setOpenParams(ref<android::database::sqlite::SQLiteDatabase_OpenParams> openParams) { return call_method<SCAPIX_META_STRING("setOpenParams"), void>(openParams); }
inline void SQLiteOpenHelper::setIdleConnectionTimeout(jlong idleConnectionTimeoutMs) { return call_method<SCAPIX_META_STRING("setIdleConnectionTimeout"), void>(idleConnectionTimeoutMs); }
inline ref<android::database::sqlite::SQLiteDatabase> SQLiteOpenHelper::getWritableDatabase() { return call_method<SCAPIX_META_STRING("getWritableDatabase"), ref<android::database::sqlite::SQLiteDatabase>>(); }
inline ref<android::database::sqlite::SQLiteDatabase> SQLiteOpenHelper::getReadableDatabase() { return call_method<SCAPIX_META_STRING("getReadableDatabase"), ref<android::database::sqlite::SQLiteDatabase>>(); }
inline void SQLiteOpenHelper::close() { return call_method<SCAPIX_META_STRING("close"), void>(); }
inline void SQLiteOpenHelper::onConfigure(ref<android::database::sqlite::SQLiteDatabase> db) { return call_method<SCAPIX_META_STRING("onConfigure"), void>(db); }
inline void SQLiteOpenHelper::onCreate(ref<android::database::sqlite::SQLiteDatabase> p1) { return call_method<SCAPIX_META_STRING("onCreate"), void>(p1); }
inline void SQLiteOpenHelper::onUpgrade(ref<android::database::sqlite::SQLiteDatabase> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("onUpgrade"), void>(p1, p2, p3); }
inline void SQLiteOpenHelper::onDowngrade(ref<android::database::sqlite::SQLiteDatabase> db, jint oldVersion, jint newVersion) { return call_method<SCAPIX_META_STRING("onDowngrade"), void>(db, oldVersion, newVersion); }
inline void SQLiteOpenHelper::onOpen(ref<android::database::sqlite::SQLiteDatabase> db) { return call_method<SCAPIX_META_STRING("onOpen"), void>(db); }

} // namespace android::database::sqlite
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_DATABASE_SQLITE_SQLITEOPENHELPER_H
