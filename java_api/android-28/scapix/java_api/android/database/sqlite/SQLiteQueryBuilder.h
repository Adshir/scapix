// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ANDROID_DATABASE_SQLITE_SQLITEQUERYBUILDER_H
#define SCAPIX_ANDROID_DATABASE_SQLITE_SQLITEQUERYBUILDER_H

namespace scapix::java_api {

namespace android::database { class Cursor; }
namespace android::database::sqlite { class SQLiteDatabase; }
namespace android::database::sqlite { class SQLiteDatabase_CursorFactory; }
namespace android::os { class CancellationSignal; }
namespace java::lang { class CharSequence; }
namespace java::lang { class String; }
namespace java::lang { class StringBuilder; }
namespace java::util { class Map; }
namespace java::util { class Set; }

namespace android::database::sqlite {

class SQLiteQueryBuilder : public object_base<SCAPIX_META_STRING("android/database/sqlite/SQLiteQueryBuilder"),
	java::lang::Object>
{
public:

	static ref<SQLiteQueryBuilder> new_object();
	void setDistinct(jboolean distinct);
	ref<java::lang::String> getTables();
	void setTables(ref<java::lang::String> inTables);
	void appendWhere(ref<java::lang::CharSequence> inWhere);
	void appendWhereEscapeString(ref<java::lang::String> inWhere);
	void setProjectionMap(ref<java::util::Map> columnMap);
	void setCursorFactory(ref<android::database::sqlite::SQLiteDatabase_CursorFactory> factory);
	void setStrict(jboolean flag);
	static ref<java::lang::String> buildQueryString(jboolean distinct, ref<java::lang::String> tables, ref<link::java::array<java::lang::String>> columns, ref<java::lang::String> where, ref<java::lang::String> groupBy, ref<java::lang::String> having, ref<java::lang::String> orderBy, ref<java::lang::String> limit);
	static void appendColumns(ref<java::lang::StringBuilder> s, ref<link::java::array<java::lang::String>> columns);
	ref<android::database::Cursor> query(ref<android::database::sqlite::SQLiteDatabase> db, ref<link::java::array<java::lang::String>> projectionIn, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> groupBy, ref<java::lang::String> having, ref<java::lang::String> sortOrder);
	ref<android::database::Cursor> query(ref<android::database::sqlite::SQLiteDatabase> db, ref<link::java::array<java::lang::String>> projectionIn, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> groupBy, ref<java::lang::String> having, ref<java::lang::String> sortOrder, ref<java::lang::String> limit);
	ref<android::database::Cursor> query(ref<android::database::sqlite::SQLiteDatabase> db, ref<link::java::array<java::lang::String>> projectionIn, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> groupBy, ref<java::lang::String> having, ref<java::lang::String> sortOrder, ref<java::lang::String> limit, ref<android::os::CancellationSignal> cancellationSignal);
	ref<java::lang::String> buildQuery(ref<link::java::array<java::lang::String>> projectionIn, ref<java::lang::String> selection, ref<java::lang::String> groupBy, ref<java::lang::String> having, ref<java::lang::String> sortOrder, ref<java::lang::String> limit);
	ref<java::lang::String> buildQuery(ref<link::java::array<java::lang::String>> projectionIn, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> groupBy, ref<java::lang::String> having, ref<java::lang::String> sortOrder, ref<java::lang::String> limit);
	ref<java::lang::String> buildUnionSubQuery(ref<java::lang::String> typeDiscriminatorColumn, ref<link::java::array<java::lang::String>> unionColumns, ref<java::util::Set> columnsPresentInTable, jint computedColumnsOffset, ref<java::lang::String> typeDiscriminatorValue, ref<java::lang::String> selection, ref<java::lang::String> groupBy, ref<java::lang::String> having);
	ref<java::lang::String> buildUnionSubQuery(ref<java::lang::String> typeDiscriminatorColumn, ref<link::java::array<java::lang::String>> unionColumns, ref<java::util::Set> columnsPresentInTable, jint computedColumnsOffset, ref<java::lang::String> typeDiscriminatorValue, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> groupBy, ref<java::lang::String> having);
	ref<java::lang::String> buildUnionQuery(ref<link::java::array<java::lang::String>> subQueries, ref<java::lang::String> sortOrder, ref<java::lang::String> limit);

protected:

	SQLiteQueryBuilder(handle_type h) : base_(h) {}

};

} // namespace android::database::sqlite
} // namespace scapix::java_api

#include <scapix/java_api/android/database/Cursor.h>
#include <scapix/java_api/android/database/sqlite/SQLiteDatabase.h>
#include <scapix/java_api/android/database/sqlite/SQLiteDatabase_CursorFactory.h>
#include <scapix/java_api/android/os/CancellationSignal.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuilder.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace android::database::sqlite {

inline ref<SQLiteQueryBuilder> SQLiteQueryBuilder::new_object() { return base_::new_object(); }
inline void SQLiteQueryBuilder::setDistinct(jboolean distinct) { return call_method<SCAPIX_META_STRING("setDistinct"), void>(distinct); }
inline ref<java::lang::String> SQLiteQueryBuilder::getTables() { return call_method<SCAPIX_META_STRING("getTables"), ref<java::lang::String>>(); }
inline void SQLiteQueryBuilder::setTables(ref<java::lang::String> inTables) { return call_method<SCAPIX_META_STRING("setTables"), void>(inTables); }
inline void SQLiteQueryBuilder::appendWhere(ref<java::lang::CharSequence> inWhere) { return call_method<SCAPIX_META_STRING("appendWhere"), void>(inWhere); }
inline void SQLiteQueryBuilder::appendWhereEscapeString(ref<java::lang::String> inWhere) { return call_method<SCAPIX_META_STRING("appendWhereEscapeString"), void>(inWhere); }
inline void SQLiteQueryBuilder::setProjectionMap(ref<java::util::Map> columnMap) { return call_method<SCAPIX_META_STRING("setProjectionMap"), void>(columnMap); }
inline void SQLiteQueryBuilder::setCursorFactory(ref<android::database::sqlite::SQLiteDatabase_CursorFactory> factory) { return call_method<SCAPIX_META_STRING("setCursorFactory"), void>(factory); }
inline void SQLiteQueryBuilder::setStrict(jboolean flag) { return call_method<SCAPIX_META_STRING("setStrict"), void>(flag); }
inline ref<java::lang::String> SQLiteQueryBuilder::buildQueryString(jboolean distinct, ref<java::lang::String> tables, ref<link::java::array<java::lang::String>> columns, ref<java::lang::String> where, ref<java::lang::String> groupBy, ref<java::lang::String> having, ref<java::lang::String> orderBy, ref<java::lang::String> limit) { return call_static_method<SCAPIX_META_STRING("buildQueryString"), ref<java::lang::String>>(distinct, tables, columns, where, groupBy, having, orderBy, limit); }
inline void SQLiteQueryBuilder::appendColumns(ref<java::lang::StringBuilder> s, ref<link::java::array<java::lang::String>> columns) { return call_static_method<SCAPIX_META_STRING("appendColumns"), void>(s, columns); }
inline ref<android::database::Cursor> SQLiteQueryBuilder::query(ref<android::database::sqlite::SQLiteDatabase> db, ref<link::java::array<java::lang::String>> projectionIn, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> groupBy, ref<java::lang::String> having, ref<java::lang::String> sortOrder) { return call_method<SCAPIX_META_STRING("query"), ref<android::database::Cursor>>(db, projectionIn, selection, selectionArgs, groupBy, having, sortOrder); }
inline ref<android::database::Cursor> SQLiteQueryBuilder::query(ref<android::database::sqlite::SQLiteDatabase> db, ref<link::java::array<java::lang::String>> projectionIn, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> groupBy, ref<java::lang::String> having, ref<java::lang::String> sortOrder, ref<java::lang::String> limit) { return call_method<SCAPIX_META_STRING("query"), ref<android::database::Cursor>>(db, projectionIn, selection, selectionArgs, groupBy, having, sortOrder, limit); }
inline ref<android::database::Cursor> SQLiteQueryBuilder::query(ref<android::database::sqlite::SQLiteDatabase> db, ref<link::java::array<java::lang::String>> projectionIn, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> groupBy, ref<java::lang::String> having, ref<java::lang::String> sortOrder, ref<java::lang::String> limit, ref<android::os::CancellationSignal> cancellationSignal) { return call_method<SCAPIX_META_STRING("query"), ref<android::database::Cursor>>(db, projectionIn, selection, selectionArgs, groupBy, having, sortOrder, limit, cancellationSignal); }
inline ref<java::lang::String> SQLiteQueryBuilder::buildQuery(ref<link::java::array<java::lang::String>> projectionIn, ref<java::lang::String> selection, ref<java::lang::String> groupBy, ref<java::lang::String> having, ref<java::lang::String> sortOrder, ref<java::lang::String> limit) { return call_method<SCAPIX_META_STRING("buildQuery"), ref<java::lang::String>>(projectionIn, selection, groupBy, having, sortOrder, limit); }
inline ref<java::lang::String> SQLiteQueryBuilder::buildQuery(ref<link::java::array<java::lang::String>> projectionIn, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> groupBy, ref<java::lang::String> having, ref<java::lang::String> sortOrder, ref<java::lang::String> limit) { return call_method<SCAPIX_META_STRING("buildQuery"), ref<java::lang::String>>(projectionIn, selection, selectionArgs, groupBy, having, sortOrder, limit); }
inline ref<java::lang::String> SQLiteQueryBuilder::buildUnionSubQuery(ref<java::lang::String> typeDiscriminatorColumn, ref<link::java::array<java::lang::String>> unionColumns, ref<java::util::Set> columnsPresentInTable, jint computedColumnsOffset, ref<java::lang::String> typeDiscriminatorValue, ref<java::lang::String> selection, ref<java::lang::String> groupBy, ref<java::lang::String> having) { return call_method<SCAPIX_META_STRING("buildUnionSubQuery"), ref<java::lang::String>>(typeDiscriminatorColumn, unionColumns, columnsPresentInTable, computedColumnsOffset, typeDiscriminatorValue, selection, groupBy, having); }
inline ref<java::lang::String> SQLiteQueryBuilder::buildUnionSubQuery(ref<java::lang::String> typeDiscriminatorColumn, ref<link::java::array<java::lang::String>> unionColumns, ref<java::util::Set> columnsPresentInTable, jint computedColumnsOffset, ref<java::lang::String> typeDiscriminatorValue, ref<java::lang::String> selection, ref<link::java::array<java::lang::String>> selectionArgs, ref<java::lang::String> groupBy, ref<java::lang::String> having) { return call_method<SCAPIX_META_STRING("buildUnionSubQuery"), ref<java::lang::String>>(typeDiscriminatorColumn, unionColumns, columnsPresentInTable, computedColumnsOffset, typeDiscriminatorValue, selection, selectionArgs, groupBy, having); }
inline ref<java::lang::String> SQLiteQueryBuilder::buildUnionQuery(ref<link::java::array<java::lang::String>> subQueries, ref<java::lang::String> sortOrder, ref<java::lang::String> limit) { return call_method<SCAPIX_META_STRING("buildUnionQuery"), ref<java::lang::String>>(subQueries, sortOrder, limit); }

} // namespace android::database::sqlite
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_DATABASE_SQLITE_SQLITEQUERYBUILDER_H
