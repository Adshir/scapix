// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/database/AbstractCursor.h>

#ifndef SCAPIX_ANDROID_DATABASE_MATRIXCURSOR_H
#define SCAPIX_ANDROID_DATABASE_MATRIXCURSOR_H

namespace scapix::java_api {

namespace android::database { class MatrixCursor_RowBuilder; }
namespace java::lang { class Iterable; }
namespace java::lang { class Object; }
namespace java::lang { class String; }

namespace android::database {

class MatrixCursor : public object_base<SCAPIX_META_STRING("android/database/MatrixCursor"),
	android::database::AbstractCursor>
{
public:

	using RowBuilder = MatrixCursor_RowBuilder;

	static ref<MatrixCursor> new_object(ref<link::java::array<java::lang::String>> columnNames, jint initialCapacity);
	static ref<MatrixCursor> new_object(ref<link::java::array<java::lang::String>> columnNames);
	ref<android::database::MatrixCursor_RowBuilder> newRow();
	void addRow(ref<link::java::array<java::lang::Object>> columnValues);
	void addRow(ref<java::lang::Iterable> columnValues);
	jint getCount();
	ref<link::java::array<java::lang::String>> getColumnNames();
	ref<java::lang::String> getString(jint column);
	jshort getShort(jint column);
	jint getInt(jint column);
	jlong getLong(jint column);
	jfloat getFloat(jint column);
	jdouble getDouble(jint column);
	ref<link::java::array<jbyte>> getBlob(jint column);
	jint getType(jint column);
	jboolean isNull(jint column);

protected:

	MatrixCursor(handle_type h) : base_(h) {}

};

} // namespace android::database
} // namespace scapix::java_api

#include <scapix/java_api/android/database/MatrixCursor_RowBuilder.h>
#include <scapix/java_api/java/lang/Iterable.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace android::database {

inline ref<MatrixCursor> MatrixCursor::new_object(ref<link::java::array<java::lang::String>> columnNames, jint initialCapacity) { return base_::new_object(columnNames, initialCapacity); }
inline ref<MatrixCursor> MatrixCursor::new_object(ref<link::java::array<java::lang::String>> columnNames) { return base_::new_object(columnNames); }
inline ref<android::database::MatrixCursor_RowBuilder> MatrixCursor::newRow() { return call_method<SCAPIX_META_STRING("newRow"), ref<android::database::MatrixCursor_RowBuilder>>(); }
inline void MatrixCursor::addRow(ref<link::java::array<java::lang::Object>> columnValues) { return call_method<SCAPIX_META_STRING("addRow"), void>(columnValues); }
inline void MatrixCursor::addRow(ref<java::lang::Iterable> columnValues) { return call_method<SCAPIX_META_STRING("addRow"), void>(columnValues); }
inline jint MatrixCursor::getCount() { return call_method<SCAPIX_META_STRING("getCount"), jint>(); }
inline ref<link::java::array<java::lang::String>> MatrixCursor::getColumnNames() { return call_method<SCAPIX_META_STRING("getColumnNames"), ref<link::java::array<java::lang::String>>>(); }
inline ref<java::lang::String> MatrixCursor::getString(jint column) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(column); }
inline jshort MatrixCursor::getShort(jint column) { return call_method<SCAPIX_META_STRING("getShort"), jshort>(column); }
inline jint MatrixCursor::getInt(jint column) { return call_method<SCAPIX_META_STRING("getInt"), jint>(column); }
inline jlong MatrixCursor::getLong(jint column) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(column); }
inline jfloat MatrixCursor::getFloat(jint column) { return call_method<SCAPIX_META_STRING("getFloat"), jfloat>(column); }
inline jdouble MatrixCursor::getDouble(jint column) { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(column); }
inline ref<link::java::array<jbyte>> MatrixCursor::getBlob(jint column) { return call_method<SCAPIX_META_STRING("getBlob"), ref<link::java::array<jbyte>>>(column); }
inline jint MatrixCursor::getType(jint column) { return call_method<SCAPIX_META_STRING("getType"), jint>(column); }
inline jboolean MatrixCursor::isNull(jint column) { return call_method<SCAPIX_META_STRING("isNull"), jboolean>(column); }

} // namespace android::database
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_DATABASE_MATRIXCURSOR_H
