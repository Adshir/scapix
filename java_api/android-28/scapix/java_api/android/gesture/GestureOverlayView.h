// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/android/widget/FrameLayout.h>

#ifndef SCAPIX_ANDROID_GESTURE_GESTUREOVERLAYVIEW_H
#define SCAPIX_ANDROID_GESTURE_GESTUREOVERLAYVIEW_H

namespace scapix::java_api {

namespace android::content { class Context; }
namespace android::gesture { class Gesture; }
namespace android::gesture { class GestureOverlayView_OnGestureListener; }
namespace android::gesture { class GestureOverlayView_OnGesturePerformedListener; }
namespace android::gesture { class GestureOverlayView_OnGesturingListener; }
namespace android::graphics { class Canvas; }
namespace android::graphics { class Path; }
namespace android::util { class AttributeSet; }
namespace android::view { class MotionEvent; }
namespace java::util { class ArrayList; }

namespace android::gesture {

class GestureOverlayView : public object_base<SCAPIX_META_STRING("android/gesture/GestureOverlayView"),
	android::widget::FrameLayout>
{
public:

	using OnGesturingListener = GestureOverlayView_OnGesturingListener;
	using OnGesturePerformedListener = GestureOverlayView_OnGesturePerformedListener;
	using OnGestureListener = GestureOverlayView_OnGestureListener;

	static jint GESTURE_STROKE_TYPE_MULTIPLE_();
	static jint GESTURE_STROKE_TYPE_SINGLE_();
	static jint ORIENTATION_HORIZONTAL_();
	static jint ORIENTATION_VERTICAL_();

	static ref<GestureOverlayView> new_object(ref<android::content::Context> context);
	static ref<GestureOverlayView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs);
	static ref<GestureOverlayView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr);
	static ref<GestureOverlayView> new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes);
	ref<java::util::ArrayList> getCurrentStroke();
	jint getOrientation();
	void setOrientation(jint orientation);
	void setGestureColor(jint color);
	void setUncertainGestureColor(jint color);
	jint getUncertainGestureColor();
	jint getGestureColor();
	jfloat getGestureStrokeWidth();
	void setGestureStrokeWidth(jfloat gestureStrokeWidth);
	jint getGestureStrokeType();
	void setGestureStrokeType(jint gestureStrokeType);
	jfloat getGestureStrokeLengthThreshold();
	void setGestureStrokeLengthThreshold(jfloat gestureStrokeLengthThreshold);
	jfloat getGestureStrokeSquarenessTreshold();
	void setGestureStrokeSquarenessTreshold(jfloat gestureStrokeSquarenessTreshold);
	jfloat getGestureStrokeAngleThreshold();
	void setGestureStrokeAngleThreshold(jfloat gestureStrokeAngleThreshold);
	jboolean isEventsInterceptionEnabled();
	void setEventsInterceptionEnabled(jboolean enabled);
	jboolean isFadeEnabled();
	void setFadeEnabled(jboolean fadeEnabled);
	ref<android::gesture::Gesture> getGesture();
	void setGesture(ref<android::gesture::Gesture> gesture);
	ref<android::graphics::Path> getGesturePath();
	ref<android::graphics::Path> getGesturePath(ref<android::graphics::Path> path);
	jboolean isGestureVisible();
	void setGestureVisible(jboolean visible);
	jlong getFadeOffset();
	void setFadeOffset(jlong fadeOffset);
	void addOnGestureListener(ref<android::gesture::GestureOverlayView_OnGestureListener> listener);
	void removeOnGestureListener(ref<android::gesture::GestureOverlayView_OnGestureListener> listener);
	void removeAllOnGestureListeners();
	void addOnGesturePerformedListener(ref<android::gesture::GestureOverlayView_OnGesturePerformedListener> listener);
	void removeOnGesturePerformedListener(ref<android::gesture::GestureOverlayView_OnGesturePerformedListener> listener);
	void removeAllOnGesturePerformedListeners();
	void addOnGesturingListener(ref<android::gesture::GestureOverlayView_OnGesturingListener> listener);
	void removeOnGesturingListener(ref<android::gesture::GestureOverlayView_OnGesturingListener> listener);
	void removeAllOnGesturingListeners();
	jboolean isGesturing();
	void draw(ref<android::graphics::Canvas> canvas);
	void clear(jboolean animated);
	void cancelClearAnimation();
	void cancelGesture();
	jboolean dispatchTouchEvent(ref<android::view::MotionEvent> event);

protected:

	GestureOverlayView(handle_type h) : base_(h) {}

};

} // namespace android::gesture
} // namespace scapix::java_api

#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/gesture/Gesture.h>
#include <scapix/java_api/android/gesture/GestureOverlayView_OnGestureListener.h>
#include <scapix/java_api/android/gesture/GestureOverlayView_OnGesturePerformedListener.h>
#include <scapix/java_api/android/gesture/GestureOverlayView_OnGesturingListener.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Path.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/java/util/ArrayList.h>

namespace scapix::java_api {
namespace android::gesture {

inline jint GestureOverlayView::GESTURE_STROKE_TYPE_MULTIPLE_() { return get_static_field<SCAPIX_META_STRING("GESTURE_STROKE_TYPE_MULTIPLE"), jint>(); }
inline jint GestureOverlayView::GESTURE_STROKE_TYPE_SINGLE_() { return get_static_field<SCAPIX_META_STRING("GESTURE_STROKE_TYPE_SINGLE"), jint>(); }
inline jint GestureOverlayView::ORIENTATION_HORIZONTAL_() { return get_static_field<SCAPIX_META_STRING("ORIENTATION_HORIZONTAL"), jint>(); }
inline jint GestureOverlayView::ORIENTATION_VERTICAL_() { return get_static_field<SCAPIX_META_STRING("ORIENTATION_VERTICAL"), jint>(); }
inline ref<GestureOverlayView> GestureOverlayView::new_object(ref<android::content::Context> context) { return base_::new_object(context); }
inline ref<GestureOverlayView> GestureOverlayView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
inline ref<GestureOverlayView> GestureOverlayView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
inline ref<GestureOverlayView> GestureOverlayView::new_object(ref<android::content::Context> context, ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
inline ref<java::util::ArrayList> GestureOverlayView::getCurrentStroke() { return call_method<SCAPIX_META_STRING("getCurrentStroke"), ref<java::util::ArrayList>>(); }
inline jint GestureOverlayView::getOrientation() { return call_method<SCAPIX_META_STRING("getOrientation"), jint>(); }
inline void GestureOverlayView::setOrientation(jint orientation) { return call_method<SCAPIX_META_STRING("setOrientation"), void>(orientation); }
inline void GestureOverlayView::setGestureColor(jint color) { return call_method<SCAPIX_META_STRING("setGestureColor"), void>(color); }
inline void GestureOverlayView::setUncertainGestureColor(jint color) { return call_method<SCAPIX_META_STRING("setUncertainGestureColor"), void>(color); }
inline jint GestureOverlayView::getUncertainGestureColor() { return call_method<SCAPIX_META_STRING("getUncertainGestureColor"), jint>(); }
inline jint GestureOverlayView::getGestureColor() { return call_method<SCAPIX_META_STRING("getGestureColor"), jint>(); }
inline jfloat GestureOverlayView::getGestureStrokeWidth() { return call_method<SCAPIX_META_STRING("getGestureStrokeWidth"), jfloat>(); }
inline void GestureOverlayView::setGestureStrokeWidth(jfloat gestureStrokeWidth) { return call_method<SCAPIX_META_STRING("setGestureStrokeWidth"), void>(gestureStrokeWidth); }
inline jint GestureOverlayView::getGestureStrokeType() { return call_method<SCAPIX_META_STRING("getGestureStrokeType"), jint>(); }
inline void GestureOverlayView::setGestureStrokeType(jint gestureStrokeType) { return call_method<SCAPIX_META_STRING("setGestureStrokeType"), void>(gestureStrokeType); }
inline jfloat GestureOverlayView::getGestureStrokeLengthThreshold() { return call_method<SCAPIX_META_STRING("getGestureStrokeLengthThreshold"), jfloat>(); }
inline void GestureOverlayView::setGestureStrokeLengthThreshold(jfloat gestureStrokeLengthThreshold) { return call_method<SCAPIX_META_STRING("setGestureStrokeLengthThreshold"), void>(gestureStrokeLengthThreshold); }
inline jfloat GestureOverlayView::getGestureStrokeSquarenessTreshold() { return call_method<SCAPIX_META_STRING("getGestureStrokeSquarenessTreshold"), jfloat>(); }
inline void GestureOverlayView::setGestureStrokeSquarenessTreshold(jfloat gestureStrokeSquarenessTreshold) { return call_method<SCAPIX_META_STRING("setGestureStrokeSquarenessTreshold"), void>(gestureStrokeSquarenessTreshold); }
inline jfloat GestureOverlayView::getGestureStrokeAngleThreshold() { return call_method<SCAPIX_META_STRING("getGestureStrokeAngleThreshold"), jfloat>(); }
inline void GestureOverlayView::setGestureStrokeAngleThreshold(jfloat gestureStrokeAngleThreshold) { return call_method<SCAPIX_META_STRING("setGestureStrokeAngleThreshold"), void>(gestureStrokeAngleThreshold); }
inline jboolean GestureOverlayView::isEventsInterceptionEnabled() { return call_method<SCAPIX_META_STRING("isEventsInterceptionEnabled"), jboolean>(); }
inline void GestureOverlayView::setEventsInterceptionEnabled(jboolean enabled) { return call_method<SCAPIX_META_STRING("setEventsInterceptionEnabled"), void>(enabled); }
inline jboolean GestureOverlayView::isFadeEnabled() { return call_method<SCAPIX_META_STRING("isFadeEnabled"), jboolean>(); }
inline void GestureOverlayView::setFadeEnabled(jboolean fadeEnabled) { return call_method<SCAPIX_META_STRING("setFadeEnabled"), void>(fadeEnabled); }
inline ref<android::gesture::Gesture> GestureOverlayView::getGesture() { return call_method<SCAPIX_META_STRING("getGesture"), ref<android::gesture::Gesture>>(); }
inline void GestureOverlayView::setGesture(ref<android::gesture::Gesture> gesture) { return call_method<SCAPIX_META_STRING("setGesture"), void>(gesture); }
inline ref<android::graphics::Path> GestureOverlayView::getGesturePath() { return call_method<SCAPIX_META_STRING("getGesturePath"), ref<android::graphics::Path>>(); }
inline ref<android::graphics::Path> GestureOverlayView::getGesturePath(ref<android::graphics::Path> path) { return call_method<SCAPIX_META_STRING("getGesturePath"), ref<android::graphics::Path>>(path); }
inline jboolean GestureOverlayView::isGestureVisible() { return call_method<SCAPIX_META_STRING("isGestureVisible"), jboolean>(); }
inline void GestureOverlayView::setGestureVisible(jboolean visible) { return call_method<SCAPIX_META_STRING("setGestureVisible"), void>(visible); }
inline jlong GestureOverlayView::getFadeOffset() { return call_method<SCAPIX_META_STRING("getFadeOffset"), jlong>(); }
inline void GestureOverlayView::setFadeOffset(jlong fadeOffset) { return call_method<SCAPIX_META_STRING("setFadeOffset"), void>(fadeOffset); }
inline void GestureOverlayView::addOnGestureListener(ref<android::gesture::GestureOverlayView_OnGestureListener> listener) { return call_method<SCAPIX_META_STRING("addOnGestureListener"), void>(listener); }
inline void GestureOverlayView::removeOnGestureListener(ref<android::gesture::GestureOverlayView_OnGestureListener> listener) { return call_method<SCAPIX_META_STRING("removeOnGestureListener"), void>(listener); }
inline void GestureOverlayView::removeAllOnGestureListeners() { return call_method<SCAPIX_META_STRING("removeAllOnGestureListeners"), void>(); }
inline void GestureOverlayView::addOnGesturePerformedListener(ref<android::gesture::GestureOverlayView_OnGesturePerformedListener> listener) { return call_method<SCAPIX_META_STRING("addOnGesturePerformedListener"), void>(listener); }
inline void GestureOverlayView::removeOnGesturePerformedListener(ref<android::gesture::GestureOverlayView_OnGesturePerformedListener> listener) { return call_method<SCAPIX_META_STRING("removeOnGesturePerformedListener"), void>(listener); }
inline void GestureOverlayView::removeAllOnGesturePerformedListeners() { return call_method<SCAPIX_META_STRING("removeAllOnGesturePerformedListeners"), void>(); }
inline void GestureOverlayView::addOnGesturingListener(ref<android::gesture::GestureOverlayView_OnGesturingListener> listener) { return call_method<SCAPIX_META_STRING("addOnGesturingListener"), void>(listener); }
inline void GestureOverlayView::removeOnGesturingListener(ref<android::gesture::GestureOverlayView_OnGesturingListener> listener) { return call_method<SCAPIX_META_STRING("removeOnGesturingListener"), void>(listener); }
inline void GestureOverlayView::removeAllOnGesturingListeners() { return call_method<SCAPIX_META_STRING("removeAllOnGesturingListeners"), void>(); }
inline jboolean GestureOverlayView::isGesturing() { return call_method<SCAPIX_META_STRING("isGesturing"), jboolean>(); }
inline void GestureOverlayView::draw(ref<android::graphics::Canvas> canvas) { return call_method<SCAPIX_META_STRING("draw"), void>(canvas); }
inline void GestureOverlayView::clear(jboolean animated) { return call_method<SCAPIX_META_STRING("clear"), void>(animated); }
inline void GestureOverlayView::cancelClearAnimation() { return call_method<SCAPIX_META_STRING("cancelClearAnimation"), void>(); }
inline void GestureOverlayView::cancelGesture() { return call_method<SCAPIX_META_STRING("cancelGesture"), void>(); }
inline jboolean GestureOverlayView::dispatchTouchEvent(ref<android::view::MotionEvent> event) { return call_method<SCAPIX_META_STRING("dispatchTouchEvent"), jboolean>(event); }

} // namespace android::gesture
} // namespace scapix::java_api

#endif // SCAPIX_ANDROID_GESTURE_GESTUREOVERLAYVIEW_H
