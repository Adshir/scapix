// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ORG_JSON_JSONTOKENER_H
#define SCAPIX_ORG_JSON_JSONTOKENER_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace org::json { class JSONException; }

namespace org::json {

class JSONTokener : public object_base<SCAPIX_META_STRING("org/json/JSONTokener"),
	java::lang::Object>
{
public:

	static ref<JSONTokener> new_object(ref<java::lang::String> in);
	ref<java::lang::Object> nextValue();
	ref<java::lang::String> nextString(jchar quote);
	ref<org::json::JSONException> syntaxError(ref<java::lang::String> message);
	ref<java::lang::String> toString();
	jboolean more();
	jchar next();
	jchar next(jchar c);
	jchar nextClean();
	ref<java::lang::String> next(jint length);
	ref<java::lang::String> nextTo(ref<java::lang::String> excluded);
	ref<java::lang::String> nextTo(jchar excluded);
	void skipPast(ref<java::lang::String> thru);
	jchar skipTo(jchar to);
	void back();
	static jint dehexchar(jchar hex);

protected:

	JSONTokener(handle_type h) : base_(h) {}

};

} // namespace org::json
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/json/JSONException.h>

namespace scapix::java_api {
namespace org::json {

inline ref<JSONTokener> JSONTokener::new_object(ref<java::lang::String> in) { return base_::new_object(in); }
inline ref<java::lang::Object> JSONTokener::nextValue() { return call_method<SCAPIX_META_STRING("nextValue"), ref<java::lang::Object>>(); }
inline ref<java::lang::String> JSONTokener::nextString(jchar quote) { return call_method<SCAPIX_META_STRING("nextString"), ref<java::lang::String>>(quote); }
inline ref<org::json::JSONException> JSONTokener::syntaxError(ref<java::lang::String> message) { return call_method<SCAPIX_META_STRING("syntaxError"), ref<org::json::JSONException>>(message); }
inline ref<java::lang::String> JSONTokener::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline jboolean JSONTokener::more() { return call_method<SCAPIX_META_STRING("more"), jboolean>(); }
inline jchar JSONTokener::next() { return call_method<SCAPIX_META_STRING("next"), jchar>(); }
inline jchar JSONTokener::next(jchar c) { return call_method<SCAPIX_META_STRING("next"), jchar>(c); }
inline jchar JSONTokener::nextClean() { return call_method<SCAPIX_META_STRING("nextClean"), jchar>(); }
inline ref<java::lang::String> JSONTokener::next(jint length) { return call_method<SCAPIX_META_STRING("next"), ref<java::lang::String>>(length); }
inline ref<java::lang::String> JSONTokener::nextTo(ref<java::lang::String> excluded) { return call_method<SCAPIX_META_STRING("nextTo"), ref<java::lang::String>>(excluded); }
inline ref<java::lang::String> JSONTokener::nextTo(jchar excluded) { return call_method<SCAPIX_META_STRING("nextTo"), ref<java::lang::String>>(excluded); }
inline void JSONTokener::skipPast(ref<java::lang::String> thru) { return call_method<SCAPIX_META_STRING("skipPast"), void>(thru); }
inline jchar JSONTokener::skipTo(jchar to) { return call_method<SCAPIX_META_STRING("skipTo"), jchar>(to); }
inline void JSONTokener::back() { return call_method<SCAPIX_META_STRING("back"), void>(); }
inline jint JSONTokener::dehexchar(jchar hex) { return call_static_method<SCAPIX_META_STRING("dehexchar"), jint>(hex); }

} // namespace org::json
} // namespace scapix::java_api

#endif // SCAPIX_ORG_JSON_JSONTOKENER_H
