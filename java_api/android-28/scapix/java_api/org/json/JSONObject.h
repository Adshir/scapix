// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ORG_JSON_JSONOBJECT_H
#define SCAPIX_ORG_JSON_JSONOBJECT_H

namespace scapix::java_api {

namespace java::lang { class Number; }
namespace java::lang { class String; }
namespace java::util { class Iterator; }
namespace java::util { class Map; }
namespace org::json { class JSONArray; }
namespace org::json { class JSONTokener; }

namespace org::json {

class JSONObject : public object_base<SCAPIX_META_STRING("org/json/JSONObject"),
	java::lang::Object>
{
public:

	static ref<java::lang::Object> NULL_();

	static ref<JSONObject> new_object();
	static ref<JSONObject> new_object(ref<java::util::Map> copyFrom);
	static ref<JSONObject> new_object(ref<org::json::JSONTokener> readFrom);
	static ref<JSONObject> new_object(ref<java::lang::String> json);
	static ref<JSONObject> new_object(ref<org::json::JSONObject> copyFrom, ref<link::java::array<java::lang::String>> names);
	jint length();
	ref<org::json::JSONObject> put(ref<java::lang::String> name, jboolean value);
	ref<org::json::JSONObject> put(ref<java::lang::String> name, jdouble value);
	ref<org::json::JSONObject> put(ref<java::lang::String> name, jint value);
	ref<org::json::JSONObject> put(ref<java::lang::String> name, jlong value);
	ref<org::json::JSONObject> put(ref<java::lang::String> name, ref<java::lang::Object> value);
	ref<org::json::JSONObject> putOpt(ref<java::lang::String> name, ref<java::lang::Object> value);
	ref<org::json::JSONObject> accumulate(ref<java::lang::String> name, ref<java::lang::Object> value);
	ref<java::lang::Object> remove(ref<java::lang::String> name);
	jboolean isNull(ref<java::lang::String> name);
	jboolean has(ref<java::lang::String> name);
	ref<java::lang::Object> get(ref<java::lang::String> name);
	ref<java::lang::Object> opt(ref<java::lang::String> name);
	jboolean getBoolean(ref<java::lang::String> name);
	jboolean optBoolean(ref<java::lang::String> name);
	jboolean optBoolean(ref<java::lang::String> name, jboolean fallback);
	jdouble getDouble(ref<java::lang::String> name);
	jdouble optDouble(ref<java::lang::String> name);
	jdouble optDouble(ref<java::lang::String> name, jdouble fallback);
	jint getInt(ref<java::lang::String> name);
	jint optInt(ref<java::lang::String> name);
	jint optInt(ref<java::lang::String> name, jint fallback);
	jlong getLong(ref<java::lang::String> name);
	jlong optLong(ref<java::lang::String> name);
	jlong optLong(ref<java::lang::String> name, jlong fallback);
	ref<java::lang::String> getString(ref<java::lang::String> name);
	ref<java::lang::String> optString(ref<java::lang::String> name);
	ref<java::lang::String> optString(ref<java::lang::String> name, ref<java::lang::String> fallback);
	ref<org::json::JSONArray> getJSONArray(ref<java::lang::String> name);
	ref<org::json::JSONArray> optJSONArray(ref<java::lang::String> name);
	ref<org::json::JSONObject> getJSONObject(ref<java::lang::String> name);
	ref<org::json::JSONObject> optJSONObject(ref<java::lang::String> name);
	ref<org::json::JSONArray> toJSONArray(ref<org::json::JSONArray> names);
	ref<java::util::Iterator> keys();
	ref<org::json::JSONArray> names();
	ref<java::lang::String> toString();
	ref<java::lang::String> toString(jint indentSpaces);
	static ref<java::lang::String> numberToString(ref<java::lang::Number> number);
	static ref<java::lang::String> quote(ref<java::lang::String> data);
	static ref<java::lang::Object> wrap(ref<java::lang::Object> o);

protected:

	JSONObject(handle_type h) : base_(h) {}

};

} // namespace org::json
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/org/json/JSONArray.h>
#include <scapix/java_api/org/json/JSONTokener.h>

namespace scapix::java_api {
namespace org::json {

inline ref<java::lang::Object> JSONObject::NULL_() { return get_static_field<SCAPIX_META_STRING("NULL"), ref<java::lang::Object>>(); }
inline ref<JSONObject> JSONObject::new_object() { return base_::new_object(); }
inline ref<JSONObject> JSONObject::new_object(ref<java::util::Map> copyFrom) { return base_::new_object(copyFrom); }
inline ref<JSONObject> JSONObject::new_object(ref<org::json::JSONTokener> readFrom) { return base_::new_object(readFrom); }
inline ref<JSONObject> JSONObject::new_object(ref<java::lang::String> json) { return base_::new_object(json); }
inline ref<JSONObject> JSONObject::new_object(ref<org::json::JSONObject> copyFrom, ref<link::java::array<java::lang::String>> names) { return base_::new_object(copyFrom, names); }
inline jint JSONObject::length() { return call_method<SCAPIX_META_STRING("length"), jint>(); }
inline ref<org::json::JSONObject> JSONObject::put(ref<java::lang::String> name, jboolean value) { return call_method<SCAPIX_META_STRING("put"), ref<org::json::JSONObject>>(name, value); }
inline ref<org::json::JSONObject> JSONObject::put(ref<java::lang::String> name, jdouble value) { return call_method<SCAPIX_META_STRING("put"), ref<org::json::JSONObject>>(name, value); }
inline ref<org::json::JSONObject> JSONObject::put(ref<java::lang::String> name, jint value) { return call_method<SCAPIX_META_STRING("put"), ref<org::json::JSONObject>>(name, value); }
inline ref<org::json::JSONObject> JSONObject::put(ref<java::lang::String> name, jlong value) { return call_method<SCAPIX_META_STRING("put"), ref<org::json::JSONObject>>(name, value); }
inline ref<org::json::JSONObject> JSONObject::put(ref<java::lang::String> name, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("put"), ref<org::json::JSONObject>>(name, value); }
inline ref<org::json::JSONObject> JSONObject::putOpt(ref<java::lang::String> name, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("putOpt"), ref<org::json::JSONObject>>(name, value); }
inline ref<org::json::JSONObject> JSONObject::accumulate(ref<java::lang::String> name, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("accumulate"), ref<org::json::JSONObject>>(name, value); }
inline ref<java::lang::Object> JSONObject::remove(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("remove"), ref<java::lang::Object>>(name); }
inline jboolean JSONObject::isNull(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("isNull"), jboolean>(name); }
inline jboolean JSONObject::has(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("has"), jboolean>(name); }
inline ref<java::lang::Object> JSONObject::get(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("get"), ref<java::lang::Object>>(name); }
inline ref<java::lang::Object> JSONObject::opt(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("opt"), ref<java::lang::Object>>(name); }
inline jboolean JSONObject::getBoolean(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getBoolean"), jboolean>(name); }
inline jboolean JSONObject::optBoolean(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("optBoolean"), jboolean>(name); }
inline jboolean JSONObject::optBoolean(ref<java::lang::String> name, jboolean fallback) { return call_method<SCAPIX_META_STRING("optBoolean"), jboolean>(name, fallback); }
inline jdouble JSONObject::getDouble(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getDouble"), jdouble>(name); }
inline jdouble JSONObject::optDouble(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("optDouble"), jdouble>(name); }
inline jdouble JSONObject::optDouble(ref<java::lang::String> name, jdouble fallback) { return call_method<SCAPIX_META_STRING("optDouble"), jdouble>(name, fallback); }
inline jint JSONObject::getInt(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getInt"), jint>(name); }
inline jint JSONObject::optInt(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("optInt"), jint>(name); }
inline jint JSONObject::optInt(ref<java::lang::String> name, jint fallback) { return call_method<SCAPIX_META_STRING("optInt"), jint>(name, fallback); }
inline jlong JSONObject::getLong(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getLong"), jlong>(name); }
inline jlong JSONObject::optLong(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("optLong"), jlong>(name); }
inline jlong JSONObject::optLong(ref<java::lang::String> name, jlong fallback) { return call_method<SCAPIX_META_STRING("optLong"), jlong>(name, fallback); }
inline ref<java::lang::String> JSONObject::getString(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getString"), ref<java::lang::String>>(name); }
inline ref<java::lang::String> JSONObject::optString(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("optString"), ref<java::lang::String>>(name); }
inline ref<java::lang::String> JSONObject::optString(ref<java::lang::String> name, ref<java::lang::String> fallback) { return call_method<SCAPIX_META_STRING("optString"), ref<java::lang::String>>(name, fallback); }
inline ref<org::json::JSONArray> JSONObject::getJSONArray(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getJSONArray"), ref<org::json::JSONArray>>(name); }
inline ref<org::json::JSONArray> JSONObject::optJSONArray(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("optJSONArray"), ref<org::json::JSONArray>>(name); }
inline ref<org::json::JSONObject> JSONObject::getJSONObject(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getJSONObject"), ref<org::json::JSONObject>>(name); }
inline ref<org::json::JSONObject> JSONObject::optJSONObject(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("optJSONObject"), ref<org::json::JSONObject>>(name); }
inline ref<org::json::JSONArray> JSONObject::toJSONArray(ref<org::json::JSONArray> names) { return call_method<SCAPIX_META_STRING("toJSONArray"), ref<org::json::JSONArray>>(names); }
inline ref<java::util::Iterator> JSONObject::keys() { return call_method<SCAPIX_META_STRING("keys"), ref<java::util::Iterator>>(); }
inline ref<org::json::JSONArray> JSONObject::names() { return call_method<SCAPIX_META_STRING("names"), ref<org::json::JSONArray>>(); }
inline ref<java::lang::String> JSONObject::toString() { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(); }
inline ref<java::lang::String> JSONObject::toString(jint indentSpaces) { return call_method<SCAPIX_META_STRING("toString"), ref<java::lang::String>>(indentSpaces); }
inline ref<java::lang::String> JSONObject::numberToString(ref<java::lang::Number> number) { return call_static_method<SCAPIX_META_STRING("numberToString"), ref<java::lang::String>>(number); }
inline ref<java::lang::String> JSONObject::quote(ref<java::lang::String> data) { return call_static_method<SCAPIX_META_STRING("quote"), ref<java::lang::String>>(data); }
inline ref<java::lang::Object> JSONObject::wrap(ref<java::lang::Object> o) { return call_static_method<SCAPIX_META_STRING("wrap"), ref<java::lang::Object>>(o); }

} // namespace org::json
} // namespace scapix::java_api

#endif // SCAPIX_ORG_JSON_JSONOBJECT_H
