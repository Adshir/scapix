// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ORG_XML_SAX_HELPERS_NAMESPACESUPPORT_H
#define SCAPIX_ORG_XML_SAX_HELPERS_NAMESPACESUPPORT_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::util { class Enumeration; }

namespace org::xml::sax::helpers {

class NamespaceSupport : public object_base<SCAPIX_META_STRING("org/xml/sax/helpers/NamespaceSupport"),
	java::lang::Object>
{
public:

	static ref<java::lang::String> NSDECL_();
	static ref<java::lang::String> XMLNS_();

	static ref<NamespaceSupport> new_object();
	void reset();
	void pushContext();
	void popContext();
	jboolean declarePrefix(ref<java::lang::String> prefix, ref<java::lang::String> uri);
	ref<link::java::array<java::lang::String>> processName(ref<java::lang::String> qName, ref<link::java::array<java::lang::String>> parts, jboolean isAttribute);
	ref<java::lang::String> getURI(ref<java::lang::String> prefix);
	ref<java::util::Enumeration> getPrefixes();
	ref<java::lang::String> getPrefix(ref<java::lang::String> uri);
	ref<java::util::Enumeration> getPrefixes(ref<java::lang::String> uri);
	ref<java::util::Enumeration> getDeclaredPrefixes();
	void setNamespaceDeclUris(jboolean value);
	jboolean isNamespaceDeclUris();

protected:

	NamespaceSupport(handle_type h) : base_(h) {}

};

} // namespace org::xml::sax::helpers
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Enumeration.h>

namespace scapix::java_api {
namespace org::xml::sax::helpers {

inline ref<java::lang::String> NamespaceSupport::NSDECL_() { return get_static_field<SCAPIX_META_STRING("NSDECL"), ref<java::lang::String>>(); }
inline ref<java::lang::String> NamespaceSupport::XMLNS_() { return get_static_field<SCAPIX_META_STRING("XMLNS"), ref<java::lang::String>>(); }
inline ref<NamespaceSupport> NamespaceSupport::new_object() { return base_::new_object(); }
inline void NamespaceSupport::reset() { return call_method<SCAPIX_META_STRING("reset"), void>(); }
inline void NamespaceSupport::pushContext() { return call_method<SCAPIX_META_STRING("pushContext"), void>(); }
inline void NamespaceSupport::popContext() { return call_method<SCAPIX_META_STRING("popContext"), void>(); }
inline jboolean NamespaceSupport::declarePrefix(ref<java::lang::String> prefix, ref<java::lang::String> uri) { return call_method<SCAPIX_META_STRING("declarePrefix"), jboolean>(prefix, uri); }
inline ref<link::java::array<java::lang::String>> NamespaceSupport::processName(ref<java::lang::String> qName, ref<link::java::array<java::lang::String>> parts, jboolean isAttribute) { return call_method<SCAPIX_META_STRING("processName"), ref<link::java::array<java::lang::String>>>(qName, parts, isAttribute); }
inline ref<java::lang::String> NamespaceSupport::getURI(ref<java::lang::String> prefix) { return call_method<SCAPIX_META_STRING("getURI"), ref<java::lang::String>>(prefix); }
inline ref<java::util::Enumeration> NamespaceSupport::getPrefixes() { return call_method<SCAPIX_META_STRING("getPrefixes"), ref<java::util::Enumeration>>(); }
inline ref<java::lang::String> NamespaceSupport::getPrefix(ref<java::lang::String> uri) { return call_method<SCAPIX_META_STRING("getPrefix"), ref<java::lang::String>>(uri); }
inline ref<java::util::Enumeration> NamespaceSupport::getPrefixes(ref<java::lang::String> uri) { return call_method<SCAPIX_META_STRING("getPrefixes"), ref<java::util::Enumeration>>(uri); }
inline ref<java::util::Enumeration> NamespaceSupport::getDeclaredPrefixes() { return call_method<SCAPIX_META_STRING("getDeclaredPrefixes"), ref<java::util::Enumeration>>(); }
inline void NamespaceSupport::setNamespaceDeclUris(jboolean value) { return call_method<SCAPIX_META_STRING("setNamespaceDeclUris"), void>(value); }
inline jboolean NamespaceSupport::isNamespaceDeclUris() { return call_method<SCAPIX_META_STRING("isNamespaceDeclUris"), jboolean>(); }

} // namespace org::xml::sax::helpers
} // namespace scapix::java_api

#endif // SCAPIX_ORG_XML_SAX_HELPERS_NAMESPACESUPPORT_H
