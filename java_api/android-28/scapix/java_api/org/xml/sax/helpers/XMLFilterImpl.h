// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/xml/sax/XMLFilter.h>
#include <scapix/java_api/org/xml/sax/EntityResolver.h>
#include <scapix/java_api/org/xml/sax/DTDHandler.h>
#include <scapix/java_api/org/xml/sax/ContentHandler.h>
#include <scapix/java_api/org/xml/sax/ErrorHandler.h>

#ifndef SCAPIX_ORG_XML_SAX_HELPERS_XMLFILTERIMPL_H
#define SCAPIX_ORG_XML_SAX_HELPERS_XMLFILTERIMPL_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace org::xml::sax { class Attributes; }
namespace org::xml::sax { class InputSource; }
namespace org::xml::sax { class Locator; }
namespace org::xml::sax { class SAXParseException; }
namespace org::xml::sax { class XMLReader; }

namespace org::xml::sax::helpers {

class XMLFilterImpl : public object_base<SCAPIX_META_STRING("org/xml/sax/helpers/XMLFilterImpl"),
	java::lang::Object,
	org::xml::sax::XMLFilter,
	org::xml::sax::EntityResolver,
	org::xml::sax::DTDHandler,
	org::xml::sax::ContentHandler,
	org::xml::sax::ErrorHandler>
{
public:

	static ref<XMLFilterImpl> new_object();
	static ref<XMLFilterImpl> new_object(ref<org::xml::sax::XMLReader> parent);
	void setParent(ref<org::xml::sax::XMLReader> parent);
	ref<org::xml::sax::XMLReader> getParent();
	void setFeature(ref<java::lang::String> name, jboolean value);
	jboolean getFeature(ref<java::lang::String> name);
	void setProperty(ref<java::lang::String> name, ref<java::lang::Object> value);
	ref<java::lang::Object> getProperty(ref<java::lang::String> name);
	void setEntityResolver(ref<org::xml::sax::EntityResolver> resolver);
	ref<org::xml::sax::EntityResolver> getEntityResolver();
	void setDTDHandler(ref<org::xml::sax::DTDHandler> handler);
	ref<org::xml::sax::DTDHandler> getDTDHandler();
	void setContentHandler(ref<org::xml::sax::ContentHandler> handler);
	ref<org::xml::sax::ContentHandler> getContentHandler();
	void setErrorHandler(ref<org::xml::sax::ErrorHandler> handler);
	ref<org::xml::sax::ErrorHandler> getErrorHandler();
	void parse(ref<org::xml::sax::InputSource> input);
	void parse(ref<java::lang::String> systemId);
	ref<org::xml::sax::InputSource> resolveEntity(ref<java::lang::String> publicId, ref<java::lang::String> systemId);
	void notationDecl(ref<java::lang::String> name, ref<java::lang::String> publicId, ref<java::lang::String> systemId);
	void unparsedEntityDecl(ref<java::lang::String> name, ref<java::lang::String> publicId, ref<java::lang::String> systemId, ref<java::lang::String> notationName);
	void setDocumentLocator(ref<org::xml::sax::Locator> locator);
	void startDocument();
	void endDocument();
	void startPrefixMapping(ref<java::lang::String> prefix, ref<java::lang::String> uri);
	void endPrefixMapping(ref<java::lang::String> prefix);
	void startElement(ref<java::lang::String> uri, ref<java::lang::String> localName, ref<java::lang::String> qName, ref<org::xml::sax::Attributes> atts);
	void endElement(ref<java::lang::String> uri, ref<java::lang::String> localName, ref<java::lang::String> qName);
	void characters(ref<link::java::array<jchar>> ch, jint start, jint length);
	void ignorableWhitespace(ref<link::java::array<jchar>> ch, jint start, jint length);
	void processingInstruction(ref<java::lang::String> target, ref<java::lang::String> data);
	void skippedEntity(ref<java::lang::String> name);
	void warning(ref<org::xml::sax::SAXParseException> e);
	void error(ref<org::xml::sax::SAXParseException> e);
	void fatalError(ref<org::xml::sax::SAXParseException> e);

protected:

	XMLFilterImpl(handle_type h) : base_(h) {}

};

} // namespace org::xml::sax::helpers
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/xml/sax/Attributes.h>
#include <scapix/java_api/org/xml/sax/InputSource.h>
#include <scapix/java_api/org/xml/sax/Locator.h>
#include <scapix/java_api/org/xml/sax/SAXParseException.h>
#include <scapix/java_api/org/xml/sax/XMLReader.h>

namespace scapix::java_api {
namespace org::xml::sax::helpers {

inline ref<XMLFilterImpl> XMLFilterImpl::new_object() { return base_::new_object(); }
inline ref<XMLFilterImpl> XMLFilterImpl::new_object(ref<org::xml::sax::XMLReader> parent) { return base_::new_object(parent); }
inline void XMLFilterImpl::setParent(ref<org::xml::sax::XMLReader> parent) { return call_method<SCAPIX_META_STRING("setParent"), void>(parent); }
inline ref<org::xml::sax::XMLReader> XMLFilterImpl::getParent() { return call_method<SCAPIX_META_STRING("getParent"), ref<org::xml::sax::XMLReader>>(); }
inline void XMLFilterImpl::setFeature(ref<java::lang::String> name, jboolean value) { return call_method<SCAPIX_META_STRING("setFeature"), void>(name, value); }
inline jboolean XMLFilterImpl::getFeature(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getFeature"), jboolean>(name); }
inline void XMLFilterImpl::setProperty(ref<java::lang::String> name, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("setProperty"), void>(name, value); }
inline ref<java::lang::Object> XMLFilterImpl::getProperty(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getProperty"), ref<java::lang::Object>>(name); }
inline void XMLFilterImpl::setEntityResolver(ref<org::xml::sax::EntityResolver> resolver) { return call_method<SCAPIX_META_STRING("setEntityResolver"), void>(resolver); }
inline ref<org::xml::sax::EntityResolver> XMLFilterImpl::getEntityResolver() { return call_method<SCAPIX_META_STRING("getEntityResolver"), ref<org::xml::sax::EntityResolver>>(); }
inline void XMLFilterImpl::setDTDHandler(ref<org::xml::sax::DTDHandler> handler) { return call_method<SCAPIX_META_STRING("setDTDHandler"), void>(handler); }
inline ref<org::xml::sax::DTDHandler> XMLFilterImpl::getDTDHandler() { return call_method<SCAPIX_META_STRING("getDTDHandler"), ref<org::xml::sax::DTDHandler>>(); }
inline void XMLFilterImpl::setContentHandler(ref<org::xml::sax::ContentHandler> handler) { return call_method<SCAPIX_META_STRING("setContentHandler"), void>(handler); }
inline ref<org::xml::sax::ContentHandler> XMLFilterImpl::getContentHandler() { return call_method<SCAPIX_META_STRING("getContentHandler"), ref<org::xml::sax::ContentHandler>>(); }
inline void XMLFilterImpl::setErrorHandler(ref<org::xml::sax::ErrorHandler> handler) { return call_method<SCAPIX_META_STRING("setErrorHandler"), void>(handler); }
inline ref<org::xml::sax::ErrorHandler> XMLFilterImpl::getErrorHandler() { return call_method<SCAPIX_META_STRING("getErrorHandler"), ref<org::xml::sax::ErrorHandler>>(); }
inline void XMLFilterImpl::parse(ref<org::xml::sax::InputSource> input) { return call_method<SCAPIX_META_STRING("parse"), void>(input); }
inline void XMLFilterImpl::parse(ref<java::lang::String> systemId) { return call_method<SCAPIX_META_STRING("parse"), void>(systemId); }
inline ref<org::xml::sax::InputSource> XMLFilterImpl::resolveEntity(ref<java::lang::String> publicId, ref<java::lang::String> systemId) { return call_method<SCAPIX_META_STRING("resolveEntity"), ref<org::xml::sax::InputSource>>(publicId, systemId); }
inline void XMLFilterImpl::notationDecl(ref<java::lang::String> name, ref<java::lang::String> publicId, ref<java::lang::String> systemId) { return call_method<SCAPIX_META_STRING("notationDecl"), void>(name, publicId, systemId); }
inline void XMLFilterImpl::unparsedEntityDecl(ref<java::lang::String> name, ref<java::lang::String> publicId, ref<java::lang::String> systemId, ref<java::lang::String> notationName) { return call_method<SCAPIX_META_STRING("unparsedEntityDecl"), void>(name, publicId, systemId, notationName); }
inline void XMLFilterImpl::setDocumentLocator(ref<org::xml::sax::Locator> locator) { return call_method<SCAPIX_META_STRING("setDocumentLocator"), void>(locator); }
inline void XMLFilterImpl::startDocument() { return call_method<SCAPIX_META_STRING("startDocument"), void>(); }
inline void XMLFilterImpl::endDocument() { return call_method<SCAPIX_META_STRING("endDocument"), void>(); }
inline void XMLFilterImpl::startPrefixMapping(ref<java::lang::String> prefix, ref<java::lang::String> uri) { return call_method<SCAPIX_META_STRING("startPrefixMapping"), void>(prefix, uri); }
inline void XMLFilterImpl::endPrefixMapping(ref<java::lang::String> prefix) { return call_method<SCAPIX_META_STRING("endPrefixMapping"), void>(prefix); }
inline void XMLFilterImpl::startElement(ref<java::lang::String> uri, ref<java::lang::String> localName, ref<java::lang::String> qName, ref<org::xml::sax::Attributes> atts) { return call_method<SCAPIX_META_STRING("startElement"), void>(uri, localName, qName, atts); }
inline void XMLFilterImpl::endElement(ref<java::lang::String> uri, ref<java::lang::String> localName, ref<java::lang::String> qName) { return call_method<SCAPIX_META_STRING("endElement"), void>(uri, localName, qName); }
inline void XMLFilterImpl::characters(ref<link::java::array<jchar>> ch, jint start, jint length) { return call_method<SCAPIX_META_STRING("characters"), void>(ch, start, length); }
inline void XMLFilterImpl::ignorableWhitespace(ref<link::java::array<jchar>> ch, jint start, jint length) { return call_method<SCAPIX_META_STRING("ignorableWhitespace"), void>(ch, start, length); }
inline void XMLFilterImpl::processingInstruction(ref<java::lang::String> target, ref<java::lang::String> data) { return call_method<SCAPIX_META_STRING("processingInstruction"), void>(target, data); }
inline void XMLFilterImpl::skippedEntity(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("skippedEntity"), void>(name); }
inline void XMLFilterImpl::warning(ref<org::xml::sax::SAXParseException> e) { return call_method<SCAPIX_META_STRING("warning"), void>(e); }
inline void XMLFilterImpl::error(ref<org::xml::sax::SAXParseException> e) { return call_method<SCAPIX_META_STRING("error"), void>(e); }
inline void XMLFilterImpl::fatalError(ref<org::xml::sax::SAXParseException> e) { return call_method<SCAPIX_META_STRING("fatalError"), void>(e); }

} // namespace org::xml::sax::helpers
} // namespace scapix::java_api

#endif // SCAPIX_ORG_XML_SAX_HELPERS_XMLFILTERIMPL_H
