// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_ORG_XMLPULL_V1_XMLSERIALIZER_H
#define SCAPIX_ORG_XMLPULL_V1_XMLSERIALIZER_H

namespace scapix::java_api {

namespace java::io { class OutputStream; }
namespace java::io { class Writer; }
namespace java::lang { class Boolean; }
namespace java::lang { class String; }

namespace org::xmlpull::v1 {

class XmlSerializer : public object_base<SCAPIX_META_STRING("org/xmlpull/v1/XmlSerializer"),
	java::lang::Object>
{
public:

	void setFeature(ref<java::lang::String> p1, jboolean p2);
	jboolean getFeature(ref<java::lang::String> p1);
	void setProperty(ref<java::lang::String> p1, ref<java::lang::Object> p2);
	ref<java::lang::Object> getProperty(ref<java::lang::String> p1);
	void setOutput(ref<java::io::OutputStream> p1, ref<java::lang::String> p2);
	void setOutput(ref<java::io::Writer> p1);
	void startDocument(ref<java::lang::String> p1, ref<java::lang::Boolean> p2);
	void endDocument();
	void setPrefix(ref<java::lang::String> p1, ref<java::lang::String> p2);
	ref<java::lang::String> getPrefix(ref<java::lang::String> p1, jboolean p2);
	jint getDepth();
	ref<java::lang::String> getNamespace();
	ref<java::lang::String> getName();
	ref<org::xmlpull::v1::XmlSerializer> startTag(ref<java::lang::String> p1, ref<java::lang::String> p2);
	ref<org::xmlpull::v1::XmlSerializer> attribute(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3);
	ref<org::xmlpull::v1::XmlSerializer> endTag(ref<java::lang::String> p1, ref<java::lang::String> p2);
	ref<org::xmlpull::v1::XmlSerializer> text(ref<java::lang::String> p1);
	ref<org::xmlpull::v1::XmlSerializer> text(ref<link::java::array<jchar>> p1, jint p2, jint p3);
	void cdsect(ref<java::lang::String> p1);
	void entityRef(ref<java::lang::String> p1);
	void processingInstruction(ref<java::lang::String> p1);
	void comment(ref<java::lang::String> p1);
	void docdecl(ref<java::lang::String> p1);
	void ignorableWhitespace(ref<java::lang::String> p1);
	void flush();

protected:

	XmlSerializer(handle_type h) : base_(h) {}

};

} // namespace org::xmlpull::v1
} // namespace scapix::java_api

#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/java/lang/Boolean.h>
#include <scapix/java_api/java/lang/String.h>

namespace scapix::java_api {
namespace org::xmlpull::v1 {

inline void XmlSerializer::setFeature(ref<java::lang::String> p1, jboolean p2) { return call_method<SCAPIX_META_STRING("setFeature"), void>(p1, p2); }
inline jboolean XmlSerializer::getFeature(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getFeature"), jboolean>(p1); }
inline void XmlSerializer::setProperty(ref<java::lang::String> p1, ref<java::lang::Object> p2) { return call_method<SCAPIX_META_STRING("setProperty"), void>(p1, p2); }
inline ref<java::lang::Object> XmlSerializer::getProperty(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("getProperty"), ref<java::lang::Object>>(p1); }
inline void XmlSerializer::setOutput(ref<java::io::OutputStream> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("setOutput"), void>(p1, p2); }
inline void XmlSerializer::setOutput(ref<java::io::Writer> p1) { return call_method<SCAPIX_META_STRING("setOutput"), void>(p1); }
inline void XmlSerializer::startDocument(ref<java::lang::String> p1, ref<java::lang::Boolean> p2) { return call_method<SCAPIX_META_STRING("startDocument"), void>(p1, p2); }
inline void XmlSerializer::endDocument() { return call_method<SCAPIX_META_STRING("endDocument"), void>(); }
inline void XmlSerializer::setPrefix(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("setPrefix"), void>(p1, p2); }
inline ref<java::lang::String> XmlSerializer::getPrefix(ref<java::lang::String> p1, jboolean p2) { return call_method<SCAPIX_META_STRING("getPrefix"), ref<java::lang::String>>(p1, p2); }
inline jint XmlSerializer::getDepth() { return call_method<SCAPIX_META_STRING("getDepth"), jint>(); }
inline ref<java::lang::String> XmlSerializer::getNamespace() { return call_method<SCAPIX_META_STRING("getNamespace"), ref<java::lang::String>>(); }
inline ref<java::lang::String> XmlSerializer::getName() { return call_method<SCAPIX_META_STRING("getName"), ref<java::lang::String>>(); }
inline ref<org::xmlpull::v1::XmlSerializer> XmlSerializer::startTag(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("startTag"), ref<org::xmlpull::v1::XmlSerializer>>(p1, p2); }
inline ref<org::xmlpull::v1::XmlSerializer> XmlSerializer::attribute(ref<java::lang::String> p1, ref<java::lang::String> p2, ref<java::lang::String> p3) { return call_method<SCAPIX_META_STRING("attribute"), ref<org::xmlpull::v1::XmlSerializer>>(p1, p2, p3); }
inline ref<org::xmlpull::v1::XmlSerializer> XmlSerializer::endTag(ref<java::lang::String> p1, ref<java::lang::String> p2) { return call_method<SCAPIX_META_STRING("endTag"), ref<org::xmlpull::v1::XmlSerializer>>(p1, p2); }
inline ref<org::xmlpull::v1::XmlSerializer> XmlSerializer::text(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("text"), ref<org::xmlpull::v1::XmlSerializer>>(p1); }
inline ref<org::xmlpull::v1::XmlSerializer> XmlSerializer::text(ref<link::java::array<jchar>> p1, jint p2, jint p3) { return call_method<SCAPIX_META_STRING("text"), ref<org::xmlpull::v1::XmlSerializer>>(p1, p2, p3); }
inline void XmlSerializer::cdsect(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("cdsect"), void>(p1); }
inline void XmlSerializer::entityRef(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("entityRef"), void>(p1); }
inline void XmlSerializer::processingInstruction(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("processingInstruction"), void>(p1); }
inline void XmlSerializer::comment(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("comment"), void>(p1); }
inline void XmlSerializer::docdecl(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("docdecl"), void>(p1); }
inline void XmlSerializer::ignorableWhitespace(ref<java::lang::String> p1) { return call_method<SCAPIX_META_STRING("ignorableWhitespace"), void>(p1); }
inline void XmlSerializer::flush() { return call_method<SCAPIX_META_STRING("flush"), void>(); }

} // namespace org::xmlpull::v1
} // namespace scapix::java_api

#endif // SCAPIX_ORG_XMLPULL_V1_XMLSERIALIZER_H
