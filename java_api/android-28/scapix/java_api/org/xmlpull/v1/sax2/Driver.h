// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/xml/sax/Locator.h>
#include <scapix/java_api/org/xml/sax/XMLReader.h>
#include <scapix/java_api/org/xml/sax/Attributes.h>

#ifndef SCAPIX_ORG_XMLPULL_V1_SAX2_DRIVER_H
#define SCAPIX_ORG_XMLPULL_V1_SAX2_DRIVER_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace org::xml::sax { class ContentHandler; }
namespace org::xml::sax { class DTDHandler; }
namespace org::xml::sax { class EntityResolver; }
namespace org::xml::sax { class ErrorHandler; }
namespace org::xml::sax { class InputSource; }
namespace org::xmlpull::v1 { class XmlPullParser; }

namespace org::xmlpull::v1::sax2 {

class Driver : public object_base<SCAPIX_META_STRING("org/xmlpull/v1/sax2/Driver"),
	java::lang::Object,
	org::xml::sax::Locator,
	org::xml::sax::XMLReader,
	org::xml::sax::Attributes>
{
public:

	static ref<Driver> new_object();
	static ref<Driver> new_object(ref<org::xmlpull::v1::XmlPullParser> pp);
	jint getLength();
	ref<java::lang::String> getURI(jint index);
	ref<java::lang::String> getLocalName(jint index);
	ref<java::lang::String> getQName(jint index);
	ref<java::lang::String> getType(jint index);
	ref<java::lang::String> getValue(jint index);
	jint getIndex(ref<java::lang::String> uri, ref<java::lang::String> localName);
	jint getIndex(ref<java::lang::String> qName);
	ref<java::lang::String> getType(ref<java::lang::String> uri, ref<java::lang::String> localName);
	ref<java::lang::String> getType(ref<java::lang::String> qName);
	ref<java::lang::String> getValue(ref<java::lang::String> uri, ref<java::lang::String> localName);
	ref<java::lang::String> getValue(ref<java::lang::String> qName);
	ref<java::lang::String> getPublicId();
	ref<java::lang::String> getSystemId();
	jint getLineNumber();
	jint getColumnNumber();
	jboolean getFeature(ref<java::lang::String> name);
	void setFeature(ref<java::lang::String> name, jboolean value);
	ref<java::lang::Object> getProperty(ref<java::lang::String> name);
	void setProperty(ref<java::lang::String> name, ref<java::lang::Object> value);
	void setEntityResolver(ref<org::xml::sax::EntityResolver> resolver);
	ref<org::xml::sax::EntityResolver> getEntityResolver();
	void setDTDHandler(ref<org::xml::sax::DTDHandler> handler);
	ref<org::xml::sax::DTDHandler> getDTDHandler();
	void setContentHandler(ref<org::xml::sax::ContentHandler> handler);
	ref<org::xml::sax::ContentHandler> getContentHandler();
	void setErrorHandler(ref<org::xml::sax::ErrorHandler> handler);
	ref<org::xml::sax::ErrorHandler> getErrorHandler();
	void parse(ref<org::xml::sax::InputSource> source);
	void parse(ref<java::lang::String> systemId);
	void parseSubTree(ref<org::xmlpull::v1::XmlPullParser> pp);

protected:

	Driver(handle_type h) : base_(h) {}

};

} // namespace org::xmlpull::v1::sax2
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/xml/sax/ContentHandler.h>
#include <scapix/java_api/org/xml/sax/DTDHandler.h>
#include <scapix/java_api/org/xml/sax/EntityResolver.h>
#include <scapix/java_api/org/xml/sax/ErrorHandler.h>
#include <scapix/java_api/org/xml/sax/InputSource.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>

namespace scapix::java_api {
namespace org::xmlpull::v1::sax2 {

inline ref<Driver> Driver::new_object() { return base_::new_object(); }
inline ref<Driver> Driver::new_object(ref<org::xmlpull::v1::XmlPullParser> pp) { return base_::new_object(pp); }
inline jint Driver::getLength() { return call_method<SCAPIX_META_STRING("getLength"), jint>(); }
inline ref<java::lang::String> Driver::getURI(jint index) { return call_method<SCAPIX_META_STRING("getURI"), ref<java::lang::String>>(index); }
inline ref<java::lang::String> Driver::getLocalName(jint index) { return call_method<SCAPIX_META_STRING("getLocalName"), ref<java::lang::String>>(index); }
inline ref<java::lang::String> Driver::getQName(jint index) { return call_method<SCAPIX_META_STRING("getQName"), ref<java::lang::String>>(index); }
inline ref<java::lang::String> Driver::getType(jint index) { return call_method<SCAPIX_META_STRING("getType"), ref<java::lang::String>>(index); }
inline ref<java::lang::String> Driver::getValue(jint index) { return call_method<SCAPIX_META_STRING("getValue"), ref<java::lang::String>>(index); }
inline jint Driver::getIndex(ref<java::lang::String> uri, ref<java::lang::String> localName) { return call_method<SCAPIX_META_STRING("getIndex"), jint>(uri, localName); }
inline jint Driver::getIndex(ref<java::lang::String> qName) { return call_method<SCAPIX_META_STRING("getIndex"), jint>(qName); }
inline ref<java::lang::String> Driver::getType(ref<java::lang::String> uri, ref<java::lang::String> localName) { return call_method<SCAPIX_META_STRING("getType"), ref<java::lang::String>>(uri, localName); }
inline ref<java::lang::String> Driver::getType(ref<java::lang::String> qName) { return call_method<SCAPIX_META_STRING("getType"), ref<java::lang::String>>(qName); }
inline ref<java::lang::String> Driver::getValue(ref<java::lang::String> uri, ref<java::lang::String> localName) { return call_method<SCAPIX_META_STRING("getValue"), ref<java::lang::String>>(uri, localName); }
inline ref<java::lang::String> Driver::getValue(ref<java::lang::String> qName) { return call_method<SCAPIX_META_STRING("getValue"), ref<java::lang::String>>(qName); }
inline ref<java::lang::String> Driver::getPublicId() { return call_method<SCAPIX_META_STRING("getPublicId"), ref<java::lang::String>>(); }
inline ref<java::lang::String> Driver::getSystemId() { return call_method<SCAPIX_META_STRING("getSystemId"), ref<java::lang::String>>(); }
inline jint Driver::getLineNumber() { return call_method<SCAPIX_META_STRING("getLineNumber"), jint>(); }
inline jint Driver::getColumnNumber() { return call_method<SCAPIX_META_STRING("getColumnNumber"), jint>(); }
inline jboolean Driver::getFeature(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getFeature"), jboolean>(name); }
inline void Driver::setFeature(ref<java::lang::String> name, jboolean value) { return call_method<SCAPIX_META_STRING("setFeature"), void>(name, value); }
inline ref<java::lang::Object> Driver::getProperty(ref<java::lang::String> name) { return call_method<SCAPIX_META_STRING("getProperty"), ref<java::lang::Object>>(name); }
inline void Driver::setProperty(ref<java::lang::String> name, ref<java::lang::Object> value) { return call_method<SCAPIX_META_STRING("setProperty"), void>(name, value); }
inline void Driver::setEntityResolver(ref<org::xml::sax::EntityResolver> resolver) { return call_method<SCAPIX_META_STRING("setEntityResolver"), void>(resolver); }
inline ref<org::xml::sax::EntityResolver> Driver::getEntityResolver() { return call_method<SCAPIX_META_STRING("getEntityResolver"), ref<org::xml::sax::EntityResolver>>(); }
inline void Driver::setDTDHandler(ref<org::xml::sax::DTDHandler> handler) { return call_method<SCAPIX_META_STRING("setDTDHandler"), void>(handler); }
inline ref<org::xml::sax::DTDHandler> Driver::getDTDHandler() { return call_method<SCAPIX_META_STRING("getDTDHandler"), ref<org::xml::sax::DTDHandler>>(); }
inline void Driver::setContentHandler(ref<org::xml::sax::ContentHandler> handler) { return call_method<SCAPIX_META_STRING("setContentHandler"), void>(handler); }
inline ref<org::xml::sax::ContentHandler> Driver::getContentHandler() { return call_method<SCAPIX_META_STRING("getContentHandler"), ref<org::xml::sax::ContentHandler>>(); }
inline void Driver::setErrorHandler(ref<org::xml::sax::ErrorHandler> handler) { return call_method<SCAPIX_META_STRING("setErrorHandler"), void>(handler); }
inline ref<org::xml::sax::ErrorHandler> Driver::getErrorHandler() { return call_method<SCAPIX_META_STRING("getErrorHandler"), ref<org::xml::sax::ErrorHandler>>(); }
inline void Driver::parse(ref<org::xml::sax::InputSource> source) { return call_method<SCAPIX_META_STRING("parse"), void>(source); }
inline void Driver::parse(ref<java::lang::String> systemId) { return call_method<SCAPIX_META_STRING("parse"), void>(systemId); }
inline void Driver::parseSubTree(ref<org::xmlpull::v1::XmlPullParser> pp) { return call_method<SCAPIX_META_STRING("parseSubTree"), void>(pp); }

} // namespace org::xmlpull::v1::sax2
} // namespace scapix::java_api

#endif // SCAPIX_ORG_XMLPULL_V1_SAX2_DRIVER_H
