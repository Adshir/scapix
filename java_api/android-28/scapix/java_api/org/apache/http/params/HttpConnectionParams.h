// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/apache/http/params/CoreConnectionPNames.h>

#ifndef SCAPIX_ORG_APACHE_HTTP_PARAMS_HTTPCONNECTIONPARAMS_H
#define SCAPIX_ORG_APACHE_HTTP_PARAMS_HTTPCONNECTIONPARAMS_H

namespace scapix::java_api {

namespace org::apache::http::params { class HttpParams; }

namespace org::apache::http::params {

class HttpConnectionParams : public object_base<SCAPIX_META_STRING("org/apache/http/params/HttpConnectionParams"),
	java::lang::Object,
	org::apache::http::params::CoreConnectionPNames>
{
public:

	static jint getSoTimeout(ref<org::apache::http::params::HttpParams> params);
	static void setSoTimeout(ref<org::apache::http::params::HttpParams> params, jint timeout);
	static jboolean getTcpNoDelay(ref<org::apache::http::params::HttpParams> params);
	static void setTcpNoDelay(ref<org::apache::http::params::HttpParams> params, jboolean value);
	static jint getSocketBufferSize(ref<org::apache::http::params::HttpParams> params);
	static void setSocketBufferSize(ref<org::apache::http::params::HttpParams> params, jint size);
	static jint getLinger(ref<org::apache::http::params::HttpParams> params);
	static void setLinger(ref<org::apache::http::params::HttpParams> params, jint value);
	static jint getConnectionTimeout(ref<org::apache::http::params::HttpParams> params);
	static void setConnectionTimeout(ref<org::apache::http::params::HttpParams> params, jint timeout);
	static jboolean isStaleCheckingEnabled(ref<org::apache::http::params::HttpParams> params);
	static void setStaleCheckingEnabled(ref<org::apache::http::params::HttpParams> params, jboolean value);

protected:

	HttpConnectionParams(handle_type h) : base_(h) {}

};

} // namespace org::apache::http::params
} // namespace scapix::java_api

#include <scapix/java_api/org/apache/http/params/HttpParams.h>

namespace scapix::java_api {
namespace org::apache::http::params {

inline jint HttpConnectionParams::getSoTimeout(ref<org::apache::http::params::HttpParams> params) { return call_static_method<SCAPIX_META_STRING("getSoTimeout"), jint>(params); }
inline void HttpConnectionParams::setSoTimeout(ref<org::apache::http::params::HttpParams> params, jint timeout) { return call_static_method<SCAPIX_META_STRING("setSoTimeout"), void>(params, timeout); }
inline jboolean HttpConnectionParams::getTcpNoDelay(ref<org::apache::http::params::HttpParams> params) { return call_static_method<SCAPIX_META_STRING("getTcpNoDelay"), jboolean>(params); }
inline void HttpConnectionParams::setTcpNoDelay(ref<org::apache::http::params::HttpParams> params, jboolean value) { return call_static_method<SCAPIX_META_STRING("setTcpNoDelay"), void>(params, value); }
inline jint HttpConnectionParams::getSocketBufferSize(ref<org::apache::http::params::HttpParams> params) { return call_static_method<SCAPIX_META_STRING("getSocketBufferSize"), jint>(params); }
inline void HttpConnectionParams::setSocketBufferSize(ref<org::apache::http::params::HttpParams> params, jint size) { return call_static_method<SCAPIX_META_STRING("setSocketBufferSize"), void>(params, size); }
inline jint HttpConnectionParams::getLinger(ref<org::apache::http::params::HttpParams> params) { return call_static_method<SCAPIX_META_STRING("getLinger"), jint>(params); }
inline void HttpConnectionParams::setLinger(ref<org::apache::http::params::HttpParams> params, jint value) { return call_static_method<SCAPIX_META_STRING("setLinger"), void>(params, value); }
inline jint HttpConnectionParams::getConnectionTimeout(ref<org::apache::http::params::HttpParams> params) { return call_static_method<SCAPIX_META_STRING("getConnectionTimeout"), jint>(params); }
inline void HttpConnectionParams::setConnectionTimeout(ref<org::apache::http::params::HttpParams> params, jint timeout) { return call_static_method<SCAPIX_META_STRING("setConnectionTimeout"), void>(params, timeout); }
inline jboolean HttpConnectionParams::isStaleCheckingEnabled(ref<org::apache::http::params::HttpParams> params) { return call_static_method<SCAPIX_META_STRING("isStaleCheckingEnabled"), jboolean>(params); }
inline void HttpConnectionParams::setStaleCheckingEnabled(ref<org::apache::http::params::HttpParams> params, jboolean value) { return call_static_method<SCAPIX_META_STRING("setStaleCheckingEnabled"), void>(params, value); }

} // namespace org::apache::http::params
} // namespace scapix::java_api

#endif // SCAPIX_ORG_APACHE_HTTP_PARAMS_HTTPCONNECTIONPARAMS_H
