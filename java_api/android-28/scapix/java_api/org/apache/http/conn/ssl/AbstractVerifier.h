// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/apache/http/conn/ssl/X509HostnameVerifier.h>

#ifndef SCAPIX_ORG_APACHE_HTTP_CONN_SSL_ABSTRACTVERIFIER_H
#define SCAPIX_ORG_APACHE_HTTP_CONN_SSL_ABSTRACTVERIFIER_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::security::cert { class X509Certificate; }
namespace javax::net::ssl { class SSLSession; }
namespace javax::net::ssl { class SSLSocket; }

namespace org::apache::http::conn::ssl {

class AbstractVerifier : public object_base<SCAPIX_META_STRING("org/apache/http/conn/ssl/AbstractVerifier"),
	java::lang::Object,
	org::apache::http::conn::ssl::X509HostnameVerifier>
{
public:

	static ref<AbstractVerifier> new_object();
	void verify(ref<java::lang::String> host, ref<javax::net::ssl::SSLSocket> ssl);
	jboolean verify(ref<java::lang::String> host, ref<javax::net::ssl::SSLSession> session);
	void verify(ref<java::lang::String> host, ref<java::security::cert::X509Certificate> cert);
	void verify(ref<java::lang::String> host, ref<link::java::array<java::lang::String>> cns, ref<link::java::array<java::lang::String>> subjectAlts, jboolean strictWithSubDomains);
	static jboolean acceptableCountryWildcard(ref<java::lang::String> cn);
	static ref<link::java::array<java::lang::String>> getCNs(ref<java::security::cert::X509Certificate> cert);
	static ref<link::java::array<java::lang::String>> getDNSSubjectAlts(ref<java::security::cert::X509Certificate> cert);
	static jint countDots(ref<java::lang::String> s);

protected:

	AbstractVerifier(handle_type h) : base_(h) {}

};

} // namespace org::apache::http::conn::ssl
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/cert/X509Certificate.h>
#include <scapix/java_api/javax/net/ssl/SSLSession.h>
#include <scapix/java_api/javax/net/ssl/SSLSocket.h>

namespace scapix::java_api {
namespace org::apache::http::conn::ssl {

inline ref<AbstractVerifier> AbstractVerifier::new_object() { return base_::new_object(); }
inline void AbstractVerifier::verify(ref<java::lang::String> host, ref<javax::net::ssl::SSLSocket> ssl) { return call_method<SCAPIX_META_STRING("verify"), void>(host, ssl); }
inline jboolean AbstractVerifier::verify(ref<java::lang::String> host, ref<javax::net::ssl::SSLSession> session) { return call_method<SCAPIX_META_STRING("verify"), jboolean>(host, session); }
inline void AbstractVerifier::verify(ref<java::lang::String> host, ref<java::security::cert::X509Certificate> cert) { return call_method<SCAPIX_META_STRING("verify"), void>(host, cert); }
inline void AbstractVerifier::verify(ref<java::lang::String> host, ref<link::java::array<java::lang::String>> cns, ref<link::java::array<java::lang::String>> subjectAlts, jboolean strictWithSubDomains) { return call_method<SCAPIX_META_STRING("verify"), void>(host, cns, subjectAlts, strictWithSubDomains); }
inline jboolean AbstractVerifier::acceptableCountryWildcard(ref<java::lang::String> cn) { return call_static_method<SCAPIX_META_STRING("acceptableCountryWildcard"), jboolean>(cn); }
inline ref<link::java::array<java::lang::String>> AbstractVerifier::getCNs(ref<java::security::cert::X509Certificate> cert) { return call_static_method<SCAPIX_META_STRING("getCNs"), ref<link::java::array<java::lang::String>>>(cert); }
inline ref<link::java::array<java::lang::String>> AbstractVerifier::getDNSSubjectAlts(ref<java::security::cert::X509Certificate> cert) { return call_static_method<SCAPIX_META_STRING("getDNSSubjectAlts"), ref<link::java::array<java::lang::String>>>(cert); }
inline jint AbstractVerifier::countDots(ref<java::lang::String> s) { return call_static_method<SCAPIX_META_STRING("countDots"), jint>(s); }

} // namespace org::apache::http::conn::ssl
} // namespace scapix::java_api

#endif // SCAPIX_ORG_APACHE_HTTP_CONN_SSL_ABSTRACTVERIFIER_H
