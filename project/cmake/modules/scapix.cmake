function(scapix_bridge_headers target domain)
set(bridge_headers ${ARGN})

if(${SCAPIX_BRIDGE} STREQUAL python)
    #set(Python_USE_STATIC_LIBS ON)
    find_package (Python COMPONENTS Development)
    target_include_directories(${target} PRIVATE ${Python_INCLUDE_DIRS})
    target_link_libraries(${target} PRIVATE ${Python_LIBRARIES})

    # set(Boost_USE_STATIC_LIBS ON)
    # find_package(Boost REQUIRED python${Python_VERSION_MAJOR}${Python_VERSION_MINOR})
    # target_include_directories(${target} PUBLIC ${Boost_INCLUDE_DIRS})
    # target_link_libraries(${target} PRIVATE Boost::python${Python_VERSION_MAJOR}${Python_VERSION_MINOR})

    hunter_add_package(pybind11)
    find_package(pybind11 REQUIRED)
    target_link_libraries(${target} PRIVATE pybind11::module)
    set_target_properties(${target} PROPERTIES PREFIX "${PYTHON_MODULE_PREFIX}" SUFFIX "${PYTHON_MODULE_EXTENSION}")
endif()

if(${SCAPIX_BRIDGE} STREQUAL objc)
    target_compile_options(${target} PUBLIC "-fobjc-arc")
endif()

target_link_libraries(${target} PUBLIC scapix)

# extract scapix_project_name from domain

string(FIND ${domain} "." scapix_domain_pos REVERSE)
math(EXPR scapix_domain_pos "${scapix_domain_pos}+1")
string(SUBSTRING ${domain} ${scapix_domain_pos} -1 scapix_project_name)

# generated_java_cpp

set(generated_java_cpp
    "${PROJECT_ROOT}/generated/bridge/java/${scapix_project_name}.cpp"
)

set_source_files_properties(${generated_java_cpp} PROPERTIES GENERATED TRUE)

file(REMOVE "${generated_java_cpp}")

file(APPEND "${generated_java_cpp}"
"// Generated by Scapix Language Bridge

")
file(APPEND "${generated_java_cpp}" "#include <scapix/bridge/java/object.h>

")

foreach(filename ${bridge_headers})
    get_filename_component(name ${filename} NAME_WE)
    file(APPEND "${generated_java_cpp}" "void scapix_java_export_${name}();\n")
endforeach(filename)

file(APPEND "${generated_java_cpp}" "
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved)
{
  try
  {
    auto result = scapix::bridge::java::on_load(vm, reserved);

")
foreach(filename ${bridge_headers})
    get_filename_component(name ${filename} NAME_WE)
    file(APPEND "${generated_java_cpp}" "    scapix_java_export_${name}();\n")
endforeach(filename)
file(APPEND "${generated_java_cpp}" "
    return result;
  }
  catch (const scapix::link::java::vm_exception& e)
  {
    e.get()->throw_();
  }

  return 0;
}
")

set(generated_sources_java
    ${generated_java_cpp}
)

# generated_python_cpp

set(generated_python_cpp
    "${PROJECT_ROOT}/generated/bridge/python/${scapix_project_name}.cpp"
)

set_source_files_properties(${generated_python_cpp} PROPERTIES GENERATED TRUE)

file(REMOVE "${generated_python_cpp}")

file(APPEND "${generated_python_cpp}"
"// Generated by Scapix Language Bridge

")

# file(APPEND "${generated_python_cpp}" "#include <boost/python.hpp>\n\n")

# foreach(filename ${bridge_headers})
#     get_filename_component(name ${filename} NAME_WE)
#     file(APPEND "${generated_python_cpp}" "void scapix_python_export_${name}();\n")
# endforeach(filename)
# file(APPEND "${generated_python_cpp}" "
# BOOST_PYTHON_MODULE(${target})
# {
# ")
# foreach(filename ${bridge_headers})
#     get_filename_component(name ${filename} NAME_WE)
#     file(APPEND "${generated_python_cpp}" "    scapix_python_export_${name}();\n")
# endforeach(filename)
# file(APPEND "${generated_python_cpp}" "}\n")

file(APPEND "${generated_python_cpp}" "#include <pybind11/pybind11.h>\n\n")

foreach(filename ${bridge_headers})
    get_filename_component(name ${filename} NAME_WE)
    file(APPEND "${generated_python_cpp}" "void scapix_python_export_${name}(pybind11::module& m);\n")
endforeach(filename)
file(APPEND "${generated_python_cpp}" "
PYBIND11_MODULE(${target}, m)
{
    m.doc() = \"${domain}\";
")
foreach(filename ${bridge_headers})
    get_filename_component(name ${filename} NAME_WE)
    file(APPEND "${generated_python_cpp}" "    scapix_python_export_${name}(m);\n")
endforeach(filename)
file(APPEND "${generated_python_cpp}" "}\n")

set(generated_sources_python
    ${generated_python_cpp}
)

string(REPLACE "." "/" domain_path ${domain})

foreach(bridge_header ${bridge_headers})

    get_filename_component(bridge_header_name ${bridge_header} NAME_WE)
    file(RELATIVE_PATH bridge_header_relative ${PROJECT_ROOT} ${bridge_header})

    set(output_files_java)
    set(output_files_objc)
    set(output_files_python)

    # to do: convert java/objc file name to upper camel case

    list(APPEND output_files_java
            "${PROJECT_ROOT}/generated/bridge/java/${domain_path}/${bridge_header_name}.java"
            "${PROJECT_ROOT}/generated/bridge/java/${bridge_header_name}.cpp"
    )

    list(APPEND output_files_objc
            "${PROJECT_ROOT}/generated/bridge/objc/${scapix_project_name}/bridge/${bridge_header_name}.h"
            "${PROJECT_ROOT}/generated/bridge/objc/${scapix_project_name}/bridge/${bridge_header_name}.mm"
    )

    list(APPEND output_files_python
            "${PROJECT_ROOT}/generated/bridge/python/${bridge_header_name}.cpp"
    )

    list(APPEND generated_sources_java ${output_files_java})
    list(APPEND generated_sources_objc ${output_files_objc})
    list(APPEND generated_sources_python ${output_files_python})

    add_custom_command(
            OUTPUT ${output_files_java} ${output_files_objc}  ${output_files_python}
            COMMAND ${SCAPIX_ROOT}/bin/${CMAKE_HOST_SYSTEM_NAME}/scapix -scapix-domain=${domain} ${bridge_header} -- -xc++ -std=c++17 -v -DSCAPIX_BRIDGE=cpp "-I$<JOIN:$<TARGET_PROPERTY:${target},INCLUDE_DIRECTORIES>,;-I>" -I${SCAPIX_ROOT}/std/libcxx -I${SCAPIX_ROOT}/std/clang
            DEPENDS ${bridge_header}
            WORKING_DIRECTORY ${PROJECT_ROOT}
            COMMENT "Running Scapix Bridge for ${bridge_header_relative}"
            COMMAND_EXPAND_LISTS
    )

endforeach(bridge_header)

set(generated_sources
    ${generated_sources_java}
    ${generated_sources_objc}
    ${generated_sources_python}
)

# GENERATED property implicitly set for OUTPUT arguments of add_custom_command()
#set_source_files_properties(${generated_sources} PROPERTIES GENERATED TRUE)

string(CONCAT generated_sources_var_name "generated_sources_" ${SCAPIX_BRIDGE})

set_source_files_properties(${generated_sources} PROPERTIES HEADER_FILE_ONLY TRUE)
set_source_files_properties(${${generated_sources_var_name}} PROPERTIES HEADER_FILE_ONLY FALSE)

target_sources(${target} PUBLIC ${generated_sources})
source_group(TREE ${PROJECT_ROOT}/generated PREFIX "generated" FILES ${generated_sources})

endfunction(scapix_bridge_headers)
