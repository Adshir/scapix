cmake_minimum_required(VERSION 3.14)

project(scapix CXX)

find_package(ScapixBin REQUIRED)

if(NOT SCAPIX_BRIDGE)
    set(SCAPIX_BRIDGE cpp)
endif()

if(NOT SCAPIX_PLATFORM)
    set(SCAPIX_PLATFORM generic)
endif()

if(NOT SCAPIX_JAVA_API)
    set(SCAPIX_JAVA_API jdk-11.0.2)
endif()

set(SCAPIX_ROOT ${CMAKE_CURRENT_SOURCE_DIR} CACHE PATH "")

file(GLOB_RECURSE sources CONFIGURE_DEPENDS ${SCAPIX_ROOT}/source/*)
source_group(TREE ${SCAPIX_ROOT}/source PREFIX "source" FILES ${sources})
file(GLOB_RECURSE java_api_sources CONFIGURE_DEPENDS ${SCAPIX_ROOT}/java_api/${SCAPIX_JAVA_API}/scapix/java_api/*)
source_group(TREE ${SCAPIX_ROOT}/java_api/${SCAPIX_JAVA_API}/scapix/java_api PREFIX "java_api" FILES ${java_api_sources})
file(GLOB_RECURSE doc_sources CONFIGURE_DEPENDS ${SCAPIX_ROOT}/doc/*)
source_group(TREE ${SCAPIX_ROOT}/doc PREFIX "doc" FILES ${doc_sources})

add_library(scapix ${sources} ${java_api_sources} ${doc_sources})

if(XCODE)
    # to do: generate all scapix related xcode settings: include path to generated sources, objc-swift bridge header, product bundle identifier, etc.
    file(WRITE "${CMAKE_BINARY_DIR}/scapix.xcconfig"
        "// Generated by Scapix Language Bridge\n"
        "HEADER_SEARCH_PATHS=$(inherited) ${SCAPIX_ROOT}/source\n")
endif()

set(bridges
    "cpp"
    "java"
    "objc"
    "python"
    "js"
#   "cs"
#   "swift"
)

foreach(bridge ${bridges})
    if(NOT ${SCAPIX_BRIDGE} STREQUAL ${bridge})
        file(GLOB_RECURSE bridge_sources CONFIGURE_DEPENDS
            ${SCAPIX_ROOT}/source/scapix/link/${bridge}/*.*
            ${SCAPIX_ROOT}/source/scapix/bridge/${bridge}/*.*
        )
        set_source_files_properties(${bridge_sources} PROPERTIES HEADER_FILE_ONLY TRUE)
    endif()
endforeach()

if(${SCAPIX_BRIDGE} STREQUAL objc)
    target_compile_options(scapix PUBLIC "-fobjc-arc")
    set_source_files_properties(${SCAPIX_ROOT}/source/scapix/bridge/objc/BridgeObject.mm PROPERTIES COMPILE_FLAGS -fno-objc-arc)
endif()

set_target_properties(scapix PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED ON
    CXX_EXTENSIONS OFF
)

target_include_directories(scapix PUBLIC ${SCAPIX_ROOT}/source)
target_include_directories(scapix PUBLIC ${SCAPIX_ROOT}/java_api/${SCAPIX_JAVA_API})
target_compile_definitions(scapix PUBLIC SCAPIX_BRIDGE=${SCAPIX_BRIDGE} SCAPIX_BRIDGE_${SCAPIX_BRIDGE} SCAPIX_PLATFORM=${SCAPIX_PLATFORM})

if(${SCAPIX_BRIDGE} STREQUAL java)
    find_package(Boost REQUIRED)
    target_link_libraries(scapix PUBLIC Boost::headers)
endif()

if(${SCAPIX_BRIDGE} STREQUAL java AND NOT ANDROID)
    find_package(JNI REQUIRED)
    target_include_directories(scapix PUBLIC ${JNI_INCLUDE_DIRS})
    target_link_libraries(scapix PUBLIC ${JNI_LIBRARIES})
endif()

function(camel_case source target)
    set(up true)
    set(res "")

    string(LENGTH ${source} source_length)
    math(EXPR last_char_index "${source_length} - 1")

    foreach(char_index RANGE ${last_char_index})
        string(SUBSTRING "${source}" "${char_index}" "1" char)
        if(char STREQUAL "_")
            set(up true)
        else()
            if(up)
                string(TOUPPER ${char} char)
                set(up false)
            endif()
            string(APPEND res ${char})
        endif()
    endforeach()
    set(${target} ${res} PARENT_SCOPE)
endfunction(camel_case)

function(scapix_bridge_headers target domain)
set(bridge_headers ${ARGN})

set(PROJECT_ROOT ${CMAKE_SOURCE_DIR})

set(SCAPIX_BRIDGE "cpp" CACHE STRING "cpp, java, objc, python")
#set(SCAPIX_PLATFORM "generic" CACHE STRING "subfolder of 'platform' folder: ios, android, macos, windows, linux, etc.")
#set(SCAPIX_JAVA_API "android-28" CACHE STRING "subfolder of 'scapix/java_api' folder: jdk-11.0.2, android-28, etc.")

if(NOT DEFINED SCAPIX_BRIDGE)
    message(FATAL_ERROR "SCAPIX_BRIDGE not defined (cpp, java, objc, python)")
endif()

if(${SCAPIX_BRIDGE} STREQUAL python)
    find_package(Pybind11 REQUIRED)
    target_link_libraries(${target} PRIVATE pybind11::module)
    set_target_properties(${target} PROPERTIES PREFIX "${PYTHON_MODULE_PREFIX}" SUFFIX "${PYTHON_MODULE_EXTENSION}")
endif()

target_link_libraries(${target} PUBLIC scapix)

# JVM on macOS looks for native libs with .dylib extension
if(APPLE AND ${SCAPIX_BRIDGE} STREQUAL java)
    set_target_properties(${target} PROPERTIES SUFFIX ".dylib")
endif()

# extract scapix_project_name from domain

string(FIND ${domain} "." scapix_domain_pos REVERSE)
math(EXPR scapix_domain_pos "${scapix_domain_pos}+1")
string(SUBSTRING ${domain} ${scapix_domain_pos} -1 scapix_project_name)

# generated_java_cpp

set(generated_java_cpp
    "${PROJECT_ROOT}/generated/bridge/java/${scapix_project_name}.cpp"
)

set_source_files_properties(${generated_java_cpp} PROPERTIES GENERATED TRUE)

file(REMOVE "${generated_java_cpp}")

file(APPEND "${generated_java_cpp}"
"// Generated by Scapix Language Bridge

")
file(APPEND "${generated_java_cpp}" "#include <scapix/bridge/java/object.h>

")

foreach(filename ${bridge_headers})
    get_filename_component(name ${filename} NAME_WLE)
    file(APPEND "${generated_java_cpp}" "void scapix_java_export_${name}();\n")
endforeach(filename)

file(APPEND "${generated_java_cpp}" "
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved)
{
  try
  {
    auto result = scapix::bridge::java::on_load(vm, reserved);

")
foreach(filename ${bridge_headers})
    get_filename_component(name ${filename} NAME_WLE)
    file(APPEND "${generated_java_cpp}" "    scapix_java_export_${name}();\n")
endforeach(filename)
file(APPEND "${generated_java_cpp}" "
    return result;
  }
  catch (const scapix::link::java::vm_exception& e)
  {
    e.get()->throw_();
  }

  return 0;
}
")

set(generated_sources_java
    ${generated_java_cpp}
)

# generated_python_cpp

set(generated_python_cpp
    "${PROJECT_ROOT}/generated/bridge/python/${scapix_project_name}.cpp"
)

set_source_files_properties(${generated_python_cpp} PROPERTIES GENERATED TRUE)

file(REMOVE "${generated_python_cpp}")

file(APPEND "${generated_python_cpp}"
"// Generated by Scapix Language Bridge

")

file(APPEND "${generated_python_cpp}" "#include <pybind11/pybind11.h>\n\n")

foreach(filename ${bridge_headers})
    get_filename_component(name ${filename} NAME_WLE)
    file(APPEND "${generated_python_cpp}" "void scapix_python_export_${name}(pybind11::module& m);\n")
endforeach(filename)
file(APPEND "${generated_python_cpp}" "
PYBIND11_MODULE(${target}, m)
{
    m.doc() = \"${domain}\";
")
foreach(filename ${bridge_headers})
    get_filename_component(name ${filename} NAME_WLE)
    file(APPEND "${generated_python_cpp}" "    scapix_python_export_${name}(m);\n")
endforeach(filename)
file(APPEND "${generated_python_cpp}" "}\n")

set(generated_sources_python
    ${generated_python_cpp}
)

string(REPLACE "." "/" domain_path ${domain})

foreach(bridge_header ${bridge_headers})

    get_filename_component(bridge_header_name ${bridge_header} NAME_WLE)
    if(IS_ABSOLUTE bridge_header)
        file(RELATIVE_PATH bridge_header_relative ${PROJECT_ROOT} ${bridge_header})
    else()
        set(bridge_header_relative ${bridge_header})
    endif()
    camel_case(${bridge_header_name} bridge_header_name_camel)

    set(output_files_java)
    set(output_files_objc)
    set(output_files_python)
    set(output_files_js)

    list(APPEND output_files_java
            "${PROJECT_ROOT}/generated/bridge/java/${domain_path}/${bridge_header_name_camel}.java"
            "${PROJECT_ROOT}/generated/bridge/java/${bridge_header_name}.cpp"
    )

    list(APPEND output_files_objc
            "${PROJECT_ROOT}/generated/bridge/objc/${scapix_project_name}/bridge/${bridge_header_name_camel}.h"
            "${PROJECT_ROOT}/generated/bridge/objc/${scapix_project_name}/bridge/${bridge_header_name_camel}.mm"
    )

    list(APPEND output_files_python
            "${PROJECT_ROOT}/generated/bridge/python/${bridge_header_name}.cpp"
    )

    list(APPEND output_files_js
            "${PROJECT_ROOT}/generated/bridge/js/${bridge_header_name}.cpp"
    )

    list(APPEND generated_sources_java ${output_files_java})
    list(APPEND generated_sources_objc ${output_files_objc})
    list(APPEND generated_sources_python ${output_files_python})
    list(APPEND generated_sources_js ${output_files_js})

    if(ANDROID)
        if(${ANDROID_ABI} STREQUAL "armeabi-v7a")
            set(scapix_clang_config -DANDROID -target armv7a-linux-androideabi)
        elseif(${ANDROID_ABI} STREQUAL "arm64-v8a")
            set(scapix_clang_config -DANDROID -target aarch64-linux-android)
        elseif(${ANDROID_ABI} STREQUAL "x86")
            set(scapix_clang_config -DANDROID -target i686-linux-android)
        elseif(${ANDROID_ABI} STREQUAL "x86_64")
            set(scapix_clang_config -DANDROID -target x86_64-linux-android)
        else()
            message(FATAL_ERROR "Unknown Android ABI")
        endif()
    elseif(IOS)
        set(scapix_clang_config -arch arm64)
    elseif(EMSCRIPTEN)
        set(scapix_clang_config
            -target wasm32-unknown-emscripten
            -isystem $ENV{EMSDK}/upstream/emscripten/system/include/libcxx
            -isystem $ENV{EMSDK}/upstream/emscripten/system/lib/libcxxabi/include
            -isystem $ENV{EMSDK}/upstream/emscripten/system/include/compat
            -isystem $ENV{EMSDK}/upstream/emscripten/system/include
            -isystem $ENV{EMSDK}/upstream/emscripten/system/include/libc
            -isystem $ENV{EMSDK}/upstream/emscripten/system/lib/libc/musl/arch/emscripten
            -isystem $ENV{EMSDK}/upstream/emscripten/system/local/include
            )
    else()
        set(scapix_clang_config)
    endif()

    add_custom_command(
            OUTPUT ${output_files_java} ${output_files_objc} ${output_files_python} ${output_files_js}
            COMMAND ${SCAPIX_EXE_DIR}/${CMAKE_HOST_SYSTEM_NAME}-${CMAKE_HOST_SYSTEM_PROCESSOR}/scapix -scapix-domain=${domain} ${bridge_header} -- -xc++ -std=c++17 ${scapix_clang_config} "$<$<BOOL:${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES}>:-I$<JOIN:${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES},;-I>>" "$<$<BOOL:$<TARGET_PROPERTY:${target},INCLUDE_DIRECTORIES>>:-I$<JOIN:$<TARGET_PROPERTY:${target},INCLUDE_DIRECTORIES>,;-I>>" "$<$<BOOL:$<TARGET_PROPERTY:${target},COMPILE_DEFINITIONS>>:-D$<JOIN:$<TARGET_PROPERTY:${target},COMPILE_DEFINITIONS>,;-D>>"
            DEPENDS ${bridge_header}
            IMPLICIT_DEPENDS CXX ${bridge_header}
            WORKING_DIRECTORY ${PROJECT_ROOT}
            COMMENT "Running Scapix Bridge for ${bridge_header_relative}"
            COMMAND_EXPAND_LISTS
            VERBATIM
    )

endforeach(bridge_header)

set(generated_sources
    ${generated_sources_java}
    ${generated_sources_objc}
    ${generated_sources_python}
    ${generated_sources_js}
)

# GENERATED property implicitly set for OUTPUT arguments of add_custom_command()
#set_source_files_properties(${generated_sources} PROPERTIES GENERATED TRUE)

string(CONCAT generated_sources_var_name "generated_sources_" ${SCAPIX_BRIDGE})

set_source_files_properties(${generated_sources} PROPERTIES HEADER_FILE_ONLY TRUE)
set_source_files_properties(${${generated_sources_var_name}} PROPERTIES HEADER_FILE_ONLY FALSE)

target_sources(${target} PUBLIC ${generated_sources})
source_group(TREE ${PROJECT_ROOT}/generated PREFIX "generated" FILES ${generated_sources})

endfunction(scapix_bridge_headers)

function(scapix_add_target target domain)
    set(bridge_headers ${ARGN})
    if(EMSCRIPTEN)
        add_executable(${target})
        target_link_options(${target} PRIVATE --bind)
    #   target_link_options(${target} PRIVATE --emrun)
    else()
        if(${SCAPIX_BRIDGE} STREQUAL java OR ${SCAPIX_BRIDGE} STREQUAL python)
            set(LIBRARY_TYPE MODULE)
            set(CMAKE_POSITION_INDEPENDENT_CODE ON)
        endif()
        add_library(${target} ${LIBRARY_TYPE})
    endif()
    scapix_bridge_headers(${target} ${domain} ${bridge_headers})
endfunction(scapix_add_target)
